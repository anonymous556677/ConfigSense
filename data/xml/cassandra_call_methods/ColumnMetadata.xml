<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/schema/ColumnMetadata.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>function</name><operator>.</operator><name>Predicate</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>MoreObjects</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Collections2</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>selection</name><operator>.</operator><name>Selectable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>selection</name><operator>.</operator><name>Selector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>selection</name><operator>.</operator><name>SimpleSelector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>rows</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>InvalidRequestException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>serializers</name><operator>.</operator><name>MarshalException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>ByteBufferUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>github</name><operator>.</operator><name>jamm</name><operator>.</operator><name>Unmetered</name></name>;</import>

<class><annotation>@<name>Unmetered</name></annotation>
<specifier>public</specifier> <specifier>final</specifier> class <name>ColumnMetadata</name> <super_list><extends>extends <super><name>ColumnSpecification</name></super></extends> <implements>implements <super><name>Selectable</name></super>, <super><name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></super></implements></super_list>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>asymmetricColumnDataComparator</name> <init>=
        <expr><lambda><parameter_list>(<parameter><decl><name>a</name></decl></parameter>, <parameter><decl><name>b</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><operator>(</operator><operator>(</operator><name>ColumnData</name><operator>)</operator> <name>a</name><operator>)</operator><operator>.</operator><call><name>column</name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><operator>(</operator><name>ColumnMetadata</name><operator>)</operator> <name>b</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>NO_POSITION</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <enum><specifier>public</specifier> enum <name>ClusteringOrder</name>
    <block>{
        <decl><name>ASC</name></decl>, <decl><name>DESC</name></decl>, <decl><name>NONE</name></decl>
    }</block></enum>

    <comment type="block" format="javadoc">/**
     * The type of CQL3 column this definition represents.
     * There is 4 main type of CQL3 columns: those parts of the partition key,
     * those parts of the clustering columns and amongst the others, regular and
     * static ones.
     *
     * IMPORTANT: this enum is serialized as toString() and deserialized by calling
     * Kind.valueOf(), so do not override toString() or rename existing values.
     */</comment>
    <enum><specifier>public</specifier> enum <name>Kind</name>
    <block>{
        <comment type="line">// NOTE: if adding a new type, must modify comparisonOrder</comment>
        <decl><name>PARTITION_KEY</name></decl>,
        <decl><name>CLUSTERING</name></decl>,
        <decl><name>REGULAR</name></decl>,
        <decl><name>STATIC</name></decl>;

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isPrimaryKeyKind</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>this</name> <operator>==</operator> <name>PARTITION_KEY</name> <operator>||</operator> <name>this</name> <operator>==</operator> <name>CLUSTERING</name></expr>;</return>
        </block_content>}</block></function>

    }</block></enum>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Kind</name></type> <name>kind</name></decl>;</decl_stmt>

    <comment type="block">/*
     * If the column is a partition key or clustering column, its position relative to
     * other columns of the same kind. Otherwise,  NO_POSITION (-1).
     *
     * Note that partition key and clustering columns are numbered separately so
     * the first clustering column is 0.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>position</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>CellPath</name></argument>&gt;</argument_list></name></type> <name>cellPathComparator</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>asymmetricCellPathComparator</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>?</name> <super>super <name><name>Cell</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></super></argument>&gt;</argument_list></name></type> <name>cellComparator</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>hash</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * These objects are compared frequently, so we encode several of their comparison components
     * into a single long value so that this can be done efficiently
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>long</name></type> <name>comparisonOrder</name></decl>;</decl_stmt>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>long</name></type> <name>comparisonOrder</name><parameter_list>(<parameter><decl><type><name>Kind</name></type> <name>kind</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isComplex</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>ColumnIdentifier</name></type> <name>name</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><name>position</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>position</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</assert>
        <return>return   <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <call><name><name>kind</name><operator>.</operator><name>ordinal</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">61</literal><operator>)</operator>
               <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>isComplex</name></expr> ?</condition><then> <expr><literal type="number">1L</literal> <operator>&lt;&lt;</operator> <literal type="number">60</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>
               <operator>|</operator> <operator>(</operator><name>position</name> <operator>&lt;&lt;</operator> <literal type="number">48</literal><operator>)</operator>
               <operator>|</operator> <operator>(</operator><name><name>name</name><operator>.</operator><name>prefixComparison</name></name> <operator>&gt;&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ColumnMetadata</name></type> <name>partitionKeyColumn</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>ColumnMetadata</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name><name>Kind</name><operator>.</operator><name>PARTITION_KEY</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ColumnMetadata</name></type> <name>partitionKeyColumn</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>ColumnMetadata</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><call><name><name>ColumnIdentifier</name><operator>.</operator><name>getInterned</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name><name>Kind</name><operator>.</operator><name>PARTITION_KEY</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ColumnMetadata</name></type> <name>clusteringColumn</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>ColumnMetadata</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name><name>Kind</name><operator>.</operator><name>CLUSTERING</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ColumnMetadata</name></type> <name>clusteringColumn</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>ColumnMetadata</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><call><name><name>ColumnIdentifier</name><operator>.</operator><name>getInterned</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name><name>Kind</name><operator>.</operator><name>CLUSTERING</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ColumnMetadata</name></type> <name>regularColumn</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>type</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>ColumnMetadata</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>NO_POSITION</name></expr></argument>, <argument><expr><name><name>Kind</name><operator>.</operator><name>REGULAR</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ColumnMetadata</name></type> <name>regularColumn</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>type</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>ColumnMetadata</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><call><name><name>ColumnIdentifier</name><operator>.</operator><name>getInterned</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>NO_POSITION</name></expr></argument>, <argument><expr><name><name>Kind</name><operator>.</operator><name>REGULAR</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ColumnMetadata</name></type> <name>staticColumn</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>type</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>ColumnMetadata</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>NO_POSITION</name></expr></argument>, <argument><expr><name><name>Kind</name><operator>.</operator><name>STATIC</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ColumnMetadata</name></type> <name>staticColumn</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>type</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>ColumnMetadata</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><call><name><name>ColumnIdentifier</name><operator>.</operator><name>getInterned</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>NO_POSITION</name></expr></argument>, <argument><expr><name><name>Kind</name><operator>.</operator><name>STATIC</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <constructor><specifier>public</specifier> <name>ColumnMetadata</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>Kind</name></type> <name>kind</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name><name>table</name><operator>.</operator><name>keyspace</name></name></expr></argument>,
             <argument><expr><name><name>table</name><operator>.</operator><name>name</name></name></expr></argument>,
             <argument><expr><call><name><name>ColumnIdentifier</name><operator>.</operator><name>getInterned</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>UTF8Type</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><name>type</name></expr></argument>,
             <argument><expr><name>position</name></expr></argument>,
             <argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><annotation>@<name>VisibleForTesting</name></annotation>
    <specifier>public</specifier> <name>ColumnMetadata</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ksName</name></decl></parameter>,
                          <parameter><decl><type><name>String</name></type> <name>cfName</name></decl></parameter>,
                          <parameter><decl><type><name>ColumnIdentifier</name></type> <name>name</name></decl></parameter>,
                          <parameter><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>type</name></decl></parameter>,
                          <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>,
                          <parameter><decl><type><name>Kind</name></type> <name>kind</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>ksName</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <assert>assert <expr><name>name</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>kind</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
        <assert>assert <expr><operator>(</operator><name>position</name> <operator>==</operator> <name>NO_POSITION</name><operator>)</operator> <operator>==</operator> <operator>!</operator><call><name><name>kind</name><operator>.</operator><name>isPrimaryKeyKind</name></name><argument_list>()</argument_list></call></expr>;</assert> <comment type="line">// The position really only make sense for partition and clustering columns (and those must have one),</comment>
                                                                      <comment type="line">// so make sure we don't sneak it for something else since it'd breaks equals()</comment>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>kind</name></name> <operator>=</operator> <name>kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>position</name></name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cellPathComparator</name></name> <operator>=</operator> <call><name>makeCellPathComparator</name><argument_list>(<argument><expr><name>kind</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cellComparator</name></name> <operator>=</operator> <ternary><condition><expr><name>cellPathComparator</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>ColumnData</name><operator>.</operator><name>comparator</name></name></expr> </then><else>: <expr><lambda><parameter_list>(<parameter><decl><name>a</name></decl></parameter>, <parameter><decl><name>b</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>cellPathComparator</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>path</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>b</name><operator>.</operator><name>path</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>asymmetricCellPathComparator</name></name> <operator>=</operator> <ternary><condition><expr><name>cellPathComparator</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><lambda><parameter_list>(<parameter><decl><name>a</name></decl></parameter>, <parameter><decl><name>b</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>cellPathComparator</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name><name>Cell</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><operator>)</operator><name>a</name><operator>)</operator><operator>.</operator><call><name>path</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>CellPath</name><operator>)</operator> <name>b</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>comparisonOrder</name></name> <operator>=</operator> <call><name>comparisonOrder</name><argument_list>(<argument><expr><name>kind</name></expr></argument>, <argument><expr><call><name>isComplex</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>CellPath</name></argument>&gt;</argument_list></name></type> <name>makeCellPathComparator</name><parameter_list>(<parameter><decl><type><name>Kind</name></type> <name>kind</name></decl></parameter>, <parameter><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>type</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>kind</name><operator>.</operator><name>isPrimaryKeyKind</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>type</name><operator>.</operator><name>isMultiCell</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>nameComparator</name> <init>= <expr><ternary><condition><expr><call><name><name>type</name><operator>.</operator><name>isCollection</name></name><argument_list>()</argument_list></call></expr>
                                       ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>CollectionType</name><operator>)</operator> <name>type</name><operator>)</operator><operator>.</operator><call><name>nameComparator</name><argument_list>()</argument_list></call></expr>
                                       </then><else>: <expr><operator>(</operator><operator>(</operator><name>UserType</name><operator>)</operator> <name>type</name><operator>)</operator><operator>.</operator><call><name>nameComparator</name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>


        <return>return <expr><lambda><parameter_list>(<parameter><decl><name>path1</name></decl></parameter>, <parameter><decl><name>path2</name></decl></parameter>)</parameter_list> -&gt;
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>path1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name><name>path2</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>path1</name> <operator>==</operator> <name><name>CellPath</name><operator>.</operator><name>BOTTOM</name></name></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><ternary><condition><expr><name>path2</name> <operator>==</operator> <name><name>CellPath</name><operator>.</operator><name>BOTTOM</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>path1</name> <operator>==</operator> <name><name>CellPath</name><operator>.</operator><name>TOP</name></name></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><ternary><condition><expr><name>path2</name> <operator>==</operator> <name><name>CellPath</name><operator>.</operator><name>TOP</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
                <return>return <expr><ternary><condition><expr><name>path2</name> <operator>==</operator> <name><name>CellPath</name><operator>.</operator><name>BOTTOM</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// This will get more complicated once we have non-frozen UDT and nested collections</comment>
            <assert>assert <expr><call><name><name>path1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name><name>path2</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>;</assert>
            <return>return <expr><call><name><name>nameComparator</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><call><name><name>path1</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>path2</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></lambda></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>ColumnMetadata</name></type> <name>copy</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>ColumnMetadata</name><argument_list>(<argument><expr><name>ksName</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>ColumnMetadata</name></type> <name>withNewName</name><parameter_list>(<parameter><decl><type><name>ColumnIdentifier</name></type> <name>newName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>ColumnMetadata</name><argument_list>(<argument><expr><name>ksName</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr><name>newName</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>ColumnMetadata</name></type> <name>withNewType</name><parameter_list>(<parameter><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>newType</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>ColumnMetadata</name><argument_list>(<argument><expr><name>ksName</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>newType</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isPartitionKey</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>kind</name> <operator>==</operator> <name><name>Kind</name><operator>.</operator><name>PARTITION_KEY</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isClusteringColumn</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>kind</name> <operator>==</operator> <name><name>Kind</name><operator>.</operator><name>CLUSTERING</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isStatic</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>kind</name> <operator>==</operator> <name><name>Kind</name><operator>.</operator><name>STATIC</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isRegular</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>kind</name> <operator>==</operator> <name><name>Kind</name><operator>.</operator><name>REGULAR</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>ClusteringOrder</name></type> <name>clusteringOrder</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isClusteringColumn</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name><name>ClusteringOrder</name><operator>.</operator><name>NONE</name></name></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><ternary><condition><expr><call><name><name>type</name><operator>.</operator><name>isReversed</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>ClusteringOrder</name><operator>.</operator><name>DESC</name></name></expr> </then><else>: <expr><name><name>ClusteringOrder</name><operator>.</operator><name>ASC</name></name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>position</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>position</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>o</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>o</name> <operator>instanceof</operator> <name>ColumnMetadata</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>ColumnMetadata</name></type> <name>cd</name> <init>= <expr><operator>(</operator><name>ColumnMetadata</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name>equalsWithoutType</name><argument_list>(<argument><expr><name>cd</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>type</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>cd</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>equalsWithoutType</name><parameter_list>(<parameter><decl><type><name>ColumnMetadata</name></type> <name>other</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>name</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call>
            <operator>&amp;&amp;</operator> <name>kind</name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>kind</name></name>
            <operator>&amp;&amp;</operator> <name>position</name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>position</name></name>
            <operator>&amp;&amp;</operator> <call><name><name>ksName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>ksName</name></name></expr></argument>)</argument_list></call>
            <operator>&amp;&amp;</operator> <call><name><name>cfName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>cfName</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>Difference</name></argument>&gt;</argument_list></name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>ColumnMetadata</name></type> <name>other</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>equalsWithoutType</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name><name>Difference</name><operator>.</operator><name>SHALLOW</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>type</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><ternary><condition><expr><call><name><name>type</name><operator>.</operator><name>asCQL3Type</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>type</name><operator>.</operator><name>asCQL3Type</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>
             ?</condition><then> <expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name><name>Difference</name><operator>.</operator><name>DEEP</name></name></expr></argument>)</argument_list></call></expr>
             </then><else>: <expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name><name>Difference</name><operator>.</operator><name>SHALLOW</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <comment type="line">// This achieves the same as Objects.hashcode, but avoids the object array allocation</comment>
        <comment type="line">// which features significantly in the allocation profile and caches the result.</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><name>hash</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>ksName</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>ksName</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>cfName</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>cfName</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>name</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>name</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>type</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>type</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>kind</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>kind</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <name>position</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>hash</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>name</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>debugString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>MoreObjects</name><operator>.</operator><name>toStringHelper</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"kind"</literal></expr></argument>, <argument><expr><name>kind</name></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"position"</literal></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isPrimaryKeyColumn</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>kind</name><operator>.</operator><name>isPrimaryKeyKind</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>selectColumns</name><parameter_list>(<parameter><decl><type><name><name>Predicate</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>predicate</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>predicate</name><operator>.</operator><name>test</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>processesSelection</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Converts the specified column definitions into column identifiers.
     *
     * @param definitions the column definitions to convert.
     * @return the column identifiers corresponding to the specified definitions
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>&gt;</argument_list></name></type> <name>toIdentifiers</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>definitions</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Collections2</name><operator>.</operator><name>transform</name></name><argument_list>(<argument><expr><name>definitions</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>columnDef</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>columnDef</name><operator>.</operator><name>name</name></name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<parameter><decl><type><name>ColumnMetadata</name></type> <name>other</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>other</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>comparisonOrder</name> <operator>!=</operator> <name><name>other</name><operator>.</operator><name>comparisonOrder</name></name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>Long</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name>comparisonOrder</name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>comparisonOrder</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><call><name><name>this</name><operator>.</operator><name>name</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>CellPath</name></argument>&gt;</argument_list></name></type> <name>cellPathComparator</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>cellPathComparator</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>asymmetricCellPathComparator</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>asymmetricCellPathComparator</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>?</name> <super>super <name><name>Cell</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></super></argument>&gt;</argument_list></name></type> <name>cellComparator</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>cellComparator</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isComplex</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>cellPathComparator</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSimple</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>!</operator><call><name>isComplex</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>CellPath</name><operator>.</operator><name>Serializer</name></name></type> <name>cellPathSerializer</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <comment type="line">// Collections are our only complex so far, so keep it simple</comment>
        <return>return <expr><name><name>CollectionType</name><operator>.</operator><name>cellPathSerializer</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>V</name></parameter>&gt;</parameter_list> <name>void</name></type> <name>validateCell</name><parameter_list>(<parameter><decl><type><name><name>Cell</name><argument_list type="generic">&lt;<argument><name>V</name></argument>&gt;</argument_list></name></type> <name>cell</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>cell</name><operator>.</operator><name>isTombstone</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>cell</name><operator>.</operator><name>valueSize</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>MarshalException</name><argument_list>(<argument><expr><literal type="string">"A tombstone should not have a value"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>cell</name><operator>.</operator><name>path</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>validateCellPath</name><argument_list>(<argument><expr><call><name><name>cell</name><operator>.</operator><name>path</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if<condition>(<expr><call><name><name>type</name><operator>.</operator><name>isUDT</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// To validate a non-frozen UDT field, both the path and the value</comment>
            <comment type="line">// are needed, the path being an index into an array of value types.</comment>
            <expr_stmt><expr><operator>(</operator><operator>(</operator><name>UserType</name><operator>)</operator><name>type</name><operator>)</operator><operator>.</operator><call><name>validateCell</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>type</name><operator>.</operator><name>validateCellValue</name></name><argument_list>(<argument><expr><call><name><name>cell</name><operator>.</operator><name>value</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cell</name><operator>.</operator><name>accessor</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>cell</name><operator>.</operator><name>path</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>validateCellPath</name><argument_list>(<argument><expr><call><name><name>cell</name><operator>.</operator><name>path</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>validateCellPath</name><parameter_list>(<parameter><decl><type><name>CellPath</name></type> <name>path</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isComplex</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>MarshalException</name><argument_list>(<argument><expr><literal type="string">"Only complex cells should have a cell path"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <assert>assert <expr><call><name><name>type</name><operator>.</operator><name>isMultiCell</name></name><argument_list>()</argument_list></call></expr>;</assert>
        <if_stmt><if>if <condition>(<expr><call><name><name>type</name><operator>.</operator><name>isCollection</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>(</operator><operator>(</operator><name>CollectionType</name><operator>)</operator><name>type</name><operator>)</operator><operator>.</operator><call><name>nameComparator</name><argument_list>()</argument_list></call><operator>.</operator><call><name>validate</name><argument_list>(<argument><expr><call><name><name>path</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><operator>(</operator><operator>(</operator><name>UserType</name><operator>)</operator><name>type</name><operator>)</operator><operator>.</operator><call><name>nameComparator</name><argument_list>()</argument_list></call><operator>.</operator><call><name>validate</name><argument_list>(<argument><expr><call><name><name>path</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>appendCqlTo</name><parameter_list>(<parameter><decl><type><name>CqlBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>isStatic</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" static"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>toCQLString</name><parameter_list>(<parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>defs</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>toCQLString</name><argument_list>(<argument><expr><call><name><name>defs</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>toCQLString</name><parameter_list>(<parameter><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>defs</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>defs</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="string">""</literal></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>defs</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><call><name><name>defs</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>defs</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
        <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>


    <function><type><specifier>public</specifier> <name>void</name></type> <name>appendNameAndOrderTo</name><parameter_list>(<parameter><decl><type><name>CqlBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>name</name><operator>.</operator><name>toCQLString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name>clusteringOrder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * The type of the cell values for cell belonging to this column.
     *
     * This is the same than the column type, except for non-frozen collections where it's the 'valueComparator'
     * of the collection.
     * 
     * This method should not be used to get value type of non-frozon UDT.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>cellValueType</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><operator>!</operator><operator>(</operator><name>type</name> <operator>instanceof</operator> <name>UserType</name> <operator>&amp;&amp;</operator> <call><name><name>type</name><operator>.</operator><name>isMultiCell</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</assert>
        <return>return <expr><ternary><condition><expr><name>type</name> <operator>instanceof</operator> <name>CollectionType</name> <operator>&amp;&amp;</operator> <call><name><name>type</name><operator>.</operator><name>isMultiCell</name></name><argument_list>()</argument_list></call></expr>
                ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>CollectionType</name><operator>)</operator><name>type</name><operator>)</operator><operator>.</operator><call><name>valueComparator</name><argument_list>()</argument_list></call></expr>
                </then><else>: <expr><name>type</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check if column is counter type.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isCounterColumn</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>instanceof</operator> <name>CollectionType</name></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// Possible with, for example, supercolumns</comment>
            <return>return <expr><operator>(</operator><operator>(</operator><name>CollectionType</name><operator>)</operator> <name>type</name><operator>)</operator><operator>.</operator><call><name>valueComparator</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isCounter</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><call><name><name>type</name><operator>.</operator><name>isCounter</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Selector</name><operator>.</operator><name>Factory</name></name></type> <name>newSelectorFactory</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>expectedType</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>defs</name></decl></parameter>, <parameter><decl><type><name>VariableSpecifications</name></type> <name>boundNames</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{<block_content>
        <return>return <expr><call><name><name>SimpleSelector</name><operator>.</operator><name>newFactory</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>addAndGetIndex</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>defs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getExactTypeIfKnown</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>type</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
