<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/db/marshal/ValueAccessor.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>charset</name><operator>.</operator><name>CharacterCodingException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>charset</name><operator>.</operator><name>Charset</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>charset</name><operator>.</operator><name>StandardCharsets</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>Clustering</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>ClusteringBound</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>ClusteringBoundOrBoundary</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>ClusteringBoundary</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>ClusteringPrefix</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>Digest</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>TypeSizes</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>rows</name><operator>.</operator><name>Cell</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>rows</name><operator>.</operator><name>CellPath</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>DataInputPlus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>DataOutputPlus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>ColumnMetadata</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>ClusteringPrefix</name><operator>.</operator><name>Kind</name><operator>.</operator><name>*</name></name>;</import>

<comment type="block" format="javadoc">/**
 * ValueAccessor allows serializers and other code dealing with raw bytes to operate on different backing types
 * (ie: byte arrays, byte buffers, etc) without requiring that the supported backing types share a common type
 * ancestor and without incuring the allocation cost of a wrapper object.
 *
 * A note on byte buffers for implementors: the "value" of a byte buffer is always interpreted as beginning at
 * it's {@link ByteBuffer#position()} and having a length of {@link ByteBuffer#remaining()}. ValueAccessor
 * implementations need to maintain this internally. ValueAccessors should also never modify the state of the
 * byte buffers view (ie: offset, limit). This would also apply to value accessors for simlilar types
 * (ie: netty's ByteBuf}.
 *
 * @param &lt;V&gt; the backing type
 */</comment>
<interface><specifier>public</specifier> interface <name><name>ValueAccessor</name><parameter_list>&lt;<parameter><name>V</name></parameter>&gt;</parameter_list></name>
<block>{

    <comment type="block" format="javadoc">/**
     * Creates db objects using the given accessors value type. ObjectFactory instances are meant to be returned
     * by the factory() method of a value accessor.
     * @param &lt;V&gt; the backing type
     */</comment>
    <interface><specifier>public</specifier> interface <name><name>ObjectFactory</name><parameter_list>&lt;<parameter><name>V</name></parameter>&gt;</parameter_list></name>
    <block>{
        <function_decl><type><name><name>Cell</name><argument_list type="generic">&lt;<argument><name>V</name></argument>&gt;</argument_list></name></type> <name>cell</name><parameter_list>(<parameter><decl><type><name>ColumnMetadata</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ttl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>localDeletionTime</name></decl></parameter>, <parameter><decl><type><name>V</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>CellPath</name></type> <name>path</name></decl></parameter>)</parameter_list>;</function_decl>
        <function_decl><type><name><name>Clustering</name><argument_list type="generic">&lt;<argument><name>V</name></argument>&gt;</argument_list></name></type> <name>clustering</name><parameter_list>(<parameter><decl><type><name>V</name><modifier>...</modifier></type> <name>values</name></decl></parameter>)</parameter_list>;</function_decl>
        <function_decl><type><name><name>Clustering</name><argument_list type="generic">&lt;<argument><name>V</name></argument>&gt;</argument_list></name></type> <name>clustering</name><parameter_list>()</parameter_list>;</function_decl>
        <function_decl><type><name><name>ClusteringBound</name><argument_list type="generic">&lt;<argument><name>V</name></argument>&gt;</argument_list></name></type> <name>bound</name><parameter_list>(<parameter><decl><type><name><name>ClusteringPrefix</name><operator>.</operator><name>Kind</name></name></type> <name>kind</name></decl></parameter>, <parameter><decl><type><name>V</name><modifier>...</modifier></type> <name>values</name></decl></parameter>)</parameter_list>;</function_decl>
        <function_decl><type><name><name>ClusteringBound</name><argument_list type="generic">&lt;<argument><name>V</name></argument>&gt;</argument_list></name></type> <name>bound</name><parameter_list>(<parameter><decl><type><name><name>ClusteringPrefix</name><operator>.</operator><name>Kind</name></name></type> <name>kind</name></decl></parameter>)</parameter_list>;</function_decl>
        <function_decl><type><name><name>ClusteringBoundary</name><argument_list type="generic">&lt;<argument><name>V</name></argument>&gt;</argument_list></name></type> <name>boundary</name><parameter_list>(<parameter><decl><type><name><name>ClusteringPrefix</name><operator>.</operator><name>Kind</name></name></type> <name>kind</name></decl></parameter>, <parameter><decl><type><name>V</name><modifier>...</modifier></type> <name>values</name></decl></parameter>)</parameter_list>;</function_decl>
        <function><type><specifier>default</specifier> <name><name>ClusteringBoundOrBoundary</name><argument_list type="generic">&lt;<argument><name>V</name></argument>&gt;</argument_list></name></type> <name>boundOrBoundary</name><parameter_list>(<parameter><decl><type><name><name>ClusteringPrefix</name><operator>.</operator><name>Kind</name></name></type> <name>kind</name></decl></parameter>, <parameter><decl><type><name>V</name><modifier>...</modifier></type> <name>values</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><ternary><condition><expr><call><name><name>kind</name><operator>.</operator><name>isBoundary</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name>boundary</name><argument_list>(<argument><expr><name>kind</name></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>bound</name><argument_list>(<argument><expr><name>kind</name></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>default</specifier> <name><name>ClusteringBound</name><argument_list type="generic">&lt;<argument><name>V</name></argument>&gt;</argument_list></name></type> <name>inclusiveOpen</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>reversed</name></decl></parameter>, <parameter><decl><type><name><name>V</name><index>[]</index></name></type> <name>boundValues</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name>bound</name><argument_list>(<argument><expr><ternary><condition><expr><name>reversed</name></expr> ?</condition><then> <expr><name>INCL_END_BOUND</name></expr> </then><else>: <expr><name>INCL_START_BOUND</name></expr></else></ternary></expr></argument>, <argument><expr><name>boundValues</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>default</specifier> <name><name>ClusteringBound</name><argument_list type="generic">&lt;<argument><name>V</name></argument>&gt;</argument_list></name></type> <name>exclusiveOpen</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>reversed</name></decl></parameter>, <parameter><decl><type><name><name>V</name><index>[]</index></name></type> <name>boundValues</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name>bound</name><argument_list>(<argument><expr><ternary><condition><expr><name>reversed</name></expr> ?</condition><then> <expr><name>EXCL_END_BOUND</name></expr> </then><else>: <expr><name>EXCL_START_BOUND</name></expr></else></ternary></expr></argument>, <argument><expr><name>boundValues</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>default</specifier> <name><name>ClusteringBound</name><argument_list type="generic">&lt;<argument><name>V</name></argument>&gt;</argument_list></name></type> <name>inclusiveClose</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>reversed</name></decl></parameter>, <parameter><decl><type><name><name>V</name><index>[]</index></name></type> <name>boundValues</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name>bound</name><argument_list>(<argument><expr><ternary><condition><expr><name>reversed</name></expr> ?</condition><then> <expr><name>INCL_START_BOUND</name></expr> </then><else>: <expr><name>INCL_END_BOUND</name></expr></else></ternary></expr></argument>, <argument><expr><name>boundValues</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>default</specifier> <name><name>ClusteringBound</name><argument_list type="generic">&lt;<argument><name>V</name></argument>&gt;</argument_list></name></type> <name>exclusiveClose</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>reversed</name></decl></parameter>, <parameter><decl><type><name><name>V</name><index>[]</index></name></type> <name>boundValues</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name>bound</name><argument_list>(<argument><expr><ternary><condition><expr><name>reversed</name></expr> ?</condition><then> <expr><name>EXCL_START_BOUND</name></expr> </then><else>: <expr><name>EXCL_END_BOUND</name></expr></else></ternary></expr></argument>, <argument><expr><name>boundValues</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>default</specifier> <name><name>ClusteringBoundary</name><argument_list type="generic">&lt;<argument><name>V</name></argument>&gt;</argument_list></name></type> <name>inclusiveCloseExclusiveOpen</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>reversed</name></decl></parameter>, <parameter><decl><type><name><name>V</name><index>[]</index></name></type> <name>boundValues</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name>boundary</name><argument_list>(<argument><expr><ternary><condition><expr><name>reversed</name></expr> ?</condition><then> <expr><name>EXCL_END_INCL_START_BOUNDARY</name></expr> </then><else>: <expr><name>INCL_END_EXCL_START_BOUNDARY</name></expr></else></ternary></expr></argument>, <argument><expr><name>boundValues</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>default</specifier> <name><name>ClusteringBoundary</name><argument_list type="generic">&lt;<argument><name>V</name></argument>&gt;</argument_list></name></type> <name>exclusiveCloseInclusiveOpen</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>reversed</name></decl></parameter>, <parameter><decl><type><name><name>V</name><index>[]</index></name></type> <name>boundValues</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name>boundary</name><argument_list>(<argument><expr><ternary><condition><expr><name>reversed</name></expr> ?</condition><then> <expr><name>INCL_END_EXCL_START_BOUNDARY</name></expr> </then><else>: <expr><name>EXCL_END_INCL_START_BOUNDARY</name></expr></else></ternary></expr></argument>, <argument><expr><name>boundValues</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

    }</block></interface>
    <comment type="block" format="javadoc">/**
     * @return the size of the given value
     */</comment>
    <function_decl><type><name>int</name></type> <name>size</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** serializes size including a vint length prefix */</comment>
    <function><type><specifier>default</specifier> <name>int</name></type> <name>sizeWithVIntLength</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>size</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>TypeSizes</name><operator>.</operator><name>sizeofUnsignedVInt</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>size</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** serialized size including a short length prefix */</comment>
    <function><type><specifier>default</specifier> <name>int</name></type> <name>sizeWithShortLength</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><literal type="number">2</literal> <operator>+</operator> <call><name>size</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return true if the size of the given value is zero, false otherwise
     */</comment>
    <function><type><specifier>default</specifier> <name>boolean</name></type> <name>isEmpty</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>size</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return the number of bytes remaining in the value from the given offset
     */</comment>
    <function><type><specifier>default</specifier> <name>int</name></type> <name>sizeFromOffset</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>size</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>offset</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return true if there are no bytes present after the given offset, false otherwise
     */</comment>
    <function><type><specifier>default</specifier> <name>boolean</name></type> <name>isEmptyFromOffset</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>sizeFromOffset</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * allocate an instance of the accessors backing type
     * @param length size of backing typ to allocate
     */</comment>
    <function_decl><type><name><name>V</name><index>[]</index></name></type> <name>createArray</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Write the contents of the given value into the a DataOutputPlus
     */</comment>
    <function_decl><type><name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>DataOutputPlus</name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>

    <function><type><specifier>default</specifier> <name>void</name></type> <name>writeWithVIntLength</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>DataOutputPlus</name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeUnsignedVInt</name></name><argument_list>(<argument><expr><call><name>size</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Write the contents of the given value into the ByteBuffer
     */</comment>
    <function_decl><type><name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>out</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * copy the {@param size} bytes from the {@param src} value, starting at the offset {@param srcOffset} into
     * the {@param dst} value, starting at the offset {@param dstOffset}, using the accessor {@param dstAccessor}
     * @param &lt;V2&gt; the destination value type
     * @return the number of bytes copied ({@param size})
     */</comment>
    <function_decl><type><parameter_list type="generic">&lt;<parameter><name>V2</name></parameter>&gt;</parameter_list> <name>int</name></type> <name>copyTo</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcOffset</name></decl></parameter>, <parameter><decl><type><name>V2</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name><name>ValueAccessor</name><argument_list type="generic">&lt;<argument><name>V2</name></argument>&gt;</argument_list></name></type> <name>dstAccessor</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstOffset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * copies a byte array into this accessors value.
     */</comment>
    <function_decl><type><name>int</name></type> <name>copyByteArrayTo</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcOffset</name></decl></parameter>, <parameter><decl><type><name>V</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstOffset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * copies a byte buffer into this accessors value.
     */</comment>
    <function_decl><type><name>int</name></type> <name>copyByteBufferTo</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcOffset</name></decl></parameter>, <parameter><decl><type><name>V</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstOffset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * updates {@param digest} with {@param size} bytes from the contents of {@param value} starting
     * at offset {@param offset}
     */</comment>
    <function_decl><type><name>void</name></type> <name>digest</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>Digest</name></type> <name>digest</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * updates {@param digest} with te contents of {@param value}
     */</comment>
    <function><type><specifier>default</specifier> <name>void</name></type> <name>digest</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>Digest</name></type> <name>digest</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>digest</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>size</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Reads a value of {@param length} bytes from {@param in}
     */</comment>
    <function_decl><type><name>V</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns a value with the contents of {@param input} from {@param offset} to {@param length}.
     *
     * Depending on the accessor implementation, this method may:
     *  * allocate a new {@param &lt;V&gt;} object of {@param length}, and copy data into it
     *  * return a view of {@param input} where changes to one will be reflected in the other
     */</comment>
    <function_decl><type><name>V</name></type> <name>slice</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * same as {@link ValueAccessor#slice(Object, int, int)}, except the length is taken from the first
     * 2 bytes from the given offset (and not included in the return value)
     */</comment>
    <function><type><specifier>default</specifier> <name>V</name></type> <name>sliceWithShortLength</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>getUnsignedShort</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>slice</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * lexicographically compare {@param left} to {@param right}
     * @param &lt;VR&gt; backing type of
     */</comment>
    <function_decl><type><parameter_list type="generic">&lt;<parameter><name>VR</name></parameter>&gt;</parameter_list> <name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>VR</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name><name>ValueAccessor</name><argument_list type="generic">&lt;<argument><name>VR</name></argument>&gt;</argument_list></name></type> <name>accessorR</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * compare a byte array on the left with a {@param &lt;V&gt;} on the right}
     */</comment>
    <function_decl><type><name>int</name></type> <name>compareByteArrayTo</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>V</name></type> <name>right</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * compare a byte buffer on the left with a {@param &lt;V&gt;} on the right}
     */</comment>
    <function_decl><type><name>int</name></type> <name>compareByteBufferTo</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>V</name></type> <name>right</name></decl></parameter>)</parameter_list>;</function_decl>

    <function><type><specifier>default</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>isize</name><init>=<expr><call><name>size</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>isize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>getByte</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * returns a ByteBuffer with the contents of {@param value}
     *
     * Depending on the accessor implementation, this method may:
     *  * allocate a new ByteBuffer and copy data into it
     *  * return the value, if the backing type is a bytebuffer
     */</comment>
    <function_decl><type><name>ByteBuffer</name></type> <name>toBuffer</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * returns a byte[] with the contents of {@param value}
     *
     * Depending on the accessor implementation, this method may:
     *  * allocate a new byte[] object and copy data into it
     *  * return the value, if the backing type is byte[]
     */</comment>
    <function_decl><type><name><name>byte</name><index>[]</index></name></type> <name>toArray</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * returns a byte[] with {@param length} bytes copied from the contents of {@param value}
     * starting at offset {@param offset}.
     *
     * Depending on the accessor implementation, this method may:
     *  * allocate a new byte[] object and copy data into it
     *  * return the value, if the backing type is byte[], offset is 0 and {@param length} == size(value)
     */</comment>
    <function_decl><type><name><name>byte</name><index>[]</index></name></type> <name>toArray</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>String</name></type> <name>toString</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>Charset</name></type> <name>charset</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>CharacterCodingException</name></expr></argument></throws>;</function_decl>

    <function><type><specifier>default</specifier> <name>String</name></type> <name>toString</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>value</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>CharacterCodingException</name></expr></argument></throws>
    <block>{<block_content>
        <return>return <expr><call><name>toString</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>StandardCharsets</name><operator>.</operator><name>UTF_8</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function_decl><type><name>String</name></type> <name>toHex</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** returns a boolean from offset {@param offset} */</comment>
    <function><type><specifier>default</specifier> <name>boolean</name></type> <name>getBoolean</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getByte</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** returns a byte from offset 0 */</comment>
    <function_decl><type><name>byte</name></type> <name>toByte</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/** returns a byte from offset {@param offset} */</comment>
    <function_decl><type><name>byte</name></type> <name>getByte</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/** returns a short from offset 0 */</comment>
    <function_decl><type><name>short</name></type> <name>toShort</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/** returns a short from offset {@param offset} */</comment>
    <function_decl><type><name>short</name></type> <name>getShort</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/** returns an unsigned short from offset {@param offset} */</comment>
    <function_decl><type><name>int</name></type> <name>getUnsignedShort</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/** returns an int from offset 0 */</comment>
    <function_decl><type><name>int</name></type> <name>toInt</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/** returns an int from offset {@param offset} */</comment>
    <function_decl><type><name>int</name></type> <name>getInt</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/** returns a long from offset 0 */</comment>
    <function_decl><type><name>long</name></type> <name>toLong</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/** returns a long from offset {@param offset} */</comment>
    <function_decl><type><name>long</name></type> <name>getLong</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/** returns a float from offset 0 */</comment>
    <function_decl><type><name>float</name></type> <name>toFloat</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** returns a double from offset 0 */</comment>
    <function_decl><type><name>double</name></type> <name>toDouble</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** returns a UUID from offset 0 */</comment>
    <function_decl><type><name>UUID</name></type> <name>toUUID</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * writes the short value {@param value} to {@param dst} at offset {@param offset}
     * @return the number of bytes written to {@param value}
     */</comment>
    <function_decl><type><name>int</name></type> <name>putShort</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * writes the int value {@param value} to {@param dst} at offset {@param offset}
     * @return the number of bytes written to {@param value}
     */</comment>
    <function_decl><type><name>int</name></type> <name>putInt</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * writes the long value {@param value} to {@param dst} at offset {@param offset}
     * @return the number of bytes written to {@param value}
     */</comment>
    <function_decl><type><name>int</name></type> <name>putLong</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** return a value with a length of 0 */</comment>
    <function_decl><type><name>V</name></type> <name>empty</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * return a value containing the {@param bytes}
     *
     * Caller should assume that modifying the returned value
     * will also modify the contents of {@param bytes}
     */</comment>
    <function_decl><type><name>V</name></type> <name>valueOf</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * return a value containing the {@param bytes}
     *
     * {@param src} and the returned value may share a common byte array instance, so caller should
     * assume that modifying the returned value will also modify the contents of {@param src}
     */</comment>
    <function_decl><type><name>V</name></type> <name>valueOf</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** return a value containing the bytes for the given string and charset */</comment>
    <function_decl><type><name>V</name></type> <name>valueOf</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>Charset</name></type> <name>charset</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** return a value with the bytes from {@param v}*/</comment>
    <function_decl><type><name>V</name></type> <name>valueOf</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/** return a value with the bytes from {@param v}*/</comment>
    <function_decl><type><name>V</name></type> <name>valueOf</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/** return a value with the bytes from {@param v}*/</comment>
    <function_decl><type><name>V</name></type> <name>valueOf</name><parameter_list>(<parameter><decl><type><name>byte</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/** return a value with the bytes from {@param v}*/</comment>
    <function_decl><type><name>V</name></type> <name>valueOf</name><parameter_list>(<parameter><decl><type><name>short</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/** return a value with the bytes from {@param v}*/</comment>
    <function_decl><type><name>V</name></type> <name>valueOf</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/** return a value with the bytes from {@param v}*/</comment>
    <function_decl><type><name>V</name></type> <name>valueOf</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/** return a value with the bytes from {@param v}*/</comment>
    <function_decl><type><name>V</name></type> <name>valueOf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/** return a value with the bytes from {@param v}*/</comment>
    <function_decl><type><name>V</name></type> <name>valueOf</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Convert the data in {@param src} to {@param &lt;V&gt;}
     *
     * {@param src} and the returned value may share a common byte array instance, so caller should
     * assume that modifying the returned value will also modify the contents of {@param src}
     */</comment>
    <function_decl><type><parameter_list type="generic">&lt;<parameter><name>V2</name></parameter>&gt;</parameter_list> <name>V</name></type> <name>convert</name><parameter_list>(<parameter><decl><type><name>V2</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name><name>ValueAccessor</name><argument_list type="generic">&lt;<argument><name>V2</name></argument>&gt;</argument_list></name></type> <name>accessor</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Allocate and return a {@param &lt;V&gt;} instance of {@param size} bytes on the heap.
     */</comment>
    <function_decl><type><name>V</name></type> <name>allocate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * returns the {@link ValueAccessor.ObjectFactory} for the backing type {@param &lt;V&gt;}
     */</comment>
    <function_decl><type><name><name>ObjectFactory</name><argument_list type="generic">&lt;<argument><name>V</name></argument>&gt;</argument_list></name></type> <name>factory</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * lexicographically compare {@param left} to {@param right}
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>L</name></parameter>, <parameter><name>R</name></parameter>&gt;</parameter_list> <name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>L</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name><name>ValueAccessor</name><argument_list type="generic">&lt;<argument><name>L</name></argument>&gt;</argument_list></name></type> <name>leftAccessor</name></decl></parameter>, <parameter><decl><type><name>R</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name><name>ValueAccessor</name><argument_list type="generic">&lt;<argument><name>R</name></argument>&gt;</argument_list></name></type> <name>rightAccessor</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>leftAccessor</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>rightAccessor</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>L</name></parameter>, <parameter><name>R</name></parameter>&gt;</parameter_list> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>L</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name><name>ValueAccessor</name><argument_list type="generic">&lt;<argument><name>L</name></argument>&gt;</argument_list></name></type> <name>leftAccessor</name></decl></parameter>, <parameter><decl><type><name>R</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name><name>ValueAccessor</name><argument_list type="generic">&lt;<argument><name>R</name></argument>&gt;</argument_list></name></type> <name>rightAccessor</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>compare</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>leftAccessor</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>rightAccessor</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>
}</block></interface>
</unit>
