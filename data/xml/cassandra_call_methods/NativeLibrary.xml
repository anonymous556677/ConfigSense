<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/utils/NativeLibrary.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileDescriptor</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Field</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>channels</name><operator>.</operator><name>FileChannel</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>sun</name><operator>.</operator><name>jna</name><operator>.</operator><name>LastErrorException</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>FSWriteError</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>CassandraRelevantProperties</name><operator>.</operator><name>OS_ARCH</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>CassandraRelevantProperties</name><operator>.</operator><name>OS_NAME</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>NativeLibrary</name><operator>.</operator><name>OSType</name><operator>.</operator><name>LINUX</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>NativeLibrary</name><operator>.</operator><name>OSType</name><operator>.</operator><name>MAC</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>NativeLibrary</name><operator>.</operator><name>OSType</name><operator>.</operator><name>WINDOWS</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>NativeLibrary</name><operator>.</operator><name>OSType</name><operator>.</operator><name>AIX</name></name>;</import>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>NativeLibrary</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>NativeLibrary</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <enum><specifier>public</specifier> enum <name>OSType</name>
    <block>{
        <decl><name>LINUX</name></decl>,
        <decl><name>MAC</name></decl>,
        <decl><name>WINDOWS</name></decl>,
        <decl><name>AIX</name></decl>,
        <decl><name>OTHER</name></decl>;
    }</block></enum>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>OSType</name></type> <name>osType</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MCL_CURRENT</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MCL_FUTURE</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>ENOMEM</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>F_GETFL</name>   <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* get file status flags */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>F_SETFL</name>   <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* set file status flags */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>F_NOCACHE</name> <init>= <expr><literal type="number">48</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* Mac OS X specific flag, turns cache on/off */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>O_DIRECT</name>  <init>= <expr><literal type="number">040000</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* fcntl.h */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>O_RDONLY</name>  <init>= <expr><literal type="number">00000000</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* fcntl.h */</comment>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>POSIX_FADV_NORMAL</name>     <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* fadvise.h */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>POSIX_FADV_RANDOM</name>     <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* fadvise.h */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>POSIX_FADV_SEQUENTIAL</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* fadvise.h */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>POSIX_FADV_WILLNEED</name>   <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* fadvise.h */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>POSIX_FADV_DONTNEED</name>   <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* fadvise.h */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>POSIX_FADV_NOREUSE</name>    <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* fadvise.h */</comment>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>NativeLibraryWrapper</name></type> <name>wrappedLibrary</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>jnaLockable</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Field</name></type> <name>FILE_DESCRIPTOR_FD_FIELD</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Field</name></type> <name>FILE_CHANNEL_FD_FIELD</name></decl>;</decl_stmt>

    <static>static
    <block>{<block_content>
        <expr_stmt><expr><name>FILE_DESCRIPTOR_FD_FIELD</name> <operator>=</operator> <call><name><name>FBUtilities</name><operator>.</operator><name>getProtectedField</name></name><argument_list>(<argument><expr><name><name>FileDescriptor</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><literal type="string">"fd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><name>FILE_CHANNEL_FD_FIELD</name> <operator>=</operator> <call><name><name>FBUtilities</name><operator>.</operator><name>getProtectedField</name></name><argument_list>(<argument><expr><call><name><name>Class</name><operator>.</operator><name>forName</name></name><argument_list>(<argument><expr><literal type="string">"sun.nio.ch.FileChannelImpl"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"fd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>ClassNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>

        <comment type="line">// detect the OS type the JVM is running on and then set the CLibraryWrapper</comment>
        <comment type="line">// instance to a compatable implementation of CLibraryWrapper for that OS type</comment>
        <expr_stmt><expr><name>osType</name> <operator>=</operator> <call><name>getOsType</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <switch>switch <condition>(<expr><name>osType</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>MAC</name></expr>:</case> <expr_stmt><expr><name>wrappedLibrary</name> <operator>=</operator> <operator>new</operator> <call><name>NativeLibraryDarwin</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
            <case>case <expr><name>WINDOWS</name></expr>:</case> <expr_stmt><expr><name>wrappedLibrary</name> <operator>=</operator> <operator>new</operator> <call><name>NativeLibraryWindows</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
            <case>case <expr><name>LINUX</name></expr>:</case>
            <case>case <expr><name>AIX</name></expr>:</case>
            <case>case <expr><name>OTHER</name></expr>:</case>
            <default>default:</default> <expr_stmt><expr><name>wrappedLibrary</name> <operator>=</operator> <operator>new</operator> <call><name>NativeLibraryLinux</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></switch>

        <if_stmt><if>if <condition>(<expr><call><name><name>OS_ARCH</name><operator>.</operator><name>getString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><literal type="string">"ppc"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>osType</name> <operator>==</operator> <name>LINUX</name></expr>)</condition>
            <block>{<block_content>
               <expr_stmt><expr><name>MCL_CURRENT</name> <operator>=</operator> <literal type="number">0x2000</literal></expr>;</expr_stmt>
               <expr_stmt><expr><name>MCL_FUTURE</name> <operator>=</operator> <literal type="number">0x4000</literal></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>osType</name> <operator>==</operator> <name>AIX</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>MCL_CURRENT</name> <operator>=</operator> <literal type="number">0x100</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>MCL_FUTURE</name> <operator>=</operator> <literal type="number">0x200</literal></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name>MCL_CURRENT</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>MCL_FUTURE</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>MCL_CURRENT</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>MCL_FUTURE</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></static>

    <constructor><specifier>private</specifier> <name>NativeLibrary</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * @return the detected OSType of the Operating System running the JVM using crude string matching
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>OSType</name></type> <name>getOsType</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>osName</name> <init>= <expr><call><name><name>OS_NAME</name><operator>.</operator><name>getString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if  <condition>(<expr><call><name><name>osName</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"linux"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>LINUX</name></expr>;</return></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name><name>osName</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"mac"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>MAC</name></expr>;</return></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name><name>osName</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"windows"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>WINDOWS</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"the current operating system, {}, is unsupported by cassandra"</literal></expr></argument>, <argument><expr><name>osName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>osName</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"aix"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>AIX</name></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <comment type="line">// fall back to the Linux impl for all unknown OS types until otherwise implicitly supported as needed</comment>
            <return>return <expr><name>LINUX</name></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>errno</name><parameter_list>(<parameter><decl><type><name>RuntimeException</name></type> <name>e</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><name>e</name> <operator>instanceof</operator> <name>LastErrorException</name></expr>;</assert>
        <try>try
        <block>{<block_content>
            <return>return <expr><operator>(</operator><operator>(</operator><name>LastErrorException</name><operator>)</operator> <name>e</name><operator>)</operator><operator>.</operator><call><name>getErrorCode</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchMethodError</name></type> <name>x</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Obsolete version of JNA present; unable to read errno. Upgrade to JNA 3.2.7 or later"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Checks if the library has been successfully linked.
     * @return {@code true} if the library has been successfully linked, {@code false} otherwise.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isAvailable</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>wrappedLibrary</name><operator>.</operator><name>isAvailable</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>jnaMemoryLockable</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>jnaLockable</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>tryMlockall</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>wrappedLibrary</name><operator>.</operator><name>callMlockall</name></name><argument_list>(<argument><expr><name>MCL_CURRENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>jnaLockable</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"JNA mlockall successful"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>UnsatisfiedLinkError</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <comment type="line">// this will have already been logged by CLibrary, no need to repeat it</comment>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>RuntimeException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>e</name> <operator>instanceof</operator> <name>LastErrorException</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><name>e</name></expr>;</throw></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>errno</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ENOMEM</name> <operator>&amp;&amp;</operator> <name>osType</name> <operator>==</operator> <name>LINUX</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Unable to lock JVM memory (ENOMEM)."</literal>
                        <operator>+</operator> <literal type="string">" This can result in part of the JVM being swapped out, especially with mmapped I/O enabled."</literal>
                        <operator>+</operator> <literal type="string">" Increase RLIMIT_MEMLOCK."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>osType</name> <operator>!=</operator> <name>MAC</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// OS X allows mlockall to be called, but always returns an error</comment>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Unknown mlockall error {}"</literal></expr></argument>, <argument><expr><call><name>errno</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>trySkipCache</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>File</name></type> <name>f</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>f</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <try>try <init>(<decl><type><name>FileInputStream</name></type> <name>fis</name> <init>= <expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>)</init>
        <block>{<block_content>
            <expr_stmt><expr><call><name>trySkipCache</name><argument_list>(<argument><expr><call><name>getfd</name><argument_list>(<argument><expr><call><name><name>fis</name><operator>.</operator><name>getChannel</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Could not skip cache"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>trySkipCache</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>path</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>trySkipCache</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>sublen</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>trySkipCache</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>sublen</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>len</name> <operator>-=</operator> <name>sublen</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>offset</name> <operator>-=</operator> <name>sublen</name></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>trySkipCache</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>path</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <try>try
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>osType</name> <operator>==</operator> <name>LINUX</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name><name>wrappedLibrary</name><operator>.</operator><name>callPosixFadvise</name></name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>POSIX_FADV_DONTNEED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>NoSpamLogger</name><operator>.</operator><name>log</name></name><argument_list>(
                            <argument><expr><name>logger</name></expr></argument>,
                            <argument><expr><name><name>NoSpamLogger</name><operator>.</operator><name>Level</name><operator>.</operator><name>WARN</name></name></expr></argument>,
                            <argument><expr><literal type="number">10</literal></expr></argument>,
                            <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MINUTES</name></name></expr></argument>,
                            <argument><expr><literal type="string">"Failed trySkipCache on file: {} Error: "</literal> <operator>+</operator> <call><name><name>wrappedLibrary</name><operator>.</operator><name>callStrerror</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>UnsatisfiedLinkError</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <comment type="line">// if JNA is unavailable just skipping Direct I/O</comment>
            <comment type="line">// instance of this class will act like normal RandomAccessFile</comment>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>RuntimeException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>e</name> <operator>instanceof</operator> <name>LastErrorException</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><name>e</name></expr>;</throw></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"posix_fadvise({}, {}) failed, errno ({})."</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><call><name>errno</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>tryFcntl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>command</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// fcntl return value may or may not be useful, depending on the command</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

        <try>try
        <block>{<block_content>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>wrappedLibrary</name><operator>.</operator><name>callFcntl</name></name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>command</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>UnsatisfiedLinkError</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <comment type="line">// if JNA is unavailable just skipping</comment>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>RuntimeException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>e</name> <operator>instanceof</operator> <name>LastErrorException</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><name>e</name></expr>;</throw></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"fcntl({}, {}, {}) failed, errno ({})."</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>command</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><call><name>errno</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>

        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>tryOpenDirectory</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>path</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

        <try>try
        <block>{<block_content>
            <return>return <expr><call><name><name>wrappedLibrary</name><operator>.</operator><name>callOpen</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>UnsatisfiedLinkError</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <comment type="line">// JNA is unavailable just skipping Direct I/O</comment>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>RuntimeException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>e</name> <operator>instanceof</operator> <name>LastErrorException</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><name>e</name></expr>;</throw></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"open({}, O_RDONLY) failed, errno ({})."</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>errno</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>

        <return>return <expr><name>fd</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>trySync</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <try>try
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>wrappedLibrary</name><operator>.</operator><name>callFsync</name></name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>UnsatisfiedLinkError</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <comment type="line">// JNA is unavailable just skipping Direct I/O</comment>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>RuntimeException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>e</name> <operator>instanceof</operator> <name>LastErrorException</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><name>e</name></expr>;</throw></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>String</name></type> <name>errMsg</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"fsync(%s) failed, errno (%s) %s"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name>errno</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><name>errMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>FSWriteError</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>errMsg</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>tryCloseFD</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <try>try
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>wrappedLibrary</name><operator>.</operator><name>callClose</name></name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>UnsatisfiedLinkError</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <comment type="line">// JNA is unavailable just skipping Direct I/O</comment>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>RuntimeException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>e</name> <operator>instanceof</operator> <name>LastErrorException</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><name>e</name></expr>;</throw></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>String</name></type> <name>errMsg</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"close(%d) failed, errno (%d)."</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name>errno</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><name>errMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>FSWriteError</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>errMsg</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getfd</name><parameter_list>(<parameter><decl><type><name>FileChannel</name></type> <name>channel</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <return>return <expr><call><name>getfd</name><argument_list>(<argument><expr><operator>(</operator><name>FileDescriptor</name><operator>)</operator><call><name><name>FILE_CHANNEL_FD_FIELD</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalArgumentException</name></type>|<type><name>IllegalAccessException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Unable to read fd field from FileChannel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get system file descriptor from FileDescriptor object.
     * @param descriptor - FileDescriptor objec to get fd from
     * @return file descriptor, -1 or error
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getfd</name><parameter_list>(<parameter><decl><type><name>FileDescriptor</name></type> <name>descriptor</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <return>return <expr><call><name><name>FILE_DESCRIPTOR_FD_FIELD</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>JVMStabilityInspector</name><operator>.</operator><name>inspectThrowable</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Unable to read fd field from FileDescriptor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>

        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return the PID of the JVM or -1 if we failed to get the PID
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getProcessID</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <return>return <expr><call><name><name>wrappedLibrary</name><operator>.</operator><name>callGetpid</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>UnsatisfiedLinkError</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <comment type="line">// if JNA is unavailable just skipping</comment>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Failed to get PID from JNA"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>

        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
