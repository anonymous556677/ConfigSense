<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/io/sstable/format/SSTableWriter.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>format</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableList</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Sets</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>RowIndexEntry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>SerializationHeader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>compaction</name><operator>.</operator><name>OperationType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>LifecycleNewTracker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>rows</name><operator>.</operator><name>UnfilteredRowIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>index</name><operator>.</operator><name>Index</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>FSWriteError</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>Component</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>Descriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>SSTable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>metadata</name><operator>.</operator><name>MetadataCollector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>metadata</name><operator>.</operator><name>MetadataComponent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>metadata</name><operator>.</operator><name>MetadataType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>metadata</name><operator>.</operator><name>StatsMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>FileUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>Schema</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>TableMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>TableMetadataRef</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Transactional</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This is the API all table writers must implement.
 *
 * TableWriter.create() is the primary way to create a writer for a particular format.
 * The format information is part of the Descriptor.
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>SSTableWriter</name> <super_list><extends>extends <super><name>SSTable</name></super></extends> <implements>implements <super><name>Transactional</name></super></implements></super_list>
<block>{
    <decl_stmt><decl><type><specifier>protected</specifier> <name>long</name></type> <name>repairedAt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>UUID</name></type> <name>pendingRepair</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>isTransient</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>long</name></type> <name>maxDataAge</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>long</name></type> <name>keyCount</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>MetadataCollector</name></type> <name>metadataCollector</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name><name>RowIndexEntry</name><operator>.</operator><name>IndexSerializer</name></name></type> <name>rowIndexEntrySerializer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>SerializationHeader</name></type> <name>header</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>TransactionalProxy</name></type> <name>txnProxy</name> <init>= <expr><call><name>txnProxy</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>SSTableFlushObserver</name></argument>&gt;</argument_list></name></type> <name>observers</name></decl>;</decl_stmt>

    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>TransactionalProxy</name></type> <name>txnProxy</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="line">// due to lack of multiple inheritance, we use an inner class to proxy our Transactional implementation details</comment>
    <class><specifier>protected</specifier> <specifier>abstract</specifier> class <name>TransactionalProxy</name> <super_list><extends>extends <super><name>AbstractTransactional</name></super></extends></super_list>
    <block>{
        <comment type="line">// should be set during doPrepare()</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>SSTableReader</name></type> <name>finalReader</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>openResult</name></decl>;</decl_stmt>
    }</block></class>

    <constructor><specifier>protected</specifier> <name>SSTableWriter</name><parameter_list>(<parameter><decl><type><name>Descriptor</name></type> <name>descriptor</name></decl></parameter>,
                            <parameter><decl><type><name>long</name></type> <name>keyCount</name></decl></parameter>,
                            <parameter><decl><type><name>long</name></type> <name>repairedAt</name></decl></parameter>,
                            <parameter><decl><type><name>UUID</name></type> <name>pendingRepair</name></decl></parameter>,
                            <parameter><decl><type><name>boolean</name></type> <name>isTransient</name></decl></parameter>,
                            <parameter><decl><type><name>TableMetadataRef</name></type> <name>metadata</name></decl></parameter>,
                            <parameter><decl><type><name>MetadataCollector</name></type> <name>metadataCollector</name></decl></parameter>,
                            <parameter><decl><type><name>SerializationHeader</name></type> <name>header</name></decl></parameter>,
                            <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>SSTableFlushObserver</name></argument>&gt;</argument_list></name></type> <name>observers</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>, <argument><expr><call><name>components</name><argument_list>(<argument><expr><call><name><name>metadata</name><operator>.</operator><name>getLocal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>metadata</name></expr></argument>, <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getDiskOptimizationStrategy</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>keyCount</name></name> <operator>=</operator> <name>keyCount</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>repairedAt</name></name> <operator>=</operator> <name>repairedAt</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>pendingRepair</name></name> <operator>=</operator> <name>pendingRepair</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isTransient</name></name> <operator>=</operator> <name>isTransient</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>metadataCollector</name></name> <operator>=</operator> <name>metadataCollector</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>header</name></name> <operator>=</operator> <name>header</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>rowIndexEntrySerializer</name></name> <operator>=</operator> <call><name><name>descriptor</name><operator>.</operator><name>version</name><operator>.</operator><name>getSSTableFormat</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getIndexSerializer</name><argument_list>(<argument><expr><call><name><name>metadata</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>descriptor</name><operator>.</operator><name>version</name></name></expr></argument>, <argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>observers</name></name> <operator>=</operator> <ternary><condition><expr><name>observers</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>Collections</name><operator>.</operator><name>emptySet</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name>observers</name></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>SSTableWriter</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>Descriptor</name></type> <name>descriptor</name></decl></parameter>,
                                       <parameter><decl><type><name>Long</name></type> <name>keyCount</name></decl></parameter>,
                                       <parameter><decl><type><name>Long</name></type> <name>repairedAt</name></decl></parameter>,
                                       <parameter><decl><type><name>UUID</name></type> <name>pendingRepair</name></decl></parameter>,
                                       <parameter><decl><type><name>boolean</name></type> <name>isTransient</name></decl></parameter>,
                                       <parameter><decl><type><name>TableMetadataRef</name></type> <name>metadata</name></decl></parameter>,
                                       <parameter><decl><type><name>MetadataCollector</name></type> <name>metadataCollector</name></decl></parameter>,
                                       <parameter><decl><type><name>SerializationHeader</name></type> <name>header</name></decl></parameter>,
                                       <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Index</name></argument>&gt;</argument_list></name></type> <name>indexes</name></decl></parameter>,
                                       <parameter><decl><type><name>LifecycleNewTracker</name></type> <name>lifecycleNewTracker</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Factory</name></type> <name>writerFactory</name> <init>= <expr><call><name><name>descriptor</name><operator>.</operator><name>getFormat</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWriterFactory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>writerFactory</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>, <argument><expr><name>keyCount</name></expr></argument>, <argument><expr><name>repairedAt</name></expr></argument>, <argument><expr><name>pendingRepair</name></expr></argument>, <argument><expr><name>isTransient</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>metadataCollector</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><call><name>observers</name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>, <argument><expr><name>indexes</name></expr></argument>, <argument><expr><call><name><name>lifecycleNewTracker</name><operator>.</operator><name>opType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lifecycleNewTracker</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>SSTableWriter</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>Descriptor</name></type> <name>descriptor</name></decl></parameter>,
                                       <parameter><decl><type><name>long</name></type> <name>keyCount</name></decl></parameter>,
                                       <parameter><decl><type><name>long</name></type> <name>repairedAt</name></decl></parameter>,
                                       <parameter><decl><type><name>UUID</name></type> <name>pendingRepair</name></decl></parameter>,
                                       <parameter><decl><type><name>boolean</name></type> <name>isTransient</name></decl></parameter>,
                                       <parameter><decl><type><name>int</name></type> <name>sstableLevel</name></decl></parameter>,
                                       <parameter><decl><type><name>SerializationHeader</name></type> <name>header</name></decl></parameter>,
                                       <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Index</name></argument>&gt;</argument_list></name></type> <name>indexes</name></decl></parameter>,
                                       <parameter><decl><type><name>LifecycleNewTracker</name></type> <name>lifecycleNewTracker</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>TableMetadataRef</name></type> <name>metadata</name> <init>= <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getTableMetadataRef</name></name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>create</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>descriptor</name></expr></argument>, <argument><expr><name>keyCount</name></expr></argument>, <argument><expr><name>repairedAt</name></expr></argument>, <argument><expr><name>pendingRepair</name></expr></argument>, <argument><expr><name>isTransient</name></expr></argument>, <argument><expr><name>sstableLevel</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>indexes</name></expr></argument>, <argument><expr><name>lifecycleNewTracker</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>SSTableWriter</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>TableMetadataRef</name></type> <name>metadata</name></decl></parameter>,
                                       <parameter><decl><type><name>Descriptor</name></type> <name>descriptor</name></decl></parameter>,
                                       <parameter><decl><type><name>long</name></type> <name>keyCount</name></decl></parameter>,
                                       <parameter><decl><type><name>long</name></type> <name>repairedAt</name></decl></parameter>,
                                       <parameter><decl><type><name>UUID</name></type> <name>pendingRepair</name></decl></parameter>,
                                       <parameter><decl><type><name>boolean</name></type> <name>isTransient</name></decl></parameter>,
                                       <parameter><decl><type><name>int</name></type> <name>sstableLevel</name></decl></parameter>,
                                       <parameter><decl><type><name>SerializationHeader</name></type> <name>header</name></decl></parameter>,
                                       <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Index</name></argument>&gt;</argument_list></name></type> <name>indexes</name></decl></parameter>,
                                       <parameter><decl><type><name>LifecycleNewTracker</name></type> <name>lifecycleNewTracker</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>MetadataCollector</name></type> <name>collector</name> <init>= <expr><operator>new</operator> <call><name>MetadataCollector</name><argument_list>(<argument><expr><call><name><name>metadata</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><name>comparator</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>sstableLevel</name><argument_list>(<argument><expr><name>sstableLevel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>create</name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>, <argument><expr><name>keyCount</name></expr></argument>, <argument><expr><name>repairedAt</name></expr></argument>, <argument><expr><name>pendingRepair</name></expr></argument>, <argument><expr><name>isTransient</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>collector</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>indexes</name></expr></argument>, <argument><expr><name>lifecycleNewTracker</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>SSTableWriter</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>Descriptor</name></type> <name>descriptor</name></decl></parameter>,
                                       <parameter><decl><type><name>long</name></type> <name>keyCount</name></decl></parameter>,
                                       <parameter><decl><type><name>long</name></type> <name>repairedAt</name></decl></parameter>,
                                       <parameter><decl><type><name>UUID</name></type> <name>pendingRepair</name></decl></parameter>,
                                       <parameter><decl><type><name>boolean</name></type> <name>isTransient</name></decl></parameter>,
                                       <parameter><decl><type><name>SerializationHeader</name></type> <name>header</name></decl></parameter>,
                                       <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Index</name></argument>&gt;</argument_list></name></type> <name>indexes</name></decl></parameter>,
                                       <parameter><decl><type><name>LifecycleNewTracker</name></type> <name>lifecycleNewTracker</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>create</name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>, <argument><expr><name>keyCount</name></expr></argument>, <argument><expr><name>repairedAt</name></expr></argument>, <argument><expr><name>pendingRepair</name></expr></argument>, <argument><expr><name>isTransient</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>indexes</name></expr></argument>, <argument><expr><name>lifecycleNewTracker</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Component</name></argument>&gt;</argument_list></name></type> <name>components</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>metadata</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Component</name></argument>&gt;</argument_list></name></type> <name>components</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>Component</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>DATA</name></name></expr></argument>,
                <argument><expr><name><name>Component</name><operator>.</operator><name>PRIMARY_INDEX</name></name></expr></argument>,
                <argument><expr><name><name>Component</name><operator>.</operator><name>STATS</name></name></expr></argument>,
                <argument><expr><name><name>Component</name><operator>.</operator><name>SUMMARY</name></name></expr></argument>,
                <argument><expr><name><name>Component</name><operator>.</operator><name>TOC</name></name></expr></argument>,
                <argument><expr><name><name>Component</name><operator>.</operator><name>DIGEST</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>metadata</name><operator>.</operator><name>params</name><operator>.</operator><name>bloomFilterFpChance</name></name> <operator>&lt;</operator> <literal type="number">1.0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>components</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>FILTER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>metadata</name><operator>.</operator><name>params</name><operator>.</operator><name>compression</name><operator>.</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>components</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>COMPRESSION_INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="line">// it would feel safer to actually add this component later in maybeWriteDigest(),</comment>
            <comment type="line">// but the components are unmodifiable after construction</comment>
            <expr_stmt><expr><call><name><name>components</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>CRC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><name>components</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>SSTableFlushObserver</name></argument>&gt;</argument_list></name></type> <name>observers</name><parameter_list>(<parameter><decl><type><name>Descriptor</name></type> <name>descriptor</name></decl></parameter>,
                                                              <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Index</name></argument>&gt;</argument_list></name></type> <name>indexes</name></decl></parameter>,
                                                              <parameter><decl><type><name>OperationType</name></type> <name>operationType</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>indexes</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>SSTableFlushObserver</name></argument>&gt;</argument_list></name></type> <name>observers</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>indexes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Index</name></type> <name>index</name> <range>: <expr><name>indexes</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>SSTableFlushObserver</name></type> <name>observer</name> <init>= <expr><call><name><name>index</name><operator>.</operator><name>getFlushObserver</name></name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>, <argument><expr><name>operationType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>observer</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>observer</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>observers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>observer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <return>return <expr><call><name><name>ImmutableList</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><name>observers</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>mark</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Appends partition data to this writer.
     *
     * @param iterator the partition to write
     * @return the created index entry if something was written, that is if {@code iterator}
     * wasn't empty, {@code null} otherwise.
     *
     * @throws FSWriteError if a write to the dataFile fails
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>RowIndexEntry</name></type> <name>append</name><parameter_list>(<parameter><decl><type><name>UnfilteredRowIterator</name></type> <name>iterator</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>long</name></type> <name>getFilePointer</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>long</name></type> <name>getOnDiskFilePointer</name><parameter_list>()</parameter_list>;</function_decl>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getEstimatedOnDiskBytesWritten</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getOnDiskFilePointer</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>resetAndTruncate</name><parameter_list>()</parameter_list>;</function_decl>

    <function><type><specifier>public</specifier> <name>SSTableWriter</name></type> <name>setRepairedAt</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>repairedAt</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>repairedAt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>repairedAt</name></name> <operator>=</operator> <name>repairedAt</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>SSTableWriter</name></type> <name>setMaxDataAge</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>maxDataAge</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>maxDataAge</name></name> <operator>=</operator> <name>maxDataAge</name></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>SSTableWriter</name></type> <name>setOpenResult</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>openResult</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>txnProxy</name><operator>.</operator><name>openResult</name></name> <operator>=</operator> <name>openResult</name></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Open the resultant SSTableReader before it has been fully written
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>SSTableReader</name></type> <name>openEarly</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Open the resultant SSTableReader once it has been fully written, but before the
     * _set_ of tables that are being written together as one atomic operation are all ready
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>SSTableReader</name></type> <name>openFinalEarly</name><parameter_list>()</parameter_list>;</function_decl>

    <function><type><specifier>public</specifier> <name>SSTableReader</name></type> <name>finish</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>repairedAt</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>maxDataAge</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>openResult</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>repairedAt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>repairedAt</name></name> <operator>=</operator> <name>repairedAt</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>maxDataAge</name></name> <operator>=</operator> <name>maxDataAge</name></expr>;</expr_stmt>
        <return>return <expr><call><name>finish</name><argument_list>(<argument><expr><name>openResult</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>SSTableReader</name></type> <name>finish</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>openResult</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>setOpenResult</name><argument_list>(<argument><expr><name>openResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>txnProxy</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>observers</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><name>SSTableFlushObserver</name><operator>::</operator><name>complete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>finished</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Open the resultant SSTableReader once it has been fully written, and all related state
     * is ready to be finalised including other sstables being written involved in the same operation
     */</comment>
    <function><type><specifier>public</specifier> <name>SSTableReader</name></type> <name>finished</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>txnProxy</name><operator>.</operator><name>finalReader</name></name></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// finalise our state on disk, including renaming</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>prepareToCommit</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>txnProxy</name><operator>.</operator><name>prepareToCommit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>Throwable</name></type> <name>commit</name><parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>accumulate</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <return>return <expr><call><name><name>txnProxy</name><operator>.</operator><name>commit</name></name><argument_list>(<argument><expr><name>accumulate</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <finally>finally
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>observers</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><name>SSTableFlushObserver</name><operator>::</operator><name>complete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>Throwable</name></type> <name>abort</name><parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>accumulate</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>txnProxy</name><operator>.</operator><name>abort</name></name><argument_list>(<argument><expr><name>accumulate</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>txnProxy</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>abort</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>txnProxy</name><operator>.</operator><name>abort</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>MetadataType</name></argument>, <argument><name>MetadataComponent</name></argument>&gt;</argument_list></name></type> <name>finalizeMetadata</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>metadataCollector</name><operator>.</operator><name>finalizeMetadata</name></name><argument_list>(<argument><expr><call><name>getPartitioner</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCanonicalName</name><argument_list>()</argument_list></call></expr></argument>,
                                                  <argument><expr><call><name>metadata</name><argument_list>()</argument_list></call><operator>.</operator><name><name>params</name><operator>.</operator><name>bloomFilterFpChance</name></name></expr></argument>,
                                                  <argument><expr><name>repairedAt</name></expr></argument>,
                                                  <argument><expr><name>pendingRepair</name></expr></argument>,
                                                  <argument><expr><name>isTransient</name></expr></argument>,
                                                  <argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>StatsMetadata</name></type> <name>statsMetadata</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>(</operator><name>StatsMetadata</name><operator>)</operator> <call><name>finalizeMetadata</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>MetadataType</name><operator>.</operator><name>STATS</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>releaseMetadataOverhead</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>metadataCollector</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>rename</name><parameter_list>(<parameter><decl><type><name>Descriptor</name></type> <name>tmpdesc</name></decl></parameter>, <parameter><decl><type><name>Descriptor</name></type> <name>newdesc</name></decl></parameter>, <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Component</name></argument>&gt;</argument_list></name></type> <name>components</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>Component</name></type> <name>component</name> <range>: <expr><call><name><name>Sets</name><operator>.</operator><name>difference</name></name><argument_list>(<argument><expr><name>components</name></expr></argument>, <argument><expr><call><name><name>Sets</name><operator>.</operator><name>newHashSet</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>DATA</name></name></expr></argument>, <argument><expr><name><name>Component</name><operator>.</operator><name>SUMMARY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>renameWithConfirm</name></name><argument_list>(<argument><expr><call><name><name>tmpdesc</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name>component</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>newdesc</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name>component</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <comment type="line">// do -Data last because -Data present should mean the sstable was completely renamed before crash</comment>
        <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>renameWithConfirm</name></name><argument_list>(<argument><expr><call><name><name>tmpdesc</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>DATA</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>newdesc</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>DATA</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// rename it without confirmation because summary can be available for loadNewSSTables but not for closeAndOpenReader</comment>
        <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>renameWithOutConfirm</name></name><argument_list>(<argument><expr><call><name><name>tmpdesc</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>SUMMARY</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>newdesc</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>SUMMARY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>copy</name><parameter_list>(<parameter><decl><type><name>Descriptor</name></type> <name>tmpdesc</name></decl></parameter>, <parameter><decl><type><name>Descriptor</name></type> <name>newdesc</name></decl></parameter>, <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Component</name></argument>&gt;</argument_list></name></type> <name>components</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>Component</name></type> <name>component</name> <range>: <expr><call><name><name>Sets</name><operator>.</operator><name>difference</name></name><argument_list>(<argument><expr><name>components</name></expr></argument>, <argument><expr><call><name><name>Sets</name><operator>.</operator><name>newHashSet</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>DATA</name></name></expr></argument>, <argument><expr><name><name>Component</name><operator>.</operator><name>SUMMARY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>copyWithConfirm</name></name><argument_list>(<argument><expr><call><name><name>tmpdesc</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name>component</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>newdesc</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name>component</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <comment type="line">// do -Data last because -Data present should mean the sstable was completely copied before crash</comment>
        <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>copyWithConfirm</name></name><argument_list>(<argument><expr><call><name><name>tmpdesc</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>DATA</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>newdesc</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>DATA</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// copy it without confirmation because summary can be available for loadNewSSTables but not for closeAndOpenReader</comment>
        <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>copyWithOutConfirm</name></name><argument_list>(<argument><expr><call><name><name>tmpdesc</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>SUMMARY</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>newdesc</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>SUMMARY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>hardlink</name><parameter_list>(<parameter><decl><type><name>Descriptor</name></type> <name>tmpdesc</name></decl></parameter>, <parameter><decl><type><name>Descriptor</name></type> <name>newdesc</name></decl></parameter>, <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Component</name></argument>&gt;</argument_list></name></type> <name>components</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>Component</name></type> <name>component</name> <range>: <expr><call><name><name>Sets</name><operator>.</operator><name>difference</name></name><argument_list>(<argument><expr><name>components</name></expr></argument>, <argument><expr><call><name><name>Sets</name><operator>.</operator><name>newHashSet</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>DATA</name></name></expr></argument>, <argument><expr><name><name>Component</name><operator>.</operator><name>SUMMARY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>createHardLinkWithConfirm</name></name><argument_list>(<argument><expr><call><name><name>tmpdesc</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name>component</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>newdesc</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name>component</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <comment type="line">// do -Data last because -Data present should mean the sstable was completely copied before crash</comment>
        <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>createHardLinkWithConfirm</name></name><argument_list>(<argument><expr><call><name><name>tmpdesc</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>DATA</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>newdesc</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>DATA</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// copy it without confirmation because summary can be available for loadNewSSTables but not for closeAndOpenReader</comment>
        <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>createHardLinkWithoutConfirm</name></name><argument_list>(<argument><expr><call><name><name>tmpdesc</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>SUMMARY</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>newdesc</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>SUMMARY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>abstract</specifier> class <name>Factory</name>
    <block>{
        <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>SSTableWriter</name></type> <name>open</name><parameter_list>(<parameter><decl><type><name>Descriptor</name></type> <name>descriptor</name></decl></parameter>,
                                           <parameter><decl><type><name>long</name></type> <name>keyCount</name></decl></parameter>,
                                           <parameter><decl><type><name>long</name></type> <name>repairedAt</name></decl></parameter>,
                                           <parameter><decl><type><name>UUID</name></type> <name>pendingRepair</name></decl></parameter>,
                                           <parameter><decl><type><name>boolean</name></type> <name>isTransient</name></decl></parameter>,
                                           <parameter><decl><type><name>TableMetadataRef</name></type> <name>metadata</name></decl></parameter>,
                                           <parameter><decl><type><name>MetadataCollector</name></type> <name>metadataCollector</name></decl></parameter>,
                                           <parameter><decl><type><name>SerializationHeader</name></type> <name>header</name></decl></parameter>,
                                           <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>SSTableFlushObserver</name></argument>&gt;</argument_list></name></type> <name>observers</name></decl></parameter>,
                                           <parameter><decl><type><name>LifecycleNewTracker</name></type> <name>lifecycleNewTracker</name></decl></parameter>)</parameter_list>;</function_decl>
    }</block></class>
}</block></class>
</unit>
