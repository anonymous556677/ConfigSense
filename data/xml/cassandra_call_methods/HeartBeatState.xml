<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/gms/HeartBeatState.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>gms</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>*</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>TypeSizes</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>IVersionedSerializer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>DataInputPlus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>DataOutputPlus</name></name>;</import>

<comment type="block" format="javadoc">/**
 * HeartBeat State associated with any given endpoint.
 */</comment>
<class><specifier>public</specifier> class <name>HeartBeatState</name>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>EMPTY_VERSION</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>IVersionedSerializer</name><argument_list type="generic">&lt;<argument><name>HeartBeatState</name></argument>&gt;</argument_list></name></type> <name>serializer</name> <init>= <expr><operator>new</operator> <call><name>HeartBeatStateSerializer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>generation</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>version</name></decl>;</decl_stmt>

    <constructor><name>HeartBeatState</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>gen</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>gen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>HeartBeatState</name><parameter_list>(<parameter><decl><type><name>HeartBeatState</name></type> <name>other</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>generation</name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>generation</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>version</name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>version</name></name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>HeartBeatState</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>gen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ver</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>generation</name> <operator>=</operator> <name>gen</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>version</name> <operator>=</operator> <name>ver</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>HeartBeatState</name></type> <name>empty</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>HeartBeatState</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>EMPTY_VERSION</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isEmpty</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <comment type="line">// Instance I1 will update this value for I1's state, no other instance should.</comment>
        <comment type="line">// It is also known that negative version isn't allowed, so can leverage this to</comment>
        <comment type="line">// know that the state was not generated by I1 but rather than instance (normally</comment>
        <comment type="line">// happens on startup, the peers are added to gossip with the empty state).</comment>
        <return>return <expr><name>version</name> <operator>==</operator> <name>EMPTY_VERSION</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>int</name></type> <name>getGeneration</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>generation</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>updateHeartBeat</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>version</name> <operator>=</operator> <call><name><name>VersionGenerator</name><operator>.</operator><name>getNextVersion</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>int</name></type> <name>getHeartBeatVersion</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>version</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>forceNewerGenerationUnsafe</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>generation</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>forceHighestPossibleVersionUnsafe</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>version</name> <operator>=</operator> <name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"HeartBeat: generation = %d, version = %d"</literal></expr></argument>, <argument><expr><name>generation</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>

<class>class <name>HeartBeatStateSerializer</name> <super_list><implements>implements <super><name><name>IVersionedSerializer</name><argument_list type="generic">&lt;<argument><name>HeartBeatState</name></argument>&gt;</argument_list></name></super></implements></super_list>
<block>{
    <function><type><specifier>public</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<parameter><decl><type><name>HeartBeatState</name></type> <name>hbState</name></decl></parameter>, <parameter><decl><type><name>DataOutputPlus</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>hbState</name><operator>.</operator><name>getGeneration</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>hbState</name><operator>.</operator><name>getHeartBeatVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>HeartBeatState</name></type> <name>deserialize</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>HeartBeatState</name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>serializedSize</name><parameter_list>(<parameter><decl><type><name>HeartBeatState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>TypeSizes</name><operator>.</operator><name>sizeof</name></name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getGeneration</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>TypeSizes</name><operator>.</operator><name>sizeof</name></name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getHeartBeatVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
