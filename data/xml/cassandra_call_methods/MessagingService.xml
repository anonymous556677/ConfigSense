<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/net/MessagingService.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>channels</name><operator>.</operator><name>ClosedChannelException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ExecutorService</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeoutException</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Future</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ScheduledExecutors</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Stage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>SystemKeyspace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>RequestFailureReason</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>InetAddressAndPort</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>Replica</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>AbstractWriteResponseHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>ExecutorUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>FBUtilities</name></name>;</import>

<import>import static <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name><operator>.</operator><name>synchronizedList</name></name>;</import>
<import>import static <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name><operator>.</operator><name>MINUTES</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Stage</name><operator>.</operator><name>MUTATION</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>Throwables</name><operator>.</operator><name>maybeFail</name></name>;</import>

<comment type="block" format="javadoc">/**
 * MessagingService implements all internode communication - with the exception of SSTable streaming (for now).
 *
 * Specifically, it's responsible for dispatch of outbound messages to other nodes and routing of inbound messages
 * to their appropriate {@link IVerbHandler}.
 *
 * &lt;h2&gt;Using MessagingService: sending requests and responses&lt;/h2&gt;
 *
 * The are two ways to send a {@link Message}, and you should pick one depending on the desired behaviour:
 *  1. To send a request that expects a response back, use
 *     {@link #sendWithCallback(Message, InetAddressAndPort, RequestCallback)} method. Once a response
 *     message is received, {@link RequestCallback#onResponse(Message)} method will be invoked on the
 *     provided callback - in case of a success response. In case of a failure response (see {@link Verb#FAILURE_RSP}),
 *     or if a response doesn't arrive within verb's configured expiry time,
 *     {@link RequestCallback#onFailure(InetAddressAndPort, RequestFailureReason)} will be invoked instead.
 *  2. To send a response back, or a message that expects no response, use {@link #send(Message, InetAddressAndPort)}
 *     method.
 *
 * See also: {@link Message#out(Verb, Object)}, {@link Message#responseWith(Object)},
 * and {@link Message#failureResponse(RequestFailureReason)}.
 *
 * &lt;h2&gt;Using MessagingService: handling a request&lt;/h2&gt;
 *
 * As described in the previous section, to handle responses you only need to implement {@link RequestCallback}
 * interface - so long as your response verb handler is the default {@link ResponseVerbHandler}.
 *
 * There are two steps you need to perform to implement request handling:
 *  1. Create a {@link IVerbHandler} to process incoming requests and responses for the new type (if applicable).
 *  2. Add a new {@link Verb} to the enum for the new request type, and, if applicable, one for the response message.
 *
 * MessagingService will now automatically invoke your handler whenever a {@link Message} with this verb arrives.
 *
 * &lt;h1&gt;Architecture of MessagingService&lt;/h1&gt;
 *
 * &lt;h2&gt;QOS&lt;/h2&gt;
 *
 * Since our messaging protocol is TCP-based, and also doesn't yet support interleaving messages with each other,
 * we need a way to prevent head-of-line blocking adversely affecting all messages - in particular, large messages
 * being in the way of smaller ones. To achive that (somewhat), we maintain three messaging connections to and
 * from each peer:
 * - one for large messages - defined as being larger than {@link OutboundConnections#LARGE_MESSAGE_THRESHOLD}
 *   (65KiB by default)
 * - one for small messages - defined as smaller than that threshold
 * - and finally, a connection for urgent messages - usually small and/or that are important to arrive
 *   promptly, e.g. gossip-related ones
 *
 * &lt;h2&gt;Wire format and framing&lt;/h2&gt;
 *
 * Small messages are grouped together into frames, and large messages are split over multiple frames.
 * Framing provides application-level integrity protection to otherwise raw streams of data - we use
 * CRC24 for frame headers and CRC32 for the entire payload. LZ4 is optionally used for compression.
 *
 * You can find the on-wire format description of individual messages in the comments for
 * {@link Message.Serializer}, alongside with format evolution notes.
 * For the list and descriptions of available frame decoders see {@link FrameDecoder} comments. You can
 * find wire format documented in the javadoc of {@link FrameDecoder} implementations:
 * see {@link FrameDecoderCrc} and {@link FrameDecoderLZ4} in particular.
 *
 * &lt;h2&gt;Architecture of outbound messaging&lt;/h2&gt;
 *
 * {@link OutboundConnection} is the core class implementing outbound connection logic, with
 * {@link OutboundConnection#enqueue(Message)} being its main entry point. The connections are initiated
 * by {@link OutboundConnectionInitiator}.
 *
 * Netty pipeline for outbound messaging connections generally consists of the following handlers:
 *
 * [(optional) SslHandler] &lt;- [FrameEncoder]
 *
 * {@link OutboundConnection} handles the entire lifetime of a connection: from the very first handshake
 * to any necessary reconnects if necessary.
 *
 * Message-delivery flow varies depending on the connection type.
 *
 * For {@link ConnectionType#SMALL_MESSAGES} and {@link ConnectionType#URGENT_MESSAGES},
 * {@link Message} serialization and delivery occurs directly on the event loop.
 * See {@link OutboundConnection.EventLoopDelivery} for details.
 *
 * For {@link ConnectionType#LARGE_MESSAGES}, to ensure that servicing large messages doesn't block
 * timely service of other requests, message serialization is offloaded to a companion thread pool
 * ({@link SocketFactory#synchronousWorkExecutor}). Most of the work will be performed by
 * {@link AsyncChannelOutputPlus}. Please see {@link OutboundConnection.LargeMessageDelivery}
 * for details.
 *
 * To prevent fast clients, or slow nodes on the other end of the connection from overwhelming
 * a host with enqueued, unsent messages on heap, we impose strict limits on how much memory enqueued,
 * undelivered messages can claim.
 *
 * Every individual connection gets an exclusive permit quota to use - 4MiB by default; every endpoint
 * (group of large, small, and urgent connection) is capped at, by default, at 128MiB of undelivered messages,
 * and a global limit of 512MiB is imposed on all endpoints combined.
 *
 * On an attempt to {@link OutboundConnection#enqueue(Message)}, the connection will attempt to allocate
 * permits for message-size number of bytes from its exclusive quota; if successful, it will add the
 * message to the queue; if unsuccessful, it will need to allocate remainder from both endpoint and lobal
 * reserves, and if it fails to do so, the message will be rejected, and its callbacks, if any,
 * immediately expired.
 *
 * For a more detailed description please see the docs and comments of {@link OutboundConnection}.
 *
 * &lt;h2&gt;Architecture of inbound messaging&lt;/h2&gt;
 *
 * {@link InboundMessageHandler} is the core class implementing inbound connection logic, paired
 * with {@link FrameDecoder}. Inbound connections are initiated by {@link InboundConnectionInitiator}.
 * The primary entry points to these classes are {@link FrameDecoder#channelRead(ShareableBytes)}
 * and {@link InboundMessageHandler#process(FrameDecoder.Frame)}.
 *
 * Netty pipeline for inbound messaging connections generally consists of the following handlers:
 *
 * [(optional) SslHandler] -&gt; [FrameDecoder] -&gt; [InboundMessageHandler]
 *
 * {@link FrameDecoder} is responsible for decoding incoming frames and work stashing; {@link InboundMessageHandler}
 * then takes decoded frames from the decoder and processes the messages contained in them.
 *
 * The flow differs between small and large messages. Small ones are deserialized immediately, and only
 * then scheduled on the right thread pool for the {@link Verb} for execution. Large messages, OTOH,
 * aren't deserialized until they are just about to be executed on the appropriate {@link Stage}.
 *
 * Similarly to outbound handling, inbound messaging imposes strict memory utilisation limits on individual
 * endpoints and on global aggregate consumption, and implements simple flow control, to prevent a single
 * fast endpoint from overwhelming a host.
 *
 * Every individual connection gets an exclusive permit quota to use - 4MiB by default; every endpoint
 * (group of large, small, and urgent connection) is capped at, by default, at 128MiB of unprocessed messages,
 * and a global limit of 512MiB is imposed on all endpoints combined.
 *
 * On arrival of a message header, the handler will attempt to allocate permits for message-size number
 * of bytes from its exclusive quota; if successful, it will proceed to deserializing and processing the message.
 * If unsuccessful, the handler will attempt to allocate the remainder from its endpoint and global reserve;
 * if either allocation is unsuccessful, the handler will cease any further frame processing, and tell
 * {@link FrameDecoder} to stop reading from the network; subsequently, it will put itself on a special
 * {@link org.apache.cassandra.net.InboundMessageHandler.WaitQueue}, to be reactivated once more permits
 * become available.
 *
 * For a more detailed description please see the docs and comments of {@link InboundMessageHandler} and
 * {@link FrameDecoder}.
 *
 * &lt;h2&gt;Observability&lt;/h2&gt;
 *
 * MessagingService exposes diagnostic counters for both outbound and inbound directions - received and sent
 * bytes and message counts, overload bytes and message count, error bytes and error counts, and many more.
 *
 * See {@link org.apache.cassandra.metrics.InternodeInboundMetrics} and
 * {@link org.apache.cassandra.metrics.InternodeOutboundMetrics} for JMX-exposed counters.
 *
 * We also provide {@code system_views.internode_inbound} and {@code system_views.internode_outbound} virtual tables -
 * implemented in {@link org.apache.cassandra.db.virtual.InternodeInboundTable} and
 * {@link org.apache.cassandra.db.virtual.InternodeOutboundTable} respectively.
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>MessagingService</name> <super_list><extends>extends <super><name>MessagingServiceMBeanImpl</name></super></extends></super_list>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>MessagingService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// 8 bits version, so don't waste versions</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>VERSION_30</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>VERSION_3014</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>VERSION_40</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>minimum_version</name> <init>= <expr><name>VERSION_30</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>current_version</name> <init>= <expr><name>VERSION_40</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>AcceptVersions</name></type> <name>accept_messaging</name> <init>= <expr><operator>new</operator> <call><name>AcceptVersions</name><argument_list>(<argument><expr><name>minimum_version</name></expr></argument>, <argument><expr><name>current_version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>AcceptVersions</name></type> <name>accept_streaming</name> <init>= <expr><operator>new</operator> <call><name>AcceptVersions</name><argument_list>(<argument><expr><name>current_version</name></expr></argument>, <argument><expr><name>current_version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <enum><specifier>public</specifier> enum <name>Version</name>
    <block>{
        <decl><name>VERSION_30</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></decl>,
        <decl><name>VERSION_3014</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></decl>,
        <decl><name>VERSION_40</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></decl>;

        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>value</name></decl>;</decl_stmt>

        <constructor><name>Version</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>
    }</block></enum>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>MSHandle</name>
    <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>MessagingService</name></type> <name>instance</name> <init>= <expr><operator>new</operator> <call><name>MessagingService</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    }</block></class>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>MessagingService</name></type> <name>instance</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>MSHandle</name><operator>.</operator><name>instance</name></name></expr>;</return>
    </block_content>}</block></function>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>SocketFactory</name></type> <name>socketFactory</name> <init>= <expr><operator>new</operator> <call><name>SocketFactory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>LatencySubscribers</name></type> <name>latencySubscribers</name> <init>= <expr><operator>new</operator> <call><name>LatencySubscribers</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>RequestCallbacks</name></type> <name>callbacks</name> <init>= <expr><operator>new</operator> <call><name>RequestCallbacks</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// a public hook for filtering messages intended for delivery to this node</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>InboundSink</name></type> <name>inboundSink</name> <init>= <expr><operator>new</operator> <call><name>InboundSink</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// the inbound global reserve limits and associated wait queue</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>InboundMessageHandlers</name><operator>.</operator><name>GlobalResourceLimits</name></name></type> <name>inboundGlobalReserveLimits</name> <init>= <expr><operator>new</operator> <call><name><name>InboundMessageHandlers</name><operator>.</operator><name>GlobalResourceLimits</name></name><argument_list>(
        <argument><expr><operator>new</operator> <call><name><name>ResourceLimits</name><operator>.</operator><name>Concurrent</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getInternodeApplicationReceiveQueueReserveGlobalCapacityInBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// the socket bindings we accept incoming connections on</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>InboundSockets</name></type> <name>inboundSockets</name> <init>= <expr><operator>new</operator> <call><name>InboundSockets</name><argument_list>(<argument><expr><operator>new</operator> <call><name>InboundConnectionSettings</name><argument_list>()</argument_list></call>
                                                                     <operator>.</operator><call><name>withHandlers</name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>getInbound</name></expr></argument>)</argument_list></call>
                                                                     <operator>.</operator><call><name>withSocketFactory</name><argument_list>(<argument><expr><name>socketFactory</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// a public hook for filtering messages intended for delivery to another node</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>OutboundSink</name></type> <name>outboundSink</name> <init>= <expr><operator>new</operator> <call><name>OutboundSink</name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>doSend</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name><name>ResourceLimits</name><operator>.</operator><name>Limit</name></name></type> <name>outboundGlobalReserveLimit</name> <init>=
        <expr><operator>new</operator> <call><name><name>ResourceLimits</name><operator>.</operator><name>Concurrent</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getInternodeApplicationSendQueueReserveGlobalCapacityInBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>isShuttingDown</name></decl>;</decl_stmt>

    <constructor><annotation>@<name>VisibleForTesting</name></annotation>
    <name>MessagingService</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>testOnly</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>testOnly</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>OutboundConnections</name><operator>.</operator><name>scheduleUnusedConnectionMonitoring</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>ScheduledExecutors</name><operator>.</operator><name>scheduledTasks</name></name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>HOURS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Send a non-mutation message to a given endpoint. This method specifies a callback
     * which is invoked with the actual response.
     *
     * @param message message to be sent.
     * @param to      endpoint to which the message needs to be sent
     * @param cb      callback interface which is used to pass the responses or
     *                suggest that a timeout occurred to the invoker of the send().
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>sendWithCallback</name><parameter_list>(<parameter><decl><type><name>Message</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>InetAddressAndPort</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>RequestCallback</name></type> <name>cb</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>sendWithCallback</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>sendWithCallback</name><parameter_list>(<parameter><decl><type><name>Message</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>InetAddressAndPort</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>RequestCallback</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>ConnectionType</name></type> <name>specifyConnection</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>callbacks</name><operator>.</operator><name>addWithExpiration</name></name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>cb</name><operator>.</operator><name>invokeOnFailure</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>message</name><operator>.</operator><name>callBackOnFailure</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>message</name> <operator>=</operator> <call><name><name>message</name><operator>.</operator><name>withCallBackOnFailure</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>send</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>specifyConnection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Send a mutation message or a Paxos Commit to a given endpoint. This method specifies a callback
     * which is invoked with the actual response.
     * Also holds the message (only mutation messages) to determine if it
     * needs to trigger a hint (uses StorageProxy for that).
     *
     * @param message message to be sent.
     * @param to      endpoint to which the message needs to be sent
     * @param handler callback interface which is used to pass the responses or
     *                suggest that a timeout occurred to the invoker of the send().
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>sendWriteWithCallback</name><parameter_list>(<parameter><decl><type><name>Message</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>Replica</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name><name>AbstractWriteResponseHandler</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>handler</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>allowHints</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><call><name><name>message</name><operator>.</operator><name>callBackOnFailure</name></name><argument_list>()</argument_list></call></expr>;</assert>
        <expr_stmt><expr><call><name><name>callbacks</name><operator>.</operator><name>addWithExpiration</name></name><argument_list>(<argument><expr><name>handler</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><call><name><name>handler</name><operator>.</operator><name>consistencyLevel</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>allowHints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>send</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><call><name><name>to</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Send a message to a given endpoint. This method adheres to the fire and forget
     * style messaging.
     *
     * @param message messages to be sent.
     * @param to      endpoint to which the message needs to be sent
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>send</name><parameter_list>(<parameter><decl><type><name>Message</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>InetAddressAndPort</name></type> <name>to</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>send</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>send</name><parameter_list>(<parameter><decl><type><name>Message</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>InetAddressAndPort</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>ConnectionType</name></type> <name>specifyConnection</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"{} sending {} to {}@{}"</literal></expr></argument>, <argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>verb</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>id</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>to</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Message-to-self {} going over MessagingService"</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>outboundSink</name><operator>.</operator><name>accept</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>specifyConnection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>doSend</name><parameter_list>(<parameter><decl><type><name>Message</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>InetAddressAndPort</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>ConnectionType</name></type> <name>specifyConnection</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// expire the callback if the message failed to enqueue (failed to establish a connection or exceeded queue capacity)</comment>
        <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>OutboundConnections</name></type> <name>connections</name> <init>= <expr><call><name>getOutbound</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <try>try
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>connections</name><operator>.</operator><name>enqueue</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>specifyConnection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>ClosedChannelException</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>isShuttingDown</name></expr>)</condition><block type="pseudo"><block_content>
                    <return>return;</return></block_content></block></if></if_stmt> <comment type="line">// just drop the message, and let others clean up</comment>

                <comment type="line">// remove the connection and try again</comment>
                <expr_stmt><expr><call><name><name>channelManagers</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name>connections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></while>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>markExpiredCallback</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>addr</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>OutboundConnections</name></type> <name>conn</name> <init>= <expr><call><name><name>channelManagers</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>conn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>conn</name><operator>.</operator><name>incrementExpiredCallbackCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Only to be invoked once we believe the endpoint will never be contacted again.
     *
     * We close the connection after a five minute delay, to give asynchronous operations a chance to terminate
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>closeOutbound</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>to</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>OutboundConnections</name></type> <name>pool</name> <init>= <expr><call><name><name>channelManagers</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>pool</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>scheduleClose</name></name><argument_list>(<argument><expr><literal type="number">5L</literal></expr></argument>, <argument><expr><name>MINUTES</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>addListener</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>future</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>channelManagers</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Only to be invoked once we believe the connections will never be used again.
     */</comment>
    <function><type><name>void</name></type> <name>closeOutboundNow</name><parameter_list>(<parameter><decl><type><name>OutboundConnections</name></type> <name>connections</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>connections</name><operator>.</operator><name>close</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>addListener</name><argument_list>(
            <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>future</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>channelManagers</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>connections</name><operator>.</operator><name>template</name></name><argument_list>()</argument_list></call><operator>.</operator><name>to</name></expr></argument>, <argument><expr><name>connections</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Only to be invoked once we believe the connections will never be used again.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeInbound</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>from</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>InboundMessageHandlers</name></type> <name>handlers</name> <init>= <expr><call><name><name>messageHandlers</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name>handlers</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>handlers</name><operator>.</operator><name>releaseMetrics</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Closes any current open channel/connection to the endpoint, but does not cause any message loss, and we will
     * try to re-establish connections immediately
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>interruptOutbound</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>to</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>OutboundConnections</name></type> <name>pool</name> <init>= <expr><call><name><name>channelManagers</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>pool</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>interrupt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Reconnect to the peer using the given {@code addr}. Outstanding messages in each channel will be sent on the
     * current channel. Typically this function is used for something like EC2 public IP addresses which need to be used
     * for communication between EC2 regions.
     *
     * @param address IP Address to identify the peer
     * @param preferredAddress IP Address to use (and prefer) going forward for connecting to the peer
     */</comment>
    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"UnusedReturnValue"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>public</specifier> <name><name>Future</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>maybeReconnectWithNewIp</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>InetAddressAndPort</name></type> <name>preferredAddress</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>SystemKeyspace</name><operator>.</operator><name>updatePreferredIP</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>preferredAddress</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>OutboundConnections</name></type> <name>messagingPool</name> <init>= <expr><call><name><name>channelManagers</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>messagingPool</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>messagingPool</name><operator>.</operator><name>reconnectWithNewIp</name></name><argument_list>(<argument><expr><name>preferredAddress</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Wait for callbacks and don't allow any more to be created (since they could require writing hints)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>shutdown</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>shutdown</name><argument_list>(<argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><name>MINUTES</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>shutdown</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>TimeUnit</name></type> <name>units</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>shutdownGracefully</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>shutdownExecutors</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>isShuttingDown</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Shutdown was already called"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>isShuttingDown</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Waiting for messaging service to quiesce"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// We may need to schedule hints on the mutation stage, so it's erroneous to shut down the mutation stage first</comment>
        <assert>assert <expr><operator>!</operator><call><name><name>MUTATION</name><operator>.</operator><name>executor</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isShutdown</name><argument_list>()</argument_list></call></expr>;</assert>

        <if_stmt><if>if <condition>(<expr><name>shutdownGracefully</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>callbacks</name><operator>.</operator><name>shutdownGracefully</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Future</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>closing</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>OutboundConnections</name></type> <name>pool</name> <range>: <expr><call><name><name>channelManagers</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>closing</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>close</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <decl_stmt><decl><type><name>long</name></type> <name>deadline</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>units</name><operator>.</operator><name>toNanos</name></name><argument_list>(<argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>maybeFail</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><operator>new</operator> <call><name>FutureCombiner</name><argument_list>(<argument><expr><name>closing</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>units</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>,
                      <argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
                          <expr><name><name>List</name><argument_list type="generic">&lt;<argument><name>ExecutorService</name></argument>&gt;</argument_list></name> <name>inboundExecutors</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
                          <expr_stmt><expr><call><name><name>inboundSockets</name><operator>.</operator><name>close</name></name><argument_list>(<argument><expr><call><name>synchronizedList</name><argument_list>(<argument><expr><name>inboundExecutors</name></expr></argument>)</argument_list></call><operator>::</operator><name>add</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                          <expr_stmt><expr><call><name><name>ExecutorUtils</name><operator>.</operator><name>awaitTermination</name></name><argument_list>(<argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MINUTES</name></name></expr></argument>, <argument><expr><name>inboundExecutors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                      </block_content>}</block></if></if_stmt><operator>,</operator>
                      <expr_stmt><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{<block_content>
                          <if_stmt><if>if <condition>(<expr><name>shutdownExecutors</name></expr>)</condition><block type="pseudo"><block_content>
                              <expr_stmt><expr><call><name>shutdownExecutors</name><argument_list>(<argument><expr><name>deadline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                      </block_content>}</block></lambda></expr><operator>,</operator>
                      <expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>callbacks</name><operator>.</operator><name>awaitTerminationUntil</name></name><argument_list>(<argument><expr><name>deadline</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr><operator>,</operator>
                      <expr><name>inboundSink</name><operator>::</operator><name>clear</name></expr><operator>,</operator>
                      <expr><name>outboundSink</name><operator>::</operator><name>clear</name></expr></expr_stmt>)</block_content></block>;</function>
        }</block></class>
        <if_stmt><else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>callbacks</name><operator>.</operator><name>shutdownNow</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Future</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>closing</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ExecutorService</name></argument>&gt;</argument_list></name></type> <name>inboundExecutors</name> <init>= <expr><call><name>synchronizedList</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ExecutorService</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>closing</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>inboundSockets</name><operator>.</operator><name>close</name></name><argument_list>(<argument><expr><name>inboundExecutors</name><operator>::</operator><name>add</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>OutboundConnections</name></type> <name>pool</name> <range>: <expr><call><name><name>channelManagers</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>closing</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>close</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <decl_stmt><decl><type><name>long</name></type> <name>deadline</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>units</name><operator>.</operator><name>toNanos</name></name><argument_list>(<argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>maybeFail</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><operator>new</operator> <call><name>FutureCombiner</name><argument_list>(<argument><expr><name>closing</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>units</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>,
                      <argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{</block>
                          if (shutdownExecutors</lambda></expr></argument>)</argument_list></call>
                              <call><name>shutdownExecutors</name><argument_list>(<argument><expr><name>deadline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                      </block_content>}</block></else></if_stmt><operator>,</operator>
                      <expr_stmt><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>ExecutorUtils</name><operator>.</operator><name>awaitTermination</name></name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>units</name></expr></argument>, <argument><expr><name>inboundExecutors</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr><operator>,</operator>
                      <expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>callbacks</name><operator>.</operator><name>awaitTerminationUntil</name></name><argument_list>(<argument><expr><name>deadline</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr><operator>,</operator>
                      <expr><name>inboundSink</name><operator>::</operator><name>clear</name></expr><operator>,</operator>
                      <expr><name>outboundSink</name><operator>::</operator><name>clear</name></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
        }
    }

    <function><type><specifier>private</specifier> <name>void</name></type> <name>shutdownExecutors</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>deadlineNanos</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>TimeoutException</name></expr></argument>, <argument><expr><name>InterruptedException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>socketFactory</name><operator>.</operator><name>shutdownNow</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>socketFactory</name><operator>.</operator><name>awaitTerminationUntil</name></name><argument_list>(<argument><expr><name>deadlineNanos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>OutboundConnections</name></type> <name>getOutbound</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>to</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>OutboundConnections</name></type> <name>connections</name> <init>= <expr><call><name><name>channelManagers</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>connections</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>connections</name> <operator>=</operator> <call><name><name>OutboundConnections</name><operator>.</operator><name>tryRegister</name></name><argument_list>(<argument><expr><name>channelManagers</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>OutboundConnectionSettings</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>withDefaults</name><argument_list>(<argument><expr><name><name>ConnectionCategory</name><operator>.</operator><name>MESSAGING</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><name>connections</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>InboundMessageHandlers</name></type> <name>getInbound</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>from</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>InboundMessageHandlers</name></type> <name>handlers</name> <init>= <expr><call><name><name>messageHandlers</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name>handlers</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>handlers</name></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><call><name><name>messageHandlers</name><operator>.</operator><name>computeIfAbsent</name></name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>addr</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content>
            <expr><operator>new</operator> <call><name>InboundMessageHandlers</name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getLocalAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>,
                                       <argument><expr><name>addr</name></expr></argument>,
                                       <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getInternodeApplicationReceiveQueueCapacityInBytes</name></name><argument_list>()</argument_list></call></expr></argument>,
                                       <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getInternodeApplicationReceiveQueueReserveEndpointCapacityInBytes</name></name><argument_list>()</argument_list></call></expr></argument>,
                                       <argument><expr><name>inboundGlobalReserveLimits</name></expr></argument>, <argument><expr><name>metrics</name></expr></argument>, <argument><expr><name>inboundSink</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>
        )</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><name>boolean</name></type> <name>isConnected</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>messageOut</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>OutboundConnections</name></type> <name>pool</name> <init>= <expr><call><name><name>channelManagers</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>pool</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><call><name><name>pool</name><operator>.</operator><name>connectionFor</name></name><argument_list>(<argument><expr><name>messageOut</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isConnected</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>listen</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>inboundSockets</name><operator>.</operator><name>open</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>waitUntilListening</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>InterruptedException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>inboundSockets</name><operator>.</operator><name>open</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>await</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
}
</unit>
