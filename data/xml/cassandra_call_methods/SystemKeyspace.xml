<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/db/SystemKeyspace.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOError</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>InetAddress</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Collectors</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>StreamSupport</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>management</name><operator>.</operator><name>openmbean</name><operator>.</operator><name>OpenDataException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>management</name><operator>.</operator><name>openmbean</name><operator>.</operator><name>TabularData</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>HashMultimap</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableMap</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableSet</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>SetMultimap</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Sets</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteStreams</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ListenableFuture</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>QueryProcessor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>UntypedResultSet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>functions</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>statements</name><operator>.</operator><name>schema</name><operator>.</operator><name>CreateTableStatement</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>commitlog</name><operator>.</operator><name>CommitLogPosition</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>compaction</name><operator>.</operator><name>CompactionHistoryTabularData</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>partitions</name><operator>.</operator><name>PartitionUpdate</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>rows</name><operator>.</operator><name>Rows</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>ConfigurationException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>IEndpointSnitch</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>InetAddressAndPort</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>metrics</name><operator>.</operator><name>RestorableMeter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>MessagingService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>SchemaConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>StorageService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>paxos</name><operator>.</operator><name>Commit</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>paxos</name><operator>.</operator><name>PaxosState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>streaming</name><operator>.</operator><name>StreamOperation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>transport</name><operator>.</operator><name>ProtocolVersion</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>*</name></name>;</import>

<import>import static <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name><operator>.</operator><name>format</name></name>;</import>
<import>import static <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name><operator>.</operator><name>emptyMap</name></name>;</import>
<import>import static <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name><operator>.</operator><name>singletonMap</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>QueryProcessor</name><operator>.</operator><name>executeInternal</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>QueryProcessor</name><operator>.</operator><name>executeOnceInternal</name></name>;</import>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>SystemKeyspace</name>
<block>{
    <constructor><specifier>private</specifier> <name>SystemKeyspace</name><parameter_list>()</parameter_list>
    <block>{<block_content>
    </block_content>}</block></constructor>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>SystemKeyspace</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Used to indicate that there was a previous version written to the legacy (pre 1.2)</comment>
    <comment type="line">// system.Versions table, but that we cannot read it. Suffice to say, any upgrade should</comment>
    <comment type="line">// proceed through 1.2.x before upgrading to the current version.</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>CassandraVersion</name></type> <name>UNREADABLE_VERSION</name> <init>= <expr><operator>new</operator> <call><name>CassandraVersion</name><argument_list>(<argument><expr><literal type="string">"0.0.0-unknown"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Used to indicate that no previous version information was found. When encountered, we assume that</comment>
    <comment type="line">// Cassandra was not previously installed and we're in the process of starting a fresh node.</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>CassandraVersion</name></type> <name>NULL_VERSION</name> <init>= <expr><operator>new</operator> <call><name>CassandraVersion</name><argument_list>(<argument><expr><literal type="string">"0.0.0-absent"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>CassandraVersion</name></type> <name>CURRENT_VERSION</name> <init>= <expr><operator>new</operator> <call><name>CassandraVersion</name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getReleaseVersionString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BATCHES</name> <init>= <expr><literal type="string">"batches"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PAXOS</name> <init>= <expr><literal type="string">"paxos"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BUILT_INDEXES</name> <init>= <expr><literal type="string">"IndexInfo"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>LOCAL</name> <init>= <expr><literal type="string">"local"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PEERS_V2</name> <init>= <expr><literal type="string">"peers_v2"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PEER_EVENTS_V2</name> <init>= <expr><literal type="string">"peer_events_v2"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COMPACTION_HISTORY</name> <init>= <expr><literal type="string">"compaction_history"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SSTABLE_ACTIVITY</name> <init>= <expr><literal type="string">"sstable_activity"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TABLE_ESTIMATES</name> <init>= <expr><literal type="string">"table_estimates"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TABLE_ESTIMATES_TYPE_PRIMARY</name> <init>= <expr><literal type="string">"primary"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TABLE_ESTIMATES_TYPE_LOCAL_PRIMARY</name> <init>= <expr><literal type="string">"local_primary"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>AVAILABLE_RANGES_V2</name> <init>= <expr><literal type="string">"available_ranges_v2"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TRANSFERRED_RANGES_V2</name> <init>= <expr><literal type="string">"transferred_ranges_v2"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>VIEW_BUILDS_IN_PROGRESS</name> <init>= <expr><literal type="string">"view_builds_in_progress"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BUILT_VIEWS</name> <init>= <expr><literal type="string">"built_views"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PREPARED_STATEMENTS</name> <init>= <expr><literal type="string">"prepared_statements"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>REPAIRS</name> <init>= <expr><literal type="string">"repairs"</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * By default the system keyspace tables should be stored in a single data directory to allow the server
     * to handle more gracefully disk failures. Some tables through can be split accross multiple directories
     * as the server can continue operating even if those tables lost some data.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>TABLES_SPLIT_ACROSS_MULTIPLE_DISKS</name> <init>= <expr><call><name><name>ImmutableSet</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>BATCHES</name></expr></argument>,
                                                                                         <argument><expr><name>PAXOS</name></expr></argument>,
                                                                                         <argument><expr><name>COMPACTION_HISTORY</name></expr></argument>,
                                                                                         <argument><expr><name>PREPARED_STATEMENTS</name></expr></argument>,
                                                                                         <argument><expr><name>REPAIRS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Deprecated</name></annotation> <type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>LEGACY_PEERS</name> <init>= <expr><literal type="string">"peers"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>Deprecated</name></annotation> <type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>LEGACY_PEER_EVENTS</name> <init>= <expr><literal type="string">"peer_events"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>Deprecated</name></annotation> <type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>LEGACY_TRANSFERRED_RANGES</name> <init>= <expr><literal type="string">"transferred_ranges"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>Deprecated</name></annotation> <type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>LEGACY_AVAILABLE_RANGES</name> <init>= <expr><literal type="string">"available_ranges"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>Deprecated</name></annotation> <type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>LEGACY_SIZE_ESTIMATES</name> <init>= <expr><literal type="string">"size_estimates"</literal></expr></init></decl>;</decl_stmt>


    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TableMetadata</name></type> <name>Batches</name> <init>=
        <expr><call><name>parse</name><argument_list>(<argument><expr><name>BATCHES</name></expr></argument>,
              <argument><expr><literal type="string">"batches awaiting replay"</literal></expr></argument>,
              <argument><expr><literal type="string">"CREATE TABLE %s ("</literal>
              <operator>+</operator> <literal type="string">"id timeuuid,"</literal>
              <operator>+</operator> <literal type="string">"mutations list&lt;blob&gt;,"</literal>
              <operator>+</operator> <literal type="string">"version int,"</literal>
              <operator>+</operator> <literal type="string">"PRIMARY KEY ((id)))"</literal></expr></argument>)</argument_list></call>
              <operator>.</operator><call><name>partitioner</name><argument_list>(<argument><expr><operator>new</operator> <call><name>LocalPartitioner</name><argument_list>(<argument><expr><name><name>TimeUUIDType</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
              <operator>.</operator><call><name>compaction</name><argument_list>(<argument><expr><call><name><name>CompactionParams</name><operator>.</operator><name>stcs</name></name><argument_list>(<argument><expr><call><name>singletonMap</name><argument_list>(<argument><expr><literal type="string">"min_threshold"</literal></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
              <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TableMetadata</name></type> <name>Paxos</name> <init>=
        <expr><call><name>parse</name><argument_list>(<argument><expr><name>PAXOS</name></expr></argument>,
                <argument><expr><literal type="string">"in-progress paxos proposals"</literal></expr></argument>,
                <argument><expr><literal type="string">"CREATE TABLE %s ("</literal>
                <operator>+</operator> <literal type="string">"row_key blob,"</literal>
                <operator>+</operator> <literal type="string">"cf_id UUID,"</literal>
                <operator>+</operator> <literal type="string">"in_progress_ballot timeuuid,"</literal>
                <operator>+</operator> <literal type="string">"most_recent_commit blob,"</literal>
                <operator>+</operator> <literal type="string">"most_recent_commit_at timeuuid,"</literal>
                <operator>+</operator> <literal type="string">"most_recent_commit_version int,"</literal>
                <operator>+</operator> <literal type="string">"proposal blob,"</literal>
                <operator>+</operator> <literal type="string">"proposal_ballot timeuuid,"</literal>
                <operator>+</operator> <literal type="string">"proposal_version int,"</literal>
                <operator>+</operator> <literal type="string">"PRIMARY KEY ((row_key), cf_id))"</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>compaction</name><argument_list>(<argument><expr><call><name><name>CompactionParams</name><operator>.</operator><name>lcs</name></name><argument_list>(<argument><expr><call><name>emptyMap</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TableMetadata</name></type> <name>BuiltIndexes</name> <init>=
        <expr><call><name>parse</name><argument_list>(<argument><expr><name>BUILT_INDEXES</name></expr></argument>,
              <argument><expr><literal type="string">"built column indexes"</literal></expr></argument>,
              <argument><expr><literal type="string">"CREATE TABLE \"%s\" ("</literal>
              <operator>+</operator> <literal type="string">"table_name text,"</literal> <comment type="line">// table_name here is the name of the keyspace - don't be fooled</comment>
              <operator>+</operator> <literal type="string">"index_name text,"</literal>
              <operator>+</operator> <literal type="string">"value blob,"</literal> <comment type="line">// Table used to be compact in previous versions</comment>
              <operator>+</operator> <literal type="string">"PRIMARY KEY ((table_name), index_name)) "</literal></expr></argument>)</argument_list></call>
              <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TableMetadata</name></type> <name>Local</name> <init>=
        <expr><call><name>parse</name><argument_list>(<argument><expr><name>LOCAL</name></expr></argument>,
                <argument><expr><literal type="string">"information about the local node"</literal></expr></argument>,
                <argument><expr><literal type="string">"CREATE TABLE %s ("</literal>
                <operator>+</operator> <literal type="string">"key text,"</literal>
                <operator>+</operator> <literal type="string">"bootstrapped text,"</literal>
                <operator>+</operator> <literal type="string">"broadcast_address inet,"</literal>
                <operator>+</operator> <literal type="string">"broadcast_port int,"</literal>
                <operator>+</operator> <literal type="string">"cluster_name text,"</literal>
                <operator>+</operator> <literal type="string">"cql_version text,"</literal>
                <operator>+</operator> <literal type="string">"data_center text,"</literal>
                <operator>+</operator> <literal type="string">"gossip_generation int,"</literal>
                <operator>+</operator> <literal type="string">"host_id uuid,"</literal>
                <operator>+</operator> <literal type="string">"listen_address inet,"</literal>
                <operator>+</operator> <literal type="string">"listen_port int,"</literal>
                <operator>+</operator> <literal type="string">"native_protocol_version text,"</literal>
                <operator>+</operator> <literal type="string">"partitioner text,"</literal>
                <operator>+</operator> <literal type="string">"rack text,"</literal>
                <operator>+</operator> <literal type="string">"release_version text,"</literal>
                <operator>+</operator> <literal type="string">"rpc_address inet,"</literal>
                <operator>+</operator> <literal type="string">"rpc_port int,"</literal>
                <operator>+</operator> <literal type="string">"schema_version uuid,"</literal>
                <operator>+</operator> <literal type="string">"tokens set&lt;varchar&gt;,"</literal>
                <operator>+</operator> <literal type="string">"truncated_at map&lt;uuid, blob&gt;,"</literal>
                <operator>+</operator> <literal type="string">"PRIMARY KEY ((key)))"</literal></expr></argument>
                )</argument_list></call><operator>.</operator><call><name>recordDeprecatedSystemColumn</name><argument_list>(<argument><expr><literal type="string">"thrift_version"</literal></expr></argument>, <argument><expr><name><name>UTF8Type</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TableMetadata</name></type> <name>PeersV2</name> <init>=
        <expr><call><name>parse</name><argument_list>(<argument><expr><name>PEERS_V2</name></expr></argument>,
                <argument><expr><literal type="string">"information about known peers in the cluster"</literal></expr></argument>,
                <argument><expr><literal type="string">"CREATE TABLE %s ("</literal>
                <operator>+</operator> <literal type="string">"peer inet,"</literal>
                <operator>+</operator> <literal type="string">"peer_port int,"</literal>
                <operator>+</operator> <literal type="string">"data_center text,"</literal>
                <operator>+</operator> <literal type="string">"host_id uuid,"</literal>
                <operator>+</operator> <literal type="string">"preferred_ip inet,"</literal>
                <operator>+</operator> <literal type="string">"preferred_port int,"</literal>
                <operator>+</operator> <literal type="string">"rack text,"</literal>
                <operator>+</operator> <literal type="string">"release_version text,"</literal>
                <operator>+</operator> <literal type="string">"native_address inet,"</literal>
                <operator>+</operator> <literal type="string">"native_port int,"</literal>
                <operator>+</operator> <literal type="string">"schema_version uuid,"</literal>
                <operator>+</operator> <literal type="string">"tokens set&lt;varchar&gt;,"</literal>
                <operator>+</operator> <literal type="string">"PRIMARY KEY ((peer), peer_port))"</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TableMetadata</name></type> <name>PeerEventsV2</name> <init>=
        <expr><call><name>parse</name><argument_list>(<argument><expr><name>PEER_EVENTS_V2</name></expr></argument>,
                <argument><expr><literal type="string">"events related to peers"</literal></expr></argument>,
                <argument><expr><literal type="string">"CREATE TABLE %s ("</literal>
                <operator>+</operator> <literal type="string">"peer inet,"</literal>
                <operator>+</operator> <literal type="string">"peer_port int,"</literal>
                <operator>+</operator> <literal type="string">"hints_dropped map&lt;uuid, int&gt;,"</literal>
                <operator>+</operator> <literal type="string">"PRIMARY KEY ((peer), peer_port))"</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TableMetadata</name></type> <name>CompactionHistory</name> <init>=
        <expr><call><name>parse</name><argument_list>(<argument><expr><name>COMPACTION_HISTORY</name></expr></argument>,
                <argument><expr><literal type="string">"week-long compaction history"</literal></expr></argument>,
                <argument><expr><literal type="string">"CREATE TABLE %s ("</literal>
                <operator>+</operator> <literal type="string">"id uuid,"</literal>
                <operator>+</operator> <literal type="string">"bytes_in bigint,"</literal>
                <operator>+</operator> <literal type="string">"bytes_out bigint,"</literal>
                <operator>+</operator> <literal type="string">"columnfamily_name text,"</literal>
                <operator>+</operator> <literal type="string">"compacted_at timestamp,"</literal>
                <operator>+</operator> <literal type="string">"keyspace_name text,"</literal>
                <operator>+</operator> <literal type="string">"rows_merged map&lt;int, bigint&gt;,"</literal>
                <operator>+</operator> <literal type="string">"PRIMARY KEY ((id)))"</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>defaultTimeToLive</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>TimeUnit</name><operator>.</operator><name>DAYS</name><operator>.</operator><name>toSeconds</name></name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TableMetadata</name></type> <name>SSTableActivity</name> <init>=
        <expr><call><name>parse</name><argument_list>(<argument><expr><name>SSTABLE_ACTIVITY</name></expr></argument>,
                <argument><expr><literal type="string">"historic sstable read rates"</literal></expr></argument>,
                <argument><expr><literal type="string">"CREATE TABLE %s ("</literal>
                <operator>+</operator> <literal type="string">"keyspace_name text,"</literal>
                <operator>+</operator> <literal type="string">"columnfamily_name text,"</literal>
                <operator>+</operator> <literal type="string">"generation int,"</literal>
                <operator>+</operator> <literal type="string">"rate_120m double,"</literal>
                <operator>+</operator> <literal type="string">"rate_15m double,"</literal>
                <operator>+</operator> <literal type="string">"PRIMARY KEY ((keyspace_name, columnfamily_name, generation)))"</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Deprecated</name></annotation>
    <type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TableMetadata</name></type> <name>LegacySizeEstimates</name> <init>=
        <expr><call><name>parse</name><argument_list>(<argument><expr><name>LEGACY_SIZE_ESTIMATES</name></expr></argument>,
              <argument><expr><literal type="string">"per-table primary range size estimates, table is deprecated in favor of "</literal> <operator>+</operator> <name>TABLE_ESTIMATES</name></expr></argument>,
                <argument><expr><literal type="string">"CREATE TABLE %s ("</literal>
                <operator>+</operator> <literal type="string">"keyspace_name text,"</literal>
                <operator>+</operator> <literal type="string">"table_name text,"</literal>
                <operator>+</operator> <literal type="string">"range_start text,"</literal>
                <operator>+</operator> <literal type="string">"range_end text,"</literal>
                <operator>+</operator> <literal type="string">"mean_partition_size bigint,"</literal>
                <operator>+</operator> <literal type="string">"partitions_count bigint,"</literal>
                <operator>+</operator> <literal type="string">"PRIMARY KEY ((keyspace_name), table_name, range_start, range_end))"</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TableMetadata</name></type> <name>TableEstimates</name> <init>=
        <expr><call><name>parse</name><argument_list>(<argument><expr><name>TABLE_ESTIMATES</name></expr></argument>,
              <argument><expr><literal type="string">"per-table range size estimates"</literal></expr></argument>,
              <argument><expr><literal type="string">"CREATE TABLE %s ("</literal>
               <operator>+</operator> <literal type="string">"keyspace_name text,"</literal>
               <operator>+</operator> <literal type="string">"table_name text,"</literal>
               <operator>+</operator> <literal type="string">"range_type text,"</literal>
               <operator>+</operator> <literal type="string">"range_start text,"</literal>
               <operator>+</operator> <literal type="string">"range_end text,"</literal>
               <operator>+</operator> <literal type="string">"mean_partition_size bigint,"</literal>
               <operator>+</operator> <literal type="string">"partitions_count bigint,"</literal>
               <operator>+</operator> <literal type="string">"PRIMARY KEY ((keyspace_name), table_name, range_type, range_start, range_end))"</literal></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TableMetadata</name></type> <name>AvailableRangesV2</name> <init>=
    <expr><call><name>parse</name><argument_list>(<argument><expr><name>AVAILABLE_RANGES_V2</name></expr></argument>,
          <argument><expr><literal type="string">"available keyspace/ranges during bootstrap/replace that are ready to be served"</literal></expr></argument>,
          <argument><expr><literal type="string">"CREATE TABLE %s ("</literal>
          <operator>+</operator> <literal type="string">"keyspace_name text,"</literal>
          <operator>+</operator> <literal type="string">"full_ranges set&lt;blob&gt;,"</literal>
          <operator>+</operator> <literal type="string">"transient_ranges set&lt;blob&gt;,"</literal>
          <operator>+</operator> <literal type="string">"PRIMARY KEY ((keyspace_name)))"</literal></expr></argument>)</argument_list></call>
    <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TableMetadata</name></type> <name>TransferredRangesV2</name> <init>=
        <expr><call><name>parse</name><argument_list>(<argument><expr><name>TRANSFERRED_RANGES_V2</name></expr></argument>,
                <argument><expr><literal type="string">"record of transferred ranges for streaming operation"</literal></expr></argument>,
                <argument><expr><literal type="string">"CREATE TABLE %s ("</literal>
                <operator>+</operator> <literal type="string">"operation text,"</literal>
                <operator>+</operator> <literal type="string">"peer inet,"</literal>
                <operator>+</operator> <literal type="string">"peer_port int,"</literal>
                <operator>+</operator> <literal type="string">"keyspace_name text,"</literal>
                <operator>+</operator> <literal type="string">"ranges set&lt;blob&gt;,"</literal>
                <operator>+</operator> <literal type="string">"PRIMARY KEY ((operation, keyspace_name), peer, peer_port))"</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TableMetadata</name></type> <name>ViewBuildsInProgress</name> <init>=
        <expr><call><name>parse</name><argument_list>(<argument><expr><name>VIEW_BUILDS_IN_PROGRESS</name></expr></argument>,
              <argument><expr><literal type="string">"views builds current progress"</literal></expr></argument>,
              <argument><expr><literal type="string">"CREATE TABLE %s ("</literal>
              <operator>+</operator> <literal type="string">"keyspace_name text,"</literal>
              <operator>+</operator> <literal type="string">"view_name text,"</literal>
              <operator>+</operator> <literal type="string">"start_token varchar,"</literal>
              <operator>+</operator> <literal type="string">"end_token varchar,"</literal>
              <operator>+</operator> <literal type="string">"last_token varchar,"</literal>
              <operator>+</operator> <literal type="string">"keys_built bigint,"</literal>
              <operator>+</operator> <literal type="string">"PRIMARY KEY ((keyspace_name), view_name, start_token, end_token))"</literal></expr></argument>)</argument_list></call>
              <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TableMetadata</name></type> <name>BuiltViews</name> <init>=
        <expr><call><name>parse</name><argument_list>(<argument><expr><name>BUILT_VIEWS</name></expr></argument>,
                <argument><expr><literal type="string">"built views"</literal></expr></argument>,
                <argument><expr><literal type="string">"CREATE TABLE %s ("</literal>
                <operator>+</operator> <literal type="string">"keyspace_name text,"</literal>
                <operator>+</operator> <literal type="string">"view_name text,"</literal>
                <operator>+</operator> <literal type="string">"status_replicated boolean,"</literal>
                <operator>+</operator> <literal type="string">"PRIMARY KEY ((keyspace_name), view_name))"</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TableMetadata</name></type> <name>PreparedStatements</name> <init>=
        <expr><call><name>parse</name><argument_list>(<argument><expr><name>PREPARED_STATEMENTS</name></expr></argument>,
                <argument><expr><literal type="string">"prepared statements"</literal></expr></argument>,
                <argument><expr><literal type="string">"CREATE TABLE %s ("</literal>
                <operator>+</operator> <literal type="string">"prepared_id blob,"</literal>
                <operator>+</operator> <literal type="string">"logged_keyspace text,"</literal>
                <operator>+</operator> <literal type="string">"query_string text,"</literal>
                <operator>+</operator> <literal type="string">"PRIMARY KEY ((prepared_id)))"</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TableMetadata</name></type> <name>Repairs</name> <init>=
        <expr><call><name>parse</name><argument_list>(<argument><expr><name>REPAIRS</name></expr></argument>,
          <argument><expr><literal type="string">"repairs"</literal></expr></argument>,
          <argument><expr><literal type="string">"CREATE TABLE %s ("</literal>
          <operator>+</operator> <literal type="string">"parent_id timeuuid, "</literal>
          <operator>+</operator> <literal type="string">"started_at timestamp, "</literal>
          <operator>+</operator> <literal type="string">"last_update timestamp, "</literal>
          <operator>+</operator> <literal type="string">"repaired_at timestamp, "</literal>
          <operator>+</operator> <literal type="string">"state int, "</literal>
          <operator>+</operator> <literal type="string">"coordinator inet, "</literal>
          <operator>+</operator> <literal type="string">"coordinator_port int,"</literal>
          <operator>+</operator> <literal type="string">"participants set&lt;inet&gt;,"</literal>
          <operator>+</operator> <literal type="string">"participants_wp set&lt;text&gt;,"</literal>
          <operator>+</operator> <literal type="string">"ranges set&lt;blob&gt;, "</literal>
          <operator>+</operator> <literal type="string">"cfids set&lt;uuid&gt;, "</literal>
          <operator>+</operator> <literal type="string">"PRIMARY KEY (parent_id))"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Deprecated</name></annotation>
    <type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TableMetadata</name></type> <name>LegacyPeers</name> <init>=
        <expr><call><name>parse</name><argument_list>(<argument><expr><name>LEGACY_PEERS</name></expr></argument>,
            <argument><expr><literal type="string">"information about known peers in the cluster"</literal></expr></argument>,
            <argument><expr><literal type="string">"CREATE TABLE %s ("</literal>
            <operator>+</operator> <literal type="string">"peer inet,"</literal>
            <operator>+</operator> <literal type="string">"data_center text,"</literal>
            <operator>+</operator> <literal type="string">"host_id uuid,"</literal>
            <operator>+</operator> <literal type="string">"preferred_ip inet,"</literal>
            <operator>+</operator> <literal type="string">"rack text,"</literal>
            <operator>+</operator> <literal type="string">"release_version text,"</literal>
            <operator>+</operator> <literal type="string">"rpc_address inet,"</literal>
            <operator>+</operator> <literal type="string">"schema_version uuid,"</literal>
            <operator>+</operator> <literal type="string">"tokens set&lt;varchar&gt;,"</literal>
            <operator>+</operator> <literal type="string">"PRIMARY KEY ((peer)))"</literal></expr></argument>)</argument_list></call>
            <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Deprecated</name></annotation>
    <type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TableMetadata</name></type> <name>LegacyPeerEvents</name> <init>=
        <expr><call><name>parse</name><argument_list>(<argument><expr><name>LEGACY_PEER_EVENTS</name></expr></argument>,
            <argument><expr><literal type="string">"events related to peers"</literal></expr></argument>,
            <argument><expr><literal type="string">"CREATE TABLE %s ("</literal>
            <operator>+</operator> <literal type="string">"peer inet,"</literal>
            <operator>+</operator> <literal type="string">"hints_dropped map&lt;uuid, int&gt;,"</literal>
            <operator>+</operator> <literal type="string">"PRIMARY KEY ((peer)))"</literal></expr></argument>)</argument_list></call>
            <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Deprecated</name></annotation>
    <type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TableMetadata</name></type> <name>LegacyTransferredRanges</name> <init>=
        <expr><call><name>parse</name><argument_list>(<argument><expr><name>LEGACY_TRANSFERRED_RANGES</name></expr></argument>,
            <argument><expr><literal type="string">"record of transferred ranges for streaming operation"</literal></expr></argument>,
            <argument><expr><literal type="string">"CREATE TABLE %s ("</literal>
            <operator>+</operator> <literal type="string">"operation text,"</literal>
            <operator>+</operator> <literal type="string">"peer inet,"</literal>
            <operator>+</operator> <literal type="string">"keyspace_name text,"</literal>
            <operator>+</operator> <literal type="string">"ranges set&lt;blob&gt;,"</literal>
            <operator>+</operator> <literal type="string">"PRIMARY KEY ((operation, keyspace_name), peer))"</literal></expr></argument>)</argument_list></call>
            <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Deprecated</name></annotation>
    <type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TableMetadata</name></type> <name>LegacyAvailableRanges</name> <init>=
        <expr><call><name>parse</name><argument_list>(<argument><expr><name>LEGACY_AVAILABLE_RANGES</name></expr></argument>,
              <argument><expr><literal type="string">"available keyspace/ranges during bootstrap/replace that are ready to be served"</literal></expr></argument>,
              <argument><expr><literal type="string">"CREATE TABLE %s ("</literal>
              <operator>+</operator> <literal type="string">"keyspace_name text,"</literal>
              <operator>+</operator> <literal type="string">"ranges set&lt;blob&gt;,"</literal>
              <operator>+</operator> <literal type="string">"PRIMARY KEY ((keyspace_name)))"</literal></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>TableMetadata</name><operator>.</operator><name>Builder</name></name></type> <name>parse</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>description</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>cql</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>CreateTableStatement</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><name>cql</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SYSTEM_KEYSPACE_NAME</name></name></expr></argument>)</argument_list></call>
                                   <operator>.</operator><call><name>id</name><argument_list>(<argument><expr><call><name><name>TableId</name><operator>.</operator><name>forSystemTable</name></name><argument_list>(<argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SYSTEM_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                   <operator>.</operator><call><name>gcGraceSeconds</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
                                   <operator>.</operator><call><name>memtableFlushPeriod</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>TimeUnit</name><operator>.</operator><name>HOURS</name><operator>.</operator><name>toMillis</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                   <operator>.</operator><call><name>comment</name><argument_list>(<argument><expr><name>description</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>KeyspaceMetadata</name></type> <name>metadata</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>KeyspaceMetadata</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SYSTEM_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><call><name><name>KeyspaceParams</name><operator>.</operator><name>local</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>tables</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Views</name><operator>.</operator><name>none</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Types</name><operator>.</operator><name>none</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>functions</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Tables</name></type> <name>tables</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Tables</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>BuiltIndexes</name></expr></argument>,
                         <argument><expr><name>Batches</name></expr></argument>,
                         <argument><expr><name>Paxos</name></expr></argument>,
                         <argument><expr><name>Local</name></expr></argument>,
                         <argument><expr><name>PeersV2</name></expr></argument>,
                         <argument><expr><name>LegacyPeers</name></expr></argument>,
                         <argument><expr><name>PeerEventsV2</name></expr></argument>,
                         <argument><expr><name>LegacyPeerEvents</name></expr></argument>,
                         <argument><expr><name>CompactionHistory</name></expr></argument>,
                         <argument><expr><name>SSTableActivity</name></expr></argument>,
                         <argument><expr><name>LegacySizeEstimates</name></expr></argument>,
                         <argument><expr><name>TableEstimates</name></expr></argument>,
                         <argument><expr><name>AvailableRangesV2</name></expr></argument>,
                         <argument><expr><name>LegacyAvailableRanges</name></expr></argument>,
                         <argument><expr><name>TransferredRangesV2</name></expr></argument>,
                         <argument><expr><name>LegacyTransferredRanges</name></expr></argument>,
                         <argument><expr><name>ViewBuildsInProgress</name></expr></argument>,
                         <argument><expr><name>BuiltViews</name></expr></argument>,
                         <argument><expr><name>PreparedStatements</name></expr></argument>,
                         <argument><expr><name>Repairs</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Functions</name></type> <name>functions</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Functions</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call>
                        <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><call><name><name>UuidFcts</name><operator>.</operator><name>all</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><call><name><name>TimeFcts</name><operator>.</operator><name>all</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><call><name><name>BytesConversionFcts</name><operator>.</operator><name>all</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><call><name><name>AggregateFcts</name><operator>.</operator><name>all</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><call><name><name>CastFcts</name><operator>.</operator><name>all</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><call><name><name>OperationFcts</name><operator>.</operator><name>all</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>volatile</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>TableId</name></argument>, <argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>CommitLogPosition</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>truncationRecords</name></decl>;</decl_stmt>

    <enum><specifier>public</specifier> enum <name>BootstrapState</name>
    <block>{
        <decl><name>NEEDS_BOOTSTRAP</name></decl>,
        <decl><name>COMPLETED</name></decl>,
        <decl><name>IN_PROGRESS</name></decl>,
        <decl><name>DECOMMISSIONED</name></decl>
    }</block></enum>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>finishStartup</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>saveSystemKeyspace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>persistLocalMetadata</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>req</name> <init>= <expr><literal type="string">"INSERT INTO system.%s ("</literal> <operator>+</operator>
                     <literal type="string">"key,"</literal> <operator>+</operator>
                     <literal type="string">"cluster_name,"</literal> <operator>+</operator>
                     <literal type="string">"release_version,"</literal> <operator>+</operator>
                     <literal type="string">"cql_version,"</literal> <operator>+</operator>
                     <literal type="string">"native_protocol_version,"</literal> <operator>+</operator>
                     <literal type="string">"data_center,"</literal> <operator>+</operator>
                     <literal type="string">"rack,"</literal> <operator>+</operator>
                     <literal type="string">"partitioner,"</literal> <operator>+</operator>
                     <literal type="string">"rpc_address,"</literal> <operator>+</operator>
                     <literal type="string">"rpc_port,"</literal> <operator>+</operator>
                     <literal type="string">"broadcast_address,"</literal> <operator>+</operator>
                     <literal type="string">"broadcast_port,"</literal> <operator>+</operator>
                     <literal type="string">"listen_address,"</literal> <operator>+</operator>
                     <literal type="string">"listen_port"</literal> <operator>+</operator>
                     <literal type="string">") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>IEndpointSnitch</name></type> <name>snitch</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getEndpointSnitch</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>executeOnceInternal</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>LOCAL</name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><name>LOCAL</name></expr></argument>,
                            <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getClusterName</name></name><argument_list>()</argument_list></call></expr></argument>,
                            <argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getReleaseVersionString</name></name><argument_list>()</argument_list></call></expr></argument>,
                            <argument><expr><call><name><name>QueryProcessor</name><operator>.</operator><name>CQL_VERSION</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>,
                            <argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>ProtocolVersion</name><operator>.</operator><name>CURRENT</name><operator>.</operator><name>asInt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><call><name><name>snitch</name><operator>.</operator><name>getLocalDatacenter</name></name><argument_list>()</argument_list></call></expr></argument>,
                            <argument><expr><call><name><name>snitch</name><operator>.</operator><name>getLocalRack</name></name><argument_list>()</argument_list></call></expr></argument>,
                            <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getPartitioner</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                            <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getRpcAddress</name></name><argument_list>()</argument_list></call></expr></argument>,
                            <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getNativeTransportPort</name></name><argument_list>()</argument_list></call></expr></argument>,
                            <argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getJustBroadcastAddress</name></name><argument_list>()</argument_list></call></expr></argument>,
                            <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getStoragePort</name></name><argument_list>()</argument_list></call></expr></argument>,
                            <argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getJustLocalAddress</name></name><argument_list>()</argument_list></call></expr></argument>,
                            <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getStoragePort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>updateCompactionHistory</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ksname</name></decl></parameter>,
                                               <parameter><decl><type><name>String</name></type> <name>cfname</name></decl></parameter>,
                                               <parameter><decl><type><name>long</name></type> <name>compactedAt</name></decl></parameter>,
                                               <parameter><decl><type><name>long</name></type> <name>bytesIn</name></decl></parameter>,
                                               <parameter><decl><type><name>long</name></type> <name>bytesOut</name></decl></parameter>,
                                               <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>rowsMerged</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// don't write anything when the history table itself is compacted, since that would in turn cause new compactions</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>ksname</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"system"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>cfname</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>COMPACTION_HISTORY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>req</name> <init>= <expr><literal type="string">"INSERT INTO system.%s (id, keyspace_name, columnfamily_name, compacted_at, bytes_in, bytes_out, rows_merged) VALUES (?, ?, ?, ?, ?, ?, ?)"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>COMPACTION_HISTORY</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name><name>UUIDGen</name><operator>.</operator><name>getTimeUUID</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <argument><expr><name>ksname</name></expr></argument>,
                        <argument><expr><name>cfname</name></expr></argument>,
                        <argument><expr><call><name><name>ByteBufferUtil</name><operator>.</operator><name>bytes</name></name><argument_list>(<argument><expr><name>compactedAt</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name>bytesIn</name></expr></argument>,
                        <argument><expr><name>bytesOut</name></expr></argument>,
                        <argument><expr><name>rowsMerged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>TabularData</name></type> <name>getCompactionHistory</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>OpenDataException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>UntypedResultSet</name></type> <name>queryResultSet</name> <init>= <expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"SELECT * from system.%s"</literal></expr></argument>, <argument><expr><name>COMPACTION_HISTORY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>CompactionHistoryTabularData</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>queryResultSet</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isViewBuilt</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>viewName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>req</name> <init>= <expr><literal type="string">"SELECT view_name FROM %s.\"%s\" WHERE keyspace_name=? AND view_name=?"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>UntypedResultSet</name></type> <name>result</name> <init>= <expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SYSTEM_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name>BUILT_VIEWS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>viewName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>!</operator><call><name><name>result</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isViewStatusReplicated</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>viewName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>req</name> <init>= <expr><literal type="string">"SELECT status_replicated FROM %s.\"%s\" WHERE keyspace_name=? AND view_name=?"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>UntypedResultSet</name></type> <name>result</name> <init>= <expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SYSTEM_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name>BUILT_VIEWS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>viewName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>result</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name><name>UntypedResultSet</name><operator>.</operator><name>Row</name></name></type> <name>row</name> <init>= <expr><call><name><name>result</name><operator>.</operator><name>one</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>row</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><literal type="string">"status_replicated"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>row</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"status_replicated"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setViewBuilt</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>viewName</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>replicated</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isViewBuilt</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>viewName</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isViewStatusReplicated</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>viewName</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>replicated</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>req</name> <init>= <expr><literal type="string">"INSERT INTO %s.\"%s\" (keyspace_name, view_name, status_replicated) VALUES (?, ?, ?)"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SYSTEM_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name>BUILT_VIEWS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>viewName</name></expr></argument>, <argument><expr><name>replicated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>forceBlockingFlush</name><argument_list>(<argument><expr><name>BUILT_VIEWS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setViewRemoved</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>viewName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>buildReq</name> <init>= <expr><literal type="string">"DELETE FROM %s.%s WHERE keyspace_name = ? AND view_name = ?"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>buildReq</name></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SYSTEM_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name>VIEW_BUILDS_IN_PROGRESS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>viewName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>builtReq</name> <init>= <expr><literal type="string">"DELETE FROM %s.\"%s\" WHERE keyspace_name = ? AND view_name = ? IF EXISTS"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>builtReq</name></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SYSTEM_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name>BUILT_VIEWS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>viewName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>forceBlockingFlush</name><argument_list>(<argument><expr><name>VIEW_BUILDS_IN_PROGRESS</name></expr></argument>, <argument><expr><name>BUILT_VIEWS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>finishViewBuildStatus</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ksname</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>viewName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// We flush the view built first, because if we fail now, we'll restart at the last place we checkpointed</comment>
        <comment type="line">// view build.</comment>
        <comment type="line">// If we flush the delete first, we'll have to restart from the beginning.</comment>
        <comment type="line">// Also, if writing to the built_view succeeds, but the view_builds_in_progress deletion fails, we will be able</comment>
        <comment type="line">// to skip the view build next boot.</comment>
        <expr_stmt><expr><call><name>setViewBuilt</name><argument_list>(<argument><expr><name>ksname</name></expr></argument>, <argument><expr><name>viewName</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"DELETE FROM system.%s WHERE keyspace_name = ? AND view_name = ?"</literal></expr></argument>, <argument><expr><name>VIEW_BUILDS_IN_PROGRESS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ksname</name></expr></argument>, <argument><expr><name>viewName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>forceBlockingFlush</name><argument_list>(<argument><expr><name>VIEW_BUILDS_IN_PROGRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setViewBuiltReplicated</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ksname</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>viewName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>setViewBuilt</name><argument_list>(<argument><expr><name>ksname</name></expr></argument>, <argument><expr><name>viewName</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>updateViewBuildStatus</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ksname</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>viewName</name></decl></parameter>, <parameter><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name></decl></parameter>, <parameter><decl><type><name>Token</name></type> <name>lastToken</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>keysBuilt</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>req</name> <init>= <expr><literal type="string">"INSERT INTO system.%s (keyspace_name, view_name, start_token, end_token, last_token, keys_built) VALUES (?, ?, ?, ?, ?, ?)"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Token</name><operator>.</operator><name>TokenFactory</name></name></type> <name>factory</name> <init>= <expr><call><name><name>ViewBuildsInProgress</name><operator>.</operator><name>partitioner</name><operator>.</operator><name>getTokenFactory</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>VIEW_BUILDS_IN_PROGRESS</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name>ksname</name></expr></argument>,
                        <argument><expr><name>viewName</name></expr></argument>,
                        <argument><expr><call><name><name>factory</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name><name>range</name><operator>.</operator><name>left</name></name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name><name>factory</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name><name>range</name><operator>.</operator><name>right</name></name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name><name>factory</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>lastToken</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name>keysBuilt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getViewBuildStatus</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ksname</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>viewName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>req</name> <init>= <expr><literal type="string">"SELECT start_token, end_token, last_token, keys_built FROM system.%s WHERE keyspace_name = ? AND view_name = ?"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Token</name><operator>.</operator><name>TokenFactory</name></name></type> <name>factory</name> <init>= <expr><call><name><name>ViewBuildsInProgress</name><operator>.</operator><name>partitioner</name><operator>.</operator><name>getTokenFactory</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>UntypedResultSet</name></type> <name>rs</name> <init>= <expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>VIEW_BUILDS_IN_PROGRESS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ksname</name></expr></argument>, <argument><expr><name>viewName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>rs</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>rs</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>status</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>UntypedResultSet</name><operator>.</operator><name>Row</name></name></type> <name>row</name> <range>: <expr><name>rs</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>Token</name></type> <name>start</name> <init>= <expr><call><name><name>factory</name><operator>.</operator><name>fromString</name></name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"start_token"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Token</name></type> <name>end</name> <init>= <expr><call><name><name>factory</name><operator>.</operator><name>fromString</name></name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"end_token"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name> <init>= <expr><operator>new</operator> <call><name><name>Range</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>Token</name></type> <name>lastToken</name> <init>= <expr><ternary><condition><expr><call><name><name>row</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><literal type="string">"last_token"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name><name>factory</name><operator>.</operator><name>fromString</name></name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"last_token"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>keysBuilt</name> <init>= <expr><ternary><condition><expr><call><name><name>row</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><literal type="string">"keys_built"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name><name>row</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="string">"keys_built"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>status</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>lastToken</name></expr></argument>, <argument><expr><name>keysBuilt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>status</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>saveTruncationRecord</name><parameter_list>(<parameter><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>truncatedAt</name></decl></parameter>, <parameter><decl><type><name>CommitLogPosition</name></type> <name>position</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>req</name> <init>= <expr><literal type="string">"UPDATE system.%s SET truncated_at = truncated_at + ? WHERE key = '%s'"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>LOCAL</name></expr></argument>, <argument><expr><name>LOCAL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>truncationAsMapEntry</name><argument_list>(<argument><expr><name>cfs</name></expr></argument>, <argument><expr><name>truncatedAt</name></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>truncationRecords</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>forceBlockingFlush</name><argument_list>(<argument><expr><name>LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * This method is used to remove information about truncation time for specified column family
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>removeTruncationRecord</name><parameter_list>(<parameter><decl><type><name>TableId</name></type> <name>id</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>CommitLogPosition</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>truncationRecord</name> <init>= <expr><call><name>getTruncationRecord</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>truncationRecord</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>req</name> <init>= <expr><literal type="string">"DELETE truncated_at[?] from system.%s WHERE key = '%s'"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>LOCAL</name></expr></argument>, <argument><expr><name>LOCAL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>id</name><operator>.</operator><name>asUUID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>truncationRecords</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>forceBlockingFlush</name><argument_list>(<argument><expr><name>LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>UUID</name></argument>, <argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>truncationAsMapEntry</name><parameter_list>(<parameter><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>truncatedAt</name></decl></parameter>, <parameter><decl><type><name>CommitLogPosition</name></type> <name>position</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <try>try <init>(<decl><type><name>DataOutputBuffer</name></type> <name>out</name> <init>= <expr><call><name><name>DataOutputBuffer</name><operator>.</operator><name>scratchBuffer</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>)</init>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>CommitLogPosition</name><operator>.</operator><name>serializer</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeLong</name></name><argument_list>(<argument><expr><name>truncatedAt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>singletonMap</name><argument_list>(<argument><expr><call><name><name>cfs</name><operator>.</operator><name>metadata</name><operator>.</operator><name>id</name><operator>.</operator><name>asUUID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>out</name><operator>.</operator><name>asNewBuffer</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>CommitLogPosition</name></type> <name>getTruncatedPosition</name><parameter_list>(<parameter><decl><type><name>TableId</name></type> <name>id</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>CommitLogPosition</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>record</name> <init>= <expr><call><name>getTruncationRecord</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name>record</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><name><name>record</name><operator>.</operator><name>left</name></name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getTruncatedAt</name><parameter_list>(<parameter><decl><type><name>TableId</name></type> <name>id</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>CommitLogPosition</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>record</name> <init>= <expr><call><name>getTruncationRecord</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name>record</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>Long</name><operator>.</operator><name>MIN_VALUE</name></name></expr> </then><else>: <expr><name><name>record</name><operator>.</operator><name>right</name></name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <name><name>Pair</name><argument_list type="generic">&lt;<argument><name>CommitLogPosition</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>getTruncationRecord</name><parameter_list>(<parameter><decl><type><name>TableId</name></type> <name>id</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>truncationRecords</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>truncationRecords</name> <operator>=</operator> <call><name>readTruncationRecords</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><call><name><name>truncationRecords</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>TableId</name></argument>, <argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>CommitLogPosition</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>readTruncationRecords</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>UntypedResultSet</name></type> <name>rows</name> <init>= <expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"SELECT truncated_at FROM system.%s WHERE key = '%s'"</literal></expr></argument>, <argument><expr><name>LOCAL</name></expr></argument>, <argument><expr><name>LOCAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>TableId</name></argument>, <argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>CommitLogPosition</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>records</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>rows</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>rows</name><operator>.</operator><name>one</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>has</name><argument_list>(<argument><expr><literal type="string">"truncated_at"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>UUID</name></argument>, <argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><call><name><name>rows</name><operator>.</operator><name>one</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMap</name><argument_list>(<argument><expr><literal type="string">"truncated_at"</literal></expr></argument>, <argument><expr><name><name>UUIDType</name><operator>.</operator><name>instance</name></name></expr></argument>, <argument><expr><name><name>BytesType</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>UUID</name></argument>, <argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>map</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>records</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>TableId</name><operator>.</operator><name>fromUUID</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>truncationRecordFromBlob</name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><name>records</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Pair</name><argument_list type="generic">&lt;<argument><name>CommitLogPosition</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>truncationRecordFromBlob</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>bytes</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <try>try <init>(<decl><type><name>RebufferingInputStream</name></type> <name>in</name> <init>= <expr><operator>new</operator> <call><name>DataInputBuffer</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>)</init>
        <block>{<block_content>
            <return>return <expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name><name>CommitLogPosition</name><operator>.</operator><name>serializer</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><call><name><name>in</name><operator>.</operator><name>available</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name><name>in</name><operator>.</operator><name>readLong</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name><name>Long</name><operator>.</operator><name>MIN_VALUE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Record tokens being used by another node
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>updateTokens</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>ep</name></decl></parameter>, <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>ep</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>req</name> <init>= <expr><literal type="string">"INSERT INTO system.%s (peer, tokens) VALUES (?, ?)"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>LEGACY_PEERS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ep</name><operator>.</operator><name>address</name></name></expr></argument>, <argument><expr><call><name>tokensAsSet</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>req</name> <operator>=</operator> <literal type="string">"INSERT INTO system.%s (peer, peer_port, tokens) VALUES (?, ?, ?)"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>PEERS_V2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ep</name><operator>.</operator><name>address</name></name></expr></argument>, <argument><expr><name><name>ep</name><operator>.</operator><name>port</name></name></expr></argument>, <argument><expr><call><name>tokensAsSet</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <name>boolean</name></type> <name>updatePreferredIP</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>ep</name></decl></parameter>, <parameter><decl><type><name>InetAddressAndPort</name></type> <name>preferred_ip</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>preferred_ip</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name>getPreferredIP</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>req</name> <init>= <expr><literal type="string">"INSERT INTO system.%s (peer, preferred_ip) VALUES (?, ?)"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>LEGACY_PEERS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ep</name><operator>.</operator><name>address</name></name></expr></argument>, <argument><expr><name><name>preferred_ip</name><operator>.</operator><name>address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>req</name> <operator>=</operator> <literal type="string">"INSERT INTO system.%s (peer, peer_port, preferred_ip, preferred_port) VALUES (?, ?, ?, ?)"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>PEERS_V2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ep</name><operator>.</operator><name>address</name></name></expr></argument>, <argument><expr><name><name>ep</name><operator>.</operator><name>port</name></name></expr></argument>, <argument><expr><name><name>preferred_ip</name><operator>.</operator><name>address</name></name></expr></argument>, <argument><expr><name><name>preferred_ip</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>forceBlockingFlush</name><argument_list>(<argument><expr><name>LEGACY_PEERS</name></expr></argument>, <argument><expr><name>PEERS_V2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>updatePeerInfo</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>ep</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>columnName</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>ep</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>req</name> <init>= <expr><literal type="string">"INSERT INTO system.%s (peer, %s) VALUES (?, ?)"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>LEGACY_PEERS</name></expr></argument>, <argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ep</name><operator>.</operator><name>address</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//This column doesn't match across the two tables</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>columnName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"rpc_address"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>columnName</name> <operator>=</operator> <literal type="string">"native_address"</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>req</name> <operator>=</operator> <literal type="string">"INSERT INTO system.%s (peer, peer_port, %s) VALUES (?, ?, ?)"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>PEERS_V2</name></expr></argument>, <argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ep</name><operator>.</operator><name>address</name></name></expr></argument>, <argument><expr><name><name>ep</name><operator>.</operator><name>port</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>updatePeerNativeAddress</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>ep</name></decl></parameter>, <parameter><decl><type><name>InetAddressAndPort</name></type> <name>address</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>ep</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>req</name> <init>= <expr><literal type="string">"INSERT INTO system.%s (peer, rpc_address) VALUES (?, ?)"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>LEGACY_PEERS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ep</name><operator>.</operator><name>address</name></name></expr></argument>, <argument><expr><name><name>address</name><operator>.</operator><name>address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>req</name> <operator>=</operator> <literal type="string">"INSERT INTO system.%s (peer, peer_port, native_address, native_port) VALUES (?, ?, ?, ?)"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>PEERS_V2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ep</name><operator>.</operator><name>address</name></name></expr></argument>, <argument><expr><name><name>ep</name><operator>.</operator><name>port</name></name></expr></argument>, <argument><expr><name><name>address</name><operator>.</operator><name>address</name></name></expr></argument>, <argument><expr><name><name>address</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>


    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>updateHintsDropped</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>ep</name></decl></parameter>, <parameter><decl><type><name>UUID</name></type> <name>timePeriod</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// with 30 day TTL</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>req</name> <init>= <expr><literal type="string">"UPDATE system.%s USING TTL 2592000 SET hints_dropped[ ? ] = ? WHERE peer = ?"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>LEGACY_PEER_EVENTS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>timePeriod</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>ep</name><operator>.</operator><name>address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>req</name> <operator>=</operator> <literal type="string">"UPDATE system.%s USING TTL 2592000 SET hints_dropped[ ? ] = ? WHERE peer = ? AND peer_port = ?"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>PEER_EVENTS_V2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>timePeriod</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>ep</name><operator>.</operator><name>address</name></name></expr></argument>, <argument><expr><name><name>ep</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>updateSchemaVersion</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>version</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>req</name> <init>= <expr><literal type="string">"INSERT INTO system.%s (key, schema_version) VALUES ('%s', ?)"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>LOCAL</name></expr></argument>, <argument><expr><name>LOCAL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>tokensAsSet</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>tokens</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>emptySet</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name><name>Token</name><operator>.</operator><name>TokenFactory</name></name></type> <name>factory</name> <init>= <expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>getTokenFactory</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>s</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>tokens</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Token</name></type> <name>tk</name> <range>: <expr><name>tokens</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>factory</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>tk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <return>return <expr><name>s</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>deserializeTokens</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>tokensStrings</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Token</name><operator>.</operator><name>TokenFactory</name></name></type> <name>factory</name> <init>= <expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>getTokenFactory</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>tokensStrings</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>tk</name> <range>: <expr><name>tokensStrings</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>tokens</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>factory</name><operator>.</operator><name>fromString</name></name><argument_list>(<argument><expr><name>tk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <return>return <expr><name>tokens</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Remove stored tokens being used by another node
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>removeEndpoint</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>ep</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>req</name> <init>= <expr><literal type="string">"DELETE FROM system.%s WHERE peer = ?"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>LEGACY_PEERS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ep</name><operator>.</operator><name>address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>req</name> <operator>=</operator> <call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"DELETE FROM system.%s WHERE peer = ? AND peer_port = ?"</literal></expr></argument>, <argument><expr><name>PEERS_V2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>executeInternal</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name><name>ep</name><operator>.</operator><name>address</name></name></expr></argument>, <argument><expr><name><name>ep</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>forceBlockingFlush</name><argument_list>(<argument><expr><name>LEGACY_PEERS</name></expr></argument>, <argument><expr><name>PEERS_V2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * This method is used to update the System Keyspace with the new tokens for this node
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>updateTokens</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><operator>!</operator><call><name><name>tokens</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>:</operator> <literal type="string">"removeEndpoint should be used instead"</literal></expr>;</assert>

        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>savedTokens</name> <init>= <expr><call><name>getSavedTokens</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>tokens</name><operator>.</operator><name>containsAll</name></name><argument_list>(<argument><expr><name>savedTokens</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>tokens</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>savedTokens</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>req</name> <init>= <expr><literal type="string">"INSERT INTO system.%s (key, tokens) VALUES ('%s', ?)"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>LOCAL</name></expr></argument>, <argument><expr><name>LOCAL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tokensAsSet</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>forceBlockingFlush</name><argument_list>(<argument><expr><name>LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>forceBlockingFlush</name><parameter_list>(<parameter><decl><type><name>String</name> <modifier>...</modifier></type><name>cfnames</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>isUnsafeSystem</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>ListenableFuture</name><argument_list type="generic">&lt;<argument><name>CommitLogPosition</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>futures</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name>String</name></type> <name>cfname</name> <range>: <expr><name>cfnames</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>futures</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SYSTEM_KEYSPACE_NAME</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getColumnFamilyStore</name><argument_list>(<argument><expr><name>cfname</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>forceFlush</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name><name>FBUtilities</name><operator>.</operator><name>waitOnFutures</name></name><argument_list>(<argument><expr><name>futures</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Return a map of stored tokens to IP addresses
     *
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>SetMultimap</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>loadTokens</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>SetMultimap</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokenMap</name> <init>= <expr><call><name><name>HashMultimap</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>UntypedResultSet</name><operator>.</operator><name>Row</name></name></type> <name>row</name> <range>: <expr><call><name>executeInternal</name><argument_list>(<argument><expr><literal type="string">"SELECT peer, peer_port, tokens FROM system."</literal> <operator>+</operator> <name>PEERS_V2</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>InetAddress</name></type> <name>address</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getInetAddress</name></name><argument_list>(<argument><expr><literal type="string">"peer"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Integer</name></type> <name>port</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"peer_port"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>InetAddressAndPort</name></type> <name>peer</name> <init>= <expr><call><name><name>InetAddressAndPort</name><operator>.</operator><name>getByAddressOverrideDefaults</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>row</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><literal type="string">"tokens"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>tokenMap</name><operator>.</operator><name>putAll</name></name><argument_list>(<argument><expr><name>peer</name></expr></argument>, <argument><expr><call><name>deserializeTokens</name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getSet</name></name><argument_list>(<argument><expr><literal type="string">"tokens"</literal></expr></argument>, <argument><expr><name><name>UTF8Type</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>

        <return>return <expr><name>tokenMap</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Return a map of store host_ids to IP addresses
     *
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>UUID</name></argument>&gt;</argument_list></name></type> <name>loadHostIds</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>UUID</name></argument>&gt;</argument_list></name></type> <name>hostIdMap</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>UntypedResultSet</name><operator>.</operator><name>Row</name></name></type> <name>row</name> <range>: <expr><call><name>executeInternal</name><argument_list>(<argument><expr><literal type="string">"SELECT peer, peer_port, host_id FROM system."</literal> <operator>+</operator> <name>PEERS_V2</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>InetAddress</name></type> <name>address</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getInetAddress</name></name><argument_list>(<argument><expr><literal type="string">"peer"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Integer</name></type> <name>port</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"peer_port"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>InetAddressAndPort</name></type> <name>peer</name> <init>= <expr><call><name><name>InetAddressAndPort</name><operator>.</operator><name>getByAddressOverrideDefaults</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>row</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><literal type="string">"host_id"</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>hostIdMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>peer</name></expr></argument>, <argument><expr><call><name><name>row</name><operator>.</operator><name>getUUID</name></name><argument_list>(<argument><expr><literal type="string">"host_id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>hostIdMap</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get preferred IP for given endpoint if it is known. Otherwise this returns given endpoint itself.
     *
     * @param ep endpoint address to check
     * @return Preferred IP for given endpoint if present, otherwise returns given ep
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>InetAddressAndPort</name></type> <name>getPreferredIP</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>ep</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>req</name> <init>= <expr><literal type="string">"SELECT preferred_ip, preferred_port FROM system.%s WHERE peer=? AND peer_port = ?"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>UntypedResultSet</name></type> <name>result</name> <init>= <expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>PEERS_V2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ep</name><operator>.</operator><name>address</name></name></expr></argument>, <argument><expr><name><name>ep</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>result</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>result</name><operator>.</operator><name>one</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>has</name><argument_list>(<argument><expr><literal type="string">"preferred_ip"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>UntypedResultSet</name><operator>.</operator><name>Row</name></name></type> <name>row</name> <init>= <expr><call><name><name>result</name><operator>.</operator><name>one</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>InetAddressAndPort</name><operator>.</operator><name>getByAddressOverrideDefaults</name></name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getInetAddress</name></name><argument_list>(<argument><expr><literal type="string">"preferred_ip"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>row</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"preferred_port"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>ep</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Return a map of IP addresses containing a map of dc and rack info
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>loadDcRackInfo</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>UntypedResultSet</name><operator>.</operator><name>Row</name></name></type> <name>row</name> <range>: <expr><call><name>executeInternal</name><argument_list>(<argument><expr><literal type="string">"SELECT peer, peer_port, data_center, rack from system."</literal> <operator>+</operator> <name>PEERS_V2</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>InetAddress</name></type> <name>address</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getInetAddress</name></name><argument_list>(<argument><expr><literal type="string">"peer"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Integer</name></type> <name>port</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"peer_port"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>InetAddressAndPort</name></type> <name>peer</name> <init>= <expr><call><name><name>InetAddressAndPort</name><operator>.</operator><name>getByAddressOverrideDefaults</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>row</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><literal type="string">"data_center"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>row</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><literal type="string">"rack"</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>dcRack</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>dcRack</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"data_center"</literal></expr></argument>, <argument><expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"data_center"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>dcRack</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"rack"</literal></expr></argument>, <argument><expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"rack"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>peer</name></expr></argument>, <argument><expr><name>dcRack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get release version for given endpoint.
     * If release version is unknown, then this returns null.
     *
     * @param ep endpoint address to check
     * @return Release version or null if version is unknown.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>CassandraVersion</name></type> <name>getReleaseVersion</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>ep</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <return>return <expr><name>CURRENT_VERSION</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>req</name> <init>= <expr><literal type="string">"SELECT release_version FROM system.%s WHERE peer=? AND peer_port=?"</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>UntypedResultSet</name></type> <name>result</name> <init>= <expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>PEERS_V2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ep</name><operator>.</operator><name>address</name></name></expr></argument>, <argument><expr><name><name>ep</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>result</name><operator>.</operator><name>one</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>has</name><argument_list>(<argument><expr><literal type="string">"release_version"</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>CassandraVersion</name><argument_list>(<argument><expr><call><name><name>result</name><operator>.</operator><name>one</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><literal type="string">"release_version"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <comment type="line">// version is unknown</comment>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalArgumentException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <comment type="line">// version string cannot be parsed</comment>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * One of three things will happen if you try to read the system keyspace:
     * 1. files are present and you can read them: great
     * 2. no files are there: great (new node is assumed)
     * 3. files are present but you can't read them: bad
     * @throws ConfigurationException
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>checkHealth</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Keyspace</name></type> <name>keyspace</name></decl>;</decl_stmt>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><name>keyspace</name> <operator>=</operator> <call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SYSTEM_KEYSPACE_NAME</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>AssertionError</name></type> <name>err</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <comment type="line">// this happens when a user switches from OPP to RP.</comment>
            <decl_stmt><decl><type><name>ConfigurationException</name></type> <name>ex</name> <init>= <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Could not read system keyspace!"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>ex</name><operator>.</operator><name>initCause</name></name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>ex</name></expr>;</throw>
        </block_content>}</block></catch></try>
        <decl_stmt><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name> <init>= <expr><call><name><name>keyspace</name><operator>.</operator><name>getColumnFamilyStore</name></name><argument_list>(<argument><expr><name>LOCAL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>req</name> <init>= <expr><literal type="string">"SELECT cluster_name FROM system.%s WHERE key='%s'"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>UntypedResultSet</name></type> <name>result</name> <init>= <expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>LOCAL</name></expr></argument>, <argument><expr><name>LOCAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>result</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>result</name><operator>.</operator><name>one</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>has</name><argument_list>(<argument><expr><literal type="string">"cluster_name"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// this is a brand new node</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>cfs</name><operator>.</operator><name>getLiveSSTables</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Found system keyspace files, but they couldn't be loaded!"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <comment type="line">// no system files.  this is a new node.</comment>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>savedClusterName</name> <init>= <expr><call><name><name>result</name><operator>.</operator><name>one</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><literal type="string">"cluster_name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getClusterName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>savedClusterName</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Saved cluster name "</literal> <operator>+</operator> <name>savedClusterName</name> <operator>+</operator> <literal type="string">" != configured name "</literal> <operator>+</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getClusterName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>getSavedTokens</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>req</name> <init>= <expr><literal type="string">"SELECT tokens FROM system.%s WHERE key='%s'"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>UntypedResultSet</name></type> <name>result</name> <init>= <expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>LOCAL</name></expr></argument>, <argument><expr><name>LOCAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><call><name><name>result</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>result</name><operator>.</operator><name>one</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>has</name><argument_list>(<argument><expr><literal type="string">"tokens"</literal></expr></argument>)</argument_list></call></expr>
             ?</condition><then> <expr><name><name>Collections</name><operator>.</operator></name>&lt;<name>Token</name><operator>&gt;</operator><call><name>emptyList</name><argument_list>()</argument_list></call></expr>
             </then><else>: <expr><call><name>deserializeTokens</name><argument_list>(<argument><expr><call><name><name>result</name><operator>.</operator><name>one</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSet</name><argument_list>(<argument><expr><literal type="string">"tokens"</literal></expr></argument>, <argument><expr><name><name>UTF8Type</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>incrementAndGetGeneration</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>req</name> <init>= <expr><literal type="string">"SELECT gossip_generation FROM system.%s WHERE key='%s'"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>UntypedResultSet</name></type> <name>result</name> <init>= <expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>LOCAL</name></expr></argument>, <argument><expr><name>LOCAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>generation</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>result</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>result</name><operator>.</operator><name>one</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>has</name><argument_list>(<argument><expr><literal type="string">"gossip_generation"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// seconds-since-epoch isn't a foolproof new generation</comment>
            <comment type="line">// (where foolproof is "guaranteed to be larger than the last one seen at this ip address"),</comment>
            <comment type="line">// but it's as close as sanely possible</comment>
            <expr_stmt><expr><name>generation</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="line">// Other nodes will ignore gossip messages about a node that have a lower generation than previously seen.</comment>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>storedGeneration</name> <init>= <expr><call><name><name>result</name><operator>.</operator><name>one</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInt</name><argument_list>(<argument><expr><literal type="string">"gossip_generation"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>now</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>storedGeneration</name> <operator>&gt;=</operator> <name>now</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Using stored Gossip Generation {} as it is greater than current system time {}.  See CASSANDRA-3654 if you experience problems"</literal></expr></argument>,
                            <argument><expr><name>storedGeneration</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>generation</name> <operator>=</operator> <name>storedGeneration</name></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name>generation</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><name>req</name> <operator>=</operator> <literal type="string">"INSERT INTO system.%s (key, gossip_generation) VALUES ('%s', ?)"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>LOCAL</name></expr></argument>, <argument><expr><name>LOCAL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>generation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>forceBlockingFlush</name><argument_list>(<argument><expr><name>LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>generation</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>BootstrapState</name></type> <name>getBootstrapState</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>req</name> <init>= <expr><literal type="string">"SELECT bootstrapped FROM system.%s WHERE key='%s'"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>UntypedResultSet</name></type> <name>result</name> <init>= <expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>LOCAL</name></expr></argument>, <argument><expr><name>LOCAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>result</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>result</name><operator>.</operator><name>one</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>has</name><argument_list>(<argument><expr><literal type="string">"bootstrapped"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name><name>BootstrapState</name><operator>.</operator><name>NEEDS_BOOTSTRAP</name></name></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><call><name><name>BootstrapState</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>result</name><operator>.</operator><name>one</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><literal type="string">"bootstrapped"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>bootstrapComplete</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getBootstrapState</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>BootstrapState</name><operator>.</operator><name>COMPLETED</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>bootstrapInProgress</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getBootstrapState</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>BootstrapState</name><operator>.</operator><name>IN_PROGRESS</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>wasDecommissioned</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getBootstrapState</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>BootstrapState</name><operator>.</operator><name>DECOMMISSIONED</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setBootstrapState</name><parameter_list>(<parameter><decl><type><name>BootstrapState</name></type> <name>state</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>getBootstrapState</name><argument_list>()</argument_list></call> <operator>==</operator> <name>state</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>req</name> <init>= <expr><literal type="string">"INSERT INTO system.%s (key, bootstrapped) VALUES ('%s', ?)"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>LOCAL</name></expr></argument>, <argument><expr><name>LOCAL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>state</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>forceBlockingFlush</name><argument_list>(<argument><expr><name>LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isIndexBuilt</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>indexName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>req</name> <init>= <expr><literal type="string">"SELECT index_name FROM %s.\"%s\" WHERE table_name=? AND index_name=?"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>UntypedResultSet</name></type> <name>result</name> <init>= <expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SYSTEM_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name>BUILT_INDEXES</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>indexName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>!</operator><call><name><name>result</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setIndexBuilt</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>indexName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>req</name> <init>= <expr><literal type="string">"INSERT INTO %s.\"%s\" (table_name, index_name) VALUES (?, ?) IF NOT EXISTS;"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SYSTEM_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name>BUILT_INDEXES</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>indexName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>forceBlockingFlush</name><argument_list>(<argument><expr><name>BUILT_INDEXES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setIndexRemoved</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>indexName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>req</name> <init>= <expr><literal type="string">"DELETE FROM %s.\"%s\" WHERE table_name = ? AND index_name = ? IF EXISTS"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SYSTEM_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name>BUILT_INDEXES</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>indexName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>forceBlockingFlush</name><argument_list>(<argument><expr><name>BUILT_INDEXES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getBuiltIndexes</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>indexNames</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>names</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>indexNames</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>req</name> <init>= <expr><literal type="string">"SELECT index_name from %s.\"%s\" WHERE table_name=? AND index_name IN ?"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>UntypedResultSet</name></type> <name>results</name> <init>= <expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SYSTEM_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name>BUILT_INDEXES</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>names</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>StreamSupport</name><operator>.</operator><name>stream</name></name><argument_list>(<argument><expr><call><name><name>results</name><operator>.</operator><name>spliterator</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>r</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>r</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"index_name"</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Read the host ID from the system keyspace.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>UUID</name></type> <name>getLocalHostId</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>req</name> <init>= <expr><literal type="string">"SELECT host_id FROM system.%s WHERE key='%s'"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>UntypedResultSet</name></type> <name>result</name> <init>= <expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>LOCAL</name></expr></argument>, <argument><expr><name>LOCAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Look up the Host UUID (return it if found)</comment>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>result</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>result</name><operator>.</operator><name>one</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>has</name><argument_list>(<argument><expr><literal type="string">"host_id"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>result</name><operator>.</operator><name>one</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getUUID</name><argument_list>(<argument><expr><literal type="string">"host_id"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Read the host ID from the system keyspace, creating (and storing) one if
     * none exists.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <name>UUID</name></type> <name>getOrInitializeLocalHostId</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>UUID</name></type> <name>hostId</name> <init>= <expr><call><name>getLocalHostId</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>hostId</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>hostId</name></expr>;</return></block_content></block></if></if_stmt>

        <comment type="line">// ID not found, generate a new one, persist, and then return it.</comment>
        <expr_stmt><expr><name>hostId</name> <operator>=</operator> <call><name><name>UUID</name><operator>.</operator><name>randomUUID</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"No host ID found, created {} (Note: This should happen exactly once per node)."</literal></expr></argument>, <argument><expr><name>hostId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>setLocalHostId</name><argument_list>(<argument><expr><name>hostId</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the local host ID explicitly.  Should only be called outside of SystemTable when replacing a node.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <name>UUID</name></type> <name>setLocalHostId</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>hostId</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>req</name> <init>= <expr><literal type="string">"INSERT INTO system.%s (key, host_id) VALUES ('%s', ?)"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>LOCAL</name></expr></argument>, <argument><expr><name>LOCAL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>hostId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>hostId</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets the stored rack for the local node, or null if none have been set yet.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getRack</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>req</name> <init>= <expr><literal type="string">"SELECT rack FROM system.%s WHERE key='%s'"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>UntypedResultSet</name></type> <name>result</name> <init>= <expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>LOCAL</name></expr></argument>, <argument><expr><name>LOCAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Look up the Rack (return it if found)</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>result</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>result</name><operator>.</operator><name>one</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>has</name><argument_list>(<argument><expr><literal type="string">"rack"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>result</name><operator>.</operator><name>one</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><literal type="string">"rack"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets the stored data center for the local node, or null if none have been set yet.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getDatacenter</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>req</name> <init>= <expr><literal type="string">"SELECT data_center FROM system.%s WHERE key='%s'"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>UntypedResultSet</name></type> <name>result</name> <init>= <expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>LOCAL</name></expr></argument>, <argument><expr><name>LOCAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Look up the Data center (return it if found)</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>result</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>result</name><operator>.</operator><name>one</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>has</name><argument_list>(<argument><expr><literal type="string">"data_center"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>result</name><operator>.</operator><name>one</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><literal type="string">"data_center"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>PaxosState</name></type> <name>loadPaxosState</name><parameter_list>(<parameter><decl><type><name>DecoratedKey</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>TableMetadata</name></type> <name>metadata</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nowInSec</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>req</name> <init>= <expr><literal type="string">"SELECT * FROM system.%s WHERE row_key = ? AND cf_id = ?"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>UntypedResultSet</name></type> <name>results</name> <init>= <expr><call><name><name>QueryProcessor</name><operator>.</operator><name>executeInternalWithNow</name></name><argument_list>(<argument><expr><name>nowInSec</name></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>format</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>PAXOS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>key</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>metadata</name><operator>.</operator><name>id</name><operator>.</operator><name>asUUID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>results</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>new</operator> <call><name>PaxosState</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name><name>UntypedResultSet</name><operator>.</operator><name>Row</name></name></type> <name>row</name> <init>= <expr><call><name><name>results</name><operator>.</operator><name>one</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Commit</name></type> <name>promised</name> <init>= <expr><ternary><condition><expr><call><name><name>row</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><literal type="string">"in_progress_ballot"</literal></expr></argument>)</argument_list></call></expr>
                        ?</condition><then> <expr><operator>new</operator> <call><name>Commit</name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getUUID</name></name><argument_list>(<argument><expr><literal type="string">"in_progress_ballot"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>PartitionUpdate</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name><name>metadata</name><operator>.</operator><name>regularAndStaticColumns</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>
                        </then><else>: <expr><call><name><name>Commit</name><operator>.</operator><name>emptyCommit</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <comment type="line">// either we have both a recently accepted ballot and update or we have neither</comment>
        <decl_stmt><decl><type><name>Commit</name></type> <name>accepted</name> <init>= <expr><ternary><condition><expr><call><name><name>row</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><literal type="string">"proposal_version"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>row</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><literal type="string">"proposal"</literal></expr></argument>)</argument_list></call></expr>
                        ?</condition><then> <expr><operator>new</operator> <call><name>Commit</name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getUUID</name></name><argument_list>(<argument><expr><literal type="string">"proposal_ballot"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                     <argument><expr><call><name><name>PartitionUpdate</name><operator>.</operator><name>fromBytes</name></name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getBytes</name></name><argument_list>(<argument><expr><literal type="string">"proposal"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>row</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"proposal_version"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>
                        </then><else>: <expr><call><name><name>Commit</name><operator>.</operator><name>emptyCommit</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <comment type="line">// either most_recent_commit and most_recent_commit_at will both be set, or neither</comment>
        <decl_stmt><decl><type><name>Commit</name></type> <name>mostRecent</name> <init>= <expr><ternary><condition><expr><call><name><name>row</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><literal type="string">"most_recent_commit_version"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>row</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><literal type="string">"most_recent_commit"</literal></expr></argument>)</argument_list></call></expr>
                          ?</condition><then> <expr><operator>new</operator> <call><name>Commit</name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getUUID</name></name><argument_list>(<argument><expr><literal type="string">"most_recent_commit_at"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                       <argument><expr><call><name><name>PartitionUpdate</name><operator>.</operator><name>fromBytes</name></name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getBytes</name></name><argument_list>(<argument><expr><literal type="string">"most_recent_commit"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>row</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"most_recent_commit_version"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>
                          </then><else>: <expr><call><name><name>Commit</name><operator>.</operator><name>emptyCommit</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>new</operator> <call><name>PaxosState</name><argument_list>(<argument><expr><name>promised</name></expr></argument>, <argument><expr><name>accepted</name></expr></argument>, <argument><expr><name>mostRecent</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>savePaxosPromise</name><parameter_list>(<parameter><decl><type><name>Commit</name></type> <name>promise</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>req</name> <init>= <expr><literal type="string">"UPDATE system.%s USING TIMESTAMP ? AND TTL ? SET in_progress_ballot = ? WHERE row_key = ? AND cf_id = ?"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>PAXOS</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name><name>UUIDGen</name><operator>.</operator><name>microsTimestamp</name></name><argument_list>(<argument><expr><name><name>promise</name><operator>.</operator><name>ballot</name></name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name>paxosTtlSec</name><argument_list>(<argument><expr><call><name><name>promise</name><operator>.</operator><name>update</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name><name>promise</name><operator>.</operator><name>ballot</name></name></expr></argument>,
                        <argument><expr><call><name><name>promise</name><operator>.</operator><name>update</name><operator>.</operator><name>partitionKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getKey</name><argument_list>()</argument_list></call></expr></argument>,
                        <argument><expr><call><name><name>promise</name><operator>.</operator><name>update</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>id</name><operator>.</operator><name>asUUID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>savePaxosProposal</name><parameter_list>(<parameter><decl><type><name>Commit</name></type> <name>proposal</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"UPDATE system.%s USING TIMESTAMP ? AND TTL ? SET proposal_ballot = ?, proposal = ?, proposal_version = ? WHERE row_key = ? AND cf_id = ?"</literal></expr></argument>, <argument><expr><name>PAXOS</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name><name>UUIDGen</name><operator>.</operator><name>microsTimestamp</name></name><argument_list>(<argument><expr><name><name>proposal</name><operator>.</operator><name>ballot</name></name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name>paxosTtlSec</name><argument_list>(<argument><expr><call><name><name>proposal</name><operator>.</operator><name>update</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name><name>proposal</name><operator>.</operator><name>ballot</name></name></expr></argument>,
                        <argument><expr><call><name><name>PartitionUpdate</name><operator>.</operator><name>toBytes</name></name><argument_list>(<argument><expr><name><name>proposal</name><operator>.</operator><name>update</name></name></expr></argument>, <argument><expr><name><name>MessagingService</name><operator>.</operator><name>current_version</name></name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name><name>MessagingService</name><operator>.</operator><name>current_version</name></name></expr></argument>,
                        <argument><expr><call><name><name>proposal</name><operator>.</operator><name>update</name><operator>.</operator><name>partitionKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getKey</name><argument_list>()</argument_list></call></expr></argument>,
                        <argument><expr><call><name><name>proposal</name><operator>.</operator><name>update</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>id</name><operator>.</operator><name>asUUID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>paxosTtlSec</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>metadata</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// keep paxos state around for at least 3h</comment>
        <return>return <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">3600</literal></expr></argument>, <argument><expr><name><name>metadata</name><operator>.</operator><name>params</name><operator>.</operator><name>gcGraceSeconds</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>savePaxosCommit</name><parameter_list>(<parameter><decl><type><name>Commit</name></type> <name>commit</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// We always erase the last proposal (with the commit timestamp to no erase more recent proposal in case the commit is old)</comment>
        <comment type="line">// even though that's really just an optimization  since SP.beginAndRepairPaxos will exclude accepted proposal older than the mrc.</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>cql</name> <init>= <expr><literal type="string">"UPDATE system.%s USING TIMESTAMP ? AND TTL ? SET proposal_ballot = null, proposal = null, most_recent_commit_at = ?, most_recent_commit = ?, most_recent_commit_version = ? WHERE row_key = ? AND cf_id = ?"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><name>cql</name></expr></argument>, <argument><expr><name>PAXOS</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name><name>UUIDGen</name><operator>.</operator><name>microsTimestamp</name></name><argument_list>(<argument><expr><name><name>commit</name><operator>.</operator><name>ballot</name></name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name>paxosTtlSec</name><argument_list>(<argument><expr><call><name><name>commit</name><operator>.</operator><name>update</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name><name>commit</name><operator>.</operator><name>ballot</name></name></expr></argument>,
                        <argument><expr><call><name><name>PartitionUpdate</name><operator>.</operator><name>toBytes</name></name><argument_list>(<argument><expr><name><name>commit</name><operator>.</operator><name>update</name></name></expr></argument>, <argument><expr><name><name>MessagingService</name><operator>.</operator><name>current_version</name></name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name><name>MessagingService</name><operator>.</operator><name>current_version</name></name></expr></argument>,
                        <argument><expr><call><name><name>commit</name><operator>.</operator><name>update</name><operator>.</operator><name>partitionKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getKey</name><argument_list>()</argument_list></call></expr></argument>,
                        <argument><expr><call><name><name>commit</name><operator>.</operator><name>update</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>id</name><operator>.</operator><name>asUUID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a RestorableMeter tracking the average read rate of a particular SSTable, restoring the last-seen rate
     * from values in system.sstable_activity if present.
     * @param keyspace the keyspace the sstable belongs to
     * @param table the table the sstable belongs to
     * @param generation the generation number for the sstable
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>RestorableMeter</name></type> <name>getSSTableReadMeter</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>generation</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>cql</name> <init>= <expr><literal type="string">"SELECT * FROM system.%s WHERE keyspace_name=? and columnfamily_name=? and generation=?"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>UntypedResultSet</name></type> <name>results</name> <init>= <expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><name>cql</name></expr></argument>, <argument><expr><name>SSTABLE_ACTIVITY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>generation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>results</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>new</operator> <call><name>RestorableMeter</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>UntypedResultSet</name><operator>.</operator><name>Row</name></name></type> <name>row</name> <init>= <expr><call><name><name>results</name><operator>.</operator><name>one</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>m15rate</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getDouble</name></name><argument_list>(<argument><expr><literal type="string">"rate_15m"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>m120rate</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getDouble</name></name><argument_list>(<argument><expr><literal type="string">"rate_120m"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>new</operator> <call><name>RestorableMeter</name><argument_list>(<argument><expr><name>m15rate</name></expr></argument>, <argument><expr><name>m120rate</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Writes the current read rates for a given SSTable to system.sstable_activity
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>persistSSTableReadMeter</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>generation</name></decl></parameter>, <parameter><decl><type><name>RestorableMeter</name></type> <name>meter</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// Store values with a one-day TTL to handle corner cases where cleanup might not occur</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>cql</name> <init>= <expr><literal type="string">"INSERT INTO system.%s (keyspace_name, columnfamily_name, generation, rate_15m, rate_120m) VALUES (?, ?, ?, ?, ?) USING TTL 864000"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><name>cql</name></expr></argument>, <argument><expr><name>SSTABLE_ACTIVITY</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name>keyspace</name></expr></argument>,
                        <argument><expr><name>table</name></expr></argument>,
                        <argument><expr><name>generation</name></expr></argument>,
                        <argument><expr><call><name><name>meter</name><operator>.</operator><name>fifteenMinuteRate</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <argument><expr><call><name><name>meter</name><operator>.</operator><name>twoHourRate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Clears persisted read rates from system.sstable_activity for SSTables that have been deleted.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>clearSSTableReadMeter</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>generation</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>cql</name> <init>= <expr><literal type="string">"DELETE FROM system.%s WHERE keyspace_name=? AND columnfamily_name=? and generation=?"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><name>cql</name></expr></argument>, <argument><expr><name>SSTABLE_ACTIVITY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>generation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Writes the current partition count and size estimates into SIZE_ESTIMATES_CF
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>updateSizeEstimates</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>estimates</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>timestamp</name> <init>= <expr><call><name><name>FBUtilities</name><operator>.</operator><name>timestampMicros</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nowInSec</name> <init>= <expr><call><name><name>FBUtilities</name><operator>.</operator><name>nowInSeconds</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>PartitionUpdate</name><operator>.</operator><name>Builder</name></name></type> <name>update</name> <init>= <expr><operator>new</operator> <call><name><name>PartitionUpdate</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>LegacySizeEstimates</name></expr></argument>, <argument><expr><call><name><name>UTF8Type</name><operator>.</operator><name>instance</name><operator>.</operator><name>decompose</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>LegacySizeEstimates</name><operator>.</operator><name>regularAndStaticColumns</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>estimates</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// delete all previous values with a single range tombstone.</comment>
        <expr_stmt><expr><call><name><name>update</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>RangeTombstone</name><argument_list>(<argument><expr><call><name><name>Slice</name><operator>.</operator><name>make</name></name><argument_list>(<argument><expr><name><name>LegacySizeEstimates</name><operator>.</operator><name>comparator</name></name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>DeletionTime</name><argument_list>(<argument><expr><name>timestamp</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>nowInSec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// add a CQL row for each primary token range.</comment>
        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>estimates</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>values</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>update</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>Rows</name><operator>.</operator><name>simpleBuilder</name></name><argument_list>(<argument><expr><name>LegacySizeEstimates</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><call><name><name>range</name><operator>.</operator><name>left</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>range</name><operator>.</operator><name>right</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>timestamp</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"partitions_count"</literal></expr></argument>, <argument><expr><name><name>values</name><operator>.</operator><name>left</name></name></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"mean_partition_size"</literal></expr></argument>, <argument><expr><name><name>values</name><operator>.</operator><name>right</name></name></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><operator>new</operator> <call><name>Mutation</name><argument_list>(<argument><expr><call><name><name>update</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>apply</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Writes the current partition count and size estimates into table_estimates
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>updateTableEstimates</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>estimates</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>timestamp</name> <init>= <expr><call><name><name>FBUtilities</name><operator>.</operator><name>timestampMicros</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nowInSec</name> <init>= <expr><call><name><name>FBUtilities</name><operator>.</operator><name>nowInSeconds</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>PartitionUpdate</name><operator>.</operator><name>Builder</name></name></type> <name>update</name> <init>= <expr><operator>new</operator> <call><name><name>PartitionUpdate</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>TableEstimates</name></expr></argument>, <argument><expr><call><name><name>UTF8Type</name><operator>.</operator><name>instance</name><operator>.</operator><name>decompose</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>TableEstimates</name><operator>.</operator><name>regularAndStaticColumns</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>estimates</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// delete all previous values with a single range tombstone.</comment>
        <expr_stmt><expr><call><name><name>update</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>RangeTombstone</name><argument_list>(<argument><expr><call><name><name>Slice</name><operator>.</operator><name>make</name></name><argument_list>(<argument><expr><name><name>TableEstimates</name><operator>.</operator><name>comparator</name></name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>DeletionTime</name><argument_list>(<argument><expr><name>timestamp</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>nowInSec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// add a CQL row for each primary token range.</comment>
        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>estimates</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>values</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>update</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>Rows</name><operator>.</operator><name>simpleBuilder</name></name><argument_list>(<argument><expr><name>TableEstimates</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><call><name><name>range</name><operator>.</operator><name>left</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>range</name><operator>.</operator><name>right</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>timestamp</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"partitions_count"</literal></expr></argument>, <argument><expr><name><name>values</name><operator>.</operator><name>left</name></name></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"mean_partition_size"</literal></expr></argument>, <argument><expr><name><name>values</name><operator>.</operator><name>right</name></name></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><operator>new</operator> <call><name>Mutation</name><argument_list>(<argument><expr><call><name><name>update</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>apply</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>


    <comment type="block" format="javadoc">/**
     * Clears size estimates for a table (on table drop)
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>clearEstimates</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>table</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>cqlFormat</name> <init>= <expr><literal type="string">"DELETE FROM %s WHERE keyspace_name = ? AND table_name = ?"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>cql</name> <init>= <expr><call><name>format</name><argument_list>(<argument><expr><name>cqlFormat</name></expr></argument>, <argument><expr><call><name><name>LegacySizeEstimates</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>executeInternal</name><argument_list>(<argument><expr><name>cql</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cql</name> <operator>=</operator> <call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>cqlFormat</name></expr></argument>, <argument><expr><call><name><name>TableEstimates</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>executeInternal</name><argument_list>(<argument><expr><name>cql</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * truncates size_estimates and table_estimates tables
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>clearAllEstimates</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>table</name> <range>: <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>LEGACY_SIZE_ESTIMATES</name></expr></argument>, <argument><expr><name>TABLE_ESTIMATES</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name> <init>= <expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SYSTEM_KEYSPACE_NAME</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getColumnFamilyStore</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>cfs</name><operator>.</operator><name>truncateBlockingWithoutSnapshot</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>updateAvailableRanges</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>completedFullRanges</name></decl></parameter>, <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>completedTransientRanges</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>cql</name> <init>= <expr><literal type="string">"UPDATE system.%s SET full_ranges = full_ranges + ?, transient_ranges = transient_ranges + ? WHERE keyspace_name = ?"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><name>cql</name></expr></argument>, <argument><expr><name>AVAILABLE_RANGES_V2</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name><name>completedFullRanges</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>SystemKeyspace</name><operator>::</operator><name>rangeToBytes</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toSet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name><name>completedTransientRanges</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>SystemKeyspace</name><operator>::</operator><name>rangeToBytes</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toSet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * List of the streamed ranges, where transientness is encoded based on the source, where range was streamed from.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <name>AvailableRanges</name></type> <name>getAvailableRanges</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>IPartitioner</name></type> <name>partitioner</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>query</name> <init>= <expr><literal type="string">"SELECT * FROM system.%s WHERE keyspace_name=?"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>UntypedResultSet</name></type> <name>rs</name> <init>= <expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>AVAILABLE_RANGES_V2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>ImmutableSet</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>full</name> <init>= <expr><operator>new</operator> <call><name><name>ImmutableSet</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;&gt;</argument_list></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ImmutableSet</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>trans</name> <init>= <expr><operator>new</operator> <call><name><name>ImmutableSet</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;&gt;</argument_list></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>UntypedResultSet</name><operator>.</operator><name>Row</name></name></type> <name>row</name> <range>: <expr><name>rs</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>Optional</name><operator>.</operator><name>ofNullable</name></name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getSet</name></name><argument_list>(<argument><expr><literal type="string">"full_ranges"</literal></expr></argument>, <argument><expr><name><name>BytesType</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>ifPresent</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>full_ranges</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>full_ranges</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call>
                            <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>buf</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>byteBufferToRange</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>partitioner</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><name>full</name><operator>::</operator><name>add</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Optional</name><operator>.</operator><name>ofNullable</name></name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getSet</name></name><argument_list>(<argument><expr><literal type="string">"transient_ranges"</literal></expr></argument>, <argument><expr><name><name>BytesType</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>ifPresent</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>transient_ranges</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>transient_ranges</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call>
                            <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>buf</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>byteBufferToRange</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>partitioner</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><name>trans</name><operator>::</operator><name>add</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><operator>new</operator> <call><name>AvailableRanges</name><argument_list>(<argument><expr><call><name><name>full</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>trans</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>AvailableRanges</name>
    <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>full</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>trans</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>AvailableRanges</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>full</name></decl></parameter>, <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>trans</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>full</name></name> <operator>=</operator> <name>full</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>trans</name></name> <operator>=</operator> <name>trans</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>
    }</block></class>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>resetAvailableRanges</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ColumnFamilyStore</name></type> <name>availableRanges</name> <init>= <expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SYSTEM_KEYSPACE_NAME</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getColumnFamilyStore</name><argument_list>(<argument><expr><name>AVAILABLE_RANGES_V2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>availableRanges</name><operator>.</operator><name>truncateBlockingWithoutSnapshot</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>updateTransferredRanges</name><parameter_list>(<parameter><decl><type><name>StreamOperation</name></type> <name>streamOperation</name></decl></parameter>,
                                                         <parameter><decl><type><name>InetAddressAndPort</name></type> <name>peer</name></decl></parameter>,
                                                         <parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>,
                                                         <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>streamedRanges</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>cql</name> <init>= <expr><literal type="string">"UPDATE system.%s SET ranges = ranges + ? WHERE operation = ? AND peer = ? AND keyspace_name = ?"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>rangesToUpdate</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>streamedRanges</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name> <range>: <expr><name>streamedRanges</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>rangesToUpdate</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>rangeToBytes</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><name>cql</name></expr></argument>, <argument><expr><name>LEGACY_TRANSFERRED_RANGES</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rangesToUpdate</name></expr></argument>, <argument><expr><call><name><name>streamOperation</name><operator>.</operator><name>getDescription</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>peer</name><operator>.</operator><name>address</name></name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cql</name> <operator>=</operator> <literal type="string">"UPDATE system.%s SET ranges = ranges + ? WHERE operation = ? AND peer = ? AND peer_port = ? AND keyspace_name = ?"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>cql</name></expr></argument>, <argument><expr><name>TRANSFERRED_RANGES_V2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rangesToUpdate</name></expr></argument>, <argument><expr><call><name><name>streamOperation</name><operator>.</operator><name>getDescription</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>peer</name><operator>.</operator><name>address</name></name></expr></argument>, <argument><expr><name><name>peer</name><operator>.</operator><name>port</name></name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getTransferredRanges</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>description</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>IPartitioner</name></type> <name>partitioner</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>query</name> <init>= <expr><literal type="string">"SELECT * FROM system.%s WHERE operation = ? AND keyspace_name = ?"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>UntypedResultSet</name></type> <name>rs</name> <init>= <expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>TRANSFERRED_RANGES_V2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>description</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>UntypedResultSet</name><operator>.</operator><name>Row</name></name></type> <name>row</name> <range>: <expr><name>rs</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>InetAddress</name></type> <name>peerAddress</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getInetAddress</name></name><argument_list>(<argument><expr><literal type="string">"peer"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>port</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"peer_port"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>InetAddressAndPort</name></type> <name>peer</name> <init>= <expr><call><name><name>InetAddressAndPort</name><operator>.</operator><name>getByAddressOverrideDefaults</name></name><argument_list>(<argument><expr><name>peerAddress</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>rawRanges</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getSet</name></name><argument_list>(<argument><expr><literal type="string">"ranges"</literal></expr></argument>, <argument><expr><name><name>BytesType</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ranges</name> <init>= <expr><call><name><name>Sets</name><operator>.</operator><name>newHashSetWithExpectedSize</name></name><argument_list>(<argument><expr><call><name><name>rawRanges</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>ByteBuffer</name></type> <name>rawRange</name> <range>: <expr><name>rawRanges</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>ranges</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>byteBufferToRange</name><argument_list>(<argument><expr><name>rawRange</name></expr></argument>, <argument><expr><name>partitioner</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>peer</name></expr></argument>, <argument><expr><name>ranges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><call><name><name>ImmutableMap</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Compare the release version in the system.local table with the one included in the distro.
     * If they don't match, snapshot all tables in the system and schema keyspaces. This is intended
     * to be called at startup to create a backup of the system tables during an upgrade
     *
     * @throws IOException
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>snapshotOnVersionChange</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>previous</name> <init>= <expr><call><name>getPreviousVersionString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>next</name> <init>= <expr><call><name><name>FBUtilities</name><operator>.</operator><name>getReleaseVersionString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>FBUtilities</name><operator>.</operator><name>setPreviousReleaseVersionString</name></name><argument_list>(<argument><expr><name>previous</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// if we're restarting after an upgrade, snapshot the system and schema keyspaces</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>previous</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>NULL_VERSION</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>previous</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>)</condition>

        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Detected version upgrade from {} to {}, snapshotting system keyspaces"</literal></expr></argument>, <argument><expr><name>previous</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>snapshotName</name> <init>= <expr><call><name><name>Keyspace</name><operator>.</operator><name>getTimestampedSnapshotName</name></name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"upgrade-%s-%s"</literal></expr></argument>,
                                                                             <argument><expr><name>previous</name></expr></argument>,
                                                                             <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>keyspace</name> <range>: <expr><name><name>SchemaConstants</name><operator>.</operator><name>LOCAL_SYSTEM_KEYSPACE_NAMES</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>snapshot</name><argument_list>(<argument><expr><name>snapshotName</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Try to determine what the previous version, if any, was installed on this node.
     * Primary source of truth is the release version in system.local. If the previous
     * version cannot be determined by looking there then either:
     * * the node never had a C* install before
     * * the was a very old version (pre 1.2) installed, which did not include system.local
     *
     * @return either a version read from the system.local table or one of two special values
     * indicating either no previous version (SystemUpgrade.NULL_VERSION) or an unreadable,
     * legacy version (SystemUpgrade.UNREADABLE_VERSION).
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>getPreviousVersionString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>req</name> <init>= <expr><literal type="string">"SELECT release_version FROM system.%s WHERE key='%s'"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>UntypedResultSet</name></type> <name>result</name> <init>= <expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name><name>SystemKeyspace</name><operator>.</operator><name>LOCAL</name></name></expr></argument>, <argument><expr><name><name>SystemKeyspace</name><operator>.</operator><name>LOCAL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>result</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>result</name><operator>.</operator><name>one</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>has</name><argument_list>(<argument><expr><literal type="string">"release_version"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// it isn't inconceivable that one might try to upgrade a node straight from &lt;= 1.1 to whatever</comment>
            <comment type="line">// the current version is. If we couldn't read a previous version from system.local we check for</comment>
            <comment type="line">// the existence of the legacy system.Versions table. We don't actually attempt to read a version</comment>
            <comment type="line">// from there, but it informs us that this isn't a completely new node.</comment>
            <for>for <control>(<init><decl><type><name>File</name></type> <name>dataDirectory</name> <range>: <expr><call><name><name>Directories</name><operator>.</operator><name>getKSChildDirectories</name></name><argument_list>(<argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SYSTEM_KEYSPACE_NAME</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>dataDirectory</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"Versions"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>dataDirectory</name><operator>.</operator><name>listFiles</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Found unreadable versions info in pre 1.2 system.Versions table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><call><name><name>UNREADABLE_VERSION</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>

            <comment type="line">// no previous version information found, we can assume that this is a new node</comment>
            <return>return <expr><call><name><name>NULL_VERSION</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// report back whatever we found in the system table</comment>
        <return>return <expr><call><name><name>result</name><operator>.</operator><name>one</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><literal type="string">"release_version"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>rawRangesToRangeSet</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>rawRanges</name></decl></parameter>, <parameter><decl><type><name>IPartitioner</name></type> <name>partitioner</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>rawRanges</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>buf</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>byteBufferToRange</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>partitioner</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toSet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name>ByteBuffer</name></type> <name>rangeToBytes</name><parameter_list>(<parameter><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <try>try <init>(<decl><type><name>DataOutputBuffer</name></type> <name>out</name> <init>= <expr><operator>new</operator> <call><name>DataOutputBuffer</name><argument_list>()</argument_list></call></expr></init></decl>)</init>
        <block>{<block_content>
            <comment type="line">// The format with which token ranges are serialized in the system tables is the pre-3.0 serialization</comment>
            <comment type="line">// formot for ranges, so we should maintain that for now. And while we don't really support pre-3.0</comment>
            <comment type="line">// messaging versions, we know AbstractBounds.Serializer still support it _exactly_ for this use case, so we</comment>
            <comment type="line">// pass 0 as the version to trigger that legacy code.</comment>
            <comment type="line">// In the future, it might be worth switching to a stable text format for the ranges to 1) save that and 2)</comment>
            <comment type="line">// be more user friendly (the serialization format we currently use is pretty custom).</comment>
            <expr_stmt><expr><call><name><name>Range</name><operator>.</operator><name>tokenSerializer</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>out</name><operator>.</operator><name>buffer</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IOError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>private</specifier> <specifier>static</specifier> <name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>byteBufferToRange</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>rawRange</name></decl></parameter>, <parameter><decl><type><name>IPartitioner</name></type> <name>partitioner</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <comment type="line">// See rangeToBytes above for why version is 0.</comment>
            <return>return <expr><operator>(</operator><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name><name>Range</name><operator>.</operator><name>tokenSerializer</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><call><name><name>ByteStreams</name><operator>.</operator><name>newDataInput</name></name><argument_list>(<argument><expr><call><name><name>ByteBufferUtil</name><operator>.</operator><name>getArray</name></name><argument_list>(<argument><expr><name>rawRange</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                                                    <argument><expr><name>partitioner</name></expr></argument>,
                                                                    <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IOError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>writePreparedStatement</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>loggedKeyspace</name></decl></parameter>, <parameter><decl><type><name>MD5Digest</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>cql</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO %s (logged_keyspace, prepared_id, query_string) VALUES (?, ?, ?)"</literal></expr></argument>,
                               <argument><expr><call><name><name>PreparedStatements</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name>loggedKeyspace</name></expr></argument>, <argument><expr><call><name><name>key</name><operator>.</operator><name>byteBuffer</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"stored prepared statement for logged keyspace '{}': '{}'"</literal></expr></argument>, <argument><expr><name>loggedKeyspace</name></expr></argument>, <argument><expr><name>cql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>removePreparedStatement</name><parameter_list>(<parameter><decl><type><name>MD5Digest</name></type> <name>key</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>executeInternal</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"DELETE FROM %s WHERE prepared_id = ?"</literal></expr></argument>, <argument><expr><call><name><name>PreparedStatements</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name><name>key</name><operator>.</operator><name>byteBuffer</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>resetPreparedStatements</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ColumnFamilyStore</name></type> <name>preparedStatements</name> <init>= <expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SYSTEM_KEYSPACE_NAME</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getColumnFamilyStore</name><argument_list>(<argument><expr><name>PREPARED_STATEMENTS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>preparedStatements</name><operator>.</operator><name>truncateBlockingWithoutSnapshot</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>loadPreparedStatements</name><parameter_list>(<parameter><decl><type><name><name>TriFunction</name><argument_list type="generic">&lt;<argument><name>MD5Digest</name></argument>, <argument><name>String</name></argument>, <argument><name>String</name></argument>, <argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>onLoaded</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>query</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"SELECT prepared_id, logged_keyspace, query_string FROM %s.%s"</literal></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SYSTEM_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name>PREPARED_STATEMENTS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>UntypedResultSet</name></type> <name>resultSet</name> <init>= <expr><call><name>executeOnceInternal</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>UntypedResultSet</name><operator>.</operator><name>Row</name></name></type> <name>row</name> <range>: <expr><name>resultSet</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>onLoaded</name><operator>.</operator><name>accept</name></name><argument_list>(<argument><expr><call><name><name>MD5Digest</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getByteArray</name></name><argument_list>(<argument><expr><literal type="string">"prepared_id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"query_string"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><ternary><condition><expr><call><name><name>row</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><literal type="string">"logged_keyspace"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"logged_keyspace"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>counter</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>counter</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>loadPreparedStatement</name><parameter_list>(<parameter><decl><type><name>MD5Digest</name></type> <name>digest</name></decl></parameter>, <parameter><decl><type><name><name>TriFunction</name><argument_list type="generic">&lt;<argument><name>MD5Digest</name></argument>, <argument><name>String</name></argument>, <argument><name>String</name></argument>, <argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>onLoaded</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>query</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"SELECT prepared_id, logged_keyspace, query_string FROM %s.%s WHERE prepared_id = ?"</literal></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SYSTEM_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name>PREPARED_STATEMENTS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>UntypedResultSet</name></type> <name>resultSet</name> <init>= <expr><call><name>executeOnceInternal</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><call><name><name>digest</name><operator>.</operator><name>byteBuffer</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>UntypedResultSet</name><operator>.</operator><name>Row</name></name></type> <name>row</name> <range>: <expr><name>resultSet</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>onLoaded</name><operator>.</operator><name>accept</name></name><argument_list>(<argument><expr><call><name><name>MD5Digest</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getByteArray</name></name><argument_list>(<argument><expr><literal type="string">"prepared_id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"query_string"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><ternary><condition><expr><call><name><name>row</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><literal type="string">"logged_keyspace"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"logged_keyspace"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>counter</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>counter</name></expr>;</return>
    </block_content>}</block></function>

    <interface><specifier>public</specifier> <specifier>static</specifier> interface <name><name>TriFunction</name><parameter_list>&lt;<parameter><name>A</name></parameter>, <parameter><name>B</name></parameter>, <parameter><name>C</name></parameter>, <parameter><name>D</name></parameter>&gt;</parameter_list></name> <block>{
        <function_decl><type><name>D</name></type> <name>accept</name><parameter_list>(<parameter><decl><type><name>A</name></type> <name>var1</name></decl></parameter>, <parameter><decl><type><name>B</name></type> <name>var2</name></decl></parameter>, <parameter><decl><type><name>C</name></type> <name>var3</name></decl></parameter>)</parameter_list>;</function_decl>
    }</block></interface>
}</block></class>
</unit>
