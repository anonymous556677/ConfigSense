<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/cql3/WhereClause.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Objects</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableList</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>antlr</name><operator>.</operator><name>runtime</name><operator>.</operator><name>RecognitionException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>restrictions</name><operator>.</operator><name>CustomIndexExpression</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>InvalidRequestException</name></name>;</import>

<import>import static <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name><operator>.</operator><name>join</name></name>;</import>

<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name><operator>.</operator><name>concat</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name><operator>.</operator><name>transform</name></name>;</import>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>WhereClause</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>WhereClause</name></type> <name>EMPTY</name> <init>= <expr><operator>new</operator> <call><name>WhereClause</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Builder</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Relation</name></argument>&gt;</argument_list></name></type> <name>relations</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>CustomIndexExpression</name></argument>&gt;</argument_list></name></type> <name>expressions</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>WhereClause</name><parameter_list>(<parameter><decl><type><name>Builder</name></type> <name>builder</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>relations</name> <operator>=</operator> <call><name><name>builder</name><operator>.</operator><name>relations</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>expressions</name> <operator>=</operator> <call><name><name>builder</name><operator>.</operator><name>expressions</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>WhereClause</name></type> <name>empty</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>EMPTY</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>containsCustomExpressions</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>!</operator><call><name><name>expressions</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Renames identifiers in all relations
     * @param from the old identifier
     * @param to the new identifier
     * @return a new WhereClause with with "from" replaced by "to" in all relations
     */</comment>
    <function><type><specifier>public</specifier> <name>WhereClause</name></type> <name>renameIdentifier</name><parameter_list>(<parameter><decl><type><name>ColumnIdentifier</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>ColumnIdentifier</name></type> <name>to</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>WhereClause</name><operator>.</operator><name>Builder</name></name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name><name>WhereClause</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>relations</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call>
                 <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>r</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>r</name><operator>.</operator><name>renameIdentifier</name></name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
                 <operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><name>builder</name><operator>::</operator><name>add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>expressions</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><name>builder</name><operator>::</operator><name>add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><call><name><name>builder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>WhereClause</name></type> <name>parse</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>cql</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>RecognitionException</name></expr></argument></throws>
    <block>{<block_content>
        <return>return <expr><call><name><name>CQLFragmentParser</name><operator>.</operator><name>parseAnyUnhandled</name></name><argument_list>(<argument><expr><name>CqlParser</name><operator>::</operator><name>whereClause</name></expr></argument>, <argument><expr><name>cql</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>toCQLString</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a CQL representation of this WHERE clause.
     *
     * @return a CQL representation of this WHERE clause
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toCQLString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>join</name><argument_list>(<argument><expr><literal type="string">" AND "</literal></expr></argument>,
                    <argument><expr><call><name>concat</name><argument_list>(<argument><expr><call><name>transform</name><argument_list>(<argument><expr><name>relations</name></expr></argument>, <argument><expr><name>Relation</name><operator>::</operator><name>toCQLString</name></expr></argument>)</argument_list></call></expr></argument>,
                           <argument><expr><call><name>transform</name><argument_list>(<argument><expr><name>expressions</name></expr></argument>, <argument><expr><name>CustomIndexExpression</name><operator>::</operator><name>toCQLString</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>o</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>o</name> <operator>instanceof</operator> <name>WhereClause</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>WhereClause</name></type> <name>wc</name> <init>= <expr><operator>(</operator><name>WhereClause</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>relations</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>wc</name><operator>.</operator><name>relations</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>expressions</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>wc</name><operator>.</operator><name>expressions</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Objects</name><operator>.</operator><name>hash</name></name><argument_list>(<argument><expr><name>relations</name></expr></argument>, <argument><expr><name>expressions</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Checks if the where clause contains some token relations.
     *
     * @return {@code true} if it is the case, {@code false} otherwise.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>containsTokenRelations</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>Relation</name></type> <name>rel</name> <range>: <expr><name>relations</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>rel</name><operator>.</operator><name>onToken</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>Builder</name>
    <block>{
        <decl_stmt><decl><type><name><name>ImmutableList</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>Relation</name></argument>&gt;</argument_list></name></name></type> <name>relations</name> <init>= <expr><operator>new</operator> <call><name><name>ImmutableList</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;&gt;</argument_list></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ImmutableList</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>CustomIndexExpression</name></argument>&gt;</argument_list></name></name></type> <name>expressions</name> <init>= <expr><operator>new</operator> <call><name><name>ImmutableList</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;&gt;</argument_list></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>relation</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>relations</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>CustomIndexExpression</name></type> <name>expression</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>expressions</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>expression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>WhereClause</name></type> <name>build</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>WhereClause</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
