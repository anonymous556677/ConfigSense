<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/utils/FBUtilities.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Field</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>math</name><operator>.</operator><name>BigInteger</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>MessageDigest</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>NoSuchAlgorithmException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>zip</name><operator>.</operator><name>CRC32</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>zip</name><operator>.</operator><name>Checksum</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nonnull</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Joiner</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Strings</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Uninterruptibles</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang3</name><operator>.</operator><name>StringUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>core</name><operator>.</operator><name>JsonFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>ObjectMapper</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>auth</name><operator>.</operator><name>AllowAllNetworkAuthorizer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>audit</name><operator>.</operator><name>IAuditLogger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>auth</name><operator>.</operator><name>IAuthenticator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>auth</name><operator>.</operator><name>IAuthorizer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>auth</name><operator>.</operator><name>INetworkAuthorizer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>auth</name><operator>.</operator><name>IRoleManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>DecoratedKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>SerializationHeader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>AbstractType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>IPartitioner</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>LocalPartitioner</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>Range</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>Token</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>ConfigurationException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>IVersionedSerializer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>Descriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>metadata</name><operator>.</operator><name>MetadataComponent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>metadata</name><operator>.</operator><name>MetadataType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>metadata</name><operator>.</operator><name>ValidationMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>DataOutputBuffer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>DataOutputBufferFixed</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>FileUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>InetAddressAndPort</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>CassandraRelevantProperties</name><operator>.</operator><name>LINE_SEPARATOR</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>CassandraRelevantProperties</name><operator>.</operator><name>USER_HOME</name></name>;</import>


<class><specifier>public</specifier> class <name>FBUtilities</name>
<block>{
    <static>static
    <block>{<block_content>
        <expr_stmt><expr><call><name>preventIllegalAccessWarnings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></static>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>FBUtilities</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ObjectMapper</name></type> <name>jsonMapper</name> <init>= <expr><operator>new</operator> <call><name>ObjectMapper</name><argument_list>(<argument><expr><operator>new</operator> <call><name>JsonFactory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>UNKNOWN_RELEASE_VERSION</name> <init>= <expr><literal type="string">"Unknown"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>BigInteger</name></type> <name>TWO</name> <init>= <expr><operator>new</operator> <call><name>BigInteger</name><argument_list>(<argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_TRIGGER_DIR</name> <init>= <expr><literal type="string">"triggers"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>OPERATING_SYSTEM</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"os.name"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>isWindows</name> <init>= <expr><call><name><name>OPERATING_SYSTEM</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"windows"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>isLinux</name> <init>= <expr><call><name><name>OPERATING_SYSTEM</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"linux"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>volatile</specifier> <name>InetAddress</name></type> <name>localInetAddress</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>volatile</specifier> <name>InetAddress</name></type> <name>broadcastInetAddress</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>volatile</specifier> <name>InetAddress</name></type> <name>broadcastNativeAddress</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>volatile</specifier> <name>InetAddressAndPort</name></type> <name>broadcastNativeAddressAndPort</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>volatile</specifier> <name>InetAddressAndPort</name></type> <name>broadcastInetAddressAndPort</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>volatile</specifier> <name>InetAddressAndPort</name></type> <name>localInetAddressAndPort</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>volatile</specifier> <name>String</name></type> <name>previousReleaseVersionString</name></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getAvailableProcessors</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>availableProcessors</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.available_processors"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Strings</name><operator>.</operator><name>isNullOrEmpty</name></name><argument_list>(<argument><expr><name>availableProcessors</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>availableProcessors</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <return>return <expr><call><name><name>Runtime</name><operator>.</operator><name>getRuntime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>availableProcessors</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></function>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MAX_UNSIGNED_SHORT</name> <init>= <expr><literal type="number">0xFFFF</literal></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>MessageDigest</name></type> <name>newMessageDigest</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>algorithm</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <return>return <expr><call><name><name>MessageDigest</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>algorithm</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> <name>nsae</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"the requested digest algorithm ("</literal> <operator>+</operator> <name>algorithm</name> <operator>+</operator> <literal type="string">") is not available"</literal></expr></argument>, <argument><expr><name>nsae</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Please use getJustBroadcastAddress instead. You need this only when you have to listen/connect. It's also missing
     * the port you should be using. 99% of code doesn't want this.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>InetAddress</name></type> <name>getJustLocalAddress</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>localInetAddress</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getListenAddress</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <try>try
                <block>{<block_content>
                    <expr_stmt><expr><name>localInetAddress</name> <operator>=</operator> <call><name><name>InetAddress</name><operator>.</operator><name>getLocalHost</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"InetAddress.getLocalHost() was used to resolve listen_address to {}, double check this is "</literal>
                                <operator>+</operator> <literal type="string">"correct. Please check your node's config and set the listen_address in cassandra.yaml accordingly if applicable."</literal></expr></argument>,
                                <argument><expr><name>localInetAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <catch>catch<parameter_list>(<parameter><decl><type><name>UnknownHostException</name></type> <name>e</name></decl></parameter>)</parameter_list>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"InetAddress.getLocalHost() could not resolve the address for the hostname ({}), please "</literal>
                                <operator>+</operator> <literal type="string">"check your node's config and set the listen_address in cassandra.yaml. Falling back to {}"</literal></expr></argument>,
                                <argument><expr><name>e</name></expr></argument>,
                                <argument><expr><call><name><name>InetAddress</name><operator>.</operator><name>getLoopbackAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="line">// CASSANDRA-15901 fallback for misconfigured nodes</comment>
                    <expr_stmt><expr><name>localInetAddress</name> <operator>=</operator> <call><name><name>InetAddress</name><operator>.</operator><name>getLoopbackAddress</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></catch></try>
            </block_content>}</block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>localInetAddress</name> <operator>=</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getListenAddress</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>localInetAddress</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * The address and port to listen on for intra-cluster storage traffic (not client). Use this to get the correct
     * stuff to listen on for intra-cluster communication.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>InetAddressAndPort</name></type> <name>getLocalAddressAndPort</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>localInetAddressAndPort</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getRawConfig</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>localInetAddressAndPort</name> <operator>=</operator> <call><name><name>InetAddressAndPort</name><operator>.</operator><name>getByAddress</name></name><argument_list>(<argument><expr><call><name>getJustLocalAddress</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name>localInetAddressAndPort</name> <operator>=</operator> <call><name><name>InetAddressAndPort</name><operator>.</operator><name>getByAddressOverrideDefaults</name></name><argument_list>(<argument><expr><call><name>getJustLocalAddress</name><argument_list>()</argument_list></call></expr></argument>,
                                                                                          <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getStoragePort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>localInetAddressAndPort</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Retrieve just the broadcast address but not the port. This is almost always the wrong thing to be using because
     * it's ambiguous since you need the address and port to identify a node. You want getBroadcastAddressAndPort
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>InetAddress</name></type> <name>getJustBroadcastAddress</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>broadcastInetAddress</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>broadcastInetAddress</name> <operator>=</operator> <ternary><condition><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getBroadcastAddress</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>
                                 ?</condition><then> <expr><call><name>getJustLocalAddress</name><argument_list>()</argument_list></call></expr>
                                 </then><else>: <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getBroadcastAddress</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><name>broadcastInetAddress</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the broadcast address and port for intra-cluster storage traffic. This the address to advertise that uniquely
     * identifies the node and is reachable from everywhere. This is the one you want unless you are trying to connect
     * to the local address specifically.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>InetAddressAndPort</name></type> <name>getBroadcastAddressAndPort</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>broadcastInetAddressAndPort</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getRawConfig</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>broadcastInetAddressAndPort</name> <operator>=</operator> <call><name><name>InetAddressAndPort</name><operator>.</operator><name>getByAddress</name></name><argument_list>(<argument><expr><call><name>getJustBroadcastAddress</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name>broadcastInetAddressAndPort</name> <operator>=</operator> <call><name><name>InetAddressAndPort</name><operator>.</operator><name>getByAddressOverrideDefaults</name></name><argument_list>(<argument><expr><call><name>getJustBroadcastAddress</name><argument_list>()</argument_list></call></expr></argument>,
                                                                                              <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getStoragePort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>broadcastInetAddressAndPort</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * &lt;b&gt;THIS IS FOR TESTING ONLY!!&lt;/b&gt;
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setBroadcastInetAddress</name><parameter_list>(<parameter><decl><type><name>InetAddress</name></type> <name>addr</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>broadcastInetAddress</name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>broadcastInetAddressAndPort</name> <operator>=</operator> <call><name><name>InetAddressAndPort</name><operator>.</operator><name>getByAddress</name></name><argument_list>(<argument><expr><name>broadcastInetAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * &lt;b&gt;THIS IS FOR TESTING ONLY!!&lt;/b&gt;
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setBroadcastInetAddressAndPort</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>addr</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>broadcastInetAddress</name> <operator>=</operator> <name><name>addr</name><operator>.</operator><name>address</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>broadcastInetAddressAndPort</name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * This returns the address that is bound to for the native protocol for communicating with clients. This is ambiguous
     * because it doesn't include the port and it's almost always the wrong thing to be using you want getBroadcastNativeAddressAndPort
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>InetAddress</name></type> <name>getJustBroadcastNativeAddress</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>broadcastNativeAddress</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>broadcastNativeAddress</name> <operator>=</operator> <ternary><condition><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getBroadcastRpcAddress</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>
                                   ?</condition><then> <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getRpcAddress</name></name><argument_list>()</argument_list></call></expr>
                                   </then><else>: <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getBroadcastRpcAddress</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><name>broadcastNativeAddress</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * This returns the address that is bound to for the native protocol for communicating with clients. This is almost
     * always what you need to identify a node and how to connect to it as a client.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>InetAddressAndPort</name></type> <name>getBroadcastNativeAddressAndPort</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>broadcastNativeAddressAndPort</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <if_stmt><if>if<condition>(<expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getRawConfig</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>broadcastNativeAddressAndPort</name> <operator>=</operator> <call><name><name>InetAddressAndPort</name><operator>.</operator><name>getByAddress</name></name><argument_list>(<argument><expr><call><name>getJustBroadcastNativeAddress</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name>broadcastNativeAddressAndPort</name> <operator>=</operator> <call><name><name>InetAddressAndPort</name><operator>.</operator><name>getByAddressOverrideDefaults</name></name><argument_list>(<argument><expr><call><name>getJustBroadcastNativeAddress</name><argument_list>()</argument_list></call></expr></argument>,
                                                                                                <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getNativeTransportPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt></block_content></block></if></if_stmt>
        <return>return <expr><name>broadcastNativeAddressAndPort</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getNetworkInterface</name><parameter_list>(<parameter><decl><type><name>InetAddress</name></type> <name>localAddress</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <for>for<control>(<init><decl><type><name>NetworkInterface</name></type> <name>ifc</name> <range>: <expr><call><name><name>Collections</name><operator>.</operator><name>list</name></name><argument_list>(<argument><expr><call><name><name>NetworkInterface</name><operator>.</operator><name>getNetworkInterfaces</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <if_stmt><if>if<condition>(<expr><call><name><name>ifc</name><operator>.</operator><name>isUp</name></name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <for>for<control>(<init><decl><type><name>InetAddress</name></type> <name>addr</name> <range>: <expr><call><name><name>Collections</name><operator>.</operator><name>list</name></name><argument_list>(<argument><expr><call><name><name>ifc</name><operator>.</operator><name>getInetAddresses</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><call><name><name>addr</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>localAddress</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                            <return>return <expr><call><name><name>ifc</name><operator>.</operator><name>getDisplayName</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>SocketException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></catch></try>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Given two bit arrays represented as BigIntegers, containing the given
     * number of significant bits, calculate a midpoint.
     *
     * @param left The left point.
     * @param right The right point.
     * @param sigbits The number of bits in the points that are significant.
     * @return A midpoint that will compare bitwise halfway between the params, and
     * a boolean representing whether a non-zero lsbit remainder was generated.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Pair</name><argument_list type="generic">&lt;<argument><name>BigInteger</name></argument>,<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>midpoint</name><parameter_list>(<parameter><decl><type><name>BigInteger</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>BigInteger</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sigbits</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>BigInteger</name></type> <name>midpoint</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>remainder</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>left</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>BigInteger</name></type> <name>sum</name> <init>= <expr><call><name><name>left</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>remainder</name> <operator>=</operator> <call><name><name>sum</name><operator>.</operator><name>testBit</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>midpoint</name> <operator>=</operator> <call><name><name>sum</name><operator>.</operator><name>shiftRight</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <decl_stmt><decl><type><name>BigInteger</name></type> <name>max</name> <init>= <expr><call><name><name>TWO</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><name>sigbits</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// wrapping case</comment>
            <decl_stmt><decl><type><name>BigInteger</name></type> <name>distance</name> <init>= <expr><call><name><name>max</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>subtract</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>remainder</name> <operator>=</operator> <call><name><name>distance</name><operator>.</operator><name>testBit</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>midpoint</name> <operator>=</operator> <call><name><name>distance</name><operator>.</operator><name>shiftRight</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>mod</name><argument_list>(<argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>midpoint</name></expr></argument>, <argument><expr><name>remainder</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>compareUnsigned</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes1</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len2</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>FastByteOperations</name><operator>.</operator><name>compareUnsigned</name></name><argument_list>(<argument><expr><name>bytes1</name></expr></argument>, <argument><expr><name>offset1</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>, <argument><expr><name>bytes2</name></expr></argument>, <argument><expr><name>offset2</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>compareUnsigned</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes1</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes2</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>compareUnsigned</name><argument_list>(<argument><expr><name>bytes1</name></expr></argument>, <argument><expr><name>bytes2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>bytes1</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name><name>bytes2</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>sortSampledKeys</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>DecoratedKey</name></argument>&gt;</argument_list></name></type> <name>keys</name></decl></parameter>, <parameter><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>range</name><operator>.</operator><name>left</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>range</name><operator>.</operator><name>right</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// range wraps.  have to be careful that we sort in the same order as the range to find the right midpoint.</comment>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Token</name></type> <name>right</name> <init>= <expr><name><name>range</name><operator>.</operator><name>right</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>DecoratedKey</name></argument>&gt;</argument_list></name></type> <name>comparator</name> <init>= <expr><operator>new</operator> <class><super><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>DecoratedKey</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
            <block>{
                <function><type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>DecoratedKey</name></type> <name>o1</name></decl></parameter>, <parameter><decl><type><name>DecoratedKey</name></type> <name>o2</name></decl></parameter>)</parameter_list>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name><name>right</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><call><name><name>o1</name><operator>.</operator><name>getToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>right</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><call><name><name>o2</name><operator>.</operator><name>getToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator>
                        <operator>||</operator> <operator>(</operator><call><name><name>right</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><call><name><name>o1</name><operator>.</operator><name>getToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>right</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><call><name><name>o2</name><operator>.</operator><name>getToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
                    <block>{<block_content>
                        <comment type="line">// both tokens are on the same side of the wrap point</comment>
                        <return>return <expr><call><name><name>o1</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                    <return>return <expr><call><name><name>o2</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>o1</name></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block></function>
            }</block></class></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><name>comparator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="line">// unwrapped range (left &lt; right).  standard sort is all we need.</comment>
            <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>resourceToFile</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>filename</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ClassLoader</name></type> <name>loader</name> <init>= <expr><call><name><name>FBUtilities</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getClassLoader</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>URL</name></type> <name>scpurl</name> <init>= <expr><call><name><name>loader</name><operator>.</operator><name>getResource</name></name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>scpurl</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"unable to locate "</literal> <operator>+</operator> <name>filename</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <return>return <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>scpurl</name><operator>.</operator><name>getFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>File</name></type> <name>cassandraTriggerDir</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>File</name></type> <name>triggerDir</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.triggers_dir"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>triggerDir</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.triggers_dir"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <decl_stmt><decl><type><name>URL</name></type> <name>confDir</name> <init>= <expr><call><name><name>FBUtilities</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getClassLoader</name></name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>(<argument><expr><name>DEFAULT_TRIGGER_DIR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>confDir</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>triggerDir</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>confDir</name><operator>.</operator><name>getFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>triggerDir</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><call><name><name>triggerDir</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Trigger directory doesn't exist, please create it and try again."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>triggerDir</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setPreviousReleaseVersionString</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>previousReleaseVersionString</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>FBUtilities</name><operator>.</operator><name>previousReleaseVersionString</name></name> <operator>=</operator> <name>previousReleaseVersionString</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getPreviousReleaseVersionString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>previousReleaseVersionString</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getReleaseVersionString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <try>try <init>(<decl><type><name>InputStream</name></type> <name>in</name> <init>= <expr><call><name><name>FBUtilities</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getClassLoader</name></name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResourceAsStream</name><argument_list>(<argument><expr><literal type="string">"org/apache/cassandra/config/version.properties"</literal></expr></argument>)</argument_list></call></expr></init></decl>)</init>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <return>return <expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.releaseVersion"</literal></expr></argument>, <argument><expr><name>UNKNOWN_RELEASE_VERSION</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>Properties</name></type> <name>props</name> <init>= <expr><operator>new</operator> <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>props</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>props</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"CassandraVersion"</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>JVMStabilityInspector</name><operator>.</operator><name>inspectThrowable</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Unable to load version.properties"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="string">"debug version"</literal></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getReleaseVersionMajor</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>releaseVersion</name> <init>= <expr><call><name><name>FBUtilities</name><operator>.</operator><name>getReleaseVersionString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>FBUtilities</name><operator>.</operator><name>UNKNOWN_RELEASE_VERSION</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>releaseVersion</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"Release version is unknown"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>releaseVersion</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>releaseVersion</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>timestampMicros</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <comment type="line">// we use microsecond resolution for compatibility with other client libraries, even though</comment>
        <comment type="line">// we can't actually get microsecond precision.</comment>
        <return>return <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">1000</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>nowInSeconds</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>waitOnFutures</name><parameter_list>(<parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name><name>Future</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>T</name></extends></argument>&gt;</argument_list></name></extends></argument>&gt;</argument_list></name></type> <name>futures</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>waitOnFutures</name><argument_list>(<argument><expr><name>futures</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Block for a collection of futures, with optional timeout.
     *
     * @param futures
     * @param timeout The number of units to wait in total. If this value is less than or equal to zero,
     *           no tiemout value will be passed to {@link Future#get()}.
     * @param units The units of timeout.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>waitOnFutures</name><parameter_list>(<parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name><name>Future</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>T</name></extends></argument>&gt;</argument_list></name></extends></argument>&gt;</argument_list></name></type> <name>futures</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>TimeUnit</name></type> <name>units</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>endNanos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>endNanos</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>units</name><operator>.</operator><name>toNanos</name></name><argument_list>(<argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>results</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Throwable</name></type> <name>fail</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Future</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>T</name></extends></argument>&gt;</argument_list></name></type> <name>f</name> <range>: <expr><name>futures</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <try>try
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>endNanos</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>results</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>f</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <decl_stmt><decl><type><name>long</name></type> <name>waitFor</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>endNanos</name> <operator>-</operator> <call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>results</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>f</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>waitFor</name></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>NANOSECONDS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><name>fail</name> <operator>=</operator> <call><name><name>Throwables</name><operator>.</operator><name>merge</name></name><argument_list>(<argument><expr><name>fail</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>Throwables</name><operator>.</operator><name>maybeFail</name></name><argument_list>(<argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>results</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name>T</name></type> <name>waitOnFuture</name><parameter_list>(<parameter><decl><type><name><name>Future</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>future</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <return>return <expr><call><name><name>future</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>ExecutionException</name></type> <name>ee</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>ee</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>ie</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>ie</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>Future</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>T</name></extends></argument>&gt;</argument_list></name></type> <name>waitOnFirstFuture</name><parameter_list>(<parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name><name>Future</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>T</name></extends></argument>&gt;</argument_list></name></extends></argument>&gt;</argument_list></name></type> <name>futures</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>waitOnFirstFuture</name><argument_list>(<argument><expr><name>futures</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <comment type="block" format="javadoc">/**
     * Only wait for the first future to finish from a list of futures. Will block until at least 1 future finishes.
     * @param futures The futures to wait on
     * @return future that completed.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>Future</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>T</name></extends></argument>&gt;</argument_list></name></type> <name>waitOnFirstFuture</name><parameter_list>(<parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name><name>Future</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>T</name></extends></argument>&gt;</argument_list></name></extends></argument>&gt;</argument_list></name></type> <name>futures</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>delay</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name><name>Future</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>T</name></extends></argument>&gt;</argument_list></name></type> <name>f</name> <range>: <expr><name>futures</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>f</name><operator>.</operator><name>isDone</name></name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <try>try
                    <block>{<block_content>
                        <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block>
                    <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list>
                    <block>{<block_content>
                        <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                    </block_content>}</block></catch>
                    <catch>catch <parameter_list>(<parameter><decl><type><name>ExecutionException</name></type> <name>e</name></decl></parameter>)</parameter_list>
                    <block>{<block_content>
                        <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                    </block_content>}</block></catch></try>
                    <return>return <expr><name>f</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name><name>Uninterruptibles</name><operator>.</operator><name>sleepUninterruptibly</name></name><argument_list>(<argument><expr><name>delay</name></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a new {@link Future} wrapping the given list of futures and returning a list of their results.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Future</name><argument_list type="generic">&lt;<argument><name>List</name></argument>&gt;</argument_list></name></type> <name>allOf</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name><name>Future</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>futures</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>futures</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>CompletableFuture</name><operator>.</operator><name>completedFuture</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><operator>new</operator> <class><super><name><name>Future</name><argument_list type="generic">&lt;<argument><name>List</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><annotation>@<name>Override</name></annotation>
            <annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
            <type><specifier>public</specifier> <name>List</name></type> <name>get</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>InterruptedException</name></expr></argument>, <argument><expr><name>ExecutionException</name></expr></argument></throws>
            <block>{<block_content>
                <decl_stmt><decl><type><name>List</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>futures</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>Future</name></type> <name>current</name> <range>: <expr><name>futures</name></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>current</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
                <return>return <expr><name>result</name></expr>;</return>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
            <type><specifier>public</specifier> <name>List</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>TimeUnit</name></type> <name>unit</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>InterruptedException</name></expr></argument>, <argument><expr><name>ExecutionException</name></expr></argument>, <argument><expr><name>TimeoutException</name></expr></argument></throws>
            <block>{<block_content>
                <decl_stmt><decl><type><name>List</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>futures</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>long</name></type> <name>deadline</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>TimeUnit</name><operator>.</operator><name>NANOSECONDS</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>Future</name></type> <name>current</name> <range>: <expr><name>futures</name></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>long</name></type> <name>remaining</name> <init>= <expr><name>deadline</name> <operator>-</operator> <call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>remaining</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                        <throw>throw <expr><operator>new</operator> <call><name>TimeoutException</name><argument_list>()</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

                    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>current</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>remaining</name></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>NANOSECONDS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
                <return>return <expr><name>result</name></expr>;</return>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>boolean</name></type> <name>cancel</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>mayInterruptIfRunning</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <for>for <control>(<init><decl><type><name>Future</name></type> <name>current</name> <range>: <expr><name>futures</name></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>current</name><operator>.</operator><name>cancel</name></name><argument_list>(<argument><expr><name>mayInterruptIfRunning</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block></for>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>boolean</name></type> <name>isCancelled</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <for>for <control>(<init><decl><type><name>Future</name></type> <name>current</name> <range>: <expr><name>futures</name></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>current</name><operator>.</operator><name>isCancelled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block></for>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>boolean</name></type> <name>isDone</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <for>for <control>(<init><decl><type><name>Future</name></type> <name>current</name> <range>: <expr><name>futures</name></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>current</name><operator>.</operator><name>isDone</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block></for>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create a new instance of a partitioner defined in an SSTable Descriptor
     * @param desc Descriptor of an sstable
     * @return a new IPartitioner instance
     * @throws IOException
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>IPartitioner</name></type> <name>newPartitioner</name><parameter_list>(<parameter><decl><type><name>Descriptor</name></type> <name>desc</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>EnumSet</name><argument_list type="generic">&lt;<argument><name>MetadataType</name></argument>&gt;</argument_list></name></type> <name>types</name> <init>= <expr><call><name><name>EnumSet</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name><name>MetadataType</name><operator>.</operator><name>VALIDATION</name></name></expr></argument>, <argument><expr><name><name>MetadataType</name><operator>.</operator><name>HEADER</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>MetadataType</name></argument>, <argument><name>MetadataComponent</name></argument>&gt;</argument_list></name></type> <name>sstableMetadata</name> <init>= <expr><call><name><name>desc</name><operator>.</operator><name>getMetadataSerializer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>deserialize</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>types</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ValidationMetadata</name></type> <name>validationMetadata</name> <init>= <expr><operator>(</operator><name>ValidationMetadata</name><operator>)</operator> <call><name><name>sstableMetadata</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>MetadataType</name><operator>.</operator><name>VALIDATION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>SerializationHeader</name><operator>.</operator><name>Component</name></name></type> <name>header</name> <init>= <expr><operator>(</operator><name><name>SerializationHeader</name><operator>.</operator><name>Component</name></name><operator>)</operator> <call><name><name>sstableMetadata</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>MetadataType</name><operator>.</operator><name>HEADER</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>newPartitioner</name><argument_list>(<argument><expr><name><name>validationMetadata</name><operator>.</operator><name>partitioner</name></name></expr></argument>, <argument><expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name><name>header</name><operator>.</operator><name>getKeyType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>IPartitioner</name></type> <name>newPartitioner</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>partitionerClassName</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <return>return <expr><call><name>newPartitioner</name><argument_list>(<argument><expr><name>partitionerClassName</name></expr></argument>, <argument><expr><call><name><name>Optional</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>static</specifier> <name>IPartitioner</name></type> <name>newPartitioner</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>partitionerClassName</name></decl></parameter>, <parameter><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>partitionerClassName</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>partitionerClassName</name> <operator>=</operator> <literal type="string">"org.apache.cassandra.dht."</literal> <operator>+</operator> <name>partitionerClassName</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>partitionerClassName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"org.apache.cassandra.dht.LocalPartitioner"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <assert>assert <expr><call><name><name>comparator</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call> <operator>:</operator> <literal type="string">"Expected a comparator for local partitioner"</literal></expr>;</assert>
            <return>return <expr><operator>new</operator> <call><name>LocalPartitioner</name><argument_list>(<argument><expr><call><name><name>comparator</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>FBUtilities</name><operator>.</operator><name>instanceOrConstruct</name></name><argument_list>(<argument><expr><name>partitionerClassName</name></expr></argument>, <argument><expr><literal type="string">"partitioner"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>IAuthorizer</name></type> <name>newAuthorizer</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>className</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>className</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>className</name> <operator>=</operator> <literal type="string">"org.apache.cassandra.auth."</literal> <operator>+</operator> <name>className</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><call><name><name>FBUtilities</name><operator>.</operator><name>construct</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>, <argument><expr><literal type="string">"authorizer"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>IAuthenticator</name></type> <name>newAuthenticator</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>className</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>className</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>className</name> <operator>=</operator> <literal type="string">"org.apache.cassandra.auth."</literal> <operator>+</operator> <name>className</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><call><name><name>FBUtilities</name><operator>.</operator><name>construct</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>, <argument><expr><literal type="string">"authenticator"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>IRoleManager</name></type> <name>newRoleManager</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>className</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>className</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>className</name> <operator>=</operator> <literal type="string">"org.apache.cassandra.auth."</literal> <operator>+</operator> <name>className</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><call><name><name>FBUtilities</name><operator>.</operator><name>construct</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>, <argument><expr><literal type="string">"role manager"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>INetworkAuthorizer</name></type> <name>newNetworkAuthorizer</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>className</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>className</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>AllowAllNetworkAuthorizer</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>className</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>className</name> <operator>=</operator> <literal type="string">"org.apache.cassandra.auth."</literal> <operator>+</operator> <name>className</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>FBUtilities</name><operator>.</operator><name>construct</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>, <argument><expr><literal type="string">"network authorizer"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>IAuditLogger</name></type> <name>newAuditLogger</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>className</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>parameters</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>className</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>className</name> <operator>=</operator> <literal type="string">"org.apache.cassandra.audit."</literal> <operator>+</operator> <name>className</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <try>try
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>auditLoggerClass</name> <init>= <expr><call><name><name>Class</name><operator>.</operator><name>forName</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><operator>(</operator><name>IAuditLogger</name><operator>)</operator> <call><name><name>auditLoggerClass</name><operator>.</operator><name>getConstructor</name></name><argument_list>(<argument><expr><name><name>Map</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>newInstance</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>ex</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Unable to create instance of IAuditLogger."</literal></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isAuditLoggerClassExists</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>className</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>className</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>className</name> <operator>=</operator> <literal type="string">"org.apache.cassandra.audit."</literal> <operator>+</operator> <name>className</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <try>try
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>FBUtilities</name><operator>.</operator><name>classForName</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>, <argument><expr><literal type="string">"Audit logger"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>ConfigurationException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></catch></try>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return The Class for the given name.
     * @param classname Fully qualified classname.
     * @param readable Descriptive noun for the role the class plays.
     * @throws ConfigurationException If the class cannot be found.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>Class</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>classForName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>classname</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>readable</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <return>return <expr><operator>(</operator><name><name>Class</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name><operator>)</operator><call><name><name>Class</name><operator>.</operator><name>forName</name></name><argument_list>(<argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>ClassNotFoundException</name></type> | <type><name>NoClassDefFoundError</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Unable to find %s class '%s'"</literal></expr></argument>, <argument><expr><name>readable</name></expr></argument>, <argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Constructs an instance of the given class, which must have a no-arg or default constructor.
     * @param classname Fully qualified classname.
     * @param readable Descriptive noun for the role the class plays.
     * @throws ConfigurationException If the class cannot be found.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name>T</name></type> <name>instanceOrConstruct</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>classname</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>readable</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>cls</name> <init>= <expr><call><name><name>FBUtilities</name><operator>.</operator><name>classForName</name></name><argument_list>(<argument><expr><name>classname</name></expr></argument>, <argument><expr><name>readable</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{<block_content>
            <decl_stmt><decl><type><name>Field</name></type> <name>instance</name> <init>= <expr><call><name><name>cls</name><operator>.</operator><name>getField</name></name><argument_list>(<argument><expr><literal type="string">"instance"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>cls</name><operator>.</operator><name>cast</name></name><argument_list>(<argument><expr><call><name><name>instance</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchFieldException</name></type> | <type><name>SecurityException</name></type> | <type><name>IllegalArgumentException</name></type> | <type><name>IllegalAccessException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <comment type="line">// Could not get instance field. Try instantiating.</comment>
            <return>return <expr><call><name>construct</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><name>classname</name></expr></argument>, <argument><expr><name>readable</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Constructs an instance of the given class, which must have a no-arg or default constructor.
     * @param classname Fully qualified classname.
     * @param readable Descriptive noun for the role the class plays.
     * @throws ConfigurationException If the class cannot be found.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name>T</name></type> <name>construct</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>classname</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>readable</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>cls</name> <init>= <expr><call><name><name>FBUtilities</name><operator>.</operator><name>classForName</name></name><argument_list>(<argument><expr><name>classname</name></expr></argument>, <argument><expr><name>readable</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>construct</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><name>classname</name></expr></argument>, <argument><expr><name>readable</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name>T</name></type> <name>construct</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>cls</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>classname</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>readable</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <return>return <expr><call><name><name>cls</name><operator>.</operator><name>newInstance</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalAccessException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Default constructor for %s class '%s' is inaccessible."</literal></expr></argument>, <argument><expr><name>readable</name></expr></argument>, <argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>InstantiationException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Cannot use abstract class '%s' as %s."</literal></expr></argument>, <argument><expr><name>classname</name></expr></argument>, <argument><expr><name>readable</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <comment type="line">// Catch-all because Class.newInstance() "propagates any exception thrown by the nullary constructor, including a checked exception".</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>e</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>ConfigurationException</name></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>(</operator><name>ConfigurationException</name><operator>)</operator><call><name><name>e</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Error instantiating %s class '%s'."</literal></expr></argument>, <argument><expr><name>readable</name></expr></argument>, <argument><expr><name>classname</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>NavigableSet</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>singleton</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>?</name> <super>super <name>T</name></super></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>NavigableSet</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>s</name> <init>= <expr><operator>new</operator> <call><name><name>TreeSet</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>comparator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>s</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>NavigableSet</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>emptySortedSet</name><parameter_list>(<parameter><decl><type><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>?</name> <super>super <name>T</name></super></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name><name>TreeSet</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>comparator</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Make straing out of the given {@code Map}.
     *
     * @param map Map to make string.
     * @return String representation of all entries in the map,
     *         where key and value pair is concatenated with ':'.
     */</comment>
    <function><annotation>@<name>Nonnull</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>toString</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>?</name></argument>, <argument><name>?</name></argument>&gt;</argument_list></name></type> <name>map</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>map</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="string">""</literal></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name><name>Joiner</name><operator>.</operator><name>MapJoiner</name></name></type> <name>joiner</name> <init>= <expr><call><name><name>Joiner</name><operator>.</operator><name>on</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>withKeyValueSeparator</name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>joiner</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Used to get access to protected/private field of the specified class
     * @param klass - name of the class
     * @param fieldName - name of the field
     * @return Field or null on error
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Field</name></type> <name>getProtectedField</name><parameter_list>(<parameter><decl><type><name>Class</name></type> <name>klass</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>fieldName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <decl_stmt><decl><type><name>Field</name></type> <name>field</name> <init>= <expr><call><name><name>klass</name><operator>.</operator><name>getDeclaredField</name></name><argument_list>(<argument><expr><name>fieldName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>field</name><operator>.</operator><name>setAccessible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>field</name></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>CloseableIterator</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>closeableIterator</name><parameter_list>(<parameter><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>iterator</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name><name>WrappedCloseableIterator</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>fromJsonMap</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>json</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <return>return <expr><call><name><name>jsonMapper</name><operator>.</operator><name>readValue</name></name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name><name>Map</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>fromJsonList</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>json</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <return>return <expr><call><name><name>jsonMapper</name><operator>.</operator><name>readValue</name></name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name><name>List</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>json</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>object</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <return>return <expr><call><name><name>jsonMapper</name><operator>.</operator><name>writeValueAsString</name></name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>prettyPrintMemory</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>prettyPrintMemory</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>prettyPrintMemory</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>includeSpace</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%.3f%sGiB"</literal></expr></argument>, <argument><expr><name>size</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal><operator>)</operator></expr></argument>, <argument><expr><ternary><condition><expr><name>includeSpace</name></expr> ?</condition><then> <expr><literal type="string">" "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%.3f%sMiB"</literal></expr></argument>, <argument><expr><name>size</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator></expr></argument>, <argument><expr><ternary><condition><expr><name>includeSpace</name></expr> ?</condition><then> <expr><literal type="string">" "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%.3f%sKiB"</literal></expr></argument>, <argument><expr><name>size</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>, <argument><expr><ternary><condition><expr><name>includeSpace</name></expr> ?</condition><then> <expr><literal type="string">" "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>prettyPrintMemoryPerSecond</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>rate</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>rate</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%.3fGiB/s"</literal></expr></argument>, <argument><expr><name>rate</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>rate</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%.3fMiB/s"</literal></expr></argument>, <argument><expr><name>rate</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%.3fKiB/s"</literal></expr></argument>, <argument><expr><name>rate</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>prettyPrintMemoryPerSecond</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>timeInNano</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// We can't sanely calculate a rate over 0 nanoseconds</comment>
        <if_stmt><if>if <condition>(<expr><name>timeInNano</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="string">"NaN  KiB/s"</literal></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>long</name></type> <name>rate</name> <init>= <expr><operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>bytes</name> <operator>/</operator> <name>timeInNano</name><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name>prettyPrintMemoryPerSecond</name><argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Starts and waits for the given @param pb to finish.
     * @throws java.io.IOException on non-zero exit code
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>exec</name><parameter_list>(<parameter><decl><type><name>ProcessBuilder</name></type> <name>pb</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Process</name></type> <name>p</name> <init>= <expr><call><name><name>pb</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>errCode</name> <init>= <expr><call><name><name>p</name><operator>.</operator><name>waitFor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>errCode</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <try>try <init>(<decl><type><name>BufferedReader</name></type> <name>in</name> <init>= <expr><operator>new</operator> <call><name>BufferedReader</name><argument_list>(<argument><expr><operator>new</operator> <call><name>InputStreamReader</name><argument_list>(<argument><expr><call><name><name>p</name><operator>.</operator><name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;
                     <decl><type><name>BufferedReader</name></type> <name>err</name> <init>= <expr><operator>new</operator> <call><name>BufferedReader</name><argument_list>(<argument><expr><operator>new</operator> <call><name>InputStreamReader</name><argument_list>(<argument><expr><call><name><name>p</name><operator>.</operator><name>getErrorStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>)</init>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>lineSep</name> <init>= <expr><call><name><name>LINE_SEPARATOR</name><operator>.</operator><name>getString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>str</name></decl>;</decl_stmt>
                    <while>while <condition>(<expr><operator>(</operator><name>str</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readLine</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>lineSep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
                    <while>while <condition>(<expr><operator>(</operator><name>str</name> <operator>=</operator> <call><name><name>err</name><operator>.</operator><name>readLine</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>lineSep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
                    <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Exception while executing the command: "</literal><operator>+</operator> <call><name><name>StringUtils</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><call><name><name>pb</name><operator>.</operator><name>command</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call> <operator>+</operator>
                                          <literal type="string">", command error Code: "</literal> <operator>+</operator> <name>errCode</name> <operator>+</operator>
                                          <literal type="string">", command output: "</literal><operator>+</operator> <call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></try>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>updateChecksumInt</name><parameter_list>(<parameter><decl><type><name>Checksum</name></type> <name>checksum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>checksum</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><operator>(</operator><name>v</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>checksum</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><operator>(</operator><name>v</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>checksum</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><operator>(</operator><name>v</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>checksum</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><operator>(</operator><name>v</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
      * Updates checksum with the provided ByteBuffer at the given offset + length.
      * Resets position and limit back to their original values on return.
      * This method is *NOT* thread-safe.
      */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>updateChecksum</name><parameter_list>(<parameter><decl><type><name>CRC32</name></type> <name>checksum</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>position</name> <init>= <expr><call><name><name>buffer</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>limit</name> <init>= <expr><call><name><name>buffer</name><operator>.</operator><name>limit</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>buffer</name><operator>.</operator><name>position</name></name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>limit</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>checksum</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>buffer</name><operator>.</operator><name>position</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>limit</name><argument_list>(<argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Updates checksum with the provided ByteBuffer.
     * Resets position back to its original values on return.
     * This method is *NOT* thread-safe.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>updateChecksum</name><parameter_list>(<parameter><decl><type><name>CRC32</name></type> <name>checksum</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>buffer</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>position</name> <init>= <expr><call><name><name>buffer</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>checksum</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>buffer</name><operator>.</operator><name>position</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>abs</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>index</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>negbit</name> <init>= <expr><name>index</name> <operator>&gt;&gt;</operator> <literal type="number">63</literal></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>(</operator><name>index</name> <operator>^</operator> <name>negbit</name><operator>)</operator> <operator>-</operator> <name>negbit</name></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name><name>WrappedCloseableIterator</name><parameter_list>&lt;<parameter><name>T</name></parameter>&gt;</parameter_list></name>
        <super_list><extends>extends <super><name><name>AbstractIterator</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></super></extends> <implements>implements <super><name><name>CloseableIterator</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></super></implements></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>source</name></decl>;</decl_stmt>
        <constructor><specifier>public</specifier> <name>WrappedCloseableIterator</name><parameter_list>(<parameter><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>source</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>source</name></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>protected</specifier> <name>T</name></type> <name>computeNext</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>source</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><call><name>endOfData</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
            <return>return <expr><call><name><name>source</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>
    }</block></class>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>byte</name><index>[]</index></name></type> <name>serialize</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>object</name></decl></parameter>, <parameter><decl><type><name><name>IVersionedSerializer</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>serializer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>serializer</name><operator>.</operator><name>serializedSize</name></name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <try>try <init>(<decl><type><name>DataOutputBuffer</name></type> <name>buffer</name> <init>= <expr><operator>new</operator> <call><name>DataOutputBufferFixed</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>)</init>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>serializer</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <assert>assert <expr><call><name><name>buffer</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>size</name> <operator>&amp;&amp;</operator> <call><name><name>buffer</name><operator>.</operator><name>getData</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name> <operator>==</operator> <name>size</name>
                <operator>:</operator> <call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Final buffer length %s to accommodate data size of %s (predicted %s) for %s"</literal></expr></argument>,
                        <argument><expr><call><name><name>buffer</name><operator>.</operator><name>getData</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name></expr></argument>, <argument><expr><call><name><name>buffer</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</assert>
            <return>return <expr><call><name><name>buffer</name><operator>.</operator><name>getData</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <comment type="line">// We're doing in-memory serialization...</comment>
            <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>copy</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>OutputStream</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>limit</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></expr></init></decl>;</decl_stmt> <comment type="line">// 64 byte buffer</comment>
        <decl_stmt><decl><type><name>long</name></type> <name>copied</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>toCopy</name> <init>= <expr><name><name>buffer</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>limit</name> <operator>&lt;</operator> <name><name>buffer</name><operator>.</operator><name>length</name></name> <operator>+</operator> <name>copied</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>toCopy</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>limit</name> <operator>-</operator> <name>copied</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>sofar</name> <init>= <expr><call><name><name>from</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>toCopy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>sofar</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name><name>to</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sofar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>copied</name> <operator>+=</operator> <name>sofar</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>limit</name> <operator>==</operator> <name>copied</name></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>
        </block_content>}</block></while>
        <return>return <expr><name>copied</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>File</name></type> <name>getToolsOutputDirectory</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>File</name></type> <name>historyDir</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>USER_HOME</name><operator>.</operator><name>getString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">".cassandra"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>createDirectory</name></name><argument_list>(<argument><expr><name>historyDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>historyDir</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>closeAll</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>AutoCloseable</name></extends></argument>&gt;</argument_list></name></type> <name>l</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Exception</name></type> <name>toThrow</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>AutoCloseable</name></type> <name>c</name> <range>: <expr><name>l</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <try>try
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>toThrow</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>toThrow</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>toThrow</name><operator>.</operator><name>addSuppressed</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><name>toThrow</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><name>toThrow</name></expr>;</throw></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>toWriteUTFBytes</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>baos</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>DataOutputStream</name></type> <name>dos</name> <init>= <expr><operator>new</operator> <call><name>DataOutputStream</name><argument_list>(<argument><expr><name>baos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>dos</name><operator>.</operator><name>writeUTF</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dos</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>baos</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>sleepQuietly</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>millis</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><name>millis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>align</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>boundary</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>(</operator><name>val</name> <operator>+</operator> <name>boundary</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>boundary</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>reset</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>localInetAddress</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>localInetAddressAndPort</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>broadcastInetAddress</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>broadcastInetAddressAndPort</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>broadcastNativeAddress</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Hack to prevent the ugly "illegal access" warnings in Java 11+ like the following.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>preventIllegalAccessWarnings</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <comment type="line">// Example "annoying" trace:</comment>
        <comment type="line">//        WARNING: An illegal reflective access operation has occurred</comment>
        <comment type="line">//        WARNING: Illegal reflective access by io.netty.util.internal.ReflectionUtil (file:...)</comment>
        <comment type="line">//        WARNING: Please consider reporting this to the maintainers of io.netty.util.internal.ReflectionUtil</comment>
        <comment type="line">//        WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations</comment>
        <comment type="line">//        WARNING: All illegal access operations will be denied in a future release</comment>
        <try>try
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>c</name> <init>= <expr><call><name><name>Class</name><operator>.</operator><name>forName</name></name><argument_list>(<argument><expr><literal type="string">"jdk.internal.module.IllegalAccessLogger"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Field</name></type> <name>f</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>getDeclaredField</name></name><argument_list>(<argument><expr><literal type="string">"logger"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>setAccessible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <comment type="line">// ignore</comment>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>
}</block></class>
</unit>
