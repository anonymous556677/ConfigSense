<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/schema/KeyspaceMetadata.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Optional</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>MoreObjects</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Objects</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>CqlBuilder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>SchemaElement</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>functions</name><operator>.</operator><name>UDAggregate</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>functions</name><operator>.</operator><name>UDFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>UserType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>ConfigurationException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>AbstractReplicationStrategy</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>Functions</name><operator>.</operator><name>FunctionsDiff</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>Tables</name><operator>.</operator><name>TablesDiff</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>Types</name><operator>.</operator><name>TypesDiff</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>Views</name><operator>.</operator><name>ViewsDiff</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>StorageService</name></name>;</import>

<import>import static <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name><operator>.</operator><name>format</name></name>;</import>

<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name><operator>.</operator><name>any</name></name>;</import>

<comment type="block" format="javadoc">/**
 * An immutable representation of keyspace metadata (name, params, tables, types, and functions).
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>KeyspaceMetadata</name> <super_list><implements>implements <super><name>SchemaElement</name></super></implements></super_list>
<block>{
    <enum><specifier>public</specifier> enum <name>Kind</name>
    <block>{
        <decl><name>REGULAR</name></decl>, <decl><name>VIRTUAL</name></decl>
    }</block></enum>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Kind</name></type> <name>kind</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>KeyspaceParams</name></type> <name>params</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Tables</name></type> <name>tables</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Views</name></type> <name>views</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Types</name></type> <name>types</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Functions</name></type> <name>functions</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>KeyspaceMetadata</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Kind</name></type> <name>kind</name></decl></parameter>, <parameter><decl><type><name>KeyspaceParams</name></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>Tables</name></type> <name>tables</name></decl></parameter>, <parameter><decl><type><name>Views</name></type> <name>views</name></decl></parameter>, <parameter><decl><type><name>Types</name></type> <name>types</name></decl></parameter>, <parameter><decl><type><name>Functions</name></type> <name>functions</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>kind</name></name> <operator>=</operator> <name>kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>params</name></name> <operator>=</operator> <name>params</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tables</name></name> <operator>=</operator> <name>tables</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>views</name></name> <operator>=</operator> <name>views</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>types</name></name> <operator>=</operator> <name>types</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>functions</name></name> <operator>=</operator> <name>functions</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>KeyspaceMetadata</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>KeyspaceParams</name></type> <name>params</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>KeyspaceMetadata</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>Kind</name><operator>.</operator><name>REGULAR</name></name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><call><name><name>Tables</name><operator>.</operator><name>none</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Views</name><operator>.</operator><name>none</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Types</name><operator>.</operator><name>none</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Functions</name><operator>.</operator><name>none</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>KeyspaceMetadata</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>KeyspaceParams</name></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>Tables</name></type> <name>tables</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>KeyspaceMetadata</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>Kind</name><operator>.</operator><name>REGULAR</name></name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>tables</name></expr></argument>, <argument><expr><call><name><name>Views</name><operator>.</operator><name>none</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Types</name><operator>.</operator><name>none</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Functions</name><operator>.</operator><name>none</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>KeyspaceMetadata</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>KeyspaceParams</name></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>Tables</name></type> <name>tables</name></decl></parameter>, <parameter><decl><type><name>Views</name></type> <name>views</name></decl></parameter>, <parameter><decl><type><name>Types</name></type> <name>types</name></decl></parameter>, <parameter><decl><type><name>Functions</name></type> <name>functions</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>KeyspaceMetadata</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>Kind</name><operator>.</operator><name>REGULAR</name></name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>tables</name></expr></argument>, <argument><expr><name>views</name></expr></argument>, <argument><expr><name>types</name></expr></argument>, <argument><expr><name>functions</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>KeyspaceMetadata</name></type> <name>virtual</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Tables</name></type> <name>tables</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>KeyspaceMetadata</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>Kind</name><operator>.</operator><name>VIRTUAL</name></name></expr></argument>, <argument><expr><call><name><name>KeyspaceParams</name><operator>.</operator><name>local</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tables</name></expr></argument>, <argument><expr><call><name><name>Views</name><operator>.</operator><name>none</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Types</name><operator>.</operator><name>none</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Functions</name><operator>.</operator><name>none</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>KeyspaceMetadata</name></type> <name>withSwapped</name><parameter_list>(<parameter><decl><type><name>KeyspaceParams</name></type> <name>params</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>KeyspaceMetadata</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>kind</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>tables</name></expr></argument>, <argument><expr><name>views</name></expr></argument>, <argument><expr><name>types</name></expr></argument>, <argument><expr><name>functions</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>KeyspaceMetadata</name></type> <name>withSwapped</name><parameter_list>(<parameter><decl><type><name>Tables</name></type> <name>regular</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>KeyspaceMetadata</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>kind</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>regular</name></expr></argument>, <argument><expr><name>views</name></expr></argument>, <argument><expr><name>types</name></expr></argument>, <argument><expr><name>functions</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>KeyspaceMetadata</name></type> <name>withSwapped</name><parameter_list>(<parameter><decl><type><name>Views</name></type> <name>views</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>KeyspaceMetadata</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>kind</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>tables</name></expr></argument>, <argument><expr><name>views</name></expr></argument>, <argument><expr><name>types</name></expr></argument>, <argument><expr><name>functions</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>KeyspaceMetadata</name></type> <name>withSwapped</name><parameter_list>(<parameter><decl><type><name>Types</name></type> <name>types</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>KeyspaceMetadata</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>kind</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>tables</name></expr></argument>, <argument><expr><name>views</name></expr></argument>, <argument><expr><name>types</name></expr></argument>, <argument><expr><name>functions</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>KeyspaceMetadata</name></type> <name>withSwapped</name><parameter_list>(<parameter><decl><type><name>Functions</name></type> <name>functions</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>KeyspaceMetadata</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>kind</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>tables</name></expr></argument>, <argument><expr><name>views</name></expr></argument>, <argument><expr><name>types</name></expr></argument>, <argument><expr><name>functions</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isVirtual</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>kind</name> <operator>==</operator> <name><name>Kind</name><operator>.</operator><name>VIRTUAL</name></name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a new KeyspaceMetadata with all instances of old UDT replaced with the updated version.
     * Replaces all instances in tables, views, types, and functions.
     */</comment>
    <function><type><specifier>public</specifier> <name>KeyspaceMetadata</name></type> <name>withUpdatedUserType</name><parameter_list>(<parameter><decl><type><name>UserType</name></type> <name>udt</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>KeyspaceMetadata</name><argument_list>(<argument><expr><name>name</name></expr></argument>,
                                    <argument><expr><name>kind</name></expr></argument>,
                                    <argument><expr><name>params</name></expr></argument>,
                                    <argument><expr><call><name><name>tables</name><operator>.</operator><name>withUpdatedUserType</name></name><argument_list>(<argument><expr><name>udt</name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><call><name><name>views</name><operator>.</operator><name>withUpdatedUserTypes</name></name><argument_list>(<argument><expr><name>udt</name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><call><name><name>types</name><operator>.</operator><name>withUpdatedUserType</name></name><argument_list>(<argument><expr><name>udt</name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><call><name><name>functions</name><operator>.</operator><name>withUpdatedUserType</name></name><argument_list>(<argument><expr><name>udt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>TableMetadata</name></argument>&gt;</argument_list></name></type> <name>tablesAndViews</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Iterables</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><name>tables</name></expr></argument>, <argument><expr><call><name><name>views</name><operator>.</operator><name>allTableMetadata</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Nullable</name></annotation>
    <type><specifier>public</specifier> <name>TableMetadata</name></type> <name>getTableOrViewNullable</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tableOrViewName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ViewMetadata</name></type> <name>view</name> <init>= <expr><call><name><name>views</name><operator>.</operator><name>getNullable</name></name><argument_list>(<argument><expr><name>tableOrViewName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name>view</name> <operator>==</operator> <literal type="null">null</literal></expr>
             ?</condition><then> <expr><call><name><name>tables</name><operator>.</operator><name>getNullable</name></name><argument_list>(<argument><expr><name>tableOrViewName</name></expr></argument>)</argument_list></call></expr>
             </then><else>: <expr><name><name>view</name><operator>.</operator><name>metadata</name></name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasTable</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>tables</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isPresent</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasView</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>viewName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>views</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>viewName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isPresent</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasIndex</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>indexName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>any</name><argument_list>(<argument><expr><name>tables</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>t</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>t</name><operator>.</operator><name>indexes</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><name>indexName</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>findAvailableIndexName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>baseName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>hasIndex</name><argument_list>(<argument><expr><name>baseName</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>baseName</name></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <do>do
        <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><name>baseName</name> <operator>+</operator> <literal type="char">'_'</literal> <operator>+</operator> <name>i</name><operator>++</operator></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>hasIndex</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>name</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition>;</do>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>TableMetadata</name></argument>&gt;</argument_list></name></type> <name>findIndexedTable</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>indexName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>TableMetadata</name></type> <name>table</name> <range>: <expr><call><name>tablesAndViews</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>table</name><operator>.</operator><name>indexes</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><name>indexName</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

        <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Objects</name><operator>.</operator><name>hashCode</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>kind</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>tables</name></expr></argument>, <argument><expr><name>views</name></expr></argument>, <argument><expr><name>functions</name></expr></argument>, <argument><expr><name>types</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>o</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>o</name> <operator>instanceof</operator> <name>KeyspaceMetadata</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>KeyspaceMetadata</name></type> <name>other</name> <init>= <expr><operator>(</operator><name>KeyspaceMetadata</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name><name>name</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call>
            <operator>&amp;&amp;</operator> <name>kind</name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>kind</name></name>
            <operator>&amp;&amp;</operator> <call><name><name>params</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>params</name></name></expr></argument>)</argument_list></call>
            <operator>&amp;&amp;</operator> <call><name><name>tables</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>tables</name></name></expr></argument>)</argument_list></call>
            <operator>&amp;&amp;</operator> <call><name><name>views</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>views</name></name></expr></argument>)</argument_list></call>
            <operator>&amp;&amp;</operator> <call><name><name>functions</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>functions</name></name></expr></argument>)</argument_list></call>
            <operator>&amp;&amp;</operator> <call><name><name>types</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>types</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>MoreObjects</name><operator>.</operator><name>toStringHelper</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"kind"</literal></expr></argument>, <argument><expr><name>kind</name></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"params"</literal></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"tables"</literal></expr></argument>, <argument><expr><name>tables</name></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"views"</literal></expr></argument>, <argument><expr><name>views</name></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"functions"</literal></expr></argument>, <argument><expr><name>functions</name></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"types"</literal></expr></argument>, <argument><expr><name>types</name></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>SchemaElementType</name></type> <name>elementType</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>SchemaElementType</name><operator>.</operator><name>KEYSPACE</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>elementKeyspace</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>name</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>elementName</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>name</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toCqlString</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>withInternals</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>ifNotExists</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CqlBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>CqlBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isVirtual</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"/*"</literal></expr></argument>)</argument_list></call>
                   <operator>.</operator><call><name>newLine</name><argument_list>()</argument_list></call>
                   <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"Warning: Keyspace "</literal></expr></argument>)</argument_list></call>
                   <operator>.</operator><call><name>appendQuotingIfNeeded</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call>
                   <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" is a virtual keyspace and cannot be recreated with CQL."</literal></expr></argument>)</argument_list></call>
                   <operator>.</operator><call><name>newLine</name><argument_list>()</argument_list></call>
                   <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"Structure, for reference:"</literal></expr></argument>)</argument_list></call>
                   <operator>.</operator><call><name>newLine</name><argument_list>()</argument_list></call>
                   <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"VIRTUAL KEYSPACE "</literal></expr></argument>)</argument_list></call>
                   <operator>.</operator><call><name>appendQuotingIfNeeded</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call>
                   <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call>
                   <operator>.</operator><call><name>newLine</name><argument_list>()</argument_list></call>
                   <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"*/"</literal></expr></argument>)</argument_list></call>
                   <operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"CREATE KEYSPACE "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>ifNotExists</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"IF NOT EXISTS "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>appendQuotingIfNeeded</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call>
                   <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" WITH replication = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>replication</name><operator>.</operator><name>appendCqlTo</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"  AND durable_writes = "</literal></expr></argument>)</argument_list></call>
                   <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name><name>params</name><operator>.</operator><name>durableWrites</name></name></expr></argument>)</argument_list></call>
                   <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call>
                   <operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><call><name><name>builder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>validate</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>SchemaConstants</name><operator>.</operator><name>isValidName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"Keyspace name must not be empty, more than %s characters long, "</literal>
                                                    <operator>+</operator> <literal type="string">"or contain non-alphanumeric-underscore characters (got \"%s\")"</literal></expr></argument>,
                                                    <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>NAME_LENGTH</name></name></expr></argument>,
                                                    <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>validate</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>tablesAndViews</name><argument_list>()</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><name>TableMetadata</name><operator>::</operator><name>validate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>indexNames</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>TableMetadata</name></type> <name>table</name> <range>: <expr><name>tables</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>IndexMetadata</name></type> <name>index</name> <range>: <expr><name><name>table</name><operator>.</operator><name>indexes</name></name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>indexNames</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>index</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"Duplicate index name %s in keyspace %s"</literal></expr></argument>, <argument><expr><name><name>index</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

                <expr_stmt><expr><call><name><name>indexNames</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>index</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>AbstractReplicationStrategy</name></type> <name>createReplicationStrategy</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>AbstractReplicationStrategy</name><operator>.</operator><name>createReplicationStrategy</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>,
                                                                     <argument><expr><name><name>params</name><operator>.</operator><name>replication</name><operator>.</operator><name>klass</name></name></expr></argument>,
                                                                     <argument><expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>getTokenMetadata</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                                     <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getEndpointSnitch</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                                     <argument><expr><name><name>params</name><operator>.</operator><name>replication</name><operator>.</operator><name>options</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>KeyspaceDiff</name></argument>&gt;</argument_list></name></type> <name>diff</name><parameter_list>(<parameter><decl><type><name>KeyspaceMetadata</name></type> <name>before</name></decl></parameter>, <parameter><decl><type><name>KeyspaceMetadata</name></type> <name>after</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>KeyspaceDiff</name><operator>.</operator><name>diff</name></name><argument_list>(<argument><expr><name>before</name></expr></argument>, <argument><expr><name>after</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>KeyspaceDiff</name>
    <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>KeyspaceMetadata</name></type> <name>before</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>KeyspaceMetadata</name></type> <name>after</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>TablesDiff</name></type> <name>tables</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>ViewsDiff</name></type> <name>views</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>TypesDiff</name></type> <name>types</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>FunctionsDiff</name><argument_list type="generic">&lt;<argument><name>UDFunction</name></argument>&gt;</argument_list></name></type> <name>udfs</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>FunctionsDiff</name><argument_list type="generic">&lt;<argument><name>UDAggregate</name></argument>&gt;</argument_list></name></type> <name>udas</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>KeyspaceDiff</name><parameter_list>(<parameter><decl><type><name>KeyspaceMetadata</name></type> <name>before</name></decl></parameter>,
                             <parameter><decl><type><name>KeyspaceMetadata</name></type> <name>after</name></decl></parameter>,
                             <parameter><decl><type><name>TablesDiff</name></type> <name>tables</name></decl></parameter>,
                             <parameter><decl><type><name>ViewsDiff</name></type> <name>views</name></decl></parameter>,
                             <parameter><decl><type><name>TypesDiff</name></type> <name>types</name></decl></parameter>,
                             <parameter><decl><type><name><name>FunctionsDiff</name><argument_list type="generic">&lt;<argument><name>UDFunction</name></argument>&gt;</argument_list></name></type> <name>udfs</name></decl></parameter>,
                             <parameter><decl><type><name><name>FunctionsDiff</name><argument_list type="generic">&lt;<argument><name>UDAggregate</name></argument>&gt;</argument_list></name></type> <name>udas</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>before</name></name> <operator>=</operator> <name>before</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>after</name></name> <operator>=</operator> <name>after</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tables</name></name> <operator>=</operator> <name>tables</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>views</name></name> <operator>=</operator> <name>views</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>types</name></name> <operator>=</operator> <name>types</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>udfs</name></name> <operator>=</operator> <name>udfs</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>udas</name></name> <operator>=</operator> <name>udas</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>KeyspaceDiff</name></argument>&gt;</argument_list></name></type> <name>diff</name><parameter_list>(<parameter><decl><type><name>KeyspaceMetadata</name></type> <name>before</name></decl></parameter>, <parameter><decl><type><name>KeyspaceMetadata</name></type> <name>after</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>before</name> <operator>==</operator> <name>after</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>before</name><operator>.</operator><name>name</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>after</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>msg</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Attempting to diff two keyspaces with different names ('%s' and '%s')"</literal></expr></argument>, <argument><expr><name><name>before</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>after</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name>TablesDiff</name></type> <name>tables</name> <init>= <expr><call><name><name>Tables</name><operator>.</operator><name>diff</name></name><argument_list>(<argument><expr><name><name>before</name><operator>.</operator><name>tables</name></name></expr></argument>, <argument><expr><name><name>after</name><operator>.</operator><name>tables</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ViewsDiff</name></type> <name>views</name> <init>= <expr><call><name><name>Views</name><operator>.</operator><name>diff</name></name><argument_list>(<argument><expr><name><name>before</name><operator>.</operator><name>views</name></name></expr></argument>, <argument><expr><name><name>after</name><operator>.</operator><name>views</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>TypesDiff</name></type> <name>types</name> <init>= <expr><call><name><name>Types</name><operator>.</operator><name>diff</name></name><argument_list>(<argument><expr><name><name>before</name><operator>.</operator><name>types</name></name></expr></argument>, <argument><expr><name><name>after</name><operator>.</operator><name>types</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation> <type><name><name>FunctionsDiff</name><argument_list type="generic">&lt;<argument><name>UDFunction</name></argument>&gt;</argument_list></name></type>  <name>udfs</name> <init>= <expr><name><name>FunctionsDiff</name><operator>.</operator><name>NONE</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation> <type><name><name>FunctionsDiff</name><argument_list type="generic">&lt;<argument><name>UDAggregate</name></argument>&gt;</argument_list></name></type> <name>udas</name> <init>= <expr><name><name>FunctionsDiff</name><operator>.</operator><name>NONE</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>before</name><operator>.</operator><name>functions</name></name> <operator>!=</operator> <name><name>after</name><operator>.</operator><name>functions</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>udfs</name> <operator>=</operator> <call><name><name>Functions</name><operator>.</operator><name>udfsDiff</name></name><argument_list>(<argument><expr><name><name>before</name><operator>.</operator><name>functions</name></name></expr></argument>, <argument><expr><name><name>after</name><operator>.</operator><name>functions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>udas</name> <operator>=</operator> <call><name><name>Functions</name><operator>.</operator><name>udasDiff</name></name><argument_list>(<argument><expr><name><name>before</name><operator>.</operator><name>functions</name></name></expr></argument>, <argument><expr><name><name>after</name><operator>.</operator><name>functions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>before</name><operator>.</operator><name>params</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>after</name><operator>.</operator><name>params</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>tables</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>views</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>types</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>udfs</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>udas</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

            <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>KeyspaceDiff</name><argument_list>(<argument><expr><name>before</name></expr></argument>, <argument><expr><name>after</name></expr></argument>, <argument><expr><name>tables</name></expr></argument>, <argument><expr><name>views</name></expr></argument>, <argument><expr><name>types</name></expr></argument>, <argument><expr><name>udfs</name></expr></argument>, <argument><expr><name>udas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
