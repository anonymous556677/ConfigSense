<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/utils/logging/LoggingSupport.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>logging</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Common abstraction of functionality which can be implemented for different logging backend implementations (slf4j bindings).
 * Concrete implementations are dynamically loaded and instantiated by {@link LoggingSupportFactory#getLoggingSupport()}.
 */</comment>
<interface><specifier>public</specifier> interface <name>LoggingSupport</name>
<block>{
    <comment type="block" format="javadoc">/**
     * Hook used to execute logging implementation specific customization at Cassandra startup time.
     */</comment>
    <function><type><specifier>default</specifier> <name>void</name></type> <name>onStartup</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>

    <comment type="block" format="javadoc">/**
     * Hook used to execute logging implementation specific customization at Cassandra shutdown time.
     */</comment>
    <function><type><specifier>default</specifier> <name>void</name></type> <name>onShutdown</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>

    <comment type="block" format="javadoc">/**
     * Changes the given logger to the given log level.
     *
     * @param classQualifier the class qualifier or logger name
     * @param rawLevel the string representation of a log level
     * @throws Exception an exception which may occur while changing the given logger to the given log level.
     */</comment>
    <function_decl><type><name>void</name></type> <name>setLoggingLevel</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>classQualifier</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>rawLevel</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @return a map of logger names and their associated log level as string representations.
     */</comment>
    <function_decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getLoggingLevels</name><parameter_list>()</parameter_list>;</function_decl>
}</block></interface>
</unit>
