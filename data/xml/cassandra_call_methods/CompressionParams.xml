<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/schema/CompressionParams.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>InvocationTargetException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Method</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ThreadLocalRandom</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Objects</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableMap</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang3</name><operator>.</operator><name>builder</name><operator>.</operator><name>HashCodeBuilder</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>ParameterizedClass</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>TypeSizes</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>ConfigurationException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>IVersionedSerializer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>compress</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>DataInputPlus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>DataOutputPlus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>MessagingService</name></name>;</import>

<import>import static <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name><operator>.</operator><name>format</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"deprecation"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>final</specifier> class <name>CompressionParams</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>CompressionParams</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>hasLoggedSsTableCompressionWarning</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>hasLoggedChunkLengthWarning</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>hasLoggedCrcCheckChanceWarning</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_CHUNK_LENGTH</name> <init>= <expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>DEFAULT_MIN_COMPRESS_RATIO</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>        <comment type="line">// Since pre-4.0 versions do not understand the</comment>
                                                                        <comment type="line">// new compression parameter we can't use a</comment>
                                                                        <comment type="line">// different default value.</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>IVersionedSerializer</name><argument_list type="generic">&lt;<argument><name>CompressionParams</name></argument>&gt;</argument_list></name></type> <name>serializer</name> <init>= <expr><operator>new</operator> <call><name>Serializer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CLASS</name> <init>= <expr><literal type="string">"class"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CHUNK_LENGTH_IN_KB</name> <init>= <expr><literal type="string">"chunk_length_in_kb"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ENABLED</name> <init>= <expr><literal type="string">"enabled"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>MIN_COMPRESS_RATIO</name> <init>= <expr><literal type="string">"min_compress_ratio"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>CompressionParams</name></type> <name>DEFAULT</name> <init>= <expr><operator>new</operator> <call><name>CompressionParams</name><argument_list>(<argument><expr><call><name><name>LZ4Compressor</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>Collections</name><operator>.</operator></name>&lt;<name>String</name></expr></argument>, <argument><expr><name>String</name><operator>&gt;</operator><call><name>emptyMap</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                                                          <argument><expr><name>DEFAULT_CHUNK_LENGTH</name></expr></argument>,
                                                                          <argument><expr><call><name>calcMaxCompressedLength</name><argument_list>(<argument><expr><name>DEFAULT_CHUNK_LENGTH</name></expr></argument>, <argument><expr><name>DEFAULT_MIN_COMPRESS_RATIO</name></expr></argument>)</argument_list></call></expr></argument>,
                                                                          <argument><expr><name>DEFAULT_MIN_COMPRESS_RATIO</name></expr></argument>,
                                                                          <argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>CompressionParams</name></type> <name>NOOP</name> <init>= <expr><operator>new</operator> <call><name>CompressionParams</name><argument_list>(<argument><expr><call><name><name>NoopCompressor</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                                                       <comment type="line">// 4 KiB is often the underlying disk block size</comment>
                                                                       <argument><expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">4</literal></expr></argument>,
                                                                       <argument><expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>,
                                                                       <argument><expr><name>DEFAULT_MIN_COMPRESS_RATIO</name></expr></argument>,
                                                                       <argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CRC_CHECK_CHANCE_WARNING</name> <init>= <expr><literal type="string">"The option crc_check_chance was deprecated as a compression option. "</literal> <operator>+</operator>
                                                           <literal type="string">"You should specify it as a top-level table option instead"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Deprecated</name></annotation> <type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SSTABLE_COMPRESSION</name> <init>= <expr><literal type="string">"sstable_compression"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>Deprecated</name></annotation> <type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CHUNK_LENGTH_KB</name> <init>= <expr><literal type="string">"chunk_length_kb"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>Deprecated</name></annotation> <type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CRC_CHECK_CHANCE</name> <init>= <expr><literal type="string">"crc_check_chance"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ICompressor</name></type> <name>sstableCompressor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>chunkLength</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>maxCompressedLength</name></decl>;</decl_stmt>  <comment type="line">// In content we store max length to avoid rounding errors causing compress/decompress mismatch.</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>double</name></type> <name>minCompressRatio</name></decl>;</decl_stmt>  <comment type="line">// In configuration we store min ratio, the input parameter.</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ImmutableMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>otherOptions</name></decl>;</decl_stmt> <comment type="line">// Unrecognized options, can be used by the compressor</comment>

    <comment type="line">// TODO: deprecated, should now be carefully removed. Doesn't affect schema code as it isn't included in equals() and hashCode()</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>double</name></type> <name>crcCheckChance</name> <init>= <expr><literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>CompressionParams</name></type> <name>fromMap</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>opts</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name> <init>= <expr><call><name>copyOptions</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>sstableCompressionClass</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>opts</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isEnabled</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>containsSstableCompressionClass</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"Missing sub-option '%s' for the 'compression' option."</literal></expr></argument>, <argument><expr><name>CLASS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>removeEnabled</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>sstableCompressionClass</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>options</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"If the '%s' option is set to false no other options must be specified"</literal></expr></argument>, <argument><expr><name>ENABLED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>sstableCompressionClass</name> <operator>=</operator> <call><name>removeSstableCompressionClass</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>chunkLength</name> <init>= <expr><call><name>removeChunkLength</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>minCompressRatio</name> <init>= <expr><call><name>removeMinCompressRatio</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>CompressionParams</name></type> <name>cp</name> <init>= <expr><operator>new</operator> <call><name>CompressionParams</name><argument_list>(<argument><expr><name>sstableCompressionClass</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>chunkLength</name></expr></argument>, <argument><expr><name>minCompressRatio</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cp</name><operator>.</operator><name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>cp</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>ICompressor</name></extends></argument>&gt;</argument_list></name></type> <name>klass</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>sstableCompressor</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>CompressionParams</name></type> <name>noCompression</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>CompressionParams</name><argument_list>(<argument><expr><operator>(</operator><name>ICompressor</name><operator>)</operator> <literal type="null">null</literal></expr></argument>, <argument><expr><name>DEFAULT_CHUNK_LENGTH</name></expr></argument>, <argument><expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// The shorthand methods below are only used for tests. They are a little inconsistent in their choice of</comment>
    <comment type="line">// parameters -- this is done on purpose to test out various compression parameter combinations.</comment>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>CompressionParams</name></type> <name>snappy</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>snappy</name><argument_list>(<argument><expr><name>DEFAULT_CHUNK_LENGTH</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>CompressionParams</name></type> <name>snappy</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>chunkLength</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>snappy</name><argument_list>(<argument><expr><name>chunkLength</name></expr></argument>, <argument><expr><literal type="number">1.1</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>CompressionParams</name></type> <name>snappy</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>chunkLength</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>minCompressRatio</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>CompressionParams</name><argument_list>(<argument><expr><name><name>SnappyCompressor</name><operator>.</operator><name>instance</name></name></expr></argument>, <argument><expr><name>chunkLength</name></expr></argument>, <argument><expr><call><name>calcMaxCompressedLength</name><argument_list>(<argument><expr><name>chunkLength</name></expr></argument>, <argument><expr><name>minCompressRatio</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>minCompressRatio</name></expr></argument>, <argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>CompressionParams</name></type> <name>deflate</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>deflate</name><argument_list>(<argument><expr><name>DEFAULT_CHUNK_LENGTH</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>CompressionParams</name></type> <name>deflate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>chunkLength</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>CompressionParams</name><argument_list>(<argument><expr><name><name>DeflateCompressor</name><operator>.</operator><name>instance</name></name></expr></argument>, <argument><expr><name>chunkLength</name></expr></argument>, <argument><expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>CompressionParams</name></type> <name>lz4</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>lz4</name><argument_list>(<argument><expr><name>DEFAULT_CHUNK_LENGTH</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>CompressionParams</name></type> <name>lz4</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>chunkLength</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>lz4</name><argument_list>(<argument><expr><name>chunkLength</name></expr></argument>, <argument><expr><name>chunkLength</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>CompressionParams</name></type> <name>lz4</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>chunkLength</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxCompressedLength</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>CompressionParams</name><argument_list>(<argument><expr><call><name><name>LZ4Compressor</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>chunkLength</name></expr></argument>, <argument><expr><name>maxCompressedLength</name></expr></argument>, <argument><expr><call><name>calcMinCompressRatio</name><argument_list>(<argument><expr><name>chunkLength</name></expr></argument>, <argument><expr><name>maxCompressedLength</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>CompressionParams</name></type> <name>zstd</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>zstd</name><argument_list>(<argument><expr><name>DEFAULT_CHUNK_LENGTH</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>CompressionParams</name></type> <name>zstd</name><parameter_list>(<parameter><decl><type><name>Integer</name></type> <name>chunkLength</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ZstdCompressor</name></type> <name>compressor</name> <init>= <expr><call><name><name>ZstdCompressor</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>new</operator> <call><name>CompressionParams</name><argument_list>(<argument><expr><name>compressor</name></expr></argument>, <argument><expr><name>chunkLength</name></expr></argument>, <argument><expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>, <argument><expr><name>DEFAULT_MIN_COMPRESS_RATIO</name></expr></argument>, <argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>CompressionParams</name></type> <name>noop</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>NoopCompressor</name></type> <name>compressor</name> <init>= <expr><call><name><name>NoopCompressor</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>new</operator> <call><name>CompressionParams</name><argument_list>(<argument><expr><name>compressor</name></expr></argument>, <argument><expr><name>DEFAULT_CHUNK_LENGTH</name></expr></argument>, <argument><expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>, <argument><expr><name>DEFAULT_MIN_COMPRESS_RATIO</name></expr></argument>, <argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <constructor><specifier>public</specifier> <name>CompressionParams</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sstableCompressorClass</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>otherOptions</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chunkLength</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>minCompressRatio</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><call><name>createCompressor</name><argument_list>(<argument><expr><call><name>parseCompressorClass</name><argument_list>(<argument><expr><name>sstableCompressorClass</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>otherOptions</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>chunkLength</name></expr></argument>, <argument><expr><call><name>calcMaxCompressedLength</name><argument_list>(<argument><expr><name>chunkLength</name></expr></argument>, <argument><expr><name>minCompressRatio</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>minCompressRatio</name></expr></argument>, <argument><expr><name>otherOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>static</specifier> <name>int</name></type> <name>calcMaxCompressedLength</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>chunkLength</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>minCompressRatio</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>ceil</name></name><argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>chunkLength</name> <operator>/</operator> <name>minCompressRatio</name></expr></argument>, <argument><expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <constructor><specifier>public</specifier> <name>CompressionParams</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sstableCompressorClass</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chunkLength</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxCompressedLength</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>otherOptions</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><call><name>createCompressor</name><argument_list>(<argument><expr><call><name>parseCompressorClass</name><argument_list>(<argument><expr><name>sstableCompressorClass</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>otherOptions</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>chunkLength</name></expr></argument>, <argument><expr><name>maxCompressedLength</name></expr></argument>, <argument><expr><call><name>calcMinCompressRatio</name><argument_list>(<argument><expr><name>chunkLength</name></expr></argument>, <argument><expr><name>maxCompressedLength</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>otherOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>static</specifier> <name>double</name></type> <name>calcMinCompressRatio</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>chunkLength</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxCompressedLength</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>maxCompressedLength</name> <operator>==</operator> <name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><name>chunkLength</name> <operator>*</operator> <literal type="number">1.0</literal> <operator>/</operator> <name>maxCompressedLength</name></expr>;</return>
    </block_content>}</block></function>

    <constructor><specifier>private</specifier> <name>CompressionParams</name><parameter_list>(<parameter><decl><type><name>ICompressor</name></type> <name>sstableCompressor</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chunkLength</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxCompressedLength</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>minCompressRatio</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>otherOptions</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sstableCompressor</name></name> <operator>=</operator> <name>sstableCompressor</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>chunkLength</name></name> <operator>=</operator> <name>chunkLength</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>otherOptions</name></name> <operator>=</operator> <call><name><name>ImmutableMap</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><name>otherOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>minCompressRatio</name></name> <operator>=</operator> <name>minCompressRatio</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>maxCompressedLength</name></name> <operator>=</operator> <name>maxCompressedLength</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>CompressionParams</name></type> <name>copy</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>CompressionParams</name><argument_list>(<argument><expr><name>sstableCompressor</name></expr></argument>, <argument><expr><name>chunkLength</name></expr></argument>, <argument><expr><name>maxCompressedLength</name></expr></argument>, <argument><expr><name>minCompressRatio</name></expr></argument>, <argument><expr><name>otherOptions</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Checks if compression is enabled.
     * @return {@code true} if compression is enabled, {@code false} otherwise.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isEnabled</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>sstableCompressor</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the SSTable compressor.
     * @return the SSTable compressor or {@code null} if compression is disabled.
     */</comment>
    <function><type><specifier>public</specifier> <name>ICompressor</name></type> <name>getSstableCompressor</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>sstableCompressor</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>ImmutableMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getOtherOptions</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>otherOptions</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>chunkLength</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>chunkLength</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>maxCompressedLength</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>maxCompressedLength</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>parseCompressorClass</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>className</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>className</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>className</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>className</name> <operator>=</operator> <ternary><condition><expr><call><name><name>className</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>className</name></expr> </then><else>: <expr><literal type="string">"org.apache.cassandra.io.compress."</literal> <operator>+</operator> <name>className</name></expr></else></ternary></expr>;</expr_stmt>
        <try>try
        <block>{<block_content>
            <return>return <expr><call><name><name>Class</name><operator>.</operator><name>forName</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Could not create Compression for type "</literal> <operator>+</operator> <name>className</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>ICompressor</name></type> <name>createCompressor</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>compressorClass</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>compressionOptions</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>compressorClass</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>compressionOptions</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Unknown compression options ("</literal> <operator>+</operator> <call><name><name>compressionOptions</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">") since no compression class found"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>compressionOptions</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>CRC_CHECK_CHANCE</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasLoggedCrcCheckChanceWarning</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><name>CRC_CHECK_CHANCE_WARNING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>hasLoggedCrcCheckChanceWarning</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>compressionOptions</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>CRC_CHECK_CHANCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <try>try
        <block>{<block_content>
            <decl_stmt><decl><type><name>Method</name></type> <name>method</name> <init>= <expr><call><name><name>compressorClass</name><operator>.</operator><name>getMethod</name></name><argument_list>(<argument><expr><literal type="string">"create"</literal></expr></argument>, <argument><expr><name><name>Map</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ICompressor</name></type> <name>compressor</name> <init>= <expr><operator>(</operator><name>ICompressor</name><operator>)</operator><call><name><name>method</name><operator>.</operator><name>invoke</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>compressionOptions</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// Check for unknown options</comment>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>provided</name> <range>: <expr><call><name><name>compressionOptions</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>compressor</name><operator>.</operator><name>supportedOptions</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name>provided</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Unknown compression options "</literal> <operator>+</operator> <name>provided</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt></block_content></block></for>
            <return>return <expr><name>compressor</name></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchMethodException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"create method not found"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>SecurityException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Access forbiden"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalAccessException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Cannot access method create in "</literal> <operator>+</operator> <call><name><name>compressorClass</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>InvocationTargetException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>e</name><operator>.</operator><name>getTargetException</name></name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>ConfigurationException</name></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>(</operator><name>ConfigurationException</name><operator>)</operator> <call><name><name>e</name><operator>.</operator><name>getTargetException</name></name><argument_list>()</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>Throwable</name></type> <name>cause</name> <init>= <expr><ternary><condition><expr><call><name><name>e</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>
                            ?</condition><then> <expr><name>e</name></expr>
                            </then><else>: <expr><call><name><name>e</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"%s.create() threw an error: %s %s"</literal></expr></argument>,
                                                    <argument><expr><call><name><name>compressorClass</name><operator>.</operator><name>getSimpleName</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                    <argument><expr><call><name><name>cause</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                                                    <argument><expr><call><name><name>cause</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                             <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>ExceptionInInitializerError</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Cannot initialize class "</literal> <operator>+</operator> <call><name><name>compressorClass</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ICompressor</name></type> <name>createCompressor</name><parameter_list>(<parameter><decl><type><name>ParameterizedClass</name></type> <name>compression</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <return>return <expr><call><name>createCompressor</name><argument_list>(<argument><expr><call><name>parseCompressorClass</name><argument_list>(<argument><expr><name><name>compression</name><operator>.</operator><name>class_name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>copyOptions</name><argument_list>(<argument><expr><name><name>compression</name><operator>.</operator><name>parameters</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>copyOptions</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>CharSequence</name></extends></argument>, <argument><name>?</name> <extends>extends <name>CharSequence</name></extends></argument>&gt;</argument_list></name></type> <name>co</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>co</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>co</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>compressionOptions</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>CharSequence</name></extends></argument>, <argument><name>?</name> <extends>extends <name>CharSequence</name></extends></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>co</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>compressionOptions</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <return>return <expr><name>compressionOptions</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Parse the chunk length (in KB) and returns it as bytes.
     *
     * @param chLengthKB the length of the chunk to parse
     * @return the chunk length in bytes
     * @throws ConfigurationException if the chunk size is too large
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Integer</name></type> <name>parseChunkLength</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>chLengthKB</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>chLengthKB</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>

        <try>try
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>parsed</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>chLengthKB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>parsed</name> <operator>&gt;</operator> <name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name> <operator>/</operator> <literal type="number">1024</literal></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"Value of %s is too large (%s)"</literal></expr></argument>, <argument><expr><name>CHUNK_LENGTH_IN_KB</name></expr></argument>,<argument><expr><name>parsed</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            <return>return <expr><literal type="number">1024</literal> <operator>*</operator> <name>parsed</name></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Invalid value for "</literal> <operator>+</operator> <name>CHUNK_LENGTH_IN_KB</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Removes the chunk length option from the specified set of option.
     *
     * @param options the options
     * @return the chunk length value
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>removeChunkLength</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>options</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>CHUNK_LENGTH_IN_KB</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>options</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>CHUNK_LENGTH_KB</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"The '%s' option must not be used if the chunk length is already specified by the '%s' option"</literal></expr></argument>,
                                                        <argument><expr><name>CHUNK_LENGTH_KB</name></expr></argument>,
                                                        <argument><expr><name>CHUNK_LENGTH_IN_KB</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>

            <return>return <expr><call><name>parseChunkLength</name><argument_list>(<argument><expr><call><name><name>options</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>CHUNK_LENGTH_IN_KB</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>options</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>CHUNK_LENGTH_KB</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasLoggedChunkLengthWarning</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>hasLoggedChunkLengthWarning</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"The {} option has been deprecated. You should use {} instead"</literal></expr></argument>,
                                   <argument><expr><name>CHUNK_LENGTH_KB</name></expr></argument>,
                                   <argument><expr><name>CHUNK_LENGTH_IN_KB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <return>return <expr><call><name>parseChunkLength</name><argument_list>(<argument><expr><call><name><name>options</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>CHUNK_LENGTH_KB</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><name>DEFAULT_CHUNK_LENGTH</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Removes the min compress ratio option from the specified set of option.
     *
     * @param options the options
     * @return the min compress ratio, used to calculate max chunk size to write compressed
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>double</name></type> <name>removeMinCompressRatio</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>ratio</name> <init>= <expr><call><name><name>options</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>MIN_COMPRESS_RATIO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ratio</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><call><name><name>Double</name><operator>.</operator><name>parseDouble</name></name><argument_list>(<argument><expr><name>ratio</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>DEFAULT_MIN_COMPRESS_RATIO</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns {@code true} if the specified options contains the name of the compression class to be used,
     * {@code false} otherwise.
     *
     * @param options the options
     * @return {@code true} if the specified options contains the name of the compression class to be used,
     * {@code false} otherwise.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>containsSstableCompressionClass</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>options</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>CLASS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>options</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>SSTABLE_COMPRESSION</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Removes the option specifying the name of the compression class
     *
     * @param options the options
     * @return the name of the compression class
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>removeSstableCompressionClass</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>options</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>CLASS</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>options</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>SSTABLE_COMPRESSION</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"The '%s' option must not be used if the compression algorithm is already specified by the '%s' option"</literal></expr></argument>,
                                                        <argument><expr><name>SSTABLE_COMPRESSION</name></expr></argument>,
                                                        <argument><expr><name>CLASS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>String</name></type> <name>clazz</name> <init>= <expr><call><name><name>options</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>CLASS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>clazz</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"The '%s' option must not be empty. To disable compression use 'enabled' : false"</literal></expr></argument>, <argument><expr><name>CLASS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <return>return <expr><name>clazz</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>options</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>SSTABLE_COMPRESSION</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>hasLoggedSsTableCompressionWarning</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>hasLoggedSsTableCompressionWarning</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"The {} option has been deprecated. You should use {} instead"</literal></expr></argument>,
                               <argument><expr><name>SSTABLE_COMPRESSION</name></expr></argument>,
                               <argument><expr><name>CLASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><call><name><name>options</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>SSTABLE_COMPRESSION</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns {@code true} if the options contains the {@code enabled} option and that its value is
     * {@code true}, otherwise returns {@code false}.
     *
     * @param options the options
     * @return {@code true} if the options contains the {@code enabled} option and that its value is
     * {@code true}, otherwise returns {@code false}.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isEnabled</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>enabled</name> <init>= <expr><call><name><name>options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>ENABLED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>enabled</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Removes the {@code enabled} option from the specified options.
     *
     * @param options the options
     * @return the value of the {@code enabled} option
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>removeEnabled</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>enabled</name> <init>= <expr><call><name><name>options</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>ENABLED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>enabled</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// chunkLength must be a power of 2 because we assume so when</comment>
    <comment type="line">// computing the chunk number from an uncompressed file offset (see</comment>
    <comment type="line">// CompressedRandomAccessReader.decompresseChunk())</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>validate</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <comment type="line">// if chunk length was not set (chunkLength == null), this is fine, default will be used</comment>
        <if_stmt><if>if <condition>(<expr><name>chunkLength</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Invalid negative or null "</literal> <operator>+</operator> <name>CHUNK_LENGTH_IN_KB</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>chunkLength</name> <operator>&amp;</operator> <operator>(</operator><name>chunkLength</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><name>CHUNK_LENGTH_IN_KB</name> <operator>+</operator> <literal type="string">" must be a power of 2"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>maxCompressedLength</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Invalid negative "</literal> <operator>+</operator> <name>MIN_COMPRESS_RATIO</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>maxCompressedLength</name> <operator>&gt;</operator> <name>chunkLength</name> <operator>&amp;&amp;</operator> <name>maxCompressedLength</name> <operator>&lt;</operator> <name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><name>MIN_COMPRESS_RATIO</name> <operator>+</operator> <literal type="string">" can either be 0 or greater than or equal to 1"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>asMap</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isEnabled</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>singletonMap</name></name><argument_list>(<argument><expr><name>ENABLED</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>otherOptions</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>CLASS</name></expr></argument>, <argument><expr><call><name><name>sstableCompressor</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>CHUNK_LENGTH_IN_KB</name></expr></argument>, <argument><expr><call><name>chunkLengthInKB</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>minCompressRatio</name> <operator>!=</operator> <name>DEFAULT_MIN_COMPRESS_RATIO</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>MIN_COMPRESS_RATIO</name></expr></argument>, <argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>minCompressRatio</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return>return <expr><name>options</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>chunkLengthInKB</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>chunkLength</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCrcCheckChance</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>crcCheckChance</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>crcCheckChance</name></name> <operator>=</operator> <name>crcCheckChance</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>double</name></type> <name>getCrcCheckChance</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>crcCheckChance</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>shouldCheckCrc</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>double</name></type> <name>checkChance</name> <init>= <expr><call><name>getCrcCheckChance</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>checkChance</name> <operator>&gt;=</operator> <literal type="number">1d</literal> <operator>||</operator>
               <operator>(</operator><name>checkChance</name> <operator>&gt;</operator> <literal type="number">0d</literal> <operator>&amp;&amp;</operator> <name>checkChance</name> <operator>&gt;</operator> <call><name><name>ThreadLocalRandom</name><operator>.</operator><name>current</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextDouble</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>obj</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>this</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>obj</name> <operator>instanceof</operator> <name>CompressionParams</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>CompressionParams</name></type> <name>cp</name> <init>= <expr><operator>(</operator><name>CompressionParams</name><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name><name>Objects</name><operator>.</operator><name>equal</name></name><argument_list>(<argument><expr><name>sstableCompressor</name></expr></argument>, <argument><expr><name><name>cp</name><operator>.</operator><name>sstableCompressor</name></name></expr></argument>)</argument_list></call>
            <operator>&amp;&amp;</operator> <name>chunkLength</name> <operator>==</operator> <name><name>cp</name><operator>.</operator><name>chunkLength</name></name>
            <operator>&amp;&amp;</operator> <call><name><name>otherOptions</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>cp</name><operator>.</operator><name>otherOptions</name></name></expr></argument>)</argument_list></call>
            <operator>&amp;&amp;</operator> <name>minCompressRatio</name> <operator>==</operator> <name><name>cp</name><operator>.</operator><name>minCompressRatio</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>HashCodeBuilder</name><argument_list>(<argument><expr><literal type="number">29</literal></expr></argument>, <argument><expr><literal type="number">1597</literal></expr></argument>)</argument_list></call>
            <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>sstableCompressor</name></expr></argument>)</argument_list></call>
            <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>chunkLength</name></expr></argument>)</argument_list></call>
            <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>otherOptions</name></expr></argument>)</argument_list></call>
            <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>minCompressRatio</name></expr></argument>)</argument_list></call>
            <operator>.</operator><call><name>toHashCode</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>static</specifier> class <name>Serializer</name> <super_list><implements>implements <super><name><name>IVersionedSerializer</name><argument_list type="generic">&lt;<argument><name>CompressionParams</name></argument>&gt;</argument_list></name></super></implements></super_list>
    <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<parameter><decl><type><name>CompressionParams</name></type> <name>parameters</name></decl></parameter>, <parameter><decl><type><name>DataOutputPlus</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeUTF</name></name><argument_list>(<argument><expr><call><name><name>parameters</name><operator>.</operator><name>sstableCompressor</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>parameters</name><operator>.</operator><name>otherOptions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>parameters</name><operator>.</operator><name>otherOptions</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeUTF</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeUTF</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>parameters</name><operator>.</operator><name>chunkLength</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;=</operator> <name><name>MessagingService</name><operator>.</operator><name>VERSION_40</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name><name>parameters</name><operator>.</operator><name>maxCompressedLength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else
                if <condition>(<expr><name><name>parameters</name><operator>.</operator><name>maxCompressedLength</name></name> <operator>!=</operator> <name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr>)</condition><block type="pseudo"><block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"Cannot stream SSTables with uncompressed chunks to pre-4.0 nodes."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>CompressionParams</name></type> <name>deserialize</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>compressorName</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readUTF</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>optionCount</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>optionCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>key</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readUTF</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readUTF</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <decl_stmt><decl><type><name>int</name></type> <name>chunkLength</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>minCompressRatio</name> <init>= <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>   <comment type="line">// Earlier Cassandra cannot use uncompressed chunks.</comment>
            <if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;=</operator> <name><name>MessagingService</name><operator>.</operator><name>VERSION_40</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>minCompressRatio</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>CompressionParams</name></type> <name>parameters</name></decl>;</decl_stmt>
            <try>try
            <block>{<block_content>
                <expr_stmt><expr><name>parameters</name> <operator>=</operator> <operator>new</operator> <call><name>CompressionParams</name><argument_list>(<argument><expr><name>compressorName</name></expr></argument>, <argument><expr><name>chunkLength</name></expr></argument>, <argument><expr><name>minCompressRatio</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>ConfigurationException</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Cannot create CompressionParams for parameters"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
            <return>return <expr><name>parameters</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>long</name></type> <name>serializedSize</name><parameter_list>(<parameter><decl><type><name>CompressionParams</name></type> <name>parameters</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>size</name> <init>= <expr><call><name><name>TypeSizes</name><operator>.</operator><name>sizeof</name></name><argument_list>(<argument><expr><call><name><name>parameters</name><operator>.</operator><name>sstableCompressor</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>TypeSizes</name><operator>.</operator><name>sizeof</name></name><argument_list>(<argument><expr><call><name><name>parameters</name><operator>.</operator><name>otherOptions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>parameters</name><operator>.</operator><name>otherOptions</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>TypeSizes</name><operator>.</operator><name>sizeof</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>TypeSizes</name><operator>.</operator><name>sizeof</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>TypeSizes</name><operator>.</operator><name>sizeof</name></name><argument_list>(<argument><expr><call><name><name>parameters</name><operator>.</operator><name>chunkLength</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;=</operator> <name><name>MessagingService</name><operator>.</operator><name>VERSION_40</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>TypeSizes</name><operator>.</operator><name>sizeof</name></name><argument_list>(<argument><expr><call><name><name>parameters</name><operator>.</operator><name>maxCompressedLength</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <return>return <expr><name>size</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
