<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/db/virtual/VirtualSchemaKeyspace.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>virtual</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableList</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>BytesType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>Int32Type</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>UTF8Type</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>LocalPartitioner</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>ColumnMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>KeyspaceMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>TableMetadata</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>SchemaConstants</name><operator>.</operator><name>VIRTUAL_SCHEMA</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>TableMetadata</name><operator>.</operator><name>builder</name></name>;</import>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>VirtualSchemaKeyspace</name> <super_list><extends>extends <super><name>VirtualKeyspace</name></super></extends></super_list>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>VirtualSchemaKeyspace</name></type> <name>instance</name> <init>= <expr><operator>new</operator> <call><name>VirtualSchemaKeyspace</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>VirtualSchemaKeyspace</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>VIRTUAL_SCHEMA</name></expr></argument>, <argument><expr><call><name><name>ImmutableList</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>VirtualKeyspaces</name><argument_list>(<argument><expr><name>VIRTUAL_SCHEMA</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>VirtualTables</name><argument_list>(<argument><expr><name>VIRTUAL_SCHEMA</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>VirtualColumns</name><argument_list>(<argument><expr><name>VIRTUAL_SCHEMA</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <class><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>VirtualKeyspaces</name> <super_list><extends>extends <super><name>AbstractVirtualTable</name></super></extends></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KEYSPACE_NAME</name> <init>= <expr><literal type="string">"keyspace_name"</literal></expr></init></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>VirtualKeyspaces</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><call><name>builder</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><literal type="string">"keyspaces"</literal></expr></argument>)</argument_list></call>
                 <operator>.</operator><call><name>comment</name><argument_list>(<argument><expr><literal type="string">"virtual keyspace definitions"</literal></expr></argument>)</argument_list></call>
                 <operator>.</operator><call><name>kind</name><argument_list>(<argument><expr><name><name>TableMetadata</name><operator>.</operator><name>Kind</name><operator>.</operator><name>VIRTUAL</name></name></expr></argument>)</argument_list></call>
                 <operator>.</operator><call><name>partitioner</name><argument_list>(<argument><expr><operator>new</operator> <call><name>LocalPartitioner</name><argument_list>(<argument><expr><name><name>UTF8Type</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                 <operator>.</operator><call><name>addPartitionKeyColumn</name><argument_list>(<argument><expr><name>KEYSPACE_NAME</name></expr></argument>, <argument><expr><name><name>UTF8Type</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call>
                 <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>DataSet</name></type> <name>data</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>SimpleDataSet</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>SimpleDataSet</name><argument_list>(<argument><expr><call><name>metadata</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>KeyspaceMetadata</name></type> <name>keyspace</name> <range>: <expr><call><name><name>VirtualKeyspaceRegistry</name><operator>.</operator><name>instance</name><operator>.</operator><name>virtualKeyspacesMetadata</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>row</name></name><argument_list>(<argument><expr><name><name>keyspace</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>VirtualTables</name> <super_list><extends>extends <super><name>AbstractVirtualTable</name></super></extends></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KEYSPACE_NAME</name> <init>= <expr><literal type="string">"keyspace_name"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TABLE_NAME</name> <init>= <expr><literal type="string">"table_name"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COMMENT</name> <init>= <expr><literal type="string">"comment"</literal></expr></init></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>VirtualTables</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><call><name>builder</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><literal type="string">"tables"</literal></expr></argument>)</argument_list></call>
                 <operator>.</operator><call><name>comment</name><argument_list>(<argument><expr><literal type="string">"virtual table definitions"</literal></expr></argument>)</argument_list></call>
                 <operator>.</operator><call><name>kind</name><argument_list>(<argument><expr><name><name>TableMetadata</name><operator>.</operator><name>Kind</name><operator>.</operator><name>VIRTUAL</name></name></expr></argument>)</argument_list></call>
                 <operator>.</operator><call><name>partitioner</name><argument_list>(<argument><expr><operator>new</operator> <call><name>LocalPartitioner</name><argument_list>(<argument><expr><name><name>UTF8Type</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                 <operator>.</operator><call><name>addPartitionKeyColumn</name><argument_list>(<argument><expr><name>KEYSPACE_NAME</name></expr></argument>, <argument><expr><name><name>UTF8Type</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call>
                 <operator>.</operator><call><name>addClusteringColumn</name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><name><name>UTF8Type</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call>
                 <operator>.</operator><call><name>addRegularColumn</name><argument_list>(<argument><expr><name>COMMENT</name></expr></argument>, <argument><expr><name><name>UTF8Type</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call>
                 <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>DataSet</name></type> <name>data</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>SimpleDataSet</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>SimpleDataSet</name><argument_list>(<argument><expr><call><name>metadata</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name>KeyspaceMetadata</name></type> <name>keyspace</name> <range>: <expr><call><name><name>VirtualKeyspaceRegistry</name><operator>.</operator><name>instance</name><operator>.</operator><name>virtualKeyspacesMetadata</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <for>for <control>(<init><decl><type><name>TableMetadata</name></type> <name>table</name> <range>: <expr><name><name>keyspace</name><operator>.</operator><name>tables</name></name></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>row</name></name><argument_list>(<argument><expr><name><name>table</name><operator>.</operator><name>keyspace</name></name></expr></argument>, <argument><expr><name><name>table</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>column</name><argument_list>(<argument><expr><name>COMMENT</name></expr></argument>, <argument><expr><name><name>table</name><operator>.</operator><name>params</name><operator>.</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>

            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>VirtualColumns</name> <super_list><extends>extends <super><name>AbstractVirtualTable</name></super></extends></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KEYSPACE_NAME</name> <init>= <expr><literal type="string">"keyspace_name"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TABLE_NAME</name> <init>= <expr><literal type="string">"table_name"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COLUMN_NAME</name> <init>= <expr><literal type="string">"column_name"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CLUSTERING_ORDER</name> <init>= <expr><literal type="string">"clustering_order"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COLUMN_NAME_BYTES</name> <init>= <expr><literal type="string">"column_name_bytes"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KIND</name> <init>= <expr><literal type="string">"kind"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>POSITION</name> <init>= <expr><literal type="string">"position"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TYPE</name> <init>= <expr><literal type="string">"type"</literal></expr></init></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>VirtualColumns</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><call><name>builder</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><literal type="string">"columns"</literal></expr></argument>)</argument_list></call>
                 <operator>.</operator><call><name>comment</name><argument_list>(<argument><expr><literal type="string">"virtual column definitions"</literal></expr></argument>)</argument_list></call>
                 <operator>.</operator><call><name>kind</name><argument_list>(<argument><expr><name><name>TableMetadata</name><operator>.</operator><name>Kind</name><operator>.</operator><name>VIRTUAL</name></name></expr></argument>)</argument_list></call>
                 <operator>.</operator><call><name>partitioner</name><argument_list>(<argument><expr><operator>new</operator> <call><name>LocalPartitioner</name><argument_list>(<argument><expr><name><name>UTF8Type</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                 <operator>.</operator><call><name>addPartitionKeyColumn</name><argument_list>(<argument><expr><name>KEYSPACE_NAME</name></expr></argument>, <argument><expr><name><name>UTF8Type</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call>
                 <operator>.</operator><call><name>addClusteringColumn</name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><name><name>UTF8Type</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call>
                 <operator>.</operator><call><name>addClusteringColumn</name><argument_list>(<argument><expr><name>COLUMN_NAME</name></expr></argument>, <argument><expr><name><name>UTF8Type</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call>
                 <operator>.</operator><call><name>addRegularColumn</name><argument_list>(<argument><expr><name>CLUSTERING_ORDER</name></expr></argument>, <argument><expr><name><name>UTF8Type</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call>
                 <operator>.</operator><call><name>addRegularColumn</name><argument_list>(<argument><expr><name>COLUMN_NAME_BYTES</name></expr></argument>, <argument><expr><name><name>BytesType</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call>
                 <operator>.</operator><call><name>addRegularColumn</name><argument_list>(<argument><expr><name>KIND</name></expr></argument>, <argument><expr><name><name>UTF8Type</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call>
                 <operator>.</operator><call><name>addRegularColumn</name><argument_list>(<argument><expr><name>POSITION</name></expr></argument>, <argument><expr><name><name>Int32Type</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call>
                 <operator>.</operator><call><name>addRegularColumn</name><argument_list>(<argument><expr><name>TYPE</name></expr></argument>, <argument><expr><name><name>UTF8Type</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call>
                 <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>DataSet</name></type> <name>data</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>SimpleDataSet</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>SimpleDataSet</name><argument_list>(<argument><expr><call><name>metadata</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name>KeyspaceMetadata</name></type> <name>keyspace</name> <range>: <expr><call><name><name>VirtualKeyspaceRegistry</name><operator>.</operator><name>instance</name><operator>.</operator><name>virtualKeyspacesMetadata</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <for>for <control>(<init><decl><type><name>TableMetadata</name></type> <name>table</name> <range>: <expr><name><name>keyspace</name><operator>.</operator><name>tables</name></name></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <for>for <control>(<init><decl><type><name>ColumnMetadata</name></type> <name>column</name> <range>: <expr><call><name><name>table</name><operator>.</operator><name>columns</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>row</name></name><argument_list>(<argument><expr><name><name>column</name><operator>.</operator><name>ksName</name></name></expr></argument>, <argument><expr><name><name>column</name><operator>.</operator><name>cfName</name></name></expr></argument>, <argument><expr><call><name><name>column</name><operator>.</operator><name>name</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                              <operator>.</operator><call><name>column</name><argument_list>(<argument><expr><name>CLUSTERING_ORDER</name></expr></argument>, <argument><expr><call><name><name>column</name><operator>.</operator><name>clusteringOrder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                              <operator>.</operator><call><name>column</name><argument_list>(<argument><expr><name>COLUMN_NAME_BYTES</name></expr></argument>, <argument><expr><name><name>column</name><operator>.</operator><name>name</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call>
                              <operator>.</operator><call><name>column</name><argument_list>(<argument><expr><name>KIND</name></expr></argument>, <argument><expr><call><name><name>column</name><operator>.</operator><name>kind</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                              <operator>.</operator><call><name>column</name><argument_list>(<argument><expr><name>POSITION</name></expr></argument>, <argument><expr><call><name><name>column</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                              <operator>.</operator><call><name>column</name><argument_list>(<argument><expr><name>TYPE</name></expr></argument>, <argument><expr><call><name><name>column</name><operator>.</operator><name>type</name><operator>.</operator><name>asCQL3Type</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></for>
            </block_content>}</block></for>

            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
