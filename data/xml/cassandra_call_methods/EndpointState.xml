<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/gms/EndpointState.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>gms</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicReference</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Collectors</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>TypeSizes</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>IVersionedSerializer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>DataInputPlus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>DataOutputPlus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>CassandraVersion</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This abstraction represents both the HeartBeatState and the ApplicationState in an EndpointState
 * instance. Any state for a given endpoint can be retrieved from this instance.
 */</comment>


<class><specifier>public</specifier> class <name>EndpointState</name>
<block>{
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>EndpointState</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name><name>IVersionedSerializer</name><argument_list type="generic">&lt;<argument><name>EndpointState</name></argument>&gt;</argument_list></name></type> <name>serializer</name> <init>= <expr><operator>new</operator> <call><name>EndpointStateSerializer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>HeartBeatState</name></type> <name>hbState</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>AtomicReference</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ApplicationState</name></argument>, <argument><name>VersionedValue</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>applicationState</name></decl>;</decl_stmt>

    <comment type="block">/* fields below do not get serialized */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>long</name></type> <name>updateTimestamp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>isAlive</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>EndpointState</name><parameter_list>(<parameter><decl><type><name>HeartBeatState</name></type> <name>initialHbState</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>initialHbState</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>EnumMap</name><argument_list type="generic">&lt;<argument><name>ApplicationState</name></argument>, <argument><name>VersionedValue</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>EndpointState</name><parameter_list>(<parameter><decl><type><name>EndpointState</name></type> <name>other</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><operator>new</operator> <call><name>HeartBeatState</name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>hbState</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>EnumMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>applicationState</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><name>EndpointState</name><parameter_list>(<parameter><decl><type><name>HeartBeatState</name></type> <name>initialHbState</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ApplicationState</name></argument>, <argument><name>VersionedValue</name></argument>&gt;</argument_list></name></type> <name>states</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>hbState</name> <operator>=</operator> <name>initialHbState</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>applicationState</name> <operator>=</operator> <operator>new</operator> <call><name><name>AtomicReference</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ApplicationState</name></argument>, <argument><name>VersionedValue</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>EnumMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>states</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>updateTimestamp</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>isAlive</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><name>HeartBeatState</name></type> <name>getHeartBeatState</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>hbState</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>setHeartBeatState</name><parameter_list>(<parameter><decl><type><name>HeartBeatState</name></type> <name>newHbState</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>updateTimestamp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>hbState</name> <operator>=</operator> <name>newHbState</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>VersionedValue</name></type> <name>getApplicationState</name><parameter_list>(<parameter><decl><type><name>ApplicationState</name></type> <name>key</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>applicationState</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>containsApplicationState</name><parameter_list>(<parameter><decl><type><name>ApplicationState</name></type> <name>key</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>applicationState</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>containsKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>ApplicationState</name></argument>, <argument><name>VersionedValue</name></argument>&gt;</argument_list></name></name></argument>&gt;</argument_list></name></type> <name>states</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>applicationState</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addApplicationState</name><parameter_list>(<parameter><decl><type><name>ApplicationState</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>VersionedValue</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>addApplicationStates</name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>singletonMap</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addApplicationStates</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ApplicationState</name></argument>, <argument><name>VersionedValue</name></argument>&gt;</argument_list></name></type> <name>values</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>addApplicationStates</name><argument_list>(<argument><expr><call><name><name>values</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addApplicationStates</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>ApplicationState</name></argument>, <argument><name>VersionedValue</name></argument>&gt;</argument_list></name></name></argument>&gt;</argument_list></name></type> <name>values</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ApplicationState</name></argument>, <argument><name>VersionedValue</name></argument>&gt;</argument_list></name></type> <name>orig</name> <init>= <expr><call><name><name>applicationState</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ApplicationState</name></argument>, <argument><name>VersionedValue</name></argument>&gt;</argument_list></name></type> <name>copy</name> <init>= <expr><operator>new</operator> <call><name><name>EnumMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>orig</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>ApplicationState</name></argument>, <argument><name>VersionedValue</name></argument>&gt;</argument_list></name></name></type> <name>value</name> <range>: <expr><name>values</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>copy</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>value</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>value</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <if_stmt><if>if <condition>(<expr><call><name><name>applicationState</name><operator>.</operator><name>compareAndSet</name></name><argument_list>(<argument><expr><name>orig</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return;</return></block_content></block></if></if_stmt>
        </block_content>}</block></while>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>removeMajorVersion3LegacyApplicationStates</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <while>while <condition>(<expr><call><name>hasLegacyFields</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ApplicationState</name></argument>, <argument><name>VersionedValue</name></argument>&gt;</argument_list></name></type> <name>orig</name> <init>= <expr><call><name><name>applicationState</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ApplicationState</name></argument>, <argument><name>VersionedValue</name></argument>&gt;</argument_list></name></type> <name>updatedStates</name> <init>= <expr><call><name>filterMajorVersion3LegacyApplicationStates</name><argument_list>(<argument><expr><name>orig</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// avoid updating if no state is removed</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>orig</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>updatedStates</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call>
                <operator>||</operator> <call><name><name>applicationState</name><operator>.</operator><name>compareAndSet</name></name><argument_list>(<argument><expr><name>orig</name></expr></argument>, <argument><expr><name>updatedStates</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return;</return></block_content></block></if></if_stmt>
        </block_content>}</block></while>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>hasLegacyFields</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>ApplicationState</name></argument>&gt;</argument_list></name></type> <name>statesPresent</name> <init>= <expr><call><name><name>applicationState</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>keySet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>statesPresent</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><operator>(</operator><call><name><name>statesPresent</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>STATUS</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>statesPresent</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>STATUS_WITH_PORT</name></name></expr></argument>)</argument_list></call><operator>)</operator>
               <operator>||</operator> <operator>(</operator><call><name><name>statesPresent</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>INTERNAL_IP</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>statesPresent</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>INTERNAL_ADDRESS_AND_PORT</name></name></expr></argument>)</argument_list></call><operator>)</operator>
               <operator>||</operator> <operator>(</operator><call><name><name>statesPresent</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>RPC_ADDRESS</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>statesPresent</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>NATIVE_ADDRESS_AND_PORT</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>ApplicationState</name></argument>, <argument><name>VersionedValue</name></argument>&gt;</argument_list></name></type> <name>filterMajorVersion3LegacyApplicationStates</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ApplicationState</name></argument>, <argument><name>VersionedValue</name></argument>&gt;</argument_list></name></type> <name>states</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>states</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call><operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>entry</name></decl></parameter></parameter_list> -&gt; <block>{<block_content>
                <comment type="line">// Filter out pre-4.0 versions of data for more complete 4.0 versions</comment>
                <switch>switch <condition>(<expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>INTERNAL_IP</name></expr>:</case>
                        <return>return <expr><operator>!</operator><call><name><name>states</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>INTERNAL_ADDRESS_AND_PORT</name></name></expr></argument>)</argument_list></call></expr>;</return>
                    <case>case <expr><name>STATUS</name></expr>:</case>
                        <return>return <expr><operator>!</operator><call><name><name>states</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>STATUS_WITH_PORT</name></name></expr></argument>)</argument_list></call></expr>;</return>
                    <case>case <expr><name>RPC_ADDRESS</name></expr>:</case>
                        <return>return <expr><operator>!</operator><call><name><name>states</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>NATIVE_ADDRESS_AND_PORT</name></name></expr></argument>)</argument_list></call></expr>;</return>
                    <default>default:</default>
                        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                </block_content>}</block></switch>
            </block_content>}</block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toMap</name></name><argument_list>(<argument><expr><name><name>Map</name><operator>.</operator><name>Entry</name></name><operator>::</operator><name>getKey</name></expr></argument>, <argument><expr><name><name>Map</name><operator>.</operator><name>Entry</name></name><operator>::</operator><name>getValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block">/* getters and setters */</comment>
    <comment type="block" format="javadoc">/**
     * @return System.nanoTime() when state was updated last time.
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getUpdateTimestamp</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>updateTimestamp</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>updateTimestamp</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>updateTimestamp</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isAlive</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>isAlive</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>markAlive</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>isAlive</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>markDead</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>isAlive</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return true if {@link HeartBeatState#isEmpty()} is true and no STATUS application state exists
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isEmptyWithoutStatus</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ApplicationState</name></argument>, <argument><name>VersionedValue</name></argument>&gt;</argument_list></name></type> <name>state</name> <init>= <expr><call><name><name>applicationState</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>hbState</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name><name>state</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>STATUS_WITH_PORT</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>state</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>STATUS</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isRpcReady</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>VersionedValue</name></type> <name>rpcState</name> <init>= <expr><call><name>getApplicationState</name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>RPC_READY</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>rpcState</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><name><name>rpcState</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isNormalState</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getStatus</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>VersionedValue</name><operator>.</operator><name>STATUS_NORMAL</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getStatus</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>VersionedValue</name></type> <name>status</name> <init>= <expr><call><name>getApplicationState</name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>STATUS_WITH_PORT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>getApplicationState</name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>STATUS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><literal type="string">""</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>pieces</name> <init>= <expr><call><name><name>status</name><operator>.</operator><name>value</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><name><name>VersionedValue</name><operator>.</operator><name>DELIMITER_STR</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <assert>assert <expr><operator>(</operator><name><name>pieces</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</assert>
        <return>return <expr><name><name>pieces</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Nullable</name></annotation>
    <type><specifier>public</specifier> <name>UUID</name></type> <name>getSchemaVersion</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>VersionedValue</name></type> <name>applicationState</name> <init>= <expr><call><name>getApplicationState</name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>SCHEMA</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name>applicationState</name> <operator>!=</operator> <literal type="null">null</literal></expr>
               ?</condition><then> <expr><call><name><name>UUID</name><operator>.</operator><name>fromString</name></name><argument_list>(<argument><expr><name><name>applicationState</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>
               </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Nullable</name></annotation>
    <type><specifier>public</specifier> <name>CassandraVersion</name></type> <name>getReleaseVersion</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>VersionedValue</name></type> <name>applicationState</name> <init>= <expr><call><name>getApplicationState</name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>RELEASE_VERSION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name>applicationState</name> <operator>!=</operator> <literal type="null">null</literal></expr>
               ?</condition><then> <expr><operator>new</operator> <call><name>CassandraVersion</name><argument_list>(<argument><expr><name><name>applicationState</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>
               </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><literal type="string">"EndpointState: HeartBeatState = "</literal> <operator>+</operator> <name>hbState</name> <operator>+</operator> <literal type="string">", AppStateMap = "</literal> <operator>+</operator> <call><name><name>applicationState</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>

<class>class <name>EndpointStateSerializer</name> <super_list><implements>implements <super><name><name>IVersionedSerializer</name><argument_list type="generic">&lt;<argument><name>EndpointState</name></argument>&gt;</argument_list></name></super></implements></super_list>
<block>{
    <function><type><specifier>public</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<parameter><decl><type><name>EndpointState</name></type> <name>epState</name></decl></parameter>, <parameter><decl><type><name>DataOutputPlus</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <comment type="block">/* serialize the HeartBeatState */</comment>
        <decl_stmt><decl><type><name>HeartBeatState</name></type> <name>hbState</name> <init>= <expr><call><name><name>epState</name><operator>.</operator><name>getHeartBeatState</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>HeartBeatState</name><operator>.</operator><name>serializer</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><name>hbState</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* serialize the map of ApplicationState objects */</comment>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>ApplicationState</name></argument>, <argument><name>VersionedValue</name></argument>&gt;</argument_list></name></name></argument>&gt;</argument_list></name></type> <name>states</name> <init>= <expr><call><name><name>epState</name><operator>.</operator><name>states</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>states</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>ApplicationState</name></argument>, <argument><name>VersionedValue</name></argument>&gt;</argument_list></name></name></type> <name>state</name> <range>: <expr><name>states</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>VersionedValue</name></type> <name>value</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ordinal</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>VersionedValue</name><operator>.</operator><name>serializer</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>EndpointState</name></type> <name>deserialize</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>HeartBeatState</name></type> <name>hbState</name> <init>= <expr><call><name><name>HeartBeatState</name><operator>.</operator><name>serializer</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>appStateSize</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ApplicationState</name></argument>, <argument><name>VersionedValue</name></argument>&gt;</argument_list></name></type> <name>states</name> <init>= <expr><operator>new</operator> <call><name><name>EnumMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>appStateSize</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>key</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>VersionedValue</name></type> <name>value</name> <init>= <expr><call><name><name>VersionedValue</name><operator>.</operator><name>serializer</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>states</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>Gossiper</name><operator>.</operator><name>STATES</name><index>[<expr><name>key</name></expr>]</index></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <return>return <expr><operator>new</operator> <call><name>EndpointState</name><argument_list>(<argument><expr><name>hbState</name></expr></argument>, <argument><expr><name>states</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>serializedSize</name><parameter_list>(<parameter><decl><type><name>EndpointState</name></type> <name>epState</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>size</name> <init>= <expr><call><name><name>HeartBeatState</name><operator>.</operator><name>serializer</name><operator>.</operator><name>serializedSize</name></name><argument_list>(<argument><expr><call><name><name>epState</name><operator>.</operator><name>getHeartBeatState</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>ApplicationState</name></argument>, <argument><name>VersionedValue</name></argument>&gt;</argument_list></name></name></argument>&gt;</argument_list></name></type> <name>states</name> <init>= <expr><call><name><name>epState</name><operator>.</operator><name>states</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>TypeSizes</name><operator>.</operator><name>sizeof</name></name><argument_list>(<argument><expr><call><name><name>states</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>ApplicationState</name></argument>, <argument><name>VersionedValue</name></argument>&gt;</argument_list></name></name></type> <name>state</name> <range>: <expr><name>states</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>VersionedValue</name></type> <name>value</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>TypeSizes</name><operator>.</operator><name>sizeof</name></name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ordinal</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>VersionedValue</name><operator>.</operator><name>serializer</name><operator>.</operator><name>serializedSize</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>size</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
