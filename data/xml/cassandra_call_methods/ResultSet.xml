<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/cql3/ResultSet.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>charset</name><operator>.</operator><name>StandardCharsets</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>MessageDigest</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>EnumSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Objects</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>

<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ByteBuf</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>statements</name><operator>.</operator><name>SelectStatement</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>AbstractType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>pager</name><operator>.</operator><name>PagingState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>transport</name><operator>.</operator><name>CBCodec</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>transport</name><operator>.</operator><name>CBUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>transport</name><operator>.</operator><name>DataType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>transport</name><operator>.</operator><name>ProtocolVersion</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>ByteBufferUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>MD5Digest</name></name>;</import>

<class><specifier>public</specifier> class <name>ResultSet</name>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Codec</name></type> <name>codec</name> <init>= <expr><operator>new</operator> <call><name>Codec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>ResultMetadata</name></type> <name>metadata</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>rows</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ResultSet</name><parameter_list>(<parameter><decl><type><name>ResultMetadata</name></type> <name>resultMetadata</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>resultMetadata</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>ResultSet</name><parameter_list>(<parameter><decl><type><name>ResultMetadata</name></type> <name>resultMetadata</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>metadata</name></name> <operator>=</operator> <name>resultMetadata</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name>rows</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>rows</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isEmpty</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addRow</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>row</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><call><name><name>row</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>metadata</name><operator>.</operator><name>valueCount</name></name><argument_list>()</argument_list></call></expr>;</assert>
        <expr_stmt><expr><call><name><name>rows</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addColumnValue</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>rows</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>lastRow</name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>metadata</name><operator>.</operator><name>valueCount</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>rows</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>metadata</name><operator>.</operator><name>valueCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>lastRow</name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>lastRow</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>rows</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>rows</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>reverse</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>reverse</name></name><argument_list>(<argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>trim</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>toRemove</name> <init>= <expr><call><name><name>rows</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>limit</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>toRemove</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>toRemove</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>rows</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>rows</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>metadata</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>row</name> <range>: <expr><name>rows</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>row</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>v</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" | null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
                        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" | "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><call><name><name>metadata</name><operator>.</operator><name>flags</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>Flag</name><operator>.</operator><name>NO_METADATA</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"0x"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>ByteBufferUtil</name><operator>.</operator><name>bytesToHex</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                        <else>else<block type="pseudo"><block_content>
                            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>metadata</name><operator>.</operator><name>names</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>type</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"---"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Codec</name> <super_list><implements>implements <super><name><name>CBCodec</name><argument_list type="generic">&lt;<argument><name>ResultSet</name></argument>&gt;</argument_list></name></super></implements></super_list>
    <block>{
        <comment type="block">/*
         * Format:
         *   - metadata
         *   - rows count (4 bytes)
         *   - rows
         */</comment>
        <function><type><specifier>public</specifier> <name>ResultSet</name></type> <name>decode</name><parameter_list>(<parameter><decl><type><name>ByteBuf</name></type> <name>body</name></decl></parameter>, <parameter><decl><type><name>ProtocolVersion</name></type> <name>version</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ResultMetadata</name></type> <name>m</name> <init>= <expr><call><name><name>ResultMetadata</name><operator>.</operator><name>codec</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>rowCount</name> <init>= <expr><call><name><name>body</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ResultSet</name></type> <name>rs</name> <init>= <expr><operator>new</operator> <call><name>ResultSet</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>rowCount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// rows</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>totalValues</name> <init>= <expr><name>rowCount</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>columnCount</name></name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>totalValues</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>addColumnValue</name></name><argument_list>(<argument><expr><call><name><name>CBUtil</name><operator>.</operator><name>readValue</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <return>return <expr><name>rs</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>encode</name><parameter_list>(<parameter><decl><type><name>ResultSet</name></type> <name>rs</name></decl></parameter>, <parameter><decl><type><name>ByteBuf</name></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>ProtocolVersion</name></type> <name>version</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>ResultMetadata</name><operator>.</operator><name>codec</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><name><name>rs</name><operator>.</operator><name>metadata</name></name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>rs</name><operator>.</operator><name>rows</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>row</name> <range>: <expr><name><name>rs</name><operator>.</operator><name>rows</name></name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <comment type="line">// Note that we do only want to serialize only the first columnCount values, even if the row</comment>
                <comment type="line">// as more: see comment on ResultMetadata.names field.</comment>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rs</name><operator>.</operator><name>metadata</name><operator>.</operator><name>columnCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>CBUtil</name><operator>.</operator><name>writeValue</name></name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            </block_content>}</block></for>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>encodedSize</name><parameter_list>(<parameter><decl><type><name>ResultSet</name></type> <name>rs</name></decl></parameter>, <parameter><decl><type><name>ProtocolVersion</name></type> <name>version</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>ResultMetadata</name><operator>.</operator><name>codec</name><operator>.</operator><name>encodedSize</name></name><argument_list>(<argument><expr><name><name>rs</name><operator>.</operator><name>metadata</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>row</name> <range>: <expr><name><name>rs</name><operator>.</operator><name>rows</name></name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rs</name><operator>.</operator><name>metadata</name><operator>.</operator><name>columnCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>CBUtil</name><operator>.</operator><name>sizeOfValue</name></name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            </block_content>}</block></for>
            <return>return <expr><name>size</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * The metadata for the results of executing a query or prepared statement.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>ResultMetadata</name>
    <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>CBCodec</name><argument_list type="generic">&lt;<argument><name>ResultMetadata</name></argument>&gt;</argument_list></name></type> <name>codec</name> <init>= <expr><operator>new</operator> <call><name>Codec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ResultMetadata</name></type> <name>EMPTY</name> <init>= <expr><operator>new</operator> <call><name>ResultMetadata</name><argument_list>(<argument><expr><call><name><name>MD5Digest</name><operator>.</operator><name>compute</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>EnumSet</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name><name>Flag</name><operator>.</operator><name>NO_METADATA</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>EnumSet</name><argument_list type="generic">&lt;<argument><name>Flag</name></argument>&gt;</argument_list></name></type> <name>flags</name></decl>;</decl_stmt>
        <comment type="line">// Please note that columnCount can actually be smaller than names, even if names is not null. This is</comment>
        <comment type="line">// used to include columns in the resultSet that we need to do post-query re-orderings</comment>
        <comment type="line">// (SelectStatement.orderResults) but that shouldn't be sent to the user as they haven't been requested</comment>
        <comment type="line">// (CASSANDRA-4911). So the serialization code will exclude any columns in name whose index is &gt;= columnCount.</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnSpecification</name></argument>&gt;</argument_list></name></type> <name>names</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>columnCount</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>PagingState</name></type> <name>pagingState</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>MD5Digest</name></type> <name>resultMetadataId</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>ResultMetadata</name><parameter_list>(<parameter><decl><type><name>MD5Digest</name></type> <name>digest</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnSpecification</name></argument>&gt;</argument_list></name></type> <name>names</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><call><name><name>EnumSet</name><operator>.</operator><name>noneOf</name></name><argument_list>(<argument><expr><name><name>Flag</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>names</name></expr></argument>, <argument><expr><call><name><name>names</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>names</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>ColumnSpecification</name><operator>.</operator><name>allInSameTable</name></name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>flags</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>Flag</name><operator>.</operator><name>GLOBAL_TABLES_SPEC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></constructor>

        <comment type="line">// Problem is that we compute the metadata from the columns on creation;</comment>
        <comment type="line">// when re-preparing we create the intermediate object</comment>
        <constructor><specifier>public</specifier> <name>ResultMetadata</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnSpecification</name></argument>&gt;</argument_list></name></type> <name>names</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>names</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <comment type="line">// Problem is that we compute the metadata from the columns on creation;</comment>
        <comment type="line">// when re-preparing we create the intermediate object</comment>
        <constructor><specifier>public</specifier> <name>ResultMetadata</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnSpecification</name></argument>&gt;</argument_list></name></type> <name>names</name></decl></parameter>, <parameter><decl><type><name>PagingState</name></type> <name>pagingState</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><call><name>computeResultMetadataId</name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>EnumSet</name><operator>.</operator><name>noneOf</name></name><argument_list>(<argument><expr><name><name>Flag</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>names</name></expr></argument>, <argument><expr><call><name><name>names</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>pagingState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>names</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>ColumnSpecification</name><operator>.</operator><name>allInSameTable</name></name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>flags</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>Flag</name><operator>.</operator><name>GLOBAL_TABLES_SPEC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></constructor>

        <constructor><specifier>private</specifier> <name>ResultMetadata</name><parameter_list>(<parameter><decl><type><name>MD5Digest</name></type> <name>resultMetadataId</name></decl></parameter>, <parameter><decl><type><name><name>EnumSet</name><argument_list type="generic">&lt;<argument><name>Flag</name></argument>&gt;</argument_list></name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnSpecification</name></argument>&gt;</argument_list></name></type> <name>names</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>columnCount</name></decl></parameter>, <parameter><decl><type><name>PagingState</name></type> <name>pagingState</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>resultMetadataId</name></name> <operator>=</operator> <name>resultMetadataId</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>names</name></name> <operator>=</operator> <name>names</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>columnCount</name></name> <operator>=</operator> <name>columnCount</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>pagingState</name></name> <operator>=</operator> <name>pagingState</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>ResultMetadata</name></type> <name>copy</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>ResultMetadata</name><argument_list>(<argument><expr><name>resultMetadataId</name></expr></argument>, <argument><expr><call><name><name>EnumSet</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>names</name></expr></argument>, <argument><expr><name>columnCount</name></expr></argument>, <argument><expr><name>pagingState</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Return only the column names requested by the user, excluding those added for post-query re-orderings,
         * see definition of names and columnCount.
         **/</comment>
        <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnSpecification</name></argument>&gt;</argument_list></name></type> <name>requestNames</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>names</name><operator>.</operator><name>subList</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>columnCount</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <comment type="line">// The maximum number of values that the ResultSet can hold. This can be bigger than columnCount due to CASSANDRA-4911</comment>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>valueCount</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><ternary><condition><expr><name>names</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>columnCount</name></expr> </then><else>: <expr><call><name><name>names</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>VisibleForTesting</name></annotation>
        <type><specifier>public</specifier> <name><name>EnumSet</name><argument_list type="generic">&lt;<argument><name>Flag</name></argument>&gt;</argument_list></name></type> <name>getFlags</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>flags</name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>VisibleForTesting</name></annotation>
        <type><specifier>public</specifier> <name>int</name></type> <name>getColumnCount</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>columnCount</name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>VisibleForTesting</name></annotation>
        <type><specifier>public</specifier> <name>PagingState</name></type> <name>getPagingState</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>pagingState</name></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Adds the specified columns which will not be serialized.
         *
         * @param columns the columns
         */</comment>
        <function><type><specifier>public</specifier> <name>ResultMetadata</name></type> <name>addNonSerializedColumns</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>ColumnSpecification</name></extends></argument>&gt;</argument_list></name></type> <name>columns</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <comment type="line">// See comment above. Because columnCount doesn't account the newly added name, it</comment>
            <comment type="line">// won't be serialized.</comment>
            <expr_stmt><expr><call><name><name>names</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>setHasMorePages</name><parameter_list>(<parameter><decl><type><name>PagingState</name></type> <name>pagingState</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>pagingState</name></name> <operator>=</operator> <name>pagingState</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>pagingState</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>flags</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name><name>Flag</name><operator>.</operator><name>HAS_MORE_PAGES</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>flags</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>Flag</name><operator>.</operator><name>HAS_MORE_PAGES</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>setSkipMetadata</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>flags</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>Flag</name><operator>.</operator><name>NO_METADATA</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>setMetadataChanged</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>flags</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>Flag</name><operator>.</operator><name>METADATA_CHANGED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>MD5Digest</name></type> <name>getResultMetadataId</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>resultMetadataId</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ResultMetadata</name></type> <name>fromPrepared</name><parameter_list>(<parameter><decl><type><name>CQLStatement</name></type> <name>statement</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>statement</name> <operator>instanceof</operator> <name>SelectStatement</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><operator>(</operator><operator>(</operator><name>SelectStatement</name><operator>)</operator><name>statement</name><operator>)</operator><operator>.</operator><call><name>getResultMetadata</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

            <return>return <expr><name><name>ResultSet</name><operator>.</operator><name>ResultMetadata</name><operator>.</operator><name>EMPTY</name></name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>other</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>other</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>other</name> <operator>instanceof</operator> <name>ResultMetadata</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>ResultMetadata</name></type> <name>that</name> <init>= <expr><operator>(</operator><name>ResultMetadata</name><operator>)</operator> <name>other</name></expr></init></decl>;</decl_stmt>

            <return>return <expr><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name><name>that</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call>
                   <operator>&amp;&amp;</operator> <call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>names</name></expr></argument>, <argument><expr><name><name>that</name><operator>.</operator><name>names</name></name></expr></argument>)</argument_list></call>
                   <operator>&amp;&amp;</operator> <name>columnCount</name> <operator>==</operator> <name><name>that</name><operator>.</operator><name>columnCount</name></name>
                   <operator>&amp;&amp;</operator> <call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>pagingState</name></expr></argument>, <argument><expr><name><name>that</name><operator>.</operator><name>pagingState</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>Objects</name><operator>.</operator><name>hash</name></name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>names</name></expr></argument>, <argument><expr><name>columnCount</name></expr></argument>, <argument><expr><name>pagingState</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>names</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"["</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>columnCount</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" columns]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <for>for <control>(<init><decl><type><name>ColumnSpecification</name></type> <name>name</name> <range>: <expr><name>names</name></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"["</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>ksName</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>cfName</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></else></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>flags</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>Flag</name><operator>.</operator><name>HAS_MORE_PAGES</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" (to be continued)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <class><specifier>private</specifier> <specifier>static</specifier> class <name>Codec</name> <super_list><implements>implements <super><name><name>CBCodec</name><argument_list type="generic">&lt;<argument><name>ResultMetadata</name></argument>&gt;</argument_list></name></super></implements></super_list>
        <block>{
            <function><type><specifier>public</specifier> <name>ResultMetadata</name></type> <name>decode</name><parameter_list>(<parameter><decl><type><name>ByteBuf</name></type> <name>body</name></decl></parameter>, <parameter><decl><type><name>ProtocolVersion</name></type> <name>version</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <comment type="line">// flags &amp; column count</comment>
                <decl_stmt><decl><type><name>int</name></type> <name>iflags</name> <init>= <expr><call><name><name>body</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>columnCount</name> <init>= <expr><call><name><name>body</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name><name>EnumSet</name><argument_list type="generic">&lt;<argument><name>Flag</name></argument>&gt;</argument_list></name></type> <name>flags</name> <init>= <expr><call><name><name>Flag</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name>iflags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>MD5Digest</name></type> <name>resultMetadataId</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>flags</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>Flag</name><operator>.</operator><name>METADATA_CHANGED</name></name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <assert>assert <expr><call><name><name>version</name><operator>.</operator><name>isGreaterOrEqualTo</name></name><argument_list>(<argument><expr><name><name>ProtocolVersion</name><operator>.</operator><name>V5</name></name></expr></argument>)</argument_list></call> <operator>:</operator> <literal type="string">"MetadataChanged flag is not supported before native protocol v5"</literal></expr>;</assert>
                    <assert>assert <expr><operator>!</operator><call><name><name>flags</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>Flag</name><operator>.</operator><name>NO_METADATA</name></name></expr></argument>)</argument_list></call> <operator>:</operator> <literal type="string">"MetadataChanged and NoMetadata are mutually exclusive flags"</literal></expr>;</assert>

                    <expr_stmt><expr><name>resultMetadataId</name> <operator>=</operator> <call><name><name>MD5Digest</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><call><name><name>CBUtil</name><operator>.</operator><name>readBytes</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <decl_stmt><decl><type><name>PagingState</name></type> <name>state</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>flags</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>Flag</name><operator>.</operator><name>HAS_MORE_PAGES</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>state</name> <operator>=</operator> <call><name><name>PagingState</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><call><name><name>CBUtil</name><operator>.</operator><name>readValueNoCopy</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><call><name><name>flags</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>Flag</name><operator>.</operator><name>NO_METADATA</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><operator>new</operator> <call><name>ResultMetadata</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>columnCount</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

                <decl_stmt><decl><type><name>boolean</name></type> <name>globalTablesSpec</name> <init>= <expr><call><name><name>flags</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>Flag</name><operator>.</operator><name>GLOBAL_TABLES_SPEC</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>String</name></type> <name>globalKsName</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>globalCfName</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>globalTablesSpec</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>globalKsName</name> <operator>=</operator> <call><name><name>CBUtil</name><operator>.</operator><name>readString</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>globalCfName</name> <operator>=</operator> <call><name><name>CBUtil</name><operator>.</operator><name>readString</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// metadata (names/types)</comment>
                <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnSpecification</name></argument>&gt;</argument_list></name></type> <name>names</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ColumnSpecification</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>columnCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>columnCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>ksName</name> <init>= <expr><ternary><condition><expr><name>globalTablesSpec</name></expr> ?</condition><then> <expr><name>globalKsName</name></expr> </then><else>: <expr><call><name><name>CBUtil</name><operator>.</operator><name>readString</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>cfName</name> <init>= <expr><ternary><condition><expr><name>globalTablesSpec</name></expr> ?</condition><then> <expr><name>globalCfName</name></expr> </then><else>: <expr><call><name><name>CBUtil</name><operator>.</operator><name>readString</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>ColumnIdentifier</name></type> <name>colName</name> <init>= <expr><operator>new</operator> <call><name>ColumnIdentifier</name><argument_list>(<argument><expr><call><name><name>CBUtil</name><operator>.</operator><name>readString</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>AbstractType</name></type> <name>type</name> <init>= <expr><call><name><name>DataType</name><operator>.</operator><name>toType</name></name><argument_list>(<argument><expr><call><name><name>DataType</name><operator>.</operator><name>codec</name><operator>.</operator><name>decodeOne</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>names</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ColumnSpecification</name><argument_list>(<argument><expr><name>ksName</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr><name>colName</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
                <return>return <expr><operator>new</operator> <call><name>ResultMetadata</name><argument_list>(<argument><expr><name>resultMetadataId</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>names</name></expr></argument>, <argument><expr><call><name><name>names</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>encode</name><parameter_list>(<parameter><decl><type><name>ResultMetadata</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>ByteBuf</name></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>ProtocolVersion</name></type> <name>version</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name>boolean</name></type> <name>noMetadata</name> <init>= <expr><call><name><name>m</name><operator>.</operator><name>flags</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>Flag</name><operator>.</operator><name>NO_METADATA</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>boolean</name></type> <name>globalTablesSpec</name> <init>= <expr><call><name><name>m</name><operator>.</operator><name>flags</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>Flag</name><operator>.</operator><name>GLOBAL_TABLES_SPEC</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>boolean</name></type> <name>hasMorePages</name> <init>= <expr><call><name><name>m</name><operator>.</operator><name>flags</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>Flag</name><operator>.</operator><name>HAS_MORE_PAGES</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>boolean</name></type> <name>metadataChanged</name> <init>= <expr><call><name><name>m</name><operator>.</operator><name>flags</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>Flag</name><operator>.</operator><name>METADATA_CHANGED</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <assert>assert <expr><call><name><name>version</name><operator>.</operator><name>isGreaterThan</name></name><argument_list>(<argument><expr><name><name>ProtocolVersion</name><operator>.</operator><name>V1</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><operator>!</operator><name>hasMorePages</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>noMetadata</name><operator>)</operator>
                    <operator>:</operator> <literal type="string">"version = "</literal> <operator>+</operator> <name>version</name> <operator>+</operator> <literal type="string">", flags = "</literal> <operator>+</operator> <name><name>m</name><operator>.</operator><name>flags</name></name></expr>;</assert>

                <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>Flag</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><name><name>m</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name><name>m</name><operator>.</operator><name>columnCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name>hasMorePages</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>CBUtil</name><operator>.</operator><name>writeValue</name></name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>pagingState</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><call><name><name>version</name><operator>.</operator><name>isGreaterOrEqualTo</name></name><argument_list>(<argument><expr><name><name>ProtocolVersion</name><operator>.</operator><name>V5</name></name></expr></argument>)</argument_list></call>  <operator>&amp;&amp;</operator> <name>metadataChanged</name></expr>)</condition>
                <block>{<block_content>
                    <assert>assert <expr><operator>!</operator><name>noMetadata</name> <operator>:</operator> <literal type="string">"MetadataChanged and NoMetadata are mutually exclusive flags"</literal></expr>;</assert>
                    <expr_stmt><expr><call><name><name>CBUtil</name><operator>.</operator><name>writeBytes</name></name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>getResultMetadataId</name></name><argument_list>()</argument_list></call><operator>.</operator><name>bytes</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>noMetadata</name></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>globalTablesSpec</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name><name>CBUtil</name><operator>.</operator><name>writeAsciiString</name></name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>names</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>ksName</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>CBUtil</name><operator>.</operator><name>writeAsciiString</name></name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>names</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>cfName</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>

                    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>m</name><operator>.</operator><name>columnCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>ColumnSpecification</name></type> <name>name</name> <init>= <expr><call><name><name>m</name><operator>.</operator><name>names</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>globalTablesSpec</name></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name><name>CBUtil</name><operator>.</operator><name>writeAsciiString</name></name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>ksName</name></name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>CBUtil</name><operator>.</operator><name>writeAsciiString</name></name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>cfName</name></name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><call><name><name>CBUtil</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>name</name><operator>.</operator><name>name</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>DataType</name><operator>.</operator><name>codec</name><operator>.</operator><name>writeOne</name></name><argument_list>(<argument><expr><call><name><name>DataType</name><operator>.</operator><name>fromType</name></name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>int</name></type> <name>encodedSize</name><parameter_list>(<parameter><decl><type><name>ResultMetadata</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>ProtocolVersion</name></type> <name>version</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name>boolean</name></type> <name>noMetadata</name> <init>= <expr><call><name><name>m</name><operator>.</operator><name>flags</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>Flag</name><operator>.</operator><name>NO_METADATA</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>boolean</name></type> <name>globalTablesSpec</name> <init>= <expr><call><name><name>m</name><operator>.</operator><name>flags</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>Flag</name><operator>.</operator><name>GLOBAL_TABLES_SPEC</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>boolean</name></type> <name>hasMorePages</name> <init>= <expr><call><name><name>m</name><operator>.</operator><name>flags</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>Flag</name><operator>.</operator><name>HAS_MORE_PAGES</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>boolean</name></type> <name>metadataChanged</name> <init>= <expr><call><name><name>m</name><operator>.</operator><name>flags</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>Flag</name><operator>.</operator><name>METADATA_CHANGED</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>hasMorePages</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>CBUtil</name><operator>.</operator><name>sizeOfValue</name></name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>pagingState</name><operator>.</operator><name>serializedSize</name></name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><call><name><name>version</name><operator>.</operator><name>isGreaterOrEqualTo</name></name><argument_list>(<argument><expr><name><name>ProtocolVersion</name><operator>.</operator><name>V5</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>metadataChanged</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>CBUtil</name><operator>.</operator><name>sizeOfBytes</name></name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>getResultMetadataId</name></name><argument_list>()</argument_list></call><operator>.</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>noMetadata</name></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>globalTablesSpec</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>CBUtil</name><operator>.</operator><name>sizeOfAsciiString</name></name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>names</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>ksName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>CBUtil</name><operator>.</operator><name>sizeOfAsciiString</name></name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>names</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>cfName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>

                    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>m</name><operator>.</operator><name>columnCount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>ColumnSpecification</name></type> <name>name</name> <init>= <expr><call><name><name>m</name><operator>.</operator><name>names</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>globalTablesSpec</name></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>CBUtil</name><operator>.</operator><name>sizeOfAsciiString</name></name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>ksName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>CBUtil</name><operator>.</operator><name>sizeOfAsciiString</name></name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>cfName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>CBUtil</name><operator>.</operator><name>sizeOfString</name></name><argument_list>(<argument><expr><call><name><name>name</name><operator>.</operator><name>name</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>DataType</name><operator>.</operator><name>codec</name><operator>.</operator><name>oneSerializedSize</name></name><argument_list>(<argument><expr><call><name><name>DataType</name><operator>.</operator><name>fromType</name></name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></if></if_stmt>
                <return>return <expr><name>size</name></expr>;</return>
            </block_content>}</block></function>
        }</block></class>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * The metadata for the query parameters in a prepared statement.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>PreparedMetadata</name>
    <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>CBCodec</name><argument_list type="generic">&lt;<argument><name>PreparedMetadata</name></argument>&gt;</argument_list></name></type> <name>codec</name> <init>= <expr><operator>new</operator> <call><name>Codec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>EnumSet</name><argument_list type="generic">&lt;<argument><name>Flag</name></argument>&gt;</argument_list></name></type> <name>flags</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnSpecification</name></argument>&gt;</argument_list></name></type> <name>names</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>short</name><index>[]</index></name></type> <name>partitionKeyBindIndexes</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>PreparedMetadata</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnSpecification</name></argument>&gt;</argument_list></name></type> <name>names</name></decl></parameter>, <parameter><decl><type><name><name>short</name><index>[]</index></name></type> <name>partitionKeyBindIndexes</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><call><name><name>EnumSet</name><operator>.</operator><name>noneOf</name></name><argument_list>(<argument><expr><name><name>Flag</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>names</name></expr></argument>, <argument><expr><name>partitionKeyBindIndexes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>names</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>ColumnSpecification</name><operator>.</operator><name>allInSameTable</name></name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>flags</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>Flag</name><operator>.</operator><name>GLOBAL_TABLES_SPEC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></constructor>

        <constructor><specifier>private</specifier> <name>PreparedMetadata</name><parameter_list>(<parameter><decl><type><name><name>EnumSet</name><argument_list type="generic">&lt;<argument><name>Flag</name></argument>&gt;</argument_list></name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnSpecification</name></argument>&gt;</argument_list></name></type> <name>names</name></decl></parameter>, <parameter><decl><type><name><name>short</name><index>[]</index></name></type> <name>partitionKeyBindIndexes</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>names</name></name> <operator>=</operator> <name>names</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>partitionKeyBindIndexes</name></name> <operator>=</operator> <name>partitionKeyBindIndexes</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>PreparedMetadata</name></type> <name>copy</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>PreparedMetadata</name><argument_list>(<argument><expr><call><name><name>EnumSet</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>names</name></expr></argument>, <argument><expr><name>partitionKeyBindIndexes</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>other</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>other</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>other</name> <operator>instanceof</operator> <name>PreparedMetadata</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>PreparedMetadata</name></type> <name>that</name> <init>= <expr><operator>(</operator><name>PreparedMetadata</name><operator>)</operator> <name>other</name></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>this</name><operator>.</operator><name>names</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>names</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                   <call><name><name>this</name><operator>.</operator><name>flags</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                   <call><name><name>Arrays</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>partitionKeyBindIndexes</name></name></expr></argument>, <argument><expr><name><name>that</name><operator>.</operator><name>partitionKeyBindIndexes</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>Objects</name><operator>.</operator><name>hash</name></name><argument_list>(<argument><expr><name>names</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>Arrays</name><operator>.</operator><name>hashCode</name></name><argument_list>(<argument><expr><name>partitionKeyBindIndexes</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>ColumnSpecification</name></type> <name>name</name> <range>: <expr><name>names</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"["</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>ksName</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>cfName</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>

            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", bindIndexes=["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>partitionKeyBindIndexes</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>partitionKeyBindIndexes</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>partitionKeyBindIndexes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>PreparedMetadata</name></type> <name>fromPrepared</name><parameter_list>(<parameter><decl><type><name>CQLStatement</name></type> <name>statement</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>PreparedMetadata</name><argument_list>(<argument><expr><call><name><name>statement</name><operator>.</operator><name>getBindVariables</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>statement</name><operator>.</operator><name>getPartitionKeyBindVariableIndexes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <class><specifier>private</specifier> <specifier>static</specifier> class <name>Codec</name> <super_list><implements>implements <super><name><name>CBCodec</name><argument_list type="generic">&lt;<argument><name>PreparedMetadata</name></argument>&gt;</argument_list></name></super></implements></super_list>
        <block>{
            <function><type><specifier>public</specifier> <name>PreparedMetadata</name></type> <name>decode</name><parameter_list>(<parameter><decl><type><name>ByteBuf</name></type> <name>body</name></decl></parameter>, <parameter><decl><type><name>ProtocolVersion</name></type> <name>version</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <comment type="line">// flags &amp; column count</comment>
                <decl_stmt><decl><type><name>int</name></type> <name>iflags</name> <init>= <expr><call><name><name>body</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>columnCount</name> <init>= <expr><call><name><name>body</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name><name>EnumSet</name><argument_list type="generic">&lt;<argument><name>Flag</name></argument>&gt;</argument_list></name></type> <name>flags</name> <init>= <expr><call><name><name>Flag</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name>iflags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name><name>short</name><index>[]</index></name></type> <name>partitionKeyBindIndexes</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>version</name><operator>.</operator><name>isGreaterOrEqualTo</name></name><argument_list>(<argument><expr><name><name>ProtocolVersion</name><operator>.</operator><name>V4</name></name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>numPKNames</name> <init>= <expr><call><name><name>body</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>numPKNames</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>partitionKeyBindIndexes</name> <operator>=</operator> <operator>new</operator> <name><name>short</name><index>[<expr><name>numPKNames</name></expr>]</index></name></expr>;</expr_stmt>
                        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numPKNames</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                            <expr_stmt><expr><name><name>partitionKeyBindIndexes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>body</name><operator>.</operator><name>readShort</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>

                <decl_stmt><decl><type><name>boolean</name></type> <name>globalTablesSpec</name> <init>= <expr><call><name><name>flags</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>Flag</name><operator>.</operator><name>GLOBAL_TABLES_SPEC</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>String</name></type> <name>globalKsName</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>globalCfName</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>globalTablesSpec</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>globalKsName</name> <operator>=</operator> <call><name><name>CBUtil</name><operator>.</operator><name>readString</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>globalCfName</name> <operator>=</operator> <call><name><name>CBUtil</name><operator>.</operator><name>readString</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// metadata (names/types)</comment>
                <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnSpecification</name></argument>&gt;</argument_list></name></type> <name>names</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>columnCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>columnCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>ksName</name> <init>= <expr><ternary><condition><expr><name>globalTablesSpec</name></expr> ?</condition><then> <expr><name>globalKsName</name></expr> </then><else>: <expr><call><name><name>CBUtil</name><operator>.</operator><name>readString</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>cfName</name> <init>= <expr><ternary><condition><expr><name>globalTablesSpec</name></expr> ?</condition><then> <expr><name>globalCfName</name></expr> </then><else>: <expr><call><name><name>CBUtil</name><operator>.</operator><name>readString</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>ColumnIdentifier</name></type> <name>colName</name> <init>= <expr><operator>new</operator> <call><name>ColumnIdentifier</name><argument_list>(<argument><expr><call><name><name>CBUtil</name><operator>.</operator><name>readString</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>AbstractType</name></type> <name>type</name> <init>= <expr><call><name><name>DataType</name><operator>.</operator><name>toType</name></name><argument_list>(<argument><expr><call><name><name>DataType</name><operator>.</operator><name>codec</name><operator>.</operator><name>decodeOne</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>names</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ColumnSpecification</name><argument_list>(<argument><expr><name>ksName</name></expr></argument>, <argument><expr><name>cfName</name></expr></argument>, <argument><expr><name>colName</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
                <return>return <expr><operator>new</operator> <call><name>PreparedMetadata</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>names</name></expr></argument>, <argument><expr><name>partitionKeyBindIndexes</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>encode</name><parameter_list>(<parameter><decl><type><name>PreparedMetadata</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>ByteBuf</name></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>ProtocolVersion</name></type> <name>version</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name>boolean</name></type> <name>globalTablesSpec</name> <init>= <expr><call><name><name>m</name><operator>.</operator><name>flags</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>Flag</name><operator>.</operator><name>GLOBAL_TABLES_SPEC</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>Flag</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><name><name>m</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>names</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><call><name><name>version</name><operator>.</operator><name>isGreaterOrEqualTo</name></name><argument_list>(<argument><expr><name><name>ProtocolVersion</name><operator>.</operator><name>V4</name></name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// there's no point in providing partition key bind indexes if the statements affect multiple tables</comment>
                    <if_stmt><if>if <condition>(<expr><name><name>m</name><operator>.</operator><name>partitionKeyBindIndexes</name></name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><name>globalTablesSpec</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
                        <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name><name>m</name><operator>.</operator><name>partitionKeyBindIndexes</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <for>for <control>(<init><decl><type><name>Short</name></type> <name>bindIndex</name> <range>: <expr><name><name>m</name><operator>.</operator><name>partitionKeyBindIndexes</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                            <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeShort</name></name><argument_list>(<argument><expr><name>bindIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><name>globalTablesSpec</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>CBUtil</name><operator>.</operator><name>writeAsciiString</name></name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>names</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>ksName</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>CBUtil</name><operator>.</operator><name>writeAsciiString</name></name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>names</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>cfName</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <for>for <control>(<init><decl><type><name>ColumnSpecification</name></type> <name>name</name> <range>: <expr><name><name>m</name><operator>.</operator><name>names</name></name></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>globalTablesSpec</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name><name>CBUtil</name><operator>.</operator><name>writeAsciiString</name></name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>ksName</name></name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>CBUtil</name><operator>.</operator><name>writeAsciiString</name></name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>cfName</name></name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>CBUtil</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>name</name><operator>.</operator><name>name</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>DataType</name><operator>.</operator><name>codec</name><operator>.</operator><name>writeOne</name></name><argument_list>(<argument><expr><call><name><name>DataType</name><operator>.</operator><name>fromType</name></name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>int</name></type> <name>encodedSize</name><parameter_list>(<parameter><decl><type><name>PreparedMetadata</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>ProtocolVersion</name></type> <name>version</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name>boolean</name></type> <name>globalTablesSpec</name> <init>= <expr><call><name><name>m</name><operator>.</operator><name>flags</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>Flag</name><operator>.</operator><name>GLOBAL_TABLES_SPEC</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>globalTablesSpec</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>CBUtil</name><operator>.</operator><name>sizeOfAsciiString</name></name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>names</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>ksName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>CBUtil</name><operator>.</operator><name>sizeOfAsciiString</name></name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>names</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>cfName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>m</name><operator>.</operator><name>partitionKeyBindIndexes</name></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>version</name><operator>.</operator><name>isGreaterOrEqualTo</name></name><argument_list>(<argument><expr><name><name>ProtocolVersion</name><operator>.</operator><name>V4</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>m</name><operator>.</operator><name>partitionKeyBindIndexes</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <for>for <control>(<init><decl><type><name>ColumnSpecification</name></type> <name>name</name> <range>: <expr><name><name>m</name><operator>.</operator><name>names</name></name></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>globalTablesSpec</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>CBUtil</name><operator>.</operator><name>sizeOfAsciiString</name></name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>ksName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>CBUtil</name><operator>.</operator><name>sizeOfAsciiString</name></name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>cfName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>CBUtil</name><operator>.</operator><name>sizeOfString</name></name><argument_list>(<argument><expr><call><name><name>name</name><operator>.</operator><name>name</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>DataType</name><operator>.</operator><name>codec</name><operator>.</operator><name>oneSerializedSize</name></name><argument_list>(<argument><expr><call><name><name>DataType</name><operator>.</operator><name>fromType</name></name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
                <return>return <expr><name>size</name></expr>;</return>
            </block_content>}</block></function>
        }</block></class>
    }</block></class>

    <enum><specifier>public</specifier> enum <name>Flag</name>
    <block>{
        <comment type="line">// The order of that enum matters!!</comment>
        <decl><name>GLOBAL_TABLES_SPEC</name></decl>,
        <decl><name>HAS_MORE_PAGES</name></decl>,
        <decl><name>NO_METADATA</name></decl>,
        <decl><name>METADATA_CHANGED</name></decl>;

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>EnumSet</name><argument_list type="generic">&lt;<argument><name>Flag</name></argument>&gt;</argument_list></name></type> <name>deserialize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>EnumSet</name><argument_list type="generic">&lt;<argument><name>Flag</name></argument>&gt;</argument_list></name></type> <name>set</name> <init>= <expr><call><name><name>EnumSet</name><operator>.</operator><name>noneOf</name></name><argument_list>(<argument><expr><name><name>Flag</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Flag</name><index>[]</index></name></type> <name>values</name> <init>= <expr><call><name><name>Flag</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>values</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>n</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>set</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></for>
            <return>return <expr><name>set</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>serialize</name><parameter_list>(<parameter><decl><type><name><name>EnumSet</name><argument_list type="generic">&lt;<argument><name>Flag</name></argument>&gt;</argument_list></name></type> <name>flags</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>Flag</name></type> <name>flag</name> <range>: <expr><name>flags</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><name>i</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <call><name><name>flag</name><operator>.</operator><name>ordinal</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <return>return <expr><name>i</name></expr>;</return>
        </block_content>}</block></function>
    }</block></enum>

    <function><type><specifier>static</specifier> <name>MD5Digest</name></type> <name>computeResultMetadataId</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnSpecification</name></argument>&gt;</argument_list></name></type> <name>columnSpecifications</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// still using the MD5 MessageDigest thread local here instead of a HashingUtils/Guava</comment>
        <comment type="line">// Hasher, as ResultSet will need to be changed alongside other usages of MD5</comment>
        <comment type="line">// in the native transport/protocol and it seems to make more sense to do that</comment>
        <comment type="line">// then than as part of the Guava Hasher refactor which is focused on non-client</comment>
        <comment type="line">// protocol digests</comment>
        <decl_stmt><decl><type><name>MessageDigest</name></type> <name>md</name> <init>= <expr><call><name><name>MD5Digest</name><operator>.</operator><name>threadLocalMD5Digest</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>columnSpecifications</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>ColumnSpecification</name></type> <name>cs</name> <range>: <expr><name>columnSpecifications</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>md</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><call><name><name>cs</name><operator>.</operator><name>name</name><operator>.</operator><name>bytes</name><operator>.</operator><name>duplicate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>md</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>md</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><call><name><name>cs</name><operator>.</operator><name>type</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBytes</name><argument_list>(<argument><expr><name><name>StandardCharsets</name><operator>.</operator><name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>md</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>md</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><call><name><name>MD5Digest</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><call><name><name>md</name><operator>.</operator><name>digest</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
