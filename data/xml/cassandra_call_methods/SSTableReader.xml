<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/io/sstable/format/SSTableReader.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>format</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>ref</name><operator>.</operator><name>WeakReference</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicBoolean</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicLong</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Ordering</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>primitives</name><operator>.</operator><name>Longs</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>RateLimiter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>clearspring</name><operator>.</operator><name>analytics</name><operator>.</operator><name>stream</name><operator>.</operator><name>cardinality</name><operator>.</operator><name>CardinalityMergeException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>clearspring</name><operator>.</operator><name>analytics</name><operator>.</operator><name>stream</name><operator>.</operator><name>cardinality</name><operator>.</operator><name>HyperLogLogPlus</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>clearspring</name><operator>.</operator><name>analytics</name><operator>.</operator><name>stream</name><operator>.</operator><name>cardinality</name><operator>.</operator><name>ICardinality</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cache</name><operator>.</operator><name>InstrumentingCache</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cache</name><operator>.</operator><name>KeyCacheKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>DebuggableThreadPoolExecutor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>NamedThreadFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ScheduledExecutors</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>filter</name><operator>.</operator><name>ColumnFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>rows</name><operator>.</operator><name>Cell</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>rows</name><operator>.</operator><name>EncodingStats</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>rows</name><operator>.</operator><name>UnfilteredRowIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>AbstractBounds</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>Bounds</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>Range</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>Token</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>UnknownColumnException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>FSError</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>FSReadError</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>FSWriteError</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>compress</name><operator>.</operator><name>CompressionMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>metadata</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>metrics</name><operator>.</operator><name>RestorableMeter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>CachingParams</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>Schema</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>SchemaConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>TableId</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>TableMetadataRef</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>ActiveRepairService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>CacheService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>OpOrder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Ref</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>SelfRefCounted</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>BloomFilterSerializer</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>Directories</name><operator>.</operator><name>SECONDARY_INDEX_NAME_SEPARATOR</name></name>;</import>

<comment type="block" format="javadoc">/**
 * An SSTableReader can be constructed in a number of places, but typically is either
 * read from disk at startup, or constructed from a flushed memtable, or after compaction
 * to replace some existing sstables. However once created, an sstablereader may also be modified.
 *
 * A reader's OpenReason describes its current stage in its lifecycle, as follows:
 *
 *
 * &lt;pre&gt; {@code
 * NORMAL
 * From:       None        =&gt; Reader has been read from disk, either at startup or from a flushed memtable
 *             EARLY       =&gt; Reader is the final result of a compaction
 *             MOVED_START =&gt; Reader WAS being compacted, but this failed and it has been restored to NORMAL status
 *
 * EARLY
 * From:       None        =&gt; Reader is a compaction replacement that is either incomplete and has been opened
 *                            to represent its partial result status, or has been finished but the compaction
 *                            it is a part of has not yet completed fully
 *             EARLY       =&gt; Same as from None, only it is not the first time it has been
 *
 * MOVED_START
 * From:       NORMAL      =&gt; Reader is being compacted. This compaction has not finished, but the compaction result
 *                            is either partially or fully opened, to either partially or fully replace this reader.
 *                            This reader's start key has been updated to represent this, so that reads only hit
 *                            one or the other reader.
 *
 * METADATA_CHANGE
 * From:       NORMAL      =&gt; Reader has seen low traffic and the amount of memory available for index summaries is
 *                            constrained, so its index summary has been downsampled.
 *         METADATA_CHANGE =&gt; Same
 * } &lt;/pre&gt;
 *
 * Note that in parallel to this, there are two different Descriptor types; TMPLINK and FINAL; the latter corresponds
 * to NORMAL state readers and all readers that replace a NORMAL one. TMPLINK is used for EARLY state readers and
 * no others.
 *
 * When a reader is being compacted, if the result is large its replacement may be opened as EARLY before compaction
 * completes in order to present the result to consumers earlier. In this case the reader will itself be changed to
 * a MOVED_START state, where its start no longer represents its on-disk minimum key. This is to permit reads to be
 * directed to only one reader when the two represent the same data. The EARLY file can represent a compaction result
 * that is either partially complete and still in-progress, or a complete and immutable sstable that is part of a larger
 * macro compaction action that has not yet fully completed.
 *
 * Currently ALL compaction results at least briefly go through an EARLY open state prior to completion, regardless
 * of if early opening is enabled.
 *
 * Since a reader can be created multiple times over the same shared underlying resources, and the exact resources
 * it shares between each instance differ subtly, we track the lifetime of any underlying resource with its own
 * reference count, which each instance takes a Ref to. Each instance then tracks references to itself, and once these
 * all expire it releases its Refs to these underlying resources.
 *
 * There is some shared cleanup behaviour needed only once all sstablereaders in a certain stage of their lifecycle
 * (i.e. EARLY or NORMAL opening), and some that must only occur once all readers of any kind over a single logical
 * sstable have expired. These are managed by the TypeTidy and GlobalTidy classes at the bottom, and are effectively
 * managed as another resource each instance tracks its own Ref instance to, to ensure all of these resources are
 * cleaned up safely and can be debugged otherwise.
 *
 * TODO: fill in details about Tracker and lifecycle interactions for tools, and for compaction strategies
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>SSTableReader</name> <super_list><extends>extends <super><name>SSTable</name></super></extends> <implements>implements <super><name><name>SelfRefCounted</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></super></implements></super_list>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>SSTableReader</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ScheduledThreadPoolExecutor</name></type> <name>syncExecutor</name> <init>= <expr><call><name>initSyncExecutor</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>ScheduledThreadPoolExecutor</name></type> <name>initSyncExecutor</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>isClientOrToolInitialized</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>

        <comment type="line">// Do NOT start this thread pool in client mode</comment>

        <decl_stmt><decl><type><name>ScheduledThreadPoolExecutor</name></type> <name>syncExecutor</name> <init>= <expr><operator>new</operator> <call><name>ScheduledThreadPoolExecutor</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>NamedThreadFactory</name><argument_list>(<argument><expr><literal type="string">"read-hotness-tracker"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// Immediately remove readMeter sync task when cancelled.</comment>
        <expr_stmt><expr><call><name><name>syncExecutor</name><operator>.</operator><name>setRemoveOnCancelPolicy</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>syncExecutor</name></expr>;</return>
    </block_content>}</block></function>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>RateLimiter</name></type> <name>meterSyncThrottle</name> <init>= <expr><call><name><name>RateLimiter</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><literal type="number">100.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>maxTimestampDescending</name> <init>= <expr><lambda><parameter_list>(<parameter><decl><name>o1</name></decl></parameter>, <parameter><decl><name>o2</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>Long</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><call><name><name>o2</name><operator>.</operator><name>getMaxTimestamp</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>o1</name><operator>.</operator><name>getMaxTimestamp</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>maxTimestampAscending</name> <init>= <expr><lambda><parameter_list>(<parameter><decl><name>o1</name></decl></parameter>, <parameter><decl><name>o2</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>Long</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><call><name><name>o1</name><operator>.</operator><name>getMaxTimestamp</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>o2</name><operator>.</operator><name>getMaxTimestamp</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></init></decl>;</decl_stmt>

    <comment type="line">// it's just an object, which we use regular Object equality on; we introduce a special class just for easy recognition</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>UniqueIdentifier</name> <block>{}</block></class>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>sstableComparator</name> <init>= <expr><lambda><parameter_list>(<parameter><decl><name>o1</name></decl></parameter>, <parameter><decl><name>o2</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>o1</name><operator>.</operator><name>first</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>o2</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>generationReverseComparator</name> <init>= <expr><lambda><parameter_list>(<parameter><decl><name>o1</name></decl></parameter>, <parameter><decl><name>o2</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><operator>-</operator><call><name><name>Integer</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name><name>o1</name><operator>.</operator><name>descriptor</name><operator>.</operator><name>generation</name></name></expr></argument>, <argument><expr><name><name>o2</name><operator>.</operator><name>descriptor</name><operator>.</operator><name>generation</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Ordering</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>sstableOrdering</name> <init>= <expr><call><name><name>Ordering</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>sstableComparator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>sizeComparator</name> <init>= <expr><operator>new</operator> <class><super><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
    <block>{
        <function><type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>SSTableReader</name></type> <name>o1</name></decl></parameter>, <parameter><decl><type><name>SSTableReader</name></type> <name>o2</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>Longs</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><call><name><name>o1</name><operator>.</operator><name>onDiskLength</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>o2</name><operator>.</operator><name>onDiskLength</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * maxDataAge is a timestamp in local server time (e.g. System.currentTimeMilli) which represents an upper bound
     * to the newest piece of data stored in the sstable. In other words, this sstable does not contain items created
     * later than maxDataAge.
     *
     * The field is not serialized to disk, so relying on it for more than what truncate does is not advised.
     *
     * When a new sstable is flushed, maxDataAge is set to the time of creation.
     * When a sstable is created from compaction, maxDataAge is set to max of all merged sstables.
     *
     * The age is in milliseconds since epoc and is local to this host.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>long</name></type> <name>maxDataAge</name></decl>;</decl_stmt>

    <enum><specifier>public</specifier> enum <name>OpenReason</name>
    <block>{
        <decl><name>NORMAL</name></decl>,
        <decl><name>EARLY</name></decl>,
        <decl><name>METADATA_CHANGE</name></decl>,
        <decl><name>MOVED_START</name></decl>
    }</block></enum>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>OpenReason</name></type> <name>openReason</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>UniqueIdentifier</name></type> <name>instanceId</name> <init>= <expr><operator>new</operator> <call><name>UniqueIdentifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// indexfile and datafile: might be null before a call to load()</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>FileHandle</name></type> <name>ifile</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>FileHandle</name></type> <name>dfile</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>IFilter</name></type> <name>bf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>IndexSummary</name></type> <name>indexSummary</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name><name>RowIndexEntry</name><operator>.</operator><name><name>IndexSerializer</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></name></type> <name>rowIndexEntrySerializer</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>InstrumentingCache</name><argument_list type="generic">&lt;<argument><name>KeyCacheKey</name></argument>, <argument><name>RowIndexEntry</name></argument>&gt;</argument_list></name></type> <name>keyCache</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>BloomFilterTracker</name></type> <name>bloomFilterTracker</name> <init>= <expr><operator>new</operator> <call><name>BloomFilterTracker</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// technically isCompacted is not necessary since it should never be unreferenced unless it is also compacted,</comment>
    <comment type="line">// but it seems like a good extra layer of protection against reference counting bugs to not delete data based on that alone</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>AtomicBoolean</name></type> <name>isSuspect</name> <init>= <expr><operator>new</operator> <call><name>AtomicBoolean</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// not final since we need to be able to change level on a file.</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>volatile</specifier> <name>StatsMetadata</name></type> <name>sstableMetadata</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>SerializationHeader</name></type> <name>header</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>AtomicLong</name></type> <name>keyCacheHit</name> <init>= <expr><operator>new</operator> <call><name>AtomicLong</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>AtomicLong</name></type> <name>keyCacheRequest</name> <init>= <expr><operator>new</operator> <call><name>AtomicLong</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>InstanceTidier</name></type> <name>tidy</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Ref</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>selfRef</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>RestorableMeter</name></type> <name>readMeter</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>double</name></type> <name>crcCheckChance</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Calculate approximate key count.
     * If cardinality estimator is available on all given sstables, then this method use them to estimate
     * key count.
     * If not, then this uses index summaries.
     *
     * @param sstables SSTables to calculate key count
     * @return estimated key count
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getApproximateKeyCount</name><parameter_list>(<parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>sstables</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>count</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>Iterables</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>sstables</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>count</name></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>boolean</name></type> <name>failed</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ICardinality</name></type> <name>cardinality</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>sstable</name> <range>: <expr><name>sstables</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>sstable</name><operator>.</operator><name>openReason</name></name> <operator>==</operator> <name><name>OpenReason</name><operator>.</operator><name>EARLY</name></name></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>

            <try>try
            <block>{<block_content>
                <decl_stmt><decl><type><name>CompactionMetadata</name></type> <name>metadata</name> <init>= <expr><operator>(</operator><name>CompactionMetadata</name><operator>)</operator> <call><name><name>sstable</name><operator>.</operator><name>descriptor</name><operator>.</operator><name>getMetadataSerializer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>deserialize</name><argument_list>(<argument><expr><name><name>sstable</name><operator>.</operator><name>descriptor</name></name></expr></argument>, <argument><expr><name><name>MetadataType</name><operator>.</operator><name>COMPACTION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <comment type="line">// If we can't load the CompactionMetadata, we are forced to estimate the keys using the index</comment>
                <comment type="line">// summary. (CASSANDRA-10676)</comment>
                <if_stmt><if>if <condition>(<expr><name>metadata</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Reading cardinality from Statistics.db failed for {}"</literal></expr></argument>, <argument><expr><call><name><name>sstable</name><operator>.</operator><name>getFilename</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>failed</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><name>cardinality</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>cardinality</name> <operator>=</operator> <name><name>metadata</name><operator>.</operator><name>cardinalityEstimator</name></name></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><name>cardinality</name> <operator>=</operator> <call><name><name>cardinality</name><operator>.</operator><name>merge</name></name><argument_list>(<argument><expr><name><name>metadata</name><operator>.</operator><name>cardinalityEstimator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Reading cardinality from Statistics.db failed."</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>failed</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></catch>
            <catch>catch <parameter_list>(<parameter><decl><type><name>CardinalityMergeException</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Cardinality merge failed."</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>failed</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></catch></try>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><name>cardinality</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>failed</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>count</name> <operator>=</operator> <call><name><name>cardinality</name><operator>.</operator><name>cardinality</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// if something went wrong above or cardinality is not available, calculate using index summary</comment>
        <if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>sstable</name> <range>: <expr><name>sstables</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name><name>sstable</name><operator>.</operator><name>estimatedKeys</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>count</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Estimates how much of the keys we would keep if the sstables were compacted together
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>double</name></type> <name>estimateCompactionGain</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>overlapping</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>ICardinality</name></argument>&gt;</argument_list></name></type> <name>cardinalities</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>overlapping</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>sstable</name> <range>: <expr><name>overlapping</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <try>try
            <block>{<block_content>
                <decl_stmt><decl><type><name>ICardinality</name></type> <name>cardinality</name> <init>= <expr><operator>(</operator><operator>(</operator><name>CompactionMetadata</name><operator>)</operator> <call><name><name>sstable</name><operator>.</operator><name>descriptor</name><operator>.</operator><name>getMetadataSerializer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>deserialize</name><argument_list>(<argument><expr><name><name>sstable</name><operator>.</operator><name>descriptor</name></name></expr></argument>, <argument><expr><name><name>MetadataType</name><operator>.</operator><name>COMPACTION</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><name>cardinalityEstimator</name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>cardinality</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>cardinalities</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>cardinality</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Got a null cardinality estimator in: {}"</literal></expr></argument>, <argument><expr><call><name><name>sstable</name><operator>.</operator><name>getFilename</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Could not read up compaction metadata for {}"</literal></expr></argument>, <argument><expr><name>sstable</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></for>
        <decl_stmt><decl><type><name>long</name></type> <name>totalKeyCountBefore</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>ICardinality</name></type> <name>cardinality</name> <range>: <expr><name>cardinalities</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name>totalKeyCountBefore</name> <operator>+=</operator> <call><name><name>cardinality</name><operator>.</operator><name>cardinality</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><name>totalKeyCountBefore</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>long</name></type> <name>totalKeyCountAfter</name> <init>= <expr><call><name>mergeCardinalities</name><argument_list>(<argument><expr><name>cardinalities</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>cardinality</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Estimated compaction gain: {}/{}={}"</literal></expr></argument>, <argument><expr><name>totalKeyCountAfter</name></expr></argument>, <argument><expr><name>totalKeyCountBefore</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>totalKeyCountAfter</name><operator>)</operator><operator>/</operator><name>totalKeyCountBefore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>totalKeyCountAfter</name><operator>)</operator><operator>/</operator><name>totalKeyCountBefore</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>ICardinality</name></type> <name>mergeCardinalities</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>ICardinality</name></argument>&gt;</argument_list></name></type> <name>cardinalities</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ICardinality</name></type> <name>base</name> <init>= <expr><operator>new</operator> <call><name>HyperLogLogPlus</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// see MetadataCollector.cardinality</comment>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><name>base</name> <operator>=</operator> <call><name><name>base</name><operator>.</operator><name>merge</name></name><argument_list>(<argument><expr><call><name><name>cardinalities</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>ICardinality</name><index>[<expr><call><name><name>cardinalities</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>CardinalityMergeException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Could not merge cardinalities"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
        <return>return <expr><name>base</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>SSTableReader</name></type> <name>open</name><parameter_list>(<parameter><decl><type><name>Descriptor</name></type> <name>descriptor</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>TableMetadataRef</name></type> <name>metadata</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>descriptor</name><operator>.</operator><name>cfname</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>SECONDARY_INDEX_NAME_SEPARATOR</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name><name>descriptor</name><operator>.</operator><name>cfname</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>SECONDARY_INDEX_NAME_SEPARATOR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>indexName</name> <init>= <expr><call><name><name>descriptor</name><operator>.</operator><name>cfname</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>metadata</name> <operator>=</operator> <call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getIndexTableMetadataRef</name></name><argument_list>(<argument><expr><name><name>descriptor</name><operator>.</operator><name>ksname</name></name></expr></argument>, <argument><expr><name>indexName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>metadata</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"Could not find index metadata for index cf "</literal> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>metadata</name> <operator>=</operator> <call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getTableMetadataRef</name></name><argument_list>(<argument><expr><name><name>descriptor</name><operator>.</operator><name>ksname</name></name></expr></argument>, <argument><expr><name><name>descriptor</name><operator>.</operator><name>cfname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><call><name>open</name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>SSTableReader</name></type> <name>open</name><parameter_list>(<parameter><decl><type><name>Descriptor</name></type> <name>desc</name></decl></parameter>, <parameter><decl><type><name>TableMetadataRef</name></type> <name>metadata</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>open</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><call><name>componentsFor</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>SSTableReader</name></type> <name>open</name><parameter_list>(<parameter><decl><type><name>Descriptor</name></type> <name>descriptor</name></decl></parameter>, <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Component</name></argument>&gt;</argument_list></name></type> <name>components</name></decl></parameter>, <parameter><decl><type><name>TableMetadataRef</name></type> <name>metadata</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>open</name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>, <argument><expr><name>components</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// use only for offline or "Standalone" operations</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>SSTableReader</name></type> <name>openNoValidation</name><parameter_list>(<parameter><decl><type><name>Descriptor</name></type> <name>descriptor</name></decl></parameter>, <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Component</name></argument>&gt;</argument_list></name></type> <name>components</name></decl></parameter>, <parameter><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>open</name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>, <argument><expr><name>components</name></expr></argument>, <argument><expr><name><name>cfs</name><operator>.</operator><name>metadata</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// use only for offline or "Standalone" operations</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>SSTableReader</name></type> <name>openNoValidation</name><parameter_list>(<parameter><decl><type><name>Descriptor</name></type> <name>descriptor</name></decl></parameter>, <parameter><decl><type><name>TableMetadataRef</name></type> <name>metadata</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>open</name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>, <argument><expr><call><name>componentsFor</name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Open SSTable reader to be used in batch mode(such as sstableloader).
     *
     * @param descriptor
     * @param components
     * @param metadata
     * @return opened SSTableReader
     * @throws IOException
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>SSTableReader</name></type> <name>openForBatch</name><parameter_list>(<parameter><decl><type><name>Descriptor</name></type> <name>descriptor</name></decl></parameter>, <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Component</name></argument>&gt;</argument_list></name></type> <name>components</name></decl></parameter>, <parameter><decl><type><name>TableMetadataRef</name></type> <name>metadata</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// Minimum components without which we can't do anything</comment>
        <assert>assert <expr><call><name><name>components</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>DATA</name></name></expr></argument>)</argument_list></call> <operator>:</operator> <literal type="string">"Data component is missing for sstable "</literal> <operator>+</operator> <name>descriptor</name></expr>;</assert>
        <assert>assert <expr><call><name><name>components</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>PRIMARY_INDEX</name></name></expr></argument>)</argument_list></call> <operator>:</operator> <literal type="string">"Primary index component is missing for sstable "</literal> <operator>+</operator> <name>descriptor</name></expr>;</assert>
        <expr_stmt><expr><call><name>verifyCompressionInfoExistenceIfApplicable</name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>, <argument><expr><name>components</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>EnumSet</name><argument_list type="generic">&lt;<argument><name>MetadataType</name></argument>&gt;</argument_list></name></type> <name>types</name> <init>= <expr><call><name><name>EnumSet</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name><name>MetadataType</name><operator>.</operator><name>VALIDATION</name></name></expr></argument>, <argument><expr><name><name>MetadataType</name><operator>.</operator><name>STATS</name></name></expr></argument>, <argument><expr><name><name>MetadataType</name><operator>.</operator><name>HEADER</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>MetadataType</name></argument>, <argument><name>MetadataComponent</name></argument>&gt;</argument_list></name></type> <name>sstableMetadata</name></decl>;</decl_stmt>
        <try>try
        <block>{<block_content>
             <expr_stmt><expr><name>sstableMetadata</name> <operator>=</operator> <call><name><name>descriptor</name><operator>.</operator><name>getMetadataSerializer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>deserialize</name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>, <argument><expr><name>types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>CorruptSSTableException</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><call><name><name>descriptor</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>STATS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>

        <decl_stmt><decl><type><name>ValidationMetadata</name></type> <name>validationMetadata</name> <init>= <expr><operator>(</operator><name>ValidationMetadata</name><operator>)</operator> <call><name><name>sstableMetadata</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>MetadataType</name><operator>.</operator><name>VALIDATION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StatsMetadata</name></type> <name>statsMetadata</name> <init>= <expr><operator>(</operator><name>StatsMetadata</name><operator>)</operator> <call><name><name>sstableMetadata</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>MetadataType</name><operator>.</operator><name>STATS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>SerializationHeader</name><operator>.</operator><name>Component</name></name></type> <name>header</name> <init>= <expr><operator>(</operator><name><name>SerializationHeader</name><operator>.</operator><name>Component</name></name><operator>)</operator> <call><name><name>sstableMetadata</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>MetadataType</name><operator>.</operator><name>HEADER</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Check if sstable is created using same partitioner.</comment>
        <comment type="line">// Partitioner can be null, which indicates older version of sstable or no stats available.</comment>
        <comment type="line">// In that case, we skip the check.</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>partitionerName</name> <init>= <expr><call><name><name>metadata</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>partitioner</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCanonicalName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>validationMetadata</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>partitionerName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>validationMetadata</name><operator>.</operator><name>partitioner</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Cannot open {}; partitioner {} does not match system partitioner {}.  Note that the default partitioner starting with Cassandra 1.2 is Murmur3Partitioner, so you will need to edit that to match your old partitioner if upgrading."</literal></expr></argument>,
                         <argument><expr><name>descriptor</name></expr></argument>, <argument><expr><name><name>validationMetadata</name><operator>.</operator><name>partitioner</name></name></expr></argument>, <argument><expr><name>partitionerName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>exit</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <try>try
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name><name>SSTableReaderBuilder</name><operator>.</operator><name>ForBatch</name></name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>components</name></expr></argument>, <argument><expr><name>statsMetadata</name></expr></argument>, <argument><expr><call><name><name>header</name><operator>.</operator><name>toHeader</name></name><argument_list>(<argument><expr><call><name><name>metadata</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>UnknownColumnException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Open an SSTable for reading
     * @param descriptor SSTable to open
     * @param components Components included with this SSTable
     * @param metadata for this SSTables CF
     * @param validate Check SSTable for corruption (limited)
     * @param isOffline Whether we are opening this SSTable "offline", for example from an external tool or not for inclusion in queries (validations)
     *                  This stops regenerating BF + Summaries and also disables tracking of hotness for the SSTable.
     * @return {@link SSTableReader}
     * @throws IOException
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>SSTableReader</name></type> <name>open</name><parameter_list>(<parameter><decl><type><name>Descriptor</name></type> <name>descriptor</name></decl></parameter>,
                                     <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Component</name></argument>&gt;</argument_list></name></type> <name>components</name></decl></parameter>,
                                     <parameter><decl><type><name>TableMetadataRef</name></type> <name>metadata</name></decl></parameter>,
                                     <parameter><decl><type><name>boolean</name></type> <name>validate</name></decl></parameter>,
                                     <parameter><decl><type><name>boolean</name></type> <name>isOffline</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// Minimum components without which we can't do anything</comment>
        <assert>assert <expr><call><name><name>components</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>DATA</name></name></expr></argument>)</argument_list></call> <operator>:</operator> <literal type="string">"Data component is missing for sstable "</literal> <operator>+</operator> <name>descriptor</name></expr>;</assert>
        <assert>assert <expr><operator>!</operator><name>validate</name> <operator>||</operator> <call><name><name>components</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>PRIMARY_INDEX</name></name></expr></argument>)</argument_list></call> <operator>:</operator> <literal type="string">"Primary index component is missing for sstable "</literal> <operator>+</operator> <name>descriptor</name></expr>;</assert>

        <comment type="line">// For the 3.0+ sstable format, the (misnomed) stats component hold the serialization header which we need to deserialize the sstable content</comment>
        <assert>assert <expr><call><name><name>components</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>STATS</name></name></expr></argument>)</argument_list></call> <operator>:</operator> <literal type="string">"Stats component is missing for sstable "</literal> <operator>+</operator> <name>descriptor</name></expr>;</assert>

        <expr_stmt><expr><call><name>verifyCompressionInfoExistenceIfApplicable</name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>, <argument><expr><name>components</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>EnumSet</name><argument_list type="generic">&lt;<argument><name>MetadataType</name></argument>&gt;</argument_list></name></type> <name>types</name> <init>= <expr><call><name><name>EnumSet</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name><name>MetadataType</name><operator>.</operator><name>VALIDATION</name></name></expr></argument>, <argument><expr><name><name>MetadataType</name><operator>.</operator><name>STATS</name></name></expr></argument>, <argument><expr><name><name>MetadataType</name><operator>.</operator><name>HEADER</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>MetadataType</name></argument>, <argument><name>MetadataComponent</name></argument>&gt;</argument_list></name></type> <name>sstableMetadata</name></decl>;</decl_stmt>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><name>sstableMetadata</name> <operator>=</operator> <call><name><name>descriptor</name><operator>.</operator><name>getMetadataSerializer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>deserialize</name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>, <argument><expr><name>types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>CorruptSSTableException</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><call><name><name>descriptor</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>STATS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
        <decl_stmt><decl><type><name>ValidationMetadata</name></type> <name>validationMetadata</name> <init>= <expr><operator>(</operator><name>ValidationMetadata</name><operator>)</operator> <call><name><name>sstableMetadata</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>MetadataType</name><operator>.</operator><name>VALIDATION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StatsMetadata</name></type> <name>statsMetadata</name> <init>= <expr><operator>(</operator><name>StatsMetadata</name><operator>)</operator> <call><name><name>sstableMetadata</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>MetadataType</name><operator>.</operator><name>STATS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>SerializationHeader</name><operator>.</operator><name>Component</name></name></type> <name>header</name> <init>= <expr><operator>(</operator><name><name>SerializationHeader</name><operator>.</operator><name>Component</name></name><operator>)</operator> <call><name><name>sstableMetadata</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>MetadataType</name><operator>.</operator><name>HEADER</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <assert>assert <expr><name>header</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>

        <comment type="line">// Check if sstable is created using same partitioner.</comment>
        <comment type="line">// Partitioner can be null, which indicates older version of sstable or no stats available.</comment>
        <comment type="line">// In that case, we skip the check.</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>partitionerName</name> <init>= <expr><call><name><name>metadata</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>partitioner</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCanonicalName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>validationMetadata</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>partitionerName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>validationMetadata</name><operator>.</operator><name>partitioner</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Cannot open {}; partitioner {} does not match system partitioner {}.  Note that the default partitioner starting with Cassandra 1.2 is Murmur3Partitioner, so you will need to edit that to match your old partitioner if upgrading."</literal></expr></argument>,
                         <argument><expr><name>descriptor</name></expr></argument>, <argument><expr><name><name>validationMetadata</name><operator>.</operator><name>partitioner</name></name></expr></argument>, <argument><expr><name>partitionerName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>exit</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>SSTableReader</name></type> <name>sstable</name></decl>;</decl_stmt>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><name>sstable</name> <operator>=</operator> <operator>new</operator> <call><name><name>SSTableReaderBuilder</name><operator>.</operator><name>ForRead</name></name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>,
                                                       <argument><expr><name>metadata</name></expr></argument>,
                                                       <argument><expr><name>validationMetadata</name></expr></argument>,
                                                       <argument><expr><name>isOffline</name></expr></argument>,
                                                       <argument><expr><name>components</name></expr></argument>,
                                                       <argument><expr><name>statsMetadata</name></expr></argument>,
                                                       <argument><expr><call><name><name>header</name><operator>.</operator><name>toHeader</name></name><argument_list>(<argument><expr><call><name><name>metadata</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>UnknownColumnException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>

        <try>try
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>validate</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>sstable</name><operator>.</operator><name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>sstable</name><operator>.</operator><name>getKeyCache</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"key cache contains {}/{} keys"</literal></expr></argument>, <argument><expr><call><name><name>sstable</name><operator>.</operator><name>getKeyCache</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>sstable</name><operator>.</operator><name>getKeyCache</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCapacity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <return>return <expr><name>sstable</name></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>sstable</name><operator>.</operator><name>selfRef</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>release</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>CorruptSSTableException</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><call><name><name>sstable</name><operator>.</operator><name>getFilename</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>openAll</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Descriptor</name></argument>, <argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Component</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></argument>&gt;</argument_list></name></type> <name>entries</name></decl></parameter>,
                                                    <parameter><decl><type><specifier>final</specifier> <name>TableMetadataRef</name></type> <name>metadata</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>sstables</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedBlockingQueue</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>ExecutorService</name></type> <name>executor</name> <init>= <expr><call><name><name>DebuggableThreadPoolExecutor</name><operator>.</operator><name>createWithFixedPoolSize</name></name><argument_list>(<argument><expr><literal type="string">"SSTableBatchOpen"</literal></expr></argument>, <argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getAvailableProcessors</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><specifier>final</specifier> <name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Descriptor</name></argument>, <argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Component</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><name>entries</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>Runnable</name></type> <name>runnable</name> <init>= <expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list>
            <block>{
                <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>SSTableReader</name></type> <name>sstable</name></decl>;</decl_stmt>
                    <try>try
                    <block>{<block_content>
                        <expr_stmt><expr><name>sstable</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block>
                    <catch>catch <parameter_list>(<parameter><decl><type><name>CorruptSSTableException</name></type> <name>ex</name></decl></parameter>)</parameter_list>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name><name>JVMStabilityInspector</name><operator>.</operator><name>inspectThrowable</name></name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Corrupt sstable {}; skipping table"</literal></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return;</return>
                    </block_content>}</block></catch>
                    <catch>catch <parameter_list>(<parameter><decl><type><name>FSError</name></type> <name>ex</name></decl></parameter>)</parameter_list>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name><name>JVMStabilityInspector</name><operator>.</operator><name>inspectThrowable</name></name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Cannot read sstable {}; file system error, skipping table"</literal></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return;</return>
                    </block_content>}</block></catch></try>
                    <expr_stmt><expr><call><name><name>sstables</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>sstable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></function>
            }</block></class></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>executor</name><operator>.</operator><name>submit</name></name><argument_list>(<argument><expr><name>runnable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name><name>executor</name><operator>.</operator><name>shutdown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>executor</name><operator>.</operator><name>awaitTermination</name></name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>DAYS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>

        <return>return <expr><name>sstables</name></expr>;</return>

    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Open a RowIndexedReader which already has its state initialized (by SSTableWriter).
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>SSTableReader</name></type> <name>internalOpen</name><parameter_list>(<parameter><decl><type><name>Descriptor</name></type> <name>desc</name></decl></parameter>,
                                             <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Component</name></argument>&gt;</argument_list></name></type> <name>components</name></decl></parameter>,
                                             <parameter><decl><type><name>TableMetadataRef</name></type> <name>metadata</name></decl></parameter>,
                                             <parameter><decl><type><name>FileHandle</name></type> <name>ifile</name></decl></parameter>,
                                             <parameter><decl><type><name>FileHandle</name></type> <name>dfile</name></decl></parameter>,
                                             <parameter><decl><type><name>IndexSummary</name></type> <name>summary</name></decl></parameter>,
                                             <parameter><decl><type><name>IFilter</name></type> <name>bf</name></decl></parameter>,
                                             <parameter><decl><type><name>long</name></type> <name>maxDataAge</name></decl></parameter>,
                                             <parameter><decl><type><name>StatsMetadata</name></type> <name>sstableMetadata</name></decl></parameter>,
                                             <parameter><decl><type><name>OpenReason</name></type> <name>openReason</name></decl></parameter>,
                                             <parameter><decl><type><name>SerializationHeader</name></type> <name>header</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><name>desc</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>ifile</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>dfile</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>summary</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>bf</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>sstableMetadata</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>

        <return>return <expr><operator>new</operator> <call><name><name>SSTableReaderBuilder</name><operator>.</operator><name>ForWriter</name></name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>maxDataAge</name></expr></argument>, <argument><expr><name>components</name></expr></argument>, <argument><expr><name>sstableMetadata</name></expr></argument>, <argument><expr><name>openReason</name></expr></argument>, <argument><expr><name>header</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>bf</name><argument_list>(<argument><expr><name>bf</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>ifile</name><argument_list>(<argument><expr><name>ifile</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>dfile</name><argument_list>(<argument><expr><name>dfile</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>summary</name><argument_list>(<argument><expr><name>summary</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Best-effort checking to verify the expected compression info component exists, according to the TOC file.
     * The verification depends on the existence of TOC file. If absent, the verification is skipped.
     * @param descriptor
     * @param actualComponents, actual components listed from the file system.
     * @throws CorruptSSTableException, if TOC expects compression info but not found from disk.
     * @throws FSReadError, if unable to read from TOC file.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>verifyCompressionInfoExistenceIfApplicable</name><parameter_list>(<parameter><decl><type><name>Descriptor</name></type> <name>descriptor</name></decl></parameter>,
                                                                  <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Component</name></argument>&gt;</argument_list></name></type> <name>actualComponents</name></decl></parameter>)</parameter_list>
    <throws>throws <argument><expr><name>CorruptSSTableException</name></expr></argument>, <argument><expr><name>FSReadError</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>File</name></type> <name>tocFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>descriptor</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>TOC</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>tocFile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <try>try
            <block>{<block_content>
                <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Component</name></argument>&gt;</argument_list></name></type> <name>expectedComponents</name> <init>= <expr><call><name>readTOC</name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>expectedComponents</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>COMPRESSION_INFO</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>actualComponents</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>COMPRESSION_INFO</name></name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>compressionInfoFileName</name> <init>= <expr><call><name><name>descriptor</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>COMPRESSION_INFO</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <throw>throw <expr><operator>new</operator> <call><name>CorruptSSTableException</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileNotFoundException</name><argument_list>(<argument><expr><name>compressionInfoFileName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>compressionInfoFileName</name></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>FSReadError</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>tocFile</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <constructor><specifier>protected</specifier> <name>SSTableReader</name><parameter_list>(<parameter><decl><type><name>SSTableReaderBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name><name>builder</name><operator>.</operator><name>descriptor</name></name></expr></argument>,
             <argument><expr><name><name>builder</name><operator>.</operator><name>components</name></name></expr></argument>,
             <argument><expr><name><name>builder</name><operator>.</operator><name>metadataRef</name></name></expr></argument>,
             <argument><expr><name><name>builder</name><operator>.</operator><name>maxDataAge</name></name></expr></argument>,
             <argument><expr><name><name>builder</name><operator>.</operator><name>statsMetadata</name></name></expr></argument>,
             <argument><expr><name><name>builder</name><operator>.</operator><name>openReason</name></name></expr></argument>,
             <argument><expr><name><name>builder</name><operator>.</operator><name>header</name></name></expr></argument>,
             <argument><expr><name><name>builder</name><operator>.</operator><name>summary</name></name></expr></argument>,
             <argument><expr><name><name>builder</name><operator>.</operator><name>dfile</name></name></expr></argument>,
             <argument><expr><name><name>builder</name><operator>.</operator><name>ifile</name></name></expr></argument>,
             <argument><expr><name><name>builder</name><operator>.</operator><name>bf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>protected</specifier> <name>SSTableReader</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Descriptor</name></type> <name>desc</name></decl></parameter>,
                            <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Component</name></argument>&gt;</argument_list></name></type> <name>components</name></decl></parameter>,
                            <parameter><decl><type><name>TableMetadataRef</name></type> <name>metadata</name></decl></parameter>,
                            <parameter><decl><type><name>long</name></type> <name>maxDataAge</name></decl></parameter>,
                            <parameter><decl><type><name>StatsMetadata</name></type> <name>sstableMetadata</name></decl></parameter>,
                            <parameter><decl><type><name>OpenReason</name></type> <name>openReason</name></decl></parameter>,
                            <parameter><decl><type><name>SerializationHeader</name></type> <name>header</name></decl></parameter>,
                            <parameter><decl><type><name>IndexSummary</name></type> <name>summary</name></decl></parameter>,
                            <parameter><decl><type><name>FileHandle</name></type> <name>dfile</name></decl></parameter>,
                            <parameter><decl><type><name>FileHandle</name></type> <name>ifile</name></decl></parameter>,
                            <parameter><decl><type><name>IFilter</name></type> <name>bf</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>components</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>, <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getDiskOptimizationStrategy</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sstableMetadata</name></name> <operator>=</operator> <name>sstableMetadata</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>header</name></name> <operator>=</operator> <name>header</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>indexSummary</name></name> <operator>=</operator> <name>summary</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dfile</name></name> <operator>=</operator> <name>dfile</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ifile</name></name> <operator>=</operator> <name>ifile</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bf</name></name> <operator>=</operator> <name>bf</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>maxDataAge</name></name> <operator>=</operator> <name>maxDataAge</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>openReason</name></name> <operator>=</operator> <name>openReason</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>rowIndexEntrySerializer</name></name> <operator>=</operator> <call><name><name>descriptor</name><operator>.</operator><name>version</name><operator>.</operator><name>getSSTableFormat</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getIndexSerializer</name><argument_list>(<argument><expr><call><name><name>metadata</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>desc</name><operator>.</operator><name>version</name></name></expr></argument>, <argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tidy</name> <operator>=</operator> <operator>new</operator> <call><name>InstanceTidier</name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>, <argument><expr><name><name>metadata</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>selfRef</name> <operator>=</operator> <operator>new</operator> <call><name><name>Ref</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>tidy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getTotalBytes</name><parameter_list>(<parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>sstables</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>sstable</name> <range>: <expr><name>sstables</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name><name>sstable</name><operator>.</operator><name>onDiskLength</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <return>return <expr><name>sum</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getTotalUncompressedBytes</name><parameter_list>(<parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>sstables</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>sstable</name> <range>: <expr><name>sstables</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name><name>sstable</name><operator>.</operator><name>uncompressedLength</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <return>return <expr><name>sum</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>that</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>that</name> <operator>instanceof</operator> <name>SSTableReader</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>SSTableReader</name><operator>)</operator> <name>that</name><operator>)</operator><operator>.</operator><call><name><name>descriptor</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>descriptor</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>descriptor</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getFilename</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>dfile</name><operator>.</operator><name>path</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setupOnline</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <comment type="line">// under normal operation we can do this at any time, but SSTR is also used outside C* proper,</comment>
        <comment type="line">// e.g. by BulkLoader, which does not initialize the cache.  As a kludge, we set up the cache</comment>
        <comment type="line">// here when we know we're being wired into the rest of the server infrastructure.</comment>
        <decl_stmt><decl><type><name><name>InstrumentingCache</name><argument_list type="generic">&lt;<argument><name>KeyCacheKey</name></argument>, <argument><name>RowIndexEntry</name></argument>&gt;</argument_list></name></type> <name>maybeKeyCache</name> <init>= <expr><name><name>CacheService</name><operator>.</operator><name>instance</name><operator>.</operator><name>keyCache</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>maybeKeyCache</name><operator>.</operator><name>getCapacity</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>keyCache</name> <operator>=</operator> <name>maybeKeyCache</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>ColumnFamilyStore</name></type> <name>cfs</name> <init>= <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getColumnFamilyStoreInstance</name></name><argument_list>(<argument><expr><call><name>metadata</name><argument_list>()</argument_list></call><operator>.</operator><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>cfs</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>setCrcCheckChance</name><argument_list>(<argument><expr><call><name><name>cfs</name><operator>.</operator><name>getCrcCheckChance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Save index summary to Summary.db file.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>saveSummary</name><parameter_list>(<parameter><decl><type><name>Descriptor</name></type> <name>descriptor</name></decl></parameter>, <parameter><decl><type><name>DecoratedKey</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>DecoratedKey</name></type> <name>last</name></decl></parameter>, <parameter><decl><type><name>IndexSummary</name></type> <name>summary</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>File</name></type> <name>summariesFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>descriptor</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>SUMMARY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>summariesFile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>deleteWithConfirm</name></name><argument_list>(<argument><expr><name>summariesFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <try>try <init>(<decl><type><name>DataOutputStreamPlus</name></type> <name>oStream</name> <init>= <expr><operator>new</operator> <call><name>BufferedDataOutputStreamPlus</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>summariesFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>)</init>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>IndexSummary</name><operator>.</operator><name>serializer</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><name>summary</name></expr></argument>, <argument><expr><name>oStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ByteBufferUtil</name><operator>.</operator><name>writeWithLength</name></name><argument_list>(<argument><expr><call><name><name>first</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>oStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ByteBufferUtil</name><operator>.</operator><name>writeWithLength</name></name><argument_list>(<argument><expr><call><name><name>last</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>oStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Cannot save SSTable Summary: "</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// corrupted hence delete it and let it load it now.</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>summariesFile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>deleteWithConfirm</name></name><argument_list>(<argument><expr><name>summariesFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>saveBloomFilter</name><parameter_list>(<parameter><decl><type><name>Descriptor</name></type> <name>descriptor</name></decl></parameter>, <parameter><decl><type><name>IFilter</name></type> <name>filter</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>File</name></type> <name>filterFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>descriptor</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>FILTER</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <init>(<decl><type><name>DataOutputStreamPlus</name></type> <name>stream</name> <init>= <expr><operator>new</operator> <call><name>BufferedDataOutputStreamPlus</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>filterFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>)</init>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>BloomFilterSerializer</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><operator>(</operator><name>BloomFilter</name><operator>)</operator> <name>filter</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>stream</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Cannot save SSTable bloomfilter: "</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// corrupted hence delete it and let it load it now.</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>filterFile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>deleteWithConfirm</name></name><argument_list>(<argument><expr><name>filterFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></catch></try>

    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Execute provided task with sstable lock to avoid racing with index summary redistribution, SEE CASSANDRA-15861.
     *
     * @param task to be guarded by sstable lock
     */</comment>
    <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>R</name></parameter>&gt;</parameter_list> <name>R</name></type> <name>runWithLock</name><parameter_list>(<parameter><decl><type><name><name>CheckedFunction</name><argument_list type="generic">&lt;<argument><name>Descriptor</name></argument>, <argument><name>R</name></argument>, <argument><name>IOException</name></argument>&gt;</argument_list></name></type> <name>task</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <synchronized>synchronized <init>(<expr><name><name>tidy</name><operator>.</operator><name>global</name></name></expr>)</init>
        <block>{<block_content>
            <return>return <expr><call><name><name>task</name><operator>.</operator><name>apply</name></name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></synchronized>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setReplaced</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <synchronized>synchronized <init>(<expr><name><name>tidy</name><operator>.</operator><name>global</name></name></expr>)</init>
        <block>{<block_content>
            <assert>assert <expr><operator>!</operator><name><name>tidy</name><operator>.</operator><name>isReplaced</name></name></expr>;</assert>
            <expr_stmt><expr><name><name>tidy</name><operator>.</operator><name>isReplaced</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></synchronized>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isReplaced</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <synchronized>synchronized <init>(<expr><name><name>tidy</name><operator>.</operator><name>global</name></name></expr>)</init>
        <block>{<block_content>
            <return>return <expr><name><name>tidy</name><operator>.</operator><name>isReplaced</name></name></expr>;</return>
        </block_content>}</block></synchronized>
    </block_content>}</block></function>

    <comment type="line">// These runnables must NOT be an anonymous or non-static inner class, nor must it retain a reference chain to this reader</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>runOnClose</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Runnable</name></type> <name>runOnClose</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <synchronized>synchronized <init>(<expr><name><name>tidy</name><operator>.</operator><name>global</name></name></expr>)</init>
        <block>{<block_content>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Runnable</name></type> <name>existing</name> <init>= <expr><name><name>tidy</name><operator>.</operator><name>runOnClose</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>tidy</name><operator>.</operator><name>runOnClose</name></name> <operator>=</operator> <call><name><name>AndThen</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>existing</name></expr></argument>, <argument><expr><name>runOnClose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></synchronized>
    </block_content>}</block></function>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>AndThen</name> <super_list><implements>implements <super><name>Runnable</name></super></implements></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Runnable</name></type> <name>runFirst</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Runnable</name></type> <name>runSecond</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>AndThen</name><parameter_list>(<parameter><decl><type><name>Runnable</name></type> <name>runFirst</name></decl></parameter>, <parameter><decl><type><name>Runnable</name></type> <name>runSecond</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>runFirst</name></name> <operator>=</operator> <name>runFirst</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>runSecond</name></name> <operator>=</operator> <name>runSecond</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>runFirst</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>runSecond</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>static</specifier> <name>Runnable</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>Runnable</name></type> <name>runFirst</name></decl></parameter>, <parameter><decl><type><name>Runnable</name></type> <name>runSecond</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>runFirst</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>runSecond</name></expr>;</return></block_content></block></if></if_stmt>
            <return>return <expr><operator>new</operator> <call><name>AndThen</name><argument_list>(<argument><expr><name>runFirst</name></expr></argument>, <argument><expr><name>runSecond</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Clone this reader with the provided start and open reason, and set the clone as replacement.
     *
     * @param newFirst the first key for the replacement (which can be different from the original due to the pre-emptive
     * opening of compaction results).
     * @param reason the {@code OpenReason} for the replacement.
     *
     * @return the cloned reader. That reader is set as a replacement by the method.
     */</comment>
    <function><type><specifier>private</specifier> <name>SSTableReader</name></type> <name>cloneAndReplace</name><parameter_list>(<parameter><decl><type><name>DecoratedKey</name></type> <name>newFirst</name></decl></parameter>, <parameter><decl><type><name>OpenReason</name></type> <name>reason</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>cloneAndReplace</name><argument_list>(<argument><expr><name>newFirst</name></expr></argument>, <argument><expr><name>reason</name></expr></argument>, <argument><expr><call><name><name>indexSummary</name><operator>.</operator><name>sharedCopy</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Clone this reader with the new values and set the clone as replacement.
     *
     * @param newFirst the first key for the replacement (which can be different from the original due to the pre-emptive
     * opening of compaction results).
     * @param reason the {@code OpenReason} for the replacement.
     * @param newSummary the index summary for the replacement.
     *
     * @return the cloned reader. That reader is set as a replacement by the method.
     */</comment>
    <function><type><specifier>private</specifier> <name>SSTableReader</name></type> <name>cloneAndReplace</name><parameter_list>(<parameter><decl><type><name>DecoratedKey</name></type> <name>newFirst</name></decl></parameter>, <parameter><decl><type><name>OpenReason</name></type> <name>reason</name></decl></parameter>, <parameter><decl><type><name>IndexSummary</name></type> <name>newSummary</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>SSTableReader</name></type> <name>replacement</name> <init>= <expr><call><name>internalOpen</name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>,
                                                 <argument><expr><name>components</name></expr></argument>,
                                                 <argument><expr><name>metadata</name></expr></argument>,
                                                 <argument><expr><ternary><condition><expr><name>ifile</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>ifile</name><operator>.</operator><name>sharedCopy</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>,
                                                 <argument><expr><call><name><name>dfile</name><operator>.</operator><name>sharedCopy</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                 <argument><expr><name>newSummary</name></expr></argument>,
                                                 <argument><expr><call><name><name>bf</name><operator>.</operator><name>sharedCopy</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                 <argument><expr><name>maxDataAge</name></expr></argument>,
                                                 <argument><expr><name>sstableMetadata</name></expr></argument>,
                                                 <argument><expr><name>reason</name></expr></argument>,
                                                 <argument><expr><name>header</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>replacement</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name>newFirst</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>replacement</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name>last</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>replacement</name><operator>.</operator><name>isSuspect</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><call><name><name>isSuspect</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>replacement</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Clone this reader with the new values and set the clone as replacement.
     *
     * @param newBloomFilter for the replacement
     *
     * @return the cloned reader. That reader is set as a replacement by the method.
     */</comment>
    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <name>SSTableReader</name></type> <name>cloneAndReplace</name><parameter_list>(<parameter><decl><type><name>IFilter</name></type> <name>newBloomFilter</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>SSTableReader</name></type> <name>replacement</name> <init>= <expr><call><name>internalOpen</name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>,
                                                 <argument><expr><name>components</name></expr></argument>,
                                                 <argument><expr><name>metadata</name></expr></argument>,
                                                 <argument><expr><call><name><name>ifile</name><operator>.</operator><name>sharedCopy</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                 <argument><expr><call><name><name>dfile</name><operator>.</operator><name>sharedCopy</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                 <argument><expr><name>indexSummary</name></expr></argument>,
                                                 <argument><expr><name>newBloomFilter</name></expr></argument>,
                                                 <argument><expr><name>maxDataAge</name></expr></argument>,
                                                 <argument><expr><name>sstableMetadata</name></expr></argument>,
                                                 <argument><expr><name>openReason</name></expr></argument>,
                                                 <argument><expr><name>header</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>replacement</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name>first</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>replacement</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name>last</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>replacement</name><operator>.</operator><name>isSuspect</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><call><name><name>isSuspect</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>replacement</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>SSTableReader</name></type> <name>cloneWithRestoredStart</name><parameter_list>(<parameter><decl><type><name>DecoratedKey</name></type> <name>restoredStart</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <synchronized>synchronized <init>(<expr><name><name>tidy</name><operator>.</operator><name>global</name></name></expr>)</init>
        <block>{<block_content>
            <return>return <expr><call><name>cloneAndReplace</name><argument_list>(<argument><expr><name>restoredStart</name></expr></argument>, <argument><expr><name><name>OpenReason</name><operator>.</operator><name>NORMAL</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></synchronized>
    </block_content>}</block></function>

    <comment type="line">// runOnClose must NOT be an anonymous or non-static inner class, nor must it retain a reference chain to this reader</comment>
    <function><type><specifier>public</specifier> <name>SSTableReader</name></type> <name>cloneWithNewStart</name><parameter_list>(<parameter><decl><type><name>DecoratedKey</name></type> <name>newStart</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Runnable</name></type> <name>runOnClose</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <synchronized>synchronized <init>(<expr><name><name>tidy</name><operator>.</operator><name>global</name></name></expr>)</init>
        <block>{<block_content>
            <assert>assert <expr><name>openReason</name> <operator>!=</operator> <name><name>OpenReason</name><operator>.</operator><name>EARLY</name></name></expr>;</assert>
            <comment type="line">// TODO: merge with caller's firstKeyBeyond() work,to save time</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>newStart</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>first</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>dataStart</name> <init>= <expr><call><name>getPosition</name><argument_list>(<argument><expr><name>newStart</name></expr></argument>, <argument><expr><name><name>Operator</name><operator>.</operator><name>EQ</name></name></expr></argument>)</argument_list></call><operator>.</operator><name>position</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>indexStart</name> <init>= <expr><call><name>getIndexScanPosition</name><argument_list>(<argument><expr><name>newStart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tidy</name><operator>.</operator><name>runOnClose</name></name> <operator>=</operator> <operator>new</operator> <call><name>DropPageCache</name><argument_list>(<argument><expr><name>dfile</name></expr></argument>, <argument><expr><name>dataStart</name></expr></argument>, <argument><expr><name>ifile</name></expr></argument>, <argument><expr><name>indexStart</name></expr></argument>, <argument><expr><name>runOnClose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <return>return <expr><call><name>cloneAndReplace</name><argument_list>(<argument><expr><name>newStart</name></expr></argument>, <argument><expr><name><name>OpenReason</name><operator>.</operator><name>MOVED_START</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></synchronized>
    </block_content>}</block></function>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>DropPageCache</name> <super_list><implements>implements <super><name>Runnable</name></super></implements></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>FileHandle</name></type> <name>dfile</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>dfilePosition</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>FileHandle</name></type> <name>ifile</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>ifilePosition</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Runnable</name></type> <name>andThen</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>DropPageCache</name><parameter_list>(<parameter><decl><type><name>FileHandle</name></type> <name>dfile</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>dfilePosition</name></decl></parameter>, <parameter><decl><type><name>FileHandle</name></type> <name>ifile</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>ifilePosition</name></decl></parameter>, <parameter><decl><type><name>Runnable</name></type> <name>andThen</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dfile</name></name> <operator>=</operator> <name>dfile</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dfilePosition</name></name> <operator>=</operator> <name>dfilePosition</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ifile</name></name> <operator>=</operator> <name>ifile</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ifilePosition</name></name> <operator>=</operator> <name>ifilePosition</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>andThen</name></name> <operator>=</operator> <name>andThen</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>dfile</name><operator>.</operator><name>dropPageCache</name></name><argument_list>(<argument><expr><name>dfilePosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>ifile</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>ifile</name><operator>.</operator><name>dropPageCache</name></name><argument_list>(<argument><expr><name>ifilePosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>andThen</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>andThen</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Returns a new SSTableReader with the same properties as this SSTableReader except that a new IndexSummary will
     * be built at the target samplingLevel.  This (original) SSTableReader instance will be marked as replaced, have
     * its DeletingTask removed, and have its periodic read-meter sync task cancelled.
     * @param samplingLevel the desired sampling level for the index summary on the new SSTableReader
     * @return a new SSTableReader
     * @throws IOException
     */</comment>
    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"resource"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>public</specifier> <name>SSTableReader</name></type> <name>cloneWithNewSummarySamplingLevel</name><parameter_list>(<parameter><decl><type><name>ColumnFamilyStore</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>samplingLevel</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <assert>assert <expr><name>openReason</name> <operator>!=</operator> <name><name>OpenReason</name><operator>.</operator><name>EARLY</name></name></expr>;</assert>

        <decl_stmt><decl><type><name>int</name></type> <name>minIndexInterval</name> <init>= <expr><call><name>metadata</name><argument_list>()</argument_list></call><operator>.</operator><name><name>params</name><operator>.</operator><name>minIndexInterval</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>maxIndexInterval</name> <init>= <expr><call><name>metadata</name><argument_list>()</argument_list></call><operator>.</operator><name><name>params</name><operator>.</operator><name>maxIndexInterval</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>effectiveInterval</name> <init>= <expr><call><name><name>indexSummary</name><operator>.</operator><name>getEffectiveIndexInterval</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>IndexSummary</name></type> <name>newSummary</name></decl>;</decl_stmt>

        <comment type="line">// We have to rebuild the summary from the on-disk primary index in three cases:</comment>
        <comment type="line">// 1. The sampling level went up, so we need to read more entries off disk</comment>
        <comment type="line">// 2. The min_index_interval changed (in either direction); this changes what entries would be in the summary</comment>
        <comment type="line">//    at full sampling (and consequently at any other sampling level)</comment>
        <comment type="line">// 3. The max_index_interval was lowered, forcing us to raise the sampling level</comment>
        <if_stmt><if>if <condition>(<expr><name>samplingLevel</name> <operator>&gt;</operator> <call><name><name>indexSummary</name><operator>.</operator><name>getSamplingLevel</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>indexSummary</name><operator>.</operator><name>getMinIndexInterval</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>minIndexInterval</name> <operator>||</operator> <name>effectiveInterval</name> <operator>&gt;</operator> <name>maxIndexInterval</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>newSummary</name> <operator>=</operator> <call><name>buildSummaryAtLevel</name><argument_list>(<argument><expr><name>samplingLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>samplingLevel</name> <operator>&lt;</operator> <call><name><name>indexSummary</name><operator>.</operator><name>getSamplingLevel</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// we can use the existing index summary to make a smaller one</comment>
            <expr_stmt><expr><name>newSummary</name> <operator>=</operator> <call><name><name>IndexSummaryBuilder</name><operator>.</operator><name>downsample</name></name><argument_list>(<argument><expr><name>indexSummary</name></expr></argument>, <argument><expr><name>samplingLevel</name></expr></argument>, <argument><expr><name>minIndexInterval</name></expr></argument>, <argument><expr><call><name>getPartitioner</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"Attempted to clone SSTableReader with the same index summary sampling level and "</literal> <operator>+</operator>
                    <literal type="string">"no adjustments to min/max_index_interval"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// Always save the resampled index with lock to avoid racing with entire-sstable streaming</comment>
        <synchronized>synchronized <init>(<expr><name><name>tidy</name><operator>.</operator><name>global</name></name></expr>)</init>
        <block>{<block_content>
            <expr_stmt><expr><call><name>saveSummary</name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>newSummary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>cloneAndReplace</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name><name>OpenReason</name><operator>.</operator><name>METADATA_CHANGE</name></name></expr></argument>, <argument><expr><name>newSummary</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></synchronized>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>IndexSummary</name></type> <name>buildSummaryAtLevel</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>newSamplingLevel</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <comment type="line">// we read the positions in a BRAF so we don't have to worry about an entry spanning a mmap boundary.</comment>
        <decl_stmt><decl><type><name>RandomAccessReader</name></type> <name>primaryIndex</name> <init>= <expr><call><name><name>RandomAccessReader</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>descriptor</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>PRIMARY_INDEX</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>indexSize</name> <init>= <expr><call><name><name>primaryIndex</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <try>try <init>(<decl><type><name>IndexSummaryBuilder</name></type> <name>summaryBuilder</name> <init>= <expr><operator>new</operator> <call><name>IndexSummaryBuilder</name><argument_list>(<argument><expr><call><name>estimatedKeys</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>metadata</name><argument_list>()</argument_list></call><operator>.</operator><name><name>params</name><operator>.</operator><name>minIndexInterval</name></name></expr></argument>, <argument><expr><name>newSamplingLevel</name></expr></argument>)</argument_list></call></expr></init></decl>)</init>
            <block>{<block_content>
                <decl_stmt><decl><type><name>long</name></type> <name>indexPosition</name></decl>;</decl_stmt>
                <while>while <condition>(<expr><operator>(</operator><name>indexPosition</name> <operator>=</operator> <call><name><name>primaryIndex</name><operator>.</operator><name>getFilePointer</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>indexSize</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>summaryBuilder</name><operator>.</operator><name>maybeAddEntry</name></name><argument_list>(<argument><expr><call><name>decorateKey</name><argument_list>(<argument><expr><call><name><name>ByteBufferUtil</name><operator>.</operator><name>readWithShortLength</name></name><argument_list>(<argument><expr><name>primaryIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>indexPosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>RowIndexEntry</name><operator>.</operator><name>Serializer</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>primaryIndex</name></expr></argument>, <argument><expr><name><name>descriptor</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></while>

                <return>return <expr><call><name><name>summaryBuilder</name><operator>.</operator><name>build</name></name><argument_list>(<argument><expr><call><name>getPartitioner</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></try>
        </block_content>}</block>
        <finally>finally
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>closeQuietly</name></name><argument_list>(<argument><expr><name>primaryIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>RestorableMeter</name></type> <name>getReadMeter</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>readMeter</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getIndexSummarySamplingLevel</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>indexSummary</name><operator>.</operator><name>getSamplingLevel</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getIndexSummaryOffHeapSize</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>indexSummary</name><operator>.</operator><name>getOffHeapSize</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getMinIndexInterval</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>indexSummary</name><operator>.</operator><name>getMinIndexInterval</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>double</name></type> <name>getEffectiveIndexInterval</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>indexSummary</name><operator>.</operator><name>getEffectiveIndexInterval</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>releaseSummary</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>tidy</name><operator>.</operator><name>releaseSummary</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>validate</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>this</name><operator>.</operator><name>first</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>last</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>CorruptSSTableException</name><argument_list>(<argument><expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"SSTable first key %s &gt; last key %s"</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>last</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getFilename</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets the position in the index file to start scanning to find the given key (at most indexInterval keys away,
     * modulo downsampling of the index summary). Always returns a {@code value &gt;= 0}
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getIndexScanPosition</name><parameter_list>(<parameter><decl><type><name>PartitionPosition</name></type> <name>key</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>openReason</name> <operator>==</operator> <name><name>OpenReason</name><operator>.</operator><name>MOVED_START</name></name> <operator>&amp;&amp;</operator> <call><name><name>key</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>first</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>key</name> <operator>=</operator> <name>first</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return>return <expr><call><name>getIndexScanPositionFromBinarySearchResult</name><argument_list>(<argument><expr><call><name><name>indexSummary</name><operator>.</operator><name>binarySearch</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>indexSummary</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getIndexScanPositionFromBinarySearchResult</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>binarySearchResult</name></decl></parameter>, <parameter><decl><type><name>IndexSummary</name></type> <name>referencedIndexSummary</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>binarySearchResult</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <return>return <expr><call><name><name>referencedIndexSummary</name><operator>.</operator><name>getPosition</name></name><argument_list>(<argument><expr><call><name>getIndexSummaryIndexFromBinarySearchResult</name><argument_list>(<argument><expr><name>binarySearchResult</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getIndexSummaryIndexFromBinarySearchResult</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>binarySearchResult</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>binarySearchResult</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// binary search gives us the first index _greater_ than the key searched for,</comment>
            <comment type="line">// i.e., its insertion position</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>greaterThan</name> <init>= <expr><operator>(</operator><name>binarySearchResult</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>greaterThan</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
            <return>return <expr><name>greaterThan</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <return>return <expr><name>binarySearchResult</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the compression metadata for this sstable.
     * @throws IllegalStateException if the sstable is not compressed
     */</comment>
    <function><type><specifier>public</specifier> <name>CompressionMetadata</name></type> <name>getCompressionMetadata</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>compression</name></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><name>this</name> <operator>+</operator> <literal type="string">" is not compressed"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <return>return <expr><call><name><name>dfile</name><operator>.</operator><name>compressionMetadata</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the amount of memory in bytes used off heap by the compression meta-data.
     * @return the amount of memory in bytes used off heap by the compression meta-data
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getCompressionMetadataOffHeapSize</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>compression</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><call><name>getCompressionMetadata</name><argument_list>()</argument_list></call><operator>.</operator><call><name>offHeapSize</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>IFilter</name></type> <name>getBloomFilter</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>bf</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getBloomFilterSerializedSize</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>bf</name><operator>.</operator><name>serializedSize</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the amount of memory in bytes used off heap by the bloom filter.
     * @return the amount of memory in bytes used off heap by the bloom filter
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getBloomFilterOffHeapSize</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>bf</name><operator>.</operator><name>offHeapSize</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return An estimate of the number of keys in this SSTable based on the index summary.
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>estimatedKeys</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>indexSummary</name><operator>.</operator><name>getEstimatedKeyCount</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @param ranges
     * @return An estimate of the number of keys for given ranges in this SSTable.
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>estimatedKeysForRanges</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ranges</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>sampleKeyCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>IndexesBounds</name></argument>&gt;</argument_list></name></type> <name>sampleIndexes</name> <init>= <expr><call><name>getSampleIndexesForRanges</name><argument_list>(<argument><expr><name>indexSummary</name></expr></argument>, <argument><expr><name>ranges</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>IndexesBounds</name></type> <name>sampleIndexRange</name> <range>: <expr><name>sampleIndexes</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name>sampleKeyCount</name> <operator>+=</operator> <operator>(</operator><name><name>sampleIndexRange</name><operator>.</operator><name>upperPosition</name></name> <operator>-</operator> <name><name>sampleIndexRange</name><operator>.</operator><name>lowerPosition</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

        <comment type="line">// adjust for the current sampling level: (BSL / SL) * index_interval_at_full_sampling</comment>
        <decl_stmt><decl><type><name>long</name></type> <name>estimatedKeys</name> <init>= <expr><name>sampleKeyCount</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <name><name>Downsampling</name><operator>.</operator><name>BASE_SAMPLING_LEVEL</name></name> <operator>*</operator> <call><name><name>indexSummary</name><operator>.</operator><name>getMinIndexInterval</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>/</operator> <call><name><name>indexSummary</name><operator>.</operator><name>getSamplingLevel</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>estimatedKeys</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the number of entries in the IndexSummary.  At full sampling, this is approximately 1/INDEX_INTERVALth of
     * the keys in this SSTable.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getIndexSummarySize</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>indexSummary</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the approximate number of entries the IndexSummary would contain if it were at full sampling.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getMaxIndexSummarySize</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>indexSummary</name><operator>.</operator><name>getMaxNumberOfEntries</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the key for the index summary entry at `index`.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>getIndexSummaryKey</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>indexSummary</name><operator>.</operator><name>getKey</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>IndexesBounds</name></argument>&gt;</argument_list></name></type> <name>getSampleIndexesForRanges</name><parameter_list>(<parameter><decl><type><name>IndexSummary</name></type> <name>summary</name></decl></parameter>, <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ranges</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// use the index to determine a minimal section for each range</comment>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>IndexesBounds</name></argument>&gt;</argument_list></name></type> <name>positions</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name> <range>: <expr><call><name><name>Range</name><operator>.</operator><name>normalize</name></name><argument_list>(<argument><expr><name>ranges</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>PartitionPosition</name></type> <name>leftPosition</name> <init>= <expr><call><name><name>range</name><operator>.</operator><name>left</name><operator>.</operator><name>maxKeyBound</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PartitionPosition</name></type> <name>rightPosition</name> <init>= <expr><call><name><name>range</name><operator>.</operator><name>right</name><operator>.</operator><name>maxKeyBound</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><call><name><name>summary</name><operator>.</operator><name>binarySearch</name></name><argument_list>(<argument><expr><name>leftPosition</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>left</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>left</name> <operator>=</operator> <operator>(</operator><name>left</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <comment type="line">// left range are start exclusive</comment>
                <expr_stmt><expr><name>left</name> <operator>=</operator> <name>left</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>left</name> <operator>==</operator> <call><name><name>summary</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <comment type="line">// left is past the end of the sampling</comment>
                <continue>continue;</continue></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>right</name> <init>= <expr><ternary><condition><expr><call><name><name>Range</name><operator>.</operator><name>isWrapAround</name></name><argument_list>(<argument><expr><name><name>range</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>range</name><operator>.</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>
                    ?</condition><then> <expr><call><name><name>summary</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>
                    </then><else>: <expr><call><name><name>summary</name><operator>.</operator><name>binarySearch</name></name><argument_list>(<argument><expr><name>rightPosition</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>right</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// range are end inclusive so we use the previous index from what binarySearch give us</comment>
                <comment type="line">// since that will be the last index we will return</comment>
                <expr_stmt><expr><name>right</name> <operator>=</operator> <operator>(</operator><name>right</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>right</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <comment type="line">// Means the first key is already stricly greater that the right bound</comment>
                    <continue>continue;</continue></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>right</name><operator>--</operator></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>left</name> <operator>&gt;</operator> <name>right</name></expr>)</condition><block type="pseudo"><block_content>
                <comment type="line">// empty range</comment>
                <continue>continue;</continue></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name><name>positions</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>IndexesBounds</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>positions</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>DecoratedKey</name></argument>&gt;</argument_list></name></type> <name>getKeySamples</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>IndexesBounds</name></argument>&gt;</argument_list></name></type> <name>indexRanges</name> <init>= <expr><call><name>getSampleIndexesForRanges</name><argument_list>(<argument><expr><name>indexSummary</name></expr></argument>, <argument><expr><call><name><name>Collections</name><operator>.</operator><name>singletonList</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>indexRanges</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><operator>new</operator> <class><super><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>DecoratedKey</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>DecoratedKey</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <return>return <expr><operator>new</operator> <class><super><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>DecoratedKey</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
                <block>{
                    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>IndexesBounds</name></argument>&gt;</argument_list></name></type> <name>rangeIter</name> <init>= <expr><call><name><name>indexRanges</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><specifier>private</specifier> <name>IndexesBounds</name></type> <name>current</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>idx</name></decl>;</decl_stmt>

                    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasNext</name><parameter_list>()</parameter_list>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name>current</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>idx</name> <operator>&gt;</operator> <name><name>current</name><operator>.</operator><name>upperPosition</name></name></expr>)</condition>
                        <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><call><name><name>rangeIter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition>
                            <block>{<block_content>
                                <expr_stmt><expr><name>current</name> <operator>=</operator> <call><name><name>rangeIter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>current</name><operator>.</operator><name>lowerPosition</name></name></expr>;</expr_stmt>
                                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                            </block_content>}</block></if></if_stmt>
                            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                        </block_content>}</block></if></if_stmt>

                        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                    </block_content>}</block></function>

                    <function><type><specifier>public</specifier> <name>DecoratedKey</name></type> <name>next</name><parameter_list>()</parameter_list>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name> <init>= <expr><call><name><name>indexSummary</name><operator>.</operator><name>getKey</name></name><argument_list>(<argument><expr><name>idx</name><operator>++</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <return>return <expr><call><name>decorateKey</name><argument_list>(<argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
                    </block_content>}</block></function>

                    <function><type><specifier>public</specifier> <name>void</name></type> <name>remove</name><parameter_list>()</parameter_list>
                    <block>{<block_content>
                        <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
                    </block_content>}</block></function>
                }</block></class></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Determine the minimal set of sections that can be extracted from this SSTable to cover the given ranges.
     * @return A sorted list of (offset,end) pairs that cover the given ranges in the datafile for this SSTable.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>PartitionPositionBounds</name></argument>&gt;</argument_list></name></type> <name>getPositionsForRanges</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ranges</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// use the index to determine a minimal section for each range</comment>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PartitionPositionBounds</name></argument>&gt;</argument_list></name></type> <name>positions</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name> <range>: <expr><call><name><name>Range</name><operator>.</operator><name>normalize</name></name><argument_list>(<argument><expr><name>ranges</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <assert>assert <expr><operator>!</operator><call><name><name>range</name><operator>.</operator><name>isWrapAround</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>range</name><operator>.</operator><name>right</name><operator>.</operator><name>isMinimum</name></name><argument_list>()</argument_list></call></expr>;</assert>
            <comment type="line">// truncate the range so it at most covers the sstable</comment>
            <decl_stmt><decl><type><name><name>AbstractBounds</name><argument_list type="generic">&lt;<argument><name>PartitionPosition</name></argument>&gt;</argument_list></name></type> <name>bounds</name> <init>= <expr><call><name><name>Range</name><operator>.</operator><name>makeRowRange</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PartitionPosition</name></type> <name>leftBound</name> <init>= <expr><ternary><condition><expr><call><name><name>bounds</name><operator>.</operator><name>left</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>first</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>bounds</name><operator>.</operator><name>left</name></name></expr> </then><else>: <expr><call><name><name>first</name><operator>.</operator><name>getToken</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>minKeyBound</name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PartitionPosition</name></type> <name>rightBound</name> <init>= <expr><ternary><condition><expr><call><name><name>bounds</name><operator>.</operator><name>right</name><operator>.</operator><name>isMinimum</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>last</name><operator>.</operator><name>getToken</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>maxKeyBound</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name><name>bounds</name><operator>.</operator><name>right</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>leftBound</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>last</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name><name>rightBound</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>first</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>long</name></type> <name>left</name> <init>= <expr><call><name>getPosition</name><argument_list>(<argument><expr><name>leftBound</name></expr></argument>, <argument><expr><name><name>Operator</name><operator>.</operator><name>GT</name></name></expr></argument>)</argument_list></call><operator>.</operator><name>position</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>right</name> <init>= <expr><ternary><condition><expr><operator>(</operator><call><name><name>rightBound</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>last</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>
                         ?</condition><then> <expr><call><name>uncompressedLength</name><argument_list>()</argument_list></call></expr>
                         </then><else>: <expr><call><name>getPosition</name><argument_list>(<argument><expr><name>rightBound</name></expr></argument>, <argument><expr><name><name>Operator</name><operator>.</operator><name>GT</name></name></expr></argument>)</argument_list></call><operator>.</operator><name>position</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>left</name> <operator>==</operator> <name>right</name></expr>)</condition><block type="pseudo"><block_content>
                <comment type="line">// empty range</comment>
                <continue>continue;</continue></block_content></block></if></if_stmt>

            <assert>assert <expr><name>left</name> <operator>&lt;</operator> <name>right</name> <operator>:</operator> <call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Range=%s openReason=%s first=%s last=%s left=%d right=%d"</literal></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><name>openReason</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</assert>
            <expr_stmt><expr><call><name><name>positions</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PartitionPositionBounds</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>positions</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>KeyCacheKey</name></type> <name>getCacheKey</name><parameter_list>(<parameter><decl><type><name>DecoratedKey</name></type> <name>key</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>KeyCacheKey</name><argument_list>(<argument><expr><call><name>metadata</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>descriptor</name></expr></argument>, <argument><expr><call><name><name>key</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>cacheKey</name><parameter_list>(<parameter><decl><type><name>DecoratedKey</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>RowIndexEntry</name></type> <name>info</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CachingParams</name></type> <name>caching</name> <init>= <expr><call><name>metadata</name><argument_list>()</argument_list></call><operator>.</operator><name><name>params</name><operator>.</operator><name>caching</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>caching</name><operator>.</operator><name>cacheKeys</name></name><argument_list>()</argument_list></call> <operator>||</operator> <name>keyCache</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>keyCache</name><operator>.</operator><name>getCapacity</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>KeyCacheKey</name></type> <name>cacheKey</name> <init>= <expr><operator>new</operator> <call><name>KeyCacheKey</name><argument_list>(<argument><expr><call><name>metadata</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>descriptor</name></expr></argument>, <argument><expr><call><name><name>key</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Adding cache entry for {} -&gt; {}"</literal></expr></argument>, <argument><expr><name>cacheKey</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>keyCache</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>cacheKey</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>RowIndexEntry</name></type> <name>getCachedPosition</name><parameter_list>(<parameter><decl><type><name>DecoratedKey</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>updateStats</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isKeyCacheEnabled</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>getCachedPosition</name><argument_list>(<argument><expr><operator>new</operator> <call><name>KeyCacheKey</name><argument_list>(<argument><expr><call><name>metadata</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>descriptor</name></expr></argument>, <argument><expr><call><name><name>key</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>updateStats</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>RowIndexEntry</name></type> <name>getCachedPosition</name><parameter_list>(<parameter><decl><type><name>KeyCacheKey</name></type> <name>unifiedKey</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>updateStats</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isKeyCacheEnabled</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>updateStats</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>RowIndexEntry</name></type> <name>cachedEntry</name> <init>= <expr><call><name><name>keyCache</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>unifiedKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>keyCacheRequest</name><operator>.</operator><name>incrementAndGet</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>cachedEntry</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>keyCacheHit</name><operator>.</operator><name>incrementAndGet</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>bloomFilterTracker</name><operator>.</operator><name>addTruePositive</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <return>return <expr><name>cachedEntry</name></expr>;</return>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <return>return <expr><call><name><name>keyCache</name><operator>.</operator><name>getInternal</name></name><argument_list>(<argument><expr><name>unifiedKey</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isKeyCacheEnabled</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>keyCache</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name>metadata</name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>params</name><operator>.</operator><name>caching</name><operator>.</operator><name>cacheKeys</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Retrieves the position while updating the key cache and the stats.
     * @param key The key to apply as the rhs to the given Operator. A 'fake' key is allowed to
     * allow key selection by token bounds but only if op != * EQ
     * @param op The Operator defining matching keys: the nearest key to the target matching the operator wins.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>RowIndexEntry</name></type> <name>getPosition</name><parameter_list>(<parameter><decl><type><name>PartitionPosition</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>Operator</name></type> <name>op</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getPosition</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>SSTableReadsListener</name><operator>.</operator><name>NOOP_LISTENER</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Retrieves the position while updating the key cache and the stats.
     * @param key The key to apply as the rhs to the given Operator. A 'fake' key is allowed to
     * allow key selection by token bounds but only if op != * EQ
     * @param op The Operator defining matching keys: the nearest key to the target matching the operator wins.
     * @param listener the {@code SSTableReaderListener} that must handle the notifications.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>RowIndexEntry</name></type> <name>getPosition</name><parameter_list>(<parameter><decl><type><name>PartitionPosition</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>Operator</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>SSTableReadsListener</name></type> <name>listener</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getPosition</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>RowIndexEntry</name></type> <name>getPosition</name><parameter_list>(<parameter><decl><type><name>PartitionPosition</name></type> <name>key</name></decl></parameter>,
                                           <parameter><decl><type><name>Operator</name></type> <name>op</name></decl></parameter>,
                                           <parameter><decl><type><name>boolean</name></type> <name>updateCacheAndStats</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getPosition</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>updateCacheAndStats</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>SSTableReadsListener</name><operator>.</operator><name>NOOP_LISTENER</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @param key The key to apply as the rhs to the given Operator. A 'fake' key is allowed to
     * allow key selection by token bounds but only if op != * EQ
     * @param op The Operator defining matching keys: the nearest key to the target matching the operator wins.
     * @param updateCacheAndStats true if updating stats and cache
     * @param listener a listener used to handle internal events
     * @return The index entry corresponding to the key, or null if the key is not present
     */</comment>
    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>RowIndexEntry</name></type> <name>getPosition</name><parameter_list>(<parameter><decl><type><name>PartitionPosition</name></type> <name>key</name></decl></parameter>,
                                                 <parameter><decl><type><name>Operator</name></type> <name>op</name></decl></parameter>,
                                                 <parameter><decl><type><name>boolean</name></type> <name>updateCacheAndStats</name></decl></parameter>,
                                                 <parameter><decl><type><name>boolean</name></type> <name>permitMatchPastLast</name></decl></parameter>,
                                                 <parameter><decl><type><name>SSTableReadsListener</name></type> <name>listener</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>UnfilteredRowIterator</name></type> <name>iterator</name><parameter_list>(<parameter><decl><type><name>DecoratedKey</name></type> <name>key</name></decl></parameter>,
                                                   <parameter><decl><type><name>Slices</name></type> <name>slices</name></decl></parameter>,
                                                   <parameter><decl><type><name>ColumnFilter</name></type> <name>selectedColumns</name></decl></parameter>,
                                                   <parameter><decl><type><name>boolean</name></type> <name>reversed</name></decl></parameter>,
                                                   <parameter><decl><type><name>SSTableReadsListener</name></type> <name>listener</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>UnfilteredRowIterator</name></type> <name>iterator</name><parameter_list>(<parameter><decl><type><name>FileDataInput</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>DecoratedKey</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>RowIndexEntry</name></type> <name>indexEntry</name></decl></parameter>, <parameter><decl><type><name>Slices</name></type> <name>slices</name></decl></parameter>, <parameter><decl><type><name>ColumnFilter</name></type> <name>selectedColumns</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>reversed</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>UnfilteredRowIterator</name></type> <name>simpleIterator</name><parameter_list>(<parameter><decl><type><name>FileDataInput</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>DecoratedKey</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>RowIndexEntry</name></type> <name>indexEntry</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>tombstoneOnly</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Finds and returns the first key beyond a given token in this SSTable or null if no such key exists.
     */</comment>
    <function><type><specifier>public</specifier> <name>DecoratedKey</name></type> <name>firstKeyBeyond</name><parameter_list>(<parameter><decl><type><name>PartitionPosition</name></type> <name>token</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>token</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>first</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>first</name></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>long</name></type> <name>sampledPosition</name> <init>= <expr><call><name>getIndexScanPosition</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>ifile</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>path</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <init>(<decl><type><name>FileDataInput</name></type> <name>in</name> <init>= <expr><call><name><name>ifile</name><operator>.</operator><name>createReader</name></name><argument_list>(<argument><expr><name>sampledPosition</name></expr></argument>)</argument_list></call></expr></init></decl>)</init>
        <block>{<block_content>
            <expr_stmt><expr><name>path</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <while>while <condition>(<expr><operator>!</operator><call><name><name>in</name><operator>.</operator><name>isEOF</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>indexKey</name> <init>= <expr><call><name><name>ByteBufferUtil</name><operator>.</operator><name>readWithShortLength</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>DecoratedKey</name></type> <name>indexDecoratedKey</name> <init>= <expr><call><name>decorateKey</name><argument_list>(<argument><expr><name>indexKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>indexDecoratedKey</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><name>indexDecoratedKey</name></expr>;</return></block_content></block></if></if_stmt>

                <expr_stmt><expr><call><name><name>RowIndexEntry</name><operator>.</operator><name>Serializer</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name><name>descriptor</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>markSuspect</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>CorruptSSTableException</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>

        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return The length in bytes of the data for this SSTable. For
     * compressed files, this is not the same thing as the on disk size (see
     * onDiskLength())
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>uncompressedLength</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>dfile</name><operator>.</operator><name>dataLength</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return The length in bytes of the on disk size for this SSTable. For
     * compressed files, this is not the same thing as the data length (see
     * length())
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>onDiskLength</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>dfile</name><operator>.</operator><name>onDiskLength</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <name>double</name></type> <name>getCrcCheckChance</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>crcCheckChance</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Set the value of CRC check chance. The argument supplied is obtained
     * from the the property of the owning CFS. Called when either the SSTR
     * is initialized, or the CFS's property is updated via JMX
     * @param crcCheckChance
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCrcCheckChance</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>crcCheckChance</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>crcCheckChance</name></name> <operator>=</operator> <name>crcCheckChance</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dfile</name><operator>.</operator><name>compressionMetadata</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ifPresent</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>metadata</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>metadata</name><operator>.</operator><name>parameters</name><operator>.</operator><name>setCrcCheckChance</name></name><argument_list>(<argument><expr><name>crcCheckChance</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Mark the sstable as obsolete, i.e., compacted into newer sstables.
     *
     * When calling this function, the caller must ensure that the SSTableReader is not referenced anywhere
     * except for threads holding a reference.
     *
     * multiple times is usually buggy (see exceptions in Tracker.unmarkCompacting and removeOldSSTablesSize).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>markObsolete</name><parameter_list>(<parameter><decl><type><name>Runnable</name></type> <name>tidier</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Marking {} compacted"</literal></expr></argument>, <argument><expr><call><name>getFilename</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <synchronized>synchronized <init>(<expr><name><name>tidy</name><operator>.</operator><name>global</name></name></expr>)</init>
        <block>{<block_content>
            <assert>assert <expr><operator>!</operator><name><name>tidy</name><operator>.</operator><name>isReplaced</name></name></expr>;</assert>
            <assert>assert <expr><name><name>tidy</name><operator>.</operator><name>global</name><operator>.</operator><name>obsoletion</name></name> <operator>==</operator> <literal type="null">null</literal><operator>:</operator> <name>this</name> <operator>+</operator> <literal type="string">" was already marked compacted"</literal></expr>;</assert>

            <expr_stmt><expr><name><name>tidy</name><operator>.</operator><name>global</name><operator>.</operator><name>obsoletion</name></name> <operator>=</operator> <name>tidier</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>tidy</name><operator>.</operator><name>global</name><operator>.</operator><name>stopReadMeterPersistence</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></synchronized>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isMarkedCompacted</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>tidy</name><operator>.</operator><name>global</name><operator>.</operator><name>obsoletion</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>markSuspect</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Marking {} as a suspect to be excluded from reads."</literal></expr></argument>, <argument><expr><call><name>getFilename</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>isSuspect</name><operator>.</operator><name>getAndSet</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>unmarkSuspect</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>isSuspect</name><operator>.</operator><name>getAndSet</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isMarkedSuspect</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>isSuspect</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Direct I/O SSTableScanner over a defined range of tokens.
     *
     * @param range the range of keys to cover
     * @return A Scanner for seeking over the rows of the SSTable.
     */</comment>
    <function><type><specifier>public</specifier> <name>ISSTableScanner</name></type> <name>getScanner</name><parameter_list>(<parameter><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>range</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>getScanner</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><call><name>getScanner</name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>singletonList</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Direct I/O SSTableScanner over the entirety of the sstable..
     *
     * @return A Scanner over the full content of the SSTable.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>ISSTableScanner</name></type> <name>getScanner</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Direct I/O SSTableScanner over a defined collection of ranges of tokens.
     *
     * @param ranges the range of keys to cover
     * @return A Scanner for seeking over the rows of the SSTable.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>ISSTableScanner</name></type> <name>getScanner</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ranges</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Direct I/O SSTableScanner over an iterator of bounds.
     *
     * @param rangeIterator the keys to cover
     * @return A Scanner for seeking over the rows of the SSTable.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>ISSTableScanner</name></type> <name>getScanner</name><parameter_list>(<parameter><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>AbstractBounds</name><argument_list type="generic">&lt;<argument><name>PartitionPosition</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>rangeIterator</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @param columns the columns to return.
     * @param dataRange filter to use when reading the columns
     * @param listener a listener used to handle internal read events
     * @return A Scanner for seeking over the rows of the SSTable.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>ISSTableScanner</name></type> <name>getScanner</name><parameter_list>(<parameter><decl><type><name>ColumnFilter</name></type> <name>columns</name></decl></parameter>, <parameter><decl><type><name>DataRange</name></type> <name>dataRange</name></decl></parameter>, <parameter><decl><type><name>SSTableReadsListener</name></type> <name>listener</name></decl></parameter>)</parameter_list>;</function_decl>

    <function><type><specifier>public</specifier> <name>FileDataInput</name></type> <name>getFileDataInput</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>position</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>dfile</name><operator>.</operator><name>createReader</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Tests if the sstable contains data newer than the given age param (in localhost currentMilli time).
     * This works in conjunction with maxDataAge which is an upper bound on the create of data in this sstable.
     * @param age The age to compare the maxDataAre of this sstable. Measured in millisec since epoc on this host
     * @return True iff this sstable contains data that's newer than the given age parameter.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>newSince</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>age</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>maxDataAge</name> <operator>&gt;</operator> <name>age</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>createLinks</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>snapshotDirectoryPath</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>createLinks</name><argument_list>(<argument><expr><name>snapshotDirectoryPath</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>createLinks</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>snapshotDirectoryPath</name></decl></parameter>, <parameter><decl><type><name>RateLimiter</name></type> <name>rateLimiter</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>createLinks</name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>, <argument><expr><name>components</name></expr></argument>, <argument><expr><name>snapshotDirectoryPath</name></expr></argument>, <argument><expr><name>rateLimiter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>createLinks</name><parameter_list>(<parameter><decl><type><name>Descriptor</name></type> <name>descriptor</name></decl></parameter>, <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Component</name></argument>&gt;</argument_list></name></type> <name>components</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>snapshotDirectoryPath</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>createLinks</name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>, <argument><expr><name>components</name></expr></argument>, <argument><expr><name>snapshotDirectoryPath</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>createLinks</name><parameter_list>(<parameter><decl><type><name>Descriptor</name></type> <name>descriptor</name></decl></parameter>, <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Component</name></argument>&gt;</argument_list></name></type> <name>components</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>snapshotDirectoryPath</name></decl></parameter>, <parameter><decl><type><name>RateLimiter</name></type> <name>limiter</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>Component</name></type> <name>component</name> <range>: <expr><name>components</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>File</name></type> <name>sourceFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>descriptor</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name>component</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>sourceFile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name>limiter</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>limiter</name><operator>.</operator><name>acquire</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name>File</name></type> <name>targetLink</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>snapshotDirectoryPath</name></expr></argument>, <argument><expr><call><name><name>sourceFile</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>createHardLink</name></name><argument_list>(<argument><expr><name>sourceFile</name></expr></argument>, <argument><expr><name>targetLink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isRepaired</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>sstableMetadata</name><operator>.</operator><name>repairedAt</name></name> <operator>!=</operator> <name><name>ActiveRepairService</name><operator>.</operator><name>UNREPAIRED_SSTABLE</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>DecoratedKey</name></type> <name>keyAt</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>indexPosition</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>DecoratedKey</name></type> <name>key</name></decl>;</decl_stmt>
        <try>try <init>(<decl><type><name>FileDataInput</name></type> <name>in</name> <init>= <expr><call><name><name>ifile</name><operator>.</operator><name>createReader</name></name><argument_list>(<argument><expr><name>indexPosition</name></expr></argument>)</argument_list></call></expr></init></decl>)</init>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>in</name><operator>.</operator><name>isEOF</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>decorateKey</name><argument_list>(<argument><expr><call><name><name>ByteBufferUtil</name><operator>.</operator><name>readWithShortLength</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// hint read path about key location if caching is enabled</comment>
            <comment type="line">// this saves index summary lookup and index file iteration which whould be pretty costly</comment>
            <comment type="line">// especially in presence of promoted column indexes</comment>
            <if_stmt><if>if <condition>(<expr><call><name>isKeyCacheEnabled</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>cacheKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name><name>rowIndexEntrySerializer</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></try>

        <return>return <expr><name>key</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isPendingRepair</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>sstableMetadata</name><operator>.</operator><name>pendingRepair</name></name> <operator>!=</operator> <name><name>ActiveRepairService</name><operator>.</operator><name>NO_PENDING_REPAIR</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>UUID</name></type> <name>getPendingRepair</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>sstableMetadata</name><operator>.</operator><name>pendingRepair</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getRepairedAt</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>sstableMetadata</name><operator>.</operator><name>repairedAt</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isTransient</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>sstableMetadata</name><operator>.</operator><name>isTransient</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>intersects</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ranges</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Bounds</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name> <init>= <expr><operator>new</operator> <call><name><name>Bounds</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>first</name><operator>.</operator><name>getToken</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>last</name><operator>.</operator><name>getToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>Iterables</name><operator>.</operator><name>any</name></name><argument_list>(<argument><expr><name>ranges</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>r</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>r</name><operator>.</operator><name>intersects</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * TODO: Move someplace reusable
     */</comment>
    <class><specifier>public</specifier> <specifier>abstract</specifier> <specifier>static</specifier> class <name>Operator</name>
    <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Operator</name></type> <name>EQ</name> <init>= <expr><operator>new</operator> <call><name>Equals</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Operator</name></type> <name>GE</name> <init>= <expr><operator>new</operator> <call><name>GreaterThanOrEqualTo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Operator</name></type> <name>GT</name> <init>= <expr><operator>new</operator> <call><name>GreaterThan</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * @param comparison The result of a call to compare/compareTo, with the desired field on the rhs.
         * @return less than 0 if the operator cannot match forward, 0 if it matches, greater than 0 if it might match forward.
         */</comment>
        <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>int</name></type> <name>apply</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>comparison</name></decl></parameter>)</parameter_list>;</function_decl>

        <class><specifier>final</specifier> <specifier>static</specifier> class <name>Equals</name> <super_list><extends>extends <super><name>Operator</name></super></extends></super_list>
        <block>{
            <function><type><specifier>public</specifier> <name>int</name></type> <name>apply</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>comparison</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>-</operator><name>comparison</name></expr>;</return> </block_content>}</block></function>
        }</block></class>

        <class><specifier>final</specifier> <specifier>static</specifier> class <name>GreaterThanOrEqualTo</name> <super_list><extends>extends <super><name>Operator</name></super></extends></super_list>
        <block>{
            <function><type><specifier>public</specifier> <name>int</name></type> <name>apply</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>comparison</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><ternary><condition><expr><name>comparison</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return> </block_content>}</block></function>
        }</block></class>

        <class><specifier>final</specifier> <specifier>static</specifier> class <name>GreaterThan</name> <super_list><extends>extends <super><name>Operator</name></super></extends></super_list>
        <block>{
            <function><type><specifier>public</specifier> <name>int</name></type> <name>apply</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>comparison</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><ternary><condition><expr><name>comparison</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return> </block_content>}</block></function>
        }</block></class>
    }</block></class>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getBloomFilterFalsePositiveCount</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>bloomFilterTracker</name><operator>.</operator><name>getFalsePositiveCount</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getRecentBloomFilterFalsePositiveCount</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>bloomFilterTracker</name><operator>.</operator><name>getRecentFalsePositiveCount</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getBloomFilterTruePositiveCount</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>bloomFilterTracker</name><operator>.</operator><name>getTruePositiveCount</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getRecentBloomFilterTruePositiveCount</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>bloomFilterTracker</name><operator>.</operator><name>getRecentTruePositiveCount</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getBloomFilterTrueNegativeCount</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>bloomFilterTracker</name><operator>.</operator><name>getTrueNegativeCount</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getRecentBloomFilterTrueNegativeCount</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>bloomFilterTracker</name><operator>.</operator><name>getRecentTrueNegativeCount</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>InstrumentingCache</name><argument_list type="generic">&lt;<argument><name>KeyCacheKey</name></argument>, <argument><name>RowIndexEntry</name></argument>&gt;</argument_list></name></type> <name>getKeyCache</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>keyCache</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>EstimatedHistogram</name></type> <name>getEstimatedPartitionSize</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>sstableMetadata</name><operator>.</operator><name>estimatedPartitionSize</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>EstimatedHistogram</name></type> <name>getEstimatedCellPerPartitionCount</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>sstableMetadata</name><operator>.</operator><name>estimatedCellPerPartitionCount</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>double</name></type> <name>getEstimatedDroppableTombstoneRatio</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>gcBefore</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>sstableMetadata</name><operator>.</operator><name>getEstimatedDroppableTombstoneRatio</name></name><argument_list>(<argument><expr><name>gcBefore</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>double</name></type> <name>getDroppableTombstonesBefore</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>gcBefore</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>sstableMetadata</name><operator>.</operator><name>getDroppableTombstonesBefore</name></name><argument_list>(<argument><expr><name>gcBefore</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>double</name></type> <name>getCompressionRatio</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>sstableMetadata</name><operator>.</operator><name>compressionRatio</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getMinTimestamp</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>sstableMetadata</name><operator>.</operator><name>minTimestamp</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getMaxTimestamp</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>sstableMetadata</name><operator>.</operator><name>maxTimestamp</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getMinLocalDeletionTime</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>sstableMetadata</name><operator>.</operator><name>minLocalDeletionTime</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getMaxLocalDeletionTime</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>sstableMetadata</name><operator>.</operator><name>maxLocalDeletionTime</name></name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Whether the sstable may contain tombstones or if it is guaranteed to not contain any.
     * &lt;p&gt;
     * Note that having that method return {@code false} guarantees the sstable has no tombstones whatsoever (so no
     * cell tombstone, no range tombstone maker and no expiring columns), but having it return {@code true} doesn't
     * guarantee it contains any as it may simply have non-expired cells.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>mayHaveTombstones</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <comment type="line">// A sstable is guaranteed to have no tombstones if minLocalDeletionTime is still set to its default,</comment>
        <comment type="line">// Cell.NO_DELETION_TIME, which is bigger than any valid deletion times.</comment>
        <return>return <expr><call><name>getMinLocalDeletionTime</name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>Cell</name><operator>.</operator><name>NO_DELETION_TIME</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getMinTTL</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>sstableMetadata</name><operator>.</operator><name>minTTL</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getMaxTTL</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>sstableMetadata</name><operator>.</operator><name>maxTTL</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getTotalColumnsSet</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>sstableMetadata</name><operator>.</operator><name>totalColumnsSet</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getTotalRows</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>sstableMetadata</name><operator>.</operator><name>totalRows</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getAvgColumnSetPerRow</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name><name>sstableMetadata</name><operator>.</operator><name>totalRows</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>
             ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr>
             </then><else>: <expr><operator>(</operator><ternary><condition><expr><name><name>sstableMetadata</name><operator>.</operator><name>totalRows</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>sstableMetadata</name><operator>.</operator><name>totalColumnsSet</name></name> <operator>/</operator> <name><name>sstableMetadata</name><operator>.</operator><name>totalRows</name></name><operator>)</operator></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getSSTableLevel</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>sstableMetadata</name><operator>.</operator><name>sstableLevel</name></name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Mutate sstable level with a lock to avoid racing with entire-sstable-streaming and then reload sstable metadata
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>mutateLevelAndReload</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>newLevel</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <synchronized>synchronized <init>(<expr><name><name>tidy</name><operator>.</operator><name>global</name></name></expr>)</init>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>descriptor</name><operator>.</operator><name>getMetadataSerializer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>mutateLevel</name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>, <argument><expr><name>newLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>reloadSSTableMetadata</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></synchronized>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Mutate sstable repair metadata with a lock to avoid racing with entire-sstable-streaming and then reload sstable metadata
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>mutateRepairedAndReload</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>newRepairedAt</name></decl></parameter>, <parameter><decl><type><name>UUID</name></type> <name>newPendingRepair</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isTransient</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <synchronized>synchronized <init>(<expr><name><name>tidy</name><operator>.</operator><name>global</name></name></expr>)</init>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>descriptor</name><operator>.</operator><name>getMetadataSerializer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>mutateRepairMetadata</name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>, <argument><expr><name>newRepairedAt</name></expr></argument>, <argument><expr><name>newPendingRepair</name></expr></argument>, <argument><expr><name>isTransient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>reloadSSTableMetadata</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></synchronized>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Reloads the sstable metadata from disk.
     *
     * Called after level is changed on sstable, for example if the sstable is dropped to L0
     *
     * Might be possible to remove in future versions
     *
     * @throws IOException
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>reloadSSTableMetadata</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sstableMetadata</name></name> <operator>=</operator> <operator>(</operator><name>StatsMetadata</name><operator>)</operator> <call><name><name>descriptor</name><operator>.</operator><name>getMetadataSerializer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>deserialize</name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>, <argument><expr><name><name>MetadataType</name><operator>.</operator><name>STATS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>StatsMetadata</name></type> <name>getSSTableMetadata</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>sstableMetadata</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>RandomAccessReader</name></type> <name>openDataReader</name><parameter_list>(<parameter><decl><type><name>RateLimiter</name></type> <name>limiter</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><name>limiter</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
        <return>return <expr><call><name><name>dfile</name><operator>.</operator><name>createReader</name></name><argument_list>(<argument><expr><name>limiter</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>RandomAccessReader</name></type> <name>openDataReader</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>dfile</name><operator>.</operator><name>createReader</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>RandomAccessReader</name></type> <name>openIndexReader</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>ifile</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>ifile</name><operator>.</operator><name>createReader</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>ChannelProxy</name></type> <name>getDataChannel</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>dfile</name><operator>.</operator><name>channel</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>ChannelProxy</name></type> <name>getIndexChannel</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>ifile</name><operator>.</operator><name>channel</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>FileHandle</name></type> <name>getIndexFile</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>ifile</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @param component component to get timestamp.
     * @return last modified time for given component. 0 if given component does not exist or IO error occurs.
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getCreationTimeFor</name><parameter_list>(<parameter><decl><type><name>Component</name></type> <name>component</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>descriptor</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name>component</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>lastModified</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return Number of key cache hit
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getKeyCacheHit</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>keyCacheHit</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return Number of key cache request
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getKeyCacheRequest</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>keyCacheRequest</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Increment the total read count and read rate for this SSTable.  This should not be incremented for non-query reads,
     * like compaction.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>incrementReadCount</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>readMeter</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>readMeter</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>EncodingStats</name></type> <name>stats</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <comment type="line">// We could return sstable.header.stats(), but this may not be as accurate than the actual sstable stats (see</comment>
        <comment type="line">// SerializationHeader.make() for details) so we use the latter instead.</comment>
        <return>return <expr><name><name>sstableMetadata</name><operator>.</operator><name>encodingStats</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Ref</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>tryRef</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>selfRef</name><operator>.</operator><name>tryRef</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Ref</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>selfRef</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>selfRef</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Ref</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>ref</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>selfRef</name><operator>.</operator><name>ref</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>setup</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>trackHotness</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>tidy</name><operator>.</operator><name>setup</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>trackHotness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>readMeter</name></name> <operator>=</operator> <name><name>tidy</name><operator>.</operator><name>global</name><operator>.</operator><name>readMeter</name></name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>overrideReadMeter</name><parameter_list>(<parameter><decl><type><name>RestorableMeter</name></type> <name>readMeter</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>readMeter</name></name> <operator>=</operator> <name><name>tidy</name><operator>.</operator><name>global</name><operator>.</operator><name>readMeter</name></name> <operator>=</operator> <name>readMeter</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addTo</name><parameter_list>(<parameter><decl><type><name><name>Ref</name><operator>.</operator><name>IdentityCollection</name></name></type> <name>identities</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>identities</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>identities</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>tidy</name><operator>.</operator><name>globalRef</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dfile</name><operator>.</operator><name>addTo</name></name><argument_list>(<argument><expr><name>identities</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ifile</name><operator>.</operator><name>addTo</name></name><argument_list>(<argument><expr><name>identities</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bf</name><operator>.</operator><name>addTo</name></name><argument_list>(<argument><expr><name>identities</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>indexSummary</name><operator>.</operator><name>addTo</name></name><argument_list>(<argument><expr><name>identities</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * One instance per SSTableReader we create.
     *
     * We can create many InstanceTidiers (one for every time we reopen an sstable with MOVED_START for example),
     * but there can only be one GlobalTidy for one single logical sstable.
     *
     * When the InstanceTidier cleansup, it releases its reference to its GlobalTidy; when all InstanceTidiers
     * for that type have run, the GlobalTidy cleans up.
     */</comment>
    <class><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>InstanceTidier</name> <super_list><implements>implements <super><name>Tidy</name></super></implements></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Descriptor</name></type> <name>descriptor</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>TableId</name></type> <name>tableId</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>IFilter</name></type> <name>bf</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>IndexSummary</name></type> <name>summary</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <name>FileHandle</name></type> <name>dfile</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>FileHandle</name></type> <name>ifile</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>Runnable</name></type> <name>runOnClose</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>isReplaced</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// a reference to our shared tidy instance, that</comment>
        <comment type="line">// we will release when we are ourselves released</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name><name>Ref</name><argument_list type="generic">&lt;<argument><name>GlobalTidy</name></argument>&gt;</argument_list></name></type> <name>globalRef</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>GlobalTidy</name></type> <name>global</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>setup</name></decl>;</decl_stmt>

        <function><type><name>void</name></type> <name>setup</name><parameter_list>(<parameter><decl><type><name>SSTableReader</name></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>trackHotness</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>setup</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bf</name></name> <operator>=</operator> <name><name>reader</name><operator>.</operator><name>bf</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>summary</name></name> <operator>=</operator> <name><name>reader</name><operator>.</operator><name>indexSummary</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dfile</name></name> <operator>=</operator> <name><name>reader</name><operator>.</operator><name>dfile</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ifile</name></name> <operator>=</operator> <name><name>reader</name><operator>.</operator><name>ifile</name></name></expr>;</expr_stmt>
            <comment type="line">// get a new reference to the shared descriptor-type tidy</comment>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>globalRef</name></name> <operator>=</operator> <call><name><name>GlobalTidy</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>global</name></name> <operator>=</operator> <call><name><name>globalRef</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>trackHotness</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>global</name><operator>.</operator><name>ensureReadMeter</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></function>

        <constructor><name>InstanceTidier</name><parameter_list>(<parameter><decl><type><name>Descriptor</name></type> <name>descriptor</name></decl></parameter>, <parameter><decl><type><name>TableId</name></type> <name>tableId</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>descriptor</name></name> <operator>=</operator> <name>descriptor</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tableId</name></name> <operator>=</operator> <name>tableId</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>tidy</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Running instance tidier for {} with setup {}"</literal></expr></argument>, <argument><expr><name>descriptor</name></expr></argument>, <argument><expr><name>setup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="line">// don't try to cleanup if the sstablereader was never fully constructed</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>setup</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return;</return></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name>ColumnFamilyStore</name></type> <name>cfs</name> <init>= <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getColumnFamilyStoreInstance</name></name><argument_list>(<argument><expr><name>tableId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>OpOrder</name><operator>.</operator><name>Barrier</name></name></type> <name>barrier</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>cfs</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>barrier</name> <operator>=</operator> <call><name><name>cfs</name><operator>.</operator><name>readOrdering</name><operator>.</operator><name>newBarrier</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>barrier</name><operator>.</operator><name>issue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>barrier</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt><expr><call><name><name>ScheduledExecutors</name><operator>.</operator><name>nonPeriodicTasks</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list>
            <block>{
                <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Async instance tidier for {}, before barrier"</literal></expr></argument>, <argument><expr><name>descriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <if_stmt><if>if <condition>(<expr><name>barrier</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>barrier</name><operator>.</operator><name>await</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Async instance tidier for {}, after barrier"</literal></expr></argument>, <argument><expr><name>descriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <if_stmt><if>if <condition>(<expr><name>bf</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>bf</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>summary</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>summary</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>runOnClose</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>runOnClose</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>dfile</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>dfile</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ifile</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>ifile</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>globalRef</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                    <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Async instance tidier for {}, completed"</literal></expr></argument>, <argument><expr><name>descriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>String</name></type> <name>name</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>descriptor</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><name>void</name></type> <name>releaseSummary</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>summary</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <assert>assert <expr><call><name><name>summary</name><operator>.</operator><name>isCleanedUp</name></name><argument_list>()</argument_list></call></expr>;</assert>
            <expr_stmt><expr><name>summary</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * One instance per logical sstable. This both tracks shared cleanup and some shared state related
     * to the sstable's lifecycle.
     *
     * All InstanceTidiers, on setup(), ask the static get() method for their shared state,
     * and stash a reference to it to be released when they are. Once all such references are
     * released, this shared tidy will be performed.
     */</comment>
    <class><specifier>static</specifier> <specifier>final</specifier> class <name>GlobalTidy</name> <super_list><implements>implements <super><name>Tidy</name></super></implements></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name><name>ScheduledFuture</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>NULL</name> <init>= <expr><operator>new</operator> <call><name><name>WeakReference</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// keyed by descriptor, mapping to the shared GlobalTidy for that descriptor</comment>
        <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name><name>ConcurrentMap</name><argument_list type="generic">&lt;<argument><name>Descriptor</name></argument>, <argument><name><name>Ref</name><argument_list type="generic">&lt;<argument><name>GlobalTidy</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>lookup</name> <init>= <expr><operator>new</operator> <call><name><name>ConcurrentHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Descriptor</name></type> <name>desc</name></decl>;</decl_stmt>
        <comment type="line">// the readMeter that is shared between all instances of the sstable, and can be overridden in all of them</comment>
        <comment type="line">// at once also, for testing purposes</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>RestorableMeter</name></type> <name>readMeter</name></decl>;</decl_stmt>
        <comment type="line">// the scheduled persistence of the readMeter, that we will cancel once all instances of this logical</comment>
        <comment type="line">// sstable have been released</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name><name>ScheduledFuture</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>readMeterSyncFuture</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <comment type="line">// shared state managing if the logical sstable has been compacted; this is used in cleanup</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>Runnable</name></type> <name>obsoletion</name></decl>;</decl_stmt>

        <constructor><name>GlobalTidy</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>SSTableReader</name></type> <name>reader</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>desc</name></name> <operator>=</operator> <name><name>reader</name><operator>.</operator><name>descriptor</name></name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><name>void</name></type> <name>ensureReadMeter</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>readMeter</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return;</return></block_content></block></if></if_stmt>

            <comment type="line">// Don't track read rates for tables in the system keyspace and don't bother trying to load or persist</comment>
            <comment type="line">// the read meter when in client mode.</comment>
            <comment type="line">// Also, do not track read rates when running in client or tools mode (syncExecuter isn't available in these modes)</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>SchemaConstants</name><operator>.</operator><name>isLocalSystemKeyspace</name></name><argument_list>(<argument><expr><name><name>desc</name><operator>.</operator><name>ksname</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>isClientOrToolInitialized</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>readMeter</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>readMeterSyncFuture</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>readMeter</name> <operator>=</operator> <call><name><name>SystemKeyspace</name><operator>.</operator><name>getSSTableReadMeter</name></name><argument_list>(<argument><expr><name><name>desc</name><operator>.</operator><name>ksname</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>.</operator><name>cfname</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>.</operator><name>generation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// sync the average read rate to system.sstable_activity every five minutes, starting one minute from now</comment>
            <expr_stmt><expr><name>readMeterSyncFuture</name> <operator>=</operator> <operator>new</operator> <call><name><name>WeakReference</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>syncExecutor</name><operator>.</operator><name>scheduleAtFixedRate</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list>
            <block>{
                <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>obsoletion</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name><name>meterSyncThrottle</name><operator>.</operator><name>acquire</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>persistSSTableReadMeter</name></name><argument_list>(<argument><expr><name><name>desc</name><operator>.</operator><name>ksname</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>.</operator><name>cfname</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>.</operator><name>generation</name></name></expr></argument>, <argument><expr><name>readMeter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></function>
            }</block></class></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MINUTES</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>stopReadMeterPersistence</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>ScheduledFuture</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>readMeterSyncFutureLocal</name> <init>= <expr><call><name><name>readMeterSyncFuture</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>readMeterSyncFutureLocal</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>readMeterSyncFutureLocal</name><operator>.</operator><name>cancel</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>readMeterSyncFuture</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>tidy</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>lookup</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>obsoletion</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>obsoletion</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="line">// don't ideally want to dropPageCache for the file until all instances have been released</comment>
            <expr_stmt><expr><call><name><name>NativeLibrary</name><operator>.</operator><name>trySkipCache</name></name><argument_list>(<argument><expr><call><name><name>desc</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>DATA</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>NativeLibrary</name><operator>.</operator><name>trySkipCache</name></name><argument_list>(<argument><expr><call><name><name>desc</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>PRIMARY_INDEX</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>String</name></type> <name>name</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>desc</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <comment type="line">// get a new reference to the shared GlobalTidy for this sstable</comment>
        <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"resource"</literal></expr></argument>)</argument_list></annotation>
        <type><specifier>public</specifier> <specifier>static</specifier> <name><name>Ref</name><argument_list type="generic">&lt;<argument><name>GlobalTidy</name></argument>&gt;</argument_list></name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>SSTableReader</name></type> <name>sstable</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>Descriptor</name></type> <name>descriptor</name> <init>= <expr><name><name>sstable</name><operator>.</operator><name>descriptor</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Ref</name><argument_list type="generic">&lt;<argument><name>GlobalTidy</name></argument>&gt;</argument_list></name></type> <name>refc</name> <init>= <expr><call><name><name>lookup</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>refc</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><call><name><name>refc</name><operator>.</operator><name>ref</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>GlobalTidy</name></type> <name>tidy</name> <init>= <expr><operator>new</operator> <call><name>GlobalTidy</name><argument_list>(<argument><expr><name>sstable</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>refc</name> <operator>=</operator> <operator>new</operator> <call><name><name>Ref</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>tidy</name></expr></argument>, <argument><expr><name>tidy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>Ref</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>ex</name> <init>= <expr><call><name><name>lookup</name><operator>.</operator><name>putIfAbsent</name></name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>, <argument><expr><name>refc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ex</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>refc</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>()</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>refc</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>resetTidying</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>GlobalTidy</name><operator>.</operator><name>lookup</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>abstract</specifier> class <name>Factory</name>
    <block>{
        <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>SSTableReader</name></type> <name>open</name><parameter_list>(<parameter><decl><type><name>SSTableReaderBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list>;</function_decl>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>PartitionPositionBounds</name>
    <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>long</name></type> <name>lowerPosition</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>long</name></type> <name>upperPosition</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>PartitionPositionBounds</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>lower</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>upper</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lowerPosition</name></name> <operator>=</operator> <name>lower</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>upperPosition</name></name> <operator>=</operator> <name>upper</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>hashCode</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name>lowerPosition</name> <operator>^</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>lowerPosition</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
            <return>return <expr><literal type="number">31</literal> <operator>*</operator> <operator>(</operator><name>hashCode</name> <operator>^</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <name>upperPosition</name> <operator>^</operator>  <operator>(</operator><name>upperPosition</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>o</name> <operator>instanceof</operator> <name>PartitionPositionBounds</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name>PartitionPositionBounds</name></type> <name>that</name> <init>= <expr><operator>(</operator><name>PartitionPositionBounds</name><operator>)</operator><name>o</name></expr></init></decl>;</decl_stmt>
            <return>return <expr><name>lowerPosition</name> <operator>==</operator> <name><name>that</name><operator>.</operator><name>lowerPosition</name></name> <operator>&amp;&amp;</operator> <name>upperPosition</name> <operator>==</operator> <name><name>that</name><operator>.</operator><name>upperPosition</name></name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>IndexesBounds</name>
    <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>lowerPosition</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>upperPosition</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>IndexesBounds</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lower</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>upper</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lowerPosition</name></name> <operator>=</operator> <name>lower</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>upperPosition</name></name> <operator>=</operator> <name>upper</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><literal type="number">31</literal> <operator>*</operator> <name>lowerPosition</name> <operator>*</operator> <name>upperPosition</name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>o</name> <operator>instanceof</operator> <name>IndexesBounds</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name>IndexesBounds</name></type> <name>that</name> <init>= <expr><operator>(</operator><name>IndexesBounds</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>
            <return>return <expr><name>lowerPosition</name> <operator>==</operator> <name><name>that</name><operator>.</operator><name>lowerPosition</name></name> <operator>&amp;&amp;</operator> <name>upperPosition</name> <operator>==</operator> <name><name>that</name><operator>.</operator><name>upperPosition</name></name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Moves the sstable in oldDescriptor to a new place (with generation etc) in newDescriptor.
     *
     * All components given will be moved/renamed
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>SSTableReader</name></type> <name>moveAndOpenSSTable</name><parameter_list>(<parameter><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name></decl></parameter>, <parameter><decl><type><name>Descriptor</name></type> <name>oldDescriptor</name></decl></parameter>, <parameter><decl><type><name>Descriptor</name></type> <name>newDescriptor</name></decl></parameter>, <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Component</name></argument>&gt;</argument_list></name></type> <name>components</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>copyData</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>oldDescriptor</name><operator>.</operator><name>isCompatible</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Can't open incompatible SSTable! Current version %s, found file: %s"</literal></expr></argument>,
                                                     <argument><expr><call><name><name>oldDescriptor</name><operator>.</operator><name>getFormat</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLatestVersion</name><argument_list>()</argument_list></call></expr></argument>,
                                                     <argument><expr><name>oldDescriptor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>boolean</name></type> <name>isLive</name> <init>= <expr><call><name><name>cfs</name><operator>.</operator><name>getLiveSSTables</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call><operator>.</operator><call><name>anyMatch</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>r</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>r</name><operator>.</operator><name>descriptor</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>newDescriptor</name></expr></argument>)</argument_list></call>
                                                                      <operator>||</operator> <call><name><name>r</name><operator>.</operator><name>descriptor</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>oldDescriptor</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>isLive</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>message</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Can't move and open a file that is already in use in the table %s -&gt; %s"</literal></expr></argument>, <argument><expr><name>oldDescriptor</name></expr></argument>, <argument><expr><name>newDescriptor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>newDescriptor</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>DATA</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>exists</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>msg</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"File %s already exists, can't move the file there"</literal></expr></argument>, <argument><expr><call><name><name>newDescriptor</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>DATA</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>copyData</name></expr>)</condition>
        <block>{<block_content>
            <try>try
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Hardlinking new SSTable {} to {}"</literal></expr></argument>, <argument><expr><name>oldDescriptor</name></expr></argument>, <argument><expr><name>newDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>SSTableWriter</name><operator>.</operator><name>hardlink</name></name><argument_list>(<argument><expr><name>oldDescriptor</name></expr></argument>, <argument><expr><name>newDescriptor</name></expr></argument>, <argument><expr><name>components</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>FSWriteError</name></type> <name>ex</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Unable to hardlink new SSTable {} to {}, falling back to copying"</literal></expr></argument>, <argument><expr><name>oldDescriptor</name></expr></argument>, <argument><expr><name>newDescriptor</name></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>SSTableWriter</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><name>oldDescriptor</name></expr></argument>, <argument><expr><name>newDescriptor</name></expr></argument>, <argument><expr><name>components</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Moving new SSTable {} to {}"</literal></expr></argument>, <argument><expr><name>oldDescriptor</name></expr></argument>, <argument><expr><name>newDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>SSTableWriter</name><operator>.</operator><name>rename</name></name><argument_list>(<argument><expr><name>oldDescriptor</name></expr></argument>, <argument><expr><name>newDescriptor</name></expr></argument>, <argument><expr><name>components</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <decl_stmt><decl><type><name>SSTableReader</name></type> <name>reader</name></decl>;</decl_stmt>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><name>reader</name> <operator>=</operator> <call><name><name>SSTableReader</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>newDescriptor</name></expr></argument>, <argument><expr><name>components</name></expr></argument>, <argument><expr><name><name>cfs</name><operator>.</operator><name>metadata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Aborting import of sstables. {} was corrupt"</literal></expr></argument>, <argument><expr><name>newDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>newDescriptor</name> <operator>+</operator> <literal type="string">" is corrupt, can't import"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
        <return>return <expr><name>reader</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>shutdownBlocking</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>TimeUnit</name></type> <name>unit</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>InterruptedException</name></expr></argument>, <argument><expr><name>TimeoutException</name></expr></argument></throws>
    <block>{<block_content>

        <expr_stmt><expr><call><name><name>ExecutorUtils</name><operator>.</operator><name>shutdownNowAndWait</name></name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>, <argument><expr><name>syncExecutor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>resetTidying</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>
