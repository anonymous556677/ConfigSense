<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/schema/TableMetadata.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>MoreObjects</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>*</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>auth</name><operator>.</operator><name>DataResource</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>ColumnIdentifier</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>CqlBuilder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>SchemaElement</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>IPartitioner</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>ConfigurationException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>InvalidRequestException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>reads</name><operator>.</operator><name>SpeculativeRetryPolicy</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>AbstractIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>github</name><operator>.</operator><name>jamm</name><operator>.</operator><name>Unmetered</name></name>;</import>

<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name><operator>.</operator><name>any</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name><operator>.</operator><name>transform</name></name>;</import>
<import>import static <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name><operator>.</operator><name>format</name></name>;</import>
<import>import static <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Collectors</name><operator>.</operator><name>toList</name></name>;</import>
<import>import static <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Collectors</name><operator>.</operator><name>toSet</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>IndexMetadata</name><operator>.</operator><name>isNameValid</name></name>;</import>

<class><annotation>@<name>Unmetered</name></annotation>
<specifier>public</specifier> class <name>TableMetadata</name> <super_list><implements>implements <super><name>SchemaElement</name></super></implements></super_list>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>TableMetadata</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Please note that currently the only one truly useful flag is COUNTER, as the rest of the flags were about</comment>
    <comment type="line">// differencing between CQL tables and the various types of COMPACT STORAGE tables (pre-4.0). As those "compact"</comment>
    <comment type="line">// tables are not supported anymore, no tables should be either SUPER or DENSE, and they should all be COMPOUND.</comment>
    <enum><specifier>public</specifier> enum <name>Flag</name>
    <block>{
        <comment type="line">// As mentioned above, all tables on 4.0+ will have the COMPOUND flag, making the flag of little value. However,</comment>
        <comment type="line">// on upgrade from pre-4.0, we want to detect if a tables does _not_ have this flag, in which case this would</comment>
        <comment type="line">// be a compact table on which DROP COMPACT STORAGE has _not_ be used and fail startup. This is also why we</comment>
        <comment type="line">// still write this flag for all tables. Once we drop support for upgrading from pre-4.0 versions (and so are</comment>
        <comment type="line">// sure all tables do have the flag), we can stop writing this flag and ignore it when present (deprecate it).</comment>
        <comment type="line">// Later, we'll be able to drop the flag from this enum completely.</comment>
        <decl><name>COMPOUND</name></decl>,
        <decl><name>DENSE</name></decl>,
        <decl><name>COUNTER</name></decl>,
        <comment type="line">// The only reason we still have those is that on the first startup after an upgrade from pre-4.0, we cannot</comment>
        <comment type="line">// guarantee some tables won't have those flags (users having forgotten to use DROP COMPACT STORAGE before</comment>
        <comment type="line">// upgrading). So we still "deserialize" those flags correctly, but otherwise prevent startup if any table</comment>
        <comment type="line">// have them. Once we drop support for upgrading from pre-4.0, we can remove those values.</comment>
        @<decl><name>Deprecated</name> <name>SUPER</name></decl>;

        <comment type="block">/*
         *  We call dense a CF for which each component of the comparator is a clustering column, i.e. no
         * component is used to store a regular column names. In other words, non-composite static "thrift"
         * and CQL3 CF are *not* dense.
         */</comment>
        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isDense</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>TableMetadata</name><operator>.</operator><name>Flag</name></name></argument>&gt;</argument_list></name></type> <name>flags</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>flags</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>TableMetadata</name><operator>.</operator><name>Flag</name><operator>.</operator><name>DENSE</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isCompound</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>TableMetadata</name><operator>.</operator><name>Flag</name></name></argument>&gt;</argument_list></name></type> <name>flags</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>flags</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>TableMetadata</name><operator>.</operator><name>Flag</name><operator>.</operator><name>COMPOUND</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>


        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isSuper</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>TableMetadata</name><operator>.</operator><name>Flag</name></name></argument>&gt;</argument_list></name></type> <name>flags</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>flags</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>TableMetadata</name><operator>.</operator><name>Flag</name><operator>.</operator><name>SUPER</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isCQLTable</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>TableMetadata</name><operator>.</operator><name>Flag</name></name></argument>&gt;</argument_list></name></type> <name>flags</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>!</operator><call><name>isSuper</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isDense</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isCompound</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isStaticCompactTable</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>TableMetadata</name><operator>.</operator><name>Flag</name></name></argument>&gt;</argument_list></name></type> <name>flags</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>!</operator><call><name><name>Flag</name><operator>.</operator><name>isSuper</name></name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>Flag</name><operator>.</operator><name>isDense</name></name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>Flag</name><operator>.</operator><name>isCompound</name></name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Flag</name></argument>&gt;</argument_list></name></type> <name>fromStringSet</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>strings</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>strings</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>String</name><operator>::</operator><name>toUpperCase</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>Flag</name><operator>::</operator><name>valueOf</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name>toSet</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>toStringSet</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Flag</name></argument>&gt;</argument_list></name></type> <name>flags</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>flags</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>Flag</name><operator>::</operator><name>toString</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>String</name><operator>::</operator><name>toLowerCase</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name>toSet</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></enum>

    <enum><specifier>public</specifier> enum <name>Kind</name>
    <block>{
        <decl><name>REGULAR</name></decl>, <decl><name>INDEX</name></decl>, <decl><name>VIEW</name></decl>, <decl><name>VIRTUAL</name></decl>
    }</block></enum>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>keyspace</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>TableId</name></type> <name>id</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>IPartitioner</name></type> <name>partitioner</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Kind</name></type> <name>kind</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>TableParams</name></type> <name>params</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>ImmutableSet</name><argument_list type="generic">&lt;<argument><name>Flag</name></argument>&gt;</argument_list></name></type> <name>flags</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
    <type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>indexName</name></decl>;</decl_stmt> <comment type="line">// derived from table name</comment>

    <comment type="block">/*
     * All CQL3 columns definition are stored in the columns map.
     * On top of that, we keep separated collection of each kind of definition, to
     * 1) allow easy access to each kind and
     * 2) for the partition key and clustering key ones, those list are ordered by the "component index" of the elements.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>ImmutableMap</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>DroppedColumn</name></argument>&gt;</argument_list></name></type> <name>droppedColumns</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>ImmutableMap</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>columns</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name><name>ImmutableList</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>partitionKeyColumns</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name><name>ImmutableList</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>clusteringColumns</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>RegularAndStaticColumns</name></type> <name>regularAndStaticColumns</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Indexes</name></type> <name>indexes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Triggers</name></type> <name>triggers</name></decl>;</decl_stmt>

    <comment type="line">// derived automatically from flags and columns</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>partitionKeyType</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>ClusteringComparator</name></type> <name>comparator</name></decl>;</decl_stmt>

    <comment type="line">// performance hacks; TODO see if all are really necessary</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>DataResource</name></type> <name>resource</name></decl>;</decl_stmt>

    <constructor><specifier>protected</specifier> <name>TableMetadata</name><parameter_list>(<parameter><decl><type><name>Builder</name></type> <name>builder</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name><name>Sets</name><operator>.</operator><name>immutableEnumSet</name></name><argument_list>(<argument><expr><name><name>builder</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>keyspace</name> <operator>=</operator> <name><name>builder</name><operator>.</operator><name>keyspace</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>builder</name><operator>.</operator><name>name</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>id</name> <operator>=</operator> <name><name>builder</name><operator>.</operator><name>id</name></name></expr>;</expr_stmt>

        <expr_stmt><expr><name>partitioner</name> <operator>=</operator> <name><name>builder</name><operator>.</operator><name>partitioner</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>kind</name> <operator>=</operator> <name><name>builder</name><operator>.</operator><name>kind</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>params</name> <operator>=</operator> <call><name><name>builder</name><operator>.</operator><name>params</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>indexName</name> <operator>=</operator> <ternary><condition><expr><name>kind</name> <operator>==</operator> <name><name>Kind</name><operator>.</operator><name>INDEX</name></name></expr> ?</condition><then> <expr><call><name><name>name</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><call><name><name>name</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt><expr><name>droppedColumns</name> <operator>=</operator> <call><name><name>ImmutableMap</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><name><name>builder</name><operator>.</operator><name>droppedColumns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name><name>builder</name><operator>.</operator><name>partitionKeyColumns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>partitionKeyColumns</name> <operator>=</operator> <call><name><name>ImmutableList</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><name><name>builder</name><operator>.</operator><name>partitionKeyColumns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name><name>builder</name><operator>.</operator><name>clusteringColumns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>clusteringColumns</name> <operator>=</operator> <call><name><name>ImmutableList</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><name><name>builder</name><operator>.</operator><name>clusteringColumns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>regularAndStaticColumns</name> <operator>=</operator> <call><name><name>RegularAndStaticColumns</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addAll</name><argument_list>(<argument><expr><name><name>builder</name><operator>.</operator><name>regularAndStaticColumns</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>columns</name> <operator>=</operator> <call><name><name>ImmutableMap</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><name><name>builder</name><operator>.</operator><name>columns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>indexes</name> <operator>=</operator> <name><name>builder</name><operator>.</operator><name>indexes</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>triggers</name> <operator>=</operator> <name><name>builder</name><operator>.</operator><name>triggers</name></name></expr>;</expr_stmt>

        <expr_stmt><expr><name>partitionKeyType</name> <operator>=</operator> <ternary><condition><expr><call><name><name>partitionKeyColumns</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>
                         ?</condition><then> <expr><call><name><name>partitionKeyColumns</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>type</name></expr>
                         </then><else>: <expr><call><name><name>CompositeType</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><call><name>transform</name><argument_list>(<argument><expr><name>partitionKeyColumns</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>t</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>t</name><operator>.</operator><name>type</name></name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt><expr><name>comparator</name> <operator>=</operator> <operator>new</operator> <call><name>ClusteringComparator</name><argument_list>(<argument><expr><call><name>transform</name><argument_list>(<argument><expr><name>clusteringColumns</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>c</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>c</name><operator>.</operator><name>type</name></name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>resource</name> <operator>=</operator> <call><name><name>DataResource</name><operator>.</operator><name>table</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Builder</name></type> <name>builder</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>table</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>Builder</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Builder</name></type> <name>builder</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>TableId</name></type> <name>id</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>Builder</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Builder</name></type> <name>unbuild</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>builder</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>partitioner</name><argument_list>(<argument><expr><name>partitioner</name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>kind</name><argument_list>(<argument><expr><name>kind</name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>params</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>flags</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>addColumns</name><argument_list>(<argument><expr><call><name>columns</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>droppedColumns</name><argument_list>(<argument><expr><name>droppedColumns</name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>indexes</name><argument_list>(<argument><expr><name>indexes</name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>triggers</name><argument_list>(<argument><expr><name>triggers</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isIndex</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>kind</name> <operator>==</operator> <name><name>Kind</name><operator>.</operator><name>INDEX</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>TableMetadata</name></type> <name>withSwapped</name><parameter_list>(<parameter><decl><type><name>TableParams</name></type> <name>params</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>unbuild</name><argument_list>()</argument_list></call><operator>.</operator><call><name>params</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>TableMetadata</name></type> <name>withSwapped</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Flag</name></argument>&gt;</argument_list></name></type> <name>flags</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>unbuild</name><argument_list>()</argument_list></call><operator>.</operator><call><name>flags</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>TableMetadata</name></type> <name>withSwapped</name><parameter_list>(<parameter><decl><type><name>Triggers</name></type> <name>triggers</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>unbuild</name><argument_list>()</argument_list></call><operator>.</operator><call><name>triggers</name><argument_list>(<argument><expr><name>triggers</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>TableMetadata</name></type> <name>withSwapped</name><parameter_list>(<parameter><decl><type><name>Indexes</name></type> <name>indexes</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>unbuild</name><argument_list>()</argument_list></call><operator>.</operator><call><name>indexes</name><argument_list>(<argument><expr><name>indexes</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isView</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>kind</name> <operator>==</operator> <name><name>Kind</name><operator>.</operator><name>VIEW</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isVirtual</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>kind</name> <operator>==</operator> <name><name>Kind</name><operator>.</operator><name>VIRTUAL</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>indexName</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>ofNullable</name></name><argument_list>(<argument><expr><name>indexName</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isCounter</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>flags</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>Flag</name><operator>.</operator><name>COUNTER</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isCompactTable</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isStaticCompactTable</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>ImmutableCollection</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>columns</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>columns</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>primaryKeyColumns</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Iterables</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><name>partitionKeyColumns</name></expr></argument>, <argument><expr><name>clusteringColumns</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>ImmutableList</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>partitionKeyColumns</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>partitionKeyColumns</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>ImmutableList</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>clusteringColumns</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>clusteringColumns</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>RegularAndStaticColumns</name></type> <name>regularAndStaticColumns</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>regularAndStaticColumns</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Columns</name></type> <name>regularColumns</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>regularAndStaticColumns</name><operator>.</operator><name>regulars</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Columns</name></type> <name>staticColumns</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>regularAndStaticColumns</name><operator>.</operator><name>statics</name></name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block">/*
     * An iterator over all column definitions but that respect the order of a SELECT *.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>allColumnsInSelectOrder</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>partitionKeyIter</name> <init>= <expr><call><name><name>partitionKeyColumns</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>clusteringIter</name> <init>= <expr><call><name><name>clusteringColumns</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>otherColumns</name> <init>= <expr><call><name><name>regularAndStaticColumns</name><operator>.</operator><name>selectOrderIterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name>columnsIterator</name><argument_list>(<argument><expr><name>partitionKeyIter</name></expr></argument>, <argument><expr><name>clusteringIter</name></expr></argument>, <argument><expr><name>otherColumns</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns an iterator over all column definitions that respect the order of the CREATE statement.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>allColumnsInCreateOrder</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>partitionKeyIter</name> <init>= <expr><call><name><name>partitionKeyColumns</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>clusteringIter</name> <init>= <expr><call><name><name>clusteringColumns</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>otherColumns</name> <init>= <expr><call><name><name>regularAndStaticColumns</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name>columnsIterator</name><argument_list>(<argument><expr><name>partitionKeyIter</name></expr></argument>, <argument><expr><name>clusteringIter</name></expr></argument>, <argument><expr><name>otherColumns</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>columnsIterator</name><parameter_list>(<parameter><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>partitionKeys</name></decl></parameter>,
                                                            <parameter><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>clusteringColumns</name></decl></parameter>,
                                                            <parameter><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>otherColumns</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <class><super><name><name>AbstractIterator</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>protected</specifier> <name>ColumnMetadata</name></type> <name>computeNext</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>partitionKeys</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><call><name><name>partitionKeys</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><call><name><name>clusteringColumns</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><call><name><name>clusteringColumns</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

                <return>return <expr><ternary><condition><expr><call><name><name>otherColumns</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>otherColumns</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name>endOfData</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the ColumnMetadata for {@code name}.
     */</comment>
    <function><type><specifier>public</specifier> <name>ColumnMetadata</name></type> <name>getColumn</name><parameter_list>(<parameter><decl><type><name>ColumnIdentifier</name></type> <name>name</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>columns</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <comment type="block" format="javadoc">/**
     * Returns the column of the provided name if it exists, but throws a user-visible exception if that column doesn't
     * exist.
     *
     * &lt;p&gt;This method is for finding columns from a name provided by the user, and as such it does _not_ returne hidden
     * columns (throwing that the column is unknown instead).
     *
     * @param name the name of an existing non-hidden column of this table.
     * @return the column metadata corresponding to {@code name}.
     *
     * @throws InvalidRequestException if there is no non-hidden column named {@code name} in this table.
     */</comment>
    <function><type><specifier>public</specifier> <name>ColumnMetadata</name></type> <name>getExistingColumn</name><parameter_list>(<parameter><decl><type><name>ColumnIdentifier</name></type> <name>name</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ColumnMetadata</name></type> <name>def</name> <init>= <expr><call><name>getColumn</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>def</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"Undefined column name %s in table %s"</literal></expr></argument>, <argument><expr><call><name><name>name</name><operator>.</operator><name>toCQLString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <return>return <expr><name>def</name></expr>;</return>
    </block_content>}</block></function>
    <comment type="block">/*
     * In general it is preferable to work with ColumnIdentifier to make it
     * clear that we are talking about a CQL column, not a cell name, but there
     * is a few cases where all we have is a ByteBuffer (when dealing with IndexExpression
     * for instance) so...
     */</comment>
    <function><type><specifier>public</specifier> <name>ColumnMetadata</name></type> <name>getColumn</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>name</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>columns</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>ColumnMetadata</name></type> <name>getDroppedColumn</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>name</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>DroppedColumn</name></type> <name>dropped</name> <init>= <expr><call><name><name>droppedColumns</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name>dropped</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><name><name>dropped</name><operator>.</operator><name>column</name></name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a "fake" ColumnMetadata corresponding to the dropped column {@code name}
     * of {@code null} if there is no such dropped column.
     *
     * @param name - the column name
     * @param isStatic - whether the column was a static column, if known
     */</comment>
    <function><type><specifier>public</specifier> <name>ColumnMetadata</name></type> <name>getDroppedColumn</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isStatic</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>DroppedColumn</name></type> <name>dropped</name> <init>= <expr><call><name><name>droppedColumns</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>dropped</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>isStatic</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>dropped</name><operator>.</operator><name>column</name><operator>.</operator><name>isStatic</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>ColumnMetadata</name><operator>.</operator><name>staticColumn</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>dropped</name><operator>.</operator><name>column</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><name><name>dropped</name><operator>.</operator><name>column</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasStaticColumns</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>!</operator><call><name>staticColumns</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>validate</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isNameValid</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>except</name><argument_list>(<argument><expr><literal type="string">"Keyspace name must not be empty, more than %s characters long, or contain non-alphanumeric-underscore characters (got \"%s\")"</literal></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>NAME_LENGTH</name></name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isNameValid</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>except</name><argument_list>(<argument><expr><literal type="string">"Table name must not be empty, more than %s characters long, or contain non-alphanumeric-underscore characters (got \"%s\")"</literal></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>NAME_LENGTH</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>partitionKeyColumns</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>anyMatch</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>c</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>c</name><operator>.</operator><name>type</name><operator>.</operator><name>isCounter</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <call><name>except</name><argument_list>(<argument><expr><literal type="string">"PRIMARY KEY columns cannot contain counters"</literal></expr></argument>)</argument_list></call><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>

        <comment type="line">// Mixing counter with non counter columns is not supported (#2614)</comment>
        <if_stmt><if>if <condition>(<expr><call><name>isCounter</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>ColumnMetadata</name></type> <name>column</name> <range>: <expr><name>regularAndStaticColumns</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name><name>column</name><operator>.</operator><name>type</name><operator>.</operator><name>isCounter</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isSuperColumnMapColumnName</name><argument_list>(<argument><expr><name><name>column</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>except</name><argument_list>(<argument><expr><literal type="string">"Cannot have a non counter column (\"%s\") in a counter table"</literal></expr></argument>, <argument><expr><name><name>column</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>ColumnMetadata</name></type> <name>column</name> <range>: <expr><name>regularAndStaticColumns</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>column</name><operator>.</operator><name>type</name><operator>.</operator><name>isCounter</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>except</name><argument_list>(<argument><expr><literal type="string">"Cannot have a counter column (\"%s\") in a non counter table"</literal></expr></argument>, <argument><expr><name><name>column</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// All tables should have a partition key</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>partitionKeyColumns</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>except</name><argument_list>(<argument><expr><literal type="string">"Missing partition keys for table %s"</literal></expr></argument>, <argument><expr><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>indexes</name><operator>.</operator><name>validate</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * To support backward compatibility with thrift super columns in the C* 3.0+ storage engine, we encode said super
     * columns as a CQL {@code map&lt;blob, blob&gt;}. To ensure the name of this map did not conflict with any other user
     * defined columns, we used the empty name (which is otherwise not allowed for user created columns).
     * &lt;p&gt;
     * While all thrift-based tables must have been converted to "CQL" ones with "DROP COMPACT STORAGE" (before
     * upgrading to C* 4.0, which stop supporting non-CQL tables completely), a converted super-column table will still
     * have this map with an empty name. And the reason we need to recognize it still, is that for backward
     * compatibility we need to support counters in values of this map while it's not supported in any other map.
     *
     * TODO: it's probably worth lifting the limitation of not allowing counters as map values. It works fully
     *   internally (since we had to support it for this special map) and doesn't feel particularly dangerous to
     *   support. Doing so would remove this special case, but would also let user that do have an upgraded super-column
     *   table with counters to rename that weirdly name map to something more meaningful (it's not possible today
     *   as after renaming the validation in {@link #validate)} would trigger).
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isSuperColumnMapColumnName</name><parameter_list>(<parameter><decl><type><name>ColumnIdentifier</name></type> <name>columnName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>!</operator><call><name><name>columnName</name><operator>.</operator><name>bytes</name><operator>.</operator><name>hasRemaining</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>validateCompatibility</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>previous</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isIndex</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>previous</name><operator>.</operator><name>keyspace</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>except</name><argument_list>(<argument><expr><literal type="string">"Keyspace mismatch (found %s; expected %s)"</literal></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name><name>previous</name><operator>.</operator><name>keyspace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>previous</name><operator>.</operator><name>name</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>except</name><argument_list>(<argument><expr><literal type="string">"Table mismatch (found %s; expected %s)"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>previous</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>previous</name><operator>.</operator><name>id</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>except</name><argument_list>(<argument><expr><literal type="string">"Table ID mismatch (found %s; expected %s)"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>previous</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>previous</name><operator>.</operator><name>flags</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name><name>Flag</name><operator>.</operator><name>isCQLTable</name></name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>Flag</name><operator>.</operator><name>isCQLTable</name></name><argument_list>(<argument><expr><name><name>previous</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>except</name><argument_list>(<argument><expr><literal type="string">"Table type mismatch (found %s; expected %s)"</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name><name>previous</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>previous</name><operator>.</operator><name>partitionKeyColumns</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>partitionKeyColumns</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>except</name><argument_list>(<argument><expr><literal type="string">"Partition keys of different length (found %s; expected %s)"</literal></expr></argument>,
                   <argument><expr><call><name><name>partitionKeyColumns</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>,
                   <argument><expr><call><name><name>previous</name><operator>.</operator><name>partitionKeyColumns</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>partitionKeyColumns</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>partitionKeyColumns</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>type</name><operator>.</operator><name>isCompatibleWith</name></name><argument_list>(<argument><expr><call><name><name>previous</name><operator>.</operator><name>partitionKeyColumns</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>except</name><argument_list>(<argument><expr><literal type="string">"Partition key column mismatch (found %s; expected %s)"</literal></expr></argument>,
                       <argument><expr><call><name><name>partitionKeyColumns</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>type</name></expr></argument>,
                       <argument><expr><call><name><name>previous</name><operator>.</operator><name>partitionKeyColumns</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><call><name><name>previous</name><operator>.</operator><name>clusteringColumns</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>clusteringColumns</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>except</name><argument_list>(<argument><expr><literal type="string">"Clustering columns of different length (found %s; expected %s)"</literal></expr></argument>,
                   <argument><expr><call><name><name>clusteringColumns</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>,
                   <argument><expr><call><name><name>previous</name><operator>.</operator><name>clusteringColumns</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>clusteringColumns</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>clusteringColumns</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>type</name><operator>.</operator><name>isCompatibleWith</name></name><argument_list>(<argument><expr><call><name><name>previous</name><operator>.</operator><name>clusteringColumns</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>except</name><argument_list>(<argument><expr><literal type="string">"Clustering column mismatch (found %s; expected %s)"</literal></expr></argument>,
                       <argument><expr><call><name><name>clusteringColumns</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>type</name></expr></argument>,
                       <argument><expr><call><name><name>previous</name><operator>.</operator><name>clusteringColumns</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <for>for <control>(<init><decl><type><name>ColumnMetadata</name></type> <name>previousColumn</name> <range>: <expr><name><name>previous</name><operator>.</operator><name>regularAndStaticColumns</name></name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ColumnMetadata</name></type> <name>column</name> <init>= <expr><call><name>getColumn</name><argument_list>(<argument><expr><name><name>previousColumn</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>column</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>column</name><operator>.</operator><name>type</name><operator>.</operator><name>isCompatibleWith</name></name><argument_list>(<argument><expr><name><name>previousColumn</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>except</name><argument_list>(<argument><expr><literal type="string">"Column mismatch (found %s; expected %s)"</literal></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>previousColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>ClusteringComparator</name></type> <name>partitionKeyAsClusteringComparator</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>ClusteringComparator</name><argument_list>(<argument><expr><call><name><name>partitionKeyColumns</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>c</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>c</name><operator>.</operator><name>type</name></name></expr></block_content></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name>toList</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Generate a table name for an index corresponding to the given column.
     * This is NOT the same as the index's name! This is only used in sstable filenames and is not exposed to users.
     *
     * @param info A definition of the column with index
     *
     * @return name of the index table
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>indexTableName</name><parameter_list>(<parameter><decl><type><name>IndexMetadata</name></type> <name>info</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// TODO simplify this when info.index_name is guaranteed to be set</comment>
        <return>return <expr><name>name</name> <operator>+</operator> <name><name>Directories</name><operator>.</operator><name>SECONDARY_INDEX_NAME_SEPARATOR</name></name> <operator>+</operator> <name><name>info</name><operator>.</operator><name>name</name></name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return true if the change as made impacts queries/updates on the table,
     *         e.g. any columns or indexes were added, removed, or altered; otherwise, false is returned.
     *         Used to determine whether prepared statements against this table need to be re-prepared.
     */</comment>
    <function><type><name>boolean</name></type> <name>changeAffectsPreparedStatements</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>updated</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>!</operator><call><name><name>partitionKeyColumns</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>updated</name><operator>.</operator><name>partitionKeyColumns</name></name></expr></argument>)</argument_list></call>
            <operator>||</operator> <operator>!</operator><call><name><name>clusteringColumns</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>updated</name><operator>.</operator><name>clusteringColumns</name></name></expr></argument>)</argument_list></call>
            <operator>||</operator> <operator>!</operator><call><name><name>regularAndStaticColumns</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>updated</name><operator>.</operator><name>regularAndStaticColumns</name></name></expr></argument>)</argument_list></call>
            <operator>||</operator> <operator>!</operator><call><name><name>indexes</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>updated</name><operator>.</operator><name>indexes</name></name></expr></argument>)</argument_list></call>
            <operator>||</operator> <name><name>params</name><operator>.</operator><name>defaultTimeToLive</name></name> <operator>!=</operator> <name><name>updated</name><operator>.</operator><name>params</name><operator>.</operator><name>defaultTimeToLive</name></name>
            <operator>||</operator> <name><name>params</name><operator>.</operator><name>gcGraceSeconds</name></name> <operator>!=</operator> <name><name>updated</name><operator>.</operator><name>params</name><operator>.</operator><name>gcGraceSeconds</name></name>
            <operator>||</operator> <operator>(</operator> <operator>!</operator><call><name><name>Flag</name><operator>.</operator><name>isCQLTable</name></name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>Flag</name><operator>.</operator><name>isCQLTable</name></name><argument_list>(<argument><expr><name><name>updated</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call> <operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * There is a couple of places in the code where we need a TableMetadata object and don't have one readily available
     * and know that only the keyspace and name matter. This creates such "fake" metadata. Use only if you know what
     * you're doing.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>TableMetadata</name></type> <name>minimal</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>TableMetadata</name><operator>.</operator><name>builder</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>addPartitionKeyColumn</name><argument_list>(<argument><expr><literal type="string">"key"</literal></expr></argument>, <argument><expr><name><name>BytesType</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>TableMetadata</name></type> <name>updateIndexTableMetadata</name><parameter_list>(<parameter><decl><type><name>TableParams</name></type> <name>baseTableParams</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>TableParams</name><operator>.</operator><name>Builder</name></name></type> <name>builder</name> <init>= <expr><call><name><name>baseTableParams</name><operator>.</operator><name>unbuild</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>gcGraceSeconds</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Depends on parent's cache setting, turn on its index table's cache.</comment>
        <comment type="line">// Row caching is never enabled; see CASSANDRA-5732</comment>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>caching</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>baseTableParams</name><operator>.</operator><name>caching</name><operator>.</operator><name>cacheKeys</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>CachingParams</name><operator>.</operator><name>CACHE_KEYS</name></name></expr> </then><else>: <expr><name><name>CachingParams</name><operator>.</operator><name>CACHE_NOTHING</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><call><name>unbuild</name><argument_list>()</argument_list></call><operator>.</operator><call><name>params</name><argument_list>(<argument><expr><call><name><name>builder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>boolean</name></type> <name>referencesUserType</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>name</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>any</name><argument_list>(<argument><expr><call><name>columns</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>c</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>c</name><operator>.</operator><name>type</name><operator>.</operator><name>referencesUserType</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>TableMetadata</name></type> <name>withUpdatedUserType</name><parameter_list>(<parameter><decl><type><name>UserType</name></type> <name>udt</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>referencesUserType</name><argument_list>(<argument><expr><name><name>udt</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>this</name></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>Builder</name></type> <name>builder</name> <init>= <expr><call><name>unbuild</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>columns</name><argument_list>()</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>c</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>builder</name><operator>.</operator><name>alterColumnType</name></name><argument_list>(<argument><expr><name><name>c</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><call><name><name>c</name><operator>.</operator><name>type</name><operator>.</operator><name>withUpdatedUserType</name></name><argument_list>(<argument><expr><name>udt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><call><name><name>builder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>except</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>Object</name><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><name>keyspace</name> <operator>+</operator> <literal type="string">"."</literal> <operator>+</operator> <name>name</name> <operator>+</operator> <literal type="string">": "</literal> <operator>+</operator> <call><name>format</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>o</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>o</name> <operator>instanceof</operator> <name>TableMetadata</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>TableMetadata</name></type> <name>tm</name> <init>= <expr><operator>(</operator><name>TableMetadata</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name>equalsWithoutColumns</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>columns</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>tm</name><operator>.</operator><name>columns</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>equalsWithoutColumns</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>tm</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>keyspace</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>tm</name><operator>.</operator><name>keyspace</name></name></expr></argument>)</argument_list></call>
            <operator>&amp;&amp;</operator> <call><name><name>name</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>tm</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call>
            <operator>&amp;&amp;</operator> <call><name><name>id</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>tm</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call>
            <operator>&amp;&amp;</operator> <call><name><name>partitioner</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>tm</name><operator>.</operator><name>partitioner</name></name></expr></argument>)</argument_list></call>
            <operator>&amp;&amp;</operator> <name>kind</name> <operator>==</operator> <name><name>tm</name><operator>.</operator><name>kind</name></name>
            <operator>&amp;&amp;</operator> <call><name><name>params</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>tm</name><operator>.</operator><name>params</name></name></expr></argument>)</argument_list></call>
            <operator>&amp;&amp;</operator> <call><name><name>flags</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>tm</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call>
            <operator>&amp;&amp;</operator> <call><name><name>droppedColumns</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>tm</name><operator>.</operator><name>droppedColumns</name></name></expr></argument>)</argument_list></call>
            <operator>&amp;&amp;</operator> <call><name><name>indexes</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>tm</name><operator>.</operator><name>indexes</name></name></expr></argument>)</argument_list></call>
            <operator>&amp;&amp;</operator> <call><name><name>triggers</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>tm</name><operator>.</operator><name>triggers</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>Difference</name></argument>&gt;</argument_list></name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>other</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><ternary><condition><expr><call><name>equalsWithoutColumns</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>
             ?</condition><then> <expr><call><name>compareColumns</name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>columns</name></name></expr></argument>)</argument_list></call></expr>
             </then><else>: <expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name><name>Difference</name><operator>.</operator><name>SHALLOW</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>Difference</name></argument>&gt;</argument_list></name></type> <name>compareColumns</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>other</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>columns</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name><name>Difference</name><operator>.</operator><name>SHALLOW</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>boolean</name></type> <name>differsDeeply</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>columns</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ColumnMetadata</name></type> <name>thisColumn</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ColumnMetadata</name></type> <name>thatColumn</name> <init>= <expr><call><name><name>other</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>Difference</name></argument>&gt;</argument_list></name></type> <name>difference</name> <init>= <expr><call><name><name>thisColumn</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name>thatColumn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>difference</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <switch>switch <condition>(<expr><call><name><name>difference</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>SHALLOW</name></expr>:</case>
                        <return>return <expr><name>difference</name></expr>;</return>
                    <case>case <expr><name>DEEP</name></expr>:</case>
                        <expr_stmt><expr><name>differsDeeply</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                </block_content>}</block></switch>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <return>return <expr><ternary><condition><expr><name>differsDeeply</name></expr> ?</condition><then> <expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name><name>Difference</name><operator>.</operator><name>DEEP</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>Optional</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Objects</name><operator>.</operator><name>hash</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>partitioner</name></expr></argument>, <argument><expr><name>kind</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>columns</name></expr></argument>, <argument><expr><name>droppedColumns</name></expr></argument>, <argument><expr><name>indexes</name></expr></argument>, <argument><expr><name>triggers</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><call><name><name>ColumnIdentifier</name><operator>.</operator><name>maybeQuote</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>ColumnIdentifier</name><operator>.</operator><name>maybeQuote</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>toDebugString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>MoreObjects</name><operator>.</operator><name>toStringHelper</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"keyspace"</literal></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"table"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"partitioner"</literal></expr></argument>, <argument><expr><name>partitioner</name></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"kind"</literal></expr></argument>, <argument><expr><name>kind</name></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"params"</literal></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"flags"</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"columns"</literal></expr></argument>, <argument><expr><call><name>columns</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"droppedColumns"</literal></expr></argument>, <argument><expr><call><name><name>droppedColumns</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"indexes"</literal></expr></argument>, <argument><expr><name>indexes</name></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"triggers"</literal></expr></argument>, <argument><expr><name>triggers</name></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>Builder</name>
    <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>keyspace</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <name>TableId</name></type> <name>id</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <name>IPartitioner</name></type> <name>partitioner</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>Kind</name></type> <name>kind</name> <init>= <expr><name><name>Kind</name><operator>.</operator><name>REGULAR</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name><name>TableParams</name><operator>.</operator><name>Builder</name></name></type> <name>params</name> <init>= <expr><call><name><name>TableParams</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// See the comment on Flag.COMPOUND definition for why we (still) inconditionally add this flag.</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Flag</name></argument>&gt;</argument_list></name></type> <name>flags</name> <init>= <expr><call><name><name>EnumSet</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name><name>Flag</name><operator>.</operator><name>COMPOUND</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>Triggers</name></type> <name>triggers</name> <init>= <expr><call><name><name>Triggers</name><operator>.</operator><name>none</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>Indexes</name></type> <name>indexes</name> <init>= <expr><call><name><name>Indexes</name><operator>.</operator><name>none</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>DroppedColumn</name></argument>&gt;</argument_list></name></type> <name>droppedColumns</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>columns</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>partitionKeyColumns</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>clusteringColumns</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>regularAndStaticColumns</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>Builder</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>TableId</name></type> <name>id</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>keyspace</name></name> <operator>=</operator> <name>keyspace</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <constructor><specifier>private</specifier> <name>Builder</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>keyspace</name></name> <operator>=</operator> <name>keyspace</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>TableMetadata</name></type> <name>build</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>partitioner</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>partitioner</name> <operator>=</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getPartitioner</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>id</name> <operator>=</operator> <call><name><name>TableId</name><operator>.</operator><name>generate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>Flag</name><operator>.</operator><name>isCQLTable</name></name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><operator>new</operator> <call><name>TableMetadata</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <return>return <expr><operator>new</operator> <call><name>CompactTableMetadata</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>id</name><parameter_list>(<parameter><decl><type><name>TableId</name></type> <name>val</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name>id</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>partitioner</name><parameter_list>(<parameter><decl><type><name>IPartitioner</name></type> <name>val</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name>partitioner</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>kind</name><parameter_list>(<parameter><decl><type><name>Kind</name></type> <name>val</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name>kind</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>params</name><parameter_list>(<parameter><decl><type><name>TableParams</name></type> <name>val</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name>params</name> <operator>=</operator> <call><name><name>val</name><operator>.</operator><name>unbuild</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>bloomFilterFpChance</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>val</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>bloomFilterFpChance</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>caching</name><parameter_list>(<parameter><decl><type><name>CachingParams</name></type> <name>val</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>caching</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>comment</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>val</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>comment</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>compaction</name><parameter_list>(<parameter><decl><type><name>CompactionParams</name></type> <name>val</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>compaction</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>compression</name><parameter_list>(<parameter><decl><type><name>CompressionParams</name></type> <name>val</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>compression</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>defaultTimeToLive</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>defaultTimeToLive</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>gcGraceSeconds</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>gcGraceSeconds</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>maxIndexInterval</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>maxIndexInterval</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>memtableFlushPeriod</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>memtableFlushPeriodInMs</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>minIndexInterval</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>minIndexInterval</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>crcCheckChance</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>val</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>crcCheckChance</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>speculativeRetry</name><parameter_list>(<parameter><decl><type><name>SpeculativeRetryPolicy</name></type> <name>val</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>speculativeRetry</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>additionalWritePolicy</name><parameter_list>(<parameter><decl><type><name>SpeculativeRetryPolicy</name></type> <name>val</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>additionalWritePolicy</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>extensions</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>val</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>extensions</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>flags</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Flag</name></argument>&gt;</argument_list></name></type> <name>val</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name>flags</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>isCounter</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>val</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name>flag</name><argument_list>(<argument><expr><name><name>Flag</name><operator>.</operator><name>COUNTER</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>Builder</name></type> <name>flag</name><parameter_list>(<parameter><decl><type><name>Flag</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>set</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>set</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>flags</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>flags</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>triggers</name><parameter_list>(<parameter><decl><type><name>Triggers</name></type> <name>val</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name>triggers</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>indexes</name><parameter_list>(<parameter><decl><type><name>Indexes</name></type> <name>val</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name>indexes</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>addPartitionKeyColumn</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>AbstractType</name></type> <name>type</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name>addPartitionKeyColumn</name><argument_list>(<argument><expr><call><name><name>ColumnIdentifier</name><operator>.</operator><name>getInterned</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>addPartitionKeyColumn</name><parameter_list>(<parameter><decl><type><name>ColumnIdentifier</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>AbstractType</name></type> <name>type</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name>addColumn</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ColumnMetadata</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><call><name><name>partitionKeyColumns</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>ColumnMetadata</name><operator>.</operator><name>Kind</name><operator>.</operator><name>PARTITION_KEY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>addClusteringColumn</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>AbstractType</name></type> <name>type</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name>addClusteringColumn</name><argument_list>(<argument><expr><call><name><name>ColumnIdentifier</name><operator>.</operator><name>getInterned</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>addClusteringColumn</name><parameter_list>(<parameter><decl><type><name>ColumnIdentifier</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>AbstractType</name></type> <name>type</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name>addColumn</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ColumnMetadata</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><call><name><name>clusteringColumns</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>ColumnMetadata</name><operator>.</operator><name>Kind</name><operator>.</operator><name>CLUSTERING</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>addRegularColumn</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>AbstractType</name></type> <name>type</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name>addRegularColumn</name><argument_list>(<argument><expr><call><name><name>ColumnIdentifier</name><operator>.</operator><name>getInterned</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>addRegularColumn</name><parameter_list>(<parameter><decl><type><name>ColumnIdentifier</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>AbstractType</name></type> <name>type</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name>addColumn</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ColumnMetadata</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>ColumnMetadata</name><operator>.</operator><name>NO_POSITION</name></name></expr></argument>, <argument><expr><name><name>ColumnMetadata</name><operator>.</operator><name>Kind</name><operator>.</operator><name>REGULAR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>addStaticColumn</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>AbstractType</name></type> <name>type</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name>addStaticColumn</name><argument_list>(<argument><expr><call><name><name>ColumnIdentifier</name><operator>.</operator><name>getInterned</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>addStaticColumn</name><parameter_list>(<parameter><decl><type><name>ColumnIdentifier</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>AbstractType</name></type> <name>type</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name>addColumn</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ColumnMetadata</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>ColumnMetadata</name><operator>.</operator><name>NO_POSITION</name></name></expr></argument>, <argument><expr><name><name>ColumnMetadata</name><operator>.</operator><name>Kind</name><operator>.</operator><name>STATIC</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>addColumn</name><parameter_list>(<parameter><decl><type><name>ColumnMetadata</name></type> <name>column</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>columns</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name><name>column</name><operator>.</operator><name>name</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <switch>switch <condition>(<expr><name><name>column</name><operator>.</operator><name>kind</name></name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>PARTITION_KEY</name></expr>:</case>
                    <expr_stmt><expr><call><name><name>partitionKeyColumns</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>partitionKeyColumns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name>CLUSTERING</name></expr>:</case>
                    <expr_stmt><expr><call><name><name>column</name><operator>.</operator><name>type</name><operator>.</operator><name>checkComparable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>clusteringColumns</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>clusteringColumns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <default>default:</default>
                    <expr_stmt><expr><call><name><name>regularAndStaticColumns</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></switch>

            <expr_stmt><expr><call><name><name>columns</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>column</name><operator>.</operator><name>name</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>addColumns</name><parameter_list>(<parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>columns</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>columns</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>addColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>droppedColumns</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>DroppedColumn</name></argument>&gt;</argument_list></name></type> <name>droppedColumns</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>droppedColumns</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>droppedColumns</name><operator>.</operator><name>putAll</name></name><argument_list>(<argument><expr><name>droppedColumns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Records a deprecated column for a system table.
         */</comment>
        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>recordDeprecatedSystemColumn</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>type</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <comment type="line">// As we play fast and loose with the removal timestamp, make sure this is misued for a non system table.</comment>
            <assert>assert <expr><call><name><name>SchemaConstants</name><operator>.</operator><name>isLocalSystemKeyspace</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</assert>
            <expr_stmt><expr><call><name>recordColumnDrop</name><argument_list>(<argument><expr><call><name><name>ColumnMetadata</name><operator>.</operator><name>regularColumn</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>recordColumnDrop</name><parameter_list>(<parameter><decl><type><name>ColumnMetadata</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>timeMicros</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>droppedColumns</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>column</name><operator>.</operator><name>name</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>DroppedColumn</name><argument_list>(<argument><expr><call><name><name>column</name><operator>.</operator><name>withNewType</name></name><argument_list>(<argument><expr><call><name><name>column</name><operator>.</operator><name>type</name><operator>.</operator><name>expandUserTypes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>timeMicros</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>columns</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>columns</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>columnNames</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>columns</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>c</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>c</name><operator>.</operator><name>name</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name>toSet</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>ColumnMetadata</name></type> <name>getColumn</name><parameter_list>(<parameter><decl><type><name>ColumnIdentifier</name></type> <name>identifier</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>columns</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>identifier</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>ColumnMetadata</name></type> <name>getColumn</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>name</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>columns</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasRegularColumns</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>regularAndStaticColumns</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>anyMatch</name><argument_list>(<argument><expr><name>ColumnMetadata</name><operator>::</operator><name>isRegular</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <comment type="block">/*
         * The following methods all assume a Builder with valid set of partition key, clustering, regular and static columns.
         */</comment>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>removeRegularOrStaticColumn</name><parameter_list>(<parameter><decl><type><name>ColumnIdentifier</name></type> <name>identifier</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ColumnMetadata</name></type> <name>column</name> <init>= <expr><call><name><name>columns</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>identifier</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>column</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>column</name><operator>.</operator><name>isPrimaryKeyColumn</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name><name>columns</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name><name>identifier</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>regularAndStaticColumns</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>renamePrimaryKeyColumn</name><parameter_list>(<parameter><decl><type><name>ColumnIdentifier</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>ColumnIdentifier</name></type> <name>to</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>columns</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name><name>to</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>ColumnMetadata</name></type> <name>column</name> <init>= <expr><call><name><name>columns</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>from</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>column</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><call><name><name>column</name><operator>.</operator><name>isPrimaryKeyColumn</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>ColumnMetadata</name></type> <name>newColumn</name> <init>= <expr><call><name><name>column</name><operator>.</operator><name>withNewName</name></name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>column</name><operator>.</operator><name>isPartitionKey</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>partitionKeyColumns</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><call><name><name>column</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>newColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>clusteringColumns</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><call><name><name>column</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>newColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt><expr><call><name><name>columns</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name><name>from</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>columns</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>to</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>newColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><name>Builder</name></type> <name>alterColumnType</name><parameter_list>(<parameter><decl><type><name>ColumnIdentifier</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>type</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ColumnMetadata</name></type> <name>column</name> <init>= <expr><call><name><name>columns</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>column</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>ColumnMetadata</name></type> <name>newColumn</name> <init>= <expr><call><name><name>column</name><operator>.</operator><name>withNewType</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <switch>switch <condition>(<expr><name><name>column</name><operator>.</operator><name>kind</name></name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>PARTITION_KEY</name></expr>:</case>
                    <expr_stmt><expr><call><name><name>partitionKeyColumns</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><call><name><name>column</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>newColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name>CLUSTERING</name></expr>:</case>
                    <expr_stmt><expr><call><name><name>clusteringColumns</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><call><name><name>column</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>newColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name>REGULAR</name></expr>:</case>
                <case>case <expr><name>STATIC</name></expr>:</case>
                    <expr_stmt><expr><call><name><name>regularAndStaticColumns</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>regularAndStaticColumns</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>newColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
            </block_content>}</block></switch>

            <expr_stmt><expr><call><name><name>columns</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>column</name><operator>.</operator><name>name</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>newColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
    
    <comment type="block" format="javadoc">/**
     * A table with strict liveness filters/ignores rows without PK liveness info,
     * effectively tying the row liveness to its primary key liveness.
     *
     * Currently this is only used by views with normal base column as PK column
     * so updates to other columns do not make the row live when the base column
     * is not live. See CASSANDRA-11500.
     *
     * TODO: does not belong here, should be gone
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>enforceStrictLiveness</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>isView</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>viewManager</name><operator>.</operator><name>getByName</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>enforceStrictLiveness</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the names of all the user types referenced by this table.
     *
     * @return the names of all the user types referenced by this table.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>getReferencedUserTypes</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>types</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedHashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>columns</name><argument_list>()</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>c</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>addUserTypes</name><argument_list>(<argument><expr><name><name>c</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>types</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>types</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Find all user types used by the specified type and add them to the set.
     *
     * @param type the type to check for user types.
     * @param types the set of UDT names to which to add new user types found in {@code type}. Note that the
     * insertion ordering is important and ensures that if a user type A uses another user type B, then B will appear
     * before A in iteration order.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>addUserTypes</name><parameter_list>(<parameter><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>types</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// Reach into subtypes first, so that if the type is a UDT, it's dependencies are recreated first.</comment>
        <expr_stmt><expr><call><name><name>type</name><operator>.</operator><name>subTypes</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>t</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>addUserTypes</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>types</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>type</name><operator>.</operator><name>isUDT</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>types</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>UserType</name><operator>)</operator><name>type</name><operator>)</operator><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>SchemaElementType</name></type> <name>elementType</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>SchemaElementType</name><operator>.</operator><name>TABLE</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>elementKeyspace</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>keyspace</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>elementName</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>name</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toCqlString</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>withInternals</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>ifNotExists</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CqlBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>CqlBuilder</name><argument_list>(<argument><expr><literal type="number">2048</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>appendCqlTo</name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>withInternals</name></expr></argument>, <argument><expr><name>withInternals</name></expr></argument>, <argument><expr><name>ifNotExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>builder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>toCqlString</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>includeDroppedColumns</name></decl></parameter>,
                              <parameter><decl><type><name>boolean</name></type> <name>internals</name></decl></parameter>,
                              <parameter><decl><type><name>boolean</name></type> <name>ifNotExists</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CqlBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>CqlBuilder</name><argument_list>(<argument><expr><literal type="number">2048</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>appendCqlTo</name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>includeDroppedColumns</name></expr></argument>, <argument><expr><name>internals</name></expr></argument>, <argument><expr><name>ifNotExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>builder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>appendCqlTo</name><parameter_list>(<parameter><decl><type><name>CqlBuilder</name></type> <name>builder</name></decl></parameter>,
                            <parameter><decl><type><name>boolean</name></type> <name>includeDroppedColumns</name></decl></parameter>,
                            <parameter><decl><type><name>boolean</name></type> <name>internals</name></decl></parameter>,
                            <parameter><decl><type><name>boolean</name></type> <name>ifNotExists</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><operator>!</operator><call><name>isView</name><argument_list>()</argument_list></call></expr>;</assert>

        <decl_stmt><decl><type><name>String</name></type> <name>createKeyword</name> <init>= <expr><literal type="string">"CREATE"</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isVirtual</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"/*\n"</literal> <operator>+</operator>
                    <literal type="string">"Warning: Table %s is a virtual table and cannot be recreated with CQL.\n"</literal> <operator>+</operator>
                    <literal type="string">"Structure, for reference:\n"</literal></expr></argument>,
                                         <argument><expr><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>createKeyword</name> <operator>=</operator> <literal type="string">"VIRTUAL"</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>createKeyword</name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" TABLE "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>ifNotExists</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"IF NOT EXISTS "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" ("</literal></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>newLine</name><argument_list>()</argument_list></call>
               <operator>.</operator><call><name>increaseIndent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>boolean</name></type> <name>hasSingleColumnPrimaryKey</name> <init>= <expr><call><name><name>partitionKeyColumns</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name><name>clusteringColumns</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>appendColumnDefinitions</name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>includeDroppedColumns</name></expr></argument>, <argument><expr><name>hasSingleColumnPrimaryKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasSingleColumnPrimaryKey</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>appendPrimaryKey</name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>decreaseIndent</name></name><argument_list>()</argument_list></call>
               <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" WITH "</literal></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>increaseIndent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>appendTableOptions</name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>internals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>decreaseIndent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>isVirtual</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>newLine</name></name><argument_list>()</argument_list></call>
                   <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"*/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>includeDroppedColumns</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>appendDropColumns</name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>appendColumnDefinitions</name><parameter_list>(<parameter><decl><type><name>CqlBuilder</name></type> <name>builder</name></decl></parameter>,
                                         <parameter><decl><type><name>boolean</name></type> <name>includeDroppedColumns</name></decl></parameter>,
                                         <parameter><decl><type><name>boolean</name></type> <name>hasSingleColumnPrimaryKey</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>iter</name> <init>= <expr><call><name>allColumnsInCreateOrder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ColumnMetadata</name></type> <name>column</name> <init>= <expr><call><name><name>iter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// If the column has been re-added after a drop, we don't include it right away. Instead, we'll add the</comment>
            <comment type="line">// dropped one first below, then we'll issue the DROP and then the actual ADD for this column, thus</comment>
            <comment type="line">// simulating the proper sequence of events.</comment>
            <if_stmt><if>if <condition>(<expr><name>includeDroppedColumns</name> <operator>&amp;&amp;</operator> <call><name><name>droppedColumns</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name><name>column</name><operator>.</operator><name>name</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name><name>column</name><operator>.</operator><name>appendCqlTo</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>hasSingleColumnPrimaryKey</name> <operator>&amp;&amp;</operator> <call><name><name>column</name><operator>.</operator><name>isPartitionKey</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" PRIMARY KEY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasSingleColumnPrimaryKey</name> <operator>||</operator> <operator>(</operator><name>includeDroppedColumns</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>droppedColumns</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>||</operator> <call><name><name>iter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>newLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>

        <if_stmt><if>if <condition>(<expr><name>includeDroppedColumns</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>DroppedColumn</name></argument>&gt;</argument_list></name></type> <name>iterDropped</name> <init>= <expr><call><name><name>droppedColumns</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>iterDropped</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>DroppedColumn</name></type> <name>dropped</name> <init>= <expr><call><name><name>iterDropped</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>dropped</name><operator>.</operator><name>column</name><operator>.</operator><name>appendCqlTo</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasSingleColumnPrimaryKey</name> <operator>||</operator> <call><name><name>iter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>newLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>appendPrimaryKey</name><parameter_list>(<parameter><decl><type><name>CqlBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>partitionKeyColumns</name> <init>= <expr><call><name>partitionKeyColumns</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>clusteringColumns</name> <init>= <expr><call><name>clusteringColumns</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>isStaticCompactTable</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>clusteringColumns</name> <operator>=</operator> <call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"PRIMARY KEY ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>partitionKeyColumns</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call>
                   <operator>.</operator><call><name>appendWithSeparators</name><argument_list>(<argument><expr><name>partitionKeyColumns</name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>b</name></decl></parameter>, <parameter><decl><name>c</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>b</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>c</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call>
                   <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>partitionKeyColumns</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>clusteringColumns</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call>
                   <operator>.</operator><call><name>appendWithSeparators</name><argument_list>(<argument><expr><name>clusteringColumns</name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>b</name></decl></parameter>, <parameter><decl><name>c</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>b</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>c</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>newLine</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>appendTableOptions</name><parameter_list>(<parameter><decl><type><name>CqlBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>internals</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>internals</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"ID = "</literal></expr></argument>)</argument_list></call>
                   <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>id</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                   <operator>.</operator><call><name>newLine</name><argument_list>()</argument_list></call>
                   <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"AND "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>clusteringColumns</name> <init>= <expr><call><name>clusteringColumns</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>clusteringColumns</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"CLUSTERING ORDER BY ("</literal></expr></argument>)</argument_list></call>
                   <operator>.</operator><call><name>appendWithSeparators</name><argument_list>(<argument><expr><name>clusteringColumns</name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>b</name></decl></parameter>, <parameter><decl><name>c</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>c</name><operator>.</operator><name>appendNameAndOrderTo</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call>
                   <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call>
                   <operator>.</operator><call><name>newLine</name><argument_list>()</argument_list></call>
                   <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"AND "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>isVirtual</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"comment = "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>appendWithSingleQuotes</name><argument_list>(<argument><expr><name><name>params</name><operator>.</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>appendCqlTo</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><call><name>isView</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>appendDropColumns</name><parameter_list>(<parameter><decl><type><name>CqlBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>DroppedColumn</name></argument>&gt;</argument_list></name></type> <name>entry</name> <range>: <expr><call><name><name>droppedColumns</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>DroppedColumn</name></type> <name>dropped</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>newLine</name></name><argument_list>()</argument_list></call>
                   <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE "</literal></expr></argument>)</argument_list></call>
                   <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                   <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" DROP "</literal></expr></argument>)</argument_list></call>
                   <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name><name>dropped</name><operator>.</operator><name>column</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call>
                   <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" USING TIMESTAMP "</literal></expr></argument>)</argument_list></call>
                   <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name><name>dropped</name><operator>.</operator><name>droppedTime</name></name></expr></argument>)</argument_list></call>
                   <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>ColumnMetadata</name></type> <name>column</name> <init>= <expr><call><name>getColumn</name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>column</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>newLine</name></name><argument_list>()</argument_list></call>
                       <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE "</literal></expr></argument>)</argument_list></call>
                       <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                       <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" ADD "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>column</name><operator>.</operator><name>appendCqlTo</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>CompactTableMetadata</name> <super_list><extends>extends <super><name>TableMetadata</name></super></extends></super_list>
    <block>{

        <comment type="block">/*
         * For dense tables, this alias the single non-PK column the table contains (since it can only have one). We keep
         * that as convenience to access that column more easily (but we could replace calls by regularAndStaticColumns().iterator().next()
         * for those tables in practice).
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>ColumnMetadata</name></type> <name>compactValueColumn</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>hiddenColumns</name></decl>;</decl_stmt>
        <constructor><specifier>protected</specifier> <name>CompactTableMetadata</name><parameter_list>(<parameter><decl><type><name>Builder</name></type> <name>builder</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>compactValueColumn</name> <operator>=</operator> <call><name>getCompactValueColumn</name><argument_list>(<argument><expr><name>regularAndStaticColumns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>isCompactTable</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>Flag</name><operator>.</operator><name>isDense</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>hasEmptyCompactValue</name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>hiddenColumns</name> <operator>=</operator> <call><name><name>Collections</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><name>compactValueColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><call><name>isCompactTable</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>Flag</name><operator>.</operator><name>isDense</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>hiddenColumns</name> <operator>=</operator> <call><name><name>Sets</name><operator>.</operator><name>newHashSetWithExpectedSize</name></name><argument_list>(<argument><expr><call><name><name>clusteringColumns</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>hiddenColumns</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>compactValueColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>hiddenColumns</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>clusteringColumns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name>hiddenColumns</name> <operator>=</operator> <call><name><name>Collections</name><operator>.</operator><name>emptySet</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>boolean</name></type> <name>isCompactTable</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>ColumnMetadata</name></type> <name>getExistingColumn</name><parameter_list>(<parameter><decl><type><name>ColumnIdentifier</name></type> <name>name</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ColumnMetadata</name></type> <name>def</name> <init>= <expr><call><name>getColumn</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>def</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name>isHiddenColumn</name><argument_list>(<argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"Undefined column name %s in table %s"</literal></expr></argument>, <argument><expr><call><name><name>name</name><operator>.</operator><name>toCQLString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            <return>return <expr><name>def</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isHiddenColumn</name><parameter_list>(<parameter><decl><type><name>ColumnMetadata</name></type> <name>def</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>hiddenColumns</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>allColumnsInSelectOrder</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>isStaticCompactTable</name> <init>= <expr><call><name>isStaticCompactTable</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>noNonPkColumns</name> <init>= <expr><call><name>hasEmptyCompactValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>partitionKeyIter</name> <init>= <expr><call><name><name>partitionKeyColumns</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>clusteringIter</name> <init>=
            <expr><ternary><condition><expr><name>isStaticCompactTable</name></expr> ?</condition><then> <expr><call><name><name>Collections</name><operator>.</operator><name>emptyIterator</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>clusteringColumns</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>otherColumns</name> <init>= <expr><ternary><condition><expr><name>noNonPkColumns</name></expr> ?</condition><then> <expr><call><name><name>Collections</name><operator>.</operator><name>emptyIterator</name></name><argument_list>()</argument_list></call></expr>
                                                                   </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>isStaticCompactTable</name></expr> ?</condition><then> <expr><call><name>staticColumns</name><argument_list>()</argument_list></call><operator>.</operator><call><name>selectOrderIterator</name><argument_list>()</argument_list></call></expr>
                                                                                           </then><else>: <expr><call><name><name>regularAndStaticColumns</name><operator>.</operator><name>selectOrderIterator</name></name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <return>return <expr><call><name>columnsIterator</name><argument_list>(<argument><expr><name>partitionKeyIter</name></expr></argument>, <argument><expr><name>clusteringIter</name></expr></argument>, <argument><expr><name>otherColumns</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name>ImmutableList</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>createStatementClusteringColumns</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><ternary><condition><expr><call><name>isStaticCompactTable</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>ImmutableList</name><operator>.</operator><name>of</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name>clusteringColumns</name></expr></else></ternary></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>allColumnsInCreateOrder</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>isStaticCompactTable</name> <init>= <expr><call><name>isStaticCompactTable</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>noNonPkColumns</name> <init>= <expr><operator>!</operator><call><name><name>Flag</name><operator>.</operator><name>isCQLTable</name></name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>hasEmptyCompactValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>partitionKeyIter</name> <init>= <expr><call><name><name>partitionKeyColumns</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>clusteringIter</name></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>isStaticCompactTable</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>clusteringIter</name> <operator>=</operator> <call><name><name>Collections</name><operator>.</operator><name>EMPTY_LIST</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>clusteringIter</name> <operator>=</operator> <call><name>createStatementClusteringColumns</name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>otherColumns</name></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>noNonPkColumns</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>otherColumns</name> <operator>=</operator> <call><name><name>Collections</name><operator>.</operator><name>emptyIterator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>isStaticCompactTable</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>columns</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>ColumnMetadata</name></type> <name>c</name> <range>: <expr><name>regularAndStaticColumns</name></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>c</name><operator>.</operator><name>isStatic</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>columns</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ColumnMetadata</name><argument_list>(<argument><expr><name><name>c</name><operator>.</operator><name>ksName</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>.</operator><name>cfName</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ColumnMetadata</name><operator>.</operator><name>Kind</name><operator>.</operator><name>REGULAR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><name>otherColumns</name> <operator>=</operator> <call><name><name>columns</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name>otherColumns</name> <operator>=</operator> <call><name><name>regularAndStaticColumns</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <return>return <expr><call><name>columnsIterator</name><argument_list>(<argument><expr><name>partitionKeyIter</name></expr></argument>, <argument><expr><name>clusteringIter</name></expr></argument>, <argument><expr><name>otherColumns</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasEmptyCompactValue</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name><name>compactValueColumn</name><operator>.</operator><name>type</name></name> <operator>instanceof</operator> <name>EmptyType</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>validate</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// A compact table should always have a clustering</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Flag</name><operator>.</operator><name>isCQLTable</name></name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>clusteringColumns</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>except</name><argument_list>(<argument><expr><literal type="string">"For table %s, isDense=%b, isCompound=%b, clustering=%s"</literal></expr></argument>, <argument><expr><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>,
                       <argument><expr><call><name><name>Flag</name><operator>.</operator><name>isDense</name></name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Flag</name><operator>.</operator><name>isCompound</name></name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>clusteringColumns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></function>

        <function><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>staticCompactOrSuperTableColumnNameType</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <assert>assert <expr><call><name>isStaticCompactTable</name><argument_list>()</argument_list></call></expr>;</assert>
            <return>return <expr><call><name><name>clusteringColumns</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>type</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>columnDefinitionNameComparator</name><parameter_list>(<parameter><decl><type><name><name>ColumnMetadata</name><operator>.</operator><name>Kind</name></name></type> <name>kind</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><ternary><condition><expr><operator>(</operator><call><name><name>Flag</name><operator>.</operator><name>isSuper</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>kind</name> <operator>==</operator> <name><name>ColumnMetadata</name><operator>.</operator><name>Kind</name><operator>.</operator><name>REGULAR</name></name><operator>)</operator> <operator>||</operator>
                   <operator>(</operator><call><name>isStaticCompactTable</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>kind</name> <operator>==</operator> <name><name>ColumnMetadata</name><operator>.</operator><name>Kind</name><operator>.</operator><name>STATIC</name></name><operator>)</operator></expr>
                   ?</condition><then> <expr><call><name>staticCompactOrSuperTableColumnNameType</name><argument_list>()</argument_list></call></expr>
                   </then><else>: <expr><name><name>UTF8Type</name><operator>.</operator><name>instance</name></name></expr></else></ternary></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>boolean</name></type> <name>isStaticCompactTable</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>!</operator><call><name><name>Flag</name><operator>.</operator><name>isSuper</name></name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>Flag</name><operator>.</operator><name>isDense</name></name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>Flag</name><operator>.</operator><name>isCompound</name></name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>appendCqlTo</name><parameter_list>(<parameter><decl><type><name>CqlBuilder</name></type> <name>builder</name></decl></parameter>,
                                <parameter><decl><type><name>boolean</name></type> <name>includeDroppedColumns</name></decl></parameter>,
                                <parameter><decl><type><name>boolean</name></type> <name>internals</name></decl></parameter>,
                                <parameter><decl><type><name>boolean</name></type> <name>ifNotExists</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"/*"</literal></expr></argument>)</argument_list></call>
                   <operator>.</operator><call><name>newLine</name><argument_list>()</argument_list></call>
                   <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"Warning: Table "</literal></expr></argument>)</argument_list></call>
                   <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                   <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" omitted because it has constructs not compatible with CQL (was created via legacy API)."</literal></expr></argument>)</argument_list></call>
                   <operator>.</operator><call><name>newLine</name><argument_list>()</argument_list></call>
                   <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"Approximate structure, for reference:"</literal></expr></argument>)</argument_list></call>
                   <operator>.</operator><call><name>newLine</name><argument_list>()</argument_list></call>
                   <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"(this should not be used to reproduce this schema)"</literal></expr></argument>)</argument_list></call>
                   <operator>.</operator><call><name>newLine</name><argument_list>()</argument_list></call>
                   <operator>.</operator><call><name>newLine</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>appendCqlTo</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>includeDroppedColumns</name></expr></argument>, <argument><expr><name>internals</name></expr></argument>, <argument><expr><name>ifNotExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>newLine</name></name><argument_list>()</argument_list></call>
                   <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"*/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><name>void</name></type> <name>appendTableOptions</name><parameter_list>(<parameter><decl><type><name>CqlBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>internals</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"COMPACT STORAGE"</literal></expr></argument>)</argument_list></call>
                   <operator>.</operator><call><name>newLine</name><argument_list>()</argument_list></call>
                   <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"AND "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>appendTableOptions</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>internals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ColumnMetadata</name></type> <name>getCompactValueColumn</name><parameter_list>(<parameter><decl><type><name>RegularAndStaticColumns</name></type> <name>columns</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <assert>assert <expr><call><name><name>columns</name><operator>.</operator><name>regulars</name><operator>.</operator><name>simpleColumnCount</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name><name>columns</name><operator>.</operator><name>regulars</name><operator>.</operator><name>complexColumnCount</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</assert>
            <return>return <expr><call><name><name>columns</name><operator>.</operator><name>regulars</name><operator>.</operator><name>getSimple</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

    }</block></class>

}</block></class>
</unit>
