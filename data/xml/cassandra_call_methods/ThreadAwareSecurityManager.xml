<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/security/ThreadAwareSecurityManager.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>security</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>ReflectPermission</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>AccessControlException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>AllPermission</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>CodeSource</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>Permission</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>PermissionCollection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>Permissions</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>Policy</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>ProtectionDomain</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Enumeration</name></name>;</import>

<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>FastThreadLocal</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>logging</name><operator>.</operator><name>LoggingSupportFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Custom {@link SecurityManager} and {@link Policy} implementation that only performs access checks
 * if explicitly enabled.
 * &lt;p&gt;
 * This implementation gives no measurable performance penalty
 * (see &lt;a href="http://cstar.datastax.com/tests/id/1d461628-12ba-11e5-918f-42010af0688f"&gt;see cstar test&lt;/a&gt;).
 * This is better than the penalty of 1 to 3 percent using a standard {@code SecurityManager} with an &lt;i&gt;allow all&lt;/i&gt; policy.
 * &lt;/p&gt;
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>ThreadAwareSecurityManager</name> <super_list><extends>extends <super><name>SecurityManager</name></super></extends></super_list>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>PermissionCollection</name></type> <name>noPermissions</name> <init>= <expr><operator>new</operator> <class><super><name>PermissionCollection</name></super><argument_list>()</argument_list>
    <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>Permission</name></type> <name>permission</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>implies</name><parameter_list>(<parameter><decl><type><name>Permission</name></type> <name>permission</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name>Enumeration</name><argument_list type="generic">&lt;<argument><name>Permission</name></argument>&gt;</argument_list></name></type> <name>elements</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>emptyEnumeration</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>RuntimePermission</name></type> <name>CHECK_MEMBER_ACCESS_PERMISSION</name> <init>= <expr><operator>new</operator> <call><name>RuntimePermission</name><argument_list>(<argument><expr><literal type="string">"accessDeclaredMembers"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>RuntimePermission</name></type> <name>MODIFY_THREAD_PERMISSION</name> <init>= <expr><operator>new</operator> <call><name>RuntimePermission</name><argument_list>(<argument><expr><literal type="string">"modifyThread"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>RuntimePermission</name></type> <name>MODIFY_THREADGROUP_PERMISSION</name> <init>= <expr><operator>new</operator> <call><name>RuntimePermission</name><argument_list>(<argument><expr><literal type="string">"modifyThreadGroup"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>RuntimePermission</name></type> <name>SET_SECURITY_MANAGER_PERMISSION</name> <init>= <expr><operator>new</operator> <call><name>RuntimePermission</name><argument_list>(<argument><expr><literal type="string">"setSecurityManager"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Nashorn / Java 11</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>RuntimePermission</name></type> <name>NASHORN_GLOBAL_PERMISSION</name> <init>= <expr><operator>new</operator> <call><name>RuntimePermission</name><argument_list>(<argument><expr><literal type="string">"nashorn.createGlobal"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ReflectPermission</name></type> <name>SUPPRESS_ACCESS_CHECKS_PERMISSION</name> <init>= <expr><operator>new</operator> <call><name>ReflectPermission</name><argument_list>(<argument><expr><literal type="string">"suppressAccessChecks"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>RuntimePermission</name></type> <name>DYNALINK_LOOKUP_PERMISSION</name> <init>= <expr><operator>new</operator> <call><name>RuntimePermission</name><argument_list>(<argument><expr><literal type="string">"dynalink.getLookup"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>RuntimePermission</name></type> <name>GET_CLASSLOADER_PERMISSION</name> <init>= <expr><operator>new</operator> <call><name>RuntimePermission</name><argument_list>(<argument><expr><literal type="string">"getClassLoader"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>installed</name></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>install</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>installed</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>setSecurityManager</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ThreadAwareSecurityManager</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>LoggingSupportFactory</name><operator>.</operator><name>getLoggingSupport</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>onStartup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>installed</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <static>static
    <block>{<block_content>
        <comment type="line">//</comment>
        <comment type="line">// Use own security policy to be easier (and faster) since the C* has no fine grained permissions.</comment>
        <comment type="line">// Either code has access to everything or code has access to nothing (UDFs).</comment>
        <comment type="line">// This also removes the burden to maintain and configure policy files for production, unit tests etc.</comment>
        <comment type="line">//</comment>
        <comment type="line">// Note: a permission is only granted, if there is no objector. This means that</comment>
        <comment type="line">// AccessController/AccessControlContext collect all applicable ProtectionDomains - only if none of these</comment>
        <comment type="line">// applicable ProtectionDomains denies access, the permission is granted.</comment>
        <comment type="line">// A ProtectionDomain can have its origin at an oridinary code-source or provided via a</comment>
        <comment type="line">// AccessController.doPrivileded() call.</comment>
        <comment type="line">//</comment>
        <expr_stmt><expr><call><name><name>Policy</name><operator>.</operator><name>setPolicy</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Policy</name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>PermissionCollection</name></type> <name>getPermissions</name><parameter_list>(<parameter><decl><type><name>CodeSource</name></type> <name>codesource</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <comment type="line">// contract of getPermissions() methods is to return a _mutable_ PermissionCollection</comment>

                <decl_stmt><decl><type><name>Permissions</name></type> <name>perms</name> <init>= <expr><operator>new</operator> <call><name>Permissions</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name>codesource</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>codesource</name><operator>.</operator><name>getLocation</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><name>perms</name></expr>;</return></block_content></block></if></if_stmt>

                <switch>switch <condition>(<expr><call><name><name>codesource</name><operator>.</operator><name>getLocation</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getProtocol</name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><literal type="string">"jar"</literal></expr>:</case>   <comment type="line">// One-JAR or Uno-Jar source</comment>
                        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>codesource</name><operator>.</operator><name>getLocation</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPath</name><argument_list>()</argument_list></call><operator>.</operator><call><name>startsWith</name><argument_list>(<argument><expr><literal type="string">"file:"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                            <return>return <expr><name>perms</name></expr>;</return>
                        </block_content>}</block></if></if_stmt> <comment type="line">// else fall through and add AllPermission()</comment>
                    <case>case <expr><literal type="string">"file"</literal></expr>:</case>  <comment type="line">// Standard file system source</comment>
                        <comment type="line">// All JARs and class files reside on the file system - we can safely</comment>
                        <comment type="line">// assume that these classes are "good".</comment>
                        <expr_stmt><expr><call><name><name>perms</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AllPermission</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><name>perms</name></expr>;</return>
                </block_content>}</block></switch>

                <return>return <expr><name>perms</name></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>PermissionCollection</name></type> <name>getPermissions</name><parameter_list>(<parameter><decl><type><name>ProtectionDomain</name></type> <name>domain</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <return>return <expr><call><name>getPermissions</name><argument_list>(<argument><expr><call><name><name>domain</name><operator>.</operator><name>getCodeSource</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>boolean</name></type> <name>implies</name><parameter_list>(<parameter><decl><type><name>ProtectionDomain</name></type> <name>domain</name></decl></parameter>, <parameter><decl><type><name>Permission</name></type> <name>permission</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name>CodeSource</name></type> <name>codesource</name> <init>= <expr><call><name><name>domain</name><operator>.</operator><name>getCodeSource</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>codesource</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>codesource</name><operator>.</operator><name>getLocation</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

                <switch>switch <condition>(<expr><call><name><name>codesource</name><operator>.</operator><name>getLocation</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getProtocol</name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><literal type="string">"jar"</literal></expr>:</case>   <comment type="line">// One-JAR or Uno-Jar source</comment>
                        <return>return <expr><call><name><name>codesource</name><operator>.</operator><name>getLocation</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPath</name><argument_list>()</argument_list></call><operator>.</operator><call><name>startsWith</name><argument_list>(<argument><expr><literal type="string">"file:"</literal></expr></argument>)</argument_list></call></expr>;</return>
                    <case>case <expr><literal type="string">"file"</literal></expr>:</case>  <comment type="line">// Standard file system source</comment>
                        <comment type="line">// All JARs and class files reside on the file system - we can safely</comment>
                        <comment type="line">// assume that these classes are "good".</comment>
                        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                </block_content>}</block></switch>

                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></static>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>FastThreadLocal</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>initializedThread</name> <init>= <expr><operator>new</operator> <call><name><name>FastThreadLocal</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>ThreadAwareSecurityManager</name><parameter_list>()</parameter_list>
    <block>{<block_content>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isSecuredThread</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ThreadGroup</name></type> <name>tg</name> <init>= <expr><call><name><name>Thread</name><operator>.</operator><name>currentThread</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getThreadGroup</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tg</name> <operator>instanceof</operator> <name>SecurityThreadGroup</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>Boolean</name></type> <name>threadInitialized</name> <init>= <expr><call><name><name>initializedThread</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>threadInitialized</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>initializedThread</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SecurityThreadGroup</name><operator>)</operator> <name>tg</name><operator>)</operator><operator>.</operator><call><name>initializeThread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>initializedThread</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>threadInitialized</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>threadInitialized</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>checkAccess</name><parameter_list>(<parameter><decl><type><name>Thread</name></type> <name>t</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// need to override since the default implementation only checks the permission if the current thread's</comment>
        <comment type="line">// in the root-thread-group</comment>

        <if_stmt><if>if <condition>(<expr><call><name>isSecuredThread</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>AccessControlException</name><argument_list>(<argument><expr><literal type="string">"access denied: "</literal> <operator>+</operator> <name>MODIFY_THREAD_PERMISSION</name></expr></argument>, <argument><expr><name>MODIFY_THREAD_PERMISSION</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>checkAccess</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>checkAccess</name><parameter_list>(<parameter><decl><type><name>ThreadGroup</name></type> <name>g</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// need to override since the default implementation only checks the permission if the current thread's</comment>
        <comment type="line">// in the root-thread-group</comment>

        <if_stmt><if>if <condition>(<expr><call><name>isSecuredThread</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>AccessControlException</name><argument_list>(<argument><expr><literal type="string">"access denied: "</literal> <operator>+</operator> <name>MODIFY_THREADGROUP_PERMISSION</name></expr></argument>, <argument><expr><name>MODIFY_THREADGROUP_PERMISSION</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>checkAccess</name></name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>checkPermission</name><parameter_list>(<parameter><decl><type><name>Permission</name></type> <name>perm</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>enableUserDefinedFunctionsThreads</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>allowExtraInsecureUDFs</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>SET_SECURITY_MANAGER_PERMISSION</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>AccessControlException</name><argument_list>(<argument><expr><literal type="string">"Access denied"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isSecuredThread</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <comment type="line">// required by JavaDriver 2.2.0-rc3 and 3.0.0-a2 or newer</comment>
        <comment type="line">// code in com.datastax.driver.core.CodecUtils uses Guava stuff, which in turns requires this permission</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>CHECK_MEMBER_ACCESS_PERMISSION</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <comment type="line">// Nashorn / Java 11</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>NASHORN_GLOBAL_PERMISSION</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>SUPPRESS_ACCESS_CHECKS_PERMISSION</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>DYNALINK_LOOKUP_PERMISSION</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>GET_CLASSLOADER_PERMISSION</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>checkPermission</name></name><argument_list>(<argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>checkPermission</name><parameter_list>(<parameter><decl><type><name>Permission</name></type> <name>perm</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>context</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isSecuredThread</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>checkPermission</name></name><argument_list>(<argument><expr><name>perm</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>checkPackageAccess</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>pkg</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isSecuredThread</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>SecurityThreadGroup</name><operator>)</operator> <call><name><name>Thread</name><operator>.</operator><name>currentThread</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getThreadGroup</name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>isPackageAllowed</name><argument_list>(<argument><expr><name>pkg</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>RuntimePermission</name></type> <name>perm</name> <init>= <expr><operator>new</operator> <call><name>RuntimePermission</name><argument_list>(<argument><expr><literal type="string">"accessClassInPackage."</literal> <operator>+</operator> <name>pkg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>AccessControlException</name><argument_list>(<argument><expr><literal type="string">"access denied: "</literal> <operator>+</operator> <name>perm</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>
