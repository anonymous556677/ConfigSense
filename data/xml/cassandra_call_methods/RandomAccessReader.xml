<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/io/util/RandomAccessReader.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteOrder</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>annotation</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>NotThreadSafe</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>primitives</name><operator>.</operator><name>Ints</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>compress</name><operator>.</operator><name>BufferType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>Rebufferer</name><operator>.</operator><name>BufferHolder</name></name>;</import>

<class><annotation>@<name>NotThreadSafe</name></annotation>
<specifier>public</specifier> class <name>RandomAccessReader</name> <super_list><extends>extends <super><name>RebufferingInputStream</name></super></extends> <implements>implements <super><name>FileDataInput</name></super></implements></super_list>
<block>{
    <comment type="line">// The default buffer size when the client doesn't specify it</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_BUFFER_SIZE</name> <init>= <expr><literal type="number">4096</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// offset of the last file mark</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>markedPointer</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>Rebufferer</name></type> <name>rebufferer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>BufferHolder</name></type> <name>bufferHolder</name> <init>= <expr><name><name>Rebufferer</name><operator>.</operator><name>EMPTY</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Only created through Builder
     *
     * @param rebufferer Rebufferer to use
     */</comment>
    <constructor><name>RandomAccessReader</name><parameter_list>(<parameter><decl><type><name>Rebufferer</name></type> <name>rebufferer</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><call><name><name>Rebufferer</name><operator>.</operator><name>EMPTY</name><operator>.</operator><name>buffer</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>rebufferer</name></name> <operator>=</operator> <name>rebufferer</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Read data from file starting from current currentOffset to populate buffer.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>reBuffer</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isEOF</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>reBufferAt</name><argument_list>(<argument><expr><call><name>current</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>reBufferAt</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>position</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>bufferHolder</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bufferHolder</name> <operator>=</operator> <call><name><name>rebufferer</name><operator>.</operator><name>rebuffer</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name><name>bufferHolder</name><operator>.</operator><name>buffer</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>buffer</name><operator>.</operator><name>position</name></name><argument_list>(<argument><expr><call><name><name>Ints</name><operator>.</operator><name>checkedCast</name></name><argument_list>(<argument><expr><name>position</name> <operator>-</operator> <call><name><name>bufferHolder</name><operator>.</operator><name>offset</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <assert>assert <expr><call><name><name>buffer</name><operator>.</operator><name>order</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ByteOrder</name><operator>.</operator><name>BIG_ENDIAN</name></name> <operator>:</operator> <literal type="string">"Buffer must have BIG ENDIAN byte ordering"</literal></expr>;</assert>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>getFilePointer</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>     <comment type="line">// closed already</comment>
            <return>return <expr><call><name><name>rebufferer</name><operator>.</operator><name>fileLength</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><call><name>current</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>long</name></type> <name>current</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>bufferHolder</name><operator>.</operator><name>offset</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>buffer</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getPath</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getChannel</name><argument_list>()</argument_list></call><operator>.</operator><call><name>filePath</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>ChannelProxy</name></type> <name>getChannel</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>rebufferer</name><operator>.</operator><name>channel</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>reset</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name>seek</name><argument_list>(<argument><expr><name>markedPointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>markSupported</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>bytesPastMark</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>bytes</name> <init>= <expr><call><name>current</name><argument_list>()</argument_list></call> <operator>-</operator> <name>markedPointer</name></expr></init></decl>;</decl_stmt>
        <assert>assert <expr><name>bytes</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</assert>
        <return>return <expr><name>bytes</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>DataPosition</name></type> <name>mark</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>markedPointer</name> <operator>=</operator> <call><name>current</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>new</operator> <call><name>BufferedRandomAccessFileMark</name><argument_list>(<argument><expr><name>markedPointer</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>reset</name><parameter_list>(<parameter><decl><type><name>DataPosition</name></type> <name>mark</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><name>mark</name> <operator>instanceof</operator> <name>BufferedRandomAccessFileMark</name></expr>;</assert>
        <expr_stmt><expr><call><name>seek</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>BufferedRandomAccessFileMark</name><operator>)</operator> <name>mark</name><operator>)</operator><operator>.</operator><name>pointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>bytesPastMark</name><parameter_list>(<parameter><decl><type><name>DataPosition</name></type> <name>mark</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><name>mark</name> <operator>instanceof</operator> <name>BufferedRandomAccessFileMark</name></expr>;</assert>
        <decl_stmt><decl><type><name>long</name></type> <name>bytes</name> <init>= <expr><call><name>current</name><argument_list>()</argument_list></call> <operator>-</operator> <operator>(</operator><operator>(</operator><name>BufferedRandomAccessFileMark</name><operator>)</operator> <name>mark</name><operator>)</operator><operator>.</operator><name>pointer</name></expr></init></decl>;</decl_stmt>
        <assert>assert <expr><name>bytes</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</assert>
        <return>return <expr><name>bytes</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return true if there is no more data to read
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isEOF</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>current</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>length</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>bytesRemaining</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>length</name><argument_list>()</argument_list></call> <operator>-</operator> <call><name>getFilePointer</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>available</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <return>return <expr><call><name><name>Ints</name><operator>.</operator><name>saturatedCast</name></name><argument_list>(<argument><expr><call><name>bytesRemaining</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <comment type="line">// close needs to be idempotent.</comment>
        <if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>bufferHolder</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rebufferer</name><operator>.</operator><name>closeReader</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>buffer</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>bufferHolder</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>

        <comment type="line">//For performance reasons we don't keep a reference to the file</comment>
        <comment type="line">//channel so we don't close it</comment>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="char">':'</literal> <operator>+</operator> <name>rebufferer</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Class to hold a mark to the position of the file
     */</comment>
    <class><specifier>private</specifier> <specifier>static</specifier> class <name>BufferedRandomAccessFileMark</name> <super_list><implements>implements <super><name>DataPosition</name></super></implements></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>pointer</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>BufferedRandomAccessFileMark</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>pointer</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>pointer</name></name> <operator>=</operator> <name>pointer</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>
    }</block></class>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>seek</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>newPosition</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>newPosition</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"new position should not be negative"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Attempted to seek in a closed RAR"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>long</name></type> <name>bufferOffset</name> <init>= <expr><call><name><name>bufferHolder</name><operator>.</operator><name>offset</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>newPosition</name> <operator>&gt;=</operator> <name>bufferOffset</name> <operator>&amp;&amp;</operator> <name>newPosition</name> <operator>&lt;</operator> <name>bufferOffset</name> <operator>+</operator> <call><name><name>buffer</name><operator>.</operator><name>limit</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>buffer</name><operator>.</operator><name>position</name></name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>newPosition</name> <operator>-</operator> <name>bufferOffset</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>newPosition</name> <operator>&gt;</operator> <call><name>length</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Unable to seek to position %d in %s (%d bytes) in read-only mode"</literal></expr></argument>,
                                                         <argument><expr><name>newPosition</name></expr></argument>, <argument><expr><call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>length</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>reBufferAt</name><argument_list>(<argument><expr><name>newPosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>skipBytes</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Attempted skipBytes() on a closed RAR"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>current</name> <init>= <expr><call><name>current</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>newPosition</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>current</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><call><name>length</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>newPosition</name> <operator>-</operator> <name>current</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>seek</name><argument_list>(<argument><expr><name>newPosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>n</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Reads a line of text form the current position in this file. A line is
     * represented by zero or more characters followed by {@code '\n'}, {@code
     * '\r'}, {@code "\r\n"} or the end of file marker. The string does not
     * include the line terminating sequence.
     * &lt;p&gt;
     * Blocks until a line terminating sequence has been read, the end of the
     * file is reached or an exception is thrown.
     * &lt;/p&gt;
     * @return the contents of the line or {@code null} if no characters have
     * been read before the end of the file has been reached.
     * @throws IOException if this file is closed or another I/O error occurs.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>readLine</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>line</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><literal type="number">80</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// Typical line length</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>foundTerminator</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>unreadPosition</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>nextByte</name> <init>= <expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <switch>switch <condition>(<expr><name>nextByte</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
                    <return>return <expr><ternary><condition><expr><call><name><name>line</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name><name>line</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</return>
                <case>case <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="char">'\r'</literal></expr>:</case>
                    <if_stmt><if>if <condition>(<expr><name>foundTerminator</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>seek</name><argument_list>(<argument><expr><name>unreadPosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><call><name><name>line</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>foundTerminator</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    <comment type="block">/* Have to be able to peek ahead one byte */</comment>
                    <expr_stmt><expr><name>unreadPosition</name> <operator>=</operator> <call><name>getPosition</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="char">'\n'</literal></expr>:</case>
                    <return>return <expr><call><name><name>line</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
                <default>default:</default>
                    <if_stmt><if>if <condition>(<expr><name>foundTerminator</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>seek</name><argument_list>(<argument><expr><name>unreadPosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><call><name><name>line</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>line</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator> <name>nextByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></switch>
        </block_content>}</block></while>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>length</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>rebufferer</name><operator>.</operator><name>fileLength</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getPosition</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>current</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>double</name></type> <name>getCrcCheckChance</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>rebufferer</name><operator>.</operator><name>getCrcCheckChance</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// A wrapper of the RandomAccessReader that closes the channel when done.</comment>
    <comment type="line">// For performance reasons RAR does not increase the reference count of</comment>
    <comment type="line">// a channel but assumes the owner will keep it open and close it,</comment>
    <comment type="line">// see CASSANDRA-9379, this thin class is just for those cases where we do</comment>
    <comment type="line">// not have a shared channel.</comment>
    <class><specifier>static</specifier> class <name>RandomAccessReaderWithOwnChannel</name> <super_list><extends>extends <super><name>RandomAccessReader</name></super></extends></super_list>
    <block>{
        <constructor><name>RandomAccessReaderWithOwnChannel</name><parameter_list>(<parameter><decl><type><name>Rebufferer</name></type> <name>rebufferer</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>rebufferer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <try>try
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <finally>finally
            <block>{<block_content>
                <try>try
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>rebufferer</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <finally>finally
                <block>{<block_content>
                    <expr_stmt><expr><call><name>getChannel</name><argument_list>()</argument_list></call><operator>.</operator><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></finally></try>
            </block_content>}</block></finally></try>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Open a RandomAccessReader (not compressed, not mmapped, no read throttling) that will own its channel.
     *
     * @param file File to open for reading
     * @return new RandomAccessReader that owns the channel opened in this method.
     */</comment>
    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"resource"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>RandomAccessReader</name></type> <name>open</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ChannelProxy</name></type> <name>channel</name> <init>= <expr><operator>new</operator> <call><name>ChannelProxy</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{<block_content>
            <decl_stmt><decl><type><name>ChunkReader</name></type> <name>reader</name> <init>= <expr><operator>new</operator> <call><name>SimpleChunkReader</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>BufferType</name><operator>.</operator><name>OFF_HEAP</name></name></expr></argument>, <argument><expr><name>DEFAULT_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Rebufferer</name></type> <name>rebufferer</name> <init>= <expr><call><name><name>reader</name><operator>.</operator><name>instantiateRebufferer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><operator>new</operator> <call><name>RandomAccessReaderWithOwnChannel</name><argument_list>(<argument><expr><name>rebufferer</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>channel</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>t</name></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>
}</block></class>
</unit>
