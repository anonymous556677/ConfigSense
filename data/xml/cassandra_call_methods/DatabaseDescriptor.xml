<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/config/DatabaseDescriptor.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>file</name><operator>.</operator><name>FileStore</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>file</name><operator>.</operator><name>NoSuchFileException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>file</name><operator>.</operator><name>Path</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>file</name><operator>.</operator><name>Paths</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>function</name><operator>.</operator><name>Function</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>function</name><operator>.</operator><name>Supplier</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableSet</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>primitives</name><operator>.</operator><name>Ints</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>primitives</name><operator>.</operator><name>Longs</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>RateLimiter</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>audit</name><operator>.</operator><name>AuditLogOptions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>fql</name><operator>.</operator><name>FullQueryLoggerOptions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>auth</name><operator>.</operator><name>AllowAllInternodeAuthenticator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>auth</name><operator>.</operator><name>AuthConfig</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>auth</name><operator>.</operator><name>IAuthenticator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>auth</name><operator>.</operator><name>IAuthorizer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>auth</name><operator>.</operator><name>IInternodeAuthenticator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>auth</name><operator>.</operator><name>INetworkAuthorizer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>auth</name><operator>.</operator><name>IRoleManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>Config</name><operator>.</operator><name>CommitLogSync</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>ConsistencyLevel</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>commitlog</name><operator>.</operator><name>AbstractCommitLogSegmentManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>commitlog</name><operator>.</operator><name>CommitLog</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>commitlog</name><operator>.</operator><name>CommitLogSegmentManagerCDC</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>commitlog</name><operator>.</operator><name>CommitLogSegmentManagerStandard</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>IPartitioner</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>ConfigurationException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>FSWriteError</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>DiskOptimizationStrategy</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>FileUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>SpinningDiskOptimizationStrategy</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>SsdDiskOptimizationStrategy</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>DynamicEndpointSnitch</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>EndpointSnitchInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>IEndpointSnitch</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>InetAddressAndPort</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>Replica</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>SeedProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>security</name><operator>.</operator><name>EncryptionContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>security</name><operator>.</operator><name>SSLFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>CacheService</name><operator>.</operator><name>CacheType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>FBUtilities</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang3</name><operator>.</operator><name>ArrayUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang3</name><operator>.</operator><name>StringUtils</name></name>;</import>

<import>import static <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>CassandraRelevantProperties</name><operator>.</operator><name>OS_ARCH</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>CassandraRelevantProperties</name><operator>.</operator><name>SUN_ARCH_DATA_MODEL</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>FileUtils</name><operator>.</operator><name>ONE_GB</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>FileUtils</name><operator>.</operator><name>ONE_MB</name></name>;</import>

<class><specifier>public</specifier> class <name>DatabaseDescriptor</name>
<block>{
    <static>static
    <block>{<block_content>
        <comment type="line">// This static block covers most usages</comment>
        <expr_stmt><expr><call><name><name>FBUtilities</name><operator>.</operator><name>preventIllegalAccessWarnings</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"io.netty.transport.estimateSizeOnSubmit"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></static>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>DatabaseDescriptor</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Tokens are serialized in a Gossip VersionedValue String.  VV are restricted to 64KB
     * when we send them over the wire, which works out to about 1700 tokens.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MAX_NUM_TOKENS</name> <init>= <expr><literal type="number">1536</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Config</name></type> <name>conf</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Request timeouts can not be less than below defined value (see CASSANDRA-9375)
     */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>LOWEST_ACCEPTED_TIMEOUT</name> <init>= <expr><literal type="number">10L</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>IEndpointSnitch</name></type> <name>snitch</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>InetAddress</name></type> <name>listenAddress</name></decl>;</decl_stmt> <comment type="line">// leave null so we can fall through to getLocalHost</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>InetAddress</name></type> <name>broadcastAddress</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>InetAddress</name></type> <name>rpcAddress</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>InetAddress</name></type> <name>broadcastRpcAddress</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>SeedProvider</name></type> <name>seedProvider</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>IInternodeAuthenticator</name></type> <name>internodeAuthenticator</name> <init>= <expr><operator>new</operator> <call><name>AllowAllInternodeAuthenticator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Hashing strategy Random or OPHF */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>IPartitioner</name></type> <name>partitioner</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>paritionerName</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Config</name><operator>.</operator><name>DiskAccessMode</name></name></type> <name>indexAccessMode</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>IAuthenticator</name></type> <name>authenticator</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>IAuthorizer</name></type> <name>authorizer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>INetworkAuthorizer</name></type> <name>networkAuthorizer</name></decl>;</decl_stmt>
    <comment type="line">// Don't initialize the role manager until applying config. The options supported by CassandraRoleManager</comment>
    <comment type="line">// depend on the configured IAuthenticator, so defer creating it until that's been set.</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>IRoleManager</name></type> <name>roleManager</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>long</name></type> <name>preparedStatementsCacheSizeInMB</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>long</name></type> <name>keyCacheSizeInMB</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>long</name></type> <name>counterCacheSizeInMB</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>long</name></type> <name>indexSummaryCapacityInMB</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>localDC</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>&gt;</argument_list></name></type> <name>localComparator</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>EncryptionContext</name></type> <name>encryptionContext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>hasLoggedConfig</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>DiskOptimizationStrategy</name></type> <name>diskOptimizationStrategy</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>clientInitialized</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>toolInitialized</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>daemonInitialized</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>searchConcurrencyFactor</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name><name>Config</name><operator>.</operator><name>PROPERTY_PREFIX</name></name> <operator>+</operator> <literal type="string">"search_concurrency_factor"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>disableSTCSInL0</name> <init>= <expr><call><name><name>Boolean</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>Config</name><operator>.</operator><name>PROPERTY_PREFIX</name></name> <operator>+</operator> <literal type="string">"disable_stcs_in_l0"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>unsafeSystem</name> <init>= <expr><call><name><name>Boolean</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>Config</name><operator>.</operator><name>PROPERTY_PREFIX</name></name> <operator>+</operator> <literal type="string">"unsafesystem"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// turns some warnings into exceptions for testing</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>strictRuntimeChecks</name> <init>= <expr><call><name><name>Boolean</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.strict.runtime.checks"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>allowUnlimitedConcurrentValidations</name> <init>= <expr><call><name><name>Boolean</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.allow_unlimited_concurrent_validations"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Function</name><argument_list type="generic">&lt;<argument><name>CommitLog</name></argument>, <argument><name>AbstractCommitLogSegmentManager</name></argument>&gt;</argument_list></name></type> <name>commitLogSegmentMgrProvider</name> <init>= <expr><ternary><condition><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>c</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><ternary><condition><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>isCDCEnabled</name></name><argument_list>()</argument_list></call></expr>
                                       ?</condition><then> <expr><operator>new</operator> <call><name>CommitLogSegmentManagerCDC</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getCommitLogLocation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>
                                       </then><else>: <expr><operator>new</operator> <call><name>CommitLogSegmentManagerStandard</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getCommitLogLocation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></block_content></block></lambda></expr></condition></ternary></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>daemonInitialization</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name>daemonInitialization</name><argument_list>(<argument><expr><name>DatabaseDescriptor</name><operator>::</operator><name>loadConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>daemonInitialization</name><parameter_list>(<parameter><decl><type><name><name>Supplier</name><argument_list type="generic">&lt;<argument><name>Config</name></argument>&gt;</argument_list></name></type> <name>config</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>toolInitialized</name></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"toolInitialization() already called"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>clientInitialized</name></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"clientInitialization() already called"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <comment type="line">// Some unit tests require this :(</comment>
        <if_stmt><if>if <condition>(<expr><name>daemonInitialized</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>daemonInitialized</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setConfig</name><argument_list>(<argument><expr><call><name><name>config</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>applyAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>AuthConfig</name><operator>.</operator><name>applyAuth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Equivalent to {@link #toolInitialization(boolean) toolInitialization(true)}.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>toolInitialization</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>toolInitialization</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Initializes this class as a tool, which means that the configuration is loaded
     * using {@link #loadConfig()} and all non-daemon configuration parts will be setup.
     *
     * @param failIfDaemonOrClient if {@code true} and a call to {@link #daemonInitialization()} or
     *                             {@link #clientInitialization()} has been performed before, an
     *                             {@link AssertionError} will be thrown.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>toolInitialization</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>failIfDaemonOrClient</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>failIfDaemonOrClient</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>daemonInitialized</name> <operator>||</operator> <name>clientInitialized</name><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>daemonInitialized</name></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"daemonInitialization() already called"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>clientInitialized</name></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"clientInitialization() already called"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>toolInitialized</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>toolInitialized</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setConfig</name><argument_list>(<argument><expr><call><name>loadConfig</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>applySimpleConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>applyPartitioner</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>applySnitch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>applyEncryptionContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Equivalent to {@link #clientInitialization(boolean) clientInitialization(true)}.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>clientInitialization</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>clientInitialization</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Initializes this class as a client, which means that just an empty configuration will
     * be used.
     *
     * @param failIfDaemonOrTool if {@code true} and a call to {@link #daemonInitialization()} or
     *                           {@link #toolInitialization()} has been performed before, an
     *                           {@link AssertionError} will be thrown.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>clientInitialization</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>failIfDaemonOrTool</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>failIfDaemonOrTool</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>daemonInitialized</name> <operator>||</operator> <name>toolInitialized</name><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>daemonInitialized</name></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"daemonInitialization() already called"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>toolInitialized</name></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"toolInitialization() already called"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>clientInitialized</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>clientInitialized</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>Config</name><operator>.</operator><name>setClientMode</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>conf</name> <operator>=</operator> <operator>new</operator> <call><name>Config</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>diskOptimizationStrategy</name> <operator>=</operator> <operator>new</operator> <call><name>SpinningDiskOptimizationStrategy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isClientInitialized</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>clientInitialized</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isToolInitialized</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>toolInitialized</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isClientOrToolInitialized</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>clientInitialized</name> <operator>||</operator> <name>toolInitialized</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isDaemonInitialized</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>daemonInitialized</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Config</name></type> <name>getRawConfig</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>conf</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>Config</name></type> <name>loadConfig</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>Config</name><operator>.</operator><name>getOverrideLoadConfig</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>Config</name><operator>.</operator><name>getOverrideLoadConfig</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>loaderClass</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name><name>Config</name><operator>.</operator><name>PROPERTY_PREFIX</name></name> <operator>+</operator> <literal type="string">"config.loader"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ConfigurationLoader</name></type> <name>loader</name> <init>= <expr><ternary><condition><expr><name>loaderClass</name> <operator>==</operator> <literal type="null">null</literal></expr>
                                     ?</condition><then> <expr><operator>new</operator> <call><name>YamlConfigurationLoader</name><argument_list>()</argument_list></call></expr>
                                     </then><else>: <expr><call><name><name>FBUtilities</name><operator>.</operator><name>construct</name></name><argument_list>(<argument><expr><name>loaderClass</name></expr></argument>, <argument><expr><literal type="string">"configuration loading"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Config</name></type> <name>config</name> <init>= <expr><call><name><name>loader</name><operator>.</operator><name>loadConfig</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasLoggedConfig</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>hasLoggedConfig</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Config</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><name>config</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>InetAddress</name></type> <name>getNetworkInterfaceAddress</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>intf</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>configName</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>preferIPv6</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <decl_stmt><decl><type><name>NetworkInterface</name></type> <name>ni</name> <init>= <expr><call><name><name>NetworkInterface</name><operator>.</operator><name>getByName</name></name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ni</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Configured "</literal> <operator>+</operator> <name>configName</name> <operator>+</operator> <literal type="string">" \""</literal> <operator>+</operator> <name>intf</name> <operator>+</operator> <literal type="string">"\" could not be found"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name><name>Enumeration</name><argument_list type="generic">&lt;<argument><name>InetAddress</name></argument>&gt;</argument_list></name></type> <name>addrs</name> <init>= <expr><call><name><name>ni</name><operator>.</operator><name>getInetAddresses</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>addrs</name><operator>.</operator><name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Configured "</literal> <operator>+</operator> <name>configName</name> <operator>+</operator> <literal type="string">" \""</literal> <operator>+</operator> <name>intf</name> <operator>+</operator> <literal type="string">"\" was found, but had no addresses"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <comment type="block">/*
             * Try to return the first address of the preferred type, otherwise return the first address
             */</comment>
            <decl_stmt><decl><type><name>InetAddress</name></type> <name>retval</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>addrs</name><operator>.</operator><name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>InetAddress</name></type> <name>temp</name> <init>= <expr><call><name><name>addrs</name><operator>.</operator><name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>preferIPv6</name> <operator>&amp;&amp;</operator> <name>temp</name> <operator>instanceof</operator> <name>Inet6Address</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>temp</name></expr>;</return></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>preferIPv6</name> <operator>&amp;&amp;</operator> <name>temp</name> <operator>instanceof</operator> <name>Inet4Address</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>temp</name></expr>;</return></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>retval</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></while>
            <return>return <expr><name>retval</name></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>SocketException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Configured "</literal> <operator>+</operator> <name>configName</name> <operator>+</operator> <literal type="string">" \""</literal> <operator>+</operator> <name>intf</name> <operator>+</operator> <literal type="string">"\" caused an exception"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>setConfig</name><parameter_list>(<parameter><decl><type><name>Config</name></type> <name>config</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>conf</name> <operator>=</operator> <name>config</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>applyAll</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <comment type="line">//InetAddressAndPort cares that applySimpleConfig runs first</comment>
        <expr_stmt><expr><call><name>applySimpleConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>applyPartitioner</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>applyAddressConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>applySnitch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>applyTokensConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>applySeedProvider</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>applyEncryptionContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>applySslContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>applySimpleConfig</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <comment type="line">//Doing this first before all other things in case other pieces of config want to construct</comment>
        <comment type="line">//InetAddressAndPort and get the right defaults</comment>
        <expr_stmt><expr><call><name><name>InetAddressAndPort</name><operator>.</operator><name>initializeDefaultPort</name></name><argument_list>(<argument><expr><call><name>getStoragePort</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>commitlog_sync</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Missing required directive CommitLogSync"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>commitlog_sync</name></name> <operator>==</operator> <name><name>Config</name><operator>.</operator><name>CommitLogSync</name><operator>.</operator><name>batch</name></name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>commitlog_sync_period_in_ms</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Batch sync specified, but commitlog_sync_period_in_ms found. Only specify commitlog_sync_batch_window_in_ms when using batch sync"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Syncing log with batch mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name><name>conf</name><operator>.</operator><name>commitlog_sync</name></name> <operator>==</operator> <name><name>CommitLogSync</name><operator>.</operator><name>group</name></name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>Double</name><operator>.</operator><name>isNaN</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>commitlog_sync_group_window_in_ms</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>conf</name><operator>.</operator><name>commitlog_sync_group_window_in_ms</name></name> <operator>&lt;=</operator> <literal type="number">0d</literal></expr>)</condition>
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Missing value for commitlog_sync_group_window_in_ms: positive double value expected."</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name><name>conf</name><operator>.</operator><name>commitlog_sync_period_in_ms</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Group sync specified, but commitlog_sync_period_in_ms found. Only specify commitlog_sync_group_window_in_ms when using group sync"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Syncing log with a group window of {}"</literal></expr></argument>, <argument><expr><name><name>conf</name><operator>.</operator><name>commitlog_sync_period_in_ms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>commitlog_sync_period_in_ms</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Missing value for commitlog_sync_period_in_ms: positive integer expected"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name><name>Double</name><operator>.</operator><name>isNaN</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>commitlog_sync_batch_window_in_ms</name></name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"commitlog_sync_period_in_ms specified, but commitlog_sync_batch_window_in_ms found.  Only specify commitlog_sync_period_in_ms when using periodic sync."</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Syncing log with a period of {}"</literal></expr></argument>, <argument><expr><name><name>conf</name><operator>.</operator><name>commitlog_sync_period_in_ms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="block">/* evaluate the DiskAccessMode Config directive, which also affects indexAccessMode selection */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>disk_access_mode</name></name> <operator>==</operator> <name><name>Config</name><operator>.</operator><name>DiskAccessMode</name><operator>.</operator><name>auto</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>disk_access_mode</name></name> <operator>=</operator> <ternary><condition><expr><call><name>hasLargeAddressSpace</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>Config</name><operator>.</operator><name>DiskAccessMode</name><operator>.</operator><name>mmap</name></name></expr> </then><else>: <expr><name><name>Config</name><operator>.</operator><name>DiskAccessMode</name><operator>.</operator><name>standard</name></name></expr></else></ternary></expr>;</expr_stmt>
            <expr_stmt><expr><name>indexAccessMode</name> <operator>=</operator> <name><name>conf</name><operator>.</operator><name>disk_access_mode</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"DiskAccessMode 'auto' determined to be {}, indexAccessMode is {}"</literal></expr></argument>, <argument><expr><name><name>conf</name><operator>.</operator><name>disk_access_mode</name></name></expr></argument>, <argument><expr><name>indexAccessMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name><name>conf</name><operator>.</operator><name>disk_access_mode</name></name> <operator>==</operator> <name><name>Config</name><operator>.</operator><name>DiskAccessMode</name><operator>.</operator><name>mmap_index_only</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>disk_access_mode</name></name> <operator>=</operator> <name><name>Config</name><operator>.</operator><name>DiskAccessMode</name><operator>.</operator><name>standard</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>indexAccessMode</name> <operator>=</operator> <name><name>Config</name><operator>.</operator><name>DiskAccessMode</name><operator>.</operator><name>mmap</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"DiskAccessMode is {}, indexAccessMode is {}"</literal></expr></argument>, <argument><expr><name><name>conf</name><operator>.</operator><name>disk_access_mode</name></name></expr></argument>, <argument><expr><name>indexAccessMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>indexAccessMode</name> <operator>=</operator> <name><name>conf</name><operator>.</operator><name>disk_access_mode</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"DiskAccessMode is {}, indexAccessMode is {}"</literal></expr></argument>, <argument><expr><name><name>conf</name><operator>.</operator><name>disk_access_mode</name></name></expr></argument>, <argument><expr><name>indexAccessMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>gc_warn_threshold_in_ms</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"gc_warn_threshold_in_ms must be a positive integer"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* phi convict threshold for FailureDetector */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>phi_convict_threshold</name></name> <operator>&lt;</operator> <literal type="number">5</literal> <operator>||</operator> <name><name>conf</name><operator>.</operator><name>phi_convict_threshold</name></name> <operator>&gt;</operator> <literal type="number">16</literal></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"phi_convict_threshold must be between 5 and 16, but was "</literal> <operator>+</operator> <name><name>conf</name><operator>.</operator><name>phi_convict_threshold</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Thread per pool */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>concurrent_reads</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"concurrent_reads must be at least 2, but was "</literal> <operator>+</operator> <name><name>conf</name><operator>.</operator><name>concurrent_reads</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>concurrent_writes</name></name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.test.fail_mv_locks_count"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"concurrent_writes must be at least 2, but was "</literal> <operator>+</operator> <name><name>conf</name><operator>.</operator><name>concurrent_writes</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>concurrent_counter_writes</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"concurrent_counter_writes must be at least 2, but was "</literal> <operator>+</operator> <name><name>conf</name><operator>.</operator><name>concurrent_counter_writes</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>concurrent_replicates</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"concurrent_replicates has been deprecated and should be removed from cassandra.yaml"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>networking_cache_size_in_mb</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>networking_cache_size_in_mb</name></name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><call><name><name>Runtime</name><operator>.</operator><name>getRuntime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>maxMemory</name><argument_list>()</argument_list></call> <operator>/</operator> <operator>(</operator><literal type="number">16</literal> <operator>*</operator> <literal type="number">1048576</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>file_cache_size_in_mb</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>file_cache_size_in_mb</name></name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><literal type="number">512</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><call><name><name>Runtime</name><operator>.</operator><name>getRuntime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>maxMemory</name><argument_list>()</argument_list></call> <operator>/</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <literal type="number">1048576</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// round down for SSDs and round up for spinning disks</comment>
        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>file_cache_round_up</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>file_cache_round_up</name></name> <operator>=</operator> <name><name>conf</name><operator>.</operator><name>disk_optimization_strategy</name></name> <operator>==</operator> <name><name>Config</name><operator>.</operator><name>DiskOptimizationStrategy</name><operator>.</operator><name>spinning</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>memtable_offheap_space_in_mb</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>memtable_offheap_space_in_mb</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><call><name><name>Runtime</name><operator>.</operator><name>getRuntime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>maxMemory</name><argument_list>()</argument_list></call> <operator>/</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <literal type="number">1048576</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>memtable_offheap_space_in_mb</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"memtable_offheap_space_in_mb must be positive, but was "</literal> <operator>+</operator> <name><name>conf</name><operator>.</operator><name>memtable_offheap_space_in_mb</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <comment type="line">// for the moment, we default to twice as much on-heap space as off-heap, as heap overhead is very large</comment>
        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>memtable_heap_space_in_mb</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>memtable_heap_space_in_mb</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><call><name><name>Runtime</name><operator>.</operator><name>getRuntime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>maxMemory</name><argument_list>()</argument_list></call> <operator>/</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <literal type="number">1048576</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>memtable_heap_space_in_mb</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"memtable_heap_space_in_mb must be positive, but was "</literal> <operator>+</operator> <name><name>conf</name><operator>.</operator><name>memtable_heap_space_in_mb</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Global memtable on-heap threshold is enabled at {}MB"</literal></expr></argument>, <argument><expr><name><name>conf</name><operator>.</operator><name>memtable_heap_space_in_mb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>memtable_offheap_space_in_mb</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Global memtable off-heap threshold is disabled, HeapAllocator will be used instead"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Global memtable off-heap threshold is enabled at {}MB"</literal></expr></argument>, <argument><expr><name><name>conf</name><operator>.</operator><name>memtable_offheap_space_in_mb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>repair_session_max_tree_depth</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"repair_session_max_tree_depth has been deprecated and should be removed from cassandra.yaml. Use repair_session_space_in_mb instead"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>repair_session_max_tree_depth</name></name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"repair_session_max_tree_depth should not be &lt; 10, but was "</literal> <operator>+</operator> <name><name>conf</name><operator>.</operator><name>repair_session_max_tree_depth</name></name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>repair_session_max_tree_depth</name></name> <operator>&gt;</operator> <literal type="number">20</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"repair_session_max_tree_depth of "</literal> <operator>+</operator> <name><name>conf</name><operator>.</operator><name>repair_session_max_tree_depth</name></name> <operator>+</operator> <literal type="string">" &gt; 20 could lead to excessive memory usage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>repair_session_max_tree_depth</name></name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>repair_session_space_in_mb</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>repair_session_space_in_mb</name></name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><call><name><name>Runtime</name><operator>.</operator><name>getRuntime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>maxMemory</name><argument_list>()</argument_list></call> <operator>/</operator> <operator>(</operator><literal type="number">16</literal> <operator>*</operator> <literal type="number">1048576</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>repair_session_space_in_mb</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"repair_session_space_in_mb must be &gt; 0, but was "</literal> <operator>+</operator> <name><name>conf</name><operator>.</operator><name>repair_session_space_in_mb</name></name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name><name>conf</name><operator>.</operator><name>repair_session_space_in_mb</name></name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><call><name><name>Runtime</name><operator>.</operator><name>getRuntime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>maxMemory</name><argument_list>()</argument_list></call> <operator>/</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <literal type="number">1048576</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"A repair_session_space_in_mb of "</literal> <operator>+</operator> <name><name>conf</name><operator>.</operator><name>repair_session_space_in_mb</name></name> <operator>+</operator> <literal type="string">" megabytes is likely to cause heap pressure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>checkForLowestAcceptedTimeouts</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>checkValidForByteConversion</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>native_transport_max_frame_size_in_mb</name></name></expr></argument>,
                                    <argument><expr><literal type="string">"native_transport_max_frame_size_in_mb"</literal></expr></argument>, <argument><expr><name><name>ByteUnit</name><operator>.</operator><name>MEBI_BYTES</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>checkValidForByteConversion</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>column_index_size_in_kb</name></name></expr></argument>,
                                    <argument><expr><literal type="string">"column_index_size_in_kb"</literal></expr></argument>, <argument><expr><name><name>ByteUnit</name><operator>.</operator><name>KIBI_BYTES</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>checkValidForByteConversion</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>column_index_cache_size_in_kb</name></name></expr></argument>,
                                    <argument><expr><literal type="string">"column_index_cache_size_in_kb"</literal></expr></argument>, <argument><expr><name><name>ByteUnit</name><operator>.</operator><name>KIBI_BYTES</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>checkValidForByteConversion</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>batch_size_warn_threshold_in_kb</name></name></expr></argument>,
                                    <argument><expr><literal type="string">"batch_size_warn_threshold_in_kb"</literal></expr></argument>, <argument><expr><name><name>ByteUnit</name><operator>.</operator><name>KIBI_BYTES</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>native_transport_max_negotiable_protocol_version</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"The configuration option native_transport_max_negotiable_protocol_version has been deprecated "</literal> <operator>+</operator>
                        <literal type="string">"and should be removed from cassandra.yaml as it has no longer has any effect."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// if data dirs, commitlog dir, or saved caches dir are set in cassandra.yaml, use that.  Otherwise,</comment>
        <comment type="line">// use -Dcassandra.storagedir (set in cassandra-env.sh) as the parent dir for data/, commitlog/, and saved_caches/</comment>
        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>commitlog_directory</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>commitlog_directory</name></name> <operator>=</operator> <call><name>storagedirFor</name><argument_list>(<argument><expr><literal type="string">"commitlog"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>hints_directory</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>hints_directory</name></name> <operator>=</operator> <call><name>storagedirFor</name><argument_list>(<argument><expr><literal type="string">"hints"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>native_transport_max_concurrent_requests_in_bytes</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>native_transport_max_concurrent_requests_in_bytes</name></name> <operator>=</operator> <call><name><name>Runtime</name><operator>.</operator><name>getRuntime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>maxMemory</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">10</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>native_transport_max_concurrent_requests_in_bytes_per_ip</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>native_transport_max_concurrent_requests_in_bytes_per_ip</name></name> <operator>=</operator> <call><name><name>Runtime</name><operator>.</operator><name>getRuntime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>maxMemory</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">40</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>commitlog_total_space_in_mb</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>preferredSizeInMB</name> <init>= <expr><literal type="number">8192</literal></expr></init></decl>;</decl_stmt>
            <try>try
            <block>{<block_content>
                <comment type="line">// use 1/4 of available space.  See discussion on #10013 and #10199</comment>
                <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>totalSpaceInBytes</name> <init>= <expr><call><name>guessFileStore</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>commitlog_directory</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTotalSpace</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>commitlog_total_space_in_mb</name></name> <operator>=</operator> <call><name>calculateDefaultSpaceInMB</name><argument_list>(<argument><expr><literal type="string">"commitlog"</literal></expr></argument>,
                                                                             <argument><expr><name><name>conf</name><operator>.</operator><name>commitlog_directory</name></name></expr></argument>,
                                                                             <argument><expr><literal type="string">"commitlog_total_space_in_mb"</literal></expr></argument>,
                                                                             <argument><expr><name>preferredSizeInMB</name></expr></argument>,
                                                                             <argument><expr><name>totalSpaceInBytes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Error checking disk space"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Unable to check disk space available to '%s'. Perhaps the Cassandra user does not have the necessary permissions"</literal></expr></argument>,
                                                               <argument><expr><name><name>conf</name><operator>.</operator><name>commitlog_directory</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>cdc_enabled</name></name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Windows memory-mapped CommitLog files is incompatible with CDC as we hard-link files in cdc_raw. Confirm we don't have both enabled.</comment>
            <if_stmt><if>if <condition>(<expr><name><name>FBUtilities</name><operator>.</operator><name>isWindows</name></name> <operator>&amp;&amp;</operator> <name><name>conf</name><operator>.</operator><name>commitlog_compression</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Cannot enable cdc on Windows with uncompressed commitlog."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>cdc_raw_directory</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>cdc_raw_directory</name></name> <operator>=</operator> <call><name>storagedirFor</name><argument_list>(<argument><expr><literal type="string">"cdc_raw"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>cdc_total_space_in_mb</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>preferredSizeInMB</name> <init>= <expr><literal type="number">4096</literal></expr></init></decl>;</decl_stmt>
                <try>try
                <block>{<block_content>
                    <comment type="line">// use 1/8th of available space.  See discussion on #10013 and #10199 on the CL, taking half that for CDC</comment>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>totalSpaceInBytes</name> <init>= <expr><call><name>guessFileStore</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>cdc_raw_directory</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTotalSpace</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>cdc_total_space_in_mb</name></name> <operator>=</operator> <call><name>calculateDefaultSpaceInMB</name><argument_list>(<argument><expr><literal type="string">"cdc"</literal></expr></argument>,
                                                                           <argument><expr><name><name>conf</name><operator>.</operator><name>cdc_raw_directory</name></name></expr></argument>,
                                                                           <argument><expr><literal type="string">"cdc_total_space_in_mb"</literal></expr></argument>,
                                                                           <argument><expr><name>preferredSizeInMB</name></expr></argument>,
                                                                           <argument><expr><name>totalSpaceInBytes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Error checking disk space"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Unable to check disk space available to '%s'. Perhaps the Cassandra user does not have the necessary permissions"</literal></expr></argument>,
                                                                   <argument><expr><name><name>conf</name><operator>.</operator><name>cdc_raw_directory</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></catch></try>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"cdc_enabled is true. Starting casssandra node with Change-Data-Capture enabled."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>saved_caches_directory</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>saved_caches_directory</name></name> <operator>=</operator> <call><name>storagedirFor</name><argument_list>(<argument><expr><literal type="string">"saved_caches"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>data_file_directories</name></name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>conf</name><operator>.</operator><name>data_file_directories</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>data_file_directories</name></name> <operator>=</operator> <operator>new</operator> <name><name>String</name><index>[]</index></name><block>{ <expr><call><name>storagedir</name><argument_list>(<argument><expr><literal type="string">"data_file_directories"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>File</name><operator>.</operator><name>separator</name></name> <operator>+</operator> <literal type="string">"data"</literal></expr> }</block></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>long</name></type> <name>dataFreeBytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <comment type="block">/* data file and commit log directories. they get created later, when they're needed. */</comment>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>datadir</name> <range>: <expr><name><name>conf</name><operator>.</operator><name>data_file_directories</name></name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>datadir</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"data_file_directories must not contain empty entry"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>datadir</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>local_system_data_file_directory</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"local_system_data_file_directory must not be the same as any data_file_directories"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>datadir</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>commitlog_directory</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"commitlog_directory must not be the same as any data_file_directories"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>datadir</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>hints_directory</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"hints_directory must not be the same as any data_file_directories"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>datadir</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>saved_caches_directory</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"saved_caches_directory must not be the same as any data_file_directories"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>dataFreeBytes</name> <operator>=</operator> <call><name>saturatedSum</name><argument_list>(<argument><expr><name>dataFreeBytes</name></expr></argument>, <argument><expr><call><name>getUnallocatedSpace</name><argument_list>(<argument><expr><name>datadir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><name>dataFreeBytes</name> <operator>&lt;</operator> <literal type="number">64</literal> <operator>*</operator> <name>ONE_GB</name></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// 64 GB</comment>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Only {} free across all data volumes. Consider adding more capacity to your cluster or removing obsolete snapshots"</literal></expr></argument>,
                        <argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>prettyPrintMemory</name></name><argument_list>(<argument><expr><name>dataFreeBytes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>local_system_data_file_directory</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>conf</name><operator>.</operator><name>local_system_data_file_directory</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>commitlog_directory</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"local_system_data_file_directory must not be the same as the commitlog_directory"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>conf</name><operator>.</operator><name>local_system_data_file_directory</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>saved_caches_directory</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"local_system_data_file_directory must not be the same as the saved_caches_directory"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>conf</name><operator>.</operator><name>local_system_data_file_directory</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>hints_directory</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"local_system_data_file_directory must not be the same as the hints_directory"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>long</name></type> <name>freeBytes</name> <init>= <expr><call><name>getUnallocatedSpace</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>local_system_data_file_directory</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>freeBytes</name> <operator>&lt;</operator> <name>ONE_GB</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Only {} free in the system data volume. Consider adding more capacity or removing obsolete snapshots"</literal></expr></argument>,
                            <argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>prettyPrintMemory</name></name><argument_list>(<argument><expr><name>freeBytes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>conf</name><operator>.</operator><name>commitlog_directory</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>saved_caches_directory</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"saved_caches_directory must not be the same as the commitlog_directory"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>conf</name><operator>.</operator><name>commitlog_directory</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>hints_directory</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"hints_directory must not be the same as the commitlog_directory"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>conf</name><operator>.</operator><name>hints_directory</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>saved_caches_directory</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"saved_caches_directory must not be the same as the hints_directory"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>memtable_flush_writers</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>memtable_flush_writers</name></name> <operator>=</operator> <ternary><condition><expr><name><name>conf</name><operator>.</operator><name>data_file_directories</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>memtable_flush_writers</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"memtable_flush_writers must be at least 1, but was "</literal> <operator>+</operator> <name><name>conf</name><operator>.</operator><name>memtable_flush_writers</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>memtable_cleanup_threshold</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>memtable_cleanup_threshold</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name><name>conf</name><operator>.</operator><name>memtable_flush_writers</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"memtable_cleanup_threshold has been deprecated and should be removed from cassandra.yaml"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>memtable_cleanup_threshold</name></name> <operator>&lt;</operator> <literal type="number">0.01f</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"memtable_cleanup_threshold must be &gt;= 0.01, but was "</literal> <operator>+</operator> <name><name>conf</name><operator>.</operator><name>memtable_cleanup_threshold</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>memtable_cleanup_threshold</name></name> <operator>&gt;</operator> <literal type="number">0.99f</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"memtable_cleanup_threshold must be &lt;= 0.99, but was "</literal> <operator>+</operator> <name><name>conf</name><operator>.</operator><name>memtable_cleanup_threshold</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>memtable_cleanup_threshold</name></name> <operator>&lt;</operator> <literal type="number">0.1f</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"memtable_cleanup_threshold is set very low [{}], which may cause performance degradation"</literal></expr></argument>, <argument><expr><name><name>conf</name><operator>.</operator><name>memtable_cleanup_threshold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>concurrent_compactors</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>concurrent_compactors</name></name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getAvailableProcessors</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>conf</name><operator>.</operator><name>data_file_directories</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>concurrent_compactors</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"concurrent_compactors should be strictly greater than 0, but was "</literal> <operator>+</operator> <name><name>conf</name><operator>.</operator><name>concurrent_compactors</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>applyConcurrentValidations</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>applyRepairCommandPoolSize</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>concurrent_materialized_view_builders</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"concurrent_materialized_view_builders should be strictly greater than 0, but was "</literal> <operator>+</operator> <name><name>conf</name><operator>.</operator><name>concurrent_materialized_view_builders</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>num_tokens</name></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>conf</name><operator>.</operator><name>num_tokens</name></name> <operator>&gt;</operator> <name>MAX_NUM_TOKENS</name></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"A maximum number of %d tokens per node is supported"</literal></expr></argument>, <argument><expr><name>MAX_NUM_TOKENS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <try>try
        <block>{<block_content>
            <comment type="line">// if prepared_statements_cache_size_mb option was set to "auto" then size of the cache should be "max(1/256 of Heap (in MB), 10MB)"</comment>
            <expr_stmt><expr><name>preparedStatementsCacheSizeInMB</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>conf</name><operator>.</operator><name>prepared_statements_cache_size_mb</name></name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>
                                              ?</condition><then> <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><call><name><name>Runtime</name><operator>.</operator><name>getRuntime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>maxMemory</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1024</literal> <operator>/</operator> <literal type="number">1024</literal> <operator>/</operator> <literal type="number">256</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>
                                              </then><else>: <expr><name><name>conf</name><operator>.</operator><name>prepared_statements_cache_size_mb</name></name></expr></else></ternary></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>preparedStatementsCacheSizeInMB</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>NumberFormatException</name><argument_list>()</argument_list></call></expr>;</throw></block_content></block></if></if_stmt> <comment type="line">// to escape duplicating error message</comment>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"prepared_statements_cache_size_mb option was set incorrectly to '"</literal>
                                             <operator>+</operator> <name><name>conf</name><operator>.</operator><name>prepared_statements_cache_size_mb</name></name> <operator>+</operator> <literal type="string">"', supported values are &lt;integer&gt; &gt;= 0."</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>

        <try>try
        <block>{<block_content>
            <comment type="line">// if key_cache_size_in_mb option was set to "auto" then size of the cache should be "min(5% of Heap (in MB), 100MB)</comment>
            <expr_stmt><expr><name>keyCacheSizeInMB</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>conf</name><operator>.</operator><name>key_cache_size_in_mb</name></name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>
                               ?</condition><then> <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><call><name><name>Runtime</name><operator>.</operator><name>getRuntime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>totalMemory</name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">0.05</literal> <operator>/</operator> <literal type="number">1024</literal> <operator>/</operator> <literal type="number">1024</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>
                               </then><else>: <expr><name><name>conf</name><operator>.</operator><name>key_cache_size_in_mb</name></name></expr></else></ternary></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>keyCacheSizeInMB</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>NumberFormatException</name><argument_list>()</argument_list></call></expr>;</throw></block_content></block></if></if_stmt> <comment type="line">// to escape duplicating error message</comment>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"key_cache_size_in_mb option was set incorrectly to '"</literal>
                                             <operator>+</operator> <name><name>conf</name><operator>.</operator><name>key_cache_size_in_mb</name></name> <operator>+</operator> <literal type="string">"', supported values are &lt;integer&gt; &gt;= 0."</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>

        <try>try
        <block>{<block_content>
            <comment type="line">// if counter_cache_size_in_mb option was set to "auto" then size of the cache should be "min(2.5% of Heap (in MB), 50MB)</comment>
            <expr_stmt><expr><name>counterCacheSizeInMB</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>conf</name><operator>.</operator><name>counter_cache_size_in_mb</name></name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>
                                   ?</condition><then> <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><call><name><name>Runtime</name><operator>.</operator><name>getRuntime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>totalMemory</name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">0.025</literal> <operator>/</operator> <literal type="number">1024</literal> <operator>/</operator> <literal type="number">1024</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>
                                   </then><else>: <expr><name><name>conf</name><operator>.</operator><name>counter_cache_size_in_mb</name></name></expr></else></ternary></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>counterCacheSizeInMB</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>NumberFormatException</name><argument_list>()</argument_list></call></expr>;</throw></block_content></block></if></if_stmt> <comment type="line">// to escape duplicating error message</comment>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"counter_cache_size_in_mb option was set incorrectly to '"</literal>
                                             <operator>+</operator> <name><name>conf</name><operator>.</operator><name>counter_cache_size_in_mb</name></name> <operator>+</operator> <literal type="string">"', supported values are &lt;integer&gt; &gt;= 0."</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>

        <comment type="line">// if set to empty/"auto" then use 5% of Heap size</comment>
        <expr_stmt><expr><name>indexSummaryCapacityInMB</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>conf</name><operator>.</operator><name>index_summary_capacity_in_mb</name></name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>
                                   ?</condition><then> <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><call><name><name>Runtime</name><operator>.</operator><name>getRuntime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>totalMemory</name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">0.05</literal> <operator>/</operator> <literal type="number">1024</literal> <operator>/</operator> <literal type="number">1024</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>
                                   </then><else>: <expr><name><name>conf</name><operator>.</operator><name>index_summary_capacity_in_mb</name></name></expr></else></ternary></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>indexSummaryCapacityInMB</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"index_summary_capacity_in_mb option was set incorrectly to '"</literal>
                                             <operator>+</operator> <name><name>conf</name><operator>.</operator><name>index_summary_capacity_in_mb</name></name> <operator>+</operator> <literal type="string">"', it should be a non-negative integer."</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>user_defined_function_fail_timeout</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"user_defined_function_fail_timeout must not be negative"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>user_defined_function_warn_timeout</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"user_defined_function_warn_timeout must not be negative"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>user_defined_function_fail_timeout</name></name> <operator>&lt;</operator> <name><name>conf</name><operator>.</operator><name>user_defined_function_warn_timeout</name></name></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"user_defined_function_warn_timeout must less than user_defined_function_fail_timeout"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>conf</name><operator>.</operator><name>allow_insecure_udfs</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>conf</name><operator>.</operator><name>enable_user_defined_functions_threads</name></name></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"To be able to set enable_user_defined_functions_threads: false you need to set allow_insecure_udfs: true - this is an unsafe configuration and is not recommended."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>allow_extra_insecure_udfs</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Allowing java.lang.System.* access in UDFs is dangerous and not recommended. Set allow_extra_insecure_udfs: false to disable."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>(<expr><name><name>conf</name><operator>.</operator><name>enable_scripted_user_defined_functions</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"JavaScript user-defined functions have been deprecated. You can still use them but the plan is to remove them in the next major version. For more information - CASSANDRA-17280"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>commitlog_segment_size_in_mb</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"commitlog_segment_size_in_mb must be positive, but was "</literal>
                    <operator>+</operator> <name><name>conf</name><operator>.</operator><name>commitlog_segment_size_in_mb</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name><name>conf</name><operator>.</operator><name>commitlog_segment_size_in_mb</name></name> <operator>&gt;=</operator> <literal type="number">2048</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"commitlog_segment_size_in_mb must be smaller than 2048, but was "</literal>
                    <operator>+</operator> <name><name>conf</name><operator>.</operator><name>commitlog_segment_size_in_mb</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>max_mutation_size_in_kb</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>max_mutation_size_in_kb</name></name> <operator>=</operator> <name><name>conf</name><operator>.</operator><name>commitlog_segment_size_in_mb</name></name> <operator>*</operator> <literal type="number">1024</literal> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name><name>conf</name><operator>.</operator><name>commitlog_segment_size_in_mb</name></name> <operator>*</operator> <literal type="number">1024</literal> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>conf</name><operator>.</operator><name>max_mutation_size_in_kb</name></name></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"commitlog_segment_size_in_mb must be at least twice the size of max_mutation_size_in_kb / 1024"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <comment type="line">// native transport encryption options</comment>
        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>client_encryption_options</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>client_encryption_options</name><operator>.</operator><name>applyConfig</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>native_transport_port_ssl</name></name> <operator>!=</operator> <literal type="null">null</literal>
                <operator>&amp;&amp;</operator> <name><name>conf</name><operator>.</operator><name>native_transport_port_ssl</name></name> <operator>!=</operator> <name><name>conf</name><operator>.</operator><name>native_transport_port</name></name>
                <operator>&amp;&amp;</operator> <call><name><name>conf</name><operator>.</operator><name>client_encryption_options</name><operator>.</operator><name>tlsEncryptionPolicy</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>EncryptionOptions</name><operator>.</operator><name>TlsEncryptionPolicy</name><operator>.</operator><name>UNENCRYPTED</name></name></expr>)</condition>
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Encryption must be enabled in client_encryption_options for native_transport_port_ssl"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>snapshot_links_per_second</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"snapshot_links_per_second must be &gt;= 0"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>max_value_size_in_mb</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"max_value_size_in_mb must be positive"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name><name>conf</name><operator>.</operator><name>max_value_size_in_mb</name></name> <operator>&gt;=</operator> <literal type="number">2048</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"max_value_size_in_mb must be smaller than 2048, but was "</literal>
                    <operator>+</operator> <name><name>conf</name><operator>.</operator><name>max_value_size_in_mb</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <switch>switch <condition>(<expr><name><name>conf</name><operator>.</operator><name>disk_optimization_strategy</name></name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>ssd</name></expr>:</case>
                <expr_stmt><expr><name>diskOptimizationStrategy</name> <operator>=</operator> <operator>new</operator> <call><name>SsdDiskOptimizationStrategy</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>disk_optimization_page_cross_chance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>spinning</name></expr>:</case>
                <expr_stmt><expr><name>diskOptimizationStrategy</name> <operator>=</operator> <operator>new</operator> <call><name>SpinningDiskOptimizationStrategy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </block_content>}</block></switch>

        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>server_encryption_options</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>server_encryption_options</name><operator>.</operator><name>applyConfig</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>server_encryption_options</name><operator>.</operator><name>enable_legacy_ssl_storage_port</name></name> <operator>&amp;&amp;</operator>
                <call><name><name>conf</name><operator>.</operator><name>server_encryption_options</name><operator>.</operator><name>tlsEncryptionPolicy</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>EncryptionOptions</name><operator>.</operator><name>TlsEncryptionPolicy</name><operator>.</operator><name>UNENCRYPTED</name></name></expr>)</condition>
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"enable_legacy_ssl_storage_port is true (enabled) with internode encryption disabled (none). Enable encryption or disable the legacy ssl storage port."</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Integer</name></type> <name>maxMessageSize</name> <init>= <expr><name><name>conf</name><operator>.</operator><name>internode_max_message_size_in_bytes</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>maxMessageSize</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>maxMessageSize</name> <operator>&gt;</operator> <name><name>conf</name><operator>.</operator><name>internode_application_receive_queue_reserve_endpoint_capacity_in_bytes</name></name></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"internode_max_message_size_in_mb must no exceed internode_application_receive_queue_reserve_endpoint_capacity_in_bytes"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>maxMessageSize</name> <operator>&gt;</operator> <name><name>conf</name><operator>.</operator><name>internode_application_receive_queue_reserve_global_capacity_in_bytes</name></name></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"internode_max_message_size_in_mb must no exceed internode_application_receive_queue_reserve_global_capacity_in_bytes"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>maxMessageSize</name> <operator>&gt;</operator> <name><name>conf</name><operator>.</operator><name>internode_application_send_queue_reserve_endpoint_capacity_in_bytes</name></name></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"internode_max_message_size_in_mb must no exceed internode_application_send_queue_reserve_endpoint_capacity_in_bytes"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>maxMessageSize</name> <operator>&gt;</operator> <name><name>conf</name><operator>.</operator><name>internode_application_send_queue_reserve_global_capacity_in_bytes</name></name></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"internode_max_message_size_in_mb must no exceed internode_application_send_queue_reserve_global_capacity_in_bytes"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>internode_max_message_size_in_bytes</name></name> <operator>=</operator>
                <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>internode_application_receive_queue_reserve_endpoint_capacity_in_bytes</name></name></expr></argument>,
                         <argument><expr><name><name>conf</name><operator>.</operator><name>internode_application_send_queue_reserve_endpoint_capacity_in_bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>validateMaxConcurrentAutoUpgradeTasksConf</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>max_concurrent_automatic_sstable_upgrades</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>static</specifier> <name>void</name></type> <name>applyConcurrentValidations</name><parameter_list>(<parameter><decl><type><name>Config</name></type> <name>config</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>.</operator><name>concurrent_validations</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>config</name><operator>.</operator><name>concurrent_validations</name></name> <operator>=</operator> <name><name>config</name><operator>.</operator><name>concurrent_compactors</name></name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name><name>config</name><operator>.</operator><name>concurrent_validations</name></name> <operator>&gt;</operator> <name><name>config</name><operator>.</operator><name>concurrent_compactors</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>allowUnlimitedConcurrentValidations</name></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"To set concurrent_validations &gt; concurrent_compactors, "</literal> <operator>+</operator>
                                             <literal type="string">"set the system property cassandra.allow_unlimited_concurrent_validations=true"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>static</specifier> <name>void</name></type> <name>applyRepairCommandPoolSize</name><parameter_list>(<parameter><decl><type><name>Config</name></type> <name>config</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>.</operator><name>repair_command_pool_size</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>config</name><operator>.</operator><name>repair_command_pool_size</name></name> <operator>=</operator> <name><name>config</name><operator>.</operator><name>concurrent_validations</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>storagedirFor</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>type</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>storagedir</name><argument_list>(<argument><expr><name>type</name> <operator>+</operator> <literal type="string">"_directory"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>File</name><operator>.</operator><name>separator</name></name> <operator>+</operator> <name>type</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>storagedir</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>errMsgType</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>storagedir</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name><name>Config</name><operator>.</operator><name>PROPERTY_PREFIX</name></name> <operator>+</operator> <literal type="string">"storagedir"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>storagedir</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><name>errMsgType</name> <operator>+</operator> <literal type="string">" is missing and -Dcassandra.storagedir is not set"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <return>return <expr><name>storagedir</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name>int</name></type> <name>calculateDefaultSpaceInMB</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>setting</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>preferredSizeInMB</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>totalSpaceInBytes</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>totalSpaceNumerator</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>totalSpaceDenominator</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>totalSizeInMB</name> <init>= <expr><name>totalSpaceInBytes</name> <operator>/</operator> <name>ONE_MB</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>minSizeInMB</name> <init>= <expr><call><name><name>Ints</name><operator>.</operator><name>saturatedCast</name></name><argument_list>(<argument><expr><name>totalSpaceNumerator</name> <operator>*</operator> <name>totalSizeInMB</name> <operator>/</operator> <name>totalSpaceDenominator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>minSizeInMB</name> <operator>&lt;</operator> <name>preferredSizeInMB</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Small {} volume detected at '{}'; setting {} to {}.  You can override this in cassandra.yaml"</literal></expr></argument>,
                        <argument><expr><name>type</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>setting</name></expr></argument>, <argument><expr><name>minSizeInMB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>minSizeInMB</name></expr>;</return>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <return>return <expr><name>preferredSizeInMB</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>applyAddressConfig</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name>applyAddressConfig</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>applyAddressConfig</name><parameter_list>(<parameter><decl><type><name>Config</name></type> <name>config</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><name>listenAddress</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>rpcAddress</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>broadcastAddress</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>broadcastRpcAddress</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>

        <comment type="block">/* Local IP, hostname or interface to bind services to */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>.</operator><name>listen_address</name></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>config</name><operator>.</operator><name>listen_interface</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Set listen_address OR listen_interface, not both"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name><name>config</name><operator>.</operator><name>listen_address</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <try>try
            <block>{<block_content>
                <expr_stmt><expr><name>listenAddress</name> <operator>=</operator> <call><name><name>InetAddress</name><operator>.</operator><name>getByName</name></name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>listen_address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>UnknownHostException</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Unknown listen_address '"</literal> <operator>+</operator> <name><name>config</name><operator>.</operator><name>listen_address</name></name> <operator>+</operator> <literal type="char">'\''</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>

            <if_stmt><if>if <condition>(<expr><call><name><name>listenAddress</name><operator>.</operator><name>isAnyLocalAddress</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"listen_address cannot be a wildcard address ("</literal> <operator>+</operator> <name><name>config</name><operator>.</operator><name>listen_address</name></name> <operator>+</operator> <literal type="string">")!"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name><name>config</name><operator>.</operator><name>listen_interface</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>listenAddress</name> <operator>=</operator> <call><name>getNetworkInterfaceAddress</name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>listen_interface</name></name></expr></argument>, <argument><expr><literal type="string">"listen_interface"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>.</operator><name>listen_interface_prefer_ipv6</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Gossip Address to broadcast */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>.</operator><name>broadcast_address</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <try>try
            <block>{<block_content>
                <expr_stmt><expr><name>broadcastAddress</name> <operator>=</operator> <call><name><name>InetAddress</name><operator>.</operator><name>getByName</name></name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>broadcast_address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>UnknownHostException</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Unknown broadcast_address '"</literal> <operator>+</operator> <name><name>config</name><operator>.</operator><name>broadcast_address</name></name> <operator>+</operator> <literal type="char">'\''</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>

            <if_stmt><if>if <condition>(<expr><call><name><name>broadcastAddress</name><operator>.</operator><name>isAnyLocalAddress</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"broadcast_address cannot be a wildcard address ("</literal> <operator>+</operator> <name><name>config</name><operator>.</operator><name>broadcast_address</name></name> <operator>+</operator> <literal type="string">")!"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Local IP, hostname or interface to bind RPC server to */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>.</operator><name>rpc_address</name></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>config</name><operator>.</operator><name>rpc_interface</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Set rpc_address OR rpc_interface, not both"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name><name>config</name><operator>.</operator><name>rpc_address</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <try>try
            <block>{<block_content>
                <expr_stmt><expr><name>rpcAddress</name> <operator>=</operator> <call><name><name>InetAddress</name><operator>.</operator><name>getByName</name></name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>rpc_address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>UnknownHostException</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Unknown host in rpc_address "</literal> <operator>+</operator> <name><name>config</name><operator>.</operator><name>rpc_address</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name><name>config</name><operator>.</operator><name>rpc_interface</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>rpcAddress</name> <operator>=</operator> <call><name>getNetworkInterfaceAddress</name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>rpc_interface</name></name></expr></argument>, <argument><expr><literal type="string">"rpc_interface"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>.</operator><name>rpc_interface_prefer_ipv6</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>rpcAddress</name> <operator>=</operator> <call><name><name>FBUtilities</name><operator>.</operator><name>getJustLocalAddress</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="block">/* RPC address to broadcast */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>config</name><operator>.</operator><name>broadcast_rpc_address</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <try>try
            <block>{<block_content>
                <expr_stmt><expr><name>broadcastRpcAddress</name> <operator>=</operator> <call><name><name>InetAddress</name><operator>.</operator><name>getByName</name></name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>broadcast_rpc_address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>UnknownHostException</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Unknown broadcast_rpc_address '"</literal> <operator>+</operator> <name><name>config</name><operator>.</operator><name>broadcast_rpc_address</name></name> <operator>+</operator> <literal type="char">'\''</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>

            <if_stmt><if>if <condition>(<expr><call><name><name>broadcastRpcAddress</name><operator>.</operator><name>isAnyLocalAddress</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"broadcast_rpc_address cannot be a wildcard address ("</literal> <operator>+</operator> <name><name>config</name><operator>.</operator><name>broadcast_rpc_address</name></name> <operator>+</operator> <literal type="string">")!"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>rpcAddress</name><operator>.</operator><name>isAnyLocalAddress</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"If rpc_address is set to a wildcard address ("</literal> <operator>+</operator> <name><name>config</name><operator>.</operator><name>rpc_address</name></name> <operator>+</operator> <literal type="string">"), then "</literal> <operator>+</operator>
                                                 <literal type="string">"you must set broadcast_rpc_address to a value other than "</literal> <operator>+</operator> <name><name>config</name><operator>.</operator><name>rpc_address</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>applyEncryptionContext</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <comment type="line">// always attempt to load the cipher factory, as we could be in the situation where the user has disabled encryption,</comment>
        <comment type="line">// but has existing commitlogs and sstables on disk that are still encrypted (and still need to be read)</comment>
        <expr_stmt><expr><name>encryptionContext</name> <operator>=</operator> <operator>new</operator> <call><name>EncryptionContext</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>transparent_data_encryption_options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>applySslContext</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>SSLFactory</name><operator>.</operator><name>validateSslContext</name></name><argument_list>(<argument><expr><literal type="string">"Internode messaging"</literal></expr></argument>, <argument><expr><name><name>conf</name><operator>.</operator><name>server_encryption_options</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>SSLFactory</name><operator>.</operator><name>validateSslContext</name></name><argument_list>(<argument><expr><literal type="string">"Native transport"</literal></expr></argument>, <argument><expr><name><name>conf</name><operator>.</operator><name>client_encryption_options</name></name></expr></argument>, <argument><expr><name><name>conf</name><operator>.</operator><name>client_encryption_options</name><operator>.</operator><name>require_client_auth</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>SSLFactory</name><operator>.</operator><name>initHotReloading</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>server_encryption_options</name></name></expr></argument>, <argument><expr><name><name>conf</name><operator>.</operator><name>client_encryption_options</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Failed to initialize SSL"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>applySeedProvider</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <comment type="line">// load the seeds for node contact points</comment>
        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>seed_provider</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"seeds configuration is missing; a minimum of one seed is required."</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <try>try
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>seedProviderClass</name> <init>= <expr><call><name><name>Class</name><operator>.</operator><name>forName</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>seed_provider</name><operator>.</operator><name>class_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>seedProvider</name> <operator>=</operator> <operator>(</operator><name>SeedProvider</name><operator>)</operator><call><name><name>seedProviderClass</name><operator>.</operator><name>getConstructor</name></name><argument_list>(<argument><expr><name><name>Map</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>newInstance</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>seed_provider</name><operator>.</operator><name>parameters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <comment type="line">// there are about 5 checked exceptions that could be thrown here.</comment>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"\nFatal configuration error; unable to start server.  See log for stacktrace."</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
        <if_stmt><if>if <condition>(<expr><call><name><name>seedProvider</name><operator>.</operator><name>getSeeds</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"The seed provider lists no seeds."</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>static</specifier> <name>void</name></type> <name>checkForLowestAcceptedTimeouts</name><parameter_list>(<parameter><decl><type><name>Config</name></type> <name>conf</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name><name>conf</name><operator>.</operator><name>read_request_timeout_in_ms</name></name> <operator>&lt;</operator> <name>LOWEST_ACCEPTED_TIMEOUT</name></expr>)</condition>
        <block>{<block_content>
           <expr_stmt><expr><call><name>logInfo</name><argument_list>(<argument><expr><literal type="string">"read_request_timeout_in_ms"</literal></expr></argument>, <argument><expr><name><name>conf</name><operator>.</operator><name>read_request_timeout_in_ms</name></name></expr></argument>, <argument><expr><name>LOWEST_ACCEPTED_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>read_request_timeout_in_ms</name></name> <operator>=</operator> <name>LOWEST_ACCEPTED_TIMEOUT</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>(<expr><name><name>conf</name><operator>.</operator><name>range_request_timeout_in_ms</name></name> <operator>&lt;</operator> <name>LOWEST_ACCEPTED_TIMEOUT</name></expr>)</condition>
        <block>{<block_content>
           <expr_stmt><expr><call><name>logInfo</name><argument_list>(<argument><expr><literal type="string">"range_request_timeout_in_ms"</literal></expr></argument>, <argument><expr><name><name>conf</name><operator>.</operator><name>range_request_timeout_in_ms</name></name></expr></argument>, <argument><expr><name>LOWEST_ACCEPTED_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>range_request_timeout_in_ms</name></name> <operator>=</operator> <name>LOWEST_ACCEPTED_TIMEOUT</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>(<expr><name><name>conf</name><operator>.</operator><name>request_timeout_in_ms</name></name> <operator>&lt;</operator> <name>LOWEST_ACCEPTED_TIMEOUT</name></expr>)</condition>
        <block>{<block_content>
           <expr_stmt><expr><call><name>logInfo</name><argument_list>(<argument><expr><literal type="string">"request_timeout_in_ms"</literal></expr></argument>, <argument><expr><name><name>conf</name><operator>.</operator><name>request_timeout_in_ms</name></name></expr></argument>, <argument><expr><name>LOWEST_ACCEPTED_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>request_timeout_in_ms</name></name> <operator>=</operator> <name>LOWEST_ACCEPTED_TIMEOUT</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>(<expr><name><name>conf</name><operator>.</operator><name>write_request_timeout_in_ms</name></name> <operator>&lt;</operator> <name>LOWEST_ACCEPTED_TIMEOUT</name></expr>)</condition>
        <block>{<block_content>
           <expr_stmt><expr><call><name>logInfo</name><argument_list>(<argument><expr><literal type="string">"write_request_timeout_in_ms"</literal></expr></argument>, <argument><expr><name><name>conf</name><operator>.</operator><name>write_request_timeout_in_ms</name></name></expr></argument>, <argument><expr><name>LOWEST_ACCEPTED_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>write_request_timeout_in_ms</name></name> <operator>=</operator> <name>LOWEST_ACCEPTED_TIMEOUT</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>(<expr><name><name>conf</name><operator>.</operator><name>cas_contention_timeout_in_ms</name></name> <operator>&lt;</operator> <name>LOWEST_ACCEPTED_TIMEOUT</name></expr>)</condition>
        <block>{<block_content>
           <expr_stmt><expr><call><name>logInfo</name><argument_list>(<argument><expr><literal type="string">"cas_contention_timeout_in_ms"</literal></expr></argument>, <argument><expr><name><name>conf</name><operator>.</operator><name>cas_contention_timeout_in_ms</name></name></expr></argument>, <argument><expr><name>LOWEST_ACCEPTED_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>cas_contention_timeout_in_ms</name></name> <operator>=</operator> <name>LOWEST_ACCEPTED_TIMEOUT</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>(<expr><name><name>conf</name><operator>.</operator><name>counter_write_request_timeout_in_ms</name></name> <operator>&lt;</operator> <name>LOWEST_ACCEPTED_TIMEOUT</name></expr>)</condition>
        <block>{<block_content>
           <expr_stmt><expr><call><name>logInfo</name><argument_list>(<argument><expr><literal type="string">"counter_write_request_timeout_in_ms"</literal></expr></argument>, <argument><expr><name><name>conf</name><operator>.</operator><name>counter_write_request_timeout_in_ms</name></name></expr></argument>, <argument><expr><name>LOWEST_ACCEPTED_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>counter_write_request_timeout_in_ms</name></name> <operator>=</operator> <name>LOWEST_ACCEPTED_TIMEOUT</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>(<expr><name><name>conf</name><operator>.</operator><name>truncate_request_timeout_in_ms</name></name> <operator>&lt;</operator> <name>LOWEST_ACCEPTED_TIMEOUT</name></expr>)</condition>
        <block>{<block_content>
           <expr_stmt><expr><call><name>logInfo</name><argument_list>(<argument><expr><literal type="string">"truncate_request_timeout_in_ms"</literal></expr></argument>, <argument><expr><name><name>conf</name><operator>.</operator><name>truncate_request_timeout_in_ms</name></name></expr></argument>, <argument><expr><name>LOWEST_ACCEPTED_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>truncate_request_timeout_in_ms</name></name> <operator>=</operator> <name>LOWEST_ACCEPTED_TIMEOUT</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>logInfo</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>property</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>actualValue</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>lowestAcceptedValue</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"found {}::{} less than lowest acceptable value {}, continuing with {}"</literal></expr></argument>, <argument><expr><name>property</name></expr></argument>, <argument><expr><name>actualValue</name></expr></argument>, <argument><expr><name>lowestAcceptedValue</name></expr></argument>, <argument><expr><name>lowestAcceptedValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>applyTokensConfig</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>applyTokensConfig</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name>void</name></type> <name>applyTokensConfig</name><parameter_list>(<parameter><decl><type><name>Config</name></type> <name>conf</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>initial_token</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>tokens</name> <init>= <expr><call><name>tokensFromString</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>initial_token</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>num_tokens</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>tokens</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>num_tokens</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"initial_token was set but num_tokens is not!"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></else></if_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>tokens</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>conf</name><operator>.</operator><name>num_tokens</name></name></expr>)</condition>
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"The number of initial tokens (by initial_token) specified (%s) is different from num_tokens value (%s)"</literal></expr></argument>,
                                                               <argument><expr><call><name><name>tokens</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                               <argument><expr><name><name>conf</name><operator>.</operator><name>num_tokens</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                                 <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>

            <for>for <control>(<init><decl><type><name>String</name></type> <name>token</name> <range>: <expr><name>tokens</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>partitioner</name><operator>.</operator><name>getTokenFactory</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>validate</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name><name>conf</name><operator>.</operator><name>num_tokens</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>num_tokens</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="line">// definitely not safe for tools + clients - implicitly instantiates StorageService</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>applySnitch</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <comment type="block">/* end point snitch */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>endpoint_snitch</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Missing endpoint_snitch directive"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>snitch</name> <operator>=</operator> <call><name>createEndpointSnitch</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>dynamic_snitch</name></name></expr></argument>, <argument><expr><name><name>conf</name><operator>.</operator><name>endpoint_snitch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>EndpointSnitchInfo</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>localDC</name> <operator>=</operator> <call><name><name>snitch</name><operator>.</operator><name>getLocalDatacenter</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>localComparator</name> <operator>=</operator> <lambda><parameter_list>(<parameter><decl><name>replica1</name></decl></parameter>, <parameter><decl><name>replica2</name></decl></parameter>)</parameter_list> -&gt; <block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>local1</name> <init>= <expr><call><name><name>localDC</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>snitch</name><operator>.</operator><name>getDatacenter</name></name><argument_list>(<argument><expr><name>replica1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>local2</name> <init>= <expr><call><name><name>localDC</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>snitch</name><operator>.</operator><name>getDatacenter</name></name><argument_list>(<argument><expr><name>replica2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>local1</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>local2</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>local2</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>local1</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></lambda></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="line">// definitely not safe for tools + clients - implicitly instantiates schema</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>applyPartitioner</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>applyPartitioner</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>applyPartitioner</name><parameter_list>(<parameter><decl><type><name>Config</name></type> <name>conf</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="block">/* Hashing strategy */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>partitioner</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Missing directive: partitioner"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><name><name>conf</name><operator>.</operator><name>partitioner</name></name></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name><name>Config</name><operator>.</operator><name>PROPERTY_PREFIX</name></name> <operator>+</operator> <literal type="string">"partitioner"</literal></expr></argument>, <argument><expr><name><name>conf</name><operator>.</operator><name>partitioner</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>partitioner</name> <operator>=</operator> <call><name><name>FBUtilities</name><operator>.</operator><name>newPartitioner</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Invalid partitioner class "</literal> <operator>+</operator> <name>name</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>

        <expr_stmt><expr><name>paritionerName</name> <operator>=</operator> <call><name><name>partitioner</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCanonicalName</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Computes the sum of the 2 specified positive values returning {@code Long.MAX_VALUE} if the sum overflow.
     *
     * @param left the left operand
     * @param right the right operand
     * @return the sum of the 2 specified positive values of {@code Long.MAX_VALUE} if the sum overflow.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>long</name></type> <name>saturatedSum</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>right</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><name>left</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>right</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</assert>
        <decl_stmt><decl><type><name>long</name></type> <name>sum</name> <init>= <expr><name>left</name> <operator>+</operator> <name>right</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name>sum</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr> </then><else>: <expr><name>sum</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>FileStore</name></type> <name>guessFileStore</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dir</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Path</name></type> <name>path</name> <init>= <expr><call><name><name>Paths</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition>
        <block>{<block_content>
            <try>try
            <block>{<block_content>
                <return>return <expr><call><name><name>FileUtils</name><operator>.</operator><name>getFileStore</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>e</name> <operator>instanceof</operator> <name>NoSuchFileException</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>path</name> <operator>=</operator> <call><name><name>path</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>path</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
                    <block>{<block_content>
                        <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Unable to find filesystem for '"</literal> <operator>+</operator> <name>dir</name> <operator>+</operator> <literal type="string">"'."</literal></expr></argument>)</argument_list></call></expr>;</throw>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <throw>throw <expr><name>e</name></expr>;</throw>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></while>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>long</name></type> <name>getUnallocatedSpace</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>directory</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <return>return <expr><call><name>guessFileStore</name><argument_list>(<argument><expr><name>directory</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getUnallocatedSpace</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Error checking disk space"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Unable to check disk space available to %s. Perhaps the Cassandra user does not have the necessary permissions"</literal></expr></argument>,
                                                           <argument><expr><name>directory</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>IEndpointSnitch</name></type> <name>createEndpointSnitch</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>dynamic</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>snitchClassName</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>snitchClassName</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>snitchClassName</name> <operator>=</operator> <literal type="string">"org.apache.cassandra.locator."</literal> <operator>+</operator> <name>snitchClassName</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>IEndpointSnitch</name></type> <name>snitch</name> <init>= <expr><call><name><name>FBUtilities</name><operator>.</operator><name>construct</name></name><argument_list>(<argument><expr><name>snitchClassName</name></expr></argument>, <argument><expr><literal type="string">"snitch"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name>dynamic</name></expr> ?</condition><then> <expr><operator>new</operator> <call><name>DynamicEndpointSnitch</name><argument_list>(<argument><expr><name>snitch</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>snitch</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>IAuthenticator</name></type> <name>getAuthenticator</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>authenticator</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setAuthenticator</name><parameter_list>(<parameter><decl><type><name>IAuthenticator</name></type> <name>authenticator</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>DatabaseDescriptor</name><operator>.</operator><name>authenticator</name></name> <operator>=</operator> <name>authenticator</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>IAuthorizer</name></type> <name>getAuthorizer</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>authorizer</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setAuthorizer</name><parameter_list>(<parameter><decl><type><name>IAuthorizer</name></type> <name>authorizer</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>DatabaseDescriptor</name><operator>.</operator><name>authorizer</name></name> <operator>=</operator> <name>authorizer</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>INetworkAuthorizer</name></type> <name>getNetworkAuthorizer</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>networkAuthorizer</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setNetworkAuthorizer</name><parameter_list>(<parameter><decl><type><name>INetworkAuthorizer</name></type> <name>networkAuthorizer</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>DatabaseDescriptor</name><operator>.</operator><name>networkAuthorizer</name></name> <operator>=</operator> <name>networkAuthorizer</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>IRoleManager</name></type> <name>getRoleManager</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>roleManager</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setRoleManager</name><parameter_list>(<parameter><decl><type><name>IRoleManager</name></type> <name>roleManager</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>DatabaseDescriptor</name><operator>.</operator><name>roleManager</name></name> <operator>=</operator> <name>roleManager</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getPermissionsValidity</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>permissions_validity_in_ms</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setPermissionsValidity</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>permissions_validity_in_ms</name></name> <operator>=</operator> <name>timeout</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getPermissionsUpdateInterval</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name><name>conf</name><operator>.</operator><name>permissions_update_interval_in_ms</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>
             ?</condition><then> <expr><name><name>conf</name><operator>.</operator><name>permissions_validity_in_ms</name></name></expr>
             </then><else>: <expr><name><name>conf</name><operator>.</operator><name>permissions_update_interval_in_ms</name></name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setPermissionsUpdateInterval</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>updateInterval</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>permissions_update_interval_in_ms</name></name> <operator>=</operator> <name>updateInterval</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getPermissionsCacheMaxEntries</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>permissions_cache_max_entries</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>setPermissionsCacheMaxEntries</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>maxEntries</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>permissions_cache_max_entries</name></name> <operator>=</operator> <name>maxEntries</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getRolesValidity</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>roles_validity_in_ms</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setRolesValidity</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>validity</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>roles_validity_in_ms</name></name> <operator>=</operator> <name>validity</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getRolesUpdateInterval</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name><name>conf</name><operator>.</operator><name>roles_update_interval_in_ms</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>
             ?</condition><then> <expr><name><name>conf</name><operator>.</operator><name>roles_validity_in_ms</name></name></expr>
             </then><else>: <expr><name><name>conf</name><operator>.</operator><name>roles_update_interval_in_ms</name></name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setRolesUpdateInterval</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>interval</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>roles_update_interval_in_ms</name></name> <operator>=</operator> <name>interval</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getRolesCacheMaxEntries</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>roles_cache_max_entries</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>setRolesCacheMaxEntries</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>maxEntries</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>roles_cache_max_entries</name></name> <operator>=</operator> <name>maxEntries</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getCredentialsValidity</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>credentials_validity_in_ms</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setCredentialsValidity</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>credentials_validity_in_ms</name></name> <operator>=</operator> <name>timeout</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getCredentialsUpdateInterval</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name><name>conf</name><operator>.</operator><name>credentials_update_interval_in_ms</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>
               ?</condition><then> <expr><name><name>conf</name><operator>.</operator><name>credentials_validity_in_ms</name></name></expr>
               </then><else>: <expr><name><name>conf</name><operator>.</operator><name>credentials_update_interval_in_ms</name></name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setCredentialsUpdateInterval</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>updateInterval</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>credentials_update_interval_in_ms</name></name> <operator>=</operator> <name>updateInterval</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getCredentialsCacheMaxEntries</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>credentials_cache_max_entries</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>setCredentialsCacheMaxEntries</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>maxEntries</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>credentials_cache_max_entries</name></name> <operator>=</operator> <name>maxEntries</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getMaxValueSize</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>max_value_size_in_mb</name></name> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setMaxValueSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>maxValueSizeInBytes</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>max_value_size_in_mb</name></name> <operator>=</operator> <name>maxValueSizeInBytes</name> <operator>/</operator> <literal type="number">1024</literal> <operator>/</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates all storage-related directories.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>createAllDirectories</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>data_file_directories</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"At least one DataFileDirectory must be specified"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <for>for <control>(<init><decl><type><name>String</name></type> <name>dataFileDirectory</name> <range>: <expr><name><name>conf</name><operator>.</operator><name>data_file_directories</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>createDirectory</name></name><argument_list>(<argument><expr><name>dataFileDirectory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>local_system_data_file_directory</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>createDirectory</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>local_system_data_file_directory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>commitlog_directory</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"commitlog_directory must be specified"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>createDirectory</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>commitlog_directory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>hints_directory</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"hints_directory must be specified"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>createDirectory</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>hints_directory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>saved_caches_directory</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"saved_caches_directory must be specified"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>createDirectory</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>saved_caches_directory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>cdc_enabled</name></name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>cdc_raw_directory</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"cdc_raw_directory must be specified"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
                <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>createDirectory</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>cdc_raw_directory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>ConfigurationException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Bad configuration; unable to start server: "</literal><operator>+</operator><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>FSWriteError</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMessage</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"; unable to start server"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>IPartitioner</name></type> <name>getPartitioner</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>partitioner</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getPartitionerName</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>paritionerName</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block">/* For tests ONLY, don't use otherwise or all hell will break loose. Tests should restore value at the end. */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>IPartitioner</name></type> <name>setPartitionerUnsafe</name><parameter_list>(<parameter><decl><type><name>IPartitioner</name></type> <name>newPartitioner</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>IPartitioner</name></type> <name>old</name> <init>= <expr><name>partitioner</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>partitioner</name> <operator>=</operator> <name>newPartitioner</name></expr>;</expr_stmt>
        <return>return <expr><name>old</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>IEndpointSnitch</name></type> <name>getEndpointSnitch</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>snitch</name></expr>;</return>
    </block_content>}</block></function>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setEndpointSnitch</name><parameter_list>(<parameter><decl><type><name>IEndpointSnitch</name></type> <name>eps</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>snitch</name> <operator>=</operator> <name>eps</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getColumnIndexSize</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>ByteUnit</name><operator>.</operator><name>KIBI_BYTES</name><operator>.</operator><name>toBytes</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>column_index_size_in_kb</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getColumnIndexSizeInKB</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>column_index_size_in_kb</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setColumnIndexSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>checkValidForByteConversion</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"column_index_size_in_kb"</literal></expr></argument>, <argument><expr><name><name>ByteUnit</name><operator>.</operator><name>KIBI_BYTES</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>column_index_size_in_kb</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getColumnIndexCacheSize</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>ByteUnit</name><operator>.</operator><name>KIBI_BYTES</name><operator>.</operator><name>toBytes</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>column_index_cache_size_in_kb</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getColumnIndexCacheSizeInKB</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>column_index_cache_size_in_kb</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setColumnIndexCacheSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>checkValidForByteConversion</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"column_index_cache_size_in_kb"</literal></expr></argument>, <argument><expr><name><name>ByteUnit</name><operator>.</operator><name>KIBI_BYTES</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>column_index_cache_size_in_kb</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getBatchSizeWarnThreshold</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>ByteUnit</name><operator>.</operator><name>KIBI_BYTES</name><operator>.</operator><name>toBytes</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>batch_size_warn_threshold_in_kb</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getBatchSizeWarnThresholdInKB</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>batch_size_warn_threshold_in_kb</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getBatchSizeFailThreshold</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>ByteUnit</name><operator>.</operator><name>KIBI_BYTES</name><operator>.</operator><name>toBytes</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>batch_size_fail_threshold_in_kb</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getBatchSizeFailThresholdInKB</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>batch_size_fail_threshold_in_kb</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getUnloggedBatchAcrossPartitionsWarnThreshold</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>unlogged_batch_across_partitions_warn_threshold</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setBatchSizeWarnThresholdInKB</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>threshold</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>checkValidForByteConversion</name><argument_list>(<argument><expr><name>threshold</name></expr></argument>, <argument><expr><literal type="string">"batch_size_warn_threshold_in_kb"</literal></expr></argument>, <argument><expr><name><name>ByteUnit</name><operator>.</operator><name>KIBI_BYTES</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>batch_size_warn_threshold_in_kb</name></name> <operator>=</operator> <name>threshold</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setBatchSizeFailThresholdInKB</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>threshold</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>batch_size_fail_threshold_in_kb</name></name> <operator>=</operator> <name>threshold</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getInitialTokens</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>tokensFromString</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name><name>Config</name><operator>.</operator><name>PROPERTY_PREFIX</name></name> <operator>+</operator> <literal type="string">"initial_token"</literal></expr></argument>, <argument><expr><name><name>conf</name><operator>.</operator><name>initial_token</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getAllocateTokensForKeyspace</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name><name>Config</name><operator>.</operator><name>PROPERTY_PREFIX</name></name> <operator>+</operator> <literal type="string">"allocate_tokens_for_keyspace"</literal></expr></argument>, <argument><expr><name><name>conf</name><operator>.</operator><name>allocate_tokens_for_keyspace</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Integer</name></type> <name>getAllocateTokensForLocalRf</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>allocate_tokens_for_local_replication_factor</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>tokensFromString</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tokenString</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>tokens</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>tokenString</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>token</name> <range>: <expr><call><name><name>StringUtils</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><name>tokenString</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>tokens</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>token</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
        <return>return <expr><name>tokens</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getNumTokens</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>num_tokens</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>InetAddressAndPort</name></type> <name>getReplaceAddress</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name><name>Config</name><operator>.</operator><name>PROPERTY_PREFIX</name></name> <operator>+</operator> <literal type="string">"replace_address"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><call><name><name>InetAddressAndPort</name><operator>.</operator><name>getByName</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name><name>Config</name><operator>.</operator><name>PROPERTY_PREFIX</name></name> <operator>+</operator> <literal type="string">"replace_address"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name><name>Config</name><operator>.</operator><name>PROPERTY_PREFIX</name></name> <operator>+</operator> <literal type="string">"replace_address_first_boot"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><call><name><name>InetAddressAndPort</name><operator>.</operator><name>getByName</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name><name>Config</name><operator>.</operator><name>PROPERTY_PREFIX</name></name> <operator>+</operator> <literal type="string">"replace_address_first_boot"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>UnknownHostException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Replacement host name could not be resolved or scope_id was specified for a global IPv6 address"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getReplaceTokens</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>tokensFromString</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name><name>Config</name><operator>.</operator><name>PROPERTY_PREFIX</name></name> <operator>+</operator> <literal type="string">"replace_token"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>UUID</name></type> <name>getReplaceNode</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <return>return <expr><call><name><name>UUID</name><operator>.</operator><name>fromString</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name><name>Config</name><operator>.</operator><name>PROPERTY_PREFIX</name></name> <operator>+</operator> <literal type="string">"replace_node"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NullPointerException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getClusterName</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>cluster_name</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getStoragePort</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name><name>Config</name><operator>.</operator><name>PROPERTY_PREFIX</name></name> <operator>+</operator> <literal type="string">"storage_port"</literal></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>storage_port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getSSLStoragePort</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name><name>Config</name><operator>.</operator><name>PROPERTY_PREFIX</name></name> <operator>+</operator> <literal type="string">"ssl_storage_port"</literal></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>ssl_storage_port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>nativeTransportIdleTimeout</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>native_transport_idle_timeout_in_ms</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setNativeTransportIdleTimeout</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>nativeTransportTimeout</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>native_transport_idle_timeout_in_ms</name></name> <operator>=</operator> <name>nativeTransportTimeout</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getRpcTimeout</name><parameter_list>(<parameter><decl><type><name>TimeUnit</name></type> <name>unit</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>unit</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>request_timeout_in_ms</name></name></expr></argument>, <argument><expr><name>MILLISECONDS</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setRpcTimeout</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>timeOutInMillis</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>request_timeout_in_ms</name></name> <operator>=</operator> <name>timeOutInMillis</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getReadRpcTimeout</name><parameter_list>(<parameter><decl><type><name>TimeUnit</name></type> <name>unit</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>unit</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>read_request_timeout_in_ms</name></name></expr></argument>, <argument><expr><name>MILLISECONDS</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setReadRpcTimeout</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>timeOutInMillis</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>read_request_timeout_in_ms</name></name> <operator>=</operator> <name>timeOutInMillis</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getRangeRpcTimeout</name><parameter_list>(<parameter><decl><type><name>TimeUnit</name></type> <name>unit</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>unit</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>range_request_timeout_in_ms</name></name></expr></argument>, <argument><expr><name>MILLISECONDS</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setRangeRpcTimeout</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>timeOutInMillis</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>range_request_timeout_in_ms</name></name> <operator>=</operator> <name>timeOutInMillis</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getWriteRpcTimeout</name><parameter_list>(<parameter><decl><type><name>TimeUnit</name></type> <name>unit</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>unit</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>write_request_timeout_in_ms</name></name></expr></argument>, <argument><expr><name>MILLISECONDS</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setWriteRpcTimeout</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>timeOutInMillis</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>write_request_timeout_in_ms</name></name> <operator>=</operator> <name>timeOutInMillis</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getCounterWriteRpcTimeout</name><parameter_list>(<parameter><decl><type><name>TimeUnit</name></type> <name>unit</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>unit</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>counter_write_request_timeout_in_ms</name></name></expr></argument>, <argument><expr><name>MILLISECONDS</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setCounterWriteRpcTimeout</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>timeOutInMillis</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>counter_write_request_timeout_in_ms</name></name> <operator>=</operator> <name>timeOutInMillis</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getCasContentionTimeout</name><parameter_list>(<parameter><decl><type><name>TimeUnit</name></type> <name>unit</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>unit</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>cas_contention_timeout_in_ms</name></name></expr></argument>, <argument><expr><name>MILLISECONDS</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setCasContentionTimeout</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>timeOutInMillis</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>cas_contention_timeout_in_ms</name></name> <operator>=</operator> <name>timeOutInMillis</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getTruncateRpcTimeout</name><parameter_list>(<parameter><decl><type><name>TimeUnit</name></type> <name>unit</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>unit</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>truncate_request_timeout_in_ms</name></name></expr></argument>, <argument><expr><name>MILLISECONDS</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setTruncateRpcTimeout</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>timeOutInMillis</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>truncate_request_timeout_in_ms</name></name> <operator>=</operator> <name>timeOutInMillis</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>hasCrossNodeTimeout</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>cross_node_timeout</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setCrossNodeTimeout</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>crossNodeTimeout</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>cross_node_timeout</name></name> <operator>=</operator> <name>crossNodeTimeout</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getSlowQueryTimeout</name><parameter_list>(<parameter><decl><type><name>TimeUnit</name></type> <name>units</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>units</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>slow_query_log_timeout_in_ms</name></name></expr></argument>, <argument><expr><name>MILLISECONDS</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return the minimum configured {read, write, range, truncate, misc} timeout
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getMinRpcTimeout</name><parameter_list>(<parameter><decl><type><name>TimeUnit</name></type> <name>unit</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Longs</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><call><name>getRpcTimeout</name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr></argument>,
                         <argument><expr><call><name>getReadRpcTimeout</name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr></argument>,
                         <argument><expr><call><name>getRangeRpcTimeout</name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr></argument>,
                         <argument><expr><call><name>getWriteRpcTimeout</name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr></argument>,
                         <argument><expr><call><name>getCounterWriteRpcTimeout</name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr></argument>,
                         <argument><expr><call><name>getTruncateRpcTimeout</name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getPingTimeout</name><parameter_list>(<parameter><decl><type><name>TimeUnit</name></type> <name>unit</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>unit</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><call><name>getBlockForPeersTimeoutInSeconds</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>SECONDS</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>double</name></type> <name>getPhiConvictThreshold</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>phi_convict_threshold</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setPhiConvictThreshold</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>phiConvictThreshold</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>phi_convict_threshold</name></name> <operator>=</operator> <name>phiConvictThreshold</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getConcurrentReaders</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>concurrent_reads</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setConcurrentReaders</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>concurrent_reads</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>concurrent_reads</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Concurrent reads must be non-negative"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>concurrent_reads</name></name> <operator>=</operator> <name>concurrent_reads</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getConcurrentWriters</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>concurrent_writes</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setConcurrentWriters</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>concurrent_writers</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>concurrent_writers</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Concurrent reads must be non-negative"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>concurrent_writes</name></name> <operator>=</operator> <name>concurrent_writers</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getConcurrentCounterWriters</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>concurrent_counter_writes</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setConcurrentCounterWriters</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>concurrent_counter_writes</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>concurrent_counter_writes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Concurrent reads must be non-negative"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>concurrent_counter_writes</name></name> <operator>=</operator> <name>concurrent_counter_writes</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getConcurrentViewWriters</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>concurrent_materialized_view_writes</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setConcurrentViewWriters</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>concurrent_materialized_view_writes</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>concurrent_materialized_view_writes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Concurrent reads must be non-negative"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>concurrent_materialized_view_writes</name></name> <operator>=</operator> <name>concurrent_materialized_view_writes</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getFlushWriters</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>memtable_flush_writers</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getConcurrentCompactors</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>concurrent_compactors</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setConcurrentCompactors</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>concurrent_compactors</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getCompactionThroughputMbPerSec</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>compaction_throughput_mb_per_sec</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setCompactionThroughputMbPerSec</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>compaction_throughput_mb_per_sec</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getCompactionLargePartitionWarningThreshold</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>ByteUnit</name><operator>.</operator><name>MEBI_BYTES</name><operator>.</operator><name>toBytes</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>compaction_large_partition_warning_threshold_mb</name></name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getConcurrentValidations</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>concurrent_validations</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setConcurrentValidations</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>value</name> <operator>=</operator> <ternary><condition><expr><name>value</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>value</name></expr> </then><else>: <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>concurrent_validations</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getConcurrentViewBuilders</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>concurrent_materialized_view_builders</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setConcurrentViewBuilders</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>concurrent_materialized_view_builders</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getMinFreeSpacePerDriveInBytes</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>ByteUnit</name><operator>.</operator><name>MEBI_BYTES</name><operator>.</operator><name>toBytes</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>min_free_space_per_drive_in_mb</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>getDisableSTCSInL0</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>disableSTCSInL0</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setDisableSTCSInL0</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>disabled</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>disableSTCSInL0</name> <operator>=</operator> <name>disabled</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getStreamThroughputOutboundMegabitsPerSec</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>stream_throughput_outbound_megabits_per_sec</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setStreamThroughputOutboundMegabitsPerSec</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>stream_throughput_outbound_megabits_per_sec</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getInterDCStreamThroughputOutboundMegabitsPerSec</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>inter_dc_stream_throughput_outbound_megabits_per_sec</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setInterDCStreamThroughputOutboundMegabitsPerSec</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>inter_dc_stream_throughput_outbound_megabits_per_sec</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Checks if the local system data must be stored in a specific location which supports redundancy.
     *
     * @return {@code true} if the local system keyspaces data must be stored in a different location,
     * {@code false} otherwise.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>useSpecificLocationForLocalSystemData</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>local_system_data_file_directory</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the locations where the local system keyspaces data should be stored.
     *
     * &lt;p&gt;If the {@code local_system_data_file_directory} was unspecified, the local system keyspaces data should be stored
     * in the first data directory. This approach guarantees that the server can tolerate the lost of all the disks but the first one.&lt;/p&gt;
     *
     * @return the locations where should be stored the local system keyspaces data
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>String</name><index>[]</index></name></type> <name>getLocalSystemKeyspacesDataFileLocations</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>useSpecificLocationForLocalSystemData</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name><name>conf</name><operator>.</operator><name>local_system_data_file_directory</name></name></expr>}</block></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><ternary><condition><expr><name><name>conf</name><operator>.</operator><name>data_file_directories</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>  ?</condition><then> <expr><name><name>conf</name><operator>.</operator><name>data_file_directories</name></name></expr>
                                                       </then><else>: <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name><name>conf</name><operator>.</operator><name>data_file_directories</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>}</block></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the locations where the non local system keyspaces data should be stored.
     *
     * @return the locations where the non local system keyspaces data should be stored.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>String</name><index>[]</index></name></type> <name>getNonLocalSystemKeyspacesDataFileLocations</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>data_file_directories</name></name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the list of all the directories where the data files can be stored (for local system and non local system keyspaces).
     *
     * @return the list of all the directories where the data files can be stored.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>String</name><index>[]</index></name></type> <name>getAllDataFileLocations</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>local_system_data_file_directory</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name><name>conf</name><operator>.</operator><name>data_file_directories</name></name></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><call><name><name>ArrayUtils</name><operator>.</operator><name>addFirst</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>data_file_directories</name></name></expr></argument>, <argument><expr><name><name>conf</name><operator>.</operator><name>local_system_data_file_directory</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getCommitLogLocation</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>commitlog_directory</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setCommitLogLocation</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>commitlog_directory</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ParameterizedClass</name></type> <name>getCommitLogCompression</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>commitlog_compression</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setCommitLogCompression</name><parameter_list>(<parameter><decl><type><name>ParameterizedClass</name></type> <name>compressor</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>commitlog_compression</name></name> <operator>=</operator> <name>compressor</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Config</name><operator>.</operator><name>FlushCompression</name></name></type> <name>getFlushCompression</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>flush_compression</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setFlushCompression</name><parameter_list>(<parameter><decl><type><name><name>Config</name><operator>.</operator><name>FlushCompression</name></name></type> <name>compression</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>flush_compression</name></name> <operator>=</operator> <name>compression</name></expr>;</expr_stmt>
    </block_content>}</block></function>

   <comment type="block" format="javadoc">/**
    * Maximum number of buffers in the compression pool. The default value is 3, it should not be set lower than that
    * (one segment in compression, one written to, one in reserve); delays in compression may cause the log to use
    * more, depending on how soon the sync policy stops all writing threads.
    */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getCommitLogMaxCompressionBuffersInPool</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>commitlog_max_compression_buffers_in_pool</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setCommitLogMaxCompressionBuffersPerPool</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>buffers</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>commitlog_max_compression_buffers_in_pool</name></name> <operator>=</operator> <name>buffers</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getMaxMutationSize</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>ByteUnit</name><operator>.</operator><name>KIBI_BYTES</name><operator>.</operator><name>toBytes</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>max_mutation_size_in_kb</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getTombstoneWarnThreshold</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>tombstone_warn_threshold</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setTombstoneWarnThreshold</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>threshold</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>tombstone_warn_threshold</name></name> <operator>=</operator> <name>threshold</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getTombstoneFailureThreshold</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>tombstone_failure_threshold</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setTombstoneFailureThreshold</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>threshold</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>tombstone_failure_threshold</name></name> <operator>=</operator> <name>threshold</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getCachedReplicaRowsWarnThreshold</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>replica_filtering_protection</name><operator>.</operator><name>cached_rows_warn_threshold</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setCachedReplicaRowsWarnThreshold</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>threshold</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>replica_filtering_protection</name><operator>.</operator><name>cached_rows_warn_threshold</name></name> <operator>=</operator> <name>threshold</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getCachedReplicaRowsFailThreshold</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>replica_filtering_protection</name><operator>.</operator><name>cached_rows_fail_threshold</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setCachedReplicaRowsFailThreshold</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>threshold</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>replica_filtering_protection</name><operator>.</operator><name>cached_rows_fail_threshold</name></name> <operator>=</operator> <name>threshold</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * size of commitlog segments to allocate
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getCommitLogSegmentSize</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>ByteUnit</name><operator>.</operator><name>MEBI_BYTES</name><operator>.</operator><name>toBytes</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>commitlog_segment_size_in_mb</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setCommitLogSegmentSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sizeMegabytes</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>commitlog_segment_size_in_mb</name></name> <operator>=</operator> <name>sizeMegabytes</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getSavedCachesLocation</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>saved_caches_directory</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>getSeeds</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>ImmutableSet</name><operator>.</operator></name>&lt;<name>InetAddressAndPort</name><operator>&gt;</operator><call><name>builder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>addAll</name><argument_list>(<argument><expr><call><name><name>seedProvider</name><operator>.</operator><name>getSeeds</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>SeedProvider</name></type> <name>getSeedProvider</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>seedProvider</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setSeedProvider</name><parameter_list>(<parameter><decl><type><name>SeedProvider</name></type> <name>newSeedProvider</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>seedProvider</name> <operator>=</operator> <name>newSeedProvider</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>InetAddress</name></type> <name>getListenAddress</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>listenAddress</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setListenAddress</name><parameter_list>(<parameter><decl><type><name>InetAddress</name></type> <name>newlistenAddress</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>listenAddress</name> <operator>=</operator> <name>newlistenAddress</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>InetAddress</name></type> <name>getBroadcastAddress</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>broadcastAddress</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>shouldListenOnBroadcastAddress</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>listen_on_broadcast_address</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setShouldListenOnBroadcastAddress</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>shouldListenOnBroadcastAddress</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>listen_on_broadcast_address</name></name> <operator>=</operator> <name>shouldListenOnBroadcastAddress</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setListenOnBroadcastAddress</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>listen_on_broadcast_address</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>listen_on_broadcast_address</name></name> <operator>=</operator> <name>listen_on_broadcast_address</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>IInternodeAuthenticator</name></type> <name>getInternodeAuthenticator</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>internodeAuthenticator</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setInternodeAuthenticator</name><parameter_list>(<parameter><decl><type><name>IInternodeAuthenticator</name></type> <name>internodeAuthenticator</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name><argument_list>(<argument><expr><name>internodeAuthenticator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>DatabaseDescriptor</name><operator>.</operator><name>internodeAuthenticator</name></name> <operator>=</operator> <name>internodeAuthenticator</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setBroadcastAddress</name><parameter_list>(<parameter><decl><type><name>InetAddress</name></type> <name>broadcastAdd</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>broadcastAddress</name> <operator>=</operator> <name>broadcastAdd</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * This is the address used to bind for the native protocol to communicate with clients. Most usages in the code
     * refer to it as native address although some places still call it RPC address. It's not thrift RPC anymore
     * so native is more appropriate. The address alone is not enough to uniquely identify this instance because
     * multiple instances might use the same interface with different ports.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>InetAddress</name></type> <name>getRpcAddress</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>rpcAddress</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setBroadcastRpcAddress</name><parameter_list>(<parameter><decl><type><name>InetAddress</name></type> <name>broadcastRPCAddr</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>broadcastRpcAddress</name> <operator>=</operator> <name>broadcastRPCAddr</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * This is the address used to reach this instance for the native protocol to communicate with clients. Most usages in the code
     * refer to it as native address although some places still call it RPC address. It's not thrift RPC anymore
     * so native is more appropriate. The address alone is not enough to uniquely identify this instance because
     * multiple instances might use the same interface with different ports.
     *
     * May be null, please use {@link FBUtilities#getBroadcastNativeAddressAndPort()} instead.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>InetAddress</name></type> <name>getBroadcastRpcAddress</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>broadcastRpcAddress</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>getRpcKeepAlive</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>rpc_keepalive</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getInternodeSocketSendBufferSizeInBytes</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>internode_socket_send_buffer_size_in_bytes</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getInternodeSocketReceiveBufferSizeInBytes</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>internode_socket_receive_buffer_size_in_bytes</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getInternodeApplicationSendQueueCapacityInBytes</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>internode_application_send_queue_capacity_in_bytes</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getInternodeApplicationSendQueueReserveEndpointCapacityInBytes</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>internode_application_send_queue_reserve_endpoint_capacity_in_bytes</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getInternodeApplicationSendQueueReserveGlobalCapacityInBytes</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>internode_application_send_queue_reserve_global_capacity_in_bytes</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getInternodeApplicationReceiveQueueCapacityInBytes</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>internode_application_receive_queue_capacity_in_bytes</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getInternodeApplicationReceiveQueueReserveEndpointCapacityInBytes</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>internode_application_receive_queue_reserve_endpoint_capacity_in_bytes</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getInternodeApplicationReceiveQueueReserveGlobalCapacityInBytes</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>internode_application_receive_queue_reserve_global_capacity_in_bytes</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getInternodeTcpConnectTimeoutInMS</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>internode_tcp_connect_timeout_in_ms</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setInternodeTcpConnectTimeoutInMS</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>internode_tcp_connect_timeout_in_ms</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getInternodeTcpUserTimeoutInMS</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>internode_tcp_user_timeout_in_ms</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setInternodeTcpUserTimeoutInMS</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>internode_tcp_user_timeout_in_ms</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getInternodeStreamingTcpUserTimeoutInMS</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>internode_streaming_tcp_user_timeout_in_ms</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setInternodeStreamingTcpUserTimeoutInMS</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>internode_streaming_tcp_user_timeout_in_ms</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getInternodeMaxMessageSizeInBytes</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>internode_max_message_size_in_bytes</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setInternodeMaxMessageSizeInBytes</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>internode_max_message_size_in_bytes</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>startNativeTransport</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>start_native_transport</name></name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     *  This is the port used with RPC address for the native protocol to communicate with clients. Now that thrift RPC
     *  is no longer in use there is no RPC port.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getNativeTransportPort</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name><name>Config</name><operator>.</operator><name>PROPERTY_PREFIX</name></name> <operator>+</operator> <literal type="string">"native_transport_port"</literal></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>native_transport_port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setNativeTransportPort</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>native_transport_port</name></name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getNativeTransportPortSSL</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name><name>conf</name><operator>.</operator><name>native_transport_port_ssl</name></name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name>getNativeTransportPort</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name><name>conf</name><operator>.</operator><name>native_transport_port_ssl</name></name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setNativeTransportPortSSL</name><parameter_list>(<parameter><decl><type><name>Integer</name></type> <name>port</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>native_transport_port_ssl</name></name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getNativeTransportMaxThreads</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>native_transport_max_threads</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setNativeTransportMaxThreads</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>max_threads</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>native_transport_max_threads</name></name> <operator>=</operator> <name>max_threads</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getNativeTransportMaxFrameSize</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>ByteUnit</name><operator>.</operator><name>MEBI_BYTES</name><operator>.</operator><name>toBytes</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>native_transport_max_frame_size_in_mb</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getNativeTransportMaxConcurrentConnections</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>native_transport_max_concurrent_connections</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setNativeTransportMaxConcurrentConnections</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>nativeTransportMaxConcurrentConnections</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>native_transport_max_concurrent_connections</name></name> <operator>=</operator> <name>nativeTransportMaxConcurrentConnections</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getNativeTransportMaxConcurrentConnectionsPerIp</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>native_transport_max_concurrent_connections_per_ip</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setNativeTransportMaxConcurrentConnectionsPerIp</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>native_transport_max_concurrent_connections_per_ip</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>native_transport_max_concurrent_connections_per_ip</name></name> <operator>=</operator> <name>native_transport_max_concurrent_connections_per_ip</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>useNativeTransportLegacyFlusher</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>native_transport_flush_in_batches_legacy</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>getNativeTransportAllowOlderProtocols</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>native_transport_allow_older_protocols</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setNativeTransportAllowOlderProtocols</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>isEnabled</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>native_transport_allow_older_protocols</name></name> <operator>=</operator> <name>isEnabled</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>double</name></type> <name>getCommitLogSyncGroupWindow</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>commitlog_sync_group_window_in_ms</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setCommitLogSyncGroupWindow</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>windowMillis</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>commitlog_sync_group_window_in_ms</name></name> <operator>=</operator> <name>windowMillis</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getNativeTransportReceiveQueueCapacityInBytes</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>native_transport_receive_queue_capacity_in_bytes</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setNativeTransportReceiveQueueCapacityInBytes</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>queueSize</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>native_transport_receive_queue_capacity_in_bytes</name></name> <operator>=</operator> <name>queueSize</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getNativeTransportMaxConcurrentRequestsInBytesPerIp</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>native_transport_max_concurrent_requests_in_bytes_per_ip</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setNativeTransportMaxConcurrentRequestsInBytesPerIp</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>maxConcurrentRequestsInBytes</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>native_transport_max_concurrent_requests_in_bytes_per_ip</name></name> <operator>=</operator> <name>maxConcurrentRequestsInBytes</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getNativeTransportMaxConcurrentRequestsInBytes</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>native_transport_max_concurrent_requests_in_bytes</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setNativeTransportMaxConcurrentRequestsInBytes</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>maxConcurrentRequestsInBytes</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>native_transport_max_concurrent_requests_in_bytes</name></name> <operator>=</operator> <name>maxConcurrentRequestsInBytes</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getCommitLogSyncPeriod</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>commitlog_sync_period_in_ms</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getPeriodicCommitLogSyncBlock</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Integer</name></type> <name>blockMillis</name> <init>= <expr><name><name>conf</name><operator>.</operator><name>periodic_commitlog_sync_lag_block_in_ms</name></name></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name>blockMillis</name> <operator>==</operator> <literal type="null">null</literal></expr>
               ?</condition><then> <expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><call><name>getCommitLogSyncPeriod</name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">1.5</literal><operator>)</operator></expr>
               </then><else>: <expr><name>blockMillis</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setCommitLogSyncPeriod</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>periodMillis</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>commitlog_sync_period_in_ms</name></name> <operator>=</operator> <name>periodMillis</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Config</name><operator>.</operator><name>CommitLogSync</name></name></type> <name>getCommitLogSync</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>commitlog_sync</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setCommitLogSync</name><parameter_list>(<parameter><decl><type><name>CommitLogSync</name></type> <name>sync</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>commitlog_sync</name></name> <operator>=</operator> <name>sync</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Config</name><operator>.</operator><name>DiskAccessMode</name></name></type> <name>getDiskAccessMode</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>disk_access_mode</name></name></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// Do not use outside unit tests.</comment>
    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setDiskAccessMode</name><parameter_list>(<parameter><decl><type><name><name>Config</name><operator>.</operator><name>DiskAccessMode</name></name></type> <name>mode</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>disk_access_mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Config</name><operator>.</operator><name>DiskAccessMode</name></name></type> <name>getIndexAccessMode</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>indexAccessMode</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// Do not use outside unit tests.</comment>
    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setIndexAccessMode</name><parameter_list>(<parameter><decl><type><name><name>Config</name><operator>.</operator><name>DiskAccessMode</name></name></type> <name>mode</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>indexAccessMode</name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setDiskFailurePolicy</name><parameter_list>(<parameter><decl><type><name><name>Config</name><operator>.</operator><name>DiskFailurePolicy</name></name></type> <name>policy</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>disk_failure_policy</name></name> <operator>=</operator> <name>policy</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Config</name><operator>.</operator><name>DiskFailurePolicy</name></name></type> <name>getDiskFailurePolicy</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>disk_failure_policy</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setCommitFailurePolicy</name><parameter_list>(<parameter><decl><type><name><name>Config</name><operator>.</operator><name>CommitFailurePolicy</name></name></type> <name>policy</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>commit_failure_policy</name></name> <operator>=</operator> <name>policy</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Config</name><operator>.</operator><name>CommitFailurePolicy</name></name></type> <name>getCommitFailurePolicy</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>commit_failure_policy</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isSnapshotBeforeCompaction</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>snapshot_before_compaction</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isAutoSnapshot</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>auto_snapshot</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setAutoSnapshot</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>autoSnapshot</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>auto_snapshot</name></name> <operator>=</operator> <name>autoSnapshot</name></expr>;</expr_stmt>
    </block_content>}</block></function>
    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>getAutoSnapshot</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>auto_snapshot</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getSnapshotLinksPerSecond</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name><name>conf</name><operator>.</operator><name>snapshot_links_per_second</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr> </then><else>: <expr><name><name>conf</name><operator>.</operator><name>snapshot_links_per_second</name></name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setSnapshotLinksPerSecond</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>throttle</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>throttle</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Invalid throttle for snapshot_links_per_second: must be positive"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>snapshot_links_per_second</name></name> <operator>=</operator> <name>throttle</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>RateLimiter</name></type> <name>getSnapshotRateLimiter</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>RateLimiter</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name>getSnapshotLinksPerSecond</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isAutoBootstrap</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name><name>Config</name><operator>.</operator><name>PROPERTY_PREFIX</name></name> <operator>+</operator> <literal type="string">"auto_bootstrap"</literal></expr></argument>, <argument><expr><call><name><name>Boolean</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>auto_bootstrap</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setHintedHandoffEnabled</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>hintedHandoffEnabled</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>hinted_handoff_enabled</name></name> <operator>=</operator> <name>hintedHandoffEnabled</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>hintedHandoffEnabled</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>hinted_handoff_enabled</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>hintedHandoffDisabledDCs</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>hinted_handoff_disabled_datacenters</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>enableHintsForDC</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dc</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>hinted_handoff_disabled_datacenters</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>disableHintsForDC</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dc</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>hinted_handoff_disabled_datacenters</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setMaxHintWindow</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ms</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>max_hint_window_in_ms</name></name> <operator>=</operator> <name>ms</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getMaxHintWindow</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>max_hint_window_in_ms</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>File</name></type> <name>getHintsDirectory</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>hints_directory</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>File</name></type> <name>getSerializedCachePath</name><parameter_list>(<parameter><decl><type><name>CacheType</name></type> <name>cacheType</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>extension</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>cacheType</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call>
                <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>version</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="char">'-'</literal> <operator>+</operator> <name>version</name> <operator>+</operator> <literal type="char">'.'</literal> <operator>+</operator> <name>extension</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>saved_caches_directory</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getDynamicUpdateInterval</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>dynamic_snitch_update_interval_in_ms</name></name></expr>;</return>
    </block_content>}</block></function>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setDynamicUpdateInterval</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dynamicUpdateInterval</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>dynamic_snitch_update_interval_in_ms</name></name> <operator>=</operator> <name>dynamicUpdateInterval</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getDynamicResetInterval</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>dynamic_snitch_reset_interval_in_ms</name></name></expr>;</return>
    </block_content>}</block></function>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setDynamicResetInterval</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dynamicResetInterval</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>dynamic_snitch_reset_interval_in_ms</name></name> <operator>=</operator> <name>dynamicResetInterval</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>double</name></type> <name>getDynamicBadnessThreshold</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>dynamic_snitch_badness_threshold</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setDynamicBadnessThreshold</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>dynamicBadnessThreshold</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>dynamic_snitch_badness_threshold</name></name> <operator>=</operator> <name>dynamicBadnessThreshold</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>EncryptionOptions</name><operator>.</operator><name>ServerEncryptionOptions</name></name></type> <name>getInternodeMessagingEncyptionOptions</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>server_encryption_options</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setInternodeMessagingEncyptionOptions</name><parameter_list>(<parameter><decl><type><name><name>EncryptionOptions</name><operator>.</operator><name>ServerEncryptionOptions</name></name></type> <name>encryptionOptions</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>server_encryption_options</name></name> <operator>=</operator> <name>encryptionOptions</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>EncryptionOptions</name></type> <name>getNativeProtocolEncryptionOptions</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>client_encryption_options</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>updateNativeProtocolEncryptionOptions</name><parameter_list>(<parameter><decl><type><name><name>Function</name><argument_list type="generic">&lt;<argument><name>EncryptionOptions</name></argument>, <argument><name>EncryptionOptions</name></argument>&gt;</argument_list></name></type> <name>update</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>client_encryption_options</name></name> <operator>=</operator> <call><name><name>update</name><operator>.</operator><name>apply</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>client_encryption_options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getHintedHandoffThrottleInKB</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>hinted_handoff_throttle_in_kb</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setHintedHandoffThrottleInKB</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>throttleInKB</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>hinted_handoff_throttle_in_kb</name></name> <operator>=</operator> <name>throttleInKB</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getBatchlogReplayThrottleInKB</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>batchlog_replay_throttle_in_kb</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setBatchlogReplayThrottleInKB</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>throttleInKB</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>batchlog_replay_throttle_in_kb</name></name> <operator>=</operator> <name>throttleInKB</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getMaxHintsDeliveryThreads</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>max_hints_delivery_threads</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getHintsFlushPeriodInMS</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>hints_flush_period_in_ms</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getMaxHintsFileSize</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return  <expr><call><name><name>ByteUnit</name><operator>.</operator><name>MEBI_BYTES</name><operator>.</operator><name>toBytes</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>max_hints_file_size_in_mb</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ParameterizedClass</name></type> <name>getHintsCompression</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>hints_compression</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setHintsCompression</name><parameter_list>(<parameter><decl><type><name>ParameterizedClass</name></type> <name>parameterizedClass</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>hints_compression</name></name> <operator>=</operator> <name>parameterizedClass</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isIncrementalBackupsEnabled</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>incremental_backups</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setIncrementalBackupsEnabled</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>incremental_backups</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>getFileCacheEnabled</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>file_cache_enabled</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getFileCacheSizeInMB</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>file_cache_size_in_mb</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// In client mode the value is not set.</comment>
            <assert>assert <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>isClientInitialized</name></name><argument_list>()</argument_list></call></expr>;</assert>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><name><name>conf</name><operator>.</operator><name>file_cache_size_in_mb</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getNetworkingCacheSizeInMB</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>networking_cache_size_in_mb</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// In client mode the value is not set.</comment>
            <assert>assert <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>isClientInitialized</name></name><argument_list>()</argument_list></call></expr>;</assert>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>networking_cache_size_in_mb</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>getFileCacheRoundUp</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>file_cache_round_up</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// In client mode the value is not set.</comment>
            <assert>assert <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>isClientInitialized</name></name><argument_list>()</argument_list></call></expr>;</assert>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><name><name>conf</name><operator>.</operator><name>file_cache_round_up</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>DiskOptimizationStrategy</name></type> <name>getDiskOptimizationStrategy</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>diskOptimizationStrategy</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>double</name></type> <name>getDiskOptimizationEstimatePercentile</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>disk_optimization_estimate_percentile</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getTotalCommitlogSpaceInMB</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>commitlog_total_space_in_mb</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>shouldMigrateKeycacheOnCompaction</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>key_cache_migrate_during_compaction</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setMigrateKeycacheOnCompaction</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>migrateCacheEntry</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>key_cache_migrate_during_compaction</name></name> <operator>=</operator> <name>migrateCacheEntry</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getSSTablePreemptiveOpenIntervalInMB</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name><name>FBUtilities</name><operator>.</operator><name>isWindows</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name><name>conf</name><operator>.</operator><name>sstable_preemptive_open_interval_in_mb</name></name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setSSTablePreemptiveOpenIntervalInMB</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mb</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>sstable_preemptive_open_interval_in_mb</name></name> <operator>=</operator> <name>mb</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>getTrickleFsync</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>trickle_fsync</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getTrickleFsyncIntervalInKb</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>trickle_fsync_interval_in_kb</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getKeyCacheSizeInMB</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>keyCacheSizeInMB</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getIndexSummaryCapacityInMB</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>indexSummaryCapacityInMB</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getKeyCacheSavePeriod</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>key_cache_save_period</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setKeyCacheSavePeriod</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>keyCacheSavePeriod</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>key_cache_save_period</name></name> <operator>=</operator> <name>keyCacheSavePeriod</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getKeyCacheKeysToSave</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>key_cache_keys_to_save</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setKeyCacheKeysToSave</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>keyCacheKeysToSave</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>key_cache_keys_to_save</name></name> <operator>=</operator> <name>keyCacheKeysToSave</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getRowCacheClassName</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>row_cache_class_name</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getRowCacheSizeInMB</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>row_cache_size_in_mb</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setRowCacheSizeInMB</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>val</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>row_cache_size_in_mb</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getRowCacheSavePeriod</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>row_cache_save_period</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setRowCacheSavePeriod</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rowCacheSavePeriod</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>row_cache_save_period</name></name> <operator>=</operator> <name>rowCacheSavePeriod</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getRowCacheKeysToSave</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>row_cache_keys_to_save</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getCounterCacheSizeInMB</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>counterCacheSizeInMB</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setRowCacheKeysToSave</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rowCacheKeysToSave</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>row_cache_keys_to_save</name></name> <operator>=</operator> <name>rowCacheKeysToSave</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getCounterCacheSavePeriod</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>counter_cache_save_period</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setCounterCacheSavePeriod</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>counterCacheSavePeriod</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>counter_cache_save_period</name></name> <operator>=</operator> <name>counterCacheSavePeriod</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getCacheLoadTimeout</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>cache_load_timeout_seconds</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setCacheLoadTimeout</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>seconds</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>cache_load_timeout_seconds</name></name> <operator>=</operator> <name>seconds</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getCounterCacheKeysToSave</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>counter_cache_keys_to_save</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setCounterCacheKeysToSave</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>counterCacheKeysToSave</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>counter_cache_keys_to_save</name></name> <operator>=</operator> <name>counterCacheKeysToSave</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getStreamingKeepAlivePeriod</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>streaming_keep_alive_period_in_secs</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getStreamingConnectionsPerHost</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>streaming_connections_per_host</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>streamEntireSSTables</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>stream_entire_sstables</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getLocalDataCenter</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>localDC</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>&gt;</argument_list></name></type> <name>getLocalComparator</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>localComparator</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Config</name><operator>.</operator><name>InternodeCompression</name></name></type> <name>internodeCompression</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>internode_compression</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setInternodeCompression</name><parameter_list>(<parameter><decl><type><name><name>Config</name><operator>.</operator><name>InternodeCompression</name></name></type> <name>compression</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>internode_compression</name></name> <operator>=</operator> <name>compression</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>getInterDCTcpNoDelay</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>inter_dc_tcp_nodelay</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getMemtableHeapSpaceInMb</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>memtable_heap_space_in_mb</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getMemtableOffheapSpaceInMb</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>memtable_offheap_space_in_mb</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Config</name><operator>.</operator><name>MemtableAllocationType</name></name></type> <name>getMemtableAllocationType</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>memtable_allocation_type</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getRepairSessionMaxTreeDepth</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>repair_session_max_tree_depth</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setRepairSessionMaxTreeDepth</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>depth</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Cannot set repair_session_max_tree_depth to "</literal> <operator>+</operator> <name>depth</name> <operator>+</operator>
                                             <literal type="string">" which is &lt; 10, doing nothing"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>depth</name> <operator>&gt;</operator> <literal type="number">20</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"repair_session_max_tree_depth of "</literal> <operator>+</operator> <name>depth</name> <operator>+</operator> <literal type="string">" &gt; 20 could lead to excessive memory usage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>repair_session_max_tree_depth</name></name> <operator>=</operator> <name>depth</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getRepairSessionSpaceInMegabytes</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>repair_session_space_in_mb</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setRepairSessionSpaceInMegabytes</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sizeInMegabytes</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>sizeInMegabytes</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Cannot set repair_session_space_in_mb to "</literal> <operator>+</operator> <name>sizeInMegabytes</name> <operator>+</operator>
                                             <literal type="string">" &lt; 1 megabyte"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>sizeInMegabytes</name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><call><name><name>Runtime</name><operator>.</operator><name>getRuntime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>maxMemory</name><argument_list>()</argument_list></call> <operator>/</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <literal type="number">1048576</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"A repair_session_space_in_mb of "</literal> <operator>+</operator> <name><name>conf</name><operator>.</operator><name>repair_session_space_in_mb</name></name> <operator>+</operator>
                        <literal type="string">" megabytes is likely to cause heap pressure."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>repair_session_space_in_mb</name></name> <operator>=</operator> <name>sizeInMegabytes</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Float</name></type> <name>getMemtableCleanupThreshold</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>memtable_cleanup_threshold</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getIndexSummaryResizeIntervalInMinutes</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>index_summary_resize_interval_in_minutes</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>hasLargeAddressSpace</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <comment type="line">// currently we just check if it's a 64bit arch, but any we only really care if the address space is large</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>datamodel</name> <init>= <expr><call><name><name>SUN_ARCH_DATA_MODEL</name><operator>.</operator><name>getString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>datamodel</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <switch>switch <condition>(<expr><name>datamodel</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><literal type="string">"64"</literal></expr>:</case> <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                <case>case <expr><literal type="string">"32"</literal></expr>:</case> <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></switch>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>arch</name> <init>= <expr><call><name><name>OS_ARCH</name><operator>.</operator><name>getString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>arch</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"64"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>arch</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"sparcv9"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getTracetypeRepairTTL</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>tracetype_repair_ttl</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getTracetypeQueryTTL</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>tracetype_query_ttl</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getWindowsTimerInterval</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>windows_timer_interval</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getPreparedStatementsCacheSizeMB</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>preparedStatementsCacheSizeInMB</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>enableUserDefinedFunctions</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>enable_user_defined_functions</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>enableScriptedUserDefinedFunctions</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>enable_scripted_user_defined_functions</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>enableScriptedUserDefinedFunctions</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>enableScriptedUserDefinedFunctions</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>enable_scripted_user_defined_functions</name></name> <operator>=</operator> <name>enableScriptedUserDefinedFunctions</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>enableUserDefinedFunctionsThreads</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>enable_user_defined_functions_threads</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getUserDefinedFunctionWarnTimeout</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>user_defined_function_warn_timeout</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setUserDefinedFunctionWarnTimeout</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>userDefinedFunctionWarnTimeout</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>user_defined_function_warn_timeout</name></name> <operator>=</operator> <name>userDefinedFunctionWarnTimeout</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>allowInsecureUDFs</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>allow_insecure_udfs</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>allowExtraInsecureUDFs</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>allow_extra_insecure_udfs</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>getEnableMaterializedViews</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>enable_materialized_views</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setEnableMaterializedViews</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>enableMaterializedViews</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>enable_materialized_views</name></name> <operator>=</operator> <name>enableMaterializedViews</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>getEnableSASIIndexes</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>enable_sasi_indexes</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setEnableSASIIndexes</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>enableSASIIndexes</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>enable_sasi_indexes</name></name> <operator>=</operator> <name>enableSASIIndexes</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isTransientReplicationEnabled</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>enable_transient_replication</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setTransientReplicationEnabledUnsafe</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>enabled</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>enable_transient_replication</name></name> <operator>=</operator> <name>enabled</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>enableDropCompactStorage</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>enable_drop_compact_storage</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setEnableDropCompactStorage</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>enableDropCompactStorage</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>enable_drop_compact_storage</name></name> <operator>=</operator> <name>enableDropCompactStorage</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getUserDefinedFunctionFailTimeout</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>user_defined_function_fail_timeout</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setUserDefinedFunctionFailTimeout</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>userDefinedFunctionFailTimeout</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>user_defined_function_fail_timeout</name></name> <operator>=</operator> <name>userDefinedFunctionFailTimeout</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Config</name><operator>.</operator><name>UserFunctionTimeoutPolicy</name></name></type> <name>getUserFunctionTimeoutPolicy</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>user_function_timeout_policy</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setUserFunctionTimeoutPolicy</name><parameter_list>(<parameter><decl><type><name><name>Config</name><operator>.</operator><name>UserFunctionTimeoutPolicy</name></name></type> <name>userFunctionTimeoutPolicy</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>user_function_timeout_policy</name></name> <operator>=</operator> <name>userFunctionTimeoutPolicy</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getGCLogThreshold</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>gc_log_threshold_in_ms</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>EncryptionContext</name></type> <name>getEncryptionContext</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>encryptionContext</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getGCWarnThreshold</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>gc_warn_threshold_in_ms</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isCDCEnabled</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>cdc_enabled</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setCDCEnabled</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>cdc_enabled</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>cdc_enabled</name></name> <operator>=</operator> <name>cdc_enabled</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getCDCLogLocation</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>cdc_raw_directory</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getCDCSpaceInMB</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>cdc_total_space_in_mb</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setCDCSpaceInMB</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>input</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>cdc_total_space_in_mb</name></name> <operator>=</operator> <name>input</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getCDCDiskCheckInterval</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>cdc_free_space_check_interval_ms</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setEncryptionContext</name><parameter_list>(<parameter><decl><type><name>EncryptionContext</name></type> <name>ec</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>encryptionContext</name> <operator>=</operator> <name>ec</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>searchConcurrencyFactor</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>searchConcurrencyFactor</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isUnsafeSystem</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>unsafeSystem</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>diagnosticEventsEnabled</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>diagnostic_events_enabled</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setDiagnosticEventsEnabled</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>enabled</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>diagnostic_events_enabled</name></name> <operator>=</operator> <name>enabled</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ConsistencyLevel</name></type> <name>getIdealConsistencyLevel</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>ideal_consistency_level</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setIdealConsistencyLevel</name><parameter_list>(<parameter><decl><type><name>ConsistencyLevel</name></type> <name>cl</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>ideal_consistency_level</name></name> <operator>=</operator> <name>cl</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getRepairCommandPoolSize</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>repair_command_pool_size</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Config</name><operator>.</operator><name>RepairCommandPoolFullStrategy</name></name></type> <name>getRepairCommandPoolFullStrategy</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>repair_command_pool_full_strategy</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>FullQueryLoggerOptions</name></type> <name>getFullQueryLogOptions</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return  <expr><name><name>conf</name><operator>.</operator><name>full_query_logging_options</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>getBlockForPeersInRemoteDatacenters</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>block_for_peers_in_remote_dcs</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getBlockForPeersTimeoutInSeconds</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>block_for_peers_timeout_in_secs</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>automaticSSTableUpgrade</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>automatic_sstable_upgrade</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setAutomaticSSTableUpgradeEnabled</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>enabled</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>automatic_sstable_upgrade</name></name> <operator>!=</operator> <name>enabled</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Changing automatic_sstable_upgrade to {}"</literal></expr></argument>, <argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>automatic_sstable_upgrade</name></name> <operator>=</operator> <name>enabled</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>maxConcurrentAutoUpgradeTasks</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>max_concurrent_automatic_sstable_upgrades</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setMaxConcurrentAutoUpgradeTasks</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>max_concurrent_automatic_sstable_upgrades</name></name> <operator>!=</operator> <name>value</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Changing max_concurrent_automatic_sstable_upgrades to {}"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>validateMaxConcurrentAutoUpgradeTasksConf</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>max_concurrent_automatic_sstable_upgrades</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>validateMaxConcurrentAutoUpgradeTasksConf</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"max_concurrent_automatic_sstable_upgrades can't be negative"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;</operator> <call><name>getConcurrentCompactors</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"max_concurrent_automatic_sstable_upgrades ({}) is larger than concurrent_compactors ({})"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>getConcurrentCompactors</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>
    
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>AuditLogOptions</name></type> <name>getAuditLoggingOptions</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>audit_logging_options</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setAuditLoggingOptions</name><parameter_list>(<parameter><decl><type><name>AuditLogOptions</name></type> <name>auditLoggingOptions</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>audit_logging_options</name></name> <operator>=</operator> <name>auditLoggingOptions</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Config</name><operator>.</operator><name>CorruptedTombstoneStrategy</name></name></type> <name>getCorruptedTombstoneStrategy</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>corrupted_tombstone_strategy</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setCorruptedTombstoneStrategy</name><parameter_list>(<parameter><decl><type><name><name>Config</name><operator>.</operator><name>CorruptedTombstoneStrategy</name></name></type> <name>strategy</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>corrupted_tombstone_strategy</name></name> <operator>=</operator> <name>strategy</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>getRepairedDataTrackingForRangeReadsEnabled</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>repaired_data_tracking_for_range_reads_enabled</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setRepairedDataTrackingForRangeReadsEnabled</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>enabled</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>repaired_data_tracking_for_range_reads_enabled</name></name> <operator>=</operator> <name>enabled</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>getRepairedDataTrackingForPartitionReadsEnabled</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>repaired_data_tracking_for_partition_reads_enabled</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setRepairedDataTrackingForPartitionReadsEnabled</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>enabled</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>repaired_data_tracking_for_partition_reads_enabled</name></name> <operator>=</operator> <name>enabled</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>snapshotOnRepairedDataMismatch</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>snapshot_on_repaired_data_mismatch</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setSnapshotOnRepairedDataMismatch</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>enabled</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>snapshot_on_repaired_data_mismatch</name></name> <operator>=</operator> <name>enabled</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>snapshotOnDuplicateRowDetection</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>snapshot_on_duplicate_row_detection</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setSnapshotOnDuplicateRowDetection</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>enabled</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>snapshot_on_duplicate_row_detection</name></name> <operator>=</operator> <name>enabled</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>reportUnconfirmedRepairedDataMismatches</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>report_unconfirmed_repaired_data_mismatches</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>reportUnconfirmedRepairedDataMismatches</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>enabled</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>report_unconfirmed_repaired_data_mismatches</name></name> <operator>=</operator> <name>enabled</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>strictRuntimeChecks</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>strictRuntimeChecks</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>useOffheapMerkleTrees</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>use_offheap_merkle_trees</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>useOffheapMerkleTrees</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Setting use_offheap_merkle_trees to {}"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>use_offheap_merkle_trees</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Function</name><argument_list type="generic">&lt;<argument><name>CommitLog</name></argument>, <argument><name>AbstractCommitLogSegmentManager</name></argument>&gt;</argument_list></name></type> <name>getCommitLogSegmentMgrProvider</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>commitLogSegmentMgrProvider</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setCommitLogSegmentMgrProvider</name><parameter_list>(<parameter><decl><type><name><name>Function</name><argument_list type="generic">&lt;<argument><name>CommitLog</name></argument>, <argument><name>AbstractCommitLogSegmentManager</name></argument>&gt;</argument_list></name></type> <name>provider</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>commitLogSegmentMgrProvider</name> <operator>=</operator> <name>provider</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Class that primarily tracks overflow thresholds during conversions
     */</comment>
    <enum><specifier>private</specifier> enum <name>ByteUnit</name> <block>{
        <decl><name>KIBI_BYTES</name><argument_list>(<argument><expr><literal type="number">2048</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></decl>,
        <decl><name>MEBI_BYTES</name><argument_list>(<argument><expr><literal type="number">2048</literal></expr></argument>, <argument><expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></decl>;

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>overflowThreshold</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>multiplier</name></decl>;</decl_stmt>

        <constructor><name>ByteUnit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>overflowThreshold</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>multiplier</name></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>overflowThreshold</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>overflowThreshold</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>willOverflowInBytes</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>val</name> <operator>&gt;=</operator> <name>overflowThreshold</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>long</name></type> <name>toBytes</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>val</name> <operator>*</operator> <name>multiplier</name></expr>;</return>
        </block_content>}</block></function>
    }</block></enum>

    <comment type="block" format="javadoc">/**
     * Ensures passed in configuration value is positive and will not overflow when converted to Bytes
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>checkValidForByteConversion</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>ByteUnit</name></type> <name>unit</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name><name>unit</name><operator>.</operator><name>willOverflowInBytes</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s must be positive value &lt; %d, but was %d"</literal></expr></argument>,
                                                           <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>unit</name><operator>.</operator><name>overflowThreshold</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getValidationPreviewPurgeHeadStartInSec</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>seconds</name> <init>= <expr><name><name>conf</name><operator>.</operator><name>validation_preview_purge_head_start_in_sec</name></name></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>seconds</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>checkForDuplicateRowsDuringReads</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>check_for_duplicate_rows_during_reads</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setCheckForDuplicateRowsDuringReads</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>enabled</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>check_for_duplicate_rows_during_reads</name></name> <operator>=</operator> <name>enabled</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>checkForDuplicateRowsDuringCompaction</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>check_for_duplicate_rows_during_compaction</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setCheckForDuplicateRowsDuringCompaction</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>enabled</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>check_for_duplicate_rows_during_compaction</name></name> <operator>=</operator> <name>enabled</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getRepairPendingCompactionRejectThreshold</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>reject_repair_compaction_threshold</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setRepairPendingCompactionRejectThreshold</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>reject_repair_compaction_threshold</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getInitialRangeTombstoneListAllocationSize</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>initial_range_tombstone_list_allocation_size</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setInitialRangeTombstoneListAllocationSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>initial_range_tombstone_list_allocation_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>double</name></type> <name>getRangeTombstoneListGrowthFactor</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>range_tombstone_list_growth_factor</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setRangeTombstoneListGrowthFactor</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>resizeFactor</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>range_tombstone_list_growth_factor</name></name> <operator>=</operator> <name>resizeFactor</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>getAutocompactionOnStartupEnabled</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>autocompaction_on_startup_enabled</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>autoOptimiseIncRepairStreams</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>auto_optimise_inc_repair_streams</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setAutoOptimiseIncRepairStreams</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>enabled</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>enabled</name> <operator>!=</operator> <name><name>conf</name><operator>.</operator><name>auto_optimise_inc_repair_streams</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Changing auto_optimise_inc_repair_streams from {} to {}"</literal></expr></argument>, <argument><expr><name><name>conf</name><operator>.</operator><name>auto_optimise_inc_repair_streams</name></name></expr></argument>, <argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>auto_optimise_inc_repair_streams</name></name> <operator>=</operator> <name>enabled</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>autoOptimiseFullRepairStreams</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>auto_optimise_full_repair_streams</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setAutoOptimiseFullRepairStreams</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>enabled</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>enabled</name> <operator>!=</operator> <name><name>conf</name><operator>.</operator><name>auto_optimise_full_repair_streams</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Changing auto_optimise_full_repair_streams from {} to {}"</literal></expr></argument>, <argument><expr><name><name>conf</name><operator>.</operator><name>auto_optimise_full_repair_streams</name></name></expr></argument>, <argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>auto_optimise_full_repair_streams</name></name> <operator>=</operator> <name>enabled</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>autoOptimisePreviewRepairStreams</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>auto_optimise_preview_repair_streams</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setAutoOptimisePreviewRepairStreams</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>enabled</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>enabled</name> <operator>!=</operator> <name><name>conf</name><operator>.</operator><name>auto_optimise_preview_repair_streams</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Changing auto_optimise_preview_repair_streams from {} to {}"</literal></expr></argument>, <argument><expr><name><name>conf</name><operator>.</operator><name>auto_optimise_preview_repair_streams</name></name></expr></argument>, <argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>auto_optimise_preview_repair_streams</name></name> <operator>=</operator> <name>enabled</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>tableCountWarnThreshold</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>table_count_warn_threshold</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setTableCountWarnThreshold</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>table_count_warn_threshold</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>keyspaceCountWarnThreshold</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>keyspace_count_warn_threshold</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setKeyspaceCountWarnThreshold</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>keyspace_count_warn_threshold</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getConsecutiveMessageErrorsThreshold</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>consecutive_message_errors_threshold</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setConsecutiveMessageErrorsThreshold</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>consecutive_message_errors_threshold</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>getForceNewPreparedStatementBehaviour</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>conf</name><operator>.</operator><name>force_new_prepared_statement_behaviour</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setForceNewPreparedStatementBehaviour</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>!=</operator> <name><name>conf</name><operator>.</operator><name>force_new_prepared_statement_behaviour</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Setting force_new_prepared_statement_behaviour to {}"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>conf</name><operator>.</operator><name>force_new_prepared_statement_behaviour</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>
