<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/auth/IRoleManager.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>auth</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Collectors</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>ConfigurationException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>RequestExecutionException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>RequestValidationException</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Responsible for managing roles (which also includes what
 * used to be known as users), including creation, deletion,
 * alteration and the granting and revoking of roles to other
 * roles.
 */</comment>
<interface><specifier>public</specifier> interface <name>IRoleManager</name>
<block>{

    <comment type="block" format="javadoc">/**
     * Supported options for CREATE ROLE/ALTER ROLE (and
     * CREATE USER/ALTER USER, which are aliases provided
     * for backwards compatibility).
     */</comment>
    <enum><specifier>public</specifier> enum <name>Option</name>
    <block>{
        <decl><name>SUPERUSER</name></decl>, <decl><name>PASSWORD</name></decl>, <decl><name>LOGIN</name></decl>, <decl><name>OPTIONS</name></decl>
    }</block></enum>

    <comment type="block" format="javadoc">/**
     * Set of options supported by CREATE ROLE and ALTER ROLE queries.
     * Should never return null - always return an empty set instead.
     */</comment>
    <function_decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Option</name></argument>&gt;</argument_list></name></type> <name>supportedOptions</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Subset of supportedOptions that users are allowed to alter when performing ALTER ROLE [themselves].
     * Should never return null - always return an empty set instead.
     */</comment>
    <function_decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Option</name></argument>&gt;</argument_list></name></type> <name>alterableOptions</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Called during execution of a CREATE ROLE statement.
     * options are guaranteed to be a subset of supportedOptions().
     *
     * @param performer User issuing the create role statement.
     * @param role Rolei being created
     * @param options Options the role will be created with
     * @throws RequestValidationException
     * @throws RequestExecutionException
     */</comment>
    <function_decl><type><name>void</name></type> <name>createRole</name><parameter_list>(<parameter><decl><type><name>AuthenticatedUser</name></type> <name>performer</name></decl></parameter>, <parameter><decl><type><name>RoleResource</name></type> <name>role</name></decl></parameter>, <parameter><decl><type><name>RoleOptions</name></type> <name>options</name></decl></parameter>)</parameter_list>
    <throws>throws <argument><expr><name>RequestValidationException</name></expr></argument>, <argument><expr><name>RequestExecutionException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Called during execution of DROP ROLE statement, as well we removing any main record of the role from the system
     * this implies that we want to revoke this role from all other roles that it has been granted to.
     *
     * @param performer User issuing the drop role statement.
     * @param role Role to be dropped.
     * @throws RequestValidationException
     * @throws RequestExecutionException
     */</comment>
    <function_decl><type><name>void</name></type> <name>dropRole</name><parameter_list>(<parameter><decl><type><name>AuthenticatedUser</name></type> <name>performer</name></decl></parameter>, <parameter><decl><type><name>RoleResource</name></type> <name>role</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>RequestValidationException</name></expr></argument>, <argument><expr><name>RequestExecutionException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Called during execution of ALTER ROLE statement.
     * options are always guaranteed to be a subset of supportedOptions(). Furthermore, if the actor performing the query
     * is not a superuser and is altering themself, then options are guaranteed to be a subset of alterableOptions().
     * Keep the body of the method blank if your implementation doesn't support modification of any options.
     *
     * @param performer User issuing the alter role statement.
     * @param role Role that will be altered.
     * @param options Options to alter.
     * @throws RequestValidationException
     * @throws RequestExecutionException
     */</comment>
    <function_decl><type><name>void</name></type> <name>alterRole</name><parameter_list>(<parameter><decl><type><name>AuthenticatedUser</name></type> <name>performer</name></decl></parameter>, <parameter><decl><type><name>RoleResource</name></type> <name>role</name></decl></parameter>, <parameter><decl><type><name>RoleOptions</name></type> <name>options</name></decl></parameter>)</parameter_list>
    <throws>throws <argument><expr><name>RequestValidationException</name></expr></argument>, <argument><expr><name>RequestExecutionException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Called during execution of GRANT ROLE query.
     * Grant an role to another existing role. A grantee that has a role granted to it will inherit any
     * permissions of the granted role.
     *
     * @param performer User issuing the grant statement.
     * @param role Role to be granted to the grantee.
     * @param grantee Role acting as the grantee.
     * @throws RequestValidationException
     * @throws RequestExecutionException
     */</comment>
    <function_decl><type><name>void</name></type> <name>grantRole</name><parameter_list>(<parameter><decl><type><name>AuthenticatedUser</name></type> <name>performer</name></decl></parameter>, <parameter><decl><type><name>RoleResource</name></type> <name>role</name></decl></parameter>, <parameter><decl><type><name>RoleResource</name></type> <name>grantee</name></decl></parameter>)</parameter_list>
    <throws>throws <argument><expr><name>RequestValidationException</name></expr></argument>, <argument><expr><name>RequestExecutionException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Called during the execution of a REVOKE ROLE query.
     * Revoke an granted role from an existing role. The revokee will lose any permissions inherited from the role being
     * revoked.
     *
     * @param performer User issuing the revoke statement.
     * @param role Role to be revoked.
     * @param revokee Role from which the granted role is to be revoked.
     * @throws RequestValidationException
     * @throws RequestExecutionException
     */</comment>
    <function_decl><type><name>void</name></type> <name>revokeRole</name><parameter_list>(<parameter><decl><type><name>AuthenticatedUser</name></type> <name>performer</name></decl></parameter>, <parameter><decl><type><name>RoleResource</name></type> <name>role</name></decl></parameter>, <parameter><decl><type><name>RoleResource</name></type> <name>revokee</name></decl></parameter>)</parameter_list>
    <throws>throws <argument><expr><name>RequestValidationException</name></expr></argument>, <argument><expr><name>RequestExecutionException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Called during execution of a LIST ROLES query.
     * Returns a set of roles that have been granted to the grantee using GRANT ROLE.
     *
     * @param grantee Role whose granted roles will be listed.
     * @param includeInherited if True will list inherited roles as well as those directly granted to the grantee.
     * @return A list containing the granted roles for the user.
     * @throws RequestValidationException
     * @throws RequestExecutionException
     */</comment>
    <function_decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>RoleResource</name></argument>&gt;</argument_list></name></type> <name>getRoles</name><parameter_list>(<parameter><decl><type><name>RoleResource</name></type> <name>grantee</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>includeInherited</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>RequestValidationException</name></expr></argument>, <argument><expr><name>RequestExecutionException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Used to retrieve detailed role info on the full set of roles granted to a grantee.
     * This method was not part of the V1 IRoleManager API, so a default impl is supplied which uses the V1
     * methods to retrieve the detailed role info for the grantee. This is essentially what clients of this interface
     * would have to do themselves. Implementations can provide optimized versions of this method where the details
     * can be retrieved more efficiently.
     *
     * @param grantee identifies the role whose granted roles are retrieved
     * @return A set of Role objects detailing the roles granted to the grantee, either directly or through inheritance.
     */</comment>
     <function><type><specifier>default</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Role</name></argument>&gt;</argument_list></name></type> <name>getRoleDetails</name><parameter_list>(<parameter><decl><type><name>RoleResource</name></type> <name>grantee</name></decl></parameter>)</parameter_list>
     <block>{<block_content>
         <return>return <expr><call><name>getRoles</name><argument_list>(<argument><expr><name>grantee</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call>
                                       <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>roleResource</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>Roles</name><operator>.</operator><name>fromRoleResource</name></name><argument_list>(<argument><expr><name>roleResource</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
                                       <operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toSet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
     </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Called during the execution of an unqualified LIST ROLES query.
     * Returns the total set of distinct roles in the system.
     *
     * @return the set of all roles in the system.
     * @throws RequestValidationException
     * @throws RequestExecutionException
     */</comment>
    <function_decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>RoleResource</name></argument>&gt;</argument_list></name></type> <name>getAllRoles</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>RequestValidationException</name></expr></argument>, <argument><expr><name>RequestExecutionException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Return true if there exists a Role with the given name that also has
     * superuser status. Superuser status may be inherited from another
     * granted role, so this method should return true if either the named
     * Role, or any other Role it is transitively granted has superuser
     * status.
     *
     * @param role Role whose superuser status to verify
     * @return true if the role exists and has superuser status, either
     * directly or transitively, otherwise false.
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>isSuper</name><parameter_list>(<parameter><decl><type><name>RoleResource</name></type> <name>role</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Return true if there exists a Role with the given name which has login
     * privileges. Such privileges is not inherited from other granted Roles
     * and so must be directly granted to the named Role with the LOGIN option
     * of CREATE ROLE or ALTER ROLE
     *
     * @param role Role whose login privileges to verify
     * @return true if the role exists and is permitted to login, otherwise false
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>canLogin</name><parameter_list>(<parameter><decl><type><name>RoleResource</name></type> <name>role</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Where an implementation supports OPTIONS in CREATE and ALTER operations
     * this method should return the {@code Map&lt;String, String&gt;} representing the custom
     * options associated with the role, as supplied to CREATE or ALTER.
     * It should never return null; if the implementation does not support
     * OPTIONS or if none were supplied then it should return an empty map.
     * @param role Role whose custom options are required
     * @return Key/Value pairs representing the custom options for the Role
     */</comment>
    <function_decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getCustomOptions</name><parameter_list>(<parameter><decl><type><name>RoleResource</name></type> <name>role</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Return true is a Role with the given name exists in the system.
     *
     * @param role Role whose existence to verify
     * @return true if the name identifies an extant Role in the system,
     * otherwise false
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>isExistingRole</name><parameter_list>(<parameter><decl><type><name>RoleResource</name></type> <name>role</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Set of resources that should be made inaccessible to users and only accessible internally.
     *
     * @return Keyspaces and column families that will be unmodifiable by users; other resources.
     */</comment>
    <function_decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>IResource</name></extends></argument>&gt;</argument_list></name></type> <name>protectedResources</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Hook to perform validation of an implementation's configuration (if supported).
     *
     * @throws ConfigurationException
     */</comment>
    <function_decl><type><name>void</name></type> <name>validateConfiguration</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Hook to perform implementation specific initialization, called once upon system startup.
     *
     * For example, use this method to create any required keyspaces/column families.
     */</comment>
    <function_decl><type><name>void</name></type> <name>setup</name><parameter_list>()</parameter_list>;</function_decl>
}</block></interface>
</unit>
