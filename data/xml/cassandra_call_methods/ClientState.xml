<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/service/ClientState.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>InetAddress</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>InetSocketAddress</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>SocketAddress</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Optional</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicLong</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>auth</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>virtual</name><operator>.</operator><name>VirtualSchemaKeyspace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>RequestExecutionException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>RequestValidationException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>TableMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>TableMetadataRef</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>Schema</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>SchemaConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>SchemaKeyspaceTables</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>QueryHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>QueryProcessor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>functions</name><operator>.</operator><name>Function</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>SystemKeyspace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>Datacenters</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>AuthenticationException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>InvalidRequestException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>UnauthorizedException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>FBUtilities</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>JVMStabilityInspector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>MD5Digest</name></name>;</import>

<comment type="block" format="javadoc">/**
 * State related to a client connection.
 */</comment>
<class><specifier>public</specifier> class <name>ClientState</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>ClientState</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>IResource</name></argument>&gt;</argument_list></name></type> <name>READABLE_SYSTEM_RESOURCES</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>IResource</name></argument>&gt;</argument_list></name></type> <name>PROTECTED_AUTH_RESOURCES</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <static>static
    <block>{<block_content>
        <comment type="line">// We want these system cfs to be always readable to authenticated users since many tools rely on them</comment>
        <comment type="line">// (nodetool, cqlsh, bulkloader, etc.)</comment>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>cf</name> <range>: <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name><name>SystemKeyspace</name><operator>.</operator><name>LOCAL</name></name></expr></argument>, <argument><expr><name><name>SystemKeyspace</name><operator>.</operator><name>LEGACY_PEERS</name></name></expr></argument>, <argument><expr><name><name>SystemKeyspace</name><operator>.</operator><name>PEERS_V2</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>READABLE_SYSTEM_RESOURCES</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>DataResource</name><operator>.</operator><name>table</name></name><argument_list>(<argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SYSTEM_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name>cf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <comment type="line">// make all schema tables readable by default (required by the drivers)</comment>
        <expr_stmt><expr><call><name><name>SchemaKeyspaceTables</name><operator>.</operator><name>ALL</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>table</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>READABLE_SYSTEM_RESOURCES</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>DataResource</name><operator>.</operator><name>table</name></name><argument_list>(<argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SCHEMA_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// make all virtual schema tables readable by default as well</comment>
        <expr_stmt><expr><call><name><name>VirtualSchemaKeyspace</name><operator>.</operator><name>instance</name><operator>.</operator><name>tables</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>t</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>READABLE_SYSTEM_RESOURCES</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>t</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><name>resource</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// neither clients nor tools need authentication/authorization</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>isDaemonInitialized</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>PROTECTED_AUTH_RESOURCES</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getAuthenticator</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>protectedResources</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>PROTECTED_AUTH_RESOURCES</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getAuthorizer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>protectedResources</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>PROTECTED_AUTH_RESOURCES</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getRoleManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>protectedResources</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></static>

    <comment type="line">// Current user for the session</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>AuthenticatedUser</name></type> <name>user</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>String</name></type> <name>keyspace</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>issuedPreparedStatementsUseWarning</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>QueryHandler</name></type> <name>cqlQueryHandler</name></decl>;</decl_stmt>
    <static>static
    <block>{<block_content>
        <decl_stmt><decl><type><name>QueryHandler</name></type> <name>handler</name> <init>= <expr><name><name>QueryProcessor</name><operator>.</operator><name>instance</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>customHandlerClass</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.custom_query_handler_class"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>customHandlerClass</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <try>try
            <block>{<block_content>
                <expr_stmt><expr><name>handler</name> <operator>=</operator> <call><name><name>FBUtilities</name><operator>.</operator><name>construct</name></name><argument_list>(<argument><expr><name>customHandlerClass</name></expr></argument>, <argument><expr><literal type="string">"QueryHandler"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Using {} as query handler for native protocol queries (as requested with -Dcassandra.custom_query_handler_class)"</literal></expr></argument>, <argument><expr><name>customHandlerClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Cannot use class {} as query handler"</literal></expr></argument>, <argument><expr><name>customHandlerClass</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>JVMStabilityInspector</name><operator>.</operator><name>killCurrentJVM</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>cqlQueryHandler</name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>
    </block_content>}</block></static>

    <comment type="line">// isInternal is used to mark ClientState as used by some internal component</comment>
    <comment type="line">// that should have an ability to modify system keyspace.</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>isInternal</name></decl>;</decl_stmt>

    <comment type="line">// The remote address of the client - null for internal clients.</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>InetSocketAddress</name></type> <name>remoteAddress</name></decl>;</decl_stmt>

    <comment type="line">// Driver String for the client</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>String</name></type> <name>driverName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>String</name></type> <name>driverVersion</name></decl>;</decl_stmt>

    <comment type="line">// The biggest timestamp that was returned by getTimestamp/assigned to a query. This is global to ensure that the</comment>
    <comment type="line">// timestamp assigned are strictly monotonic on a node, which is likely what user expect intuitively (more likely,</comment>
    <comment type="line">// most new user will intuitively expect timestamp to be strictly monotonic cluster-wise, but while that last part</comment>
    <comment type="line">// is unrealistic expectation, doing it node-wise is easy).</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>AtomicLong</name></type> <name>lastTimestampMicros</name> <init>= <expr><operator>new</operator> <call><name>AtomicLong</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Construct a new, empty ClientState for internal calls.
     */</comment>
    <constructor><specifier>private</specifier> <name>ClientState</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isInternal</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>remoteAddress</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>protected</specifier> <name>ClientState</name><parameter_list>(<parameter><decl><type><name>InetSocketAddress</name></type> <name>remoteAddress</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isInternal</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>remoteAddress</name></name> <operator>=</operator> <name>remoteAddress</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getAuthenticator</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>requireAuthentication</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>user</name></name> <operator>=</operator> <name><name>AuthenticatedUser</name><operator>.</operator><name>ANONYMOUS_USER</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>protected</specifier> <name>ClientState</name><parameter_list>(<parameter><decl><type><name>ClientState</name></type> <name>source</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isInternal</name></name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>isInternal</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>remoteAddress</name></name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>remoteAddress</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>user</name></name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>user</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>keyspace</name></name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>keyspace</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>driverName</name></name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>driverName</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>driverVersion</name></name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>driverVersion</name></name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * @return a ClientState object for internal C* calls (not limited by any kind of auth).
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ClientState</name></type> <name>forInternalCalls</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>ClientState</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ClientState</name></type> <name>forInternalCalls</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ClientState</name></type> <name>state</name> <init>= <expr><operator>new</operator> <call><name>ClientState</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>setKeyspace</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>state</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return a ClientState object for external clients (native protocol users).
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ClientState</name></type> <name>forExternalCalls</name><parameter_list>(<parameter><decl><type><name>SocketAddress</name></type> <name>remoteAddress</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>ClientState</name><argument_list>(<argument><expr><operator>(</operator><name>InetSocketAddress</name><operator>)</operator><name>remoteAddress</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Clone this ClientState object, but use the provided keyspace instead of the
     * keyspace in this ClientState object.
     *
     * @return a new ClientState object if the keyspace argument is non-null. Otherwise do not clone
     *   and return this ClientState object.
     */</comment>
    <function><type><specifier>public</specifier> <name>ClientState</name></type> <name>cloneWithKeyspaceIfSet</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>keyspace</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>this</name></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>ClientState</name></type> <name>clientState</name> <init>= <expr><operator>new</operator> <call><name>ClientState</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>clientState</name><operator>.</operator><name>setKeyspace</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>clientState</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * This clock guarantees that updates for the same ClientState will be ordered
     * in the sequence seen, even if multiple updates happen in the same millisecond.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getTimestamp</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>current</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>last</name> <init>= <expr><call><name><name>lastTimestampMicros</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>tstamp</name> <init>= <expr><ternary><condition><expr><name>last</name> <operator>&gt;=</operator> <name>current</name></expr> ?</condition><then> <expr><name>last</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>current</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>lastTimestampMicros</name><operator>.</operator><name>compareAndSet</name></name><argument_list>(<argument><expr><name>last</name></expr></argument>, <argument><expr><name>tstamp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>tstamp</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></while>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a timestamp suitable for paxos given the timestamp of the last known commit (or in progress update).
     * &lt;p&gt;
     * Paxos ensures that the timestamp it uses for commits respects the serial order of those commits. It does so
     * by having each replica reject any proposal whose timestamp is not strictly greater than the last proposal it
     * accepted. So in practice, which timestamp we use for a given proposal doesn't affect correctness but it does
     * affect the chance of making progress (if we pick a timestamp lower than what has been proposed before, our
     * new proposal will just get rejected).
     * &lt;p&gt;
     * As during the prepared phase replica send us the last propose they accepted, a first option would be to take
     * the maximum of those last accepted proposal timestamp plus 1 (and use a default value, say 0, if it's the
     * first known proposal for the partition). This would most work (giving commits the timestamp 0, 1, 2, ...
     * in the order they are commited) up to 2 important caveats:
     *   1) it would give a very poor experience when Paxos and non-Paxos updates are mixed in the same partition,
     *      since paxos operations wouldn't be using microseconds timestamps. And while you shouldn't theoretically
     *      mix the 2 kind of operations, this would still be pretty unintuitive. And what if you started writing
     *      normal updates and realize later you should switch to Paxos to enforce a property you want?
     *   2) this wouldn't actually be safe due to the expiration set on the Paxos state table.
     * &lt;p&gt;
     * So instead, we initially chose to use the current time in microseconds as for normal update. Which works in
     * general but mean that clock skew creates unavailability periods for Paxos updates (either a node has his clock
     * in the past and he may no be able to get commit accepted until its clock catch up, or a node has his clock in
     * the future and then once one of its commit his accepted, other nodes ones won't be until they catch up). This
     * is ok for small clock skew (few ms) but can be pretty bad for large one.
     * &lt;p&gt;
     * Hence our current solution: we mix both approaches. That is, we compare the timestamp of the last known
     * accepted proposal and the local time. If the local time is greater, we use it, thus keeping paxos timestamps
     * locked to the current time in general (making mixing Paxos and non-Paxos more friendly, and behaving correctly
     * when the paxos state expire (as long as your maximum clock skew is lower than the Paxos state expiration
     * time)). Otherwise (the local time is lower than the last proposal, meaning that this last proposal was done
     * with a clock in the future compared to the local one), we use the last proposal timestamp plus 1, ensuring
     * progress.
     *
     * @param minTimestampToUse the max timestamp of the last proposal accepted by replica having responded
     * to the prepare phase of the paxos round this is for. In practice, that's the minimum timestamp this method
     * may return.
     * @return a timestamp suitable for a Paxos proposal (using the reasoning described above). Note that
     * contrarily to the {@link #getTimestamp()} method, the return value is not guaranteed to be unique (nor
     * monotonic) across calls since it can return it's argument (so if the same argument is passed multiple times,
     * it may be returned multiple times). Note that we still ensure Paxos "ballot" are unique (for different
     * proposal) by (securely) randomizing the non-timestamp part of the UUID.
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getTimestampForPaxos</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>minTimestampToUse</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>current</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">1000</literal></expr></argument>, <argument><expr><name>minTimestampToUse</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>last</name> <init>= <expr><call><name><name>lastTimestampMicros</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>tstamp</name> <init>= <expr><ternary><condition><expr><name>last</name> <operator>&gt;=</operator> <name>current</name></expr> ?</condition><then> <expr><name>last</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>current</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <comment type="line">// Note that if we ended up picking minTimestampMicrosToUse (it was "in the future"), we don't</comment>
            <comment type="line">// want to change the local clock, otherwise a single node in the future could corrupt the clock</comment>
            <comment type="line">// of all nodes and for all inserts (since non-paxos inserts also use lastTimestampMicros).</comment>
            <comment type="line">// See CASSANDRA-11991</comment>
            <if_stmt><if>if <condition>(<expr><name>tstamp</name> <operator>==</operator> <name>minTimestampToUse</name> <operator>||</operator> <call><name><name>lastTimestampMicros</name><operator>.</operator><name>compareAndSet</name></name><argument_list>(<argument><expr><name>last</name></expr></argument>, <argument><expr><name>tstamp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>tstamp</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></while>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getDriverName</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>ofNullable</name></name><argument_list>(<argument><expr><name>driverName</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getDriverVersion</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>ofNullable</name></name><argument_list>(<argument><expr><name>driverVersion</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDriverName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>driverName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>driverName</name></name> <operator>=</operator> <name>driverName</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDriverVersion</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>driverVersion</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>driverVersion</name></name> <operator>=</operator> <name>driverVersion</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>QueryHandler</name></type> <name>getCQLQueryHandler</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>cqlQueryHandler</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>InetSocketAddress</name></type> <name>getRemoteAddress</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>remoteAddress</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>InetAddress</name></type> <name>getClientAddress</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>isInternal</name></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>remoteAddress</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getRawKeyspace</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>keyspace</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getKeyspace</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>keyspace</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>InvalidRequestException</name><argument_list>(<argument><expr><literal type="string">"No keyspace has been specified. USE a keyspace, or explicitly specify keyspace.tablename"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <return>return <expr><name>keyspace</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setKeyspace</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ks</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// Skip keyspace validation for non-authenticated users. Apparently, some client libraries</comment>
        <comment type="line">// call set_keyspace() before calling login(), and we have to handle that.</comment>
        <if_stmt><if>if <condition>(<expr><name>user</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getKeyspaceMetadata</name></name><argument_list>(<argument><expr><name>ks</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>InvalidRequestException</name><argument_list>(<argument><expr><literal type="string">"Keyspace '"</literal> <operator>+</operator> <name>ks</name> <operator>+</operator> <literal type="string">"' does not exist"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>keyspace</name> <operator>=</operator> <name>ks</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Attempts to login the given user.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>login</name><parameter_list>(<parameter><decl><type><name>AuthenticatedUser</name></type> <name>user</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>user</name><operator>.</operator><name>isAnonymous</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>canLogin</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>user</name></name> <operator>=</operator> <name>user</name></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>AuthenticationException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s is not permitted to log in"</literal></expr></argument>, <argument><expr><call><name><name>user</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>canLogin</name><parameter_list>(<parameter><decl><type><name>AuthenticatedUser</name></type> <name>user</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <return>return <expr><call><name><name>user</name><operator>.</operator><name>canLogin</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>RequestExecutionException</name></type> | <type><name>RequestValidationException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>AuthenticationException</name><argument_list>(<argument><expr><literal type="string">"Unable to perform authentication: "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>ensureAllKeyspacesPermission</name><parameter_list>(<parameter><decl><type><name>Permission</name></type> <name>perm</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>isInternal</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>validateLogin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ensurePermission</name><argument_list>(<argument><expr><name>perm</name></expr></argument>, <argument><expr><call><name><name>DataResource</name><operator>.</operator><name>root</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>ensureKeyspacePermission</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>Permission</name></type> <name>perm</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ensurePermission</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><call><name><name>DataResource</name><operator>.</operator><name>keyspace</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>ensureTablePermission</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>Permission</name></type> <name>perm</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ensurePermission</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><call><name><name>DataResource</name><operator>.</operator><name>table</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>ensureTablePermission</name><parameter_list>(<parameter><decl><type><name>TableMetadataRef</name></type> <name>tableRef</name></decl></parameter>, <parameter><decl><type><name>Permission</name></type> <name>perm</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ensureTablePermission</name><argument_list>(<argument><expr><call><name><name>tableRef</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>ensureTablePermission</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>Permission</name></type> <name>perm</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ensurePermission</name><argument_list>(<argument><expr><name><name>table</name><operator>.</operator><name>keyspace</name></name></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><name><name>table</name><operator>.</operator><name>resource</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>ensurePermission</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>Permission</name></type> <name>perm</name></decl></parameter>, <parameter><decl><type><name>DataResource</name></type> <name>resource</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>validateKeyspace</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>isInternal</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>validateLogin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>preventSystemKSSchemaModification</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>perm</name> <operator>==</operator> <name><name>Permission</name><operator>.</operator><name>SELECT</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name><name>READABLE_SYSTEM_RESOURCES</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>PROTECTED_AUTH_RESOURCES</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>perm</name> <operator>==</operator> <name><name>Permission</name><operator>.</operator><name>CREATE</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>perm</name> <operator>==</operator> <name><name>Permission</name><operator>.</operator><name>ALTER</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>perm</name> <operator>==</operator> <name><name>Permission</name><operator>.</operator><name>DROP</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>UnauthorizedException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s schema is protected"</literal></expr></argument>, <argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>ensurePermission</name><argument_list>(<argument><expr><name>perm</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>ensurePermission</name><parameter_list>(<parameter><decl><type><name>Permission</name></type> <name>perm</name></decl></parameter>, <parameter><decl><type><name>IResource</name></type> <name>resource</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getAuthorizer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>requireAuthorization</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <comment type="line">// Access to built in functions is unrestricted</comment>
        <if_stmt><if>if<condition>(<expr><name>resource</name> <operator>instanceof</operator> <name>FunctionResource</name> <operator>&amp;&amp;</operator> <call><name><name>resource</name><operator>.</operator><name>hasParent</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>FunctionResource</name><operator>)</operator><name>resource</name><operator>)</operator><operator>.</operator><call><name>getKeyspace</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SYSTEM_KEYSPACE_NAME</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>ensurePermissionOnResourceChain</name><argument_list>(<argument><expr><name>perm</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="line">// Convenience method called from authorize method of CQLStatement</comment>
    <comment type="line">// Also avoids needlessly creating lots of FunctionResource objects</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>ensurePermission</name><parameter_list>(<parameter><decl><type><name>Permission</name></type> <name>permission</name></decl></parameter>, <parameter><decl><type><name>Function</name></type> <name>function</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// Save creating a FunctionResource is we don't need to</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getAuthorizer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>requireAuthorization</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <comment type="line">// built in functions are always available to all</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>function</name><operator>.</operator><name>isNative</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>ensurePermissionOnResourceChain</name><argument_list>(<argument><expr><name>permission</name></expr></argument>, <argument><expr><call><name><name>FunctionResource</name><operator>.</operator><name>function</name></name><argument_list>(<argument><expr><call><name><name>function</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call><operator>.</operator><name>keyspace</name></expr></argument>,
                                                                              <argument><expr><call><name><name>function</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call><operator>.</operator><name>name</name></expr></argument>,
                                                                              <argument><expr><call><name><name>function</name><operator>.</operator><name>argTypes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>ensurePermissionOnResourceChain</name><parameter_list>(<parameter><decl><type><name>Permission</name></type> <name>perm</name></decl></parameter>, <parameter><decl><type><name>IResource</name></type> <name>resource</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>IResource</name></type> <name>r</name> <range>: <expr><call><name><name>Resources</name><operator>.</operator><name>chain</name></name><argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><call><name>authorize</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return;</return></block_content></block></if></if_stmt></block_content></block></for>

        <throw>throw <expr><operator>new</operator> <call><name>UnauthorizedException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"User %s has no %s permission on %s or any of its parents"</literal></expr></argument>,
                                                      <argument><expr><call><name><name>user</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                      <argument><expr><name>perm</name></expr></argument>,
                                                      <argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>preventSystemKSSchemaModification</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>DataResource</name></type> <name>resource</name></decl></parameter>, <parameter><decl><type><name>Permission</name></type> <name>perm</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// we only care about DDL statements</comment>
        <if_stmt><if>if <condition>(<expr><name>perm</name> <operator>!=</operator> <name><name>Permission</name><operator>.</operator><name>ALTER</name></name> <operator>&amp;&amp;</operator> <name>perm</name> <operator>!=</operator> <name><name>Permission</name><operator>.</operator><name>DROP</name></name> <operator>&amp;&amp;</operator> <name>perm</name> <operator>!=</operator> <name><name>Permission</name><operator>.</operator><name>CREATE</name></name></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <comment type="line">// prevent ALL local system keyspace modification</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>SchemaConstants</name><operator>.</operator><name>isLocalSystemKeyspace</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>UnauthorizedException</name><argument_list>(<argument><expr><name>keyspace</name> <operator>+</operator> <literal type="string">" keyspace is not user-modifiable."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>SchemaConstants</name><operator>.</operator><name>isReplicatedSystemKeyspace</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// allow users with sufficient privileges to alter replication params of replicated system keyspaces</comment>
            <if_stmt><if>if <condition>(<expr><name>perm</name> <operator>==</operator> <name><name>Permission</name><operator>.</operator><name>ALTER</name></name> <operator>&amp;&amp;</operator> <call><name><name>resource</name><operator>.</operator><name>isKeyspaceLevel</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return;</return></block_content></block></if></if_stmt>

            <comment type="line">// prevent all other modifications of replicated system keyspaces</comment>
            <throw>throw <expr><operator>new</operator> <call><name>UnauthorizedException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Cannot %s %s"</literal></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>validateLogin</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>user</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>UnauthorizedException</name><argument_list>(<argument><expr><literal type="string">"You have not logged in"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name><name>user</name><operator>.</operator><name>hasLocalAccess</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>UnauthorizedException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"You do not have access to this datacenter (%s)"</literal></expr></argument>, <argument><expr><call><name><name>Datacenters</name><operator>.</operator><name>thisDatacenter</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>ensureNotAnonymous</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>validateLogin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>user</name><operator>.</operator><name>isAnonymous</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>UnauthorizedException</name><argument_list>(<argument><expr><literal type="string">"You have to be logged in and not anonymous to perform this request"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>ensureIsSuperuser</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getAuthenticator</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>requireAuthentication</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>user</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><call><name><name>user</name><operator>.</operator><name>isSuper</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>UnauthorizedException</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>warnAboutUseWithPreparedStatements</name><parameter_list>(<parameter><decl><type><name>MD5Digest</name></type> <name>statementId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>preparedKeyspace</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>issuedPreparedStatementsUseWarning</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>ClientWarn</name><operator>.</operator><name>instance</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"`USE &lt;keyspace&gt;` with prepared statements is considered to be an anti-pattern due to ambiguity in non-qualified table names. "</literal> <operator>+</operator>
                                                   <literal type="string">"Please consider removing instances of `Session#setKeyspace(&lt;keyspace&gt;)`, `Session#execute(\"USE &lt;keyspace&gt;\")` and `cluster.newSession(&lt;keyspace&gt;)` from your code, and "</literal> <operator>+</operator>
                                                   <literal type="string">"always use fully qualified table names (e.g. &lt;keyspace&gt;.&lt;table&gt;). "</literal> <operator>+</operator>
                                                   <literal type="string">"Keyspace used: %s, statement keyspace: %s, statement id: %s"</literal></expr></argument>, <argument><expr><call><name>getRawKeyspace</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>preparedKeyspace</name></expr></argument>, <argument><expr><name>statementId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>issuedPreparedStatementsUseWarning</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>validateKeyspace</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>keyspace</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>InvalidRequestException</name><argument_list>(<argument><expr><literal type="string">"You have not set a keyspace for this session"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>AuthenticatedUser</name></type> <name>getUser</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>user</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Permission</name></argument>&gt;</argument_list></name></type> <name>authorize</name><parameter_list>(<parameter><decl><type><name>IResource</name></type> <name>resource</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>user</name><operator>.</operator><name>getPermissions</name></name><argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>
