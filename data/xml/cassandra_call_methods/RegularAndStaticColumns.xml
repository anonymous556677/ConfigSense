<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/db/RegularAndStaticColumns.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterators</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>ColumnMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>ObjectSizes</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>btree</name><operator>.</operator><name>BTree</name></name>;</import>

<import>import static <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name><operator>.</operator><name>naturalOrder</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Columns (or a subset of the columns) that a partition contains.
 * This mainly groups both static and regular columns for convenience.
 */</comment>
<class><specifier>public</specifier> class <name>RegularAndStaticColumns</name> <super_list><implements>implements <super><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></super></implements></super_list>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>RegularAndStaticColumns</name></type> <name>NONE</name> <init>= <expr><operator>new</operator> <call><name>RegularAndStaticColumns</name><argument_list>(<argument><expr><name><name>Columns</name><operator>.</operator><name>NONE</name></name></expr></argument>, <argument><expr><name><name>Columns</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>EMPTY_SIZE</name> <init>= <expr><call><name><name>ObjectSizes</name><operator>.</operator><name>measure</name></name><argument_list>(<argument><expr><name>NONE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Columns</name></type> <name>statics</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Columns</name></type> <name>regulars</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>RegularAndStaticColumns</name><parameter_list>(<parameter><decl><type><name>Columns</name></type> <name>statics</name></decl></parameter>, <parameter><decl><type><name>Columns</name></type> <name>regulars</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><name>statics</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>regulars</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>statics</name></name> <operator>=</operator> <name>statics</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>regulars</name></name> <operator>=</operator> <name>regulars</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>RegularAndStaticColumns</name></type> <name>of</name><parameter_list>(<parameter><decl><type><name>ColumnMetadata</name></type> <name>column</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>RegularAndStaticColumns</name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>column</name><operator>.</operator><name>isStatic</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>Columns</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>Columns</name><operator>.</operator><name>NONE</name></name></expr></else></ternary></expr></argument>,
                                           <argument><expr><ternary><condition><expr><call><name><name>column</name><operator>.</operator><name>isStatic</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>Columns</name><operator>.</operator><name>NONE</name></name></expr> </then><else>: <expr><call><name><name>Columns</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>RegularAndStaticColumns</name></type> <name>without</name><parameter_list>(<parameter><decl><type><name>ColumnMetadata</name></type> <name>column</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>RegularAndStaticColumns</name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>column</name><operator>.</operator><name>isStatic</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>statics</name><operator>.</operator><name>without</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>statics</name></expr></else></ternary></expr></argument>,
                                           <argument><expr><ternary><condition><expr><call><name><name>column</name><operator>.</operator><name>isStatic</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>regulars</name></expr> </then><else>: <expr><call><name><name>regulars</name><operator>.</operator><name>without</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>RegularAndStaticColumns</name></type> <name>mergeTo</name><parameter_list>(<parameter><decl><type><name>RegularAndStaticColumns</name></type> <name>that</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>that</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>this</name></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>Columns</name></type> <name>statics</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>statics</name><operator>.</operator><name>mergeTo</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>statics</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Columns</name></type> <name>regulars</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>regulars</name><operator>.</operator><name>mergeTo</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>regulars</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>statics</name> <operator>==</operator> <name><name>this</name><operator>.</operator><name>statics</name></name> <operator>&amp;&amp;</operator> <name>regulars</name> <operator>==</operator> <name><name>this</name><operator>.</operator><name>regulars</name></name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>this</name></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>statics</name> <operator>==</operator> <name><name>that</name><operator>.</operator><name>statics</name></name> <operator>&amp;&amp;</operator> <name>regulars</name> <operator>==</operator> <name><name>that</name><operator>.</operator><name>regulars</name></name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>that</name></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><operator>new</operator> <call><name>RegularAndStaticColumns</name><argument_list>(<argument><expr><name>statics</name></expr></argument>, <argument><expr><name>regulars</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isEmpty</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>statics</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>regulars</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Columns</name></type> <name>columns</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>isStatic</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>isStatic</name></expr> ?</condition><then> <expr><name>statics</name></expr> </then><else>: <expr><name>regulars</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>contains</name><parameter_list>(<parameter><decl><type><name>ColumnMetadata</name></type> <name>column</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><ternary><condition><expr><call><name><name>column</name><operator>.</operator><name>isStatic</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>statics</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>regulars</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>includes</name><parameter_list>(<parameter><decl><type><name>RegularAndStaticColumns</name></type> <name>columns</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>statics</name><operator>.</operator><name>containsAll</name></name><argument_list>(<argument><expr><name><name>columns</name><operator>.</operator><name>statics</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>regulars</name><operator>.</operator><name>containsAll</name></name><argument_list>(<argument><expr><name><name>columns</name><operator>.</operator><name>regulars</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Iterators</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><call><name><name>statics</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>regulars</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>selectOrderIterator</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Iterators</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><call><name><name>statics</name><operator>.</operator><name>selectOrderIterator</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>regulars</name><operator>.</operator><name>selectOrderIterator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** * Returns the total number of static and regular columns. */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>regulars</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>statics</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>unsharedHeapSize</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name>this</name> <operator>==</operator> <name>NONE</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><name>EMPTY_SIZE</name> <operator>+</operator> <call><name><name>regulars</name><operator>.</operator><name>unsharedHeapSize</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>statics</name><operator>.</operator><name>unsharedHeapSize</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>statics</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" | "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>regulars</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>other</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>other</name> <operator>instanceof</operator> <name>RegularAndStaticColumns</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>RegularAndStaticColumns</name></type> <name>that</name> <init>= <expr><operator>(</operator><name>RegularAndStaticColumns</name><operator>)</operator><name>other</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>statics</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>statics</name></name></expr></argument>)</argument_list></call>
            <operator>&amp;&amp;</operator> <call><name><name>this</name><operator>.</operator><name>regulars</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>regulars</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Objects</name><operator>.</operator><name>hash</name></name><argument_list>(<argument><expr><name>statics</name></expr></argument>, <argument><expr><name>regulars</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Builder</name></type> <name>builder</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>Builder</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Builder</name>
    <block>{
        <comment type="line">// Note that we do want to use sorted sets because we want the column definitions to be compared</comment>
        <comment type="line">// through compareTo, not equals. The former basically check it's the same column name, while the latter</comment>
        <comment type="line">// check it's the same object, including the same type.</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name><name>BTree</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></name></type> <name>regularColumns</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name><name>BTree</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></name></type> <name>staticColumns</name></decl>;</decl_stmt>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>ColumnMetadata</name></type> <name>c</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>c</name><operator>.</operator><name>isStatic</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>staticColumns</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>staticColumns</name> <operator>=</operator> <call><name><name>BTree</name><operator>.</operator><name>builder</name></name><argument_list>(<argument><expr><call><name>naturalOrder</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><call><name><name>staticColumns</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <assert>assert <expr><call><name><name>c</name><operator>.</operator><name>isRegular</name></name><argument_list>()</argument_list></call></expr>;</assert>
                <if_stmt><if>if <condition>(<expr><name>regularColumns</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>regularColumns</name> <operator>=</operator> <call><name><name>BTree</name><operator>.</operator><name>builder</name></name><argument_list>(<argument><expr><call><name>naturalOrder</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><call><name><name>regularColumns</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>addAll</name><parameter_list>(<parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>columns</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>ColumnMetadata</name></type> <name>c</name> <range>: <expr><name>columns</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>addAll</name><parameter_list>(<parameter><decl><type><name>RegularAndStaticColumns</name></type> <name>columns</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>regularColumns</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>columns</name><operator>.</operator><name>regulars</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>regularColumns</name> <operator>=</operator> <call><name><name>BTree</name><operator>.</operator><name>builder</name></name><argument_list>(<argument><expr><call><name>naturalOrder</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <for>for <control>(<init><decl><type><name>ColumnMetadata</name></type> <name>c</name> <range>: <expr><name><name>columns</name><operator>.</operator><name>regulars</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>regularColumns</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <if_stmt><if>if <condition>(<expr><name>staticColumns</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>columns</name><operator>.</operator><name>statics</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>staticColumns</name> <operator>=</operator> <call><name><name>BTree</name><operator>.</operator><name>builder</name></name><argument_list>(<argument><expr><call><name>naturalOrder</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <for>for <control>(<init><decl><type><name>ColumnMetadata</name></type> <name>c</name> <range>: <expr><name><name>columns</name><operator>.</operator><name>statics</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>staticColumns</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>RegularAndStaticColumns</name></type> <name>build</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>RegularAndStaticColumns</name><argument_list>(<argument><expr><ternary><condition><expr><name>staticColumns</name>  <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>Columns</name><operator>.</operator><name>NONE</name></name></expr> </then><else>: <expr><call><name><name>Columns</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>staticColumns</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
                                               <argument><expr><ternary><condition><expr><name>regularColumns</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>Columns</name><operator>.</operator><name>NONE</name></name></expr> </then><else>: <expr><call><name><name>Columns</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>regularColumns</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
