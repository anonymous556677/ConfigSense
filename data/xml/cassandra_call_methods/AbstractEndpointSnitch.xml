<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/locator/AbstractEndpointSnitch.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>AbstractEndpointSnitch</name> <super_list><implements>implements <super><name>IEndpointSnitch</name></super></implements></super_list>
<block>{
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>int</name></type> <name>compareEndpoints</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>Replica</name></type> <name>r1</name></decl></parameter>, <parameter><decl><type><name>Replica</name></type> <name>r2</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Sorts the &lt;tt&gt;Collection&lt;/tt&gt; of node addresses by proximity to the given address
     * @param address the address to sort by proximity to
     * @param unsortedAddress the nodes to sort
     * @return a new sorted &lt;tt&gt;List&lt;/tt&gt;
     */</comment>
    <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>C</name> <extends>extends <name><name>ReplicaCollection</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>C</name></extends></argument>&gt;</argument_list></name></extends></parameter>&gt;</parameter_list> <name>C</name></type> <name>sortedByProximity</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>InetAddressAndPort</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>C</name></type> <name>unsortedAddress</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>unsortedAddress</name><operator>.</operator><name>sorted</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>r1</name></decl></parameter>, <parameter><decl><name>r2</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>compareEndpoints</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>gossiperStarting</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <comment type="line">// noop by default</comment>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isWorthMergingForRangeQuery</name><parameter_list>(<parameter><decl><type><name><name>ReplicaCollection</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>merged</name></decl></parameter>, <parameter><decl><type><name><name>ReplicaCollection</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>l1</name></decl></parameter>, <parameter><decl><type><name><name>ReplicaCollection</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>l2</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// Querying remote DC is likely to be an order of magnitude slower than</comment>
        <comment type="line">// querying locally, so 2 queries to local nodes is likely to still be</comment>
        <comment type="line">// faster than 1 query involving remote ones</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>mergedHasRemote</name> <init>= <expr><call><name>hasRemoteNode</name><argument_list>(<argument><expr><name>merged</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name>mergedHasRemote</name></expr>
             ?</condition><then> <expr><call><name>hasRemoteNode</name><argument_list>(<argument><expr><name>l1</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>hasRemoteNode</name><argument_list>(<argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr>
             </then><else>: <expr><literal type="boolean">true</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>hasRemoteNode</name><parameter_list>(<parameter><decl><type><name><name>ReplicaCollection</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>l</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>localDc</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getLocalDataCenter</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>Iterables</name><operator>.</operator><name>any</name></name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>replica</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><operator>!</operator><call><name><name>localDc</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name>getDatacenter</name><argument_list>(<argument><expr><name>replica</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
