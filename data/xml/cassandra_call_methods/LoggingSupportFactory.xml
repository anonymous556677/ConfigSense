<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/utils/logging/LoggingSupportFactory.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>logging</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>FBUtilities</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Dynamically loads and instantiates an appropriate {@link LoggingSupport} implementation according to the used slf4j binding.
 * For production use, this should always be {@link LogbackLoggingSupport}.
 */</comment>
<class><specifier>public</specifier> class <name>LoggingSupportFactory</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>LoggingSupportFactory</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>volatile</specifier> <name>LoggingSupport</name></type> <name>loggingSupport</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>LoggingSupportFactory</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * @return An appropriate {@link LoggingSupport} implementation according to the used slf4j binding.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>LoggingSupport</name></type> <name>getLoggingSupport</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>loggingSupport</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// unfortunately, this is the best way to determine if logback is being used for logger</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>loggerFactoryClass</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getILoggerFactory</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>loggerFactoryClass</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"logback"</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>loggingSupport</name> <operator>=</operator> <call><name><name>FBUtilities</name><operator>.</operator><name>instanceOrConstruct</name></name><argument_list>(<argument><expr><literal type="string">"org.apache.cassandra.utils.logging.LogbackLoggingSupport"</literal></expr></argument>, <argument><expr><literal type="string">"LogbackLoggingSupport"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name>loggingSupport</name> <operator>=</operator> <operator>new</operator> <call><name>NoOpFallbackLoggingSupport</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"You are using Cassandra with an unsupported deployment. The intended logging implementation library logback is not used by slf4j. Detected slf4j logger factory: {}. "</literal>
                            <operator>+</operator> <literal type="string">"You will not be able to dynamically manage log levels via JMX and may have performance or other issues."</literal></expr></argument>, <argument><expr><name>loggerFactoryClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>loggingSupport</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
