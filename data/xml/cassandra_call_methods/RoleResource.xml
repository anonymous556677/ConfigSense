<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/auth/RoleResource.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>auth</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Objects</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Sets</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang3</name><operator>.</operator><name>StringUtils</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>

<comment type="block" format="javadoc">/**
 * IResource implementation representing database roles.
 *
 * The root level "roles" resource represents the collection of all Roles.
 * Individual roles are represented as members of the collection:
 * "roles"                    - the root level collection resource
 * "roles/role1"              - a specific database role
 */</comment>
<class><specifier>public</specifier> class <name>RoleResource</name> <super_list><implements>implements <super><name>IResource</name></super>, <super><name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>RoleResource</name></argument>&gt;</argument_list></name></super></implements></super_list>
<block>{
    <enum>enum <name>Level</name>
    <block>{
        <decl><name>ROOT</name></decl>, <decl><name>ROLE</name></decl>
    }</block></enum>

    <comment type="line">// permissions which may be granted on the root level resource</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Permission</name></argument>&gt;</argument_list></name></type> <name>ROOT_LEVEL_PERMISSIONS</name> <init>= <expr><call><name><name>Sets</name><operator>.</operator><name>immutableEnumSet</name></name><argument_list>(<argument><expr><name><name>Permission</name><operator>.</operator><name>CREATE</name></name></expr></argument>,
                                                                                        <argument><expr><name><name>Permission</name><operator>.</operator><name>ALTER</name></name></expr></argument>,
                                                                                        <argument><expr><name><name>Permission</name><operator>.</operator><name>DROP</name></name></expr></argument>,
                                                                                        <argument><expr><name><name>Permission</name><operator>.</operator><name>AUTHORIZE</name></name></expr></argument>,
                                                                                        <argument><expr><name><name>Permission</name><operator>.</operator><name>DESCRIBE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// permissions which may be granted on role level resources</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Permission</name></argument>&gt;</argument_list></name></type> <name>ROLE_LEVEL_PERMISSIONS</name> <init>= <expr><call><name><name>Sets</name><operator>.</operator><name>immutableEnumSet</name></name><argument_list>(<argument><expr><name><name>Permission</name><operator>.</operator><name>ALTER</name></name></expr></argument>,
                                                                                        <argument><expr><name><name>Permission</name><operator>.</operator><name>DROP</name></name></expr></argument>,
                                                                                        <argument><expr><name><name>Permission</name><operator>.</operator><name>AUTHORIZE</name></name></expr></argument>,
                                                                                        <argument><expr><name><name>Permission</name><operator>.</operator><name>DESCRIBE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ROOT_NAME</name> <init>= <expr><literal type="string">"roles"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>RoleResource</name></type> <name>ROOT_RESOURCE</name> <init>= <expr><operator>new</operator> <call><name>RoleResource</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Level</name></type> <name>level</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>RoleResource</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>Level</name><operator>.</operator><name>ROOT</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>private</specifier> <name>RoleResource</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>Level</name><operator>.</operator><name>ROLE</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * @return the root-level resource.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>RoleResource</name></type> <name>root</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>ROOT_RESOURCE</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a RoleResource representing an individual Role.
     * @param name name of the Role.
     * @return RoleResource instance reresenting the Role.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>RoleResource</name></type> <name>role</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>RoleResource</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Parses a role resource name into a RoleResource instance.
     *
     * @param name Name of the data resource.
     * @return RoleResource instance matching the name.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>RoleResource</name></type> <name>fromName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>parts</name> <init>= <expr><call><name><name>StringUtils</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>parts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>ROOT_NAME</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s is not a valid role resource name"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>parts</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>root</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><call><name>role</name><argument_list>(<argument><expr><name><name>parts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return Printable name of the resource.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>level</name> <operator>==</operator> <name><name>Level</name><operator>.</operator><name>ROOT</name></name></expr> ?</condition><then> <expr><name>ROOT_NAME</name></expr> </then><else>: <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>ROOT_NAME</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return short form name of a role level resource. i.e. not the full "root/name" version returned by getName().
     * Throws IllegalStateException if called on the root-level resource.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getRoleName</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>level</name> <operator>==</operator> <name><name>Level</name><operator>.</operator><name>ROOT</name></name></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s role resource has no role name"</literal></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <return>return <expr><name>name</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return Parent of the resource, if any. Throws IllegalStateException if it's the root-level resource.
     */</comment>
    <function><type><specifier>public</specifier> <name>IResource</name></type> <name>getParent</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>level</name> <operator>==</operator> <name><name>Level</name><operator>.</operator><name>ROLE</name></name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>root</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Root-level resource can't have a parent"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasParent</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>level</name> <operator>!=</operator> <name><name>Level</name><operator>.</operator><name>ROOT</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>exists</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>level</name> <operator>==</operator> <name><name>Level</name><operator>.</operator><name>ROOT</name></name> <operator>||</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getRoleManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isExistingRole</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Permission</name></argument>&gt;</argument_list></name></type> <name>applicablePermissions</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>level</name> <operator>==</operator> <name><name>Level</name><operator>.</operator><name>ROOT</name></name></expr> ?</condition><then> <expr><name>ROOT_LEVEL_PERMISSIONS</name></expr> </then><else>: <expr><name>ROLE_LEVEL_PERMISSIONS</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<parameter><decl><type><name>RoleResource</name></type> <name>o</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>name</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>o</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>level</name> <operator>==</operator> <name><name>Level</name><operator>.</operator><name>ROOT</name></name></expr> ?</condition><then> <expr><literal type="string">"&lt;all roles&gt;"</literal></expr> </then><else>: <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"&lt;role %s&gt;"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>o</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>o</name> <operator>instanceof</operator> <name>RoleResource</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>RoleResource</name></type> <name>rs</name> <init>= <expr><operator>(</operator><name>RoleResource</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name><name>Objects</name><operator>.</operator><name>equal</name></name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name><name>rs</name><operator>.</operator><name>level</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>Objects</name><operator>.</operator><name>equal</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>rs</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Objects</name><operator>.</operator><name>hashCode</name></name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
