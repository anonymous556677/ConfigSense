<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/utils/WindowsTimer.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>sun</name><operator>.</operator><name>jna</name><operator>.</operator><name>LastErrorException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>sun</name><operator>.</operator><name>jna</name><operator>.</operator><name>Native</name></name>;</import>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>WindowsTimer</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>WindowsTimer</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <static>static
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>Native</name><operator>.</operator><name>register</name></name><argument_list>(<argument><expr><literal type="string">"winmm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>NoClassDefFoundError</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"JNA not found. winmm.dll cannot be registered. Performance will be negatively impacted on this node."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Failed to register winmm.dll. Performance will be negatively impacted on this node."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
    </block_content>}</block></static>

    <function_decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>native</specifier> <name>int</name></type> <name>timeBeginPeriod</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>period</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>LastErrorException</name></expr></argument></throws>;</function_decl>
    <function_decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>native</specifier> <name>int</name></type> <name>timeEndPeriod</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>period</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>LastErrorException</name></expr></argument></throws>;</function_decl>

    <constructor><specifier>private</specifier> <name>WindowsTimer</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>startTimerPeriod</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>period</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>period</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
        <assert>assert<expr><operator>(</operator><name>period</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</assert>
        <if_stmt><if>if <condition>(<expr><call><name>timeBeginPeriod</name><argument_list>(<argument><expr><name>period</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Failed to set timer to : {}. Performance will be degraded."</literal></expr></argument>, <argument><expr><name>period</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>endTimerPeriod</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>period</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>period</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
        <assert>assert<expr><operator>(</operator><name>period</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</assert>
        <if_stmt><if>if <condition>(<expr><call><name>timeEndPeriod</name><argument_list>(<argument><expr><name>period</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Failed to end accelerated timer period. System timer will remain set to: {} ms."</literal></expr></argument>, <argument><expr><name>period</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>
