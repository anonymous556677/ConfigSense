<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/net/StartupClusterConnectivityChecker.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ConcurrentHashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>CountDownLatch</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicInteger</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>function</name><operator>.</operator><name>Function</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Collectors</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>HashMultimap</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>SetMultimap</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Uninterruptibles</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>gms</name><operator>.</operator><name>ApplicationState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>gms</name><operator>.</operator><name>EndpointState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>gms</name><operator>.</operator><name>Gossiper</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>gms</name><operator>.</operator><name>IEndpointStateChangeSubscriber</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>gms</name><operator>.</operator><name>VersionedValue</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>InetAddressAndPort</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>FBUtilities</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>Verb</name><operator>.</operator><name>PING_REQ</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>ConnectionType</name><operator>.</operator><name>LARGE_MESSAGES</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>ConnectionType</name><operator>.</operator><name>SMALL_MESSAGES</name></name>;</import>

<class><specifier>public</specifier> class <name>StartupClusterConnectivityChecker</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>StartupClusterConnectivityChecker</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>blockForRemoteDcs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>long</name></type> <name>timeoutNanos</name></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>StartupClusterConnectivityChecker</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>timeoutSecs</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>blockForRemoteDcs</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>timeoutSecs</name> <operator>&gt;</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"setting the block-for-peers timeout (in seconds) to {} might be a bit excessive, but using it nonetheless"</literal></expr></argument>, <argument><expr><name>timeoutSecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>timeoutNanos</name> <init>= <expr><call><name><name>TimeUnit</name><operator>.</operator><name>SECONDS</name><operator>.</operator><name>toNanos</name></name><argument_list>(<argument><expr><name>timeoutSecs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><operator>new</operator> <call><name>StartupClusterConnectivityChecker</name><argument_list>(<argument><expr><name>timeoutNanos</name></expr></argument>, <argument><expr><name>blockForRemoteDcs</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <constructor><annotation>@<name>VisibleForTesting</name></annotation>
    <name>StartupClusterConnectivityChecker</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>timeoutNanos</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>blockForRemoteDcs</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>blockForRemoteDcs</name></name> <operator>=</operator> <name>blockForRemoteDcs</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>timeoutNanos</name></name> <operator>=</operator> <name>timeoutNanos</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * @param peers The currently known peers in the cluster; argument is not modified.
     * @param getDatacenterSource A function for mapping peers to their datacenter.
     * @return true if the requested percentage of peers are marked ALIVE in gossip and have their connections opened;
     * else false.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>peers</name></decl></parameter>, <parameter><decl><type><name><name>Function</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getDatacenterSource</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>peers</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>this</name><operator>.</operator><name>timeoutNanos</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

        <comment type="line">// make a copy of the set, to avoid mucking with the input (in case it's a sensitive collection)</comment>
        <expr_stmt><expr><name>peers</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>peers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>InetAddressAndPort</name></type> <name>localAddress</name> <init>= <expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>localDc</name> <init>= <expr><call><name><name>getDatacenterSource</name><operator>.</operator><name>apply</name></name><argument_list>(<argument><expr><name>localAddress</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>peers</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>localAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>peers</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

        <comment type="line">// make a copy of the datacenter mapping (in case gossip updates happen during this method or some such)</comment>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>peerToDatacenter</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>SetMultimap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>datacenterToPeers</name> <init>= <expr><call><name><name>HashMultimap</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>InetAddressAndPort</name></type> <name>peer</name> <range>: <expr><name>peers</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>datacenter</name> <init>= <expr><call><name><name>getDatacenterSource</name><operator>.</operator><name>apply</name></name><argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>peerToDatacenter</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>peer</name></expr></argument>, <argument><expr><name>datacenter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>datacenterToPeers</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>datacenter</name></expr></argument>, <argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <comment type="line">// In the case where we do not want to block startup on remote datacenters (e.g. because clients only use</comment>
        <comment type="line">// LOCAL_X consistency levels), we remove all other datacenter hosts from the mapping and we only wait</comment>
        <comment type="line">// on the remaining local datacenter.</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>blockForRemoteDcs</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>datacenterToPeers</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>retainAll</name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><name>localDc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Blocking coordination until only a single peer is DOWN in the local datacenter, timeout={}s"</literal></expr></argument>,
                        <argument><expr><call><name><name>TimeUnit</name><operator>.</operator><name>NANOSECONDS</name><operator>.</operator><name>toSeconds</name></name><argument_list>(<argument><expr><name>timeoutNanos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Blocking coordination until only a single peer is DOWN in each datacenter, timeout={}s"</literal></expr></argument>,
                        <argument><expr><call><name><name>TimeUnit</name><operator>.</operator><name>NANOSECONDS</name><operator>.</operator><name>toSeconds</name></name><argument_list>(<argument><expr><name>timeoutNanos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <decl_stmt><decl><type><name>AckMap</name></type> <name>acks</name> <init>= <expr><operator>new</operator> <call><name>AckMap</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>CountDownLatch</name></argument>&gt;</argument_list></name></type> <name>dcToRemainingPeers</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>datacenterToPeers</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>datacenter</name><range>: <expr><call><name><name>datacenterToPeers</name><operator>.</operator><name>keys</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>dcToRemainingPeers</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>datacenter</name></expr></argument>,
                                   <argument><expr><operator>new</operator> <call><name>CountDownLatch</name><argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><call><name><name>datacenterToPeers</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>datacenter</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <decl_stmt><decl><type><name>long</name></type> <name>startNanos</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// set up a listener to react to new nodes becoming alive (in gossip), and account for all the nodes that are already alive</comment>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>alivePeers</name> <init>= <expr><call><name><name>Collections</name><operator>.</operator><name>newSetFromMap</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>ConcurrentHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>AliveListener</name></type> <name>listener</name> <init>= <expr><operator>new</operator> <call><name>AliveListener</name><argument_list>(<argument><expr><name>alivePeers</name></expr></argument>, <argument><expr><name>dcToRemainingPeers</name></expr></argument>, <argument><expr><name>acks</name></expr></argument>, <argument><expr><name>peerToDatacenter</name><operator>::</operator><name>get</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>register</name></name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// send out a ping message to open up the non-gossip connections to all peers. Note that this sends the</comment>
        <comment type="line">// ping messages to _all_ peers, not just the ones we block for in dcToRemainingPeers.</comment>
        <expr_stmt><expr><call><name>sendPingMessages</name><argument_list>(<argument><expr><name>peers</name></expr></argument>, <argument><expr><name>dcToRemainingPeers</name></expr></argument>, <argument><expr><name>acks</name></expr></argument>, <argument><expr><name>peerToDatacenter</name><operator>::</operator><name>get</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>InetAddressAndPort</name></type> <name>peer</name> <range>: <expr><name>peers</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>isAlive</name></name><argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>alivePeers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>acks</name><operator>.</operator><name>incrementAndCheck</name></name><argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>datacenter</name> <init>= <expr><call><name><name>peerToDatacenter</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <comment type="line">// We have to check because we might only have the local DC in the map</comment>
                <if_stmt><if>if <condition>(<expr><call><name><name>dcToRemainingPeers</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>datacenter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>dcToRemainingPeers</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>datacenter</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>countDown</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <decl_stmt><decl><type><name>boolean</name></type> <name>succeeded</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>CountDownLatch</name></type> <name>countDownLatch</name> <range>: <expr><call><name><name>dcToRemainingPeers</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>remainingNanos</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>timeoutNanos</name> <operator>-</operator> <operator>(</operator><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>startNanos</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">//noinspection UnstableApiUsage</comment>
            <expr_stmt><expr><name>succeeded</name> <operator>&amp;=</operator> <call><name><name>Uninterruptibles</name><operator>.</operator><name>awaitUninterruptibly</name></name><argument_list>(<argument><expr><name>countDownLatch</name></expr></argument>, <argument><expr><name>remainingNanos</name></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>NANOSECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>unregister</name></name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>numDown</name> <init>= <expr><call><name><name>dcToRemainingPeers</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call>
                                                      <operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toMap</name></name><argument_list>(<argument><expr><name><name>Map</name><operator>.</operator><name>Entry</name></name><operator>::</operator><name>getKey</name></expr></argument>,
                                                                                <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>e</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>e</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCount</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>succeeded</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Ensured sufficient healthy connections with {} after {} milliseconds"</literal></expr></argument>,
                        <argument><expr><call><name><name>numDown</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>TimeUnit</name><operator>.</operator><name>NANOSECONDS</name><operator>.</operator><name>toMillis</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>startNanos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Timed out after {} milliseconds, was waiting for remaining peers to connect: {}"</literal></expr></argument>,
                        <argument><expr><call><name><name>TimeUnit</name><operator>.</operator><name>NANOSECONDS</name><operator>.</operator><name>toMillis</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>startNanos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>numDown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <return>return <expr><name>succeeded</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sends a "connection warmup" message to each peer in the collection, on every {@link ConnectionType}
     * used for internode messaging (that is not gossip).
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>sendPingMessages</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>peers</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>CountDownLatch</name></argument>&gt;</argument_list></name></type> <name>dcToRemainingPeers</name></decl></parameter>,
                                  <parameter><decl><type><name>AckMap</name></type> <name>acks</name></decl></parameter>, <parameter><decl><type><name><name>Function</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getDatacenter</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>RequestCallback</name></type> <name>responseHandler</name> <init>= <expr><lambda><parameter_list type="pseudo"><parameter><decl><name>msg</name></decl></parameter></parameter_list> -&gt; <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>acks</name><operator>.</operator><name>incrementAndCheck</name></name><argument_list>(<argument><expr><call><name><name>msg</name><operator>.</operator><name>from</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>datacenter</name> <init>= <expr><call><name><name>getDatacenter</name><operator>.</operator><name>apply</name></name><argument_list>(<argument><expr><call><name><name>msg</name><operator>.</operator><name>from</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <comment type="line">// We have to check because we might only have the local DC in the map</comment>
                <if_stmt><if>if <condition>(<expr><call><name><name>dcToRemainingPeers</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>datacenter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>dcToRemainingPeers</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>datacenter</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>countDown</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></lambda></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>PingRequest</name></argument>&gt;</argument_list></name></type> <name>small</name> <init>= <expr><call><name><name>Message</name><operator>.</operator><name>out</name></name><argument_list>(<argument><expr><name>PING_REQ</name></expr></argument>, <argument><expr><name><name>PingRequest</name><operator>.</operator><name>forSmall</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>PingRequest</name></argument>&gt;</argument_list></name></type> <name>large</name> <init>= <expr><call><name><name>Message</name><operator>.</operator><name>out</name></name><argument_list>(<argument><expr><name>PING_REQ</name></expr></argument>, <argument><expr><name><name>PingRequest</name><operator>.</operator><name>forLarge</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>InetAddressAndPort</name></type> <name>peer</name> <range>: <expr><name>peers</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>MessagingService</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>sendWithCallback</name><argument_list>(<argument><expr><name>small</name></expr></argument>, <argument><expr><name>peer</name></expr></argument>, <argument><expr><name>responseHandler</name></expr></argument>, <argument><expr><name>SMALL_MESSAGES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>MessagingService</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>sendWithCallback</name><argument_list>(<argument><expr><name>large</name></expr></argument>, <argument><expr><name>peer</name></expr></argument>, <argument><expr><name>responseHandler</name></expr></argument>, <argument><expr><name>LARGE_MESSAGES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * A trivial implementation of {@link IEndpointStateChangeSubscriber} that really only cares about
     * {@link #onAlive(InetAddressAndPort, EndpointState)} invocations.
     */</comment>
    <class><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>AliveListener</name> <super_list><implements>implements <super><name>IEndpointStateChangeSubscriber</name></super></implements></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>CountDownLatch</name></argument>&gt;</argument_list></name></type> <name>dcToRemainingPeers</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>livePeers</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Function</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getDatacenter</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>AckMap</name></type> <name>acks</name></decl>;</decl_stmt>

        <constructor><name>AliveListener</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>livePeers</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>CountDownLatch</name></argument>&gt;</argument_list></name></type> <name>dcToRemainingPeers</name></decl></parameter>,
                      <parameter><decl><type><name>AckMap</name></type> <name>acks</name></decl></parameter>, <parameter><decl><type><name><name>Function</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getDatacenter</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>livePeers</name></name> <operator>=</operator> <name>livePeers</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dcToRemainingPeers</name></name> <operator>=</operator> <name>dcToRemainingPeers</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>acks</name></name> <operator>=</operator> <name>acks</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>getDatacenter</name></name> <operator>=</operator> <name>getDatacenter</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>onAlive</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>, <parameter><decl><type><name>EndpointState</name></type> <name>state</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>livePeers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>acks</name><operator>.</operator><name>incrementAndCheck</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>datacenter</name> <init>= <expr><call><name><name>getDatacenter</name><operator>.</operator><name>apply</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>dcToRemainingPeers</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>datacenter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>dcToRemainingPeers</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>datacenter</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>countDown</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>AckMap</name>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>threshold</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>AtomicInteger</name></argument>&gt;</argument_list></name></type> <name>acks</name></decl>;</decl_stmt>

        <constructor><name>AckMap</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>threshold</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>threshold</name></name> <operator>=</operator> <name>threshold</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>acks</name> <operator>=</operator> <operator>new</operator> <call><name><name>ConcurrentHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><name>boolean</name></type> <name>incrementAndCheck</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>address</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>acks</name><operator>.</operator><name>computeIfAbsent</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>addr</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><operator>new</operator> <call><name>AtomicInteger</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>incrementAndGet</name><argument_list>()</argument_list></call> <operator>==</operator> <name>threshold</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
