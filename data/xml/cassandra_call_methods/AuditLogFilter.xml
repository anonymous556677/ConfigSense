<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/audit/AuditLogFilter.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>audit</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableSet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang3</name><operator>.</operator><name>StringUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<class><specifier>public</specifier> class <name>AuditLogFilter</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>AuditLogFilter</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name><name>ImmutableSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>EMPTY_FILTERS</name> <init>= <expr><call><name><name>ImmutableSet</name><operator>.</operator><name>of</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ImmutableSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>excludedKeyspaces</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ImmutableSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>includedKeyspaces</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ImmutableSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>excludedCategories</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ImmutableSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>includedCategories</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ImmutableSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>includedUsers</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ImmutableSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>excludedUsers</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>AuditLogFilter</name><parameter_list>(<parameter><decl><type><name><name>ImmutableSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>excludedKeyspaces</name></decl></parameter>, <parameter><decl><type><name><name>ImmutableSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>includedKeyspaces</name></decl></parameter>, <parameter><decl><type><name><name>ImmutableSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>excludedCategories</name></decl></parameter>, <parameter><decl><type><name><name>ImmutableSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>includedCategories</name></decl></parameter>, <parameter><decl><type><name><name>ImmutableSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>excludedUsers</name></decl></parameter>, <parameter><decl><type><name><name>ImmutableSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>includedUsers</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>excludedKeyspaces</name></name> <operator>=</operator> <name>excludedKeyspaces</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>includedKeyspaces</name></name> <operator>=</operator> <name>includedKeyspaces</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>excludedCategories</name></name> <operator>=</operator> <name>excludedCategories</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>includedCategories</name></name> <operator>=</operator> <name>includedCategories</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>includedUsers</name></name> <operator>=</operator> <name>includedUsers</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>excludedUsers</name></name> <operator>=</operator> <name>excludedUsers</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * (Re-)Loads filters from config. Called during startup as well as JMX invocations.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>AuditLogFilter</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>AuditLogOptions</name></type> <name>auditLogOptions</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Loading AuditLog filters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>IncludeExcludeHolder</name></type> <name>keyspaces</name> <init>= <expr><call><name>loadInputSets</name><argument_list>(<argument><expr><name><name>auditLogOptions</name><operator>.</operator><name>included_keyspaces</name></name></expr></argument>, <argument><expr><name><name>auditLogOptions</name><operator>.</operator><name>excluded_keyspaces</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>IncludeExcludeHolder</name></type> <name>categories</name> <init>= <expr><call><name>loadInputSets</name><argument_list>(<argument><expr><name><name>auditLogOptions</name><operator>.</operator><name>included_categories</name></name></expr></argument>, <argument><expr><name><name>auditLogOptions</name><operator>.</operator><name>excluded_categories</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>IncludeExcludeHolder</name></type> <name>users</name> <init>= <expr><call><name>loadInputSets</name><argument_list>(<argument><expr><name><name>auditLogOptions</name><operator>.</operator><name>included_users</name></name></expr></argument>, <argument><expr><name><name>auditLogOptions</name><operator>.</operator><name>excluded_users</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><operator>new</operator> <call><name>AuditLogFilter</name><argument_list>(<argument><expr><name><name>keyspaces</name><operator>.</operator><name>excludedSet</name></name></expr></argument>, <argument><expr><name><name>keyspaces</name><operator>.</operator><name>includedSet</name></name></expr></argument>,
                                  <argument><expr><name><name>categories</name><operator>.</operator><name>excludedSet</name></name></expr></argument>, <argument><expr><name><name>categories</name><operator>.</operator><name>includedSet</name></name></expr></argument>,
                                  <argument><expr><name><name>users</name><operator>.</operator><name>excludedSet</name></name></expr></argument>, <argument><expr><name><name>users</name><operator>.</operator><name>includedSet</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Constructs mutually exclusive sets of included and excluded data. When there is a conflict,
     * the entry is put into the excluded set (and removed fron the included).
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>IncludeExcludeHolder</name></type> <name>loadInputSets</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>includedInput</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>excludedInput</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>ImmutableSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>excludedSet</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>StringUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>excludedInput</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>excludedSet</name> <operator>=</operator> <name>EMPTY_FILTERS</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>excludes</name> <init>= <expr><call><name><name>excludedInput</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>ImmutableSet</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>builder</name> <init>= <expr><call><name><name>ImmutableSet</name><operator>.</operator><name>builderWithExpectedSize</name></name><argument_list>(<argument><expr><name><name>excludes</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>exclude</name> <range>: <expr><name>excludes</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>exclude</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>exclude</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name>excludedSet</name> <operator>=</operator> <call><name><name>builder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name><name>ImmutableSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>includedSet</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>StringUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>includedInput</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>includedSet</name> <operator>=</operator> <name>EMPTY_FILTERS</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>includes</name> <init>= <expr><call><name><name>includedInput</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>ImmutableSet</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>builder</name> <init>= <expr><call><name><name>ImmutableSet</name><operator>.</operator><name>builderWithExpectedSize</name></name><argument_list>(<argument><expr><name><name>includes</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>include</name> <range>: <expr><name>includes</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <comment type="line">//Ensure both included and excluded sets are mutually exclusive</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>include</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>excludedSet</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>include</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>include</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name>includedSet</name> <operator>=</operator> <call><name><name>builder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <return>return <expr><operator>new</operator> <call><name>IncludeExcludeHolder</name><argument_list>(<argument><expr><name>includedSet</name></expr></argument>, <argument><expr><name>excludedSet</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Simple struct to hold inclusion/exclusion sets.
     */</comment>
    <class><specifier>private</specifier> <specifier>static</specifier> class <name>IncludeExcludeHolder</name>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ImmutableSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>includedSet</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ImmutableSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>excludedSet</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>IncludeExcludeHolder</name><parameter_list>(<parameter><decl><type><name><name>ImmutableSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>includedSet</name></decl></parameter>, <parameter><decl><type><name><name>ImmutableSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>excludedSet</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>includedSet</name></name> <operator>=</operator> <name>includedSet</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>excludedSet</name></name> <operator>=</operator> <name>excludedSet</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Checks whether a give AuditLog Entry is filtered or not
     *
     * @param auditLogEntry AuditLogEntry to verify
     * @return true if it is filtered, false otherwise
     */</comment>
    <function><type><name>boolean</name></type> <name>isFiltered</name><parameter_list>(<parameter><decl><type><name>AuditLogEntry</name></type> <name>auditLogEntry</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>isFiltered</name><argument_list>(<argument><expr><call><name><name>auditLogEntry</name><operator>.</operator><name>getKeyspace</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>includedKeyspaces</name></expr></argument>, <argument><expr><name>excludedKeyspaces</name></expr></argument>)</argument_list></call>
               <operator>||</operator> <call><name>isFiltered</name><argument_list>(<argument><expr><call><name><name>auditLogEntry</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCategory</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>includedCategories</name></expr></argument>, <argument><expr><name>excludedCategories</name></expr></argument>)</argument_list></call>
               <operator>||</operator> <call><name>isFiltered</name><argument_list>(<argument><expr><call><name><name>auditLogEntry</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>includedUsers</name></expr></argument>, <argument><expr><name>excludedUsers</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Checks whether given input is being filtered or not.
     * If excludeSet does not contain any items, by default nothing is excluded (unless there are
     * entries in the includeSet).
     * If includeSet does not contain any items, by default everything is included
     * If an input is part of both includeSet and excludeSet, excludeSet takes the priority over includeSet
     *
     * @param input      Input to be checked for filtereing based on includeSet and excludeSet
     * @param includeSet Include filtering set
     * @param excludeSet Exclude filtering set
     * @return true if the input is filtered, false when the input is not filtered
     */</comment>
    <function><type><specifier>static</specifier> <name>boolean</name></type> <name>isFiltered</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>input</name></decl></parameter>, <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>includeSet</name></decl></parameter>, <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>excludeSet</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>excludeSet</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>excludeSet</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><operator>!</operator><operator>(</operator><call><name><name>includeSet</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>includeSet</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
