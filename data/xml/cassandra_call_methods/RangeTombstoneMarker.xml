<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/db/rows/RangeTombstoneMarker.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>rows</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>memory</name><operator>.</operator><name>ByteBufferCloner</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A marker for a range tombstone bound.
 * &lt;p&gt;
 * There is 2 types of markers: bounds (see {@link RangeTombstoneBoundMarker}) and boundaries (see {@link RangeTombstoneBoundaryMarker}).
 */</comment>
<interface><specifier>public</specifier> interface <name>RangeTombstoneMarker</name> <super_list><extends>extends <super><name>Unfiltered</name></super></extends></super_list>
<block>{
    <function_decl><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>ClusteringBoundOrBoundary</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>clustering</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <name>boolean</name></type> <name>isBoundary</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <name>boolean</name></type> <name>isOpen</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>reversed</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><specifier>public</specifier> <name>boolean</name></type> <name>isClose</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>reversed</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <name>DeletionTime</name></type> <name>openDeletionTime</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>reversed</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><specifier>public</specifier> <name>DeletionTime</name></type> <name>closeDeletionTime</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>reversed</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><specifier>public</specifier> <name>boolean</name></type> <name>openIsInclusive</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>reversed</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><specifier>public</specifier> <name>boolean</name></type> <name>closeIsInclusive</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>reversed</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <name><name>ClusteringBound</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>openBound</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>reversed</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><specifier>public</specifier> <name><name>ClusteringBound</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>closeBound</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>reversed</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <name>RangeTombstoneMarker</name></type> <name>clone</name><parameter_list>(<parameter><decl><type><name>ByteBufferCloner</name></type> <name>cloner</name></decl></parameter>)</parameter_list>;</function_decl>

    <function><type><specifier>default</specifier> <specifier>public</specifier> <name>boolean</name></type> <name>isEmpty</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <comment type="line">// There is no such thing as an empty marker</comment>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function_decl><type><specifier>public</specifier> <name>RangeTombstoneMarker</name></type> <name>withNewOpeningDeletionTime</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>reversed</name></decl></parameter>, <parameter><decl><type><name>DeletionTime</name></type> <name>newDeletionTime</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Utility class to help merging range tombstone markers coming from multiple inputs (UnfilteredRowIterators).
     * &lt;p&gt;
     * The assumption that each individual input must validate and that we must preserve in the output is that every
     * open marker has a corresponding close marker with the exact same deletion info, and that there is no other range
     * tombstone marker between those open and close marker (of course, they could be rows in between). In other word,
     * for any {@code UnfilteredRowIterator}, you only ever have to remenber the last open marker (if any) to have the
     * full picture of what is deleted by range tombstones at any given point of iterating that iterator.
     * &lt;p&gt;
     * Note that this class can merge both forward and reverse iterators. To deal with reverse, we just reverse how we
     * deal with open and close markers (in forward order, we'll get open-close, open-close, ..., while in reverse we'll
     * get close-open, close-open, ...).
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Merger</name>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>DeletionTime</name></type> <name>partitionDeletion</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>reversed</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <name><name>ClusteringBoundOrBoundary</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>bound</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>RangeTombstoneMarker</name><index>[]</index></name></type> <name>markers</name></decl>;</decl_stmt>

        <comment type="line">// For each iterator, what is the currently open marker deletion time (or null if there is no open marker on that iterator)</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>DeletionTime</name><index>[]</index></name></type> <name>openMarkers</name></decl>;</decl_stmt>
        <comment type="line">// The index in openMarkers of the "biggest" marker, the one with the biggest deletion time. Is &lt; 0 iff there is no open</comment>
        <comment type="line">// marker on any iterator.</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>biggestOpenMarker</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>Merger</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>DeletionTime</name></type> <name>partitionDeletion</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>reversed</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>partitionDeletion</name></name> <operator>=</operator> <name>partitionDeletion</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>reversed</name></name> <operator>=</operator> <name>reversed</name></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>markers</name></name> <operator>=</operator> <operator>new</operator> <name><name>RangeTombstoneMarker</name><index>[<expr><name>size</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>openMarkers</name></name> <operator>=</operator> <operator>new</operator> <name><name>DeletionTime</name><index>[<expr><name>size</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>fill</name></name><argument_list>(<argument><expr><name>markers</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>RangeTombstoneMarker</name></type> <name>marker</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name>bound</name> <operator>=</operator> <call><name><name>marker</name><operator>.</operator><name>clustering</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>markers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>marker</name></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>RangeTombstoneMarker</name></type> <name>merge</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <comment type="block">/*
             * Merging of range tombstones works this way:
             *   1) We remember what is the currently open marker in the merged stream
             *   2) We update our internal states of what range is opened on the input streams based on the new markers to merge
             *   3) We compute what should be the state in the merge stream after 2)
             *   4) We return what marker should be issued on the merged stream based on the difference between the state from 1) and 3)
             */</comment>

            <decl_stmt><decl><type><name>DeletionTime</name></type> <name>previousDeletionTimeInMerged</name> <init>= <expr><call><name>currentOpenDeletionTimeInMerged</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>updateOpenMarkers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>DeletionTime</name></type> <name>newDeletionTimeInMerged</name> <init>= <expr><call><name>currentOpenDeletionTimeInMerged</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>previousDeletionTimeInMerged</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>newDeletionTimeInMerged</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>boolean</name></type> <name>isBeforeClustering</name> <init>= <expr><call><name><name>bound</name><operator>.</operator><name>kind</name></name><argument_list>()</argument_list></call><operator>.</operator><name>comparedToClustering</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>reversed</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>isBeforeClustering</name> <operator>=</operator> <operator>!</operator><name>isBeforeClustering</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>RangeTombstoneMarker</name></type> <name>merged</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>previousDeletionTimeInMerged</name><operator>.</operator><name>isLive</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>merged</name> <operator>=</operator> <ternary><condition><expr><name>isBeforeClustering</name></expr>
                       ?</condition><then> <expr><call><name><name>RangeTombstoneBoundMarker</name><operator>.</operator><name>inclusiveOpen</name></name><argument_list>(<argument><expr><name>reversed</name></expr></argument>, <argument><expr><name>bound</name></expr></argument>, <argument><expr><name>newDeletionTimeInMerged</name></expr></argument>)</argument_list></call></expr>
                       </then><else>: <expr><call><name><name>RangeTombstoneBoundMarker</name><operator>.</operator><name>exclusiveOpen</name></name><argument_list>(<argument><expr><name>reversed</name></expr></argument>, <argument><expr><name>bound</name></expr></argument>, <argument><expr><name>newDeletionTimeInMerged</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><call><name><name>newDeletionTimeInMerged</name><operator>.</operator><name>isLive</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>merged</name> <operator>=</operator> <ternary><condition><expr><name>isBeforeClustering</name></expr>
                       ?</condition><then> <expr><call><name><name>RangeTombstoneBoundMarker</name><operator>.</operator><name>exclusiveClose</name></name><argument_list>(<argument><expr><name>reversed</name></expr></argument>, <argument><expr><name>bound</name></expr></argument>, <argument><expr><name>previousDeletionTimeInMerged</name></expr></argument>)</argument_list></call></expr>
                       </then><else>: <expr><call><name><name>RangeTombstoneBoundMarker</name><operator>.</operator><name>inclusiveClose</name></name><argument_list>(<argument><expr><name>reversed</name></expr></argument>, <argument><expr><name>bound</name></expr></argument>, <argument><expr><name>previousDeletionTimeInMerged</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name>merged</name> <operator>=</operator> <ternary><condition><expr><name>isBeforeClustering</name></expr>
                       ?</condition><then> <expr><call><name><name>RangeTombstoneBoundaryMarker</name><operator>.</operator><name>exclusiveCloseInclusiveOpen</name></name><argument_list>(<argument><expr><name>reversed</name></expr></argument>, <argument><expr><name>bound</name></expr></argument>, <argument><expr><name>previousDeletionTimeInMerged</name></expr></argument>, <argument><expr><name>newDeletionTimeInMerged</name></expr></argument>)</argument_list></call></expr>
                       </then><else>: <expr><call><name><name>RangeTombstoneBoundaryMarker</name><operator>.</operator><name>inclusiveCloseExclusiveOpen</name></name><argument_list>(<argument><expr><name>reversed</name></expr></argument>, <argument><expr><name>bound</name></expr></argument>, <argument><expr><name>previousDeletionTimeInMerged</name></expr></argument>, <argument><expr><name>newDeletionTimeInMerged</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <return>return <expr><name>merged</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name>RangeTombstoneMarker</name><index>[]</index></name></type> <name>mergedMarkers</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>markers</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>DeletionTime</name></type> <name>currentOpenDeletionTimeInMerged</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>biggestOpenMarker</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name><name>DeletionTime</name><operator>.</operator><name>LIVE</name></name></expr>;</return></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>DeletionTime</name></type> <name>biggestDeletionTime</name> <init>= <expr><name><name>openMarkers</name><index>[<expr><name>biggestOpenMarker</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <comment type="line">// it's only open in the merged iterator if it doesn't supersedes the partition level deletion</comment>
            <return>return <expr><ternary><condition><expr><operator>!</operator><call><name><name>biggestDeletionTime</name><operator>.</operator><name>supersedes</name></name><argument_list>(<argument><expr><name>partitionDeletion</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>DeletionTime</name><operator>.</operator><name>LIVE</name></name></expr> </then><else>: <expr><name>biggestDeletionTime</name></expr></else></ternary></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>updateOpenMarkers</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>markers</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>RangeTombstoneMarker</name></type> <name>marker</name> <init>= <expr><name><name>markers</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>marker</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                    <continue>continue;</continue></block_content></block></if></if_stmt>

                <comment type="line">// Note that we can have boundaries that are both open and close, but in that case all we care about</comment>
                <comment type="line">// is what it the open deletion after the marker, so we favor the opening part in this case.</comment>
                <if_stmt><if>if <condition>(<expr><call><name><name>marker</name><operator>.</operator><name>isOpen</name></name><argument_list>(<argument><expr><name>reversed</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name><name>openMarkers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>marker</name><operator>.</operator><name>openDeletionTime</name></name><argument_list>(<argument><expr><name>reversed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><name><name>openMarkers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block></for>

            <comment type="line">// Recompute what is now the biggest open marker</comment>
            <expr_stmt><expr><name>biggestOpenMarker</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>openMarkers</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>openMarkers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>biggestOpenMarker</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>openMarkers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>supersedes</name><argument_list>(<argument><expr><name><name>openMarkers</name><index>[<expr><name>biggestOpenMarker</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>biggestOpenMarker</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>DeletionTime</name></type> <name>activeDeletion</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>DeletionTime</name></type> <name>openMarker</name> <init>= <expr><call><name>currentOpenDeletionTimeInMerged</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// We only have an open marker in the merged stream if it's not shadowed by the partition deletion (which can be LIVE itself), so</comment>
            <comment type="line">// if have an open marker, we know it's the "active" deletion for the merged stream.</comment>
            <return>return <expr><ternary><condition><expr><call><name><name>openMarker</name><operator>.</operator><name>isLive</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>partitionDeletion</name></expr> </then><else>: <expr><name>openMarker</name></expr></else></ternary></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></interface>
</unit>
