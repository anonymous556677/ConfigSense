<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/service/reads/ReadCallback.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>reads</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ConcurrentHashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicIntegerFieldUpdater</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>ReplicaPlan</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>PartitionRangeReadCommand</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>ReadCommand</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>ReadResponse</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>ReadFailureException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>ReadTimeoutException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>RequestFailureReason</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>Endpoints</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>InetAddressAndPort</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>RequestCallback</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>Message</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>Verb</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>tracing</name><operator>.</operator><name>Tracing</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>SimpleCondition</name></name>;</import>

<import>import static <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name>;</import>

<class><specifier>public</specifier> class <name><name>ReadCallback</name><parameter_list>&lt;<parameter><name>E</name> <extends>extends <name><name>Endpoints</name><parameter_list>&lt;<parameter><name>E</name></parameter>&gt;</parameter_list></name></extends></parameter>, <parameter><name>P</name> <extends>extends <name>ReplicaPlan</name><operator>.</operator><name><name>ForRead</name><parameter_list>&lt;<parameter><name>E</name></parameter>&gt;</parameter_list></name></extends></parameter>&gt;</parameter_list></name> <super_list><implements>implements <super><name><name>RequestCallback</name><argument_list type="generic">&lt;<argument><name>ReadResponse</name></argument>&gt;</argument_list></name></super></implements></super_list>
<block>{
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>( <argument><expr><name><name>ReadCallback</name><operator>.</operator><name>class</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>ResponseResolver</name><argument_list type="generic">&lt;<argument><name>E</name></argument>, <argument><name>P</name></argument>&gt;</argument_list></name></type> <name>resolver</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>SimpleCondition</name></type> <name>condition</name> <init>= <expr><operator>new</operator> <call><name>SimpleCondition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>long</name></type> <name>queryStartNanoTime</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>blockFor</name></decl>;</decl_stmt> <comment type="line">// TODO: move to replica plan as well?</comment>
    <comment type="line">// this uses a plain reference, but is initialised before handoff to any other threads; the later updates</comment>
    <comment type="line">// may not be visible to the threads immediately, but ReplicaPlan only contains final fields, so they will never see an uninitialised object</comment>
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>ReplicaPlan</name><operator>.</operator><name><name>Shared</name><argument_list type="generic">&lt;<argument><name>E</name></argument>, <argument><name>P</name></argument>&gt;</argument_list></name></name></type> <name>replicaPlan</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ReadCommand</name></type> <name>command</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>AtomicIntegerFieldUpdater</name><argument_list type="generic">&lt;<argument><name>ReadCallback</name></argument>&gt;</argument_list></name></type> <name>failuresUpdater</name>
            <init>= <expr><call><name><name>AtomicIntegerFieldUpdater</name><operator>.</operator><name>newUpdater</name></name><argument_list>(<argument><expr><name><name>ReadCallback</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><literal type="string">"failures"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>failures</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name>RequestFailureReason</name></argument>&gt;</argument_list></name></type> <name>failureReasonByEndpoint</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ReadCallback</name><parameter_list>(<parameter><decl><type><name><name>ResponseResolver</name><argument_list type="generic">&lt;<argument><name>E</name></argument>, <argument><name>P</name></argument>&gt;</argument_list></name></type> <name>resolver</name></decl></parameter>, <parameter><decl><type><name>ReadCommand</name></type> <name>command</name></decl></parameter>, <parameter><decl><type><name><name>ReplicaPlan</name><operator>.</operator><name><name>Shared</name><argument_list type="generic">&lt;<argument><name>E</name></argument>, <argument><name>P</name></argument>&gt;</argument_list></name></name></type> <name>replicaPlan</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>queryStartNanoTime</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>command</name></name> <operator>=</operator> <name>command</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>resolver</name></name> <operator>=</operator> <name>resolver</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>queryStartNanoTime</name></name> <operator>=</operator> <name>queryStartNanoTime</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>replicaPlan</name></name> <operator>=</operator> <name>replicaPlan</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>blockFor</name></name> <operator>=</operator> <call><name><name>replicaPlan</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>blockFor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>failureReasonByEndpoint</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ConcurrentHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// we don't support read repair (or rapid read protection) for range scans yet (CASSANDRA-6897)</comment>
        <assert>assert <expr><operator>!</operator><operator>(</operator><name>command</name> <operator>instanceof</operator> <name>PartitionRangeReadCommand</name><operator>)</operator> <operator>||</operator> <name>blockFor</name> <operator>&gt;=</operator> <call><name>replicaPlan</name><argument_list>()</argument_list></call><operator>.</operator><call><name>contacts</name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</assert>

        <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Blockfor is {}; setting up requests to {}"</literal></expr></argument>, <argument><expr><name>blockFor</name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>replicaPlan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>protected</specifier> <name>P</name></type> <name>replicaPlan</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>replicaPlan</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>await</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>timePastStart</name></decl></parameter>, <parameter><decl><type><name>TimeUnit</name></type> <name>unit</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>time</name> <init>= <expr><call><name><name>unit</name><operator>.</operator><name>toNanos</name></name><argument_list>(<argument><expr><name>timePastStart</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>queryStartNanoTime</name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{<block_content>
            <return>return <expr><call><name><name>condition</name><operator>.</operator><name>await</name></name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>NANOSECONDS</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>ex</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>awaitResults</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ReadFailureException</name></expr></argument>, <argument><expr><name>ReadTimeoutException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>signaled</name> <init>= <expr><call><name>await</name><argument_list>(<argument><expr><call><name><name>command</name><operator>.</operator><name>getTimeout</name></name><argument_list>(<argument><expr><name>MILLISECONDS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="block" format="javadoc">/**
         * Here we are checking isDataPresent in addition to the responses size because there is a possibility
         * that an asynchronous speculative execution request could be returning after a local failure already
         * signaled. Responses may have been set while the data reference is not yet.
         * See {@link DigestResolver#preprocess(Message)}
         * CASSANDRA-16097
         */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>received</name> <init>= <expr><call><name><name>resolver</name><operator>.</operator><name>responses</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>failed</name> <init>= <expr><name>failures</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>blockFor</name> <operator>&gt;</operator> <name>received</name> <operator>||</operator> <operator>!</operator><call><name><name>resolver</name><operator>.</operator><name>isDataPresent</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>signaled</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>failed</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>Tracing</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>gotData</name> <init>= <expr><ternary><condition><expr><name>received</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><call><name><name>resolver</name><operator>.</operator><name>isDataPresent</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">" (including data)"</literal></expr> </then><else>: <expr><literal type="string">" (only digests)"</literal></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"{}; received {} of {} responses{}"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>failed</name></expr> ?</condition><then> <expr><literal type="string">"Failed"</literal></expr> </then><else>: <expr><literal type="string">"Timed out"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>received</name></expr></argument>, <argument><expr><name>blockFor</name></expr></argument>, <argument><expr><name>gotData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>gotData</name> <init>= <expr><ternary><condition><expr><name>received</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><call><name><name>resolver</name><operator>.</operator><name>isDataPresent</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">" (including data)"</literal></expr> </then><else>: <expr><literal type="string">" (only digests)"</literal></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"{}; received {} of {} responses{}"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>failed</name></expr> ?</condition><then> <expr><literal type="string">"Failed"</literal></expr> </then><else>: <expr><literal type="string">"Timed out"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>received</name></expr></argument>, <argument><expr><name>blockFor</name></expr></argument>, <argument><expr><name>gotData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Same as for writes, see AbstractWriteResponseHandler</comment>
        <throw>throw <expr><ternary><condition><expr><name>failed</name></expr>
            ?</condition><then> <expr><operator>new</operator> <call><name>ReadFailureException</name><argument_list>(<argument><expr><call><name>replicaPlan</name><argument_list>()</argument_list></call><operator>.</operator><call><name>consistencyLevel</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>received</name></expr></argument>, <argument><expr><name>blockFor</name></expr></argument>, <argument><expr><call><name><name>resolver</name><operator>.</operator><name>isDataPresent</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>failureReasonByEndpoint</name></expr></argument>)</argument_list></call></expr>
            </then><else>: <expr><operator>new</operator> <call><name>ReadTimeoutException</name><argument_list>(<argument><expr><call><name>replicaPlan</name><argument_list>()</argument_list></call><operator>.</operator><call><name>consistencyLevel</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>received</name></expr></argument>, <argument><expr><name>blockFor</name></expr></argument>, <argument><expr><call><name><name>resolver</name><operator>.</operator><name>isDataPresent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>blockFor</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>blockFor</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onResponse</name><parameter_list>(<parameter><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>ReadResponse</name></argument>&gt;</argument_list></name></type> <name>message</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>assertWaitingFor</name><argument_list>(<argument><expr><call><name><name>message</name><operator>.</operator><name>from</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>resolver</name><operator>.</operator><name>preprocess</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * Ensure that data is present and the response accumulator has properly published the
         * responses it has received. This may result in not signaling immediately when we receive
         * the minimum number of required results, but it guarantees at least the minimum will
         * be accessible when we do signal. (see CASSANDRA-16807)
         */</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>resolver</name><operator>.</operator><name>isDataPresent</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>resolver</name><operator>.</operator><name>responses</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>blockFor</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>condition</name><operator>.</operator><name>signalAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>response</name><parameter_list>(<parameter><decl><type><name>ReadResponse</name></type> <name>result</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Verb</name></type> <name>kind</name> <init>= <expr><ternary><condition><expr><call><name><name>command</name><operator>.</operator><name>isRangeRequest</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>Verb</name><operator>.</operator><name>RANGE_RSP</name></name></expr> </then><else>: <expr><name><name>Verb</name><operator>.</operator><name>READ_RSP</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>ReadResponse</name></argument>&gt;</argument_list></name></type> <name>message</name> <init>= <expr><call><name><name>Message</name><operator>.</operator><name>internalResponse</name></name><argument_list>(<argument><expr><name>kind</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>onResponse</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>trackLatencyForSnitch</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onFailure</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>RequestFailureReason</name></type> <name>failureReason</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>assertWaitingFor</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                
        <expr_stmt><expr><call><name><name>failureReasonByEndpoint</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>failureReason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>blockFor</name> <operator>+</operator> <call><name><name>failuresUpdater</name><operator>.</operator><name>incrementAndGet</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>replicaPlan</name><argument_list>()</argument_list></call><operator>.</operator><call><name>contacts</name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>condition</name><operator>.</operator><name>signalAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>invokeOnFailure</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Verify that a message doesn't come from an unexpected replica.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>assertWaitingFor</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>from</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><operator>!</operator><call><name>replicaPlan</name><argument_list>()</argument_list></call><operator>.</operator><call><name>consistencyLevel</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isDatacenterLocal</name><argument_list>()</argument_list></call>
               <operator>||</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getLocalDataCenter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getEndpointSnitch</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDatacenter</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
               <operator>:</operator> <literal type="string">"Received read response from unexpected replica: "</literal> <operator>+</operator> <name>from</name></expr>;</assert>
    </block_content>}</block></function>
}</block></class>
</unit>
