<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/auth/FunctionResource.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>auth</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Optional</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Joiner</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Objects</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Splitter</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Sets</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang3</name><operator>.</operator><name>StringUtils</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>Schema</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>CQL3Type</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>functions</name><operator>.</operator><name>Function</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>functions</name><operator>.</operator><name>FunctionName</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>AbstractType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>TypeParser</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>InvalidRequestException</name></name>;</import>

<comment type="block" format="javadoc">/**
 * IResource implementation representing functions.
 *
 * The root level "functions" resource represents the collection of all Functions.
 * "functions"                          - root level resource representing all functions defined across every keyspace
 * "functions/keyspace"                 - keyspace level resource to apply permissions to all functions within a keyspace
 * "functions/keyspace/function"        - a specific function, scoped to a given keyspace
 */</comment>
<class><specifier>public</specifier> class <name>FunctionResource</name> <super_list><implements>implements <super><name>IResource</name></super></implements></super_list>
<block>{
    <enum>enum <name>Level</name>
    <block>{
        <decl><name>ROOT</name></decl>, <decl><name>KEYSPACE</name></decl>, <decl><name>FUNCTION</name></decl>
    }</block></enum>

    <comment type="line">// permissions which may be granted on either a resource representing some collection of functions</comment>
    <comment type="line">// i.e. the root resource (all functions) or a keyspace level resource (all functions in a given keyspace)</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Permission</name></argument>&gt;</argument_list></name></type> <name>COLLECTION_LEVEL_PERMISSIONS</name> <init>= <expr><call><name><name>Sets</name><operator>.</operator><name>immutableEnumSet</name></name><argument_list>(<argument><expr><name><name>Permission</name><operator>.</operator><name>CREATE</name></name></expr></argument>,
                                                                                              <argument><expr><name><name>Permission</name><operator>.</operator><name>ALTER</name></name></expr></argument>,
                                                                                              <argument><expr><name><name>Permission</name><operator>.</operator><name>DROP</name></name></expr></argument>,
                                                                                              <argument><expr><name><name>Permission</name><operator>.</operator><name>AUTHORIZE</name></name></expr></argument>,
                                                                                              <argument><expr><name><name>Permission</name><operator>.</operator><name>EXECUTE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// permissions which may be granted on resources representing a specific function</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Permission</name></argument>&gt;</argument_list></name></type> <name>SCALAR_FUNCTION_PERMISSIONS</name> <init>= <expr><call><name><name>Sets</name><operator>.</operator><name>immutableEnumSet</name></name><argument_list>(<argument><expr><name><name>Permission</name><operator>.</operator><name>ALTER</name></name></expr></argument>,
                                                                                             <argument><expr><name><name>Permission</name><operator>.</operator><name>DROP</name></name></expr></argument>,
                                                                                             <argument><expr><name><name>Permission</name><operator>.</operator><name>AUTHORIZE</name></name></expr></argument>,
                                                                                             <argument><expr><name><name>Permission</name><operator>.</operator><name>EXECUTE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Permission</name></argument>&gt;</argument_list></name></type> <name>AGGREGATE_FUNCTION_PERMISSIONS</name> <init>= <expr><call><name><name>Sets</name><operator>.</operator><name>immutableEnumSet</name></name><argument_list>(<argument><expr><name><name>Permission</name><operator>.</operator><name>ALTER</name></name></expr></argument>,
                                                                                                <argument><expr><name><name>Permission</name><operator>.</operator><name>DROP</name></name></expr></argument>,
                                                                                                <argument><expr><name><name>Permission</name><operator>.</operator><name>AUTHORIZE</name></name></expr></argument>,
                                                                                                <argument><expr><name><name>Permission</name><operator>.</operator><name>EXECUTE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ROOT_NAME</name> <init>= <expr><literal type="string">"functions"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FunctionResource</name></type> <name>ROOT_RESOURCE</name> <init>= <expr><operator>new</operator> <call><name>FunctionResource</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Level</name></type> <name>level</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>keyspace</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>argTypes</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>FunctionResource</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>Level</name><operator>.</operator><name>ROOT</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>keyspace</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>argTypes</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>private</specifier> <name>FunctionResource</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>Level</name><operator>.</operator><name>KEYSPACE</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>keyspace</name></name> <operator>=</operator> <name>keyspace</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>argTypes</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>private</specifier> <name>FunctionResource</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>argTypes</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>Level</name><operator>.</operator><name>FUNCTION</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>keyspace</name></name> <operator>=</operator> <name>keyspace</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>argTypes</name></name> <operator>=</operator> <name>argTypes</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * @return the root-level resource.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>FunctionResource</name></type> <name>root</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>ROOT_RESOURCE</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a FunctionResource representing the collection of functions scoped
     * to a specific keyspace.
     *
     * @param keyspace name of the keyspace
     * @return FunctionResource instance representing all of the keyspace's functions
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>FunctionResource</name></type> <name>keyspace</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>FunctionResource</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a FunctionResource representing a specific, keyspace-scoped function.
     *
     * @param keyspace the keyspace in which the function is scoped
     * @param name     name of the function.
     * @param argTypes the types of the arguments to the function
     * @return FunctionResource instance reresenting the function.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>FunctionResource</name></type> <name>function</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>argTypes</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>FunctionResource</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>argTypes</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>FunctionResource</name></type> <name>function</name><parameter_list>(<parameter><decl><type><name>Function</name></type> <name>function</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>FunctionResource</name><argument_list>(<argument><expr><call><name><name>function</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call><operator>.</operator><name>keyspace</name></expr></argument>, <argument><expr><call><name><name>function</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call><operator>.</operator><name>name</name></expr></argument>, <argument><expr><call><name><name>function</name><operator>.</operator><name>argTypes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a FunctionResource representing a specific, keyspace-scoped function.
     * This variant is used to create an instance during parsing of a CQL statement.
     * It includes transposition of the arg types from CQL types to AbstractType
     * implementations
     *
     * @param keyspace the keyspace in which the function is scoped
     * @param name     name of the function.
     * @param argTypes the types of the function arguments in raw CQL form
     * @return FunctionResource instance reresenting the function.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>FunctionResource</name></type> <name>functionFromCql</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>CQL3Type</name><operator>.</operator><name>Raw</name></name></argument>&gt;</argument_list></name></type> <name>argTypes</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>keyspace</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>InvalidRequestException</name><argument_list>(<argument><expr><literal type="string">"In this context function name must be "</literal> <operator>+</operator>
                                              <literal type="string">"explictly qualified by a keyspace"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>abstractTypes</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>argTypes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>CQL3Type</name><operator>.</operator><name>Raw</name></name></type> <name>cqlType</name> <range>: <expr><name>argTypes</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>abstractTypes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>cqlType</name><operator>.</operator><name>prepare</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <return>return <expr><operator>new</operator> <call><name>FunctionResource</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>abstractTypes</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>FunctionResource</name></type> <name>functionFromCql</name><parameter_list>(<parameter><decl><type><name>FunctionName</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>CQL3Type</name><operator>.</operator><name>Raw</name></name></argument>&gt;</argument_list></name></type> <name>argTypes</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>functionFromCql</name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>keyspace</name></name></expr></argument>, <argument><expr><name><name>name</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>argTypes</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Parses a resource name into a FunctionResource instance.
     *
     * @param name Name of the function resource.
     * @return FunctionResource instance matching the name.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>FunctionResource</name></type> <name>fromName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>parts</name> <init>= <expr><call><name><name>StringUtils</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>parts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>ROOT_NAME</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>parts</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s is not a valid function resource name"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>parts</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>root</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>parts</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>keyspace</name><argument_list>(<argument><expr><name><name>parts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>name</name><operator>.</operator><name>matches</name></name><argument_list>(<argument><expr><literal type="string">"^.+\\[.*\\]$"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s is not a valid function resource name. It must end with \"[]\""</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>nameAndArgs</name> <init>= <expr><call><name><name>StringUtils</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><name><name>parts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"[|]"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>function</name><argument_list>(<argument><expr><name><name>parts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>nameAndArgs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>nameAndArgs</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><call><name>argsListFromString</name><argument_list>(<argument><expr><name><name>nameAndArgs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return Printable name of the resource.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <switch>switch <condition>(<expr><name>level</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>ROOT</name></expr>:</case>
                <return>return <expr><name>ROOT_NAME</name></expr>;</return>
            <case>case <expr><name>KEYSPACE</name></expr>:</case>
                <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>ROOT_NAME</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</return>
            <case>case <expr><name>FUNCTION</name></expr>:</case>
                <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s/%s/%s[%s]"</literal></expr></argument>, <argument><expr><name>ROOT_NAME</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>argListAsString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></switch>
        <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the name of the keyspace this resource relates to. In the case of the
     * global root resource, return null
     *
     * @return the keyspace name of this resource, or null for the root resource
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getKeyspace</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>keyspace</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return a qualified FunctionName instance for a function-level resource.
     * Throws IllegalStateException if called on the resource which doens't represent a single function.
     */</comment>
    <function><type><specifier>public</specifier> <name>FunctionName</name></type> <name>getFunctionName</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>level</name> <operator>!=</operator> <name><name>Level</name><operator>.</operator><name>FUNCTION</name></name></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s function resource has no function name"</literal></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <return>return <expr><operator>new</operator> <call><name>FunctionName</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return Parent of the resource, if any. Throws IllegalStateException if it's the root-level resource.
     */</comment>
    <function><type><specifier>public</specifier> <name>IResource</name></type> <name>getParent</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <switch>switch <condition>(<expr><name>level</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>KEYSPACE</name></expr>:</case>
                <return>return <expr><call><name>root</name><argument_list>()</argument_list></call></expr>;</return>
            <case>case <expr><name>FUNCTION</name></expr>:</case>
                <return>return <expr><call><name>keyspace</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></switch>
        <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Root-level resource can't have a parent"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasParent</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>level</name> <operator>!=</operator> <name><name>Level</name><operator>.</operator><name>ROOT</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>exists</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <switch>switch <condition>(<expr><name>level</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>ROOT</name></expr>:</case>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            <case>case <expr><name>KEYSPACE</name></expr>:</case>
                <return>return <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getKeyspaces</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</return>
            <case>case <expr><name>FUNCTION</name></expr>:</case>
                <return>return <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>findFunction</name></name><argument_list>(<argument><expr><call><name>getFunctionName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>argTypes</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isPresent</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></switch>
        <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Permission</name></argument>&gt;</argument_list></name></type> <name>applicablePermissions</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <switch>switch <condition>(<expr><name>level</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>ROOT</name></expr>:</case>
            <case>case <expr><name>KEYSPACE</name></expr>:</case>
                <return>return <expr><name>COLLECTION_LEVEL_PERMISSIONS</name></expr>;</return>
            <case>case <expr><name>FUNCTION</name></expr>:</case>
            <block>{<block_content>
                <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>Function</name></argument>&gt;</argument_list></name></type> <name>function</name> <init>= <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>findFunction</name></name><argument_list>(<argument><expr><call><name>getFunctionName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>argTypes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <assert>assert <expr><call><name><name>function</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call> <operator>:</operator> <literal type="string">"Unable to find function object for resource "</literal> <operator>+</operator> <call><name>toString</name><argument_list>()</argument_list></call></expr>;</assert>
                <return>return <expr><ternary><condition><expr><call><name><name>function</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isAggregate</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>AGGREGATE_FUNCTION_PERMISSIONS</name></expr> </then><else>: <expr><name>SCALAR_FUNCTION_PERMISSIONS</name></expr></else></ternary></expr>;</return>
            </block_content>}</block>
        </block_content>}</block></switch>
        <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<parameter><decl><type><name>FunctionResource</name></type> <name>o</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>name</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>o</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <switch>switch <condition>(<expr><name>level</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>ROOT</name></expr>:</case>
                <return>return <expr><literal type="string">"&lt;all functions&gt;"</literal></expr>;</return>
            <case>case <expr><name>KEYSPACE</name></expr>:</case>
                <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"&lt;all functions in %s&gt;"</literal></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</return>
            <case>case <expr><name>FUNCTION</name></expr>:</case>
                <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"&lt;function %s.%s(%s)&gt;"</literal></expr></argument>,
                                     <argument><expr><name>keyspace</name></expr></argument>,
                                     <argument><expr><name>name</name></expr></argument>,
                                     <argument><expr><call><name><name>Joiner</name><operator>.</operator><name>on</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>join</name><argument_list>(<argument><expr><call><name><name>AbstractType</name><operator>.</operator><name>asCQLTypeStringList</name></name><argument_list>(<argument><expr><name>argTypes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></switch>
        <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>o</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>o</name> <operator>instanceof</operator> <name>FunctionResource</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>FunctionResource</name></type> <name>f</name> <init>= <expr><operator>(</operator><name>FunctionResource</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name><name>Objects</name><operator>.</operator><name>equal</name></name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name><name>f</name><operator>.</operator><name>level</name></name></expr></argument>)</argument_list></call>
               <operator>&amp;&amp;</operator> <call><name><name>Objects</name><operator>.</operator><name>equal</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name><name>f</name><operator>.</operator><name>keyspace</name></name></expr></argument>)</argument_list></call>
               <operator>&amp;&amp;</operator> <call><name><name>Objects</name><operator>.</operator><name>equal</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>f</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call>
               <operator>&amp;&amp;</operator> <call><name><name>Objects</name><operator>.</operator><name>equal</name></name><argument_list>(<argument><expr><name>argTypes</name></expr></argument>, <argument><expr><name><name>f</name><operator>.</operator><name>argTypes</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Objects</name><operator>.</operator><name>hashCode</name></name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>argTypes</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>argListAsString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Joiner</name><operator>.</operator><name>on</name></name><argument_list>(<argument><expr><literal type="string">"^"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>join</name><argument_list>(<argument><expr><name>argTypes</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>argsListFromString</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>argTypes</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>String</name></type> <name>type</name> <range>: <expr><call><name><name>Splitter</name><operator>.</operator><name>on</name></name><argument_list>(<argument><expr><literal type="string">"^"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>omitEmptyStrings</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trimResults</name><argument_list>()</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>argTypes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>TypeParser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <return>return <expr><name>argTypes</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
