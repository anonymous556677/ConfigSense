<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/db/commitlog/GroupCommitLogService.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>commitlog</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A commitlog service that will block returning an ACK back to the a coordinator/client
 * for a minimum amount of time as we wait until the the commit log segment is flushed.
 */</comment>
<class><specifier>public</specifier> class <name>GroupCommitLogService</name> <super_list><extends>extends <super><name>AbstractCommitLogService</name></super></extends></super_list>
<block>{
    <constructor><specifier>public</specifier> <name>GroupCommitLogService</name><parameter_list>(<parameter><decl><type><name>CommitLog</name></type> <name>commitLog</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>commitLog</name></expr></argument>, <argument><expr><literal type="string">"GROUP-COMMIT-LOG-WRITER"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getCommitLogSyncGroupWindow</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>maybeWaitForSync</name><parameter_list>(<parameter><decl><type><name><name>CommitLogSegment</name><operator>.</operator><name>Allocation</name></name></type> <name>alloc</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// wait until record has been safely persisted to disk</comment>
        <expr_stmt><expr><call><name><name>pending</name><operator>.</operator><name>incrementAndGet</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// wait for commitlog_sync_group_window_in_ms</comment>
        <expr_stmt><expr><call><name><name>alloc</name><operator>.</operator><name>awaitDiskSync</name></name><argument_list>(<argument><expr><name><name>commitLog</name><operator>.</operator><name>metrics</name><operator>.</operator><name>waitingOnCommit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pending</name><operator>.</operator><name>decrementAndGet</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>

</unit>
