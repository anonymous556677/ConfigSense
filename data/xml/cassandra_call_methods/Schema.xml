<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/schema/Schema.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>UnknownHostException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>CopyOnWriteArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Collectors</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableList</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>MapDifference</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Sets</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>functions</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>commitlog</name><operator>.</operator><name>CommitLog</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>compaction</name><operator>.</operator><name>CompactionManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>AbstractType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>UserType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>virtual</name><operator>.</operator><name>VirtualKeyspaceRegistry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>ConfigurationException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>InvalidRequestException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>gms</name><operator>.</operator><name>ApplicationState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>gms</name><operator>.</operator><name>Gossiper</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>Descriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>LocalStrategy</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>KeyspaceMetadata</name><operator>.</operator><name>KeyspaceDiff</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>Keyspaces</name><operator>.</operator><name>KeyspacesDiff</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>PendingRangeCalculatorService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>StorageService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>Pair</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>cliffc</name><operator>.</operator><name>high_scale_lib</name><operator>.</operator><name>NonBlockingHashMap</name></name>;</import>

<import>import static <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name><operator>.</operator><name>format</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name><operator>.</operator><name>size</name></name>;</import>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>Schema</name> <super_list><implements>implements <super><name>SchemaProvider</name></super></implements></super_list>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Schema</name></type> <name>instance</name> <init>= <expr><operator>new</operator> <call><name>Schema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>Keyspaces</name></type> <name>keyspaces</name> <init>= <expr><call><name><name>Keyspaces</name><operator>.</operator><name>none</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// UUID -&gt; mutable metadata ref map. We have to update these in place every time a table changes.</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>TableId</name></argument>, <argument><name>TableMetadataRef</name></argument>&gt;</argument_list></name></type> <name>metadataRefs</name> <init>= <expr><operator>new</operator> <call><name><name>NonBlockingHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// (keyspace name, index name) -&gt; mutable metadata ref map. We have to update these in place every time an index changes.</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></argument>, <argument><name>TableMetadataRef</name></argument>&gt;</argument_list></name></type> <name>indexMetadataRefs</name> <init>= <expr><operator>new</operator> <call><name><name>NonBlockingHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Keyspace objects, one per keyspace. Only one instance should ever exist for any given keyspace.</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Keyspace</name></argument>&gt;</argument_list></name></type> <name>keyspaceInstances</name> <init>= <expr><operator>new</operator> <call><name><name>NonBlockingHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>UUID</name></type> <name>version</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>SchemaChangeListener</name></argument>&gt;</argument_list></name></type> <name>changeListeners</name> <init>= <expr><operator>new</operator> <call><name><name>CopyOnWriteArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Initialize empty schema object and load the hardcoded system tables
     */</comment>
    <constructor><specifier>private</specifier> <name>Schema</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>isDaemonInitialized</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>isToolInitialized</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><call><name><name>SchemaKeyspace</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Add entries to system_schema.* for the hardcoded system keyspaces
     * 
     * See CASSANDRA-16856/16996. Make sure schema pulls are synchronized to prevent concurrent schema pull/writes
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>saveSystemKeyspace</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>SchemaKeyspace</name><operator>.</operator><name>saveSystemKeyspacesSchema</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * See CASSANDRA-16856/16996. Make sure schema pulls are synchronized to prevent concurrent schema pull/writes
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>truncateSchemaKeyspace</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>SchemaKeyspace</name><operator>.</operator><name>truncate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * See CASSANDRA-16856/16996. Make sure schema pulls are synchronized to prevent concurrent schema pull/writes
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></type> <name>schemaKeyspaceAsMutations</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>SchemaKeyspace</name><operator>.</operator><name>convertSchemaToMutations</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>KeyspaceMetadata</name></type> <name>getSystemKeyspaceMetadata</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>SchemaKeyspace</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * load keyspace (keyspace) definitions, but do not initialize the keyspace instances.
     * Schema version may be updated as the result.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>loadFromDisk</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>loadFromDisk</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Load schema definitions from disk.
     *
     * @param updateVersion true if schema version needs to be updated
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>loadFromDisk</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>updateVersion</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>SchemaDiagnostics</name><operator>.</operator><name>schemataLoading</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SchemaKeyspace</name><operator>.</operator><name>fetchNonSystemKeyspaces</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>updateVersion</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>updateVersion</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>SchemaDiagnostics</name><operator>.</operator><name>schemataLoaded</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Update (or insert) new keyspace definition
     *
     * @param ksm The metadata about keyspace
     */</comment>
    <function><type><specifier>synchronized</specifier> <specifier>public</specifier> <name>void</name></type> <name>load</name><parameter_list>(<parameter><decl><type><name>KeyspaceMetadata</name></type> <name>ksm</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>KeyspaceMetadata</name></type> <name>previous</name> <init>= <expr><call><name><name>keyspaces</name><operator>.</operator><name>getNullable</name></name><argument_list>(<argument><expr><name><name>ksm</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>previous</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>loadNew</name><argument_list>(<argument><expr><name>ksm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>reload</name><argument_list>(<argument><expr><name>previous</name></expr></argument>, <argument><expr><name>ksm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt><expr><name>keyspaces</name> <operator>=</operator> <call><name><name>keyspaces</name><operator>.</operator><name>withAddedOrUpdated</name></name><argument_list>(<argument><expr><name>ksm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>loadNew</name><parameter_list>(<parameter><decl><type><name>KeyspaceMetadata</name></type> <name>ksm</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>ksm</name><operator>.</operator><name>tablesAndViews</name></name><argument_list>()</argument_list></call>
           <operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>metadata</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>metadataRefs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>metadata</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>TableMetadataRef</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>ksm</name><operator>.</operator><name>tables</name>
           <operator>.</operator><name>indexTables</name></name><argument_list>()</argument_list></call>
           <operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>name</name></decl></parameter>, <parameter><decl><name>metadata</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>indexMetadataRefs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>ksm</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>TableMetadataRef</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>SchemaDiagnostics</name><operator>.</operator><name>metadataInitialized</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>ksm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>reload</name><parameter_list>(<parameter><decl><type><name>KeyspaceMetadata</name></type> <name>previous</name></decl></parameter>, <parameter><decl><type><name>KeyspaceMetadata</name></type> <name>updated</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Keyspace</name></type> <name>keyspace</name> <init>= <expr><call><name>getKeyspaceInstance</name><argument_list>(<argument><expr><name><name>updated</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name>keyspace</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>keyspace</name><operator>.</operator><name>setMetadata</name></name><argument_list>(<argument><expr><name>updated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>Tables</name><operator>.</operator><name>TablesDiff</name></name></type> <name>tablesDiff</name> <init>= <expr><call><name><name>Tables</name><operator>.</operator><name>diff</name></name><argument_list>(<argument><expr><name><name>previous</name><operator>.</operator><name>tables</name></name></expr></argument>, <argument><expr><name><name>updated</name><operator>.</operator><name>tables</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Views</name><operator>.</operator><name>ViewsDiff</name></name></type> <name>viewsDiff</name> <init>= <expr><call><name><name>Views</name><operator>.</operator><name>diff</name></name><argument_list>(<argument><expr><name><name>previous</name><operator>.</operator><name>views</name></name></expr></argument>, <argument><expr><name><name>updated</name><operator>.</operator><name>views</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>MapDifference</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TableMetadata</name></argument>&gt;</argument_list></name></type> <name>indexesDiff</name> <init>= <expr><call><name><name>previous</name><operator>.</operator><name>tables</name><operator>.</operator><name>indexesDiff</name></name><argument_list>(<argument><expr><name><name>updated</name><operator>.</operator><name>tables</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// clean up after removed entries</comment>
        <expr_stmt><expr><call><name><name>tablesDiff</name><operator>.</operator><name>dropped</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>table</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>metadataRefs</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name><name>table</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewsDiff</name><operator>.</operator><name>dropped</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>view</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>metadataRefs</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name><name>view</name><operator>.</operator><name>metadata</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>indexesDiff</name><operator>.</operator><name>entriesOnlyOnLeft</name></name><argument_list>()</argument_list></call>
                   <operator>.</operator><call><name>values</name><argument_list>()</argument_list></call>
                   <operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>indexTable</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>indexMetadataRefs</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>indexTable</name><operator>.</operator><name>keyspace</name></name></expr></argument>, <argument><expr><call><name><name>indexTable</name><operator>.</operator><name>indexName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// load up new entries</comment>
        <expr_stmt><expr><call><name><name>tablesDiff</name><operator>.</operator><name>created</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>table</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>metadataRefs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>table</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>TableMetadataRef</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewsDiff</name><operator>.</operator><name>created</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>view</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>metadataRefs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>view</name><operator>.</operator><name>metadata</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>TableMetadataRef</name><argument_list>(<argument><expr><name><name>view</name><operator>.</operator><name>metadata</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>indexesDiff</name><operator>.</operator><name>entriesOnlyOnRight</name></name><argument_list>()</argument_list></call>
                   <operator>.</operator><call><name>values</name><argument_list>()</argument_list></call>
                   <operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>indexTable</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>indexMetadataRefs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>indexTable</name><operator>.</operator><name>keyspace</name></name></expr></argument>, <argument><expr><call><name><name>indexTable</name><operator>.</operator><name>indexName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>TableMetadataRef</name><argument_list>(<argument><expr><name>indexTable</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// refresh refs to updated ones</comment>
        <expr_stmt><expr><call><name><name>tablesDiff</name><operator>.</operator><name>altered</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>diff</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>metadataRefs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>diff</name><operator>.</operator><name>after</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>set</name><argument_list>(<argument><expr><name><name>diff</name><operator>.</operator><name>after</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewsDiff</name><operator>.</operator><name>altered</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>diff</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>metadataRefs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>diff</name><operator>.</operator><name>after</name><operator>.</operator><name>metadata</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>set</name><argument_list>(<argument><expr><name><name>diff</name><operator>.</operator><name>after</name><operator>.</operator><name>metadata</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>indexesDiff</name><operator>.</operator><name>entriesDiffering</name></name><argument_list>()</argument_list></call>
                   <operator>.</operator><call><name>values</name><argument_list>()</argument_list></call>
                   <operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call>
                   <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name><name>MapDifference</name><operator>.</operator><name>ValueDifference</name></name><operator>::</operator><name>rightValue</name></expr></argument>)</argument_list></call>
                   <operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>indexTable</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>indexMetadataRefs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>indexTable</name><operator>.</operator><name>keyspace</name></name></expr></argument>, <argument><expr><call><name><name>indexTable</name><operator>.</operator><name>indexName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>set</name><argument_list>(<argument><expr><name>indexTable</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>SchemaDiagnostics</name><operator>.</operator><name>metadataReloaded</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>previous</name></expr></argument>, <argument><expr><name>updated</name></expr></argument>, <argument><expr><name>tablesDiff</name></expr></argument>, <argument><expr><name>viewsDiff</name></expr></argument>, <argument><expr><name>indexesDiff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>registerListener</name><parameter_list>(<parameter><decl><type><name>SchemaChangeListener</name></type> <name>listener</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>changeListeners</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unused"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>unregisterListener</name><parameter_list>(<parameter><decl><type><name>SchemaChangeListener</name></type> <name>listener</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>changeListeners</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get keyspace instance by name
     *
     * @param keyspaceName The name of the keyspace
     *
     * @return Keyspace object or null if keyspace was not found
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Keyspace</name></type> <name>getKeyspaceInstance</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>keyspaceInstances</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>ColumnFamilyStore</name></type> <name>getColumnFamilyStoreInstance</name><parameter_list>(<parameter><decl><type><name>TableId</name></type> <name>id</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>TableMetadata</name></type> <name>metadata</name> <init>= <expr><call><name>getTableMetadata</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>metadata</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>Keyspace</name></type> <name>instance</name> <init>= <expr><call><name>getKeyspaceInstance</name><argument_list>(<argument><expr><name><name>metadata</name><operator>.</operator><name>keyspace</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>instance</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><ternary><condition><expr><call><name><name>instance</name><operator>.</operator><name>hasColumnFamilyStore</name></name><argument_list>(<argument><expr><name><name>metadata</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>
             ?</condition><then> <expr><call><name><name>instance</name><operator>.</operator><name>getColumnFamilyStore</name></name><argument_list>(<argument><expr><name><name>metadata</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>
             </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Store given Keyspace instance to the schema
     *
     * @param keyspace The Keyspace instance to store
     *
     * @throws IllegalArgumentException if Keyspace is already stored
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>storeKeyspaceInstance</name><parameter_list>(<parameter><decl><type><name>Keyspace</name></type> <name>keyspace</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>keyspaceInstances</name><operator>.</operator><name>putIfAbsent</name></name><argument_list>(<argument><expr><call><name><name>keyspace</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Keyspace %s was already initialized."</literal></expr></argument>, <argument><expr><call><name><name>keyspace</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Remove keyspace from schema
     *
     * @param keyspaceName The name of the keyspace to remove
     *
     * @return removed keyspace instance or null if it wasn't found
     */</comment>
    <function><type><specifier>public</specifier> <name>Keyspace</name></type> <name>removeKeyspaceInstance</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>keyspaceInstances</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Keyspaces</name></type> <name>snapshot</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>keyspaces</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Remove keyspace definition from system
     *
     * @param ksm The keyspace definition to remove
     */</comment>
    <function><type><specifier>synchronized</specifier> <name>void</name></type> <name>unload</name><parameter_list>(<parameter><decl><type><name>KeyspaceMetadata</name></type> <name>ksm</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>keyspaces</name> <operator>=</operator> <call><name><name>keyspaces</name><operator>.</operator><name>without</name></name><argument_list>(<argument><expr><name><name>ksm</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>ksm</name><operator>.</operator><name>tablesAndViews</name></name><argument_list>()</argument_list></call>
           <operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>t</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>metadataRefs</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>ksm</name><operator>.</operator><name>tables</name>
           <operator>.</operator><name>indexTables</name></name><argument_list>()</argument_list></call>
           <operator>.</operator><call><name>keySet</name><argument_list>()</argument_list></call>
           <operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>name</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>indexMetadataRefs</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>ksm</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>SchemaDiagnostics</name><operator>.</operator><name>metadataRemoved</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>ksm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getNumberOfTables</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>keyspaces</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>mapToInt</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>k</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>size</name><argument_list>(<argument><expr><call><name><name>k</name><operator>.</operator><name>tablesAndViews</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>sum</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>ViewMetadata</name></type> <name>getView</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>viewName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><name>keyspaceName</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
        <decl_stmt><decl><type><name>KeyspaceMetadata</name></type> <name>ksm</name> <init>= <expr><call><name><name>keyspaces</name><operator>.</operator><name>getNullable</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><operator>(</operator><name>ksm</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>ksm</name><operator>.</operator><name>views</name><operator>.</operator><name>getNullable</name></name><argument_list>(<argument><expr><name>viewName</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get metadata about keyspace by its name
     *
     * @param keyspaceName The name of the keyspace
     *
     * @return The keyspace metadata or null if it wasn't found
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>KeyspaceMetadata</name></type> <name>getKeyspaceMetadata</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><name>keyspaceName</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
        <decl_stmt><decl><type><name>KeyspaceMetadata</name></type> <name>keyspace</name> <init>= <expr><call><name><name>keyspaces</name><operator>.</operator><name>getNullable</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><literal type="null">null</literal> <operator>!=</operator> <name>keyspace</name></expr> ?</condition><then> <expr><name>keyspace</name></expr> </then><else>: <expr><call><name><name>VirtualKeyspaceRegistry</name><operator>.</operator><name>instance</name><operator>.</operator><name>getKeyspaceMetadataNullable</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getNonSystemKeyspacesSet</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Sets</name><operator>.</operator><name>difference</name></name><argument_list>(<argument><expr><call><name><name>keyspaces</name><operator>.</operator><name>names</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>LOCAL_SYSTEM_KEYSPACE_NAMES</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return collection of the non-system keyspaces (note that this count as system only the
     * non replicated keyspaces, so keyspace like system_traces which are replicated are actually
     * returned. See getUserKeyspace() below if you don't want those)
     */</comment>
    <function><type><specifier>public</specifier> <name><name>ImmutableList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getNonSystemKeyspaces</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>ImmutableList</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><call><name>getNonSystemKeyspacesSet</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return a collection of keyspaces that do not use LocalStrategy for replication
     */</comment>
    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getNonLocalStrategyKeyspaces</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>keyspaces</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call>
                        <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>keyspace</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>keyspace</name><operator>.</operator><name>params</name><operator>.</operator><name>replication</name><operator>.</operator><name>klass</name></name> <operator>!=</operator> <name><name>LocalStrategy</name><operator>.</operator><name>class</name></name></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>keyspace</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>keyspace</name><operator>.</operator><name>name</name></name></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return collection of the user defined keyspaces
     */</comment>
    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getUserKeyspaces</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>ImmutableList</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><call><name><name>Sets</name><operator>.</operator><name>difference</name></name><argument_list>(<argument><expr><call><name>getNonSystemKeyspacesSet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>REPLICATED_SYSTEM_KEYSPACE_NAMES</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get metadata about keyspace inner ColumnFamilies
     *
     * @param keyspaceName The name of the keyspace
     *
     * @return metadata about ColumnFamilies the belong to the given keyspace
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>TableMetadata</name></argument>&gt;</argument_list></name></type> <name>getTablesAndViews</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><name>keyspaceName</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
        <decl_stmt><decl><type><name>KeyspaceMetadata</name></type> <name>ksm</name> <init>= <expr><call><name><name>keyspaces</name><operator>.</operator><name>getNullable</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <assert>assert <expr><name>ksm</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
        <return>return <expr><call><name><name>ksm</name><operator>.</operator><name>tablesAndViews</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return collection of the all keyspace names registered in the system (system and non-system)
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getKeyspaces</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>keyspaces</name><operator>.</operator><name>names</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block">/* TableMetadata/Ref query/control methods */</comment>

    <comment type="block" format="javadoc">/**
     * Given a keyspace name and table/view name, get the table metadata
     * reference. If the keyspace name or table/view name is not present
     * this method returns null.
     *
     * @return TableMetadataRef object or null if it wasn't found
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>TableMetadataRef</name></type> <name>getTableMetadataRef</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>table</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>TableMetadata</name></type> <name>tm</name> <init>= <expr><call><name>getTableMetadata</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name>tm</name> <operator>==</operator> <literal type="null">null</literal></expr>
             ?</condition><then> <expr><literal type="null">null</literal></expr>
             </then><else>: <expr><call><name><name>metadataRefs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>tm</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>TableMetadataRef</name></type> <name>getIndexTableMetadataRef</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>index</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>indexMetadataRefs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></argument>, <argument><name>TableMetadataRef</name></argument>&gt;</argument_list></name></type> <name>getIndexTableMetadataRefs</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>indexMetadataRefs</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get Table metadata by its identifier
     *
     * @param id table or view identifier
     *
     * @return metadata about Table or View
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>TableMetadataRef</name></type> <name>getTableMetadataRef</name><parameter_list>(<parameter><decl><type><name>TableId</name></type> <name>id</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>metadataRefs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>TableMetadataRef</name></type> <name>getTableMetadataRef</name><parameter_list>(<parameter><decl><type><name>Descriptor</name></type> <name>descriptor</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getTableMetadataRef</name><argument_list>(<argument><expr><name><name>descriptor</name><operator>.</operator><name>ksname</name></name></expr></argument>, <argument><expr><name><name>descriptor</name><operator>.</operator><name>cfname</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>TableId</name></argument>, <argument><name>TableMetadataRef</name></argument>&gt;</argument_list></name></type> <name>getTableMetadataRefs</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>metadataRefs</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Given a keyspace name and table name, get the table
     * meta data. If the keyspace name or table name is not valid
     * this function returns null.
     *
     * @param keyspace The keyspace name
     * @param table The table name
     *
     * @return TableMetadata object or null if it wasn't found
     */</comment>
    <function><type><specifier>public</specifier> <name>TableMetadata</name></type> <name>getTableMetadata</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>table</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><name>keyspace</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
        <assert>assert <expr><name>table</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>

        <decl_stmt><decl><type><name>KeyspaceMetadata</name></type> <name>ksm</name> <init>= <expr><call><name>getKeyspaceMetadata</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name>ksm</name> <operator>==</operator> <literal type="null">null</literal></expr>
             ?</condition><then> <expr><literal type="null">null</literal></expr>
             </then><else>: <expr><call><name><name>ksm</name><operator>.</operator><name>getTableOrViewNullable</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>TableMetadata</name></type> <name>getTableMetadata</name><parameter_list>(<parameter><decl><type><name>TableId</name></type> <name>id</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>TableMetadata</name></type> <name>table</name> <init>= <expr><call><name><name>keyspaces</name><operator>.</operator><name>getTableOrViewNullable</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><literal type="null">null</literal> <operator>!=</operator> <name>table</name></expr> ?</condition><then> <expr><name>table</name></expr> </then><else>: <expr><call><name><name>VirtualKeyspaceRegistry</name><operator>.</operator><name>instance</name><operator>.</operator><name>getTableMetadataNullable</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>TableMetadata</name></type> <name>validateTable</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>tableName</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>InvalidRequestException</name><argument_list>(<argument><expr><literal type="string">"non-empty table is required"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>KeyspaceMetadata</name></type> <name>keyspace</name> <init>= <expr><call><name>getKeyspaceMetadata</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>keyspace</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>KeyspaceNotDefinedException</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"keyspace %s does not exist"</literal></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>TableMetadata</name></type> <name>metadata</name> <init>= <expr><call><name><name>keyspace</name><operator>.</operator><name>getTableOrViewNullable</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>metadata</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"table %s does not exist"</literal></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <return>return <expr><name>metadata</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>TableMetadata</name></type> <name>getTableMetadata</name><parameter_list>(<parameter><decl><type><name>Descriptor</name></type> <name>descriptor</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getTableMetadata</name><argument_list>(<argument><expr><name><name>descriptor</name><operator>.</operator><name>ksname</name></name></expr></argument>, <argument><expr><name><name>descriptor</name><operator>.</operator><name>cfname</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block">/* Function helpers */</comment>

    <comment type="block" format="javadoc">/**
     * Get all function overloads with the specified name
     *
     * @param name fully qualified function name
     * @return an empty list if the keyspace or the function name are not found;
     *         a non-empty collection of {@link Function} otherwise
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Function</name></argument>&gt;</argument_list></name></type> <name>getFunctions</name><parameter_list>(<parameter><decl><type><name>FunctionName</name></type> <name>name</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>name</name><operator>.</operator><name>hasKeyspace</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Function name must be fully qualified: got %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>KeyspaceMetadata</name></type> <name>ksm</name> <init>= <expr><call><name>getKeyspaceMetadata</name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>keyspace</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name>ksm</name> <operator>==</operator> <literal type="null">null</literal></expr>
             ?</condition><then> <expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr>
             </then><else>: <expr><call><name><name>ksm</name><operator>.</operator><name>functions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Find the function with the specified name
     *
     * @param name fully qualified function name
     * @param argTypes function argument types
     * @return an empty {@link Optional} if the keyspace or the function name are not found;
     *         a non-empty optional of {@link Function} otherwise
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>Function</name></argument>&gt;</argument_list></name></type> <name>findFunction</name><parameter_list>(<parameter><decl><type><name>FunctionName</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>argTypes</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>name</name><operator>.</operator><name>hasKeyspace</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Function name must be fully quallified: got %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>KeyspaceMetadata</name></type> <name>ksm</name> <init>= <expr><call><name>getKeyspaceMetadata</name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>keyspace</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name>ksm</name> <operator>==</operator> <literal type="null">null</literal></expr>
             ?</condition><then> <expr><call><name><name>Optional</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>
             </then><else>: <expr><call><name><name>ksm</name><operator>.</operator><name>functions</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>argTypes</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block">/* Version control */</comment>

    <comment type="block" format="javadoc">/**
     * @return current schema version
     */</comment>
    <function><type><specifier>public</specifier> <name>UUID</name></type> <name>getVersion</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>version</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Checks whether the given schema version is the same as the current local schema.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSameVersion</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>schemaVersion</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>schemaVersion</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>schemaVersion</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Checks whether the current schema is empty.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isEmpty</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>SchemaConstants</name><operator>.</operator><name>emptyVersion</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Read schema from system keyspace and calculate MD5 digest of every row, resulting digest
     * will be converted into UUID which would act as content-based version of the schema.
     * 
     * See CASSANDRA-16856/16996. Make sure schema pulls are synchronized to prevent concurrent schema pull/writes
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>updateVersion</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>version</name> <operator>=</operator> <call><name><name>SchemaKeyspace</name><operator>.</operator><name>calculateSchemaDigest</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>updateSchemaVersion</name></name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SchemaDiagnostics</name><operator>.</operator><name>versionUpdated</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block">/*
     * Like updateVersion, but also announces via gossip
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>updateVersionAndAnnounce</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>updateVersion</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>passiveAnnounceVersion</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Announce my version passively over gossip.
     * Used to notify nodes as they arrive in the cluster.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>passiveAnnounceVersion</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>addLocalApplicationState</name></name><argument_list>(<argument><expr><name><name>ApplicationState</name><operator>.</operator><name>SCHEMA</name></name></expr></argument>, <argument><expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>valueFactory</name><operator>.</operator><name>schema</name></name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SchemaDiagnostics</name><operator>.</operator><name>versionAnnounced</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Clear all KS/CF metadata and reset version.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>getNonSystemKeyspaces</name><argument_list>()</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>k</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>unload</name><argument_list>(<argument><expr><call><name>getKeyspaceMetadata</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateVersionAndAnnounce</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SchemaDiagnostics</name><operator>.</operator><name>schemataCleared</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block">/*
     * Reload schema from local disk. Useful if a user made changes to schema tables by hand, or has suspicion that
     * in-memory representation got out of sync somehow with what's on disk.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>reloadSchemaAndAnnounceVersion</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Keyspaces</name></type> <name>before</name> <init>= <expr><call><name><name>keyspaces</name><operator>.</operator><name>filter</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>k</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><operator>!</operator><call><name><name>SchemaConstants</name><operator>.</operator><name>isLocalSystemKeyspace</name></name><argument_list>(<argument><expr><name><name>k</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Keyspaces</name></type> <name>after</name> <init>= <expr><call><name><name>SchemaKeyspace</name><operator>.</operator><name>fetchNonSystemKeyspaces</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>merge</name><argument_list>(<argument><expr><call><name><name>Keyspaces</name><operator>.</operator><name>diff</name></name><argument_list>(<argument><expr><name>before</name></expr></argument>, <argument><expr><name>after</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateVersionAndAnnounce</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Merge remote schema in form of mutations with local and mutate ks/cf metadata objects
     * (which also involves fs operations on add/drop ks/cf)
     *
     * @param mutations the schema changes to apply
     *
     * @throws ConfigurationException If one of metadata attributes has invalid value
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>mergeAndAnnounceVersion</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></type> <name>mutations</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>merge</name><argument_list>(<argument><expr><name>mutations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateVersionAndAnnounce</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * See CASSANDRA-16856/16996. Make sure schema pulls are synchronized to prevent concurrent schema pull/writes
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>TransformationResult</name></type> <name>transform</name><parameter_list>(<parameter><decl><type><name>SchemaTransformation</name></type> <name>transformation</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>locally</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>now</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>UnknownHostException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>KeyspacesDiff</name></type> <name>diff</name></decl>;</decl_stmt>
        <try>try
        <block>{<block_content>
            <decl_stmt><decl><type><name>Keyspaces</name></type> <name>before</name> <init>= <expr><name>keyspaces</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Keyspaces</name></type> <name>after</name> <init>= <expr><call><name><name>transformation</name><operator>.</operator><name>apply</name></name><argument_list>(<argument><expr><name>before</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>diff</name> <operator>=</operator> <call><name><name>Keyspaces</name><operator>.</operator><name>diff</name></name><argument_list>(<argument><expr><name>before</name></expr></argument>, <argument><expr><name>after</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>RuntimeException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>TransformationResult</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></catch></try>

        <if_stmt><if>if <condition>(<expr><call><name><name>diff</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>new</operator> <call><name>TransformationResult</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></type> <name>mutations</name> <init>= <expr><call><name><name>SchemaKeyspace</name><operator>.</operator><name>convertSchemaDiffToMutations</name></name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>SchemaKeyspace</name><operator>.</operator><name>applyChanges</name></name><argument_list>(<argument><expr><name>mutations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>merge</name><argument_list>(<argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateVersion</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>locally</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>passiveAnnounceVersion</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return>return <expr><operator>new</operator> <call><name>TransformationResult</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr><name>mutations</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>TransformationResult</name>
    <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>success</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>RuntimeException</name></type> <name>exception</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>KeyspacesDiff</name></type> <name>diff</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></type> <name>mutations</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>TransformationResult</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>success</name></decl></parameter>, <parameter><decl><type><name>RuntimeException</name></type> <name>exception</name></decl></parameter>, <parameter><decl><type><name>KeyspacesDiff</name></type> <name>diff</name></decl></parameter>, <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></type> <name>mutations</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>success</name></name> <operator>=</operator> <name>success</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>exception</name></name> <operator>=</operator> <name>exception</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>diff</name></name> <operator>=</operator> <name>diff</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mutations</name></name> <operator>=</operator> <name>mutations</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <constructor><name>TransformationResult</name><parameter_list>(<parameter><decl><type><name>RuntimeException</name></type> <name>exception</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>exception</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <constructor><name>TransformationResult</name><parameter_list>(<parameter><decl><type><name>KeyspacesDiff</name></type> <name>diff</name></decl></parameter>, <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></type> <name>mutations</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>diff</name></expr></argument>, <argument><expr><name>mutations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * See CASSANDRA-16856/16996. Make sure schema pulls are synchronized to prevent concurrent schema pull/writes
     */</comment>
    <function><type><specifier>synchronized</specifier> <name>void</name></type> <name>merge</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></type> <name>mutations</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// only compare the keyspaces affected by this set of schema mutations</comment>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>affectedKeyspaces</name> <init>= <expr><call><name><name>SchemaKeyspace</name><operator>.</operator><name>affectedKeyspaces</name></name><argument_list>(<argument><expr><name>mutations</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// fetch the current state of schema for the affected keyspaces only</comment>
        <decl_stmt><decl><type><name>Keyspaces</name></type> <name>before</name> <init>= <expr><call><name><name>keyspaces</name><operator>.</operator><name>filter</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>k</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>affectedKeyspaces</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>k</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// apply the schema mutations</comment>
        <expr_stmt><expr><call><name><name>SchemaKeyspace</name><operator>.</operator><name>applyChanges</name></name><argument_list>(<argument><expr><name>mutations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// apply the schema mutations and fetch the new versions of the altered keyspaces</comment>
        <decl_stmt><decl><type><name>Keyspaces</name></type> <name>after</name> <init>= <expr><call><name><name>SchemaKeyspace</name><operator>.</operator><name>fetchKeyspaces</name></name><argument_list>(<argument><expr><name>affectedKeyspaces</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>merge</name><argument_list>(<argument><expr><call><name><name>Keyspaces</name><operator>.</operator><name>diff</name></name><argument_list>(<argument><expr><name>before</name></expr></argument>, <argument><expr><name>after</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>merge</name><parameter_list>(<parameter><decl><type><name>KeyspacesDiff</name></type> <name>diff</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>diff</name><operator>.</operator><name>dropped</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>dropKeyspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>diff</name><operator>.</operator><name>created</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>createKeyspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>diff</name><operator>.</operator><name>altered</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>alterKeyspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>alterKeyspace</name><parameter_list>(<parameter><decl><type><name>KeyspaceDiff</name></type> <name>delta</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>SchemaDiagnostics</name><operator>.</operator><name>keyspaceAltering</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// drop tables and views</comment>
        <expr_stmt><expr><call><name><name>delta</name><operator>.</operator><name>views</name><operator>.</operator><name>dropped</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>dropView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>delta</name><operator>.</operator><name>tables</name><operator>.</operator><name>dropped</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>dropTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><name><name>delta</name><operator>.</operator><name>after</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// add tables and views</comment>
        <expr_stmt><expr><call><name><name>delta</name><operator>.</operator><name>tables</name><operator>.</operator><name>created</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>createTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>delta</name><operator>.</operator><name>views</name><operator>.</operator><name>created</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>createView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// update tables and views</comment>
        <expr_stmt><expr><call><name><name>delta</name><operator>.</operator><name>tables</name><operator>.</operator><name>altered</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>diff</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>alterTable</name><argument_list>(<argument><expr><name><name>diff</name><operator>.</operator><name>after</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>delta</name><operator>.</operator><name>views</name><operator>.</operator><name>altered</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>diff</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>alterView</name><argument_list>(<argument><expr><name><name>diff</name><operator>.</operator><name>after</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// deal with all added, and altered views</comment>
        <expr_stmt><expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name><name>delta</name><operator>.</operator><name>after</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>viewManager</name><operator>.</operator><name>reload</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// notify on everything dropped</comment>
        <expr_stmt><expr><call><name><name>delta</name><operator>.</operator><name>udas</name><operator>.</operator><name>dropped</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>uda</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>notifyDropAggregate</name><argument_list>(<argument><expr><operator>(</operator><name>UDAggregate</name><operator>)</operator> <name>uda</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>delta</name><operator>.</operator><name>udfs</name><operator>.</operator><name>dropped</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>udf</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>notifyDropFunction</name><argument_list>(<argument><expr><operator>(</operator><name>UDFunction</name><operator>)</operator> <name>udf</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>delta</name><operator>.</operator><name>views</name><operator>.</operator><name>dropped</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>notifyDropView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>delta</name><operator>.</operator><name>tables</name><operator>.</operator><name>dropped</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>notifyDropTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>delta</name><operator>.</operator><name>types</name><operator>.</operator><name>dropped</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>notifyDropType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// notify on everything created</comment>
        <expr_stmt><expr><call><name><name>delta</name><operator>.</operator><name>types</name><operator>.</operator><name>created</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>notifyCreateType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>delta</name><operator>.</operator><name>tables</name><operator>.</operator><name>created</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>notifyCreateTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>delta</name><operator>.</operator><name>views</name><operator>.</operator><name>created</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>notifyCreateView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>delta</name><operator>.</operator><name>udfs</name><operator>.</operator><name>created</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>udf</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>notifyCreateFunction</name><argument_list>(<argument><expr><operator>(</operator><name>UDFunction</name><operator>)</operator> <name>udf</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>delta</name><operator>.</operator><name>udas</name><operator>.</operator><name>created</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>uda</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>notifyCreateAggregate</name><argument_list>(<argument><expr><operator>(</operator><name>UDAggregate</name><operator>)</operator> <name>uda</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// notify on everything altered</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>delta</name><operator>.</operator><name>before</name><operator>.</operator><name>params</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>delta</name><operator>.</operator><name>after</name><operator>.</operator><name>params</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>notifyAlterKeyspace</name><argument_list>(<argument><expr><name><name>delta</name><operator>.</operator><name>before</name></name></expr></argument>, <argument><expr><name><name>delta</name><operator>.</operator><name>after</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>delta</name><operator>.</operator><name>types</name><operator>.</operator><name>altered</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>diff</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>notifyAlterType</name><argument_list>(<argument><expr><name><name>diff</name><operator>.</operator><name>before</name></name></expr></argument>, <argument><expr><name><name>diff</name><operator>.</operator><name>after</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>delta</name><operator>.</operator><name>tables</name><operator>.</operator><name>altered</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>diff</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>notifyAlterTable</name><argument_list>(<argument><expr><name><name>diff</name><operator>.</operator><name>before</name></name></expr></argument>, <argument><expr><name><name>diff</name><operator>.</operator><name>after</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>delta</name><operator>.</operator><name>views</name><operator>.</operator><name>altered</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>diff</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>notifyAlterView</name><argument_list>(<argument><expr><name><name>diff</name><operator>.</operator><name>before</name></name></expr></argument>, <argument><expr><name><name>diff</name><operator>.</operator><name>after</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>delta</name><operator>.</operator><name>udfs</name><operator>.</operator><name>altered</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>diff</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>notifyAlterFunction</name><argument_list>(<argument><expr><name><name>diff</name><operator>.</operator><name>before</name></name></expr></argument>, <argument><expr><name><name>diff</name><operator>.</operator><name>after</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>delta</name><operator>.</operator><name>udas</name><operator>.</operator><name>altered</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>diff</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>notifyAlterAggregate</name><argument_list>(<argument><expr><name><name>diff</name><operator>.</operator><name>before</name></name></expr></argument>, <argument><expr><name><name>diff</name><operator>.</operator><name>after</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SchemaDiagnostics</name><operator>.</operator><name>keyspaceAltered</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>createKeyspace</name><parameter_list>(<parameter><decl><type><name>KeyspaceMetadata</name></type> <name>keyspace</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>SchemaDiagnostics</name><operator>.</operator><name>keyspaceCreating</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name><name>keyspace</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>notifyCreateKeyspace</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>keyspace</name><operator>.</operator><name>types</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>notifyCreateType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>keyspace</name><operator>.</operator><name>tables</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>notifyCreateTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>keyspace</name><operator>.</operator><name>views</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>notifyCreateView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>keyspace</name><operator>.</operator><name>functions</name><operator>.</operator><name>udfs</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>notifyCreateFunction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>keyspace</name><operator>.</operator><name>functions</name><operator>.</operator><name>udas</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>notifyCreateAggregate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SchemaDiagnostics</name><operator>.</operator><name>keyspaceCreated</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// If keyspace has been added, we need to recalculate pending ranges to make sure</comment>
        <comment type="line">// we send mutations to the correct set of bootstrapping nodes. Refer CASSANDRA-15433.</comment>
        <if_stmt><if>if <condition>(<expr><name><name>keyspace</name><operator>.</operator><name>params</name><operator>.</operator><name>replication</name><operator>.</operator><name>klass</name></name> <operator>!=</operator> <name><name>LocalStrategy</name><operator>.</operator><name>class</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>PendingRangeCalculatorService</name><operator>.</operator><name>calculatePendingRanges</name></name><argument_list>(<argument><expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name><name>keyspace</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getReplicationStrategy</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>keyspace</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>dropKeyspace</name><parameter_list>(<parameter><decl><type><name>KeyspaceMetadata</name></type> <name>keyspace</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>SchemaDiagnostics</name><operator>.</operator><name>keyspaceDroping</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>keyspace</name><operator>.</operator><name>views</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>dropView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>keyspace</name><operator>.</operator><name>tables</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>dropTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// remove the keyspace from the static instances.</comment>
        <expr_stmt><expr><call><name><name>Keyspace</name><operator>.</operator><name>clear</name></name><argument_list>(<argument><expr><name><name>keyspace</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>unload</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Keyspace</name><operator>.</operator><name>writeOrder</name><operator>.</operator><name>awaitNewBarrier</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>keyspace</name><operator>.</operator><name>functions</name><operator>.</operator><name>udas</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>notifyDropAggregate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>keyspace</name><operator>.</operator><name>functions</name><operator>.</operator><name>udfs</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>notifyDropFunction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>keyspace</name><operator>.</operator><name>views</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>notifyDropView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>keyspace</name><operator>.</operator><name>tables</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>notifyDropTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>keyspace</name><operator>.</operator><name>types</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>notifyDropType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyDropKeyspace</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SchemaDiagnostics</name><operator>.</operator><name>keyspaceDroped</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>dropView</name><parameter_list>(<parameter><decl><type><name>ViewMetadata</name></type> <name>metadata</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><call><name><name>metadata</name><operator>.</operator><name>keyspace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>viewManager</name><operator>.</operator><name>dropView</name></name><argument_list>(<argument><expr><call><name><name>metadata</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dropTable</name><argument_list>(<argument><expr><name><name>metadata</name><operator>.</operator><name>metadata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>dropTable</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>metadata</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>SchemaDiagnostics</name><operator>.</operator><name>tableDropping</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name> <init>= <expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name><name>metadata</name><operator>.</operator><name>keyspace</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getColumnFamilyStore</name><argument_list>(<argument><expr><name><name>metadata</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <assert>assert <expr><name>cfs</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
        <comment type="line">// make sure all the indexes are dropped, or else.</comment>
        <expr_stmt><expr><call><name><name>cfs</name><operator>.</operator><name>indexManager</name><operator>.</operator><name>markAllIndexesRemoved</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>CompactionManager</name><operator>.</operator><name>instance</name><operator>.</operator><name>interruptCompactionFor</name></name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>sstable</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><literal type="boolean">true</literal></expr></block_content></block></lambda></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>isAutoSnapshot</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>cfs</name><operator>.</operator><name>snapshot</name></name><argument_list>(<argument><expr><call><name><name>Keyspace</name><operator>.</operator><name>getTimestampedSnapshotNameWithPrefix</name></name><argument_list>(<argument><expr><name><name>cfs</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>ColumnFamilyStore</name><operator>.</operator><name>SNAPSHOT_DROP_PREFIX</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>CommitLog</name><operator>.</operator><name>instance</name><operator>.</operator><name>forceRecycleAllSegments</name></name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><name><name>metadata</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name><name>metadata</name><operator>.</operator><name>keyspace</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>dropCf</name><argument_list>(<argument><expr><name><name>metadata</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SchemaDiagnostics</name><operator>.</operator><name>tableDropped</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>createTable</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>SchemaDiagnostics</name><operator>.</operator><name>tableCreating</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name><name>table</name><operator>.</operator><name>keyspace</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>initCf</name><argument_list>(<argument><expr><call><name><name>metadataRefs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>table</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SchemaDiagnostics</name><operator>.</operator><name>tableCreated</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>createView</name><parameter_list>(<parameter><decl><type><name>ViewMetadata</name></type> <name>view</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><call><name><name>view</name><operator>.</operator><name>keyspace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>initCf</name><argument_list>(<argument><expr><call><name><name>metadataRefs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>view</name><operator>.</operator><name>metadata</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>alterTable</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>updated</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>SchemaDiagnostics</name><operator>.</operator><name>tableAltering</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>updated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name><name>updated</name><operator>.</operator><name>keyspace</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getColumnFamilyStore</name><argument_list>(<argument><expr><name><name>updated</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>reload</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SchemaDiagnostics</name><operator>.</operator><name>tableAltered</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>updated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>alterView</name><parameter_list>(<parameter><decl><type><name>ViewMetadata</name></type> <name>updated</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><call><name><name>updated</name><operator>.</operator><name>keyspace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getColumnFamilyStore</name><argument_list>(<argument><expr><call><name><name>updated</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>reload</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>notifyCreateKeyspace</name><parameter_list>(<parameter><decl><type><name>KeyspaceMetadata</name></type> <name>ksm</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>changeListeners</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>l</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>l</name><operator>.</operator><name>onCreateKeyspace</name></name><argument_list>(<argument><expr><name><name>ksm</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>notifyCreateTable</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>metadata</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>changeListeners</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>l</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>l</name><operator>.</operator><name>onCreateTable</name></name><argument_list>(<argument><expr><name><name>metadata</name><operator>.</operator><name>keyspace</name></name></expr></argument>, <argument><expr><name><name>metadata</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>notifyCreateView</name><parameter_list>(<parameter><decl><type><name>ViewMetadata</name></type> <name>view</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>changeListeners</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>l</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>l</name><operator>.</operator><name>onCreateView</name></name><argument_list>(<argument><expr><call><name><name>view</name><operator>.</operator><name>keyspace</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>view</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>notifyCreateType</name><parameter_list>(<parameter><decl><type><name>UserType</name></type> <name>ut</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>changeListeners</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>l</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>l</name><operator>.</operator><name>onCreateType</name></name><argument_list>(<argument><expr><name><name>ut</name><operator>.</operator><name>keyspace</name></name></expr></argument>, <argument><expr><call><name><name>ut</name><operator>.</operator><name>getNameAsString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>notifyCreateFunction</name><parameter_list>(<parameter><decl><type><name>UDFunction</name></type> <name>udf</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>changeListeners</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>l</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>l</name><operator>.</operator><name>onCreateFunction</name></name><argument_list>(<argument><expr><call><name><name>udf</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call><operator>.</operator><name>keyspace</name></expr></argument>, <argument><expr><call><name><name>udf</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call><operator>.</operator><name>name</name></expr></argument>, <argument><expr><call><name><name>udf</name><operator>.</operator><name>argTypes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>notifyCreateAggregate</name><parameter_list>(<parameter><decl><type><name>UDAggregate</name></type> <name>udf</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>changeListeners</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>l</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>l</name><operator>.</operator><name>onCreateAggregate</name></name><argument_list>(<argument><expr><call><name><name>udf</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call><operator>.</operator><name>keyspace</name></expr></argument>, <argument><expr><call><name><name>udf</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call><operator>.</operator><name>name</name></expr></argument>, <argument><expr><call><name><name>udf</name><operator>.</operator><name>argTypes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>notifyAlterKeyspace</name><parameter_list>(<parameter><decl><type><name>KeyspaceMetadata</name></type> <name>before</name></decl></parameter>, <parameter><decl><type><name>KeyspaceMetadata</name></type> <name>after</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>changeListeners</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>l</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>l</name><operator>.</operator><name>onAlterKeyspace</name></name><argument_list>(<argument><expr><name><name>after</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>notifyAlterTable</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>before</name></decl></parameter>, <parameter><decl><type><name>TableMetadata</name></type> <name>after</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>changeAffectedPreparedStatements</name> <init>= <expr><call><name><name>before</name><operator>.</operator><name>changeAffectsPreparedStatements</name></name><argument_list>(<argument><expr><name>after</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>changeListeners</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>l</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>l</name><operator>.</operator><name>onAlterTable</name></name><argument_list>(<argument><expr><name><name>after</name><operator>.</operator><name>keyspace</name></name></expr></argument>, <argument><expr><name><name>after</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>changeAffectedPreparedStatements</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>notifyAlterView</name><parameter_list>(<parameter><decl><type><name>ViewMetadata</name></type> <name>before</name></decl></parameter>, <parameter><decl><type><name>ViewMetadata</name></type> <name>after</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>changeAffectedPreparedStatements</name> <init>= <expr><call><name><name>before</name><operator>.</operator><name>metadata</name><operator>.</operator><name>changeAffectsPreparedStatements</name></name><argument_list>(<argument><expr><name><name>after</name><operator>.</operator><name>metadata</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>changeListeners</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>l</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content><expr><call><name><name>l</name><operator>.</operator><name>onAlterView</name></name><argument_list>(<argument><expr><call><name><name>after</name><operator>.</operator><name>keyspace</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>after</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>changeAffectedPreparedStatements</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>notifyAlterType</name><parameter_list>(<parameter><decl><type><name>UserType</name></type> <name>before</name></decl></parameter>, <parameter><decl><type><name>UserType</name></type> <name>after</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>changeListeners</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>l</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>l</name><operator>.</operator><name>onAlterType</name></name><argument_list>(<argument><expr><name><name>after</name><operator>.</operator><name>keyspace</name></name></expr></argument>, <argument><expr><call><name><name>after</name><operator>.</operator><name>getNameAsString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>notifyAlterFunction</name><parameter_list>(<parameter><decl><type><name>UDFunction</name></type> <name>before</name></decl></parameter>, <parameter><decl><type><name>UDFunction</name></type> <name>after</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>changeListeners</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>l</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>l</name><operator>.</operator><name>onAlterFunction</name></name><argument_list>(<argument><expr><call><name><name>after</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call><operator>.</operator><name>keyspace</name></expr></argument>, <argument><expr><call><name><name>after</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call><operator>.</operator><name>name</name></expr></argument>, <argument><expr><call><name><name>after</name><operator>.</operator><name>argTypes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>notifyAlterAggregate</name><parameter_list>(<parameter><decl><type><name>UDAggregate</name></type> <name>before</name></decl></parameter>, <parameter><decl><type><name>UDAggregate</name></type> <name>after</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>changeListeners</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>l</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>l</name><operator>.</operator><name>onAlterAggregate</name></name><argument_list>(<argument><expr><call><name><name>after</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call><operator>.</operator><name>keyspace</name></expr></argument>, <argument><expr><call><name><name>after</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call><operator>.</operator><name>name</name></expr></argument>, <argument><expr><call><name><name>after</name><operator>.</operator><name>argTypes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>notifyDropKeyspace</name><parameter_list>(<parameter><decl><type><name>KeyspaceMetadata</name></type> <name>ksm</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>changeListeners</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>l</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>l</name><operator>.</operator><name>onDropKeyspace</name></name><argument_list>(<argument><expr><name><name>ksm</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>notifyDropTable</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>metadata</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>changeListeners</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>l</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>l</name><operator>.</operator><name>onDropTable</name></name><argument_list>(<argument><expr><name><name>metadata</name><operator>.</operator><name>keyspace</name></name></expr></argument>, <argument><expr><name><name>metadata</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>notifyDropView</name><parameter_list>(<parameter><decl><type><name>ViewMetadata</name></type> <name>view</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>changeListeners</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>l</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>l</name><operator>.</operator><name>onDropView</name></name><argument_list>(<argument><expr><call><name><name>view</name><operator>.</operator><name>keyspace</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>view</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>notifyDropType</name><parameter_list>(<parameter><decl><type><name>UserType</name></type> <name>ut</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>changeListeners</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>l</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>l</name><operator>.</operator><name>onDropType</name></name><argument_list>(<argument><expr><name><name>ut</name><operator>.</operator><name>keyspace</name></name></expr></argument>, <argument><expr><call><name><name>ut</name><operator>.</operator><name>getNameAsString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>notifyDropFunction</name><parameter_list>(<parameter><decl><type><name>UDFunction</name></type> <name>udf</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>changeListeners</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>l</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>l</name><operator>.</operator><name>onDropFunction</name></name><argument_list>(<argument><expr><call><name><name>udf</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call><operator>.</operator><name>keyspace</name></expr></argument>, <argument><expr><call><name><name>udf</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call><operator>.</operator><name>name</name></expr></argument>, <argument><expr><call><name><name>udf</name><operator>.</operator><name>argTypes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>notifyDropAggregate</name><parameter_list>(<parameter><decl><type><name>UDAggregate</name></type> <name>udf</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>changeListeners</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>l</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>l</name><operator>.</operator><name>onDropAggregate</name></name><argument_list>(<argument><expr><call><name><name>udf</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call><operator>.</operator><name>keyspace</name></expr></argument>, <argument><expr><call><name><name>udf</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call><operator>.</operator><name>name</name></expr></argument>, <argument><expr><call><name><name>udf</name><operator>.</operator><name>argTypes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>


    <comment type="block" format="javadoc">/**
     * Converts the given schema version to a string. Returns {@code unknown}, if {@code version} is {@code null}
     * or {@code "(empty)"}, if {@code version} refers to an {@link SchemaConstants#emptyVersion empty) schema.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>schemaVersionToString</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>version</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>version</name> <operator>==</operator> <literal type="null">null</literal></expr>
               ?</condition><then> <expr><literal type="string">"unknown"</literal></expr>
               </then><else>: <expr><ternary><condition><expr><call><name><name>SchemaConstants</name><operator>.</operator><name>emptyVersion</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>
                 ?</condition><then> <expr><literal type="string">"(empty)"</literal></expr>
                 </then><else>: <expr><call><name><name>version</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
