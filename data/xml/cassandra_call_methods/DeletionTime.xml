<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/db/DeletionTime.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Objects</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cache</name><operator>.</operator><name>IMeasurableMemory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>rows</name><operator>.</operator><name>Cell</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>ISerializer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>DataInputPlus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>DataOutputPlus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>ObjectSizes</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Information on deletion of a storage engine object.
 */</comment>
<class><specifier>public</specifier> class <name>DeletionTime</name> <super_list><implements>implements <super><name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>DeletionTime</name></argument>&gt;</argument_list></name></super>, <super><name>IMeasurableMemory</name></super></implements></super_list>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>EMPTY_SIZE</name> <init>= <expr><call><name><name>ObjectSizes</name><operator>.</operator><name>measure</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DeletionTime</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * A special DeletionTime that signifies that there is no top-level (row) tombstone.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>DeletionTime</name></type> <name>LIVE</name> <init>= <expr><operator>new</operator> <call><name>DeletionTime</name><argument_list>(<argument><expr><name><name>Long</name><operator>.</operator><name>MIN_VALUE</name></name></expr></argument>, <argument><expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Serializer</name></type> <name>serializer</name> <init>= <expr><operator>new</operator> <call><name>Serializer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>long</name></type> <name>markedForDeleteAt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>localDeletionTime</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>DeletionTime</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>markedForDeleteAt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>localDeletionTime</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>markedForDeleteAt</name></name> <operator>=</operator> <name>markedForDeleteAt</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>localDeletionTime</name></name> <operator>=</operator> <name>localDeletionTime</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * A timestamp (typically in microseconds since the unix epoch, although this is not enforced) after which
     * data should be considered deleted. If set to Long.MIN_VALUE, this implies that the data has not been marked
     * for deletion at all.
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>markedForDeleteAt</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>markedForDeleteAt</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * The local server timestamp, in seconds since the unix epoch, at which this tombstone was created. This is
     * only used for purposes of purging the tombstone after gc_grace_seconds have elapsed.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>localDeletionTime</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>localDeletionTime</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns whether this DeletionTime is live, that is deletes no columns.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isLive</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>markedForDeleteAt</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Long</name><operator>.</operator><name>MIN_VALUE</name></name> <operator>&amp;&amp;</operator> <call><name>localDeletionTime</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>digest</name><parameter_list>(<parameter><decl><type><name>Digest</name></type> <name>digest</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// localDeletionTime is basically a metadata of the deletion time that tells us when it's ok to purge it.</comment>
        <comment type="line">// It's thus intrinsically a local information and shouldn't be part of the digest (which exists for</comment>
        <comment type="line">// cross-nodes comparisons).</comment>
        <expr_stmt><expr><call><name><name>digest</name><operator>.</operator><name>updateWithLong</name></name><argument_list>(<argument><expr><call><name>markedForDeleteAt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * check if this deletion time is valid - localDeletionTime can never be negative
     * @return true if it is valid
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>validate</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>localDeletionTime</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>o</name> <operator>instanceof</operator> <name>DeletionTime</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>DeletionTime</name></type> <name>that</name> <init>= <expr><operator>(</operator><name>DeletionTime</name><operator>)</operator><name>o</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>markedForDeleteAt</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>that</name><operator>.</operator><name>markedForDeleteAt</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>localDeletionTime</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>that</name><operator>.</operator><name>localDeletionTime</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Objects</name><operator>.</operator><name>hashCode</name></name><argument_list>(<argument><expr><call><name>markedForDeleteAt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>localDeletionTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"deletedAt=%d, localDeletion=%d"</literal></expr></argument>, <argument><expr><call><name>markedForDeleteAt</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>localDeletionTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<parameter><decl><type><name>DeletionTime</name></type> <name>dt</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>markedForDeleteAt</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>dt</name><operator>.</operator><name>markedForDeleteAt</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name>markedForDeleteAt</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <call><name><name>dt</name><operator>.</operator><name>markedForDeleteAt</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name>localDeletionTime</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>dt</name><operator>.</operator><name>localDeletionTime</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name>localDeletionTime</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <call><name><name>dt</name><operator>.</operator><name>localDeletionTime</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>supersedes</name><parameter_list>(<parameter><decl><type><name>DeletionTime</name></type> <name>dt</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>markedForDeleteAt</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <call><name><name>dt</name><operator>.</operator><name>markedForDeleteAt</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>markedForDeleteAt</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>dt</name><operator>.</operator><name>markedForDeleteAt</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>localDeletionTime</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <call><name><name>dt</name><operator>.</operator><name>localDeletionTime</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>deletes</name><parameter_list>(<parameter><decl><type><name>LivenessInfo</name></type> <name>info</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>deletes</name><argument_list>(<argument><expr><call><name><name>info</name><operator>.</operator><name>timestamp</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>deletes</name><parameter_list>(<parameter><decl><type><name><name>Cell</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>cell</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>deletes</name><argument_list>(<argument><expr><call><name><name>cell</name><operator>.</operator><name>timestamp</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>deletes</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>timestamp</name> <operator>&lt;=</operator> <call><name>markedForDeleteAt</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>dataSize</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><literal type="number">12</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>unsharedHeapSize</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>LIVE</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><name>EMPTY_SIZE</name></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Serializer</name> <super_list><implements>implements <super><name><name>ISerializer</name><argument_list type="generic">&lt;<argument><name>DeletionTime</name></argument>&gt;</argument_list></name></super></implements></super_list>
    <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<parameter><decl><type><name>DeletionTime</name></type> <name>delTime</name></decl></parameter>, <parameter><decl><type><name>DataOutputPlus</name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>delTime</name><operator>.</operator><name>localDeletionTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeLong</name></name><argument_list>(<argument><expr><call><name><name>delTime</name><operator>.</operator><name>markedForDeleteAt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>DeletionTime</name></type> <name>deserialize</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>ldt</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>mfda</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readLong</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><ternary><condition><expr><name>mfda</name> <operator>==</operator> <name><name>Long</name><operator>.</operator><name>MIN_VALUE</name></name> <operator>&amp;&amp;</operator> <name>ldt</name> <operator>==</operator> <name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr>
                 ?</condition><then> <expr><name>LIVE</name></expr>
                 </then><else>: <expr><operator>new</operator> <call><name>DeletionTime</name><argument_list>(<argument><expr><name>mfda</name></expr></argument>, <argument><expr><name>ldt</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>skip</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>skipBytesFully</name></name><argument_list>(<argument><expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>long</name></type> <name>serializedSize</name><parameter_list>(<parameter><decl><type><name>DeletionTime</name></type> <name>delTime</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>TypeSizes</name><operator>.</operator><name>sizeof</name></name><argument_list>(<argument><expr><call><name><name>delTime</name><operator>.</operator><name>localDeletionTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                 <operator>+</operator> <call><name><name>TypeSizes</name><operator>.</operator><name>sizeof</name></name><argument_list>(<argument><expr><call><name><name>delTime</name><operator>.</operator><name>markedForDeleteAt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
