<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/sunflow.jar.src/org/sunflow/core/light/ImageBasedLight.java"><package>package <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>light</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>SunflowAPI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>IntersectionState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>LightSample</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>LightSource</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>ParameterList</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>PrimitiveList</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>Ray</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>Shader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>ShadingState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>Texture</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>TextureCache</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>image</name><operator>.</operator><name>Bitmap</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>image</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>BoundingBox</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Matrix4</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>OrthoNormalBasis</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Point3</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>QMC</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Vector3</name></name>;</import>

<class><specifier>public</specifier> class <name>ImageBasedLight</name> <super_list><implements>implements <super><name>PrimitiveList</name></super>, <super><name>LightSource</name></super>, <super><name>Shader</name></super></implements></super_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <name>Texture</name></type> <name>texture</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>OrthoNormalBasis</name></type> <name>basis</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>numSamples</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>jacobian</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>float</name><index>[]</index></name></type> <name>colHistogram</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>float</name><index>[]</index><index>[]</index></name></type> <name>imageHistogram</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>Vector3</name><index>[]</index></name></type> <name>samples</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>Color</name><index>[]</index></name></type> <name>colors</name></decl>;</decl_stmt>
  
  <constructor><specifier>public</specifier> <name>ImageBasedLight</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>updateBasis</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Vector3</name><argument_list>(<argument><expr><literal type="number">0.0F</literal></expr></argument>, <argument><expr><literal type="number">0.0F</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.0F</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Vector3</name><argument_list>(<argument><expr><literal type="number">0.0F</literal></expr></argument>, <argument><expr><literal type="number">1.0F</literal></expr></argument>, <argument><expr><literal type="number">0.0F</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>numSamples</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
  </block_content>}</block></constructor>
  
  <function><type><specifier>private</specifier> <name>void</name></type> <name>updateBasis</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>paramVector31</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>paramVector32</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>paramVector31</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>paramVector32</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>basis</name></name> <operator>=</operator> <call><name><name>OrthoNormalBasis</name><operator>.</operator><name>makeFromWV</name></name><argument_list>(<argument><expr><name>paramVector31</name></expr></argument>, <argument><expr><name>paramVector32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>basis</name><operator>.</operator><name>swapWU</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>basis</name><operator>.</operator><name>flipV</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt> 
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>ParameterList</name></type> <name>paramParameterList</name></decl></parameter>, <parameter><decl><type><name>SunflowAPI</name></type> <name>paramSunflowAPI</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>updateBasis</name><argument_list>(<argument><expr><call><name><name>paramParameterList</name><operator>.</operator><name>getVector</name></name><argument_list>(<argument><expr><literal type="string">"center"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>paramParameterList</name><operator>.</operator><name>getVector</name></name><argument_list>(<argument><expr><literal type="string">"up"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>numSamples</name></name> <operator>=</operator> <call><name><name>paramParameterList</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"samples"</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>numSamples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>str</name> <init>= <expr><call><name><name>paramParameterList</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"texture"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>str</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>texture</name></name> <operator>=</operator> <call><name><name>TextureCache</name><operator>.</operator><name>getTexture</name></name><argument_list>(<argument><expr><call><name><name>paramSunflowAPI</name><operator>.</operator><name>resolveTextureFilename</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>texture</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt> 
    <decl_stmt><decl><type><name>Bitmap</name></type> <name>bitmap</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>texture</name><operator>.</operator><name>getBitmap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>bitmap</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt> 
    <if_stmt><if>if <condition>(<expr><name>str</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>imageHistogram</name></name> <operator>=</operator> <operator>new</operator> <name><name>float</name><index>[<expr><call><name><name>bitmap</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr>]</index><index>[<expr><call><name><name>bitmap</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>colHistogram</name></name> <operator>=</operator> <operator>new</operator> <name><name>float</name><index>[<expr><call><name><name>bitmap</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f1</name> <init>= <expr><literal type="number">1.0F</literal> <operator>/</operator> <call><name><name>bitmap</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f2</name> <init>= <expr><literal type="number">1.0F</literal> <operator>/</operator> <call><name><name>bitmap</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>byte</name></type> <name>b</name></decl>;</decl_stmt>
      <for>for <control>(<init><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <call><name><name>bitmap</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>byte</name></type> <name>b1</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>b1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b1</name> <operator>&lt;</operator> <call><name><name>bitmap</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>b1</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>float</name></type> <name>f3</name> <init>= <expr><operator>(</operator><name>b</name> <operator>+</operator> <literal type="number">0.5F</literal><operator>)</operator> <operator>*</operator> <name>f1</name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>float</name></type> <name>f4</name> <init>= <expr><operator>(</operator><name>b1</name> <operator>+</operator> <literal type="number">0.5F</literal><operator>)</operator> <operator>*</operator> <name>f2</name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>Color</name></type> <name>color</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>texture</name><operator>.</operator><name>getPixel</name></name><argument_list>(<argument><expr><name>f3</name></expr></argument>, <argument><expr><name>f4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>this</name><operator>.</operator><name>imageHistogram</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>b1</name></expr>]</index></name> <operator>=</operator> <call><name><name>color</name><operator>.</operator><name>getLuminance</name></name><argument_list>()</argument_list></call> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><name><name>Math</name><operator>.</operator><name>PI</name></name> <operator>*</operator> <name>f4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>b1</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>imageHistogram</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>b1</name></expr>]</index></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>imageHistogram</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>b1</name></expr>]</index></name> <operator>+</operator> <name><name>this</name><operator>.</operator><name>imageHistogram</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>b1</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
        </block_content>}</block></for> 
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>colHistogram</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>imageHistogram</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><call><name><name>bitmap</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>b</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><name><name>this</name><operator>.</operator><name>colHistogram</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>colHistogram</name><index>[<expr><name>b</name></expr>]</index></name> <operator>+</operator> <name><name>this</name><operator>.</operator><name>colHistogram</name><index>[<expr><name>b</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
        <for>for <control>(<init><expr><name>b1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b1</name> <operator>&lt;</operator> <call><name><name>bitmap</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>b1</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
          <expr_stmt><expr><name><name>this</name><operator>.</operator><name>imageHistogram</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>b1</name></expr>]</index></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>imageHistogram</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>b1</name></expr>]</index></name> <operator>/</operator> <name><name>this</name><operator>.</operator><name>imageHistogram</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><call><name><name>bitmap</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for> 
      </block_content>}</block></for> 
      <for>for <control>(<init><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <call><name><name>bitmap</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>colHistogram</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>colHistogram</name><index>[<expr><name>b</name></expr>]</index></name> <operator>/</operator> <name><name>this</name><operator>.</operator><name>colHistogram</name><index>[<expr><call><name><name>bitmap</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for> 
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>jacobian</name></name> <operator>=</operator> <literal type="number">19.739208F</literal> <operator>/</operator> <operator>(</operator><call><name><name>bitmap</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call> <operator>*</operator> <call><name><name>bitmap</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt> 
    <if_stmt><if>if <condition>(<expr><call><name><name>paramParameterList</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"fixed"</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>this</name><operator>.</operator><name>samples</name></name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>samples</name></name> <operator>=</operator> <operator>new</operator> <name><name>Vector3</name><index>[<expr><name><name>this</name><operator>.</operator><name>numSamples</name></name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>colors</name></name> <operator>=</operator> <operator>new</operator> <name><name>Color</name><index>[<expr><name><name>this</name><operator>.</operator><name>numSamples</name></name></expr>]</index></name></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>byte</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name><name>this</name><operator>.</operator><name>numSamples</name></name></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>double</name></type> <name>d1</name> <init>= <expr><name>b</name> <operator>/</operator> <name><name>this</name><operator>.</operator><name>numSamples</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>d2</name> <init>= <expr><call><name><name>QMC</name><operator>.</operator><name>halton</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>byte</name></type> <name>b1</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>b1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>d1</name> <operator>&gt;=</operator> <name><name>this</name><operator>.</operator><name>colHistogram</name><index>[<expr><name>b1</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>b1</name> <operator>&lt;</operator> <name><name>this</name><operator>.</operator><name>colHistogram</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>b1</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
        <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>arrayOfFloat</name> <init>= <expr><name><name>this</name><operator>.</operator><name>imageHistogram</name><index>[<expr><name>b1</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>byte</name></type> <name>b2</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>b2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>d2</name> <operator>&gt;=</operator> <name><name>arrayOfFloat</name><index>[<expr><name>b2</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>b2</name> <operator>&lt;</operator> <name><name>arrayOfFloat</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>b2</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
        <decl_stmt><decl><type><name>float</name></type> <name>f1</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name>b1</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>d1</name> <operator>/</operator> <name><name>this</name><operator>.</operator><name>colHistogram</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><operator>(</operator><name>d1</name> <operator>-</operator> <name><name>this</name><operator>.</operator><name>colHistogram</name><index>[<expr><name>b1</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>this</name><operator>.</operator><name>colHistogram</name><index>[<expr><name>b1</name></expr>]</index></name> <operator>-</operator> <name><name>this</name><operator>.</operator><name>colHistogram</name><index>[<expr><name>b1</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>f2</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name>b2</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>d2</name> <operator>/</operator> <name><name>arrayOfFloat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><operator>(</operator><name>d2</name> <operator>-</operator> <name><name>arrayOfFloat</name><index>[<expr><name>b2</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>arrayOfFloat</name><index>[<expr><name>b2</name></expr>]</index></name> <operator>-</operator> <name><name>arrayOfFloat</name><index>[<expr><name>b2</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>f3</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>b1</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>this</name><operator>.</operator><name>colHistogram</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><operator>(</operator><name><name>this</name><operator>.</operator><name>colHistogram</name><index>[<expr><name>b1</name></expr>]</index></name> <operator>-</operator> <name><name>this</name><operator>.</operator><name>colHistogram</name><index>[<expr><name>b1</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>f4</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>b2</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>arrayOfFloat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><operator>(</operator><name><name>arrayOfFloat</name><index>[<expr><name>b2</name></expr>]</index></name> <operator>-</operator> <name><name>arrayOfFloat</name><index>[<expr><name>b2</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>f5</name> <init>= <expr><operator>(</operator><name>b1</name> <operator>+</operator> <name>f1</name><operator>)</operator> <operator>/</operator> <name><name>this</name><operator>.</operator><name>colHistogram</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>f6</name> <init>= <expr><operator>(</operator><name>b2</name> <operator>+</operator> <name>f2</name><operator>)</operator> <operator>/</operator> <name><name>arrayOfFloat</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>f7</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><name>f6</name> <operator>*</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>this</name><operator>.</operator><name>jacobian</name></name> <operator>/</operator> <name><name>this</name><operator>.</operator><name>numSamples</name></name> <operator>*</operator> <name>f3</name> <operator>*</operator> <name>f4</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>samples</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <call><name>getDirection</name><argument_list>(<argument><expr><name>f5</name></expr></argument>, <argument><expr><name>f6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>basis</name><operator>.</operator><name>transform</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>samples</name><index>[<expr><name>b</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>colors</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>texture</name><operator>.</operator><name>getPixel</name></name><argument_list>(<argument><expr><name>f5</name></expr></argument>, <argument><expr><name>f6</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>mul</name><argument_list>(<argument><expr><name>f7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for> 
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>samples</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>colors</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt> 
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>paramString</name></decl></parameter>, <parameter><decl><type><name>SunflowAPI</name></type> <name>paramSunflowAPI</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>paramSunflowAPI</name><operator>.</operator><name>geometry</name></name><argument_list>(<argument><expr><name>paramString</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>paramSunflowAPI</name><operator>.</operator><name>lookupGeometry</name></name><argument_list>(<argument><expr><name>paramString</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return;</return></block_content></block></if></if_stmt> 
    <expr_stmt><expr><call><name><name>paramSunflowAPI</name><operator>.</operator><name>shader</name></name><argument_list>(<argument><expr><name>paramString</name> <operator>+</operator> <literal type="string">".shader"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>paramSunflowAPI</name><operator>.</operator><name>parameter</name></name><argument_list>(<argument><expr><literal type="string">"shaders"</literal></expr></argument>, <argument><expr><name>paramString</name> <operator>+</operator> <literal type="string">".shader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>paramSunflowAPI</name><operator>.</operator><name>instance</name></name><argument_list>(<argument><expr><name>paramString</name> <operator>+</operator> <literal type="string">".instance"</literal></expr></argument>, <argument><expr><name>paramString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>paramSunflowAPI</name><operator>.</operator><name>light</name></name><argument_list>(<argument><expr><name>paramString</name> <operator>+</operator> <literal type="string">".light"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>prepareShadingState</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>paramShadingState</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>paramShadingState</name><operator>.</operator><name>includeLights</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>paramShadingState</name><operator>.</operator><name>setShader</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>intersectPrimitive</name><parameter_list>(<parameter><decl><type><name>Ray</name></type> <name>paramRay</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>paramInt</name></decl></parameter>, <parameter><decl><type><name>IntersectionState</name></type> <name>paramIntersectionState</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>paramRay</name><operator>.</operator><name>getMax</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Float</name><operator>.</operator><name>POSITIVE_INFINITY</name></name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>paramIntersectionState</name><operator>.</operator><name>setIntersection</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0.0F</literal></expr></argument>, <argument><expr><literal type="number">0.0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>int</name></type> <name>getNumPrimitives</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>float</name></type> <name>getPrimitiveBound</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>paramInt1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>paramInt2</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="number">0.0F</literal></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>BoundingBox</name></type> <name>getWorldBounds</name><parameter_list>(<parameter><decl><type><name>Matrix4</name></type> <name>paramMatrix4</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="null">null</literal></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>PrimitiveList</name></type> <name>getBakingPrimitives</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="null">null</literal></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>int</name></type> <name>getNumSamples</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>this</name><operator>.</operator><name>numSamples</name></name></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>getSamples</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>paramShadingState</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>samples</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>byte</name></type> <name>b1</name> <init>= <expr><ternary><condition><expr><operator>(</operator><call><name><name>paramShadingState</name><operator>.</operator><name>getDiffuseDepth</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name><name>this</name><operator>.</operator><name>numSamples</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>byte</name></type> <name>b2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b2</name> <operator>&lt;</operator> <name>b1</name></expr>;</condition> <incr><expr><name>b2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>double</name></type> <name>d1</name> <init>= <expr><call><name><name>paramShadingState</name><operator>.</operator><name>getRandom</name></name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>d2</name> <init>= <expr><call><name><name>paramShadingState</name><operator>.</operator><name>getRandom</name></name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>byte</name></type> <name>b3</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>b3</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>d1</name> <operator>&gt;=</operator> <name><name>this</name><operator>.</operator><name>colHistogram</name><index>[<expr><name>b3</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>b3</name> <operator>&lt;</operator> <name><name>this</name><operator>.</operator><name>colHistogram</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>b3</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
        <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>arrayOfFloat</name> <init>= <expr><name><name>this</name><operator>.</operator><name>imageHistogram</name><index>[<expr><name>b3</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>byte</name></type> <name>b4</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>b4</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>d2</name> <operator>&gt;=</operator> <name><name>arrayOfFloat</name><index>[<expr><name>b4</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>b4</name> <operator>&lt;</operator> <name><name>arrayOfFloat</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>b4</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
        <decl_stmt><decl><type><name>float</name></type> <name>f1</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name>b3</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>d1</name> <operator>/</operator> <name><name>this</name><operator>.</operator><name>colHistogram</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><operator>(</operator><name>d1</name> <operator>-</operator> <name><name>this</name><operator>.</operator><name>colHistogram</name><index>[<expr><name>b3</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>this</name><operator>.</operator><name>colHistogram</name><index>[<expr><name>b3</name></expr>]</index></name> <operator>-</operator> <name><name>this</name><operator>.</operator><name>colHistogram</name><index>[<expr><name>b3</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>f2</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name>b4</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>d2</name> <operator>/</operator> <name><name>arrayOfFloat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><operator>(</operator><name>d2</name> <operator>-</operator> <name><name>arrayOfFloat</name><index>[<expr><name>b4</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>arrayOfFloat</name><index>[<expr><name>b4</name></expr>]</index></name> <operator>-</operator> <name><name>arrayOfFloat</name><index>[<expr><name>b4</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>f3</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>b3</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>this</name><operator>.</operator><name>colHistogram</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><operator>(</operator><name><name>this</name><operator>.</operator><name>colHistogram</name><index>[<expr><name>b3</name></expr>]</index></name> <operator>-</operator> <name><name>this</name><operator>.</operator><name>colHistogram</name><index>[<expr><name>b3</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>f4</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>b4</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>arrayOfFloat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><operator>(</operator><name><name>arrayOfFloat</name><index>[<expr><name>b4</name></expr>]</index></name> <operator>-</operator> <name><name>arrayOfFloat</name><index>[<expr><name>b4</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>f5</name> <init>= <expr><operator>(</operator><name>b3</name> <operator>+</operator> <name>f1</name><operator>)</operator> <operator>/</operator> <name><name>this</name><operator>.</operator><name>colHistogram</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>f6</name> <init>= <expr><operator>(</operator><name>b4</name> <operator>+</operator> <name>f2</name><operator>)</operator> <operator>/</operator> <name><name>arrayOfFloat</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>f7</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><name>f6</name> <operator>*</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>this</name><operator>.</operator><name>jacobian</name></name> <operator>/</operator> <name>b1</name> <operator>*</operator> <name>f3</name> <operator>*</operator> <name>f4</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Vector3</name></type> <name>vector3</name> <init>= <expr><call><name>getDirection</name><argument_list>(<argument><expr><name>f5</name></expr></argument>, <argument><expr><name>f6</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>basis</name><operator>.</operator><name>transform</name></name><argument_list>(<argument><expr><name>vector3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>Vector3</name><operator>.</operator><name>dot</name></name><argument_list>(<argument><expr><name>vector3</name></expr></argument>, <argument><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getGeoNormal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0.0F</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>LightSample</name></type> <name>lightSample</name> <init>= <expr><operator>new</operator> <call><name>LightSample</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>lightSample</name><operator>.</operator><name>setShadowRay</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Ray</name><argument_list>(<argument><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>vector3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>lightSample</name><operator>.</operator><name>getShadowRay</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setMax</name><argument_list>(<argument><expr><name><name>Float</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>Color</name></type> <name>color</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>texture</name><operator>.</operator><name>getPixel</name></name><argument_list>(<argument><expr><name>f5</name></expr></argument>, <argument><expr><name>f6</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>lightSample</name><operator>.</operator><name>setRadiance</name></name><argument_list>(<argument><expr><name>color</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>lightSample</name><operator>.</operator><name>getDiffuseRadiance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>mul</name><argument_list>(<argument><expr><name>f7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>lightSample</name><operator>.</operator><name>getSpecularRadiance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>mul</name><argument_list>(<argument><expr><name>f7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>lightSample</name><operator>.</operator><name>traceShadow</name></name><argument_list>(<argument><expr><name>paramShadingState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>paramShadingState</name><operator>.</operator><name>addSample</name></name><argument_list>(<argument><expr><name>lightSample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt> 
      </block_content>}</block></for> 
    </block_content>}</block></if> <else>else <block>{<block_content>
      <for>for <control>(<init><decl><type><name>byte</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name><name>this</name><operator>.</operator><name>numSamples</name></name></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>Vector3</name><operator>.</operator><name>dot</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>samples</name><index>[<expr><name>b</name></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getGeoNormal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0.0F</literal> <operator>&amp;&amp;</operator> <call><name><name>Vector3</name><operator>.</operator><name>dot</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>samples</name><index>[<expr><name>b</name></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0.0F</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>LightSample</name></type> <name>lightSample</name> <init>= <expr><operator>new</operator> <call><name>LightSample</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>lightSample</name><operator>.</operator><name>setShadowRay</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Ray</name><argument_list>(<argument><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>samples</name><index>[<expr><name>b</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>lightSample</name><operator>.</operator><name>getShadowRay</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setMax</name><argument_list>(<argument><expr><name><name>Float</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>lightSample</name><operator>.</operator><name>setRadiance</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>colors</name><index>[<expr><name>b</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>colors</name><index>[<expr><name>b</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>lightSample</name><operator>.</operator><name>traceShadow</name></name><argument_list>(<argument><expr><name>paramShadingState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>paramShadingState</name><operator>.</operator><name>addSample</name></name><argument_list>(<argument><expr><name>lightSample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt> 
      </block_content>}</block></for> 
    </block_content>}</block></else></if_stmt> 
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>getPhoton</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>paramDouble1</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>paramDouble2</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>paramDouble3</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>paramDouble4</name></decl></parameter>, <parameter><decl><type><name>Point3</name></type> <name>paramPoint3</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>paramVector3</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>paramColor</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>
  
  <function><type><specifier>public</specifier> <name>Color</name></type> <name>getRadiance</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>paramShadingState</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><ternary><condition><expr><call><name><name>paramShadingState</name><operator>.</operator><name>includeLights</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name>getColor</name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>basis</name><operator>.</operator><name>untransform</name></name><argument_list>(<argument><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getRay</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDirection</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Vector3</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>Color</name><operator>.</operator><name>BLACK</name></name></expr></else></ternary></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>private</specifier> <name>Color</name></type> <name>getColor</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>paramVector3</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type> <name>d1</name> <init>= <expr><literal type="number">0.0D</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>d2</name> <init>= <expr><literal type="number">0.0D</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>d1</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>acos</name></name><argument_list>(<argument><expr><name><name>paramVector3</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>d2</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>atan2</name></name><argument_list>(<argument><expr><name><name>paramVector3</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>paramVector3</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f1</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><literal type="number">0.5D</literal> <operator>-</operator> <literal type="number">0.5D</literal> <operator>*</operator> <name>d2</name> <operator>/</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f2</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>d1</name> <operator>/</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>this</name><operator>.</operator><name>texture</name><operator>.</operator><name>getPixel</name></name><argument_list>(<argument><expr><name>f1</name></expr></argument>, <argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>private</specifier> <name>Vector3</name></type> <name>getDirection</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>paramFloat1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>paramFloat2</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Vector3</name></type> <name>vector3</name> <init>= <expr><operator>new</operator> <call><name>Vector3</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>d1</name> <init>= <expr><literal type="number">0.0D</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>d2</name> <init>= <expr><literal type="number">0.0D</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>d2</name> <operator>=</operator> <operator>(</operator><name>paramFloat1</name> <operator>*</operator> <literal type="number">2.0F</literal><operator>)</operator> <operator>*</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>d1</name> <operator>=</operator> <name>paramFloat2</name> <operator>*</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>d3</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>vector3</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>-</operator><name>d3</name> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name>d2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>vector3</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>vector3</name><operator>.</operator><name>z</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>d3</name> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><name>d2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
    <return>return <expr><name>vector3</name></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>scatterPhoton</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>paramShadingState</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>paramColor</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>
  
  <function><type><specifier>public</specifier> <name>float</name></type> <name>getPower</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="number">0.0F</literal></expr>;</return>
  </block_content>}</block></function>
}</block></class>


<comment type="block">/* Location:              /Users/wang/Downloads/sunflow2 copy.jar!/org/sunflow/core/light/ImageBasedLight.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.3
 */</comment></unit>
