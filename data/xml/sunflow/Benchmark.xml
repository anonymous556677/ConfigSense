<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/sunflow/src/org/sunflow/Benchmark.java"><package>package <name><name>org</name><operator>.</operator><name>sunflow</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>BufferedImage</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>imageio</name><operator>.</operator><name>ImageIO</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>Display</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>Tesselatable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>camera</name><operator>.</operator><name>PinholeLens</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>display</name><operator>.</operator><name>FileDisplay</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>light</name><operator>.</operator><name>TriangleMeshLight</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>primitive</name><operator>.</operator><name>Sphere</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>primitive</name><operator>.</operator><name>TriangleMesh</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>shader</name><operator>.</operator><name>DiffuseShader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>shader</name><operator>.</operator><name>GlassShader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>shader</name><operator>.</operator><name>MirrorShader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>tesselatable</name><operator>.</operator><name>Teapot</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>image</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Matrix4</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Point3</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Vector3</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>system</name><operator>.</operator><name>BenchmarkFramework</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>system</name><operator>.</operator><name>BenchmarkTest</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>system</name><operator>.</operator><name>UI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>system</name><operator>.</operator><name>UserInterface</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>system</name><operator>.</operator><name>UI</name><operator>.</operator><name>Module</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>system</name><operator>.</operator><name>UI</name><operator>.</operator><name>PrintLevel</name></name>;</import>

<class><specifier>public</specifier> class <name>Benchmark</name> <super_list><implements>implements <super><name>BenchmarkTest</name></super>, <super><name>UserInterface</name></super>, <super><name>Display</name></super></implements></super_list> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>resolution</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>showOutput</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>showBenchmarkOutput</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>saveOutput</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>threads</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>int</name><index>[]</index></name></type> <name>referenceImage</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>int</name><index>[]</index></name></type> <name>validationImage</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>errorThreshold</name></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Benchmark options:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"  -regen                        Regenerate reference images for a variety of sizes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"  -bench [threads] [resolution] Run a single iteration of the benchmark using the specified thread count and image resolution"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"                                Default: threads=0 (auto-detect cpus), resolution=256"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"-regen"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>sizes</name> <init>= <expr><block>{ <expr><literal type="number">32</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">96</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">256</literal></expr>, <expr><literal type="number">384</literal></expr>, <expr><literal type="number">512</literal></expr> }</block></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>s</name> <range>: <expr><name>sizes</name></expr></range></decl></init>)</control> <block>{<block_content>
                <comment type="line">// run a single iteration to generate the reference image</comment>
                <decl_stmt><decl><type><name>Benchmark</name></type> <name>b</name> <init>= <expr><operator>new</operator> <call><name>Benchmark</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>kernelMain</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"-bench"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>threads</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>resolution</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>threads</name> <operator>=</operator> <call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>resolution</name> <operator>=</operator> <call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name>Benchmark</name></type> <name>benchmark</name> <init>= <expr><operator>new</operator> <call><name>Benchmark</name><argument_list>(<argument><expr><name>resolution</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>threads</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>benchmark</name><operator>.</operator><name>kernelBegin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>benchmark</name><operator>.</operator><name>kernelMain</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>benchmark</name><operator>.</operator><name>kernelEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <constructor><specifier>public</specifier> <name>Benchmark</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><literal type="number">384</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>Benchmark</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>resolution</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>showOutput</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>showBenchmarkOutput</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>saveOutput</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>resolution</name></expr></argument>, <argument><expr><name>showOutput</name></expr></argument>, <argument><expr><name>showBenchmarkOutput</name></expr></argument>, <argument><expr><name>saveOutput</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>Benchmark</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>resolution</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>showOutput</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>showBenchmarkOutput</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>saveOutput</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>threads</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>resolution</name></name> <operator>=</operator> <name>resolution</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>showOutput</name></name> <operator>=</operator> <name>showOutput</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>showBenchmarkOutput</name></name> <operator>=</operator> <name>showBenchmarkOutput</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>saveOutput</name></name> <operator>=</operator> <name>saveOutput</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>threads</name></name> <operator>=</operator> <name>threads</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>errorThreshold</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
        <comment type="line">// fetch reference image from resources (jar file or classpath)</comment>
        <if_stmt><if>if <condition>(<expr><name>saveOutput</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>URL</name></type> <name>imageURL</name> <init>= <expr><call><name><name>Benchmark</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getResource</name></name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"/resources/golden_%04X.png"</literal></expr></argument>, <argument><expr><name>resolution</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>imageURL</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printError</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>BENCH</name></name></expr></argument>, <argument><expr><literal type="string">"Unable to find reference frame!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>BENCH</name></name></expr></argument>, <argument><expr><literal type="string">"Loading reference image from: %s"</literal></expr></argument>, <argument><expr><name>imageURL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>BufferedImage</name></type> <name>bi</name> <init>= <expr><call><name><name>ImageIO</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>imageURL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>bi</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>resolution</name> <operator>||</operator> <call><name><name>bi</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>resolution</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printError</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>BENCH</name></name></expr></argument>, <argument><expr><literal type="string">"Reference image has invalid resolution! Expected %dx%d found %dx%d"</literal></expr></argument>, <argument><expr><name>resolution</name></expr></argument>, <argument><expr><name>resolution</name></expr></argument>, <argument><expr><call><name><name>bi</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>bi</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>referenceImage</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><name>resolution</name> <operator>*</operator> <name>resolution</name></expr>]</index></name></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>resolution</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>resolution</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><name><name>referenceImage</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>bi</name><operator>.</operator><name>getRGB</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>resolution</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for> <comment type="line">// flip</comment>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printError</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>BENCH</name></name></expr></argument>, <argument><expr><literal type="string">"Unable to load reference frame!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// 10 iterations maximum - 10 minute time limit</comment>
        <decl_stmt><decl><type><name>BenchmarkFramework</name></type> <name>framework</name> <init>= <expr><operator>new</operator> <call><name>BenchmarkFramework</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">600</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>framework</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <class><specifier>private</specifier> class <name>BenchmarkScene</name> <super_list><extends>extends <super><name>SunflowAPI</name></super></extends></super_list> <block>{
        <constructor><specifier>public</specifier> <name>BenchmarkScene</name><parameter_list>()</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>build</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>render</name><argument_list>(<argument><expr><name><name>SunflowAPI</name><operator>.</operator><name>DEFAULT_OPTIONS</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>saveOutput</name></expr> ?</condition><then> <expr><operator>new</operator> <call><name>FileDisplay</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"resources/golden_%04X.png"</literal></expr></argument>, <argument><expr><name>resolution</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>Benchmark</name><operator>.</operator><name>this</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>build</name><parameter_list>()</parameter_list> <block>{<block_content>
            <comment type="line">// settings</comment>
            <expr_stmt><expr><call><name>parameter</name><argument_list>(<argument><expr><literal type="string">"threads"</literal></expr></argument>, <argument><expr><name>threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// spawn regular priority threads</comment>
            <expr_stmt><expr><call><name>parameter</name><argument_list>(<argument><expr><literal type="string">"threads.lowPriority"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>parameter</name><argument_list>(<argument><expr><literal type="string">"resolutionX"</literal></expr></argument>, <argument><expr><name>resolution</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>parameter</name><argument_list>(<argument><expr><literal type="string">"resolutionY"</literal></expr></argument>, <argument><expr><name>resolution</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>parameter</name><argument_list>(<argument><expr><literal type="string">"aa.min"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>parameter</name><argument_list>(<argument><expr><literal type="string">"aa.max"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>parameter</name><argument_list>(<argument><expr><literal type="string">"filter"</literal></expr></argument>, <argument><expr><literal type="string">"triangle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>parameter</name><argument_list>(<argument><expr><literal type="string">"depths.diffuse"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>parameter</name><argument_list>(<argument><expr><literal type="string">"depths.reflection"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>parameter</name><argument_list>(<argument><expr><literal type="string">"depths.refraction"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>parameter</name><argument_list>(<argument><expr><literal type="string">"bucket.order"</literal></expr></argument>, <argument><expr><literal type="string">"hilbert"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>parameter</name><argument_list>(<argument><expr><literal type="string">"bucket.size"</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// gi options</comment>
            <expr_stmt><expr><call><name>parameter</name><argument_list>(<argument><expr><literal type="string">"gi.engine"</literal></expr></argument>, <argument><expr><literal type="string">"igi"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>parameter</name><argument_list>(<argument><expr><literal type="string">"gi.igi.samples"</literal></expr></argument>, <argument><expr><literal type="number">90</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>parameter</name><argument_list>(<argument><expr><literal type="string">"gi.igi.c"</literal></expr></argument>, <argument><expr><literal type="number">0.000008f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>options</name><argument_list>(<argument><expr><name><name>SunflowAPI</name><operator>.</operator><name>DEFAULT_OPTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>buildCornellBox</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>buildCornellBox</name><parameter_list>()</parameter_list> <block>{<block_content>
            <comment type="line">// camera</comment>
            <expr_stmt><expr><call><name>parameter</name><argument_list>(<argument><expr><literal type="string">"eye"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>Point3</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">600</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>parameter</name><argument_list>(<argument><expr><literal type="string">"target"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>Point3</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>parameter</name><argument_list>(<argument><expr><literal type="string">"up"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>Vector3</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>parameter</name><argument_list>(<argument><expr><literal type="string">"fov"</literal></expr></argument>, <argument><expr><literal type="number">45.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>camera</name><argument_list>(<argument><expr><literal type="string">"main_camera"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>PinholeLens</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>parameter</name><argument_list>(<argument><expr><literal type="string">"camera"</literal></expr></argument>, <argument><expr><literal type="string">"main_camera"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>options</name><argument_list>(<argument><expr><name><name>SunflowAPI</name><operator>.</operator><name>DEFAULT_OPTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// cornell box</comment>
            <decl_stmt><decl><type><name>Color</name></type> <name>gray</name> <init>= <expr><operator>new</operator> <call><name>Color</name><argument_list>(<argument><expr><literal type="number">0.70f</literal></expr></argument>, <argument><expr><literal type="number">0.70f</literal></expr></argument>, <argument><expr><literal type="number">0.70f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Color</name></type> <name>blue</name> <init>= <expr><operator>new</operator> <call><name>Color</name><argument_list>(<argument><expr><literal type="number">0.25f</literal></expr></argument>, <argument><expr><literal type="number">0.25f</literal></expr></argument>, <argument><expr><literal type="number">0.80f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Color</name></type> <name>red</name> <init>= <expr><operator>new</operator> <call><name>Color</name><argument_list>(<argument><expr><literal type="number">0.80f</literal></expr></argument>, <argument><expr><literal type="number">0.25f</literal></expr></argument>, <argument><expr><literal type="number">0.25f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Color</name></type> <name>emit</name> <init>= <expr><operator>new</operator> <call><name>Color</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>float</name></type> <name>minX</name> <init>= <expr><operator>-</operator><literal type="number">200</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>maxX</name> <init>= <expr><literal type="number">200</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>minY</name> <init>= <expr><operator>-</operator><literal type="number">160</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>maxY</name> <init>= <expr><name>minY</name> <operator>+</operator> <literal type="number">400</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>minZ</name> <init>= <expr><operator>-</operator><literal type="number">250</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>maxZ</name> <init>= <expr><literal type="number">200</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>verts</name> <init>= <expr><operator>new</operator> <name><name>float</name><index>[]</index></name> <block>{ <expr><name>minX</name></expr>, <expr><name>minY</name></expr>, <expr><name>minZ</name></expr>, <expr><name>maxX</name></expr>, <expr><name>minY</name></expr>, <expr><name>minZ</name></expr>,
                    <expr><name>maxX</name></expr>, <expr><name>minY</name></expr>, <expr><name>maxZ</name></expr>, <expr><name>minX</name></expr>, <expr><name>minY</name></expr>, <expr><name>maxZ</name></expr>, <expr><name>minX</name></expr>, <expr><name>maxY</name></expr>, <expr><name>minZ</name></expr>, <expr><name>maxX</name></expr>,
                    <expr><name>maxY</name></expr>, <expr><name>minZ</name></expr>, <expr><name>maxX</name></expr>, <expr><name>maxY</name></expr>, <expr><name>maxZ</name></expr>, <expr><name>minX</name></expr>, <expr><name>maxY</name></expr>, <expr><name>maxZ</name></expr>, }</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>indices</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>,
                    <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>parameter</name><argument_list>(<argument><expr><literal type="string">"diffuse"</literal></expr></argument>, <argument><expr><name>gray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>shader</name><argument_list>(<argument><expr><literal type="string">"gray_shader"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>DiffuseShader</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>parameter</name><argument_list>(<argument><expr><literal type="string">"diffuse"</literal></expr></argument>, <argument><expr><name>red</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>shader</name><argument_list>(<argument><expr><literal type="string">"red_shader"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>DiffuseShader</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>parameter</name><argument_list>(<argument><expr><literal type="string">"diffuse"</literal></expr></argument>, <argument><expr><name>blue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>shader</name><argument_list>(<argument><expr><literal type="string">"blue_shader"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>DiffuseShader</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// build walls</comment>
            <expr_stmt><expr><call><name>parameter</name><argument_list>(<argument><expr><literal type="string">"triangles"</literal></expr></argument>, <argument><expr><name>indices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>parameter</name><argument_list>(<argument><expr><literal type="string">"points"</literal></expr></argument>, <argument><expr><literal type="string">"point"</literal></expr></argument>, <argument><expr><literal type="string">"vertex"</literal></expr></argument>, <argument><expr><name>verts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>parameter</name><argument_list>(<argument><expr><literal type="string">"faceshaders"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>geometry</name><argument_list>(<argument><expr><literal type="string">"walls"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>TriangleMesh</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// instance walls</comment>
            <expr_stmt><expr><call><name>parameter</name><argument_list>(<argument><expr><literal type="string">"shaders"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"gray_shader"</literal></expr>, <expr><literal type="string">"red_shader"</literal></expr>,
                    <expr><literal type="string">"blue_shader"</literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>instance</name><argument_list>(<argument><expr><literal type="string">"walls.instance"</literal></expr></argument>, <argument><expr><literal type="string">"walls"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// create mesh light</comment>
            <expr_stmt><expr><call><name>parameter</name><argument_list>(<argument><expr><literal type="string">"points"</literal></expr></argument>, <argument><expr><literal type="string">"point"</literal></expr></argument>, <argument><expr><literal type="string">"vertex"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>float</name><index>[]</index></name> <block>{ <expr><operator>-</operator><literal type="number">50</literal></expr>, <expr><name>maxY</name> <operator>-</operator> <literal type="number">1</literal></expr>,
                    <expr><operator>-</operator><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><name>maxY</name> <operator>-</operator> <literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">50</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><name>maxY</name> <operator>-</operator> <literal type="number">1</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><operator>-</operator><literal type="number">50</literal></expr>, <expr><name>maxY</name> <operator>-</operator> <literal type="number">1</literal></expr>, <expr><literal type="number">50</literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>parameter</name><argument_list>(<argument><expr><literal type="string">"triangles"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>parameter</name><argument_list>(<argument><expr><literal type="string">"radiance"</literal></expr></argument>, <argument><expr><name>emit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>parameter</name><argument_list>(<argument><expr><literal type="string">"samples"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>TriangleMeshLight</name></type> <name>light</name> <init>= <expr><operator>new</operator> <call><name>TriangleMeshLight</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>light</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><literal type="string">"light"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// spheres</comment>
            <expr_stmt><expr><call><name>parameter</name><argument_list>(<argument><expr><literal type="string">"eta"</literal></expr></argument>, <argument><expr><literal type="number">1.6f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>shader</name><argument_list>(<argument><expr><literal type="string">"Glass"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>GlassShader</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sphere</name><argument_list>(<argument><expr><literal type="string">"glass_sphere"</literal></expr></argument>, <argument><expr><literal type="string">"Glass"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">120</literal></expr></argument>, <argument><expr><name>minY</name> <operator>+</operator> <literal type="number">55</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">150</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>parameter</name><argument_list>(<argument><expr><literal type="string">"color"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>Color</name><argument_list>(<argument><expr><literal type="number">0.70f</literal></expr></argument>, <argument><expr><literal type="number">0.70f</literal></expr></argument>, <argument><expr><literal type="number">0.70f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>shader</name><argument_list>(<argument><expr><literal type="string">"Mirror"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>MirrorShader</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sphere</name><argument_list>(<argument><expr><literal type="string">"mirror_sphere"</literal></expr></argument>, <argument><expr><literal type="string">"Mirror"</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name>minY</name> <operator>+</operator> <literal type="number">60</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// scanned model</comment>
            <expr_stmt><expr><call><name>geometry</name><argument_list>(<argument><expr><literal type="string">"teapot"</literal></expr></argument>, <argument><expr><operator>(</operator><name>Tesselatable</name><operator>)</operator> <operator>new</operator> <call><name>Teapot</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>parameter</name><argument_list>(<argument><expr><literal type="string">"transform"</literal></expr></argument>, <argument><expr><call><name><name>Matrix4</name><operator>.</operator><name>translation</name></name><argument_list>(<argument><expr><literal type="number">80</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>multiply</name><argument_list>(<argument><expr><call><name><name>Matrix4</name><operator>.</operator><name>rotateX</name></name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <operator>-</operator><name><name>Math</name><operator>.</operator><name>PI</name></name> <operator>/</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>multiply</name><argument_list>(<argument><expr><call><name><name>Matrix4</name><operator>.</operator><name>rotateY</name></name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name> <operator>/</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>multiply</name><argument_list>(<argument><expr><call><name><name>Matrix4</name><operator>.</operator><name>rotateX</name></name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <operator>-</operator><name><name>Math</name><operator>.</operator><name>PI</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>multiply</name><argument_list>(<argument><expr><call><name><name>Matrix4</name><operator>.</operator><name>scale</name></name><argument_list>(<argument><expr><literal type="number">1.2f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>parameter</name><argument_list>(<argument><expr><literal type="string">"shaders"</literal></expr></argument>, <argument><expr><literal type="string">"gray_shader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>instance</name><argument_list>(<argument><expr><literal type="string">"teapot.instance1"</literal></expr></argument>, <argument><expr><literal type="string">"teapot"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>parameter</name><argument_list>(<argument><expr><literal type="string">"transform"</literal></expr></argument>, <argument><expr><call><name><name>Matrix4</name><operator>.</operator><name>translation</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">80</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">160</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>multiply</name><argument_list>(<argument><expr><call><name><name>Matrix4</name><operator>.</operator><name>rotateY</name></name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name> <operator>/</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>multiply</name><argument_list>(<argument><expr><call><name><name>Matrix4</name><operator>.</operator><name>rotateX</name></name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <operator>-</operator><name><name>Math</name><operator>.</operator><name>PI</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>multiply</name><argument_list>(<argument><expr><call><name><name>Matrix4</name><operator>.</operator><name>scale</name></name><argument_list>(<argument><expr><literal type="number">1.2f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>parameter</name><argument_list>(<argument><expr><literal type="string">"shaders"</literal></expr></argument>, <argument><expr><literal type="string">"gray_shader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>instance</name><argument_list>(<argument><expr><literal type="string">"teapot.instance2"</literal></expr></argument>, <argument><expr><literal type="string">"teapot"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>sphere</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>shaderName</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>geometry</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Sphere</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>parameter</name><argument_list>(<argument><expr><literal type="string">"transform"</literal></expr></argument>, <argument><expr><call><name><name>Matrix4</name><operator>.</operator><name>translation</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>multiply</name><argument_list>(<argument><expr><call><name><name>Matrix4</name><operator>.</operator><name>scale</name></name><argument_list>(<argument><expr><name>radius</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>parameter</name><argument_list>(<argument><expr><literal type="string">"shaders"</literal></expr></argument>, <argument><expr><name>shaderName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>instance</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <literal type="string">".instance"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>
    }</block></class>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>kernelBegin</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// allocate a fresh validation target</comment>
        <expr_stmt><expr><name>validationImage</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><name>resolution</name> <operator>*</operator> <name>resolution</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>kernelMain</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// this builds and renders the scene</comment>
        <expr_stmt><expr><operator>new</operator> <call><name>BenchmarkScene</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>kernelEnd</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// make sure the rendered image was correct</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>referenceImage</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>validationImage</name><operator>.</operator><name>length</name></name> <operator>==</operator> <name><name>referenceImage</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>validationImage</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <comment type="line">// count absolute RGB differences</comment>
                <expr_stmt><expr><name>diff</name> <operator>+=</operator> <call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><operator>(</operator><name><name>validationImage</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>referenceImage</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>diff</name> <operator>+=</operator> <call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name><name>validationImage</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name><name>referenceImage</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>diff</name> <operator>+=</operator> <call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name><name>validationImage</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name><name>referenceImage</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&gt;</operator> <name>errorThreshold</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printError</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>BENCH</name></name></expr></argument>, <argument><expr><literal type="string">"Image check failed! - #errors: %d"</literal></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>BENCH</name></name></expr></argument>, <argument><expr><literal type="string">"Image check passed!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printError</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>BENCH</name></name></expr></argument>, <argument><expr><literal type="string">"Image check failed! - reference is not comparable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>Module</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>PrintLevel</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>showOutput</name> <operator>||</operator> <operator>(</operator><name>showBenchmarkOutput</name> <operator>&amp;&amp;</operator> <name>m</name> <operator>==</operator> <name><name>Module</name><operator>.</operator><name>BENCH</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>UI</name><operator>.</operator><name>formatOutput</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>level</name> <operator>==</operator> <name><name>PrintLevel</name><operator>.</operator><name>ERROR</name></name></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>taskStart</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// render progress display not needed</comment>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>taskStop</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// render progress display not needed</comment>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>taskUpdate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>current</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// render progress display not needed</comment>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>imageBegin</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bucketSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// we can assume w == h == resolution</comment>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>imageEnd</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// nothing needs to be done - image verification is done externally</comment>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>imageFill</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// this is not used</comment>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>imagePrepare</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// this is not needed</comment>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>imageUpdate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name><name>Color</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// copy bucket data to validation image</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>offset</name> <init>= <expr><name>x</name> <operator>+</operator> <name>resolution</name> <operator>*</operator> <operator>(</operator><name>resolution</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>y</name><operator>)</operator></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>index</name><operator>++</operator></expr><operator>,</operator> <expr><name>offset</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>validationImage</name><index>[<expr><name>offset</name></expr>]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><call><name>copy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toNonLinear</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toRGB</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
    </block_content>}</block></function>
}</block></class></unit>
