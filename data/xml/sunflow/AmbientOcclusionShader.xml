<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/sunflow.jar.src/org/sunflow/core/shader/AmbientOcclusionShader.java"><package>package <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>shader</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>SunflowAPI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>ParameterList</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>Shader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>ShadingState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>image</name><operator>.</operator><name>Color</name></name>;</import>

<class><specifier>public</specifier> class <name>AmbientOcclusionShader</name> <super_list><implements>implements <super><name>Shader</name></super></implements></super_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <name>Color</name></type> <name>bright</name> <init>= <expr><name><name>Color</name><operator>.</operator><name>WHITE</name></name></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>Color</name></type> <name>dark</name> <init>= <expr><name><name>Color</name><operator>.</operator><name>BLACK</name></name></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>samples</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>maxDist</name> <init>= <expr><name><name>Float</name><operator>.</operator><name>POSITIVE_INFINITY</name></name></expr></init></decl>;</decl_stmt>
  
  <constructor><specifier>public</specifier> <name>AmbientOcclusionShader</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></constructor>
  
  <constructor><specifier>public</specifier> <name>AmbientOcclusionShader</name><parameter_list>(<parameter><decl><type><name>Color</name></type> <name>paramColor</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>paramFloat</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>this</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bright</name></name> <operator>=</operator> <name>paramColor</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>maxDist</name></name> <operator>=</operator> <name>paramFloat</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>
  
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>ParameterList</name></type> <name>paramParameterList</name></decl></parameter>, <parameter><decl><type><name>SunflowAPI</name></type> <name>paramSunflowAPI</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bright</name></name> <operator>=</operator> <call><name><name>paramParameterList</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><literal type="string">"bright"</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>bright</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dark</name></name> <operator>=</operator> <call><name><name>paramParameterList</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><literal type="string">"dark"</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>dark</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>samples</name></name> <operator>=</operator> <call><name><name>paramParameterList</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"samples"</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>maxDist</name></name> <operator>=</operator> <call><name><name>paramParameterList</name><operator>.</operator><name>getFloat</name></name><argument_list>(<argument><expr><literal type="string">"maxdist"</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>maxDist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>maxDist</name></name> <operator>&lt;=</operator> <literal type="number">0.0F</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>maxDist</name></name> <operator>=</operator> <name><name>Float</name><operator>.</operator><name>POSITIVE_INFINITY</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>Color</name></type> <name>getBrightColor</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>paramShadingState</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>this</name><operator>.</operator><name>bright</name></name></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>Color</name></type> <name>getRadiance</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>paramShadingState</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>paramShadingState</name><operator>.</operator><name>occlusion</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>samples</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>maxDist</name></name></expr></argument>, <argument><expr><call><name>getBrightColor</name><argument_list>(<argument><expr><name>paramShadingState</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>dark</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>scatterPhoton</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>paramShadingState</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>paramColor</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>
}</block></class>


<comment type="block">/* Location:              /Users/wang/Downloads/sunflow2 copy.jar!/org/sunflow/core/shader/AmbientOcclusionShader.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.3
 */</comment></unit>
