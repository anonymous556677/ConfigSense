<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/sunflow.jar.src/org/sunflow/core/light/SunSkyLight.java"><package>package <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>light</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>SunflowAPI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>IntersectionState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>LightSample</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>LightSource</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>ParameterList</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>PrimitiveList</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>Ray</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>Shader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>ShadingState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>image</name><operator>.</operator><name>ChromaticitySpectrum</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>image</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>image</name><operator>.</operator><name>ConstantSpectralCurve</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>image</name><operator>.</operator><name>IrregularSpectralCurve</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>image</name><operator>.</operator><name>RGBSpace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>image</name><operator>.</operator><name>RegularSpectralCurve</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>image</name><operator>.</operator><name>SpectralCurve</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>image</name><operator>.</operator><name>XYZColor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>BoundingBox</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>MathUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Matrix4</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>OrthoNormalBasis</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Point3</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Vector3</name></name>;</import>

<class><specifier>public</specifier> class <name>SunSkyLight</name> <super_list><implements>implements <super><name>LightSource</name></super>, <super><name>PrimitiveList</name></super>, <super><name>Shader</name></super></implements></super_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>numSkySamples</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>OrthoNormalBasis</name></type> <name>basis</name> <init>= <expr><call><name><name>OrthoNormalBasis</name><operator>.</operator><name>makeFromWV</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Vector3</name><argument_list>(<argument><expr><literal type="number">0.0F</literal></expr></argument>, <argument><expr><literal type="number">0.0F</literal></expr></argument>, <argument><expr><literal type="number">1.0F</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Vector3</name><argument_list>(<argument><expr><literal type="number">0.0F</literal></expr></argument>, <argument><expr><literal type="number">1.0F</literal></expr></argument>, <argument><expr><literal type="number">0.0F</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>Vector3</name></type> <name>sunDirWorld</name> <init>= <expr><operator>new</operator> <call><name>Vector3</name><argument_list>(<argument><expr><literal type="number">1.0F</literal></expr></argument>, <argument><expr><literal type="number">1.0F</literal></expr></argument>, <argument><expr><literal type="number">1.0F</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>turbidity</name> <init>= <expr><literal type="number">6.0F</literal></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>Vector3</name></type> <name>sunDir</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>SpectralCurve</name></type> <name>sunSpectralRadiance</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>Color</name></type> <name>sunColor</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>sunTheta</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>zenithY</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>zenithx</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>zenithy</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>double</name><index>[]</index></name></type> <name>perezY</name> <init>= <expr><operator>new</operator> <name><name>double</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>double</name><index>[]</index></name></type> <name>perezx</name> <init>= <expr><operator>new</operator> <name><name>double</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>double</name><index>[]</index></name></type> <name>perezy</name> <init>= <expr><operator>new</operator> <name><name>double</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>jacobian</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>float</name><index>[]</index></name></type> <name>colHistogram</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>float</name><index>[]</index><index>[]</index></name></type> <name>imageHistogram</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>float</name><index>[]</index></name></type> <name>solAmplitudes</name> <init>= <expr><operator>new</operator> <name><name>float</name><index>[]</index></name> <block>{ 
      <expr><literal type="number">165.5F</literal></expr>, <expr><literal type="number">162.3F</literal></expr>, <expr><literal type="number">211.2F</literal></expr>, <expr><literal type="number">258.8F</literal></expr>, <expr><literal type="number">258.2F</literal></expr>, <expr><literal type="number">242.3F</literal></expr>, <expr><literal type="number">267.6F</literal></expr>, <expr><literal type="number">296.6F</literal></expr>, <expr><literal type="number">305.4F</literal></expr>, <expr><literal type="number">300.6F</literal></expr>, 
      <expr><literal type="number">306.6F</literal></expr>, <expr><literal type="number">288.3F</literal></expr>, <expr><literal type="number">287.1F</literal></expr>, <expr><literal type="number">278.2F</literal></expr>, <expr><literal type="number">271.0F</literal></expr>, <expr><literal type="number">272.3F</literal></expr>, <expr><literal type="number">263.6F</literal></expr>, <expr><literal type="number">255.0F</literal></expr>, <expr><literal type="number">250.6F</literal></expr>, <expr><literal type="number">253.1F</literal></expr>, 
      <expr><literal type="number">253.5F</literal></expr>, <expr><literal type="number">251.3F</literal></expr>, <expr><literal type="number">246.3F</literal></expr>, <expr><literal type="number">241.7F</literal></expr>, <expr><literal type="number">236.8F</literal></expr>, <expr><literal type="number">232.1F</literal></expr>, <expr><literal type="number">228.2F</literal></expr>, <expr><literal type="number">223.4F</literal></expr>, <expr><literal type="number">219.7F</literal></expr>, <expr><literal type="number">215.3F</literal></expr>, 
      <expr><literal type="number">211.0F</literal></expr>, <expr><literal type="number">207.3F</literal></expr>, <expr><literal type="number">202.4F</literal></expr>, <expr><literal type="number">198.7F</literal></expr>, <expr><literal type="number">194.3F</literal></expr>, <expr><literal type="number">190.7F</literal></expr>, <expr><literal type="number">186.3F</literal></expr>, <expr><literal type="number">182.6F</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>RegularSpectralCurve</name></type> <name>solCurve</name> <init>= <expr><operator>new</operator> <call><name>RegularSpectralCurve</name><argument_list>(<argument><expr><name>solAmplitudes</name></expr></argument>, <argument><expr><literal type="number">380.0F</literal></expr></argument>, <argument><expr><literal type="number">750.0F</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>float</name><index>[]</index></name></type> <name>k_oWavelengths</name> <init>= <expr><operator>new</operator> <name><name>float</name><index>[]</index></name> <block>{ 
      <expr><literal type="number">300.0F</literal></expr>, <expr><literal type="number">305.0F</literal></expr>, <expr><literal type="number">310.0F</literal></expr>, <expr><literal type="number">315.0F</literal></expr>, <expr><literal type="number">320.0F</literal></expr>, <expr><literal type="number">325.0F</literal></expr>, <expr><literal type="number">330.0F</literal></expr>, <expr><literal type="number">335.0F</literal></expr>, <expr><literal type="number">340.0F</literal></expr>, <expr><literal type="number">345.0F</literal></expr>, 
      <expr><literal type="number">350.0F</literal></expr>, <expr><literal type="number">355.0F</literal></expr>, <expr><literal type="number">445.0F</literal></expr>, <expr><literal type="number">450.0F</literal></expr>, <expr><literal type="number">455.0F</literal></expr>, <expr><literal type="number">460.0F</literal></expr>, <expr><literal type="number">465.0F</literal></expr>, <expr><literal type="number">470.0F</literal></expr>, <expr><literal type="number">475.0F</literal></expr>, <expr><literal type="number">480.0F</literal></expr>, 
      <expr><literal type="number">485.0F</literal></expr>, <expr><literal type="number">490.0F</literal></expr>, <expr><literal type="number">495.0F</literal></expr>, <expr><literal type="number">500.0F</literal></expr>, <expr><literal type="number">505.0F</literal></expr>, <expr><literal type="number">510.0F</literal></expr>, <expr><literal type="number">515.0F</literal></expr>, <expr><literal type="number">520.0F</literal></expr>, <expr><literal type="number">525.0F</literal></expr>, <expr><literal type="number">530.0F</literal></expr>, 
      <expr><literal type="number">535.0F</literal></expr>, <expr><literal type="number">540.0F</literal></expr>, <expr><literal type="number">545.0F</literal></expr>, <expr><literal type="number">550.0F</literal></expr>, <expr><literal type="number">555.0F</literal></expr>, <expr><literal type="number">560.0F</literal></expr>, <expr><literal type="number">565.0F</literal></expr>, <expr><literal type="number">570.0F</literal></expr>, <expr><literal type="number">575.0F</literal></expr>, <expr><literal type="number">580.0F</literal></expr>, 
      <expr><literal type="number">585.0F</literal></expr>, <expr><literal type="number">590.0F</literal></expr>, <expr><literal type="number">595.0F</literal></expr>, <expr><literal type="number">600.0F</literal></expr>, <expr><literal type="number">605.0F</literal></expr>, <expr><literal type="number">610.0F</literal></expr>, <expr><literal type="number">620.0F</literal></expr>, <expr><literal type="number">630.0F</literal></expr>, <expr><literal type="number">640.0F</literal></expr>, <expr><literal type="number">650.0F</literal></expr>, 
      <expr><literal type="number">660.0F</literal></expr>, <expr><literal type="number">670.0F</literal></expr>, <expr><literal type="number">680.0F</literal></expr>, <expr><literal type="number">690.0F</literal></expr>, <expr><literal type="number">700.0F</literal></expr>, <expr><literal type="number">710.0F</literal></expr>, <expr><literal type="number">720.0F</literal></expr>, <expr><literal type="number">730.0F</literal></expr>, <expr><literal type="number">740.0F</literal></expr>, <expr><literal type="number">750.0F</literal></expr>, 
      <expr><literal type="number">760.0F</literal></expr>, <expr><literal type="number">770.0F</literal></expr>, <expr><literal type="number">780.0F</literal></expr>, <expr><literal type="number">790.0F</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>float</name><index>[]</index></name></type> <name>k_oAmplitudes</name> <init>= <expr><operator>new</operator> <name><name>float</name><index>[]</index></name> <block>{ 
      <expr><literal type="number">10.0F</literal></expr>, <expr><literal type="number">4.8F</literal></expr>, <expr><literal type="number">2.7F</literal></expr>, <expr><literal type="number">1.35F</literal></expr>, <expr><literal type="number">0.8F</literal></expr>, <expr><literal type="number">0.38F</literal></expr>, <expr><literal type="number">0.16F</literal></expr>, <expr><literal type="number">0.075F</literal></expr>, <expr><literal type="number">0.04F</literal></expr>, <expr><literal type="number">0.019F</literal></expr>, 
      <expr><literal type="number">0.007F</literal></expr>, <expr><literal type="number">0.0F</literal></expr>, <expr><literal type="number">0.003F</literal></expr>, <expr><literal type="number">0.003F</literal></expr>, <expr><literal type="number">0.004F</literal></expr>, <expr><literal type="number">0.006F</literal></expr>, <expr><literal type="number">0.008F</literal></expr>, <expr><literal type="number">0.009F</literal></expr>, <expr><literal type="number">0.012F</literal></expr>, <expr><literal type="number">0.014F</literal></expr>, 
      <expr><literal type="number">0.017F</literal></expr>, <expr><literal type="number">0.021F</literal></expr>, <expr><literal type="number">0.025F</literal></expr>, <expr><literal type="number">0.03F</literal></expr>, <expr><literal type="number">0.035F</literal></expr>, <expr><literal type="number">0.04F</literal></expr>, <expr><literal type="number">0.045F</literal></expr>, <expr><literal type="number">0.048F</literal></expr>, <expr><literal type="number">0.057F</literal></expr>, <expr><literal type="number">0.063F</literal></expr>, 
      <expr><literal type="number">0.07F</literal></expr>, <expr><literal type="number">0.075F</literal></expr>, <expr><literal type="number">0.08F</literal></expr>, <expr><literal type="number">0.085F</literal></expr>, <expr><literal type="number">0.095F</literal></expr>, <expr><literal type="number">0.103F</literal></expr>, <expr><literal type="number">0.11F</literal></expr>, <expr><literal type="number">0.12F</literal></expr>, <expr><literal type="number">0.122F</literal></expr>, <expr><literal type="number">0.12F</literal></expr>, 
      <expr><literal type="number">0.118F</literal></expr>, <expr><literal type="number">0.115F</literal></expr>, <expr><literal type="number">0.12F</literal></expr>, <expr><literal type="number">0.125F</literal></expr>, <expr><literal type="number">0.13F</literal></expr>, <expr><literal type="number">0.12F</literal></expr>, <expr><literal type="number">0.105F</literal></expr>, <expr><literal type="number">0.09F</literal></expr>, <expr><literal type="number">0.079F</literal></expr>, <expr><literal type="number">0.067F</literal></expr>, 
      <expr><literal type="number">0.057F</literal></expr>, <expr><literal type="number">0.048F</literal></expr>, <expr><literal type="number">0.036F</literal></expr>, <expr><literal type="number">0.028F</literal></expr>, <expr><literal type="number">0.023F</literal></expr>, <expr><literal type="number">0.018F</literal></expr>, <expr><literal type="number">0.014F</literal></expr>, <expr><literal type="number">0.011F</literal></expr>, <expr><literal type="number">0.01F</literal></expr>, <expr><literal type="number">0.009F</literal></expr>, 
      <expr><literal type="number">0.007F</literal></expr>, <expr><literal type="number">0.004F</literal></expr>, <expr><literal type="number">0.0F</literal></expr>, <expr><literal type="number">0.0F</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>float</name><index>[]</index></name></type> <name>k_gWavelengths</name> <init>= <expr><operator>new</operator> <name><name>float</name><index>[]</index></name> <block>{ <expr><literal type="number">759.0F</literal></expr>, <expr><literal type="number">760.0F</literal></expr>, <expr><literal type="number">770.0F</literal></expr>, <expr><literal type="number">771.0F</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>float</name><index>[]</index></name></type> <name>k_gAmplitudes</name> <init>= <expr><operator>new</operator> <name><name>float</name><index>[]</index></name> <block>{ <expr><literal type="number">0.0F</literal></expr>, <expr><literal type="number">3.0F</literal></expr>, <expr><literal type="number">0.21F</literal></expr>, <expr><literal type="number">0.0F</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>float</name><index>[]</index></name></type> <name>k_waWavelengths</name> <init>= <expr><operator>new</operator> <name><name>float</name><index>[]</index></name> <block>{ 
      <expr><literal type="number">689.0F</literal></expr>, <expr><literal type="number">690.0F</literal></expr>, <expr><literal type="number">700.0F</literal></expr>, <expr><literal type="number">710.0F</literal></expr>, <expr><literal type="number">720.0F</literal></expr>, <expr><literal type="number">730.0F</literal></expr>, <expr><literal type="number">740.0F</literal></expr>, <expr><literal type="number">750.0F</literal></expr>, <expr><literal type="number">760.0F</literal></expr>, <expr><literal type="number">770.0F</literal></expr>, 
      <expr><literal type="number">780.0F</literal></expr>, <expr><literal type="number">790.0F</literal></expr>, <expr><literal type="number">800.0F</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>float</name><index>[]</index></name></type> <name>k_waAmplitudes</name> <init>= <expr><operator>new</operator> <name><name>float</name><index>[]</index></name> <block>{ 
      <expr><literal type="number">0.0F</literal></expr>, <expr><literal type="number">0.016F</literal></expr>, <expr><literal type="number">0.024F</literal></expr>, <expr><literal type="number">0.0125F</literal></expr>, <expr><literal type="number">1.0F</literal></expr>, <expr><literal type="number">0.87F</literal></expr>, <expr><literal type="number">0.061F</literal></expr>, <expr><literal type="number">0.001F</literal></expr>, <expr><literal type="number">1.0E</literal><operator>-</operator><literal type="number">5F</literal></expr>, <expr><literal type="number">1.0E</literal><operator>-</operator><literal type="number">5F</literal></expr>, 
      <expr><literal type="number">6.0E</literal><operator>-</operator><literal type="number">4F</literal></expr>, <expr><literal type="number">0.0175F</literal></expr>, <expr><literal type="number">0.036F</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>IrregularSpectralCurve</name></type> <name>k_oCurve</name> <init>= <expr><operator>new</operator> <call><name>IrregularSpectralCurve</name><argument_list>(<argument><expr><name>k_oWavelengths</name></expr></argument>, <argument><expr><name>k_oAmplitudes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>IrregularSpectralCurve</name></type> <name>k_gCurve</name> <init>= <expr><operator>new</operator> <call><name>IrregularSpectralCurve</name><argument_list>(<argument><expr><name>k_gWavelengths</name></expr></argument>, <argument><expr><name>k_gAmplitudes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>IrregularSpectralCurve</name></type> <name>k_waCurve</name> <init>= <expr><operator>new</operator> <call><name>IrregularSpectralCurve</name><argument_list>(<argument><expr><name>k_waWavelengths</name></expr></argument>, <argument><expr><name>k_waAmplitudes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <constructor><specifier>public</specifier> <name>SunSkyLight</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>initSunSky</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>
  
  <function><type><specifier>private</specifier> <name>SpectralCurve</name></type> <name>computeAttenuatedSunlight</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>paramFloat1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>paramFloat2</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>arrayOfFloat</name> <init>= <expr><operator>new</operator> <name><name>float</name><index>[<expr><literal type="number">91</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>d1</name> <init>= <expr><literal type="number">0.0460836582205D</literal> <operator>*</operator> <name>paramFloat2</name> <operator>-</operator> <literal type="number">0.04586025928522D</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>d2</name> <init>= <expr><literal type="number">1.0D</literal> <operator>/</operator> <operator>(</operator><call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name>paramFloat1</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">9.4E</literal><operator>-</operator><literal type="number">4D</literal> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><literal type="number">1.6386D</literal> <operator>-</operator> <name>paramFloat1</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.253D</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>byte</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>char</name></type> <name>c</name> <init>= <expr><literal type="char">'Å'</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;=</operator> <literal type="char">'Ì '</literal></expr>;</condition> <incr><expr><name>c</name> <operator>+=</operator> <literal type="char">'\005'</literal></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>double</name></type> <name>d3</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>exp</name></name><argument_list>(<argument><expr><operator>-</operator><name>d2</name> <operator>*</operator> <literal type="number">0.008735D</literal> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><name>c</name> <operator>/</operator> <literal type="number">1000.0D</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">4.08D</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>double</name></type> <name>d4</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>exp</name></name><argument_list>(<argument><expr><operator>-</operator><name>d2</name> <operator>*</operator> <name>d1</name> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><name>c</name> <operator>/</operator> <literal type="number">1000.0D</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.3D</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>double</name></type> <name>d5</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>exp</name></name><argument_list>(<argument><expr><operator>-</operator><name>d2</name> <operator>*</operator> <call><name><name>k_oCurve</name><operator>.</operator><name>sample</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">0.35D</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>double</name></type> <name>d6</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>exp</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.41D</literal> <operator>*</operator> <call><name><name>k_gCurve</name><operator>.</operator><name>sample</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>d2</name> <operator>/</operator> <call><name><name>Math</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><literal type="number">1.0D</literal> <operator>+</operator> <literal type="number">118.93D</literal> <operator>*</operator> <call><name><name>k_gCurve</name><operator>.</operator><name>sample</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>d2</name></expr></argument>, <argument><expr><literal type="number">0.45D</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>double</name></type> <name>d7</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>exp</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">0.2385D</literal> <operator>*</operator> <call><name><name>k_waCurve</name><operator>.</operator><name>sample</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2.0D</literal> <operator>*</operator> <name>d2</name> <operator>/</operator> <call><name><name>Math</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><literal type="number">1.0D</literal> <operator>+</operator> <literal type="number">20.07D</literal> <operator>*</operator> <call><name><name>k_waCurve</name><operator>.</operator><name>sample</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2.0D</literal> <operator>*</operator> <name>d2</name></expr></argument>, <argument><expr><literal type="number">0.45D</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>double</name></type> <name>d8</name> <init>= <expr><call><name><name>solCurve</name><operator>.</operator><name>sample</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>d3</name> <operator>*</operator> <name>d4</name> <operator>*</operator> <name>d5</name> <operator>*</operator> <name>d6</name> <operator>*</operator> <name>d7</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>arrayOfFloat</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>d8</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>b</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for> 
    <return>return <expr><operator>(</operator><name>SpectralCurve</name><operator>)</operator><operator>new</operator> <call><name>RegularSpectralCurve</name><argument_list>(<argument><expr><name>arrayOfFloat</name></expr></argument>, <argument><expr><literal type="number">350.0F</literal></expr></argument>, <argument><expr><literal type="number">800.0F</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>private</specifier> <name>double</name></type> <name>perezFunction</name><parameter_list>(<parameter><decl><type><name><name>double</name><index>[]</index></name></type> <name>paramArrayOfdouble</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>paramDouble1</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>paramDouble2</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>paramDouble3</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type> <name>d1</name> <init>= <expr><operator>(</operator><literal type="number">1.0D</literal> <operator>+</operator> <name><name>paramArrayOfdouble</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>exp</name></name><argument_list>(<argument><expr><name><name>paramArrayOfdouble</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1.0D</literal> <operator>+</operator> <name><name>paramArrayOfdouble</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>exp</name></name><argument_list>(<argument><expr><name><name>paramArrayOfdouble</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name><name>this</name><operator>.</operator><name>sunTheta</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>paramArrayOfdouble</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>sunTheta</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>sunTheta</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>d2</name> <init>= <expr><operator>(</operator><literal type="number">1.0D</literal> <operator>+</operator> <name><name>paramArrayOfdouble</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>exp</name></name><argument_list>(<argument><expr><name><name>paramArrayOfdouble</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name>paramDouble1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1.0D</literal> <operator>+</operator> <name><name>paramArrayOfdouble</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>exp</name></name><argument_list>(<argument><expr><name><name>paramArrayOfdouble</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>paramDouble2</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>paramArrayOfdouble</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name>paramDouble2</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name>paramDouble2</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>paramDouble3</name> <operator>*</operator> <name>d2</name> <operator>/</operator> <name>d1</name></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>private</specifier> <name>void</name></type> <name>initSunSky</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>sunDirWorld</name><operator>.</operator><name>normalize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sunDir</name></name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>basis</name><operator>.</operator><name>untransform</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>sunDirWorld</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Vector3</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>sunDir</name><operator>.</operator><name>normalize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sunTheta</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>acos</name></name><argument_list>(<argument><expr><call><name><name>MathUtils</name><operator>.</operator><name>clamp</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>sunDir</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.0F</literal></expr></argument>, <argument><expr><literal type="number">1.0F</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>sunDir</name><operator>.</operator><name>z</name></name> <operator>&gt;</operator> <literal type="number">0.0F</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sunSpectralRadiance</name></name> <operator>=</operator> <call><name>computeAttenuatedSunlight</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>sunTheta</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>turbidity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sunColor</name></name> <operator>=</operator> <call><name><name>RGBSpace</name><operator>.</operator><name>SRGB</name><operator>.</operator><name>convertXYZtoRGB</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>sunSpectralRadiance</name><operator>.</operator><name>toXYZ</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>mul</name><argument_list>(<argument><expr><literal type="number">1.0E</literal><operator>-</operator><literal type="number">4F</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>constrainRGB</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sunSpectralRadiance</name></name> <operator>=</operator> <operator>(</operator><name>SpectralCurve</name><operator>)</operator><operator>new</operator> <call><name>ConstantSpectralCurve</name><argument_list>(<argument><expr><literal type="number">0.0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt> 
    <decl_stmt><decl><type><name>float</name></type> <name>f1</name> <init>= <expr><name><name>this</name><operator>.</operator><name>sunTheta</name></name> <operator>*</operator> <name><name>this</name><operator>.</operator><name>sunTheta</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f2</name> <init>= <expr><name><name>this</name><operator>.</operator><name>sunTheta</name></name> <operator>*</operator> <name>f1</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f3</name> <init>= <expr><name><name>this</name><operator>.</operator><name>turbidity</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f4</name> <init>= <expr><name><name>this</name><operator>.</operator><name>turbidity</name></name> <operator>*</operator> <name><name>this</name><operator>.</operator><name>turbidity</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr><operator>(</operator><literal type="number">0.4444444444444444D</literal> <operator>-</operator> <name>f3</name> <operator>/</operator> <literal type="number">120.0D</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>Math</name><operator>.</operator><name>PI</name></name> <operator>-</operator> <literal type="number">2.0D</literal> <operator>*</operator> <name><name>this</name><operator>.</operator><name>sunTheta</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>zenithY</name></name> <operator>=</operator> <operator>(</operator><literal type="number">4.0453D</literal> <operator>*</operator> <name>f3</name> <operator>-</operator> <literal type="number">4.971D</literal><operator>)</operator> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>tan</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">0.2155D</literal> <operator>*</operator> <name>f3</name> <operator>+</operator> <literal type="number">2.4192D</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>zenithY</name></name> <operator>*=</operator> <literal type="number">1000.0D</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>zenithx</name></name> <operator>=</operator> <operator>(</operator><literal type="number">0.00165D</literal> <operator>*</operator> <name>f2</name> <operator>-</operator> <literal type="number">0.00374D</literal> <operator>*</operator> <name>f1</name> <operator>+</operator> <literal type="number">0.00208D</literal> <operator>*</operator> <name><name>this</name><operator>.</operator><name>sunTheta</name></name> <operator>+</operator> <literal type="number">0.0D</literal><operator>)</operator> <operator>*</operator> <name>f4</name> <operator>+</operator> <operator>(</operator><operator>-</operator><literal type="number">0.02902D</literal> <operator>*</operator> <name>f2</name> <operator>+</operator> <literal type="number">0.06377D</literal> <operator>*</operator> <name>f1</name> <operator>-</operator> <literal type="number">0.03202D</literal> <operator>*</operator> <name><name>this</name><operator>.</operator><name>sunTheta</name></name> <operator>+</operator> <literal type="number">0.00394D</literal><operator>)</operator> <operator>*</operator> <name>f3</name> <operator>+</operator> <literal type="number">0.11693D</literal> <operator>*</operator> <name>f2</name> <operator>-</operator> <literal type="number">0.21196D</literal> <operator>*</operator> <name>f1</name> <operator>+</operator> <literal type="number">0.06052D</literal> <operator>*</operator> <name><name>this</name><operator>.</operator><name>sunTheta</name></name> <operator>+</operator> <literal type="number">0.25885D</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>zenithy</name></name> <operator>=</operator> <operator>(</operator><literal type="number">0.00275D</literal> <operator>*</operator> <name>f2</name> <operator>-</operator> <literal type="number">0.0061D</literal> <operator>*</operator> <name>f1</name> <operator>+</operator> <literal type="number">0.00316D</literal> <operator>*</operator> <name><name>this</name><operator>.</operator><name>sunTheta</name></name> <operator>+</operator> <literal type="number">0.0D</literal><operator>)</operator> <operator>*</operator> <name>f4</name> <operator>+</operator> <operator>(</operator><operator>-</operator><literal type="number">0.04212D</literal> <operator>*</operator> <name>f2</name> <operator>+</operator> <literal type="number">0.0897D</literal> <operator>*</operator> <name>f1</name> <operator>-</operator> <literal type="number">0.04153D</literal> <operator>*</operator> <name><name>this</name><operator>.</operator><name>sunTheta</name></name> <operator>+</operator> <literal type="number">0.00515D</literal><operator>)</operator> <operator>*</operator> <name>f3</name> <operator>+</operator> <literal type="number">0.15346D</literal> <operator>*</operator> <name>f2</name> <operator>-</operator> <literal type="number">0.26756D</literal> <operator>*</operator> <name>f1</name> <operator>+</operator> <literal type="number">0.06669D</literal> <operator>*</operator> <name><name>this</name><operator>.</operator><name>sunTheta</name></name> <operator>+</operator> <literal type="number">0.26688D</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>perezY</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0.17872D</literal> <operator>*</operator> <name>f3</name> <operator>-</operator> <literal type="number">1.46303D</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>perezY</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">0.3554D</literal> <operator>*</operator> <name>f3</name> <operator>+</operator> <literal type="number">0.42749D</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>perezY</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">0.02266D</literal> <operator>*</operator> <name>f3</name> <operator>+</operator> <literal type="number">5.32505D</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>perezY</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0.12064D</literal> <operator>*</operator> <name>f3</name> <operator>-</operator> <literal type="number">2.57705D</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>perezY</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">0.06696D</literal> <operator>*</operator> <name>f3</name> <operator>+</operator> <literal type="number">0.37027D</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>perezx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">0.01925D</literal> <operator>*</operator> <name>f3</name> <operator>-</operator> <literal type="number">0.25922D</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>perezx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">0.06651D</literal> <operator>*</operator> <name>f3</name> <operator>+</operator> <literal type="number">8.1E</literal><operator>-</operator><literal type="number">4D</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>perezx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">4.1E</literal><operator>-</operator><literal type="number">4D</literal> <operator>*</operator> <name>f3</name> <operator>+</operator> <literal type="number">0.21247D</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>perezx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">0.06409D</literal> <operator>*</operator> <name>f3</name> <operator>-</operator> <literal type="number">0.89887D</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>perezx</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">0.00325D</literal> <operator>*</operator> <name>f3</name> <operator>+</operator> <literal type="number">0.04517D</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>perezy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">0.01669D</literal> <operator>*</operator> <name>f3</name> <operator>-</operator> <literal type="number">0.26078D</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>perezy</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">0.09495D</literal> <operator>*</operator> <name>f3</name> <operator>+</operator> <literal type="number">0.00921D</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>perezy</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">0.00792D</literal> <operator>*</operator> <name>f3</name> <operator>+</operator> <literal type="number">0.21023D</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>perezy</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">0.04405D</literal> <operator>*</operator> <name>f3</name> <operator>-</operator> <literal type="number">1.65369D</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>perezy</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">0.01092D</literal> <operator>*</operator> <name>f3</name> <operator>+</operator> <literal type="number">0.05291D</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>imageHistogram</name></name> <operator>=</operator> <operator>new</operator> <name><name>float</name><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>colHistogram</name></name> <operator>=</operator> <operator>new</operator> <name><name>float</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f5</name> <init>= <expr><literal type="number">0.03125F</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f6</name> <init>= <expr><literal type="number">0.03125F</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>byte</name></type> <name>b</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>byte</name></type> <name>b1</name></decl>;</decl_stmt>
      <for>for <control>(<init><expr><name>b1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b1</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>b1</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>float</name></type> <name>f7</name> <init>= <expr><operator>(</operator><name>b</name> <operator>+</operator> <literal type="number">0.5F</literal><operator>)</operator> <operator>*</operator> <name>f5</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>f8</name> <init>= <expr><operator>(</operator><name>b1</name> <operator>+</operator> <literal type="number">0.5F</literal><operator>)</operator> <operator>*</operator> <name>f6</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Color</name></type> <name>color</name> <init>= <expr><call><name>getSkyRGB</name><argument_list>(<argument><expr><call><name>getDirection</name><argument_list>(<argument><expr><name>f7</name></expr></argument>, <argument><expr><name>f8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>imageHistogram</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>b1</name></expr>]</index></name> <operator>=</operator> <call><name><name>color</name><operator>.</operator><name>getLuminance</name></name><argument_list>()</argument_list></call> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><name><name>Math</name><operator>.</operator><name>PI</name></name> <operator>*</operator> <name>f8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>b1</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><name><name>this</name><operator>.</operator><name>imageHistogram</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>b1</name></expr>]</index></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>imageHistogram</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>b1</name></expr>]</index></name> <operator>+</operator> <name><name>this</name><operator>.</operator><name>imageHistogram</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>b1</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
      </block_content>}</block></for> 
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>colHistogram</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>imageHistogram</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><literal type="number">31</literal></expr>]</index></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>b</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>colHistogram</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>colHistogram</name><index>[<expr><name>b</name></expr>]</index></name> <operator>+</operator> <name><name>this</name><operator>.</operator><name>colHistogram</name><index>[<expr><name>b</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
      <for>for <control>(<init><expr><name>b1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b1</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>b1</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>imageHistogram</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>b1</name></expr>]</index></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>imageHistogram</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>b1</name></expr>]</index></name> <operator>/</operator> <name><name>this</name><operator>.</operator><name>imageHistogram</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><literal type="number">31</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for> 
    </block_content>}</block></for> 
    <for>for <control>(<init><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>colHistogram</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>colHistogram</name><index>[<expr><name>b</name></expr>]</index></name> <operator>/</operator> <name><name>this</name><operator>.</operator><name>colHistogram</name><index>[<expr><literal type="number">31</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for> 
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>jacobian</name></name> <operator>=</operator> <literal type="number">0.01927657F</literal></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>ParameterList</name></type> <name>paramParameterList</name></decl></parameter>, <parameter><decl><type><name>SunflowAPI</name></type> <name>paramSunflowAPI</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Vector3</name></type> <name>vector31</name> <init>= <expr><call><name><name>paramParameterList</name><operator>.</operator><name>getVector</name></name><argument_list>(<argument><expr><literal type="string">"up"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Vector3</name></type> <name>vector32</name> <init>= <expr><call><name><name>paramParameterList</name><operator>.</operator><name>getVector</name></name><argument_list>(<argument><expr><literal type="string">"east"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>vector31</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>vector32</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>basis</name></name> <operator>=</operator> <call><name><name>OrthoNormalBasis</name><operator>.</operator><name>makeFromWV</name></name><argument_list>(<argument><expr><name>vector31</name></expr></argument>, <argument><expr><name>vector32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>vector31</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>basis</name></name> <operator>=</operator> <call><name><name>OrthoNormalBasis</name><operator>.</operator><name>makeFromW</name></name><argument_list>(<argument><expr><name>vector31</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt> 
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>numSkySamples</name></name> <operator>=</operator> <call><name><name>paramParameterList</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"samples"</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>numSkySamples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sunDirWorld</name></name> <operator>=</operator> <call><name><name>paramParameterList</name><operator>.</operator><name>getVector</name></name><argument_list>(<argument><expr><literal type="string">"sundir"</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>sunDirWorld</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>turbidity</name></name> <operator>=</operator> <call><name><name>paramParameterList</name><operator>.</operator><name>getFloat</name></name><argument_list>(<argument><expr><literal type="string">"turbidity"</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>turbidity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>initSunSky</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>paramString</name></decl></parameter>, <parameter><decl><type><name>SunflowAPI</name></type> <name>paramSunflowAPI</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>paramSunflowAPI</name><operator>.</operator><name>geometry</name></name><argument_list>(<argument><expr><name>paramString</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>paramSunflowAPI</name><operator>.</operator><name>shader</name></name><argument_list>(<argument><expr><name>paramString</name> <operator>+</operator> <literal type="string">".shader"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>paramSunflowAPI</name><operator>.</operator><name>parameter</name></name><argument_list>(<argument><expr><literal type="string">"shaders"</literal></expr></argument>, <argument><expr><name>paramString</name> <operator>+</operator> <literal type="string">".shader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>paramSunflowAPI</name><operator>.</operator><name>instance</name></name><argument_list>(<argument><expr><name>paramString</name> <operator>+</operator> <literal type="string">".instance"</literal></expr></argument>, <argument><expr><name>paramString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>paramSunflowAPI</name><operator>.</operator><name>light</name></name><argument_list>(<argument><expr><name>paramString</name> <operator>+</operator> <literal type="string">".light"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>private</specifier> <name>Color</name></type> <name>getSkyRGB</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>paramVector3</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>paramVector3</name><operator>.</operator><name>z</name></name> <operator>&lt;</operator> <literal type="number">0.0F</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name><name>Color</name><operator>.</operator><name>BLACK</name></name></expr>;</return></block_content></block></if></if_stmt> 
    <if_stmt><if>if <condition>(<expr><name><name>paramVector3</name><operator>.</operator><name>z</name></name> <operator>&lt;</operator> <literal type="number">0.001F</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>paramVector3</name><operator>.</operator><name>z</name></name> <operator>=</operator> <literal type="number">0.001F</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
    <expr_stmt><expr><call><name><name>paramVector3</name><operator>.</operator><name>normalize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>d1</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>acos</name></name><argument_list>(<argument><expr><call><name><name>MathUtils</name><operator>.</operator><name>clamp</name></name><argument_list>(<argument><expr><name><name>paramVector3</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.0F</literal></expr></argument>, <argument><expr><literal type="number">1.0F</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>d2</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>acos</name></name><argument_list>(<argument><expr><call><name><name>MathUtils</name><operator>.</operator><name>clamp</name></name><argument_list>(<argument><expr><call><name><name>Vector3</name><operator>.</operator><name>dot</name></name><argument_list>(<argument><expr><name>paramVector3</name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>sunDir</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.0F</literal></expr></argument>, <argument><expr><literal type="number">1.0F</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>d3</name> <init>= <expr><call><name>perezFunction</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>perezx</name></name></expr></argument>, <argument><expr><name>d1</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>zenithx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>d4</name> <init>= <expr><call><name>perezFunction</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>perezy</name></name></expr></argument>, <argument><expr><name>d1</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>zenithy</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>d5</name> <init>= <expr><call><name>perezFunction</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>perezY</name></name></expr></argument>, <argument><expr><name>d1</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>zenithY</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1.0E</literal><operator>-</operator><literal type="number">4D</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>XYZColor</name></type> <name>xYZColor</name> <init>= <expr><call><name><name>ChromaticitySpectrum</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>d3</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>d4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f1</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><call><name><name>xYZColor</name><operator>.</operator><name>getX</name></name><argument_list>()</argument_list></call> <operator>*</operator> <name>d5</name> <operator>/</operator> <call><name><name>xYZColor</name><operator>.</operator><name>getY</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f2</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><call><name><name>xYZColor</name><operator>.</operator><name>getZ</name></name><argument_list>()</argument_list></call> <operator>*</operator> <name>d5</name> <operator>/</operator> <call><name><name>xYZColor</name><operator>.</operator><name>getY</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>RGBSpace</name><operator>.</operator><name>SRGB</name><operator>.</operator><name>convertXYZtoRGB</name></name><argument_list>(<argument><expr><name>f1</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>d5</name></expr></argument>, <argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>int</name></type> <name>getNumSamples</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal> <operator>+</operator> <name><name>this</name><operator>.</operator><name>numSkySamples</name></name></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>getPhoton</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>paramDouble1</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>paramDouble2</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>paramDouble3</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>paramDouble4</name></decl></parameter>, <parameter><decl><type><name>Point3</name></type> <name>paramPoint3</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>paramVector3</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>paramColor</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>
  
  <function><type><specifier>public</specifier> <name>float</name></type> <name>getPower</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="number">0.0F</literal></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>getSamples</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>paramShadingState</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>Vector3</name><operator>.</operator><name>dot</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>sunDirWorld</name></name></expr></argument>, <argument><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getGeoNormal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0.0F</literal> <operator>&amp;&amp;</operator> <call><name><name>Vector3</name><operator>.</operator><name>dot</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>sunDirWorld</name></name></expr></argument>, <argument><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0.0F</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>LightSample</name></type> <name>lightSample</name> <init>= <expr><operator>new</operator> <call><name>LightSample</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>lightSample</name><operator>.</operator><name>setShadowRay</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Ray</name><argument_list>(<argument><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>sunDirWorld</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>lightSample</name><operator>.</operator><name>getShadowRay</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setMax</name><argument_list>(<argument><expr><name><name>Float</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>lightSample</name><operator>.</operator><name>setRadiance</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>sunColor</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>sunColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>lightSample</name><operator>.</operator><name>traceShadow</name></name><argument_list>(<argument><expr><name>paramShadingState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>paramShadingState</name><operator>.</operator><name>addSample</name></name><argument_list>(<argument><expr><name>lightSample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt> 
    <decl_stmt><decl><type><name>byte</name></type> <name>b1</name> <init>= <expr><ternary><condition><expr><operator>(</operator><call><name><name>paramShadingState</name><operator>.</operator><name>getDiffuseDepth</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name><name>this</name><operator>.</operator><name>numSkySamples</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>byte</name></type> <name>b2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b2</name> <operator>&lt;</operator> <name>b1</name></expr>;</condition> <incr><expr><name>b2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>double</name></type> <name>d1</name> <init>= <expr><call><name><name>paramShadingState</name><operator>.</operator><name>getRandom</name></name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>double</name></type> <name>d2</name> <init>= <expr><call><name><name>paramShadingState</name><operator>.</operator><name>getRandom</name></name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>byte</name></type> <name>b3</name></decl>;</decl_stmt>
      <for>for <control>(<init><expr><name>b3</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>d1</name> <operator>&gt;=</operator> <name><name>this</name><operator>.</operator><name>colHistogram</name><index>[<expr><name>b3</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>b3</name> <operator>&lt;</operator> <name><name>this</name><operator>.</operator><name>colHistogram</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>b3</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
      <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>arrayOfFloat</name> <init>= <expr><name><name>this</name><operator>.</operator><name>imageHistogram</name><index>[<expr><name>b3</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>byte</name></type> <name>b4</name></decl>;</decl_stmt>
      <for>for <control>(<init><expr><name>b4</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>d2</name> <operator>&gt;=</operator> <name><name>arrayOfFloat</name><index>[<expr><name>b4</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>b4</name> <operator>&lt;</operator> <name><name>arrayOfFloat</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>b4</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
      <decl_stmt><decl><type><name>float</name></type> <name>f1</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name>b3</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>d1</name> <operator>/</operator> <name><name>this</name><operator>.</operator><name>colHistogram</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><operator>(</operator><name>d1</name> <operator>-</operator> <name><name>this</name><operator>.</operator><name>colHistogram</name><index>[<expr><name>b3</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>this</name><operator>.</operator><name>colHistogram</name><index>[<expr><name>b3</name></expr>]</index></name> <operator>-</operator> <name><name>this</name><operator>.</operator><name>colHistogram</name><index>[<expr><name>b3</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f2</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name>b4</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>d2</name> <operator>/</operator> <name><name>arrayOfFloat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><operator>(</operator><name>d2</name> <operator>-</operator> <name><name>arrayOfFloat</name><index>[<expr><name>b4</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>arrayOfFloat</name><index>[<expr><name>b4</name></expr>]</index></name> <operator>-</operator> <name><name>arrayOfFloat</name><index>[<expr><name>b4</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f3</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>b3</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>this</name><operator>.</operator><name>colHistogram</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><operator>(</operator><name><name>this</name><operator>.</operator><name>colHistogram</name><index>[<expr><name>b3</name></expr>]</index></name> <operator>-</operator> <name><name>this</name><operator>.</operator><name>colHistogram</name><index>[<expr><name>b3</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f4</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>b4</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>arrayOfFloat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><operator>(</operator><name><name>arrayOfFloat</name><index>[<expr><name>b4</name></expr>]</index></name> <operator>-</operator> <name><name>arrayOfFloat</name><index>[<expr><name>b4</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f5</name> <init>= <expr><operator>(</operator><name>b3</name> <operator>+</operator> <name>f1</name><operator>)</operator> <operator>/</operator> <name><name>this</name><operator>.</operator><name>colHistogram</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f6</name> <init>= <expr><operator>(</operator><name>b4</name> <operator>+</operator> <name>f2</name><operator>)</operator> <operator>/</operator> <name><name>arrayOfFloat</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f7</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><name>f6</name> <operator>*</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>this</name><operator>.</operator><name>jacobian</name></name> <operator>/</operator> <name>b1</name> <operator>*</operator> <name>f3</name> <operator>*</operator> <name>f4</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Vector3</name></type> <name>vector31</name> <init>= <expr><call><name>getDirection</name><argument_list>(<argument><expr><name>f5</name></expr></argument>, <argument><expr><name>f6</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Vector3</name></type> <name>vector32</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>basis</name><operator>.</operator><name>transform</name></name><argument_list>(<argument><expr><name>vector31</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Vector3</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>Vector3</name><operator>.</operator><name>dot</name></name><argument_list>(<argument><expr><name>vector32</name></expr></argument>, <argument><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getGeoNormal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0.0F</literal> <operator>&amp;&amp;</operator> <call><name><name>Vector3</name><operator>.</operator><name>dot</name></name><argument_list>(<argument><expr><name>vector32</name></expr></argument>, <argument><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0.0F</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>LightSample</name></type> <name>lightSample</name> <init>= <expr><operator>new</operator> <call><name>LightSample</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>lightSample</name><operator>.</operator><name>setShadowRay</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Ray</name><argument_list>(<argument><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>vector32</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>lightSample</name><operator>.</operator><name>getShadowRay</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setMax</name><argument_list>(<argument><expr><name><name>Float</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Color</name></type> <name>color</name> <init>= <expr><call><name>getSkyRGB</name><argument_list>(<argument><expr><name>vector31</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>lightSample</name><operator>.</operator><name>setRadiance</name></name><argument_list>(<argument><expr><name>color</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>lightSample</name><operator>.</operator><name>getDiffuseRadiance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>mul</name><argument_list>(<argument><expr><name>f7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>lightSample</name><operator>.</operator><name>getSpecularRadiance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>mul</name><argument_list>(<argument><expr><name>f7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>lightSample</name><operator>.</operator><name>traceShadow</name></name><argument_list>(<argument><expr><name>paramShadingState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>paramShadingState</name><operator>.</operator><name>addSample</name></name><argument_list>(<argument><expr><name>lightSample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt> 
    </block_content>}</block></for> 
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>PrimitiveList</name></type> <name>getBakingPrimitives</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="null">null</literal></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>int</name></type> <name>getNumPrimitives</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>float</name></type> <name>getPrimitiveBound</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>paramInt1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>paramInt2</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="number">0.0F</literal></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>BoundingBox</name></type> <name>getWorldBounds</name><parameter_list>(<parameter><decl><type><name>Matrix4</name></type> <name>paramMatrix4</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="null">null</literal></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>intersectPrimitive</name><parameter_list>(<parameter><decl><type><name>Ray</name></type> <name>paramRay</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>paramInt</name></decl></parameter>, <parameter><decl><type><name>IntersectionState</name></type> <name>paramIntersectionState</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>paramRay</name><operator>.</operator><name>getMax</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Float</name><operator>.</operator><name>POSITIVE_INFINITY</name></name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>paramIntersectionState</name><operator>.</operator><name>setIntersection</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0.0F</literal></expr></argument>, <argument><expr><literal type="number">0.0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>prepareShadingState</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>paramShadingState</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>paramShadingState</name><operator>.</operator><name>includeLights</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>paramShadingState</name><operator>.</operator><name>setShader</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>Color</name></type> <name>getRadiance</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>paramShadingState</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>getSkyRGB</name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>basis</name><operator>.</operator><name>untransform</name></name><argument_list>(<argument><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getRay</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDirection</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>constrainRGB</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>scatterPhoton</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>paramShadingState</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>paramColor</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>
  
  <function><type><specifier>private</specifier> <name>Vector3</name></type> <name>getDirection</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>paramFloat1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>paramFloat2</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Vector3</name></type> <name>vector3</name> <init>= <expr><operator>new</operator> <call><name>Vector3</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>d1</name> <init>= <expr><literal type="number">0.0D</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>d2</name> <init>= <expr><literal type="number">0.0D</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>d2</name> <operator>=</operator> <operator>(</operator><name>paramFloat1</name> <operator>*</operator> <literal type="number">2.0F</literal><operator>)</operator> <operator>*</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>d1</name> <operator>=</operator> <name>paramFloat2</name> <operator>*</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>d3</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>vector3</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>-</operator><name>d3</name> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name>d2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>vector3</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>vector3</name><operator>.</operator><name>z</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>d3</name> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><name>d2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
    <return>return <expr><name>vector3</name></expr>;</return>
  </block_content>}</block></function>
}</block></class>


<comment type="block">/* Location:              /Users/wang/Downloads/sunflow2 copy.jar!/org/sunflow/core/light/SunSkyLight.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.3
 */</comment></unit>
