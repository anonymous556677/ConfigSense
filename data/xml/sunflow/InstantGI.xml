<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/sunflow/src/org/sunflow/core/gi/InstantGI.java"><package>package <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>gi</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>GIEngine</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>Options</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>PhotonStore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>Ray</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>Scene</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>ShadingState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>image</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>BoundingBox</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>OrthoNormalBasis</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Point3</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Vector3</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>system</name><operator>.</operator><name>UI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>system</name><operator>.</operator><name>UI</name><operator>.</operator><name>Module</name></name>;</import>

<class><specifier>public</specifier> class <name>InstantGI</name> <super_list><implements>implements <super><name>GIEngine</name></super></implements></super_list> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>numPhotons</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>numSets</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>numBias</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>PointLight</name><index>[]</index><index>[]</index></name></type> <name>virtualLights</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>InstantGI</name><parameter_list>(<parameter><decl><type><name>Options</name></type> <name>options</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>numPhotons</name> <operator>=</operator> <call><name><name>options</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"gi.igi.samples"</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>numSets</name> <operator>=</operator> <call><name><name>options</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"gi.igi.sets"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name><name>options</name><operator>.</operator><name>getFloat</name></name><argument_list>(<argument><expr><literal type="string">"gi.igi.c"</literal></expr></argument>, <argument><expr><literal type="number">0.00003f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>numBias</name> <operator>=</operator> <call><name><name>options</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"gi.igi.bias_samples"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>virtualLights</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>Color</name></type> <name>getGlobalRadiance</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Point3</name></type> <name>p</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Vector3</name></type> <name>n</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>set</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><call><name><name>state</name><operator>.</operator><name>getRandom</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>numSets</name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>maxAvgPow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>minDist</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Color</name></type> <name>pow</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>PointLight</name></type> <name>vpl</name> <range>: <expr><name><name>virtualLights</name><index>[<expr><name>set</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><name>maxAvgPow</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>maxAvgPow</name></expr></argument>, <argument><expr><call><name><name>vpl</name><operator>.</operator><name>power</name><operator>.</operator><name>getAverage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>Vector3</name><operator>.</operator><name>dot</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>vpl</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0.9f</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>float</name></type> <name>d</name> <init>= <expr><call><name><name>vpl</name><operator>.</operator><name>p</name><operator>.</operator><name>distanceToSquared</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <name>minDist</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>pow</name> <operator>=</operator> <name><name>vpl</name><operator>.</operator><name>power</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>minDist</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><ternary><condition><expr><name>pow</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>Color</name><operator>.</operator><name>BLACK</name></name></expr> </then><else>: <expr><call><name><name>pow</name><operator>.</operator><name>copy</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>mul</name><argument_list>(<argument><expr><literal type="number">1.0f</literal> <operator>/</operator> <name>maxAvgPow</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>Scene</name></type> <name>scene</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>numSets</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>numSets</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"Instant Global Illumination settings:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Samples:     %d"</literal></expr></argument>, <argument><expr><name>numPhotons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Sets:        %d"</literal></expr></argument>, <argument><expr><name>numSets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Bias bound:  %f"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Bias rays:   %d"</literal></expr></argument>, <argument><expr><name>numBias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>virtualLights</name> <operator>=</operator> <operator>new</operator> <name><name>PointLight</name><index>[<expr><name>numSets</name></expr>]</index><index>[]</index></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>numPhotons</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>seed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>virtualLights</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>seed</name> <operator>+=</operator> <name>numPhotons</name></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>PointLightStore</name></type> <name>map</name> <init>= <expr><operator>new</operator> <call><name>PointLightStore</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>scene</name><operator>.</operator><name>calculatePhotons</name></name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="string">"virtual"</literal></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>virtualLights</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>map</name><operator>.</operator><name>virtualLights</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>PointLight</name><index>[<expr><call><name><name>map</name><operator>.</operator><name>virtualLights</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"Stored %d virtual point lights for set %d of %d"</literal></expr></argument>, <argument><expr><name><name>virtualLights</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>length</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>numSets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="line">// create an empty array</comment>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>virtualLights</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>virtualLights</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <name><name>PointLight</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Color</name></type> <name>getIrradiance</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>diffuseReflectance</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>float</name></type> <name>b</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name> <operator>*</operator> <name>c</name> <operator>/</operator> <call><name><name>diffuseReflectance</name><operator>.</operator><name>getMax</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Color</name></type> <name>irr</name> <init>= <expr><call><name><name>Color</name><operator>.</operator><name>black</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Point3</name></type> <name>p</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Vector3</name></type> <name>n</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>set</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><call><name><name>state</name><operator>.</operator><name>getRandom</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>numSets</name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>PointLight</name></type> <name>vpl</name> <range>: <expr><name><name>virtualLights</name><index>[<expr><name>set</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Ray</name></type> <name>r</name> <init>= <expr><operator>new</operator> <call><name>Ray</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>vpl</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>dotNlD</name> <init>= <expr><operator>-</operator><operator>(</operator><name><name>r</name><operator>.</operator><name>dx</name></name> <operator>*</operator> <name><name>vpl</name><operator>.</operator><name>n</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>r</name><operator>.</operator><name>dy</name></name> <operator>*</operator> <name><name>vpl</name><operator>.</operator><name>n</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>r</name><operator>.</operator><name>dz</name></name> <operator>*</operator> <name><name>vpl</name><operator>.</operator><name>n</name><operator>.</operator><name>z</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>dotND</name> <init>= <expr><name><name>r</name><operator>.</operator><name>dx</name></name> <operator>*</operator> <name><name>n</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>r</name><operator>.</operator><name>dy</name></name> <operator>*</operator> <name><name>n</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>r</name><operator>.</operator><name>dz</name></name> <operator>*</operator> <name><name>n</name><operator>.</operator><name>z</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>dotNlD</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>dotND</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>float</name></type> <name>r2</name> <init>= <expr><call><name><name>r</name><operator>.</operator><name>getMax</name></name><argument_list>()</argument_list></call> <operator>*</operator> <call><name><name>r</name><operator>.</operator><name>getMax</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Color</name></type> <name>opacity</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>traceShadow</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Color</name></type> <name>power</name> <init>= <expr><call><name><name>Color</name><operator>.</operator><name>blend</name></name><argument_list>(<argument><expr><name><name>vpl</name><operator>.</operator><name>power</name></name></expr></argument>, <argument><expr><name><name>Color</name><operator>.</operator><name>BLACK</name></name></expr></argument>, <argument><expr><name>opacity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>float</name></type> <name>g</name> <init>= <expr><operator>(</operator><name>dotND</name> <operator>*</operator> <name>dotNlD</name><operator>)</operator> <operator>/</operator> <name>r2</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>irr</name><operator>.</operator><name>madd</name></name><argument_list>(<argument><expr><literal type="number">0.25f</literal> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>power</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <comment type="line">// bias compensation</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>nb</name> <init>= <expr><ternary><condition><expr><operator>(</operator><call><name><name>state</name><operator>.</operator><name>getDiffuseDepth</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>numBias</name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>numBias</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>nb</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>irr</name></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>OrthoNormalBasis</name></type> <name>onb</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>getBasis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Vector3</name></type> <name>w</name> <init>= <expr><operator>new</operator> <call><name>Vector3</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>scale</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name> <operator>/</operator> <name>nb</name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>float</name></type> <name>xi</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name><name>state</name><operator>.</operator><name>getRandom</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>xj</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name><name>state</name><operator>.</operator><name>getRandom</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>nb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>phi</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><name>xi</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>cosPhi</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name>phi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>sinPhi</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><name>phi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>sinTheta</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>sqrt</name></name><argument_list>(<argument><expr><name>xj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>cosTheta</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>sqrt</name></name><argument_list>(<argument><expr><literal type="number">1.0f</literal> <operator>-</operator> <name>xj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>w</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>cosPhi</name> <operator>*</operator> <name>sinTheta</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>w</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>sinPhi</name> <operator>*</operator> <name>sinTheta</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>w</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name>cosTheta</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>onb</name><operator>.</operator><name>transform</name></name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Ray</name></type> <name>r</name> <init>= <expr><operator>new</operator> <call><name>Ray</name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>setMax</name></name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>sqrt</name></name><argument_list>(<argument><expr><name>cosTheta</name> <operator>/</operator> <name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>ShadingState</name></type> <name>temp</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>traceFinalGather</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>temp</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>temp</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>prepareShadingState</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>temp</name><operator>.</operator><name>getShader</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>float</name></type> <name>dist</name> <init>= <expr><call><name><name>temp</name><operator>.</operator><name>getRay</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMax</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>float</name></type> <name>r2</name> <init>= <expr><name>dist</name> <operator>*</operator> <name>dist</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>float</name></type> <name>cosThetaY</name> <init>= <expr><operator>-</operator><call><name><name>Vector3</name><operator>.</operator><name>dot</name></name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><call><name><name>temp</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>cosThetaY</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <decl_stmt><decl><type><name>float</name></type> <name>g</name> <init>= <expr><operator>(</operator><name>cosTheta</name> <operator>*</operator> <name>cosThetaY</name><operator>)</operator> <operator>/</operator> <name>r2</name></expr></init></decl>;</decl_stmt>
                        <comment type="line">// was this path accounted for yet?</comment>
                        <if_stmt><if>if <condition>(<expr><name>g</name> <operator>&gt;</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><call><name><name>irr</name><operator>.</operator><name>madd</name></name><argument_list>(<argument><expr><name>scale</name> <operator>*</operator> <operator>(</operator><name>g</name> <operator>-</operator> <name>b</name><operator>)</operator> <operator>/</operator> <name>g</name></expr></argument>, <argument><expr><call><name><name>temp</name><operator>.</operator><name>getShader</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRadiance</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>irr</name></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>PointLight</name> <block>{
        <decl_stmt><decl><type><name>Point3</name></type> <name>p</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Vector3</name></type> <name>n</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Color</name></type> <name>power</name></decl>;</decl_stmt>
    }</block></class>

    <class><specifier>private</specifier> class <name>PointLightStore</name> <super_list><implements>implements <super><name>PhotonStore</name></super></implements></super_list> <block>{
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PointLight</name></argument>&gt;</argument_list></name></type> <name>virtualLights</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PointLight</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>numEmit</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><name>numPhotons</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>prepare</name><parameter_list>(<parameter><decl><type><name>BoundingBox</name></type> <name>sceneBounds</name></decl></parameter>)</parameter_list> <block>{<block_content>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>store</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>power</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>diffuse</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>faceforward</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>PointLight</name></type> <name>vpl</name> <init>= <expr><operator>new</operator> <call><name>PointLight</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>vpl</name><operator>.</operator><name>p</name></name> <operator>=</operator> <call><name><name>state</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>vpl</name><operator>.</operator><name>n</name></name> <operator>=</operator> <call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>vpl</name><operator>.</operator><name>power</name></name> <operator>=</operator> <name>power</name></expr>;</expr_stmt>
            <synchronized>synchronized <init>(<expr><name>this</name></expr>)</init> <block>{<block_content>
                <expr_stmt><expr><call><name><name>virtualLights</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>vpl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></synchronized>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <block>{<block_content>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>allowDiffuseBounced</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>allowReflectionBounced</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>allowRefractionBounced</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class></unit>
