<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/sunflow.jar.src/org/sunflow/core/camera/ThinLens.java"><package>package <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>camera</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>SunflowAPI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>CameraLens</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>ParameterList</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>Ray</name></name>;</import>

<class><specifier>public</specifier> class <name>ThinLens</name> <super_list><implements>implements <super><name>CameraLens</name></super></implements></super_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>au</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>av</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>aspect</name> <init>= <expr><literal type="number">1.0F</literal></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>fov</name> <init>= <expr><literal type="number">90.0F</literal></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>focusDistance</name> <init>= <expr><literal type="number">1.0F</literal></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>lensRadius</name> <init>= <expr><literal type="number">0.0F</literal></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>lensSides</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>lensRotation</name> <init>= <expr><name><name>this</name><operator>.</operator><name>lensRotationRadians</name></name> <operator>=</operator> <literal type="number">0.0F</literal></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>lensRotationRadians</name></decl>;</decl_stmt>
  
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>ParameterList</name></type> <name>paramParameterList</name></decl></parameter>, <parameter><decl><type><name>SunflowAPI</name></type> <name>paramSunflowAPI</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fov</name></name> <operator>=</operator> <call><name><name>paramParameterList</name><operator>.</operator><name>getFloat</name></name><argument_list>(<argument><expr><literal type="string">"fov"</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>fov</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>aspect</name></name> <operator>=</operator> <call><name><name>paramParameterList</name><operator>.</operator><name>getFloat</name></name><argument_list>(<argument><expr><literal type="string">"aspect"</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>aspect</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>focusDistance</name></name> <operator>=</operator> <call><name><name>paramParameterList</name><operator>.</operator><name>getFloat</name></name><argument_list>(<argument><expr><literal type="string">"focus.distance"</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>focusDistance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lensRadius</name></name> <operator>=</operator> <call><name><name>paramParameterList</name><operator>.</operator><name>getFloat</name></name><argument_list>(<argument><expr><literal type="string">"lens.radius"</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>lensRadius</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lensSides</name></name> <operator>=</operator> <call><name><name>paramParameterList</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"lens.sides"</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>lensSides</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lensRotation</name></name> <operator>=</operator> <call><name><name>paramParameterList</name><operator>.</operator><name>getFloat</name></name><argument_list>(<argument><expr><literal type="string">"lens.rotation"</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>lensRotation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>update</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>private</specifier> <name>void</name></type> <name>update</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>au</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>tan</name></name><argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>toRadians</name></name><argument_list>(<argument><expr><operator>(</operator><name><name>this</name><operator>.</operator><name>fov</name></name> <operator>*</operator> <literal type="number">0.5F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>this</name><operator>.</operator><name>focusDistance</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>av</name></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>au</name></name> <operator>/</operator> <name><name>this</name><operator>.</operator><name>aspect</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lensRotationRadians</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>toRadians</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>lensRotation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>Ray</name></type> <name>getRay</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>paramFloat1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>paramFloat2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>paramInt1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>paramInt2</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>paramDouble1</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>paramDouble2</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>paramDouble3</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>float</name></type> <name>f3</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f4</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f1</name> <init>= <expr><operator>-</operator><name><name>this</name><operator>.</operator><name>au</name></name> <operator>+</operator> <literal type="number">2.0F</literal> <operator>*</operator> <name><name>this</name><operator>.</operator><name>au</name></name> <operator>*</operator> <name>paramFloat1</name> <operator>/</operator> <operator>(</operator><name>paramInt1</name> <operator>-</operator> <literal type="number">1.0F</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f2</name> <init>= <expr><operator>-</operator><name><name>this</name><operator>.</operator><name>av</name></name> <operator>+</operator> <literal type="number">2.0F</literal> <operator>*</operator> <name><name>this</name><operator>.</operator><name>av</name></name> <operator>*</operator> <name>paramFloat2</name> <operator>/</operator> <operator>(</operator><name>paramInt2</name> <operator>-</operator> <literal type="number">1.0F</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>lensSides</name></name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>double</name></type> <name>d1</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>double</name></type> <name>d2</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>double</name></type> <name>d3</name> <init>= <expr><literal type="number">2.0D</literal> <operator>*</operator> <name>paramDouble1</name> <operator>-</operator> <literal type="number">1.0D</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>double</name></type> <name>d4</name> <init>= <expr><literal type="number">2.0D</literal> <operator>*</operator> <name>paramDouble2</name> <operator>-</operator> <literal type="number">1.0D</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>d3</name> <operator>&gt;</operator> <operator>-</operator><name>d4</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>d3</name> <operator>&gt;</operator> <name>d4</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>d2</name> <operator>=</operator> <name>d3</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>d1</name> <operator>=</operator> <literal type="number">0.7853981633974483D</literal> <operator>*</operator> <name>d4</name> <operator>/</operator> <name>d3</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>d2</name> <operator>=</operator> <name>d4</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>d1</name> <operator>=</operator> <literal type="number">0.7853981633974483D</literal> <operator>*</operator> <operator>(</operator><literal type="number">2.0D</literal> <operator>-</operator> <name>d3</name> <operator>/</operator> <name>d4</name><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt> 
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>d3</name> <operator>&lt;</operator> <name>d4</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>d2</name> <operator>=</operator> <operator>-</operator><name>d3</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>d1</name> <operator>=</operator> <literal type="number">0.7853981633974483D</literal> <operator>*</operator> <operator>(</operator><literal type="number">4.0D</literal> <operator>+</operator> <name>d4</name> <operator>/</operator> <name>d3</name><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>d2</name> <operator>=</operator> <operator>-</operator><name>d4</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>d4</name> <operator>!=</operator> <literal type="number">0.0D</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>d1</name> <operator>=</operator> <literal type="number">0.7853981633974483D</literal> <operator>*</operator> <operator>(</operator><literal type="number">6.0D</literal> <operator>-</operator> <name>d3</name> <operator>/</operator> <name>d4</name><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>d1</name> <operator>=</operator> <literal type="number">0.0D</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt> 
      </block_content>}</block></else></if_stmt> 
      <expr_stmt><expr><name>d2</name> <operator>*=</operator> <name><name>this</name><operator>.</operator><name>lensRadius</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>f3</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>d2</name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>f4</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>d2</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>paramDouble2</name> <operator>*=</operator> <name><name>this</name><operator>.</operator><name>lensSides</name></name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f9</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name>paramDouble2</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f10</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name>paramDouble2</name> <operator>-</operator> <name>f9</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f11</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>sqrt</name></name><argument_list>(<argument><expr><name>paramDouble1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f12</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>f9</name> <operator>*</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name> <operator>*</operator> <literal type="number">2.0D</literal> <operator>/</operator> <name><name>this</name><operator>.</operator><name>lensSides</name></name> <operator>+</operator> <name><name>this</name><operator>.</operator><name>lensRotationRadians</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f13</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>f9</name> <operator>+</operator> <literal type="number">1.0F</literal><operator>)</operator> <operator>*</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name> <operator>*</operator> <literal type="number">2.0D</literal> <operator>/</operator> <name><name>this</name><operator>.</operator><name>lensSides</name></name> <operator>+</operator> <name><name>this</name><operator>.</operator><name>lensRotationRadians</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>f3</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name>f12</name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><literal type="number">1.0F</literal> <operator>-</operator> <name>f10</name><operator>)</operator> <operator>+</operator> <call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name>f13</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>f10</name><operator>)</operator> <operator>*</operator> <name>f11</name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>f4</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><name>f12</name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><literal type="number">1.0F</literal> <operator>-</operator> <name>f10</name><operator>)</operator> <operator>+</operator> <call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><name>f13</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>f10</name><operator>)</operator> <operator>*</operator> <name>f11</name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>f3</name> <operator>*=</operator> <name><name>this</name><operator>.</operator><name>lensRadius</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>f4</name> <operator>*=</operator> <name><name>this</name><operator>.</operator><name>lensRadius</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt> 
    <decl_stmt><decl><type><name>float</name></type> <name>f5</name> <init>= <expr><literal type="number">0.0F</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f6</name> <init>= <expr><name>f1</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f7</name> <init>= <expr><name>f2</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f8</name> <init>= <expr><operator>-</operator><name><name>this</name><operator>.</operator><name>focusDistance</name></name></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>new</operator> <call><name>Ray</name><argument_list>(<argument><expr><name>f3</name></expr></argument>, <argument><expr><name>f4</name></expr></argument>, <argument><expr><name>f5</name></expr></argument>, <argument><expr><name>f6</name> <operator>-</operator> <name>f3</name></expr></argument>, <argument><expr><name>f7</name> <operator>-</operator> <name>f4</name></expr></argument>, <argument><expr><name>f8</name> <operator>-</operator> <name>f5</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
}</block></class>


<comment type="block">/* Location:              /Users/wang/Downloads/sunflow2 copy.jar!/org/sunflow/core/camera/ThinLens.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.3
 */</comment></unit>
