<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/sunflow.jar.src/org/sunflow/core/primitive/JuliaFractal.java"><package>package <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>primitive</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>SunflowAPI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>Instance</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>IntersectionState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>ParameterList</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>PrimitiveList</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>Ray</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>ShadingState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>BoundingBox</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Matrix4</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>OrthoNormalBasis</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Point3</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Solvers</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Vector3</name></name>;</import>

<class><specifier>public</specifier> class <name>JuliaFractal</name> <super_list><implements>implements <super><name>PrimitiveList</name></super></implements></super_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>float</name></type> <name>BOUNDING_RADIUS</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>sqrt</name></name><argument_list>(<argument><expr><literal type="number">3.0D</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>float</name></type> <name>BOUNDING_RADIUS2</name> <init>= <expr><literal type="number">3.0F</literal></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>float</name></type> <name>ESCAPE_THRESHOLD</name> <init>= <expr><literal type="number">10.0F</literal></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>float</name></type> <name>DELTA</name> <init>= <expr><literal type="number">1.0E</literal><operator>-</operator><literal type="number">4F</literal></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>cx</name> <init>= <expr><literal type="number">0.2F</literal></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>cy</name> <init>= <expr><literal type="number">0.3F</literal></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>cz</name> <init>= <expr><operator>-</operator><literal type="number">0.2F</literal></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>cw</name> <init>= <expr><operator>-</operator><literal type="number">0.4F</literal></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>maxIterations</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>epsilon</name> <init>= <expr><literal type="number">1.0E</literal><operator>-</operator><literal type="number">5F</literal></expr></init></decl>;</decl_stmt>
  
  <function><type><specifier>public</specifier> <name>int</name></type> <name>getNumPrimitives</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>float</name></type> <name>getPrimitiveBound</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>paramInt1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>paramInt2</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>paramInt2</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><name>BOUNDING_RADIUS</name></expr> </then><else>: <expr><name>BOUNDING_RADIUS</name></expr></else></ternary></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>BoundingBox</name></type> <name>getWorldBounds</name><parameter_list>(<parameter><decl><type><name>Matrix4</name></type> <name>paramMatrix4</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>BoundingBox</name></type> <name>boundingBox</name> <init>= <expr><operator>new</operator> <call><name>BoundingBox</name><argument_list>(<argument><expr><name>BOUNDING_RADIUS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>paramMatrix4</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>boundingBox</name> <operator>=</operator> <call><name><name>paramMatrix4</name><operator>.</operator><name>transform</name></name><argument_list>(<argument><expr><name>boundingBox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
    <return>return <expr><name>boundingBox</name></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>intersectPrimitive</name><parameter_list>(<parameter><decl><type><name>Ray</name></type> <name>paramRay</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>paramInt</name></decl></parameter>, <parameter><decl><type><name>IntersectionState</name></type> <name>paramIntersectionState</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>float</name></type> <name>f1</name> <init>= <expr><name><name>paramRay</name><operator>.</operator><name>ox</name></name> <operator>*</operator> <name><name>paramRay</name><operator>.</operator><name>ox</name></name> <operator>+</operator> <name><name>paramRay</name><operator>.</operator><name>oy</name></name> <operator>*</operator> <name><name>paramRay</name><operator>.</operator><name>oy</name></name> <operator>+</operator> <name><name>paramRay</name><operator>.</operator><name>oz</name></name> <operator>*</operator> <name><name>paramRay</name><operator>.</operator><name>oz</name></name> <operator>-</operator> <name>BOUNDING_RADIUS2</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f2</name> <init>= <expr><call><name><name>paramRay</name><operator>.</operator><name>getMin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>f1</name> <operator>&gt;</operator> <literal type="number">0.0F</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>float</name></type> <name>f8</name> <init>= <expr><name><name>paramRay</name><operator>.</operator><name>dx</name></name> <operator>*</operator> <name><name>paramRay</name><operator>.</operator><name>dx</name></name> <operator>+</operator> <name><name>paramRay</name><operator>.</operator><name>dy</name></name> <operator>*</operator> <name><name>paramRay</name><operator>.</operator><name>dy</name></name> <operator>+</operator> <name><name>paramRay</name><operator>.</operator><name>dz</name></name> <operator>*</operator> <name><name>paramRay</name><operator>.</operator><name>dz</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f9</name> <init>= <expr><literal type="number">2.0F</literal> <operator>*</operator> <operator>(</operator><name><name>paramRay</name><operator>.</operator><name>dx</name></name> <operator>*</operator> <name><name>paramRay</name><operator>.</operator><name>ox</name></name> <operator>+</operator> <name><name>paramRay</name><operator>.</operator><name>dy</name></name> <operator>*</operator> <name><name>paramRay</name><operator>.</operator><name>oy</name></name> <operator>+</operator> <name><name>paramRay</name><operator>.</operator><name>dz</name></name> <operator>*</operator> <name><name>paramRay</name><operator>.</operator><name>oz</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>double</name><index>[]</index></name></type> <name>arrayOfDouble</name> <init>= <expr><call><name><name>Solvers</name><operator>.</operator><name>solveQuadric</name></name><argument_list>(<argument><expr><name>f8</name></expr></argument>, <argument><expr><name>f9</name></expr></argument>, <argument><expr><name>f1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>arrayOfDouble</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>arrayOfDouble</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <call><name><name>paramRay</name><operator>.</operator><name>getMax</name></name><argument_list>()</argument_list></call> <operator>||</operator> <name><name>arrayOfDouble</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <call><name><name>paramRay</name><operator>.</operator><name>getMin</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt> 
      <expr_stmt><expr><name>f2</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>arrayOfDouble</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt> 
    <decl_stmt><decl><type><name>float</name></type> <name>f3</name> <init>= <expr><name><name>Float</name><operator>.</operator><name>POSITIVE_INFINITY</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f4</name> <init>= <expr><name><name>paramRay</name><operator>.</operator><name>ox</name></name> <operator>+</operator> <name>f2</name> <operator>*</operator> <name><name>paramRay</name><operator>.</operator><name>dx</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f5</name> <init>= <expr><name><name>paramRay</name><operator>.</operator><name>oy</name></name> <operator>+</operator> <name>f2</name> <operator>*</operator> <name><name>paramRay</name><operator>.</operator><name>dy</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f6</name> <init>= <expr><name><name>paramRay</name><operator>.</operator><name>oz</name></name> <operator>+</operator> <name>f2</name> <operator>*</operator> <name><name>paramRay</name><operator>.</operator><name>dz</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f7</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><literal type="number">1.0D</literal> <operator>/</operator> <call><name><name>Math</name><operator>.</operator><name>sqrt</name></name><argument_list>(<argument><expr><operator>(</operator><name><name>paramRay</name><operator>.</operator><name>dx</name></name> <operator>*</operator> <name><name>paramRay</name><operator>.</operator><name>dx</name></name> <operator>+</operator> <name><name>paramRay</name><operator>.</operator><name>dy</name></name> <operator>*</operator> <name><name>paramRay</name><operator>.</operator><name>dy</name></name> <operator>+</operator> <name><name>paramRay</name><operator>.</operator><name>dz</name></name> <operator>*</operator> <name><name>paramRay</name><operator>.</operator><name>dz</name></name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>float</name></type> <name>f8</name> <init>= <expr><name>f4</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f9</name> <init>= <expr><name>f5</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f10</name> <init>= <expr><name>f6</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f11</name> <init>= <expr><literal type="number">0.0F</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f12</name> <init>= <expr><literal type="number">1.0F</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f13</name> <init>= <expr><literal type="number">0.0F</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f14</name> <init>= <expr><literal type="number">0.0F</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f15</name> <init>= <expr><literal type="number">0.0F</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f16</name> <init>= <expr><literal type="number">0.0F</literal></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>byte</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name><name>this</name><operator>.</operator><name>maxIterations</name></name></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>float</name></type> <name>f18</name> <init>= <expr><name>f8</name> <operator>*</operator> <name>f12</name> <operator>-</operator> <name>f9</name> <operator>*</operator> <name>f13</name> <operator>-</operator> <name>f10</name> <operator>*</operator> <name>f14</name> <operator>-</operator> <name>f11</name> <operator>*</operator> <name>f15</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>f19</name> <init>= <expr><name>f8</name> <operator>*</operator> <name>f13</name> <operator>+</operator> <name>f9</name> <operator>*</operator> <name>f12</name> <operator>+</operator> <name>f10</name> <operator>*</operator> <name>f15</name> <operator>-</operator> <name>f11</name> <operator>*</operator> <name>f14</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>f20</name> <init>= <expr><name>f8</name> <operator>*</operator> <name>f14</name> <operator>+</operator> <name>f10</name> <operator>*</operator> <name>f12</name> <operator>+</operator> <name>f11</name> <operator>*</operator> <name>f13</name> <operator>-</operator> <name>f9</name> <operator>*</operator> <name>f15</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>f15</name> <operator>=</operator> <literal type="number">2.0F</literal> <operator>*</operator> <operator>(</operator><name>f8</name> <operator>*</operator> <name>f15</name> <operator>+</operator> <name>f11</name> <operator>*</operator> <name>f12</name> <operator>+</operator> <name>f9</name> <operator>*</operator> <name>f14</name> <operator>-</operator> <name>f10</name> <operator>*</operator> <name>f13</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>f12</name> <operator>=</operator> <literal type="number">2.0F</literal> <operator>*</operator> <name>f18</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>f13</name> <operator>=</operator> <literal type="number">2.0F</literal> <operator>*</operator> <name>f19</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>f14</name> <operator>=</operator> <literal type="number">2.0F</literal> <operator>*</operator> <name>f20</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>f18</name> <operator>=</operator> <name>f8</name> <operator>*</operator> <name>f8</name> <operator>-</operator> <name>f9</name> <operator>*</operator> <name>f9</name> <operator>-</operator> <name>f10</name> <operator>*</operator> <name>f10</name> <operator>-</operator> <name>f11</name> <operator>*</operator> <name>f11</name> <operator>+</operator> <name><name>this</name><operator>.</operator><name>cw</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>f9</name> <operator>=</operator> <literal type="number">2.0F</literal> <operator>*</operator> <name>f8</name> <operator>*</operator> <name>f9</name> <operator>+</operator> <name><name>this</name><operator>.</operator><name>cx</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>f10</name> <operator>=</operator> <literal type="number">2.0F</literal> <operator>*</operator> <name>f8</name> <operator>*</operator> <name>f10</name> <operator>+</operator> <name><name>this</name><operator>.</operator><name>cy</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>f11</name> <operator>=</operator> <literal type="number">2.0F</literal> <operator>*</operator> <name>f8</name> <operator>*</operator> <name>f11</name> <operator>+</operator> <name><name>this</name><operator>.</operator><name>cz</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>f8</name> <operator>=</operator> <name>f18</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>f16</name> <operator>=</operator> <name>f8</name> <operator>*</operator> <name>f8</name> <operator>+</operator> <name>f9</name> <operator>*</operator> <name>f9</name> <operator>+</operator> <name>f10</name> <operator>*</operator> <name>f10</name> <operator>+</operator> <name>f11</name> <operator>*</operator> <name>f11</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>f16</name> <operator>&gt;</operator> <name>ESCAPE_THRESHOLD</name></expr>)</condition><block type="pseudo"><block_content>
          <break>break;</break></block_content></block></if></if_stmt> 
      </block_content>}</block></for> 
      <decl_stmt><decl><type><name>float</name></type> <name>f17</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>sqrt</name></name><argument_list>(<argument><expr><name>f16</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>f3</name> <operator>=</operator> <literal type="number">0.5F</literal> <operator>*</operator> <name>f17</name> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name>f17</name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>length</name><argument_list>(<argument><expr><name>f12</name></expr></argument>, <argument><expr><name>f13</name></expr></argument>, <argument><expr><name>f14</name></expr></argument>, <argument><expr><name>f15</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>f4</name> <operator>+=</operator> <name>f3</name> <operator>*</operator> <name><name>paramRay</name><operator>.</operator><name>dx</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>f5</name> <operator>+=</operator> <name>f3</name> <operator>*</operator> <name><name>paramRay</name><operator>.</operator><name>dy</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>f6</name> <operator>+=</operator> <name>f3</name> <operator>*</operator> <name><name>paramRay</name><operator>.</operator><name>dz</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>f2</name> <operator>+=</operator> <name>f3</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>f3</name> <operator>*</operator> <name>f7</name> <operator>&lt;</operator> <name><name>this</name><operator>.</operator><name>epsilon</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>paramRay</name><operator>.</operator><name>isInside</name></name><argument_list>(<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <return>return;</return></block_content></block></if></if_stmt> 
        <if_stmt><if>if <condition>(<expr><name>f3</name> <operator>*</operator> <name>f7</name> <operator>&lt;</operator> <name><name>this</name><operator>.</operator><name>epsilon</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>paramRay</name><operator>.</operator><name>setMax</name></name><argument_list>(<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>paramIntersectionState</name><operator>.</operator><name>setIntersection</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0.0F</literal></expr></argument>, <argument><expr><literal type="number">0.0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt> 
        <return>return;</return>
      </block_content>}</block></if></if_stmt> 
      <if_stmt><if>if <condition>(<expr><name>f4</name> <operator>*</operator> <name>f4</name> <operator>+</operator> <name>f5</name> <operator>*</operator> <name>f5</name> <operator>+</operator> <name>f6</name> <operator>*</operator> <name>f6</name> <operator>&gt;</operator> <name>BOUNDING_RADIUS2</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt> 
    </block_content>}</block></while> 
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>prepareShadingState</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>paramShadingState</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>paramShadingState</name><operator>.</operator><name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getRay</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPoint</name><argument_list>(<argument><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Instance</name></type> <name>instance</name> <init>= <expr><call><name><name>paramShadingState</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Point3</name></type> <name>point3</name> <init>= <expr><call><name><name>instance</name><operator>.</operator><name>transformWorldToObject</name></name><argument_list>(<argument><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f1</name> <init>= <expr><name><name>point3</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name>DELTA</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f2</name> <init>= <expr><name><name>point3</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f3</name> <init>= <expr><name><name>point3</name><operator>.</operator><name>z</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f4</name> <init>= <expr><literal type="number">0.0F</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f5</name> <init>= <expr><name><name>point3</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>DELTA</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f6</name> <init>= <expr><name><name>point3</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f7</name> <init>= <expr><name><name>point3</name><operator>.</operator><name>z</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f8</name> <init>= <expr><literal type="number">0.0F</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f9</name> <init>= <expr><name><name>point3</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f10</name> <init>= <expr><name><name>point3</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name>DELTA</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f11</name> <init>= <expr><name><name>point3</name><operator>.</operator><name>z</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f12</name> <init>= <expr><literal type="number">0.0F</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f13</name> <init>= <expr><name><name>point3</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f14</name> <init>= <expr><name><name>point3</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>DELTA</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f15</name> <init>= <expr><name><name>point3</name><operator>.</operator><name>z</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f16</name> <init>= <expr><literal type="number">0.0F</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f17</name> <init>= <expr><name><name>point3</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f18</name> <init>= <expr><name><name>point3</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f19</name> <init>= <expr><name><name>point3</name><operator>.</operator><name>z</name></name> <operator>-</operator> <name>DELTA</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f20</name> <init>= <expr><literal type="number">0.0F</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f21</name> <init>= <expr><name><name>point3</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f22</name> <init>= <expr><name><name>point3</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f23</name> <init>= <expr><name><name>point3</name><operator>.</operator><name>z</name></name> <operator>+</operator> <name>DELTA</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f24</name> <init>= <expr><literal type="number">0.0F</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>byte</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name><name>this</name><operator>.</operator><name>maxIterations</name></name></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>float</name></type> <name>f</name> <init>= <expr><name>f1</name> <operator>*</operator> <name>f1</name> <operator>-</operator> <name>f2</name> <operator>*</operator> <name>f2</name> <operator>-</operator> <name>f3</name> <operator>*</operator> <name>f3</name> <operator>-</operator> <name>f4</name> <operator>*</operator> <name>f4</name> <operator>+</operator> <name><name>this</name><operator>.</operator><name>cw</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>f2</name> <operator>=</operator> <literal type="number">2.0F</literal> <operator>*</operator> <name>f1</name> <operator>*</operator> <name>f2</name> <operator>+</operator> <name><name>this</name><operator>.</operator><name>cx</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>f3</name> <operator>=</operator> <literal type="number">2.0F</literal> <operator>*</operator> <name>f1</name> <operator>*</operator> <name>f3</name> <operator>+</operator> <name><name>this</name><operator>.</operator><name>cy</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>f4</name> <operator>=</operator> <literal type="number">2.0F</literal> <operator>*</operator> <name>f1</name> <operator>*</operator> <name>f4</name> <operator>+</operator> <name><name>this</name><operator>.</operator><name>cz</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>f1</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>f</name> <operator>=</operator> <name>f5</name> <operator>*</operator> <name>f5</name> <operator>-</operator> <name>f6</name> <operator>*</operator> <name>f6</name> <operator>-</operator> <name>f7</name> <operator>*</operator> <name>f7</name> <operator>-</operator> <name>f8</name> <operator>*</operator> <name>f8</name> <operator>+</operator> <name><name>this</name><operator>.</operator><name>cw</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>f6</name> <operator>=</operator> <literal type="number">2.0F</literal> <operator>*</operator> <name>f5</name> <operator>*</operator> <name>f6</name> <operator>+</operator> <name><name>this</name><operator>.</operator><name>cx</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>f7</name> <operator>=</operator> <literal type="number">2.0F</literal> <operator>*</operator> <name>f5</name> <operator>*</operator> <name>f7</name> <operator>+</operator> <name><name>this</name><operator>.</operator><name>cy</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>f8</name> <operator>=</operator> <literal type="number">2.0F</literal> <operator>*</operator> <name>f5</name> <operator>*</operator> <name>f8</name> <operator>+</operator> <name><name>this</name><operator>.</operator><name>cz</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>f5</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>f</name> <operator>=</operator> <name>f9</name> <operator>*</operator> <name>f9</name> <operator>-</operator> <name>f10</name> <operator>*</operator> <name>f10</name> <operator>-</operator> <name>f11</name> <operator>*</operator> <name>f11</name> <operator>-</operator> <name>f12</name> <operator>*</operator> <name>f12</name> <operator>+</operator> <name><name>this</name><operator>.</operator><name>cw</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>f10</name> <operator>=</operator> <literal type="number">2.0F</literal> <operator>*</operator> <name>f9</name> <operator>*</operator> <name>f10</name> <operator>+</operator> <name><name>this</name><operator>.</operator><name>cx</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>f11</name> <operator>=</operator> <literal type="number">2.0F</literal> <operator>*</operator> <name>f9</name> <operator>*</operator> <name>f11</name> <operator>+</operator> <name><name>this</name><operator>.</operator><name>cy</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>f12</name> <operator>=</operator> <literal type="number">2.0F</literal> <operator>*</operator> <name>f9</name> <operator>*</operator> <name>f12</name> <operator>+</operator> <name><name>this</name><operator>.</operator><name>cz</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>f9</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>f</name> <operator>=</operator> <name>f13</name> <operator>*</operator> <name>f13</name> <operator>-</operator> <name>f14</name> <operator>*</operator> <name>f14</name> <operator>-</operator> <name>f15</name> <operator>*</operator> <name>f15</name> <operator>-</operator> <name>f16</name> <operator>*</operator> <name>f16</name> <operator>+</operator> <name><name>this</name><operator>.</operator><name>cw</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>f14</name> <operator>=</operator> <literal type="number">2.0F</literal> <operator>*</operator> <name>f13</name> <operator>*</operator> <name>f14</name> <operator>+</operator> <name><name>this</name><operator>.</operator><name>cx</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>f15</name> <operator>=</operator> <literal type="number">2.0F</literal> <operator>*</operator> <name>f13</name> <operator>*</operator> <name>f15</name> <operator>+</operator> <name><name>this</name><operator>.</operator><name>cy</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>f16</name> <operator>=</operator> <literal type="number">2.0F</literal> <operator>*</operator> <name>f13</name> <operator>*</operator> <name>f16</name> <operator>+</operator> <name><name>this</name><operator>.</operator><name>cz</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>f13</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>f</name> <operator>=</operator> <name>f17</name> <operator>*</operator> <name>f17</name> <operator>-</operator> <name>f18</name> <operator>*</operator> <name>f18</name> <operator>-</operator> <name>f19</name> <operator>*</operator> <name>f19</name> <operator>-</operator> <name>f20</name> <operator>*</operator> <name>f20</name> <operator>+</operator> <name><name>this</name><operator>.</operator><name>cw</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>f18</name> <operator>=</operator> <literal type="number">2.0F</literal> <operator>*</operator> <name>f17</name> <operator>*</operator> <name>f18</name> <operator>+</operator> <name><name>this</name><operator>.</operator><name>cx</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>f19</name> <operator>=</operator> <literal type="number">2.0F</literal> <operator>*</operator> <name>f17</name> <operator>*</operator> <name>f19</name> <operator>+</operator> <name><name>this</name><operator>.</operator><name>cy</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>f20</name> <operator>=</operator> <literal type="number">2.0F</literal> <operator>*</operator> <name>f17</name> <operator>*</operator> <name>f20</name> <operator>+</operator> <name><name>this</name><operator>.</operator><name>cz</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>f17</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>f</name> <operator>=</operator> <name>f21</name> <operator>*</operator> <name>f21</name> <operator>-</operator> <name>f22</name> <operator>*</operator> <name>f22</name> <operator>-</operator> <name>f23</name> <operator>*</operator> <name>f23</name> <operator>-</operator> <name>f24</name> <operator>*</operator> <name>f24</name> <operator>+</operator> <name><name>this</name><operator>.</operator><name>cw</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>f22</name> <operator>=</operator> <literal type="number">2.0F</literal> <operator>*</operator> <name>f21</name> <operator>*</operator> <name>f22</name> <operator>+</operator> <name><name>this</name><operator>.</operator><name>cx</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>f23</name> <operator>=</operator> <literal type="number">2.0F</literal> <operator>*</operator> <name>f21</name> <operator>*</operator> <name>f23</name> <operator>+</operator> <name><name>this</name><operator>.</operator><name>cy</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>f24</name> <operator>=</operator> <literal type="number">2.0F</literal> <operator>*</operator> <name>f21</name> <operator>*</operator> <name>f24</name> <operator>+</operator> <name><name>this</name><operator>.</operator><name>cz</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>f21</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
    </block_content>}</block></for> 
    <decl_stmt><decl><type><name>float</name></type> <name>f25</name> <init>= <expr><call><name>length</name><argument_list>(<argument><expr><name>f5</name></expr></argument>, <argument><expr><name>f6</name></expr></argument>, <argument><expr><name>f7</name></expr></argument>, <argument><expr><name>f8</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>length</name><argument_list>(<argument><expr><name>f1</name></expr></argument>, <argument><expr><name>f2</name></expr></argument>, <argument><expr><name>f3</name></expr></argument>, <argument><expr><name>f4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f26</name> <init>= <expr><call><name>length</name><argument_list>(<argument><expr><name>f13</name></expr></argument>, <argument><expr><name>f14</name></expr></argument>, <argument><expr><name>f15</name></expr></argument>, <argument><expr><name>f16</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>length</name><argument_list>(<argument><expr><name>f9</name></expr></argument>, <argument><expr><name>f10</name></expr></argument>, <argument><expr><name>f11</name></expr></argument>, <argument><expr><name>f12</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f27</name> <init>= <expr><call><name>length</name><argument_list>(<argument><expr><name>f21</name></expr></argument>, <argument><expr><name>f22</name></expr></argument>, <argument><expr><name>f23</name></expr></argument>, <argument><expr><name>f24</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>length</name><argument_list>(<argument><expr><name>f17</name></expr></argument>, <argument><expr><name>f18</name></expr></argument>, <argument><expr><name>f19</name></expr></argument>, <argument><expr><name>f20</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Vector3</name></type> <name>vector3</name> <init>= <expr><operator>new</operator> <call><name>Vector3</name><argument_list>(<argument><expr><name>f25</name></expr></argument>, <argument><expr><name>f26</name></expr></argument>, <argument><expr><name>f27</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>set</name><argument_list>(<argument><expr><call><name><name>instance</name><operator>.</operator><name>transformNormalObjectToWorld</name></name><argument_list>(<argument><expr><name>vector3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>normalize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getGeoNormal</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>set</name><argument_list>(<argument><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>paramShadingState</name><operator>.</operator><name>setBasis</name></name><argument_list>(<argument><expr><call><name><name>OrthoNormalBasis</name><operator>.</operator><name>makeFromW</name></name><argument_list>(<argument><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><call><name><name>paramShadingState</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>x</name> <operator>+=</operator> <operator>(</operator><call><name><name>paramShadingState</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>x</name> <operator>*</operator> <name><name>this</name><operator>.</operator><name>epsilon</name></name> <operator>*</operator> <literal type="number">20.0F</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><call><name><name>paramShadingState</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>y</name> <operator>+=</operator> <operator>(</operator><call><name><name>paramShadingState</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>y</name> <operator>*</operator> <name><name>this</name><operator>.</operator><name>epsilon</name></name> <operator>*</operator> <literal type="number">20.0F</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><call><name><name>paramShadingState</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>z</name> <operator>+=</operator> <operator>(</operator><call><name><name>paramShadingState</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>z</name> <operator>*</operator> <name><name>this</name><operator>.</operator><name>epsilon</name></name> <operator>*</operator> <literal type="number">20.0F</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>paramShadingState</name><operator>.</operator><name>setShader</name></name><argument_list>(<argument><expr><call><name><name>instance</name><operator>.</operator><name>getShader</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>paramShadingState</name><operator>.</operator><name>setModifier</name></name><argument_list>(<argument><expr><call><name><name>instance</name><operator>.</operator><name>getModifier</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>private</specifier> <specifier>static</specifier> <name>float</name></type> <name>length</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>paramFloat1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>paramFloat2</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>paramFloat3</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>paramFloat4</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>sqrt</name></name><argument_list>(<argument><expr><operator>(</operator><name>paramFloat1</name> <operator>*</operator> <name>paramFloat1</name> <operator>+</operator> <name>paramFloat2</name> <operator>*</operator> <name>paramFloat2</name> <operator>+</operator> <name>paramFloat3</name> <operator>*</operator> <name>paramFloat3</name> <operator>+</operator> <name>paramFloat4</name> <operator>*</operator> <name>paramFloat4</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>ParameterList</name></type> <name>paramParameterList</name></decl></parameter>, <parameter><decl><type><name>SunflowAPI</name></type> <name>paramSunflowAPI</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>maxIterations</name></name> <operator>=</operator> <call><name><name>paramParameterList</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"iterations"</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>maxIterations</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>epsilon</name></name> <operator>=</operator> <call><name><name>paramParameterList</name><operator>.</operator><name>getFloat</name></name><argument_list>(<argument><expr><literal type="string">"epsilon"</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>epsilon</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cw</name></name> <operator>=</operator> <call><name><name>paramParameterList</name><operator>.</operator><name>getFloat</name></name><argument_list>(<argument><expr><literal type="string">"cw"</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>cw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cx</name></name> <operator>=</operator> <call><name><name>paramParameterList</name><operator>.</operator><name>getFloat</name></name><argument_list>(<argument><expr><literal type="string">"cx"</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>cx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cy</name></name> <operator>=</operator> <call><name><name>paramParameterList</name><operator>.</operator><name>getFloat</name></name><argument_list>(<argument><expr><literal type="string">"cy"</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>cy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cz</name></name> <operator>=</operator> <call><name><name>paramParameterList</name><operator>.</operator><name>getFloat</name></name><argument_list>(<argument><expr><literal type="string">"cz"</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>cz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>PrimitiveList</name></type> <name>getBakingPrimitives</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="null">null</literal></expr>;</return>
  </block_content>}</block></function>
}</block></class>


<comment type="block">/* Location:              /Users/wang/Downloads/sunflow2 copy.jar!/org/sunflow/core/primitive/JuliaFractal.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.3
 */</comment></unit>
