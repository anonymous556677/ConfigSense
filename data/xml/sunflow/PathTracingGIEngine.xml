<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/sunflow.jar.src/org/sunflow/core/gi/PathTracingGIEngine.java"><package>package <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>gi</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>GIEngine</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>Options</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>Ray</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>Scene</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>ShadingState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>image</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>OrthoNormalBasis</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Vector3</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>system</name><operator>.</operator><name>UI</name></name>;</import>

<class><specifier>public</specifier> class <name>PathTracingGIEngine</name> <super_list><implements>implements <super><name>GIEngine</name></super></implements></super_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>samples</name></decl>;</decl_stmt>
  
  <constructor><specifier>public</specifier> <name>PathTracingGIEngine</name><parameter_list>(<parameter><decl><type><name>Options</name></type> <name>paramOptions</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>samples</name></name> <operator>=</operator> <call><name><name>paramOptions</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"gi.path.samples"</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>
  
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>requiresPhotons</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>Scene</name></type> <name>paramScene</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>samples</name></name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>UI</name><operator>.</operator><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"Path tracer settings:"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>Object</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>UI</name><operator>.</operator><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Samples: %d"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{ <expr><call><name><name>Integer</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>samples</name></name></expr></argument>)</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>Color</name></type> <name>getIrradiance</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>paramShadingState</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>paramColor</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>samples</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name><name>Color</name><operator>.</operator><name>BLACK</name></name></expr>;</return></block_content></block></if></if_stmt> 
    <decl_stmt><decl><type><name>Color</name></type> <name>color</name> <init>= <expr><call><name><name>Color</name><operator>.</operator><name>black</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>OrthoNormalBasis</name></type> <name>orthoNormalBasis</name> <init>= <expr><call><name><name>paramShadingState</name><operator>.</operator><name>getBasis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Vector3</name></type> <name>vector3</name> <init>= <expr><operator>new</operator> <call><name>Vector3</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>byte</name></type> <name>b1</name> <init>= <expr><ternary><condition><expr><operator>(</operator><call><name><name>paramShadingState</name><operator>.</operator><name>getDiffuseDepth</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>this</name><operator>.</operator><name>samples</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>byte</name></type> <name>b2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b2</name> <operator>&lt;</operator> <name>b1</name></expr>;</condition> <incr><expr><name>b2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>float</name></type> <name>f1</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>paramShadingState</name><operator>.</operator><name>getRandom</name></name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f2</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>paramShadingState</name><operator>.</operator><name>getRandom</name></name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f3</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>f1</name> <operator>*</operator> <literal type="number">2.0F</literal><operator>)</operator> <operator>*</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f4</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name>f3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f5</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><name>f3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f6</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>sqrt</name></name><argument_list>(<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f7</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>sqrt</name></name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1.0F</literal> <operator>-</operator> <name>f2</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>vector3</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>f4</name> <operator>*</operator> <name>f6</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>vector3</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>f5</name> <operator>*</operator> <name>f6</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>vector3</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name>f7</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>orthoNormalBasis</name><operator>.</operator><name>transform</name></name><argument_list>(<argument><expr><name>vector3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>ShadingState</name></type> <name>shadingState</name> <init>= <expr><call><name><name>paramShadingState</name><operator>.</operator><name>traceFinalGather</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Ray</name><argument_list>(<argument><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>vector3</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>b2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>shadingState</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>shadingState</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>prepareShadingState</name><argument_list>(<argument><expr><name>shadingState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>shadingState</name><operator>.</operator><name>getShader</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name><name>color</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>shadingState</name><operator>.</operator><name>getShader</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRadiance</name><argument_list>(<argument><expr><name>shadingState</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
      </block_content>}</block></if></if_stmt> 
    </block_content>}</block></for> 
    <expr_stmt><expr><call><name><name>color</name><operator>.</operator><name>mul</name></name><argument_list>(<argument><expr><literal type="number">3.1415927F</literal> <operator>/</operator> <name>b1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>color</name></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>Color</name></type> <name>getGlobalRadiance</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>paramShadingState</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>Color</name><operator>.</operator><name>BLACK</name></name></expr>;</return>
  </block_content>}</block></function>
}</block></class>


<comment type="block">/* Location:              /Users/wang/Downloads/sunflow2 copy.jar!/org/sunflow/core/gi/PathTracingGIEngine.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.3
 */</comment></unit>
