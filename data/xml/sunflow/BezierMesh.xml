<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/sunflow.jar.src/org/sunflow/core/tesselatable/BezierMesh.java"><package>package <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>tesselatable</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>SunflowAPI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>Instance</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>IntersectionState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>ParameterList</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>PrimitiveList</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>Ray</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>ShadingState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>Tesselatable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>primitive</name><operator>.</operator><name>QuadMesh</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>primitive</name><operator>.</operator><name>TriangleMesh</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>BoundingBox</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Matrix4</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>OrthoNormalBasis</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Point3</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Vector3</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>system</name><operator>.</operator><name>UI</name></name>;</import>

<class><specifier>public</specifier> class <name>BezierMesh</name> <super_list><implements>implements <super><name>PrimitiveList</name></super>, <super><name>Tesselatable</name></super></implements></super_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>subdivs</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>smooth</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>quads</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>float</name><index>[]</index><index>[]</index></name></type> <name>patches</name></decl>;</decl_stmt>
  
  <constructor><specifier>public</specifier> <name>BezierMesh</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><operator>(</operator><name><name>float</name><index>[]</index><index>[]</index></name><operator>)</operator><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>
  
  <constructor><specifier>public</specifier> <name>BezierMesh</name><parameter_list>(<parameter><decl><type><name><name>float</name><index>[]</index><index>[]</index></name></type> <name>paramArrayOffloat</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>patches</name></name> <operator>=</operator> <name>paramArrayOffloat</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>
  
  <function><type><specifier>public</specifier> <name>BoundingBox</name></type> <name>getWorldBounds</name><parameter_list>(<parameter><decl><type><name>Matrix4</name></type> <name>paramMatrix4</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>BoundingBox</name></type> <name>boundingBox</name> <init>= <expr><operator>new</operator> <call><name>BoundingBox</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>paramMatrix4</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>byte</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name><name>this</name><operator>.</operator><name>patches</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>arrayOfFloat</name> <init>= <expr><name><name>this</name><operator>.</operator><name>patches</name><index>[<expr><name>b</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>byte</name></type> <name>b1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b1</name> <operator>&lt;</operator> <name><name>arrayOfFloat</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>b1</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name><name>boundingBox</name><operator>.</operator><name>include</name></name><argument_list>(<argument><expr><name><name>arrayOfFloat</name><index>[<expr><name>b1</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>arrayOfFloat</name><index>[<expr><name>b1</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>arrayOfFloat</name><index>[<expr><name>b1</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> 
      </block_content>}</block></for> 
    </block_content>}</block></if> <else>else <block>{<block_content>
      <for>for <control>(<init><decl><type><name>byte</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name><name>this</name><operator>.</operator><name>patches</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>arrayOfFloat</name> <init>= <expr><name><name>this</name><operator>.</operator><name>patches</name><index>[<expr><name>b</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>byte</name></type> <name>b1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b1</name> <operator>&lt;</operator> <name><name>arrayOfFloat</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>b1</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>float</name></type> <name>f1</name> <init>= <expr><name><name>arrayOfFloat</name><index>[<expr><name>b1</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>float</name></type> <name>f2</name> <init>= <expr><name><name>arrayOfFloat</name><index>[<expr><name>b1</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>float</name></type> <name>f3</name> <init>= <expr><name><name>arrayOfFloat</name><index>[<expr><name>b1</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>float</name></type> <name>f4</name> <init>= <expr><call><name><name>paramMatrix4</name><operator>.</operator><name>transformPX</name></name><argument_list>(<argument><expr><name>f1</name></expr></argument>, <argument><expr><name>f2</name></expr></argument>, <argument><expr><name>f3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>float</name></type> <name>f5</name> <init>= <expr><call><name><name>paramMatrix4</name><operator>.</operator><name>transformPY</name></name><argument_list>(<argument><expr><name>f1</name></expr></argument>, <argument><expr><name>f2</name></expr></argument>, <argument><expr><name>f3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>float</name></type> <name>f6</name> <init>= <expr><call><name><name>paramMatrix4</name><operator>.</operator><name>transformPZ</name></name><argument_list>(<argument><expr><name>f1</name></expr></argument>, <argument><expr><name>f2</name></expr></argument>, <argument><expr><name>f3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>boundingBox</name><operator>.</operator><name>include</name></name><argument_list>(<argument><expr><name>f4</name></expr></argument>, <argument><expr><name>f5</name></expr></argument>, <argument><expr><name>f6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for> 
      </block_content>}</block></for> 
    </block_content>}</block></else></if_stmt> 
    <return>return <expr><name>boundingBox</name></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>private</specifier> <name><name>float</name><index>[]</index></name></type> <name>bernstein</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>paramFloat</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>arrayOfFloat</name> <init>= <expr><operator>new</operator> <name><name>float</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f</name> <init>= <expr><literal type="number">1.0F</literal> <operator>-</operator> <name>paramFloat</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>arrayOfFloat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>f</name> <operator>*</operator> <name>f</name> <operator>*</operator> <name>f</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>arrayOfFloat</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3.0F</literal> <operator>*</operator> <name>paramFloat</name> <operator>*</operator> <name>f</name> <operator>*</operator> <name>f</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>arrayOfFloat</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3.0F</literal> <operator>*</operator> <name>paramFloat</name> <operator>*</operator> <name>paramFloat</name> <operator>*</operator> <name>f</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>arrayOfFloat</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>paramFloat</name> <operator>*</operator> <name>paramFloat</name> <operator>*</operator> <name>paramFloat</name></expr>;</expr_stmt>
    <return>return <expr><name>arrayOfFloat</name></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>private</specifier> <name><name>float</name><index>[]</index></name></type> <name>bernsteinDeriv</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>paramFloat</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>this</name><operator>.</operator><name>smooth</name></name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt> 
    <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>arrayOfFloat</name> <init>= <expr><operator>new</operator> <name><name>float</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f</name> <init>= <expr><literal type="number">1.0F</literal> <operator>-</operator> <name>paramFloat</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>arrayOfFloat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3.0F</literal> <operator>*</operator> <operator>(</operator><literal type="number">0.0F</literal> <operator>-</operator> <name>f</name> <operator>*</operator> <name>f</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>arrayOfFloat</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3.0F</literal> <operator>*</operator> <operator>(</operator><name>f</name> <operator>*</operator> <name>f</name> <operator>-</operator> <literal type="number">2.0F</literal> <operator>*</operator> <name>paramFloat</name> <operator>*</operator> <name>f</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>arrayOfFloat</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3.0F</literal> <operator>*</operator> <operator>(</operator><literal type="number">2.0F</literal> <operator>*</operator> <name>paramFloat</name> <operator>*</operator> <name>f</name> <operator>-</operator> <name>paramFloat</name> <operator>*</operator> <name>paramFloat</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>arrayOfFloat</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3.0F</literal> <operator>*</operator> <operator>(</operator><name>paramFloat</name> <operator>*</operator> <name>paramFloat</name> <operator>-</operator> <literal type="number">0.0F</literal><operator>)</operator></expr>;</expr_stmt>
    <return>return <expr><name>arrayOfFloat</name></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>private</specifier> <name>void</name></type> <name>getPatchPoint</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>paramFloat1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>paramFloat2</name></decl></parameter>, <parameter><decl><type><name><name>float</name><index>[]</index></name></type> <name>paramArrayOffloat1</name></decl></parameter>, <parameter><decl><type><name><name>float</name><index>[]</index></name></type> <name>paramArrayOffloat2</name></decl></parameter>, <parameter><decl><type><name><name>float</name><index>[]</index></name></type> <name>paramArrayOffloat3</name></decl></parameter>, <parameter><decl><type><name><name>float</name><index>[]</index></name></type> <name>paramArrayOffloat4</name></decl></parameter>, <parameter><decl><type><name><name>float</name><index>[]</index></name></type> <name>paramArrayOffloat5</name></decl></parameter>, <parameter><decl><type><name>Point3</name></type> <name>paramPoint3</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>paramVector3</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>float</name></type> <name>f1</name> <init>= <expr><literal type="number">0.0F</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f2</name> <init>= <expr><literal type="number">0.0F</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f3</name> <init>= <expr><literal type="number">0.0F</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>byte</name></type> <name>b1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>byte</name></type> <name>b2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>b1</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>byte</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><name>b</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>float</name></type> <name>f</name> <init>= <expr><name><name>paramArrayOffloat2</name><index>[<expr><name>b</name></expr>]</index></name> <operator>*</operator> <name><name>paramArrayOffloat3</name><index>[<expr><name>b1</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>f1</name> <operator>+=</operator> <name><name>paramArrayOffloat1</name><index>[<expr><name>b2</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>f</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>f2</name> <operator>+=</operator> <name><name>paramArrayOffloat1</name><index>[<expr><name>b2</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>f</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>f3</name> <operator>+=</operator> <name><name>paramArrayOffloat1</name><index>[<expr><name>b2</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>f</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>b2</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
      </block_content>}</block></while> 
      <expr_stmt><expr><name>b1</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while> 
    <expr_stmt><expr><name><name>paramPoint3</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>f1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>paramPoint3</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>f2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>paramPoint3</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name>f3</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>paramVector3</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>float</name></type> <name>f4</name> <init>= <expr><literal type="number">0.0F</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f5</name> <init>= <expr><literal type="number">0.0F</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f6</name> <init>= <expr><literal type="number">0.0F</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f7</name> <init>= <expr><literal type="number">0.0F</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f8</name> <init>= <expr><literal type="number">0.0F</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f9</name> <init>= <expr><literal type="number">0.0F</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>byte</name></type> <name>b3</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>byte</name></type> <name>b4</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><name>b3</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>byte</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>b</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>float</name></type> <name>f10</name> <init>= <expr><name><name>paramArrayOffloat4</name><index>[<expr><name>b</name></expr>]</index></name> <operator>*</operator> <name><name>paramArrayOffloat3</name><index>[<expr><name>b3</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>f4</name> <operator>+=</operator> <name><name>paramArrayOffloat1</name><index>[<expr><name>b4</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>f10</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>f5</name> <operator>+=</operator> <name><name>paramArrayOffloat1</name><index>[<expr><name>b4</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>f10</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>f6</name> <operator>+=</operator> <name><name>paramArrayOffloat1</name><index>[<expr><name>b4</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>f10</name></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>float</name></type> <name>f11</name> <init>= <expr><name><name>paramArrayOffloat2</name><index>[<expr><name>b</name></expr>]</index></name> <operator>*</operator> <name><name>paramArrayOffloat5</name><index>[<expr><name>b3</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>f7</name> <operator>+=</operator> <name><name>paramArrayOffloat1</name><index>[<expr><name>b4</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>f11</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>f8</name> <operator>+=</operator> <name><name>paramArrayOffloat1</name><index>[<expr><name>b4</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>f11</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>f9</name> <operator>+=</operator> <name><name>paramArrayOffloat1</name><index>[<expr><name>b4</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>f11</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>b</name><operator>++</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name>b4</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        </block_content>}</block></while> 
        <expr_stmt><expr><name>b3</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></while> 
      <expr_stmt><expr><name><name>paramVector3</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>f5</name> <operator>*</operator> <name>f9</name> <operator>-</operator> <name>f6</name> <operator>*</operator> <name>f8</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>paramVector3</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>f6</name> <operator>*</operator> <name>f7</name> <operator>-</operator> <name>f4</name> <operator>*</operator> <name>f9</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>paramVector3</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name>f4</name> <operator>*</operator> <name>f8</name> <operator>-</operator> <name>f5</name> <operator>*</operator> <name>f7</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt> 
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>PrimitiveList</name></type> <name>tesselate</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>arrayOfFloat1</name> <init>= <expr><operator>new</operator> <name><name>float</name><index>[<expr><name><name>this</name><operator>.</operator><name>patches</name><operator>.</operator><name>length</name></name> <operator>*</operator> <operator>(</operator><name><name>this</name><operator>.</operator><name>subdivs</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>this</name><operator>.</operator><name>subdivs</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>arrayOfFloat2</name> <init>= <expr><ternary><condition><expr><name><name>this</name><operator>.</operator><name>smooth</name></name></expr> ?</condition><then> <expr><operator>new</operator> <name><name>float</name><index>[<expr><name><name>this</name><operator>.</operator><name>patches</name><operator>.</operator><name>length</name></name> <operator>*</operator> <operator>(</operator><name><name>this</name><operator>.</operator><name>subdivs</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>this</name><operator>.</operator><name>subdivs</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>arrayOfFloat3</name> <init>= <expr><operator>new</operator> <name><name>float</name><index>[<expr><name><name>this</name><operator>.</operator><name>patches</name><operator>.</operator><name>length</name></name> <operator>*</operator> <operator>(</operator><name><name>this</name><operator>.</operator><name>subdivs</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>this</name><operator>.</operator><name>subdivs</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>arrayOfInt</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name><name>this</name><operator>.</operator><name>patches</name><operator>.</operator><name>length</name></name> <operator>*</operator> <name><name>this</name><operator>.</operator><name>subdivs</name></name> <operator>*</operator> <name><name>this</name><operator>.</operator><name>subdivs</name></name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name><name>this</name><operator>.</operator><name>quads</name></name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">6</literal></expr></else></ternary><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>byte</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f</name> <init>= <expr><literal type="number">1.0F</literal> <operator>/</operator> <name><name>this</name><operator>.</operator><name>subdivs</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>this</name><operator>.</operator><name>subdivs</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Point3</name></type> <name>point3</name> <init>= <expr><operator>new</operator> <call><name>Point3</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Vector3</name></type> <name>vector3</name> <init>= <expr><ternary><condition><expr><name><name>this</name><operator>.</operator><name>smooth</name></name></expr> ?</condition><then> <expr><operator>new</operator> <call><name>Vector3</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name><name>float</name><index>[]</index></name></type> <name>arrayOfFloat</name> <range>: <expr><name><name>this</name><operator>.</operator><name>patches</name></name></expr></range></decl></init>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>byte</name></type> <name>b1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><name>b1</name> <operator>&lt;=</operator> <name><name>this</name><operator>.</operator><name>subdivs</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>float</name></type> <name>f1</name> <init>= <expr><name>b1</name> <operator>*</operator> <name>f</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>arrayOfFloat4</name> <init>= <expr><call><name>bernstein</name><argument_list>(<argument><expr><name>f1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>arrayOfFloat5</name> <init>= <expr><call><name>bernsteinDeriv</name><argument_list>(<argument><expr><name>f1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>byte</name></type> <name>b2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>b2</name> <operator>&lt;=</operator> <name><name>this</name><operator>.</operator><name>subdivs</name></name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>float</name></type> <name>f2</name> <init>= <expr><name>b2</name> <operator>*</operator> <name>f</name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>arrayOfFloat6</name> <init>= <expr><call><name>bernstein</name><argument_list>(<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>arrayOfFloat7</name> <init>= <expr><call><name>bernsteinDeriv</name><argument_list>(<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>getPatchPoint</name><argument_list>(<argument><expr><name>f1</name></expr></argument>, <argument><expr><name>f2</name></expr></argument>, <argument><expr><name>arrayOfFloat</name></expr></argument>, <argument><expr><name>arrayOfFloat4</name></expr></argument>, <argument><expr><name>arrayOfFloat6</name></expr></argument>, <argument><expr><name>arrayOfFloat5</name></expr></argument>, <argument><expr><name>arrayOfFloat7</name></expr></argument>, <argument><expr><name>point3</name></expr></argument>, <argument><expr><name>vector3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>arrayOfFloat1</name><index>[<expr><name>i</name> <operator>+</operator> <name>k</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>point3</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>arrayOfFloat1</name><index>[<expr><name>i</name> <operator>+</operator> <name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>point3</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>arrayOfFloat1</name><index>[<expr><name>i</name> <operator>+</operator> <name>k</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>point3</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>smooth</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>arrayOfFloat2</name><index>[<expr><name>i</name> <operator>+</operator> <name>k</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>vector3</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>arrayOfFloat2</name><index>[<expr><name>i</name> <operator>+</operator> <name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>vector3</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>arrayOfFloat2</name><index>[<expr><name>i</name> <operator>+</operator> <name>k</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>vector3</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt> 
          <expr_stmt><expr><name><name>arrayOfFloat3</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <name>k</name><operator>)</operator> <operator>/</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>f1</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>arrayOfFloat3</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <name>k</name><operator>)</operator> <operator>/</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>f2</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>b2</name><operator>++</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        </block_content>}</block></while> 
        <expr_stmt><expr><name>b1</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></while> 
      <expr_stmt><expr><name>b1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>k</name> <operator>=</operator> <name>i</name> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>
      <while>while <condition>(<expr><name>b1</name> <operator>&lt;</operator> <name><name>this</name><operator>.</operator><name>subdivs</name></name></expr>)</condition> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>byte</name></type> <name>b2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b2</name> <operator>&lt;</operator> <name><name>this</name><operator>.</operator><name>subdivs</name></name></expr>;</condition> <incr><expr><name>b2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><operator>(</operator><name>b1</name> <operator>+</operator> <literal type="number">0</literal><operator>)</operator> <operator>*</operator> <name>j</name> <operator>+</operator> <name>b2</name> <operator>+</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>b1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>j</name> <operator>+</operator> <name>b2</name> <operator>+</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>i1</name> <init>= <expr><operator>(</operator><name>b1</name> <operator>+</operator> <literal type="number">0</literal><operator>)</operator> <operator>*</operator> <name>j</name> <operator>+</operator> <name>b2</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>i2</name> <init>= <expr><operator>(</operator><name>b1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>j</name> <operator>+</operator> <name>b2</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>quads</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>arrayOfInt</name><index>[<expr><name>b</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>k</name> <operator>+</operator> <name>i1</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>arrayOfInt</name><index>[<expr><name>b</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>k</name> <operator>+</operator> <name>m</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>arrayOfInt</name><index>[<expr><name>b</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>k</name> <operator>+</operator> <name>n</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>arrayOfInt</name><index>[<expr><name>b</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>k</name> <operator>+</operator> <name>i2</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>b</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>arrayOfInt</name><index>[<expr><name>b</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>k</name> <operator>+</operator> <name>m</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>arrayOfInt</name><index>[<expr><name>b</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>k</name> <operator>+</operator> <name>n</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>arrayOfInt</name><index>[<expr><name>b</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>k</name> <operator>+</operator> <name>i1</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>arrayOfInt</name><index>[<expr><name>b</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>k</name> <operator>+</operator> <name>n</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>arrayOfInt</name><index>[<expr><name>b</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>k</name> <operator>+</operator> <name>i2</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>arrayOfInt</name><index>[<expr><name>b</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>k</name> <operator>+</operator> <name>i1</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>b</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt> 
        </block_content>}</block></for> 
        <expr_stmt><expr><name>b1</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></while> 
      <expr_stmt><expr><name>i</name> <operator>+=</operator> <name>j</name> <operator>*</operator> <name>j</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    </block_content>}</block></for> 
    <decl_stmt><decl><type><name>ParameterList</name></type> <name>parameterList</name> <init>= <expr><operator>new</operator> <call><name>ParameterList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>parameterList</name><operator>.</operator><name>addPoints</name></name><argument_list>(<argument><expr><literal type="string">"points"</literal></expr></argument>, <argument><expr><name><name>ParameterList</name><operator>.</operator><name>InterpolationType</name><operator>.</operator><name>VERTEX</name></name></expr></argument>, <argument><expr><name>arrayOfFloat1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>quads</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>parameterList</name><operator>.</operator><name>addIntegerArray</name></name><argument_list>(<argument><expr><literal type="string">"quads"</literal></expr></argument>, <argument><expr><name>arrayOfInt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name><name>parameterList</name><operator>.</operator><name>addIntegerArray</name></name><argument_list>(<argument><expr><literal type="string">"triangles"</literal></expr></argument>, <argument><expr><name>arrayOfInt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt> 
    <expr_stmt><expr><call><name><name>parameterList</name><operator>.</operator><name>addTexCoords</name></name><argument_list>(<argument><expr><literal type="string">"uvs"</literal></expr></argument>, <argument><expr><name><name>ParameterList</name><operator>.</operator><name>InterpolationType</name><operator>.</operator><name>VERTEX</name></name></expr></argument>, <argument><expr><name>arrayOfFloat3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>smooth</name></name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>parameterList</name><operator>.</operator><name>addVectors</name></name><argument_list>(<argument><expr><literal type="string">"normals"</literal></expr></argument>, <argument><expr><name><name>ParameterList</name><operator>.</operator><name>InterpolationType</name><operator>.</operator><name>VERTEX</name></name></expr></argument>, <argument><expr><name>arrayOfFloat2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
    <decl_stmt><decl><type><name>PrimitiveList</name></type> <name>primitiveList</name> <init>= <expr><operator>(</operator><name>PrimitiveList</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name><name>this</name><operator>.</operator><name>quads</name></name></expr> ?</condition><then> <expr><operator>new</operator> <call><name>QuadMesh</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><operator>new</operator> <call><name>TriangleMesh</name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>primitiveList</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>parameterList</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>parameterList</name><operator>.</operator><name>clear</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>primitiveList</name></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>ParameterList</name></type> <name>paramParameterList</name></decl></parameter>, <parameter><decl><type><name>SunflowAPI</name></type> <name>paramSunflowAPI</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>subdivs</name></name> <operator>=</operator> <call><name><name>paramParameterList</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"subdivs"</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>subdivs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>smooth</name></name> <operator>=</operator> <call><name><name>paramParameterList</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"smooth"</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>smooth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>quads</name></name> <operator>=</operator> <call><name><name>paramParameterList</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"quads"</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>quads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name><name>paramParameterList</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"nu"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><call><name><name>paramParameterList</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"nv"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>paramParameterList</name><operator>.</operator><name>setVertexCount</name></name><argument_list>(<argument><expr><name>i</name> <operator>*</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>bool1</name> <init>= <expr><call><name><name>paramParameterList</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"uwrap"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>bool2</name> <init>= <expr><call><name><name>paramParameterList</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"vwrap"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>ParameterList</name><operator>.</operator><name>FloatParameter</name></name></type> <name>floatParameter</name> <init>= <expr><call><name><name>paramParameterList</name><operator>.</operator><name>getPointArray</name></name><argument_list>(<argument><expr><literal type="string">"points"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>floatParameter</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>floatParameter</name><operator>.</operator><name>interp</name></name> <operator>==</operator> <name><name>ParameterList</name><operator>.</operator><name>InterpolationType</name><operator>.</operator><name>VERTEX</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><ternary><condition><expr><name>bool1</name></expr> ?</condition><then> <expr><operator>(</operator><name>i</name> <operator>/</operator> <literal type="number">3</literal><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator> <operator>/</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><ternary><condition><expr><name>bool2</name></expr> ?</condition><then> <expr><operator>(</operator><name>j</name> <operator>/</operator> <literal type="number">3</literal><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><operator>(</operator><name>j</name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator> <operator>/</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>m</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printError</name></name><argument_list>(<argument><expr><name><name>UI</name><operator>.</operator><name>Module</name><operator>.</operator><name>GEOM</name></name></expr></argument>, <argument><expr><literal type="string">"Invalid number of patches for bezier mesh - ignoring"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>Object</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
      </block_content>}</block></if></if_stmt> 
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>patches</name></name> <operator>=</operator> <operator>new</operator> <name><name>float</name><index>[<expr><name>k</name> <operator>*</operator> <name>m</name></expr>]</index><index>[]</index></name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>byte</name></type> <name>b1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>byte</name></type> <name>b2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><name>b1</name> <operator>&lt;</operator> <name>m</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>byte</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>b</name> <operator>&lt;</operator> <name>k</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>arrayOfFloat</name> <init>= <expr><name><name>this</name><operator>.</operator><name>patches</name><index>[<expr><name>b2</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <name><name>float</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name>b</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>i1</name> <init>= <expr><name>b1</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
          <for>for <control>(<init><decl><type><name>byte</name></type> <name>b3</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b3</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>b3</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>byte</name></type> <name>b4</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b4</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>b4</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
              <decl_stmt><decl><type><name>int</name></type> <name>i2</name> <init>= <expr><operator>(</operator><name>n</name> <operator>+</operator> <name>b4</name><operator>)</operator> <operator>%</operator> <name>i</name></expr></init></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>int</name></type> <name>i3</name> <init>= <expr><operator>(</operator><name>i1</name> <operator>+</operator> <name>b3</name><operator>)</operator> <operator>%</operator> <name>j</name></expr></init></decl>;</decl_stmt>
              <expr_stmt><expr><name><name>arrayOfFloat</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name>b3</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>b4</name><operator>)</operator> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>floatParameter</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name>i2</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>i3</name><operator>)</operator> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>arrayOfFloat</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name>b3</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>b4</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>floatParameter</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name>i2</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>i3</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>arrayOfFloat</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name>b3</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>b4</name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>floatParameter</name><operator>.</operator><name>data</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name>i2</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>i3</name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></for> 
          </block_content>}</block></for> 
          <expr_stmt><expr><name>b</name><operator>++</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name>b2</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while> 
        <expr_stmt><expr><name>b1</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></while> 
    </block_content>}</block></if></if_stmt> 
    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>subdivs</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printError</name></name><argument_list>(<argument><expr><name><name>UI</name><operator>.</operator><name>Module</name><operator>.</operator><name>GEOM</name></name></expr></argument>, <argument><expr><literal type="string">"Invalid subdivisions for bezier mesh - ignoring"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>Object</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt> 
    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>patches</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printError</name></name><argument_list>(<argument><expr><name><name>UI</name><operator>.</operator><name>Module</name><operator>.</operator><name>GEOM</name></name></expr></argument>, <argument><expr><literal type="string">"No patch data present in bezier mesh - ignoring"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>Object</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt> 
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>int</name></type> <name>getNumPrimitives</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>this</name><operator>.</operator><name>patches</name><operator>.</operator><name>length</name></name></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>float</name></type> <name>getPrimitiveBound</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>paramInt1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>paramInt2</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>arrayOfFloat</name> <init>= <expr><name><name>this</name><operator>.</operator><name>patches</name><index>[<expr><name>paramInt1</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>paramInt2</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>paramInt2</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>float</name></type> <name>f1</name> <init>= <expr><name><name>arrayOfFloat</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>arrayOfFloat</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>k</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>f1</name> <operator>&gt;</operator> <name><name>arrayOfFloat</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><name>f1</name> <operator>=</operator> <name><name>arrayOfFloat</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
      </block_content>}</block></for> 
      <return>return <expr><name>f1</name></expr>;</return>
    </block_content>}</block></if></if_stmt> 
    <decl_stmt><decl><type><name>float</name></type> <name>f</name> <init>= <expr><name><name>arrayOfFloat</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>arrayOfFloat</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>f</name> <operator>&lt;</operator> <name><name>arrayOfFloat</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>arrayOfFloat</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
    </block_content>}</block></for> 
    <return>return <expr><name>f</name></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>intersectPrimitive</name><parameter_list>(<parameter><decl><type><name>Ray</name></type> <name>paramRay</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>paramInt</name></decl></parameter>, <parameter><decl><type><name>IntersectionState</name></type> <name>paramIntersectionState</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>arrayOfFloat1</name> <init>= <expr><call><name><name>paramIntersectionState</name><operator>.</operator><name>getRobustStack</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>arrayOfFloat2</name> <init>= <expr><name><name>this</name><operator>.</operator><name>patches</name><index>[<expr><name>paramInt</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>byte</name></type> <name>b2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b2</name> <operator>&lt;</operator> <literal type="number">48</literal></expr>;</condition> <incr><expr><name>b2</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>arrayOfFloat1</name><index>[<expr><name>b2</name></expr>]</index></name> <operator>=</operator> <name><name>arrayOfFloat2</name><index>[<expr><name>b2</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for> 
    <expr_stmt><expr><name><name>arrayOfFloat1</name><index>[<expr><literal type="number">48</literal></expr>]</index></name> <operator>=</operator> <name><name>Float</name><operator>.</operator><name>POSITIVE_INFINITY</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>arrayOfFloat1</name><index>[<expr><literal type="number">49</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0.0F</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>arrayOfFloat1</name><index>[<expr><literal type="number">50</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0.0F</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>arrayOfFloat1</name><index>[<expr><literal type="number">51</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.0F</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>arrayOfFloat1</name><index>[<expr><literal type="number">52</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.0F</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>byte</name></type> <name>b1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f1</name> <init>= <expr><name><name>paramRay</name><operator>.</operator><name>ox</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f2</name> <init>= <expr><literal type="number">1.0F</literal> <operator>/</operator> <name><name>paramRay</name><operator>.</operator><name>dx</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f3</name> <init>= <expr><name><name>paramRay</name><operator>.</operator><name>oy</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f4</name> <init>= <expr><literal type="number">1.0F</literal> <operator>/</operator> <name><name>paramRay</name><operator>.</operator><name>dy</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f5</name> <init>= <expr><name><name>paramRay</name><operator>.</operator><name>oz</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f6</name> <init>= <expr><literal type="number">1.0F</literal> <operator>/</operator> <name><name>paramRay</name><operator>.</operator><name>dz</name></name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>b1</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>float</name></type> <name>f9</name> <init>= <expr><call><name><name>paramRay</name><operator>.</operator><name>getMin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f10</name> <init>= <expr><call><name><name>paramRay</name><operator>.</operator><name>getMax</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f11</name> <init>= <expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f12</name> <init>= <expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>byte</name></type> <name>b3</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>b1</name> <operator>+</operator> <literal type="number">3</literal></expr></init></decl>;</init> <condition><expr><name>b3</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>f11</name> <operator>&gt;</operator> <name><name>arrayOfFloat1</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><name>f11</name> <operator>=</operator> <name><name>arrayOfFloat1</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
        <if_stmt><if>if <condition>(<expr><name>f12</name> <operator>&lt;</operator> <name><name>arrayOfFloat1</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><name>f12</name> <operator>=</operator> <name><name>arrayOfFloat1</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
        <expr_stmt><expr><name>b3</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></for> 
      <decl_stmt><decl><type><name>float</name></type> <name>f7</name> <init>= <expr><operator>(</operator><name>f11</name> <operator>-</operator> <name>f1</name><operator>)</operator> <operator>*</operator> <name>f2</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f8</name> <init>= <expr><operator>(</operator><name>f12</name> <operator>-</operator> <name>f1</name><operator>)</operator> <operator>*</operator> <name>f2</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>f2</name> <operator>&gt;</operator> <literal type="number">0.0F</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>f7</name> <operator>&gt;</operator> <name>f9</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><name>f9</name> <operator>=</operator> <name>f7</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
        <if_stmt><if>if <condition>(<expr><name>f8</name> <operator>&lt;</operator> <name>f10</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><name>f10</name> <operator>=</operator> <name>f8</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
      </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>f8</name> <operator>&gt;</operator> <name>f9</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><name>f9</name> <operator>=</operator> <name>f8</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
        <if_stmt><if>if <condition>(<expr><name>f7</name> <operator>&lt;</operator> <name>f10</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><name>f10</name> <operator>=</operator> <name>f7</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
      </block_content>}</block></else></if_stmt> 
      <if_stmt><if>if <condition>(<expr><name>f9</name> <operator>&gt;</operator> <name>f10</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>b1</name> <operator>-=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt> 
      <decl_stmt><decl><type><name>float</name></type> <name>f13</name> <init>= <expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f14</name> <init>= <expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>byte</name></type> <name>b4</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>b1</name> <operator>+</operator> <literal type="number">4</literal></expr></init></decl>;</init> <condition><expr><name>b4</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>f13</name> <operator>&gt;</operator> <name><name>arrayOfFloat1</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><name>f13</name> <operator>=</operator> <name><name>arrayOfFloat1</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
        <if_stmt><if>if <condition>(<expr><name>f14</name> <operator>&lt;</operator> <name><name>arrayOfFloat1</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><name>f14</name> <operator>=</operator> <name><name>arrayOfFloat1</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
        <expr_stmt><expr><name>b4</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></for> 
      <expr_stmt><expr><name>f7</name> <operator>=</operator> <operator>(</operator><name>f13</name> <operator>-</operator> <name>f3</name><operator>)</operator> <operator>*</operator> <name>f4</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>f8</name> <operator>=</operator> <operator>(</operator><name>f14</name> <operator>-</operator> <name>f3</name><operator>)</operator> <operator>*</operator> <name>f4</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>f4</name> <operator>&gt;</operator> <literal type="number">0.0F</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>f7</name> <operator>&gt;</operator> <name>f9</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><name>f9</name> <operator>=</operator> <name>f7</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
        <if_stmt><if>if <condition>(<expr><name>f8</name> <operator>&lt;</operator> <name>f10</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><name>f10</name> <operator>=</operator> <name>f8</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
      </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>f8</name> <operator>&gt;</operator> <name>f9</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><name>f9</name> <operator>=</operator> <name>f8</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
        <if_stmt><if>if <condition>(<expr><name>f7</name> <operator>&lt;</operator> <name>f10</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><name>f10</name> <operator>=</operator> <name>f7</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
      </block_content>}</block></else></if_stmt> 
      <if_stmt><if>if <condition>(<expr><name>f9</name> <operator>&gt;</operator> <name>f10</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>b1</name> <operator>-=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt> 
      <decl_stmt><decl><type><name>float</name></type> <name>f15</name> <init>= <expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f16</name> <init>= <expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>byte</name></type> <name>b5</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name>b1</name> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</init> <condition><expr><name>b5</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>k</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>f15</name> <operator>&gt;</operator> <name><name>arrayOfFloat1</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><name>f15</name> <operator>=</operator> <name><name>arrayOfFloat1</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
        <if_stmt><if>if <condition>(<expr><name>f16</name> <operator>&lt;</operator> <name><name>arrayOfFloat1</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><name>f16</name> <operator>=</operator> <name><name>arrayOfFloat1</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
        <expr_stmt><expr><name>b5</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></for> 
      <expr_stmt><expr><name>f7</name> <operator>=</operator> <operator>(</operator><name>f15</name> <operator>-</operator> <name>f5</name><operator>)</operator> <operator>*</operator> <name>f6</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>f8</name> <operator>=</operator> <operator>(</operator><name>f16</name> <operator>-</operator> <name>f5</name><operator>)</operator> <operator>*</operator> <name>f6</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>f6</name> <operator>&gt;</operator> <literal type="number">0.0F</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>f7</name> <operator>&gt;</operator> <name>f9</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><name>f9</name> <operator>=</operator> <name>f7</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
        <if_stmt><if>if <condition>(<expr><name>f8</name> <operator>&lt;</operator> <name>f10</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><name>f10</name> <operator>=</operator> <name>f8</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
      </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>f8</name> <operator>&gt;</operator> <name>f9</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><name>f9</name> <operator>=</operator> <name>f8</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
        <if_stmt><if>if <condition>(<expr><name>f7</name> <operator>&lt;</operator> <name>f10</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><name>f10</name> <operator>=</operator> <name>f7</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
      </block_content>}</block></else></if_stmt> 
      <if_stmt><if>if <condition>(<expr><name>f9</name> <operator>&gt;</operator> <name>f10</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>b1</name> <operator>-=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt> 
      <decl_stmt><decl><type><name>float</name></type> <name>f17</name> <init>= <expr><name>f12</name> <operator>-</operator> <name>f11</name> <operator>+</operator> <name>f14</name> <operator>-</operator> <name>f13</name> <operator>+</operator> <name>f16</name> <operator>-</operator> <name>f15</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>Float</name><operator>.</operator><name>floatToRawIntBits</name></name><argument_list>(<argument><expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <literal type="number">48</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>Float</name><operator>.</operator><name>floatToRawIntBits</name></name><argument_list>(<argument><expr><name>f17</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>paramRay</name><operator>.</operator><name>setMax</name></name><argument_list>(<argument><expr><name>f9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>paramIntersectionState</name><operator>.</operator><name>setIntersection</name></name><argument_list>(<argument><expr><name>paramInt</name></expr></argument>, <argument><expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <literal type="number">49</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <literal type="number">50</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>b1</name> <operator>-=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt> 
      <decl_stmt><decl><type><name>float</name></type> <name>f18</name> <init>= <expr><literal type="number">0.0F</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f19</name> <init>= <expr><literal type="number">0.0F</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>byte</name></type> <name>b6</name></decl>;</decl_stmt>
      <for>for <control>(<init><expr><name>b6</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b6</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>b6</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>f18</name> <operator>+=</operator> <call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <literal type="number">9</literal> <operator>+</operator> <name>b6</name></expr>]</index></name> <operator>-</operator> <name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <name>b6</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>f19</name> <operator>+=</operator> <call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <literal type="number">36</literal> <operator>+</operator> <name>b6</name></expr>]</index></name> <operator>-</operator> <name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <name>b6</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for> 
      <if_stmt><if>if <condition>(<expr><name>f18</name> <operator>&gt;</operator> <name>f19</name></expr>)</condition> <block>{<block_content>
        <for>for <control>(<init><expr><name>b6</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b6</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>b6</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <for>for <control>(<init><decl><type><name>byte</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>float</name></type> <name>f22</name> <init>= <expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <operator>(</operator><name>b6</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>b</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>f23</name> <init>= <expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <operator>(</operator><name>b6</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>b</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>f24</name> <init>= <expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <operator>(</operator><name>b6</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>b</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>f25</name> <init>= <expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <operator>(</operator><name>b6</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>b</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>f26</name> <init>= <expr><name>f22</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>f27</name> <init>= <expr><operator>(</operator><name>f22</name> <operator>+</operator> <name>f23</name><operator>)</operator> <operator>*</operator> <literal type="number">0.5F</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>f28</name> <init>= <expr><name>f27</name> <operator>*</operator> <literal type="number">0.5F</literal> <operator>+</operator> <operator>(</operator><name>f23</name> <operator>+</operator> <name>f24</name><operator>)</operator> <operator>*</operator> <literal type="number">0.25F</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>f29</name> <init>= <expr><name>f25</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>f30</name> <init>= <expr><operator>(</operator><name>f24</name> <operator>+</operator> <name>f25</name><operator>)</operator> <operator>*</operator> <literal type="number">0.5F</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>f31</name> <init>= <expr><name>f30</name> <operator>*</operator> <literal type="number">0.5F</literal> <operator>+</operator> <operator>(</operator><name>f23</name> <operator>+</operator> <name>f24</name><operator>)</operator> <operator>*</operator> <literal type="number">0.25F</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>f32</name> <init>= <expr><operator>(</operator><name>f28</name> <operator>+</operator> <name>f31</name><operator>)</operator> <operator>*</operator> <literal type="number">0.5F</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>f33</name> <init>= <expr><name>f32</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <operator>(</operator><name>b6</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>b</name></expr>]</index></name> <operator>=</operator> <name>f26</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <operator>(</operator><name>b6</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>b</name></expr>]</index></name> <operator>=</operator> <name>f27</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <operator>(</operator><name>b6</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>b</name></expr>]</index></name> <operator>=</operator> <name>f28</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <operator>(</operator><name>b6</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>b</name></expr>]</index></name> <operator>=</operator> <name>f32</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <literal type="number">64</literal> <operator>+</operator> <operator>(</operator><name>b6</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>b</name></expr>]</index></name> <operator>=</operator> <name>f33</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <literal type="number">64</literal> <operator>+</operator> <operator>(</operator><name>b6</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>b</name></expr>]</index></name> <operator>=</operator> <name>f31</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <literal type="number">64</literal> <operator>+</operator> <operator>(</operator><name>b6</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>b</name></expr>]</index></name> <operator>=</operator> <name>f30</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <literal type="number">64</literal> <operator>+</operator> <operator>(</operator><name>b6</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>b</name></expr>]</index></name> <operator>=</operator> <name>f29</name></expr>;</expr_stmt>
          </block_content>}</block></for> 
        </block_content>}</block></for> 
        <expr_stmt><expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <literal type="number">64</literal> <operator>+</operator> <literal type="number">48</literal></expr>]</index></name> <operator>=</operator> <name>f17</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <literal type="number">48</literal></expr>]</index></name> <operator>=</operator> <name>f17</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>f20</name> <init>= <expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <literal type="number">49</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>f21</name> <init>= <expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <literal type="number">51</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <literal type="number">49</literal></expr>]</index></name> <operator>=</operator> <name>f20</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <literal type="number">64</literal> <operator>+</operator> <literal type="number">50</literal></expr>]</index></name> <operator>=</operator> <name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <literal type="number">50</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <literal type="number">64</literal> <operator>+</operator> <literal type="number">49</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>f20</name> <operator>+</operator> <name>f21</name><operator>)</operator> <operator>*</operator> <literal type="number">0.5F</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <literal type="number">51</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>f20</name> <operator>+</operator> <name>f21</name><operator>)</operator> <operator>*</operator> <literal type="number">0.5F</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <literal type="number">64</literal> <operator>+</operator> <literal type="number">51</literal></expr>]</index></name> <operator>=</operator> <name>f21</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <literal type="number">64</literal> <operator>+</operator> <literal type="number">52</literal></expr>]</index></name> <operator>=</operator> <name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <literal type="number">52</literal></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <for>for <control>(<init><expr><name>b6</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b6</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>b6</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <for>for <control>(<init><decl><type><name>byte</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>float</name></type> <name>f22</name> <init>= <expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <operator>(</operator><literal type="number">0</literal> <operator>+</operator> <name>b6</name><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>b</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>f23</name> <init>= <expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <operator>(</operator><literal type="number">4</literal> <operator>+</operator> <name>b6</name><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>b</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>f24</name> <init>= <expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <operator>(</operator><literal type="number">8</literal> <operator>+</operator> <name>b6</name><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>b</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>f25</name> <init>= <expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <operator>(</operator><literal type="number">12</literal> <operator>+</operator> <name>b6</name><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>b</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>f26</name> <init>= <expr><name>f22</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>f27</name> <init>= <expr><operator>(</operator><name>f22</name> <operator>+</operator> <name>f23</name><operator>)</operator> <operator>*</operator> <literal type="number">0.5F</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>f28</name> <init>= <expr><name>f27</name> <operator>*</operator> <literal type="number">0.5F</literal> <operator>+</operator> <operator>(</operator><name>f23</name> <operator>+</operator> <name>f24</name><operator>)</operator> <operator>*</operator> <literal type="number">0.25F</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>f29</name> <init>= <expr><name>f25</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>f30</name> <init>= <expr><operator>(</operator><name>f24</name> <operator>+</operator> <name>f25</name><operator>)</operator> <operator>*</operator> <literal type="number">0.5F</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>f31</name> <init>= <expr><name>f30</name> <operator>*</operator> <literal type="number">0.5F</literal> <operator>+</operator> <operator>(</operator><name>f23</name> <operator>+</operator> <name>f24</name><operator>)</operator> <operator>*</operator> <literal type="number">0.25F</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>f32</name> <init>= <expr><operator>(</operator><name>f28</name> <operator>+</operator> <name>f31</name><operator>)</operator> <operator>*</operator> <literal type="number">0.5F</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>f33</name> <init>= <expr><name>f32</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <operator>(</operator><literal type="number">0</literal> <operator>+</operator> <name>b6</name><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>b</name></expr>]</index></name> <operator>=</operator> <name>f26</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <operator>(</operator><literal type="number">4</literal> <operator>+</operator> <name>b6</name><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>b</name></expr>]</index></name> <operator>=</operator> <name>f27</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <operator>(</operator><literal type="number">8</literal> <operator>+</operator> <name>b6</name><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>b</name></expr>]</index></name> <operator>=</operator> <name>f28</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <operator>(</operator><literal type="number">12</literal> <operator>+</operator> <name>b6</name><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>b</name></expr>]</index></name> <operator>=</operator> <name>f32</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <literal type="number">64</literal> <operator>+</operator> <operator>(</operator><literal type="number">0</literal> <operator>+</operator> <name>b6</name><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>b</name></expr>]</index></name> <operator>=</operator> <name>f33</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <literal type="number">64</literal> <operator>+</operator> <operator>(</operator><literal type="number">4</literal> <operator>+</operator> <name>b6</name><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>b</name></expr>]</index></name> <operator>=</operator> <name>f31</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <literal type="number">64</literal> <operator>+</operator> <operator>(</operator><literal type="number">8</literal> <operator>+</operator> <name>b6</name><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>b</name></expr>]</index></name> <operator>=</operator> <name>f30</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <literal type="number">64</literal> <operator>+</operator> <operator>(</operator><literal type="number">12</literal> <operator>+</operator> <name>b6</name><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>b</name></expr>]</index></name> <operator>=</operator> <name>f29</name></expr>;</expr_stmt>
          </block_content>}</block></for> 
        </block_content>}</block></for> 
        <expr_stmt><expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <literal type="number">64</literal> <operator>+</operator> <literal type="number">48</literal></expr>]</index></name> <operator>=</operator> <name>f17</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <literal type="number">48</literal></expr>]</index></name> <operator>=</operator> <name>f17</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>f20</name> <init>= <expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <literal type="number">50</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>f21</name> <init>= <expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <literal type="number">52</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <literal type="number">64</literal> <operator>+</operator> <literal type="number">49</literal></expr>]</index></name> <operator>=</operator> <name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <literal type="number">49</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <literal type="number">50</literal></expr>]</index></name> <operator>=</operator> <name>f20</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <literal type="number">64</literal> <operator>+</operator> <literal type="number">50</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>f20</name> <operator>+</operator> <name>f21</name><operator>)</operator> <operator>*</operator> <literal type="number">0.5F</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <literal type="number">52</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>f20</name> <operator>+</operator> <name>f21</name><operator>)</operator> <operator>*</operator> <literal type="number">0.5F</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <literal type="number">64</literal> <operator>+</operator> <literal type="number">51</literal></expr>]</index></name> <operator>=</operator> <name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <literal type="number">51</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>arrayOfFloat1</name><index>[<expr><name>b1</name> <operator>+</operator> <literal type="number">64</literal> <operator>+</operator> <literal type="number">52</literal></expr>]</index></name> <operator>=</operator> <name>f21</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt> 
      <expr_stmt><expr><name>b1</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
    </block_content>}</block></while> 
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>prepareShadingState</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>paramShadingState</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>paramShadingState</name><operator>.</operator><name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getRay</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPoint</name><argument_list>(<argument><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Instance</name></type> <name>instance</name> <init>= <expr><call><name><name>paramShadingState</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f1</name> <init>= <expr><call><name><name>paramShadingState</name><operator>.</operator><name>getU</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f2</name> <init>= <expr><call><name><name>paramShadingState</name><operator>.</operator><name>getV</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>arrayOfFloat1</name> <init>= <expr><call><name>bernstein</name><argument_list>(<argument><expr><name>f1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>arrayOfFloat2</name> <init>= <expr><call><name>bernsteinDeriv</name><argument_list>(<argument><expr><name>f1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>arrayOfFloat3</name> <init>= <expr><call><name>bernstein</name><argument_list>(<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>arrayOfFloat4</name> <init>= <expr><call><name>bernsteinDeriv</name><argument_list>(<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>getPatchPoint</name><argument_list>(<argument><expr><name>f1</name></expr></argument>, <argument><expr><name>f2</name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>patches</name><index>[<expr><call><name><name>paramShadingState</name><operator>.</operator><name>getPrimitiveID</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><name>arrayOfFloat1</name></expr></argument>, <argument><expr><name>arrayOfFloat3</name></expr></argument>, <argument><expr><name>arrayOfFloat2</name></expr></argument>, <argument><expr><name>arrayOfFloat4</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Point3</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>set</name><argument_list>(<argument><expr><call><name><name>instance</name><operator>.</operator><name>transformNormalObjectToWorld</name></name><argument_list>(<argument><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>normalize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getGeoNormal</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>set</name><argument_list>(<argument><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getUV</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>set</name><argument_list>(<argument><expr><name>f1</name></expr></argument>, <argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>paramShadingState</name><operator>.</operator><name>setShader</name></name><argument_list>(<argument><expr><call><name><name>instance</name><operator>.</operator><name>getShader</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>paramShadingState</name><operator>.</operator><name>setModifier</name></name><argument_list>(<argument><expr><call><name><name>instance</name><operator>.</operator><name>getModifier</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>paramShadingState</name><operator>.</operator><name>setBasis</name></name><argument_list>(<argument><expr><call><name><name>OrthoNormalBasis</name><operator>.</operator><name>makeFromW</name></name><argument_list>(<argument><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>PrimitiveList</name></type> <name>getBakingPrimitives</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="null">null</literal></expr>;</return>
  </block_content>}</block></function>
}</block></class>


<comment type="block">/* Location:              /Users/wang/Downloads/sunflow2 copy.jar!/org/sunflow/core/tesselatable/BezierMesh.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.3
 */</comment></unit>
