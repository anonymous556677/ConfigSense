<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/sunflow.jar.src/org/sunflow/core/shader/AnisotropicWardShader.java"><package>package <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>shader</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>SunflowAPI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>LightSample</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>ParameterList</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>Ray</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>Shader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>ShadingState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>image</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>OrthoNormalBasis</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Vector3</name></name>;</import>

<class><specifier>public</specifier> class <name>AnisotropicWardShader</name> <super_list><implements>implements <super><name>Shader</name></super></implements></super_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <name>Color</name></type> <name>rhoD</name> <init>= <expr><name><name>Color</name><operator>.</operator><name>GRAY</name></name></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>Color</name></type> <name>rhoS</name> <init>= <expr><name><name>Color</name><operator>.</operator><name>GRAY</name></name></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>alphaX</name> <init>= <expr><literal type="number">1.0F</literal></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>alphaY</name> <init>= <expr><literal type="number">1.0F</literal></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>numRays</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
  
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>ParameterList</name></type> <name>paramParameterList</name></decl></parameter>, <parameter><decl><type><name>SunflowAPI</name></type> <name>paramSunflowAPI</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>rhoD</name></name> <operator>=</operator> <call><name><name>paramParameterList</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><literal type="string">"diffuse"</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>rhoD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>rhoS</name></name> <operator>=</operator> <call><name><name>paramParameterList</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><literal type="string">"specular"</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>rhoS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>alphaX</name></name> <operator>=</operator> <call><name><name>paramParameterList</name><operator>.</operator><name>getFloat</name></name><argument_list>(<argument><expr><literal type="string">"roughnessX"</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>alphaX</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>alphaY</name></name> <operator>=</operator> <call><name><name>paramParameterList</name><operator>.</operator><name>getFloat</name></name><argument_list>(<argument><expr><literal type="string">"roughnessY"</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>alphaY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>numRays</name></name> <operator>=</operator> <call><name><name>paramParameterList</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"samples"</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>numRays</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>protected</specifier> <name>Color</name></type> <name>getDiffuse</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>paramShadingState</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>this</name><operator>.</operator><name>rhoD</name></name></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>private</specifier> <name>float</name></type> <name>brdf</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>paramVector31</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>paramVector32</name></decl></parameter>, <parameter><decl><type><name>OrthoNormalBasis</name></type> <name>paramOrthoNormalBasis</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><literal type="null">null</literal> <operator>=</operator> <literal type="number">12.566371F</literal> <operator>*</operator> <name><name>this</name><operator>.</operator><name>alphaX</name></name> <operator>*</operator> <name><name>this</name><operator>.</operator><name>alphaY</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><literal type="null">null</literal> <operator>*=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>sqrt</name></name><argument_list>(<argument><expr><operator>(</operator><call><name><name>paramOrthoNormalBasis</name><operator>.</operator><name>untransformZ</name></name><argument_list>(<argument><expr><name>paramVector31</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name><name>paramOrthoNormalBasis</name><operator>.</operator><name>untransformZ</name></name><argument_list>(<argument><expr><name>paramVector32</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Vector3</name></type> <name>vector3</name> <init>= <expr><call><name><name>Vector3</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>paramVector31</name></expr></argument>, <argument><expr><name>paramVector32</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Vector3</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>paramOrthoNormalBasis</name><operator>.</operator><name>untransform</name></name><argument_list>(<argument><expr><name>vector3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f1</name> <init>= <expr><name><name>vector3</name><operator>.</operator><name>x</name></name> <operator>/</operator> <name><name>this</name><operator>.</operator><name>alphaX</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>f1</name> <operator>*=</operator> <name>f1</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f2</name> <init>= <expr><name><name>vector3</name><operator>.</operator><name>y</name></name> <operator>/</operator> <name><name>this</name><operator>.</operator><name>alphaY</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>f2</name> <operator>*=</operator> <name>f2</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f3</name> <init>= <expr><name><name>vector3</name><operator>.</operator><name>z</name></name> <operator>*</operator> <name><name>vector3</name><operator>.</operator><name>z</name></name></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>exp</name></name><argument_list>(<argument><expr><operator>(</operator><operator>-</operator><operator>(</operator><name>f1</name> <operator>+</operator> <name>f2</name><operator>)</operator> <operator>/</operator> <name>f3</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="null">null</literal></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>Color</name></type> <name>getRadiance</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>paramShadingState</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>paramShadingState</name><operator>.</operator><name>faceforward</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>OrthoNormalBasis</name></type> <name>orthoNormalBasis</name> <init>= <expr><call><name><name>paramShadingState</name><operator>.</operator><name>getBasis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>paramShadingState</name><operator>.</operator><name>initLightSamples</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>paramShadingState</name><operator>.</operator><name>initCausticSamples</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Color</name></type> <name>color</name> <init>= <expr><call><name><name>Color</name><operator>.</operator><name>black</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>paramShadingState</name><operator>.</operator><name>includeSpecular</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>Vector3</name></type> <name>vector3</name> <init>= <expr><call><name><name>paramShadingState</name><operator>.</operator><name>getRay</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDirection</name><argument_list>()</argument_list></call><operator>.</operator><call><name>negate</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Vector3</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>LightSample</name></type> <name>lightSample</name> <range>: <expr><name>paramShadingState</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>float</name></type> <name>f1</name> <init>= <expr><call><name><name>lightSample</name><operator>.</operator><name>dot</name></name><argument_list>(<argument><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>f2</name> <init>= <expr><call><name>brdf</name><argument_list>(<argument><expr><name>vector3</name></expr></argument>, <argument><expr><call><name><name>lightSample</name><operator>.</operator><name>getShadowRay</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDirection</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>orthoNormalBasis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>color</name><operator>.</operator><name>madd</name></name><argument_list>(<argument><expr><name>f1</name> <operator>*</operator> <name>f2</name></expr></argument>, <argument><expr><call><name><name>lightSample</name><operator>.</operator><name>getSpecularRadiance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for> 
      <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>numRays</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>byte</name></type> <name>b1</name> <init>= <expr><ternary><condition><expr><operator>(</operator><call><name><name>paramShadingState</name><operator>.</operator><name>getDepth</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>this</name><operator>.</operator><name>numRays</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>byte</name></type> <name>b2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b2</name> <operator>&lt;</operator> <name>b1</name></expr>;</condition> <incr><expr><name>b2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>double</name></type> <name>d1</name> <init>= <expr><call><name><name>paramShadingState</name><operator>.</operator><name>getRandom</name></name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>double</name></type> <name>d2</name> <init>= <expr><call><name><name>paramShadingState</name><operator>.</operator><name>getRandom</name></name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>float</name></type> <name>f1</name> <init>= <expr><name><name>this</name><operator>.</operator><name>alphaY</name></name> <operator>/</operator> <name><name>this</name><operator>.</operator><name>alphaX</name></name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>float</name></type> <name>f2</name> <init>= <expr><literal type="number">0.0F</literal></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>d1</name> <operator>&lt;</operator> <literal type="number">0.25D</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr><literal type="number">4.0D</literal> <operator>*</operator> <name>d1</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>f2</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>atan</name></name><argument_list>(<argument><expr><name>f1</name> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>tan</name></name><argument_list>(<argument><expr><literal type="number">1.5707963267948966D</literal> <operator>*</operator> <name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>d1</name> <operator>&lt;</operator> <literal type="number">0.5D</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr><literal type="number">1.0D</literal> <operator>-</operator> <literal type="number">4.0D</literal> <operator>*</operator> <operator>(</operator><literal type="number">0.5D</literal> <operator>-</operator> <name>d1</name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>f2</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>atan</name></name><argument_list>(<argument><expr><name>f1</name> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>tan</name></name><argument_list>(<argument><expr><literal type="number">1.5707963267948966D</literal> <operator>*</operator> <name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>f2</name> <operator>=</operator> <literal type="number">3.1415927F</literal> <operator>-</operator> <name>f2</name></expr>;</expr_stmt>
          </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>d1</name> <operator>&lt;</operator> <literal type="number">0.75D</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr><literal type="number">4.0D</literal> <operator>*</operator> <operator>(</operator><name>d1</name> <operator>-</operator> <literal type="number">0.5D</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>f2</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>atan</name></name><argument_list>(<argument><expr><name>f1</name> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>tan</name></name><argument_list>(<argument><expr><literal type="number">1.5707963267948966D</literal> <operator>*</operator> <name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>f2</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>f2</name> <operator>+</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name><operator>)</operator></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr><literal type="number">1.0D</literal> <operator>-</operator> <literal type="number">4.0D</literal> <operator>*</operator> <operator>(</operator><literal type="number">1.0D</literal> <operator>-</operator> <name>d1</name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>f2</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>atan</name></name><argument_list>(<argument><expr><name>f1</name> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>tan</name></name><argument_list>(<argument><expr><literal type="number">1.5707963267948966D</literal> <operator>*</operator> <name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>f2</name> <operator>=</operator> <literal type="number">6.2831855F</literal> <operator>-</operator> <name>f2</name></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt> 
          <decl_stmt><decl><type><name>float</name></type> <name>f3</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>float</name></type> <name>f4</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>float</name></type> <name>f5</name> <init>= <expr><name>f3</name> <operator>*</operator> <name>f3</name> <operator>/</operator> <name><name>this</name><operator>.</operator><name>alphaX</name></name> <operator>*</operator> <name><name>this</name><operator>.</operator><name>alphaX</name></name> <operator>+</operator> <name>f4</name> <operator>*</operator> <name>f4</name> <operator>/</operator> <name><name>this</name><operator>.</operator><name>alphaY</name></name> <operator>*</operator> <name><name>this</name><operator>.</operator><name>alphaY</name></name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>float</name></type> <name>f6</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>atan</name></name><argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>sqrt</name></name><argument_list>(<argument><expr><operator>-</operator><call><name><name>Math</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><literal type="number">1.0D</literal> <operator>-</operator> <name>d2</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>f5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>float</name></type> <name>f7</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><name>f6</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>float</name></type> <name>f8</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name>f6</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>Vector3</name></type> <name>vector31</name> <init>= <expr><operator>new</operator> <call><name>Vector3</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>vector31</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>f7</name> <operator>*</operator> <name>f3</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>vector31</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>f7</name> <operator>*</operator> <name>f4</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>vector31</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name>f8</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>orthoNormalBasis</name><operator>.</operator><name>transform</name></name><argument_list>(<argument><expr><name>vector31</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>Vector3</name></type> <name>vector32</name> <init>= <expr><operator>new</operator> <call><name>Vector3</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>float</name></type> <name>f9</name> <init>= <expr><call><name><name>Vector3</name><operator>.</operator><name>dot</name></name><argument_list>(<argument><expr><name>vector31</name></expr></argument>, <argument><expr><name>vector3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>vector32</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">2.0F</literal> <operator>*</operator> <name>f9</name> <operator>*</operator> <name><name>vector31</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>vector3</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>vector32</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">2.0F</literal> <operator>*</operator> <name>f9</name> <operator>*</operator> <name><name>vector31</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>vector3</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>vector32</name><operator>.</operator><name>z</name></name> <operator>=</operator> <literal type="number">2.0F</literal> <operator>*</operator> <name>f9</name> <operator>*</operator> <name><name>vector31</name><operator>.</operator><name>z</name></name> <operator>-</operator> <name><name>vector3</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>float</name></type> <name>f10</name> <init>= <expr><call><name><name>orthoNormalBasis</name><operator>.</operator><name>untransformZ</name></name><argument_list>(<argument><expr><name>vector32</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>float</name></type> <name>f11</name> <init>= <expr><call><name><name>orthoNormalBasis</name><operator>.</operator><name>untransformZ</name></name><argument_list>(<argument><expr><name>vector3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>float</name></type> <name>f12</name> <init>= <expr><name>f9</name> <operator>*</operator> <name>f8</name> <operator>*</operator> <name>f8</name> <operator>*</operator> <name>f8</name> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>sqrt</name></name><argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name>f10</name> <operator>/</operator> <name>f11</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>Ray</name></type> <name>ray</name> <init>= <expr><operator>new</operator> <call><name>Ray</name><argument_list>(<argument><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>vector32</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>color</name><operator>.</operator><name>madd</name></name><argument_list>(<argument><expr><name>f12</name> <operator>/</operator> <name>b1</name></expr></argument>, <argument><expr><call><name><name>paramShadingState</name><operator>.</operator><name>traceGlossy</name></name><argument_list>(<argument><expr><name>ray</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for> 
      </block_content>}</block></if></if_stmt> 
      <expr_stmt><expr><call><name><name>color</name><operator>.</operator><name>mul</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>rhoS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt> 
    <expr_stmt><expr><call><name><name>color</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>paramShadingState</name><operator>.</operator><name>diffuse</name></name><argument_list>(<argument><expr><call><name>getDiffuse</name><argument_list>(<argument><expr><name>paramShadingState</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>color</name></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>scatterPhoton</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>paramShadingState</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>paramColor</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>paramShadingState</name><operator>.</operator><name>faceforward</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Color</name></type> <name>color</name> <init>= <expr><call><name>getDiffuse</name><argument_list>(<argument><expr><name>paramShadingState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>paramShadingState</name><operator>.</operator><name>storePhoton</name></name><argument_list>(<argument><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getRay</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDirection</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>paramColor</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f1</name> <init>= <expr><call><name><name>color</name><operator>.</operator><name>getAverage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f2</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>rhoS</name><operator>.</operator><name>getAverage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr><call><name><name>paramShadingState</name><operator>.</operator><name>getRandom</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <name>f1</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>paramColor</name><operator>.</operator><name>mul</name></name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>mul</name><argument_list>(<argument><expr><literal type="number">1.0F</literal> <operator>/</operator> <name>f1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>OrthoNormalBasis</name></type> <name>orthoNormalBasis</name> <init>= <expr><call><name><name>paramShadingState</name><operator>.</operator><name>getBasis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>double</name></type> <name>d1</name> <init>= <expr><literal type="number">6.283185307179586D</literal> <operator>*</operator> <name>d</name> <operator>/</operator> <name>f1</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>double</name></type> <name>d2</name> <init>= <expr><call><name><name>paramShadingState</name><operator>.</operator><name>getRandom</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f3</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>sqrt</name></name><argument_list>(<argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f4</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>sqrt</name></name><argument_list>(<argument><expr><literal type="number">1.0D</literal> <operator>-</operator> <name>d2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Vector3</name></type> <name>vector3</name> <init>= <expr><operator>new</operator> <call><name>Vector3</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>f3</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>f3</name></expr></argument>, <argument><expr><name>f4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>vector3</name> <operator>=</operator> <call><name><name>orthoNormalBasis</name><operator>.</operator><name>transform</name></name><argument_list>(<argument><expr><name>vector3</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Vector3</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>paramShadingState</name><operator>.</operator><name>traceDiffusePhoton</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Ray</name><argument_list>(<argument><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>vector3</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>paramColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>d</name> <operator>&lt;</operator> <operator>(</operator><name>f1</name> <operator>+</operator> <name>f2</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>paramColor</name><operator>.</operator><name>mul</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>rhoS</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>mul</name><argument_list>(<argument><expr><literal type="number">1.0F</literal> <operator>/</operator> <name>f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>OrthoNormalBasis</name></type> <name>orthoNormalBasis</name> <init>= <expr><call><name><name>paramShadingState</name><operator>.</operator><name>getBasis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Vector3</name></type> <name>vector31</name> <init>= <expr><call><name><name>paramShadingState</name><operator>.</operator><name>getRay</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDirection</name><argument_list>()</argument_list></call><operator>.</operator><call><name>negate</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Vector3</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>double</name></type> <name>d1</name> <init>= <expr><name>d</name> <operator>/</operator> <name>f2</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>double</name></type> <name>d2</name> <init>= <expr><call><name><name>paramShadingState</name><operator>.</operator><name>getRandom</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f3</name> <init>= <expr><name><name>this</name><operator>.</operator><name>alphaY</name></name> <operator>/</operator> <name><name>this</name><operator>.</operator><name>alphaX</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f4</name> <init>= <expr><literal type="number">0.0F</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>d1</name> <operator>&lt;</operator> <literal type="number">0.25D</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>double</name></type> <name>d3</name> <init>= <expr><literal type="number">4.0D</literal> <operator>*</operator> <name>d1</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>f4</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>atan</name></name><argument_list>(<argument><expr><name>f3</name> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>tan</name></name><argument_list>(<argument><expr><literal type="number">1.5707963267948966D</literal> <operator>*</operator> <name>d3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>d1</name> <operator>&lt;</operator> <literal type="number">0.5D</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>double</name></type> <name>d3</name> <init>= <expr><literal type="number">1.0D</literal> <operator>-</operator> <literal type="number">4.0D</literal> <operator>*</operator> <operator>(</operator><literal type="number">0.5D</literal> <operator>-</operator> <name>d1</name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>f4</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>atan</name></name><argument_list>(<argument><expr><name>f3</name> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>tan</name></name><argument_list>(<argument><expr><literal type="number">1.5707963267948966D</literal> <operator>*</operator> <name>d3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>f4</name> <operator>=</operator> <literal type="number">3.1415927F</literal> <operator>-</operator> <name>f4</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>d1</name> <operator>&lt;</operator> <literal type="number">0.75D</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>double</name></type> <name>d3</name> <init>= <expr><literal type="number">4.0D</literal> <operator>*</operator> <operator>(</operator><name>d1</name> <operator>-</operator> <literal type="number">0.5D</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>f4</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>atan</name></name><argument_list>(<argument><expr><name>f3</name> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>tan</name></name><argument_list>(<argument><expr><literal type="number">1.5707963267948966D</literal> <operator>*</operator> <name>d3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>f4</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>f4</name> <operator>+</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>double</name></type> <name>d3</name> <init>= <expr><literal type="number">1.0D</literal> <operator>-</operator> <literal type="number">4.0D</literal> <operator>*</operator> <operator>(</operator><literal type="number">1.0D</literal> <operator>-</operator> <name>d1</name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>f4</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>atan</name></name><argument_list>(<argument><expr><name>f3</name> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>tan</name></name><argument_list>(<argument><expr><literal type="number">1.5707963267948966D</literal> <operator>*</operator> <name>d3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>f4</name> <operator>=</operator> <literal type="number">6.2831855F</literal> <operator>-</operator> <name>f4</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt> 
      <decl_stmt><decl><type><name>float</name></type> <name>f5</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name>f4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f6</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><name>f4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f7</name> <init>= <expr><name>f5</name> <operator>*</operator> <name>f5</name> <operator>/</operator> <name><name>this</name><operator>.</operator><name>alphaX</name></name> <operator>*</operator> <name><name>this</name><operator>.</operator><name>alphaX</name></name> <operator>+</operator> <name>f6</name> <operator>*</operator> <name>f6</name> <operator>/</operator> <name><name>this</name><operator>.</operator><name>alphaY</name></name> <operator>*</operator> <name><name>this</name><operator>.</operator><name>alphaY</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f8</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>atan</name></name><argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>sqrt</name></name><argument_list>(<argument><expr><operator>-</operator><call><name><name>Math</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><literal type="number">1.0D</literal> <operator>-</operator> <name>d2</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>f7</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f9</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><name>f8</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f10</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name>f8</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Vector3</name></type> <name>vector32</name> <init>= <expr><operator>new</operator> <call><name>Vector3</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>vector32</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>f9</name> <operator>*</operator> <name>f5</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>vector32</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>f9</name> <operator>*</operator> <name>f6</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>vector32</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name>f10</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>orthoNormalBasis</name><operator>.</operator><name>transform</name></name><argument_list>(<argument><expr><name>vector32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>Vector3</name></type> <name>vector33</name> <init>= <expr><operator>new</operator> <call><name>Vector3</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f11</name> <init>= <expr><call><name><name>Vector3</name><operator>.</operator><name>dot</name></name><argument_list>(<argument><expr><name>vector32</name></expr></argument>, <argument><expr><name>vector31</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>vector33</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">2.0F</literal> <operator>*</operator> <name>f11</name> <operator>*</operator> <name><name>vector32</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>vector31</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>vector33</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">2.0F</literal> <operator>*</operator> <name>f11</name> <operator>*</operator> <name><name>vector32</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>vector31</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>vector33</name><operator>.</operator><name>z</name></name> <operator>=</operator> <literal type="number">2.0F</literal> <operator>*</operator> <name>f11</name> <operator>*</operator> <name><name>vector32</name><operator>.</operator><name>z</name></name> <operator>-</operator> <name><name>vector31</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>Ray</name></type> <name>ray</name> <init>= <expr><operator>new</operator> <call><name>Ray</name><argument_list>(<argument><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>vector33</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>paramShadingState</name><operator>.</operator><name>traceReflectionPhoton</name></name><argument_list>(<argument><expr><name>ray</name></expr></argument>, <argument><expr><name>paramColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt> 
  </block_content>}</block></function>
}</block></class>


<comment type="block">/* Location:              /Users/wang/Downloads/sunflow2 copy.jar!/org/sunflow/core/shader/AnisotropicWardShader.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.3
 */</comment></unit>
