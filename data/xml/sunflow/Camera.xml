<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/sunflow.jar.src/org/sunflow/core/Camera.java"><package>package <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>SunflowAPI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Matrix4</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>OrthoNormalBasis</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Point3</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Vector3</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>system</name><operator>.</operator><name>UI</name></name>;</import>

<class><specifier>public</specifier> class <name>Camera</name> <super_list><implements>implements <super><name>RenderObject</name></super></implements></super_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>CameraLens</name></type> <name>lens</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>Matrix4</name><index>[]</index></name></type> <name>c2w</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>Matrix4</name><index>[]</index></name></type> <name>w2c</name></decl>;</decl_stmt>
  
  <constructor><specifier>public</specifier> <name>Camera</name><parameter_list>(<parameter><decl><type><name>CameraLens</name></type> <name>paramCameraLens</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lens</name></name> <operator>=</operator> <name>paramCameraLens</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>c2w</name></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>w2c</name></name> <operator>=</operator> <operator>new</operator> <name><name>Matrix4</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></constructor>
  
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>ParameterList</name></type> <name>paramParameterList</name></decl></parameter>, <parameter><decl><type><name>SunflowAPI</name></type> <name>paramSunflowAPI</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name><name>paramParameterList</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"transform.steps"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>updateCameraMatrix</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>paramParameterList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>c2w</name></name> <operator>=</operator> <operator>new</operator> <name><name>Matrix4</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>byte</name></type> <name>b1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b1</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>b1</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>updateCameraMatrix</name><argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><name>paramParameterList</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printError</name></name><argument_list>(<argument><expr><name><name>UI</name><operator>.</operator><name>Module</name><operator>.</operator><name>CAM</name></name></expr></argument>, <argument><expr><literal type="string">"Camera matrix for step %d was not specified!"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{ <expr><call><name><name>Integer</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>b1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt> 
      </block_content>}</block></for> 
    </block_content>}</block></else></if_stmt> 
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>w2c</name></name> <operator>=</operator> <operator>new</operator> <name><name>Matrix4</name><index>[<expr><name><name>this</name><operator>.</operator><name>c2w</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>byte</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name><name>this</name><operator>.</operator><name>c2w</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>c2w</name><index>[<expr><name>b</name></expr>]</index></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>w2c</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>c2w</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>inverse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>w2c</name><index>[<expr><name>b</name></expr>]</index></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printError</name></name><argument_list>(<argument><expr><name><name>UI</name><operator>.</operator><name>Module</name><operator>.</operator><name>CAM</name></name></expr></argument>, <argument><expr><literal type="string">"Camera matrix is not invertible"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>Object</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt> 
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>w2c</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt> 
    </block_content>}</block></for> 
    <return>return <expr><call><name><name>this</name><operator>.</operator><name>lens</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>paramParameterList</name></expr></argument>, <argument><expr><name>paramSunflowAPI</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>private</specifier> <name>boolean</name></type> <name>updateCameraMatrix</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>paramInt</name></decl></parameter>, <parameter><decl><type><name>ParameterList</name></type> <name>paramParameterList</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>String</name></type> <name>str</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>paramInt</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"[%d]"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{ <expr><call><name><name>Integer</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>paramInt</name></expr></argument>)</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>paramInt</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>paramInt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
    <decl_stmt><decl><type><name>Matrix4</name></type> <name>matrix4</name> <init>= <expr><call><name><name>paramParameterList</name><operator>.</operator><name>getMatrix</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"transform%s"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{ <expr><name>str</name></expr> }</block></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>matrix4</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>Point3</name></type> <name>point31</name> <init>= <expr><call><name><name>paramParameterList</name><operator>.</operator><name>getPoint</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"eye%s"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{ <expr><name>str</name></expr> }</block></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Point3</name></type> <name>point32</name> <init>= <expr><call><name><name>paramParameterList</name><operator>.</operator><name>getPoint</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"target%s"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{ <expr><name>str</name></expr> }</block></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Vector3</name></type> <name>vector3</name> <init>= <expr><call><name><name>paramParameterList</name><operator>.</operator><name>getVector</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"up%s"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{ <expr><name>str</name></expr> }</block></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>point31</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>point32</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>vector3</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>c2w</name><index>[<expr><name>paramInt</name></expr>]</index></name> <operator>=</operator> <call><name><name>Matrix4</name><operator>.</operator><name>fromBasis</name></name><argument_list>(<argument><expr><call><name><name>OrthoNormalBasis</name><operator>.</operator><name>makeFromWV</name></name><argument_list>(<argument><expr><call><name><name>Point3</name><operator>.</operator><name>sub</name></name><argument_list>(<argument><expr><name>point31</name></expr></argument>, <argument><expr><name>point32</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Vector3</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vector3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>c2w</name><index>[<expr><name>paramInt</name></expr>]</index></name> <operator>=</operator> <call><name><name>Matrix4</name><operator>.</operator><name>translation</name></name><argument_list>(<argument><expr><name><name>point31</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>point31</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>point31</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>multiply</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>c2w</name><index>[<expr><name>paramInt</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><operator>(</operator><call><name><name>str</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
      </block_content>}</block></else></if_stmt> 
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>c2w</name><index>[<expr><name>paramInt</name></expr>]</index></name> <operator>=</operator> <name>matrix4</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt> 
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>Ray</name></type> <name>getRay</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>paramFloat1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>paramFloat2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>paramInt1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>paramInt2</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>paramDouble1</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>paramDouble2</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>paramDouble3</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Ray</name></type> <name>ray</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>lens</name><operator>.</operator><name>getRay</name></name><argument_list>(<argument><expr><name>paramFloat1</name></expr></argument>, <argument><expr><name>paramFloat2</name></expr></argument>, <argument><expr><name>paramInt1</name></expr></argument>, <argument><expr><name>paramInt2</name></expr></argument>, <argument><expr><name>paramDouble1</name></expr></argument>, <argument><expr><name>paramDouble2</name></expr></argument>, <argument><expr><name>paramDouble3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ray</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>c2w</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ray</name> <operator>=</operator> <call><name><name>ray</name><operator>.</operator><name>transform</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>c2w</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr><name>paramDouble3</name> <operator>*</operator> <operator>(</operator><name><name>this</name><operator>.</operator><name>c2w</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name>d</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>c2w</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>ray</name> <operator>=</operator> <call><name><name>ray</name><operator>.</operator><name>transform</name></name><argument_list>(<argument><expr><call><name><name>Matrix4</name><operator>.</operator><name>blend</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>c2w</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>c2w</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>d</name> <operator>-</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt> 
      <expr_stmt><expr><call><name><name>ray</name><operator>.</operator><name>normalize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt> 
    <return>return <expr><name>ray</name></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><name>Ray</name></type> <name>getRay</name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>paramPoint3</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>new</operator> <call><name>Ray</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name><name>this</name><operator>.</operator><name>c2w</name></name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>new</operator> <call><name>Point3</name><argument_list>(<argument><expr><literal type="number">0.0F</literal></expr></argument>, <argument><expr><literal type="number">0.0F</literal></expr></argument>, <argument><expr><literal type="number">0.0F</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>this</name><operator>.</operator><name>c2w</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>transformP</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Point3</name><argument_list>(<argument><expr><literal type="number">0.0F</literal></expr></argument>, <argument><expr><literal type="number">0.0F</literal></expr></argument>, <argument><expr><literal type="number">0.0F</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>, <argument><expr><name>paramPoint3</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><name>Matrix4</name></type> <name>getCameraToWorld</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>this</name><operator>.</operator><name>c2w</name></name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>Matrix4</name><operator>.</operator><name>IDENTITY</name></name></expr> </then><else>: <expr><name><name>this</name><operator>.</operator><name>c2w</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><name>Matrix4</name></type> <name>getWorldToCamera</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>this</name><operator>.</operator><name>w2c</name></name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>Matrix4</name><operator>.</operator><name>IDENTITY</name></name></expr> </then><else>: <expr><name><name>this</name><operator>.</operator><name>w2c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr>;</return>
  </block_content>}</block></function>
}</block></class>


<comment type="block">/* Location:              /Users/wang/Downloads/sunflow2 copy.jar!/org/sunflow/core/Camera.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.3
 */</comment></unit>
