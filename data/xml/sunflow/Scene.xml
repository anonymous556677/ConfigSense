<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/sunflow/src/org/sunflow/core/Scene.java"><package>package <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>display</name><operator>.</operator><name>FrameDisplay</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>image</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>BoundingBox</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>MathUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Point3</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Vector3</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>system</name><operator>.</operator><name>UI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>system</name><operator>.</operator><name>UI</name><operator>.</operator><name>Module</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Represents a entire scene, defined as a collection of objects viewed by a
 * camera.
 */</comment>
<class><specifier>public</specifier> class <name>Scene</name> <block>{
    <comment type="line">// scene storage</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>LightServer</name></type> <name>lightServer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>InstanceList</name></type> <name>instanceList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>InstanceList</name></type> <name>infiniteInstanceList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Camera</name></type> <name>camera</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>AccelerationStructure</name></type> <name>intAccel</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>acceltype</name></decl>;</decl_stmt>

    <comment type="line">// baking</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>bakingViewDependent</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Instance</name></type> <name>bakingInstance</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>PrimitiveList</name></type> <name>bakingPrimitives</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>AccelerationStructure</name></type> <name>bakingAccel</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>rebuildAccel</name></decl>;</decl_stmt>

    <comment type="line">// image size</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>imageWidth</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>imageHeight</name></decl>;</decl_stmt>

    <comment type="line">// global options</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>threads</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>lowPriority</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Creates an empty scene with default anti-aliasing parameters.
     */</comment>
    <constructor><specifier>public</specifier> <name>Scene</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>lightServer</name> <operator>=</operator> <operator>new</operator> <call><name>LightServer</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>instanceList</name> <operator>=</operator> <operator>new</operator> <call><name>InstanceList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>infiniteInstanceList</name> <operator>=</operator> <operator>new</operator> <call><name>InstanceList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>acceltype</name> <operator>=</operator> <literal type="string">"auto"</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>bakingViewDependent</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>bakingInstance</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>bakingPrimitives</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>bakingAccel</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>camera</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>imageWidth</name> <operator>=</operator> <literal type="number">640</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>imageHeight</name> <operator>=</operator> <literal type="number">480</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>threads</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>lowPriority</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>rebuildAccel</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Get number of allowed threads for multi-threaded operations.
     * 
     * @return number of threads that can be started
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getThreads</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>threads</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name><name>Runtime</name><operator>.</operator><name>getRuntime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>availableProcessors</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name>threads</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the priority level to assign to multi-threaded operations.
     * 
     * @return thread priority
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getThreadPriority</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>lowPriority</name></expr> ?</condition><then> <expr><name><name>Thread</name><operator>.</operator><name>MIN_PRIORITY</name></name></expr> </then><else>: <expr><name><name>Thread</name><operator>.</operator><name>NORM_PRIORITY</name></name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the current camera (no support for multiple cameras yet).
     * 
     * @param camera camera to be used as the viewpoint for the scene
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCamera</name><parameter_list>(<parameter><decl><type><name>Camera</name></type> <name>camera</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>camera</name></name> <operator>=</operator> <name>camera</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>Camera</name></type> <name>getCamera</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>camera</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Update the instance lists for this scene.
     * 
     * @param instances regular instances
     * @param infinite infinite instances (no bounds)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setInstanceLists</name><parameter_list>(<parameter><decl><type><name><name>Instance</name><index>[]</index></name></type> <name>instances</name></decl></parameter>, <parameter><decl><type><name><name>Instance</name><index>[]</index></name></type> <name>infinite</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>infiniteInstanceList</name> <operator>=</operator> <operator>new</operator> <call><name>InstanceList</name><argument_list>(<argument><expr><name>infinite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>instanceList</name> <operator>=</operator> <operator>new</operator> <call><name>InstanceList</name><argument_list>(<argument><expr><name>instances</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rebuildAccel</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Update the light list for this scene.
     * 
     * @param lights array of light source objects
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLightList</name><parameter_list>(<parameter><decl><type><name><name>LightSource</name><index>[]</index></name></type> <name>lights</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>lightServer</name><operator>.</operator><name>setLights</name></name><argument_list>(<argument><expr><name>lights</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Enables shader overiding (set null to disable). The specified shader will
     * be used to shade all surfaces
     * 
     * @param shader shader to run over all surfaces, or &lt;code&gt;null&lt;/code&gt; to
     *            disable overriding
     * @param photonOverride &lt;code&gt;true&lt;/code&gt; to override photon scattering
     *            with this shader or &lt;code&gt;false&lt;/code&gt; to run the regular
     *            shaders
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setShaderOverride</name><parameter_list>(<parameter><decl><type><name>Shader</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>photonOverride</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>lightServer</name><operator>.</operator><name>setShaderOverride</name></name><argument_list>(<argument><expr><name>shader</name></expr></argument>, <argument><expr><name>photonOverride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * The provided instance will be considered for lightmap baking. If the
     * specified instance is &lt;code&gt;null&lt;/code&gt;, lightmap baking will be
     * disabled and normal rendering will occur.
     * 
     * @param instance instance to bake
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBakingInstance</name><parameter_list>(<parameter><decl><type><name>Instance</name></type> <name>instance</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>bakingInstance</name> <operator>=</operator> <name>instance</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>ShadingState</name></type> <name>getRadiance</name><parameter_list>(<parameter><decl><type><name>IntersectionState</name></type> <name>istate</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>rx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>ry</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>lensU</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>lensV</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>instance</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>bakingPrimitives</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Ray</name></type> <name>r</name> <init>= <expr><call><name><name>camera</name><operator>.</operator><name>getRay</name></name><argument_list>(<argument><expr><name>rx</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>, <argument><expr><name>imageWidth</name></expr></argument>, <argument><expr><name>imageHeight</name></expr></argument>, <argument><expr><name>lensU</name></expr></argument>, <argument><expr><name>lensV</name></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><ternary><condition><expr><name>r</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>lightServer</name><operator>.</operator><name>getRadiance</name></name><argument_list>(<argument><expr><name>rx</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>, <argument><expr><name>instance</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>istate</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>Ray</name></type> <name>r</name> <init>= <expr><operator>new</operator> <call><name>Ray</name><argument_list>(<argument><expr><name>rx</name> <operator>/</operator> <name>imageWidth</name></expr></argument>, <argument><expr><name>ry</name> <operator>/</operator> <name>imageHeight</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>traceBake</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>istate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>istate</name><operator>.</operator><name>hit</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name>ShadingState</name></type> <name>state</name> <init>= <expr><call><name><name>ShadingState</name><operator>.</operator><name>createState</name></name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>rx</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>instance</name></expr></argument>, <argument><expr><name>lightServer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>bakingPrimitives</name><operator>.</operator><name>prepareShadingState</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>bakingViewDependent</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>setRay</name></name><argument_list>(<argument><expr><call><name><name>camera</name><operator>.</operator><name>getRay</name></name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else <block>{<block_content>
                <decl_stmt><decl><type><name>Point3</name></type> <name>p</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Vector3</name></type> <name>n</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <comment type="line">// create a ray coming from directly above the point being</comment>
                <comment type="line">// shaded</comment>
                <decl_stmt><decl><type><name>Ray</name></type> <name>incoming</name> <init>= <expr><operator>new</operator> <call><name>Ray</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>n</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>n</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>z</name></name> <operator>+</operator> <name><name>n</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><operator>-</operator><name><name>n</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><operator>-</operator><name><name>n</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><operator>-</operator><name><name>n</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>incoming</name><operator>.</operator><name>setMax</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>setRay</name></name><argument_list>(<argument><expr><name>incoming</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name><name>lightServer</name><operator>.</operator><name>shadeBakeResult</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>state</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>BoundingBox</name></type> <name>getBounds</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>instanceList</name><operator>.</operator><name>getWorldBounds</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>trace</name><parameter_list>(<parameter><decl><type><name>Ray</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>IntersectionState</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// reset object</comment>
        <expr_stmt><expr><name><name>state</name><operator>.</operator><name>instance</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>state</name><operator>.</operator><name>current</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>infiniteInstanceList</name><operator>.</operator><name>getNumPrimitives</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>infiniteInstanceList</name><operator>.</operator><name>intersectPrimitive</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <comment type="line">// reset for next accel structure</comment>
        <expr_stmt><expr><name><name>state</name><operator>.</operator><name>current</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>intAccel</name><operator>.</operator><name>intersect</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>Color</name></type> <name>traceShadow</name><parameter_list>(<parameter><decl><type><name>Ray</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>IntersectionState</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>trace</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><ternary><condition><expr><call><name><name>state</name><operator>.</operator><name>hit</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>Color</name><operator>.</operator><name>WHITE</name></name></expr> </then><else>: <expr><name><name>Color</name><operator>.</operator><name>BLACK</name></name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>traceBake</name><parameter_list>(<parameter><decl><type><name>Ray</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>IntersectionState</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// set the instance as if tracing a regular instanced object</comment>
        <expr_stmt><expr><name><name>state</name><operator>.</operator><name>current</name></name> <operator>=</operator> <name>bakingInstance</name></expr>;</expr_stmt>
        <comment type="line">// reset object</comment>
        <expr_stmt><expr><name><name>state</name><operator>.</operator><name>instance</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bakingAccel</name><operator>.</operator><name>intersect</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>render</name><parameter_list>(<parameter><decl><type><name>Options</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>ImageSampler</name></type> <name>sampler</name></decl></parameter>, <parameter><decl><type><name>Display</name></type> <name>display</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>display</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>display</name> <operator>=</operator> <operator>new</operator> <call><name>FrameDisplay</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>bakingInstance</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printDetailed</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>SCENE</name></name></expr></argument>, <argument><expr><literal type="string">"Creating primitives for lightmapping ..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>bakingPrimitives</name> <operator>=</operator> <call><name><name>bakingInstance</name><operator>.</operator><name>getBakingPrimitives</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>bakingPrimitives</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printError</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>SCENE</name></name></expr></argument>, <argument><expr><literal type="string">"Lightmap baking is not supported for the given instance."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name><name>bakingPrimitives</name><operator>.</operator><name>getNumPrimitives</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>SCENE</name></name></expr></argument>, <argument><expr><literal type="string">"Building acceleration structure for lightmapping (%d num primitives) ..."</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>bakingAccel</name> <operator>=</operator> <call><name><name>AccelerationStructureFactory</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><literal type="string">"auto"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bakingAccel</name><operator>.</operator><name>build</name></name><argument_list>(<argument><expr><name>bakingPrimitives</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>bakingPrimitives</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>bakingAccel</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name>bakingViewDependent</name> <operator>=</operator> <call><name><name>options</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"baking.viewdep"</literal></expr></argument>, <argument><expr><name>bakingViewDependent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>bakingInstance</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>bakingViewDependent</name> <operator>&amp;&amp;</operator> <name>camera</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>bakingInstance</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>camera</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printError</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>SCENE</name></name></expr></argument>, <argument><expr><literal type="string">"No camera found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// read from options</comment>
        <expr_stmt><expr><name>threads</name> <operator>=</operator> <call><name><name>options</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"threads"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>lowPriority</name> <operator>=</operator> <call><name><name>options</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"threads.lowPriority"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>imageWidth</name> <operator>=</operator> <call><name><name>options</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"resolutionX"</literal></expr></argument>, <argument><expr><literal type="number">640</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>imageHeight</name> <operator>=</operator> <call><name><name>options</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"resolutionY"</literal></expr></argument>, <argument><expr><literal type="number">480</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// limit resolution to 16k</comment>
        <expr_stmt><expr><name>imageWidth</name> <operator>=</operator> <call><name><name>MathUtils</name><operator>.</operator><name>clamp</name></name><argument_list>(<argument><expr><name>imageWidth</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>imageHeight</name> <operator>=</operator> <call><name><name>MathUtils</name><operator>.</operator><name>clamp</name></name><argument_list>(<argument><expr><name>imageHeight</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// get acceleration structure info</comment>
        <comment type="line">// count scene primitives</comment>
        <decl_stmt><decl><type><name>long</name></type> <name>numPrimitives</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>instanceList</name><operator>.</operator><name>getNumPrimitives</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name>numPrimitives</name> <operator>+=</operator> <call><name><name>instanceList</name><operator>.</operator><name>getNumPrimitives</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>SCENE</name></name></expr></argument>, <argument><expr><literal type="string">"Scene stats:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>SCENE</name></name></expr></argument>, <argument><expr><literal type="string">"  * Infinite instances:  %d"</literal></expr></argument>, <argument><expr><call><name><name>infiniteInstanceList</name><operator>.</operator><name>getNumPrimitives</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>SCENE</name></name></expr></argument>, <argument><expr><literal type="string">"  * Instances:           %d"</literal></expr></argument>, <argument><expr><call><name><name>instanceList</name><operator>.</operator><name>getNumPrimitives</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>SCENE</name></name></expr></argument>, <argument><expr><literal type="string">"  * Primitives:          %d"</literal></expr></argument>, <argument><expr><name>numPrimitives</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>accelName</name> <init>= <expr><call><name><name>options</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"accel"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>accelName</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>rebuildAccel</name> <operator>=</operator> <name>rebuildAccel</name> <operator>||</operator> <operator>!</operator><call><name><name>acceltype</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>accelName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>acceltype</name> <operator>=</operator> <name>accelName</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>SCENE</name></name></expr></argument>, <argument><expr><literal type="string">"  * Instance accel:      %s"</literal></expr></argument>, <argument><expr><name>acceltype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>rebuildAccel</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>intAccel</name> <operator>=</operator> <call><name><name>AccelerationStructureFactory</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>acceltype</name></expr></argument>, <argument><expr><call><name><name>instanceList</name><operator>.</operator><name>getNumPrimitives</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>intAccel</name><operator>.</operator><name>build</name></name><argument_list>(<argument><expr><name>instanceList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>rebuildAccel</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>SCENE</name></name></expr></argument>, <argument><expr><literal type="string">"  * Scene bounds:        %s"</literal></expr></argument>, <argument><expr><call><name>getBounds</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>SCENE</name></name></expr></argument>, <argument><expr><literal type="string">"  * Scene center:        %s"</literal></expr></argument>, <argument><expr><call><name>getBounds</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCenter</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>SCENE</name></name></expr></argument>, <argument><expr><literal type="string">"  * Scene diameter:      %.2f"</literal></expr></argument>, <argument><expr><call><name>getBounds</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getExtents</name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>SCENE</name></name></expr></argument>, <argument><expr><literal type="string">"  * Lightmap bake:       %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>bakingInstance</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name>bakingViewDependent</name></expr> ?</condition><then> <expr><literal type="string">"view"</literal></expr> </then><else>: <expr><literal type="string">"ortho"</literal></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><literal type="string">"off"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>sampler</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>lightServer</name><operator>.</operator><name>build</name></name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
        <comment type="line">// render</comment>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>SCENE</name></name></expr></argument>, <argument><expr><literal type="string">"Rendering ..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sampler</name><operator>.</operator><name>prepare</name></name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>imageWidth</name></expr></argument>, <argument><expr><name>imageHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sampler</name><operator>.</operator><name>render</name></name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>lightServer</name><operator>.</operator><name>showStats</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// discard baking tesselation/accel structure</comment>
        <expr_stmt><expr><name>bakingPrimitives</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>bakingAccel</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>SCENE</name></name></expr></argument>, <argument><expr><literal type="string">"Done."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>calculatePhotons</name><parameter_list>(<parameter><decl><type><name>PhotonStore</name></type> <name>map</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>seed</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>lightServer</name><operator>.</operator><name>calculatePhotons</name></name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class></unit>
