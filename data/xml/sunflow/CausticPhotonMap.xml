<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/sunflow.jar.src/org/sunflow/core/photonmap/CausticPhotonMap.java"><package>package <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>photonmap</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>CausticPhotonMapInterface</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>LightSample</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>Options</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>Ray</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>ShadingState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>image</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>BoundingBox</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Point3</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Vector3</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>system</name><operator>.</operator><name>Timer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>system</name><operator>.</operator><name>UI</name></name>;</import>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>CausticPhotonMap</name> <super_list><implements>implements <super><name>CausticPhotonMapInterface</name></super></implements></super_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Photon</name></argument>&gt;</argument_list></name></type> <name>photonList</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>Photon</name><index>[]</index></name></type> <name>photons</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>storedPhotons</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>halfStoredPhotons</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>log2n</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>gatherNum</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>gatherRadius</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>BoundingBox</name></type> <name>bounds</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>filterValue</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>maxPower</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>maxRadius</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>numEmit</name></decl>;</decl_stmt>
  
  <constructor><specifier>public</specifier> <name>CausticPhotonMap</name><parameter_list>(<parameter><decl><type><name>Options</name></type> <name>paramOptions</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>numEmit</name></name> <operator>=</operator> <call><name><name>paramOptions</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"caustics.emit"</literal></expr></argument>, <argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>gatherNum</name></name> <operator>=</operator> <call><name><name>paramOptions</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"caustics.gather"</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>gatherRadius</name></name> <operator>=</operator> <call><name><name>paramOptions</name><operator>.</operator><name>getFloat</name></name><argument_list>(<argument><expr><literal type="string">"caustics.radius"</literal></expr></argument>, <argument><expr><literal type="number">0.5F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>filterValue</name></name> <operator>=</operator> <call><name><name>paramOptions</name><operator>.</operator><name>getFloat</name></name><argument_list>(<argument><expr><literal type="string">"caustics.filter"</literal></expr></argument>, <argument><expr><literal type="number">1.1F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bounds</name></name> <operator>=</operator> <operator>new</operator> <call><name>BoundingBox</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>maxPower</name></name> <operator>=</operator> <literal type="number">0.0F</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>maxRadius</name></name> <operator>=</operator> <literal type="number">0.0F</literal></expr>;</expr_stmt>
  </block_content>}</block></constructor>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>prepare</name><parameter_list>(<parameter><decl><type><name>BoundingBox</name></type> <name>paramBoundingBox</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>photonList</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Photon</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>photonList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>photons</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>storedPhotons</name></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>halfStoredPhotons</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>private</specifier> <name>void</name></type> <name>locatePhotons</name><parameter_list>(<parameter><decl><type><name>NearestPhotons</name></type> <name>paramNearestPhotons</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>arrayOfFloat</name> <init>= <expr><operator>new</operator> <name><name>float</name><index>[<expr><name><name>this</name><operator>.</operator><name>log2n</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>arrayOfInt</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name><name>this</name><operator>.</operator><name>log2n</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>byte</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
      <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>this</name><operator>.</operator><name>halfStoredPhotons</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>float</name></type> <name>f</name> <init>= <expr><name><name>this</name><operator>.</operator><name>photons</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getDist1</name><argument_list>(<argument><expr><name><name>paramNearestPhotons</name><operator>.</operator><name>px</name></name></expr></argument>, <argument><expr><name><name>paramNearestPhotons</name><operator>.</operator><name>py</name></name></expr></argument>, <argument><expr><name><name>paramNearestPhotons</name><operator>.</operator><name>pz</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>arrayOfFloat</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name>f</name> <operator>*</operator> <name>f</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>f</name> <operator>&gt;</operator> <literal type="number">0.0F</literal></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 
        <expr_stmt><expr><name><name>arrayOfInt</name><index>[<expr><name>b</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
      </block_content>}</block></while> 
      <expr_stmt><expr><call><name><name>paramNearestPhotons</name><operator>.</operator><name>checkAddNearest</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>photons</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>i</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
          <return>return;</return></block_content></block></if></if_stmt> 
        <if_stmt><if>if <condition>(<expr><name><name>arrayOfFloat</name><index>[<expr><name>b</name></expr>]</index></name> <operator>&lt;</operator> <name><name>paramNearestPhotons</name><operator>.</operator><name>dist2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name>j</name> <operator>==</operator> <name><name>arrayOfInt</name><index>[<expr><name>b</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>paramNearestPhotons</name><operator>.</operator><name>checkAddNearest</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>photons</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>arrayOfInt</name><index>[<expr><name>b</name><operator>++</operator></expr>]</index></name> <operator>^</operator> <literal type="number">0x1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt> 
      </block_content>}</block></while> 
      <break>break;</break>
    </block_content>}</block></while> 
  </block_content>}</block></function>
  
  <function><type><specifier>private</specifier> <name>void</name></type> <name>balance</name><parameter_list>()</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>storedPhotons</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return;</return></block_content></block></if></if_stmt> 
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>photons</name></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>photonList</name><operator>.</operator></name>&lt;<name>Photon</name><operator>&gt;</operator><call><name>toArray</name><argument_list>(<argument><expr><operator>new</operator> <name><name>Photon</name><index>[<expr><call><name><name>this</name><operator>.</operator><name>photonList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>photonList</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>Photon</name><index>[]</index></name></type> <name>arrayOfPhoton</name> <init>= <expr><operator>new</operator> <name><name>Photon</name><index>[<expr><name><name>this</name><operator>.</operator><name>storedPhotons</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>balanceSegment</name><argument_list>(<argument><expr><name>arrayOfPhoton</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>storedPhotons</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>photons</name></name> <operator>=</operator> <name>arrayOfPhoton</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>halfStoredPhotons</name></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>storedPhotons</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>log2n</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>ceil</name></name><argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>storedPhotons</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name><name>Math</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><literal type="number">2.0D</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>private</specifier> <name>void</name></type> <name>balanceSegment</name><parameter_list>(<parameter><decl><type><name><name>Photon</name><index>[]</index></name></type> <name>paramArrayOfPhoton</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>paramInt1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>paramInt2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>paramInt3</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><literal type="number">4</literal> <operator>*</operator> <name>i</name> <operator>&lt;=</operator> <name>paramInt3</name> <operator>-</operator> <name>paramInt2</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>i</name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
    <if_stmt><if>if <condition>(<expr><literal type="number">3</literal> <operator>*</operator> <name>i</name> <operator>&lt;=</operator> <name>paramInt3</name> <operator>-</operator> <name>paramInt2</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>i</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>i</name> <operator>+=</operator> <name>paramInt2</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>i</name> <operator>=</operator> <name>paramInt3</name> <operator>-</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt> 
    <decl_stmt><decl><type><name>byte</name></type> <name>b</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Vector3</name></type> <name>vector3</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>bounds</name><operator>.</operator><name>getExtents</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>vector3</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <name><name>vector3</name><operator>.</operator><name>y</name></name> <operator>&amp;&amp;</operator> <name><name>vector3</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <name><name>vector3</name><operator>.</operator><name>z</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>vector3</name><operator>.</operator><name>y</name></name> <operator>&gt;</operator> <name><name>vector3</name><operator>.</operator><name>z</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt> 
    <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>paramInt2</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name>paramInt3</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>k</name> <operator>&gt;</operator> <name>j</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr><name><name>this</name><operator>.</operator><name>photons</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><call><name>getCoord</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name>k</name></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>photons</name><index>[<expr><operator>++</operator><name>m</name></expr>]</index></name><operator>.</operator><call><name>getCoord</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>d</name></expr>)</condition><block type="pseudo"><block_content>
          <continue>continue;</continue></block_content></block></if></if_stmt> 
        <while>while <condition>(<expr><name><name>this</name><operator>.</operator><name>photons</name><index>[<expr><operator>--</operator><name>n</name></expr>]</index></name><operator>.</operator><call><name>getCoord</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>d</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>&gt;</operator> <name>j</name></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
        <if_stmt><if>if <condition>(<expr><name>m</name> <operator>&gt;=</operator> <name>n</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>m</name> <operator>&gt;=</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>k</name> <operator>=</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
          <break>break;</break>
        </block_content>}</block></if></if_stmt> 
        <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while> 
      <if_stmt><if>if <condition>(<expr><name>m</name> <operator>&lt;=</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>j</name> <operator>=</operator> <name>m</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
    </block_content>}</block></while> 
    <expr_stmt><expr><name><name>paramArrayOfPhoton</name><index>[<expr><name>paramInt1</name></expr>]</index></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>photons</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>paramArrayOfPhoton</name><index>[<expr><name>paramInt1</name></expr>]</index></name><operator>.</operator><call><name>setSplitAxis</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>paramInt2</name></expr>)</condition><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><name>paramInt2</name> <operator>&lt;</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>float</name></type> <name>f</name></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>b</name></expr>)</condition> <block>{<block_content>
          <case>case <expr><literal type="number">0</literal></expr>:</case>
            <expr_stmt><expr><name>f</name> <operator>=</operator> <operator>(</operator><call><name><name>this</name><operator>.</operator><name>bounds</name><operator>.</operator><name>getMaximum</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>x</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><call><name><name>this</name><operator>.</operator><name>bounds</name><operator>.</operator><name>getMaximum</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>x</name> <operator>=</operator> <operator>(</operator><name><name>paramArrayOfPhoton</name><index>[<expr><name>paramInt1</name></expr>]</index></name><operator>)</operator><operator>.</operator><name>x</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>balanceSegment</name><argument_list>(<argument><expr><name>paramArrayOfPhoton</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>paramInt1</name></expr></argument>, <argument><expr><name>paramInt2</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><call><name><name>this</name><operator>.</operator><name>bounds</name><operator>.</operator><name>getMaximum</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>x</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
            <break>break;</break>
          <case>case <expr><literal type="number">1</literal></expr>:</case>
            <expr_stmt><expr><name>f</name> <operator>=</operator> <operator>(</operator><call><name><name>this</name><operator>.</operator><name>bounds</name><operator>.</operator><name>getMaximum</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>y</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><call><name><name>this</name><operator>.</operator><name>bounds</name><operator>.</operator><name>getMaximum</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>y</name> <operator>=</operator> <operator>(</operator><name><name>paramArrayOfPhoton</name><index>[<expr><name>paramInt1</name></expr>]</index></name><operator>)</operator><operator>.</operator><name>y</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>balanceSegment</name><argument_list>(<argument><expr><name>paramArrayOfPhoton</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>paramInt1</name></expr></argument>, <argument><expr><name>paramInt2</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><call><name><name>this</name><operator>.</operator><name>bounds</name><operator>.</operator><name>getMaximum</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>y</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
            <break>break;</break>
          <default>default:</default>
            <expr_stmt><expr><name>f</name> <operator>=</operator> <operator>(</operator><call><name><name>this</name><operator>.</operator><name>bounds</name><operator>.</operator><name>getMaximum</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>z</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><call><name><name>this</name><operator>.</operator><name>bounds</name><operator>.</operator><name>getMaximum</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>z</name> <operator>=</operator> <operator>(</operator><name><name>paramArrayOfPhoton</name><index>[<expr><name>paramInt1</name></expr>]</index></name><operator>)</operator><operator>.</operator><name>z</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>balanceSegment</name><argument_list>(<argument><expr><name>paramArrayOfPhoton</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>paramInt1</name></expr></argument>, <argument><expr><name>paramInt2</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><call><name><name>this</name><operator>.</operator><name>bounds</name><operator>.</operator><name>getMaximum</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>z</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></switch> 
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>paramArrayOfPhoton</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>paramInt1</name></expr>]</index></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>photons</name><index>[<expr><name>paramInt2</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt></block_content></block></if></if_stmt>  
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>paramInt3</name></expr>)</condition><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>paramInt3</name></expr>)</condition> <block>{<block_content>
        <switch>switch <condition>(<expr><name>b</name></expr>)</condition> <block>{<block_content>
          <case>case <expr><literal type="number">0</literal></expr>:</case>
            <expr_stmt><expr><name>f</name> <operator>=</operator> <operator>(</operator><call><name><name>this</name><operator>.</operator><name>bounds</name><operator>.</operator><name>getMinimum</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>x</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><call><name><name>this</name><operator>.</operator><name>bounds</name><operator>.</operator><name>getMinimum</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>x</name> <operator>=</operator> <operator>(</operator><name><name>paramArrayOfPhoton</name><index>[<expr><name>paramInt1</name></expr>]</index></name><operator>)</operator><operator>.</operator><name>x</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>balanceSegment</name><argument_list>(<argument><expr><name>paramArrayOfPhoton</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>paramInt1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>paramInt3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><call><name><name>this</name><operator>.</operator><name>bounds</name><operator>.</operator><name>getMinimum</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>x</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
            <return>return;</return>
          <case>case <expr><literal type="number">1</literal></expr>:</case>
            <expr_stmt><expr><name>f</name> <operator>=</operator> <operator>(</operator><call><name><name>this</name><operator>.</operator><name>bounds</name><operator>.</operator><name>getMinimum</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>y</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><call><name><name>this</name><operator>.</operator><name>bounds</name><operator>.</operator><name>getMinimum</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>y</name> <operator>=</operator> <operator>(</operator><name><name>paramArrayOfPhoton</name><index>[<expr><name>paramInt1</name></expr>]</index></name><operator>)</operator><operator>.</operator><name>y</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>balanceSegment</name><argument_list>(<argument><expr><name>paramArrayOfPhoton</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>paramInt1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>paramInt3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><call><name><name>this</name><operator>.</operator><name>bounds</name><operator>.</operator><name>getMinimum</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>y</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></switch> 
        <decl_stmt><decl><type><name>float</name></type> <name>f</name> <init>= <expr><operator>(</operator><call><name><name>this</name><operator>.</operator><name>bounds</name><operator>.</operator><name>getMinimum</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>z</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><operator>(</operator><call><name><name>this</name><operator>.</operator><name>bounds</name><operator>.</operator><name>getMinimum</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>z</name> <operator>=</operator> <operator>(</operator><name><name>paramArrayOfPhoton</name><index>[<expr><name>paramInt1</name></expr>]</index></name><operator>)</operator><operator>.</operator><name>z</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>balanceSegment</name><argument_list>(<argument><expr><name>paramArrayOfPhoton</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>paramInt1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>paramInt3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><call><name><name>this</name><operator>.</operator><name>bounds</name><operator>.</operator><name>getMinimum</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>z</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>paramArrayOfPhoton</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>paramInt1</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>photons</name><index>[<expr><name>paramInt3</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt></block_content></block></if></if_stmt>  
  </block_content>}</block></function>
  
  <function><type><specifier>private</specifier> <name>void</name></type> <name>swap</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>paramInt1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>paramInt2</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Photon</name></type> <name>photon</name> <init>= <expr><name><name>this</name><operator>.</operator><name>photons</name><index>[<expr><name>paramInt1</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>photons</name><index>[<expr><name>paramInt1</name></expr>]</index></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>photons</name><index>[<expr><name>paramInt2</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>photons</name><index>[<expr><name>paramInt2</name></expr>]</index></name> <operator>=</operator> <name>photon</name></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>store</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>paramShadingState</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>paramVector3</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>paramColor1</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>paramColor2</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>paramShadingState</name><operator>.</operator><name>getDiffuseDepth</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>paramShadingState</name><operator>.</operator><name>getReflectionDepth</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name><name>paramShadingState</name><operator>.</operator><name>getRefractionDepth</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>Photon</name></type> <name>photon</name> <init>= <expr><operator>new</operator> <call><name>Photon</name><argument_list>(<argument><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>paramVector3</name></expr></argument>, <argument><expr><name>paramColor1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <synchronized>synchronized <init>(<expr><name>this</name></expr>)</init> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>storedPhotons</name></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>photonList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>photon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>bounds</name><operator>.</operator><name>include</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Point3</name><argument_list>(<argument><expr><name><name>photon</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>photon</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>photon</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>maxPower</name></name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>maxPower</name></name></expr></argument>, <argument><expr><call><name><name>paramColor1</name><operator>.</operator><name>getMax</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></synchronized> 
    </block_content>}</block></if></if_stmt> 
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>UI</name><operator>.</operator><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"Balancing caustics photon map ..."</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>Object</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Timer</name></type> <name>timer</name> <init>= <expr><operator>new</operator> <call><name>Timer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>timer</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>balance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>timer</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>UI</name><operator>.</operator><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"Caustic photon map:"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>Object</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>UI</name><operator>.</operator><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Photons stored:   %d"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{ <expr><call><name><name>Integer</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>storedPhotons</name></name></expr></argument>)</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>UI</name><operator>.</operator><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Photons/estimate: %d"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{ <expr><call><name><name>Integer</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>gatherNum</name></name></expr></argument>)</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>maxRadius</name></name> <operator>=</operator> <literal type="number">1.4F</literal> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>sqrt</name></name><argument_list>(<argument><expr><operator>(</operator><name><name>this</name><operator>.</operator><name>maxPower</name></name> <operator>*</operator> <name><name>this</name><operator>.</operator><name>gatherNum</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>UI</name><operator>.</operator><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Estimate radius:  %.3f"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{ <expr><call><name><name>Float</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>gatherRadius</name></name></expr></argument>)</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>UI</name><operator>.</operator><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Maximum radius:   %.3f"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{ <expr><call><name><name>Float</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>maxRadius</name></name></expr></argument>)</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>UI</name><operator>.</operator><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Balancing time:   %s"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{ <expr><call><name><name>timer</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>gatherRadius</name></name> <operator>&gt;</operator> <name><name>this</name><operator>.</operator><name>maxRadius</name></name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>gatherRadius</name></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>maxRadius</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>void</name></type> <name>getSamples</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>paramShadingState</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>storedPhotons</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return;</return></block_content></block></if></if_stmt> 
    <decl_stmt><decl><type><name>NearestPhotons</name></type> <name>nearestPhotons</name> <init>= <expr><operator>new</operator> <call><name>NearestPhotons</name><argument_list>(<argument><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>gatherNum</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>gatherRadius</name></name> <operator>*</operator> <name><name>this</name><operator>.</operator><name>gatherRadius</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>locatePhotons</name><argument_list>(<argument><expr><name>nearestPhotons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>nearestPhotons</name><operator>.</operator><name>found</name></name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return;</return></block_content></block></if></if_stmt> 
    <decl_stmt><decl><type><name>Point3</name></type> <name>point3</name> <init>= <expr><operator>new</operator> <call><name>Point3</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Vector3</name></type> <name>vector31</name> <init>= <expr><operator>new</operator> <call><name>Vector3</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Vector3</name></type> <name>vector32</name> <init>= <expr><operator>new</operator> <call><name>Vector3</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f1</name> <init>= <expr><literal type="number">1.0F</literal> <operator>/</operator> <literal type="number">3.1415927F</literal> <operator>*</operator> <name><name>nearestPhotons</name><operator>.</operator><name>dist2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f2</name> <init>= <expr><name><name>nearestPhotons</name><operator>.</operator><name>dist2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <literal type="number">0.05F</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f3</name> <init>= <expr><literal type="number">1.0F</literal> <operator>/</operator> <name><name>this</name><operator>.</operator><name>filterValue</name></name> <operator>*</operator> <name><name>this</name><operator>.</operator><name>filterValue</name></name> <operator>*</operator> <name><name>nearestPhotons</name><operator>.</operator><name>dist2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f4</name> <init>= <expr><literal type="number">1.0F</literal> <operator>/</operator> <operator>(</operator><literal type="number">1.0F</literal> <operator>-</operator> <literal type="number">2.0F</literal> <operator>/</operator> <literal type="number">3.0F</literal> <operator>*</operator> <name><name>this</name><operator>.</operator><name>filterValue</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>byte</name></type> <name>b</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>b</name> <operator>&lt;=</operator> <name><name>nearestPhotons</name><operator>.</operator><name>found</name></name></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>Photon</name></type> <name>photon</name> <init>= <expr><name><name>nearestPhotons</name><operator>.</operator><name>index</name><index>[<expr><name>b</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>Vector3</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><name><name>photon</name><operator>.</operator><name>dir</name></name></expr></argument>, <argument><expr><name>vector31</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f</name> <init>= <expr><operator>-</operator><call><name><name>Vector3</name><operator>.</operator><name>dot</name></name><argument_list>(<argument><expr><name>vector31</name></expr></argument>, <argument><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>f</name> <operator>&gt;</operator> <literal type="number">0.001D</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>point3</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>photon</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>photon</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>photon</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Point3</name><operator>.</operator><name>sub</name></name><argument_list>(<argument><expr><name>point3</name></expr></argument>, <argument><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>vector32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>f5</name> <init>= <expr><call><name><name>Vector3</name><operator>.</operator><name>dot</name></name><argument_list>(<argument><expr><name>vector32</name></expr></argument>, <argument><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>f5</name> <argument_list type="generic">&lt; <argument><name>f2</name> <operator>&amp;&amp;</operator> <name>f5</name></argument> &gt;</argument_list></name> <operator>-</operator><name>f2</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>LightSample</name></type> <name>lightSample</name> <init>= <expr><operator>new</operator> <call><name>LightSample</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>lightSample</name><operator>.</operator><name>setShadowRay</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Ray</name><argument_list>(<argument><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vector31</name><operator>.</operator><name>negate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>lightSample</name><operator>.</operator><name>setRadiance</name></name><argument_list>(<argument><expr><operator>(</operator><operator>new</operator> <call><name>Color</name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>setRGBE</name><argument_list>(<argument><expr><operator>(</operator><name><name>nearestPhotons</name><operator>.</operator><name>index</name><index>[<expr><name>b</name></expr>]</index></name><operator>)</operator><operator>.</operator><name>power</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>mul</name><argument_list>(<argument><expr><name>f1</name> <operator>/</operator> <name>f</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Color</name><operator>.</operator><name>BLACK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>lightSample</name><operator>.</operator><name>getDiffuseRadiance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>mul</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1.0F</literal> <operator>-</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>sqrt</name></name><argument_list>(<argument><expr><operator>(</operator><name><name>nearestPhotons</name><operator>.</operator><name>dist2</name><index>[<expr><name>b</name></expr>]</index></name> <operator>*</operator> <name>f3</name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <name>f4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>paramShadingState</name><operator>.</operator><name>addSample</name></name><argument_list>(<argument><expr><name>lightSample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt> 
      </block_content>}</block></if></if_stmt> 
    </block_content>}</block></for> 
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>allowDiffuseBounced</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>allowReflectionBounced</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>allowRefractionBounced</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>int</name></type> <name>numEmit</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>this</name><operator>.</operator><name>numEmit</name></name></expr>;</return>
  </block_content>}</block></function>
  
  <class><specifier>private</specifier> <specifier>static</specifier> class <name>Photon</name> <block>{
    <decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>float</name></type> <name>y</name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>float</name></type> <name>z</name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>short</name></type> <name>dir</name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>int</name></type> <name>power</name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SPLIT_X</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SPLIT_Y</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SPLIT_Z</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SPLIT_MASK</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
    
    <constructor><name>Photon</name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>param1Point3</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>param1Vector3</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>param1Color</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>param1Point3</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>param1Point3</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>param1Point3</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dir</name></name> <operator>=</operator> <call><name><name>param1Vector3</name><operator>.</operator><name>encode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>power</name></name> <operator>=</operator> <call><name><name>param1Color</name><operator>.</operator><name>toRGBE</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></constructor>
    
    <function><type><name>void</name></type> <name>setSplitAxis</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>param1Int</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>flags</name></name> <operator>&amp;=</operator> <literal type="number">0xFFFFFFFC</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>param1Int</name></expr>;</expr_stmt>
    </block_content>}</block></function>
    
    <function><type><name>float</name></type> <name>getCoord</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>param1Int</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <switch>switch <condition>(<expr><name>param1Int</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">0</literal></expr>:</case>
          <return>return <expr><name><name>this</name><operator>.</operator><name>x</name></name></expr>;</return>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
          <return>return <expr><name><name>this</name><operator>.</operator><name>y</name></name></expr>;</return>
      </block_content>}</block></switch> 
      <return>return <expr><name><name>this</name><operator>.</operator><name>z</name></name></expr>;</return>
    </block_content>}</block></function>
    
    <function><type><name>float</name></type> <name>getDist1</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>param1Float1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>param1Float2</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>param1Float3</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <switch>switch <condition>(<expr><name><name>this</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">0</literal></expr>:</case>
          <return>return <expr><name>param1Float1</name> <operator>-</operator> <name><name>this</name><operator>.</operator><name>x</name></name></expr>;</return>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
          <return>return <expr><name>param1Float2</name> <operator>-</operator> <name><name>this</name><operator>.</operator><name>y</name></name></expr>;</return>
      </block_content>}</block></switch> 
      <return>return <expr><name>param1Float3</name> <operator>-</operator> <name><name>this</name><operator>.</operator><name>z</name></name></expr>;</return>
    </block_content>}</block></function>
    
    <function><type><name>float</name></type> <name>getDist2</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>param1Float1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>param1Float2</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>param1Float3</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>float</name></type> <name>f1</name> <init>= <expr><name><name>this</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name>param1Float1</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f2</name> <init>= <expr><name><name>this</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name>param1Float2</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f3</name> <init>= <expr><name><name>this</name><operator>.</operator><name>z</name></name> <operator>-</operator> <name>param1Float3</name></expr></init></decl>;</decl_stmt>
      <return>return <expr><name>f1</name> <operator>*</operator> <name>f1</name> <operator>+</operator> <name>f2</name> <operator>*</operator> <name>f2</name> <operator>+</operator> <name>f3</name> <operator>*</operator> <name>f3</name></expr>;</return>
    </block_content>}</block></function>
  }</block></class>
  
  <class><specifier>private</specifier> <specifier>static</specifier> class <name>NearestPhotons</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>found</name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>float</name></type> <name>px</name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>float</name></type> <name>py</name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>float</name></type> <name>pz</name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>max</name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>gotHeap</name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>float</name><index>[]</index></name></type> <name>dist2</name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>CausticPhotonMap</name><operator>.</operator><name>Photon</name><index>[]</index></name></type> <name>index</name></decl>;</decl_stmt>
    
    <constructor><name>NearestPhotons</name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>param1Point3</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>param1Int</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>param1Float</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>max</name></name> <operator>=</operator> <name>param1Int</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>found</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>gotHeap</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>px</name></name> <operator>=</operator> <name><name>param1Point3</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>py</name></name> <operator>=</operator> <name><name>param1Point3</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>pz</name></name> <operator>=</operator> <name><name>param1Point3</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dist2</name></name> <operator>=</operator> <operator>new</operator> <name><name>float</name><index>[<expr><name>param1Int</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>index</name></name> <operator>=</operator> <operator>new</operator> <name><name>CausticPhotonMap</name><operator>.</operator><name>Photon</name><index>[<expr><name>param1Int</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dist2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>param1Float</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>
    
    <function><type><name>void</name></type> <name>reset</name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>param1Point3</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>param1Float</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>found</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>gotHeap</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>px</name></name> <operator>=</operator> <name><name>param1Point3</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>py</name></name> <operator>=</operator> <name><name>param1Point3</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>pz</name></name> <operator>=</operator> <name><name>param1Point3</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dist2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>param1Float</name></expr>;</expr_stmt>
    </block_content>}</block></function>
    
    <function><type><name>void</name></type> <name>checkAddNearest</name><parameter_list>(<parameter><decl><type><name><name>CausticPhotonMap</name><operator>.</operator><name>Photon</name></name></type> <name>param1Photon</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>float</name></type> <name>f</name> <init>= <expr><call><name><name>param1Photon</name><operator>.</operator><name>getDist2</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>px</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>py</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>pz</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>f</name> <operator>&lt;</operator> <name><name>this</name><operator>.</operator><name>dist2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>found</name></name> <operator>&lt;</operator> <name><name>this</name><operator>.</operator><name>max</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>this</name><operator>.</operator><name>found</name></name><operator>++</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dist2</name><index>[<expr><name><name>this</name><operator>.</operator><name>found</name></name></expr>]</index></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>this</name><operator>.</operator><name>index</name><index>[<expr><name><name>this</name><operator>.</operator><name>found</name></name></expr>]</index></name> <operator>=</operator> <name>param1Photon</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>this</name><operator>.</operator><name>gotHeap</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name><name>this</name><operator>.</operator><name>found</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>m</name> <init>= <expr><name>k</name></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>m</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
              <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name>m</name></expr></init></decl>;</decl_stmt>
              <decl_stmt><decl><type><name><name>CausticPhotonMap</name><operator>.</operator><name>Photon</name></name></type> <name>photon</name> <init>= <expr><name><name>this</name><operator>.</operator><name>index</name><index>[<expr><name>m</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>float</name></type> <name>f1</name> <init>= <expr><name><name>this</name><operator>.</operator><name>dist2</name><index>[<expr><name>m</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
              <while>while <condition>(<expr><name>n</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>i1</name> <init>= <expr><name>n</name> <operator>+</operator> <name>n</name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>i1</name> <operator>&lt;</operator> <name><name>this</name><operator>.</operator><name>found</name></name> <operator>&amp;&amp;</operator> <name><name>this</name><operator>.</operator><name>dist2</name><index>[<expr><name>i1</name></expr>]</index></name> <operator>&lt;</operator> <name><name>this</name><operator>.</operator><name>dist2</name><index>[<expr><name>i1</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
                  <expr_stmt><expr><name>i1</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 
                <if_stmt><if>if <condition>(<expr><name>f1</name> <operator>&gt;=</operator> <name><name>this</name><operator>.</operator><name>dist2</name><index>[<expr><name>i1</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
                  <break>break;</break></block_content></block></if></if_stmt> 
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dist2</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>dist2</name><index>[<expr><name>i1</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>index</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>index</name><index>[<expr><name>i1</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>n</name> <operator>=</operator> <name>i1</name></expr>;</expr_stmt>
              </block_content>}</block></while> 
              <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dist2</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>f1</name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>this</name><operator>.</operator><name>index</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>photon</name></expr>;</expr_stmt>
            </block_content>}</block></for> 
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>gotHeap</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt> 
          <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
          <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>this</name><operator>.</operator><name>found</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>i</name></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>this</name><operator>.</operator><name>found</name></name> <operator>&amp;&amp;</operator> <name><name>this</name><operator>.</operator><name>dist2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>this</name><operator>.</operator><name>dist2</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
              <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 
            <if_stmt><if>if <condition>(<expr><name>f</name> <operator>&gt;</operator> <name><name>this</name><operator>.</operator><name>dist2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
              <break>break;</break></block_content></block></if></if_stmt> 
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dist2</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>dist2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>index</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>index</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
          </block_content>}</block></for> 
          <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dist2</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>this</name><operator>.</operator><name>index</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>param1Photon</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dist2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>dist2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt></block_content></block></if></if_stmt>  
    </block_content>}</block></function>
  }</block></class>
}</block></class>


<comment type="block">/* Location:              /Users/wang/Downloads/sunflow2 copy.jar!/org/sunflow/core/photonmap/CausticPhotonMap.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.3
 */</comment></unit>
