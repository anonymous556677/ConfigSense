<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/sunflow/src/org/sunflow/core/renderer/BucketRenderer.java"><package>package <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>renderer</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>BucketOrder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>Display</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>Filter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>ImageSampler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>Instance</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>IntersectionState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>Options</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>Scene</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>Shader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>ShadingState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>bucket</name><operator>.</operator><name>BucketOrderFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>filter</name><operator>.</operator><name>BoxFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>filter</name><operator>.</operator><name>FilterFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>image</name><operator>.</operator><name>Bitmap</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>image</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>MathUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>QMC</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>system</name><operator>.</operator><name>Timer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>system</name><operator>.</operator><name>UI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>system</name><operator>.</operator><name>UI</name><operator>.</operator><name>Module</name></name>;</import>

<class><specifier>public</specifier> class <name>BucketRenderer</name> <super_list><implements>implements <super><name>ImageSampler</name></super></implements></super_list> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>Scene</name></type> <name>scene</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Display</name></type> <name>display</name></decl>;</decl_stmt>
    <comment type="line">// resolution</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>imageWidth</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>imageHeight</name></decl>;</decl_stmt>
    <comment type="line">// bucketing</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>bucketOrderName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>BucketOrder</name></type> <name>bucketOrder</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>bucketSize</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>bucketCounter</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>int</name><index>[]</index></name></type> <name>bucketCoords</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>dumpBuckets</name></decl>;</decl_stmt>

    <comment type="line">// anti-aliasing</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>minAADepth</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>maxAADepth</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>superSampling</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>contrastThreshold</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>jitter</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>displayAA</name></decl>;</decl_stmt>

    <comment type="line">// derived quantities</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>invSuperSampling</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>subPixelSize</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>minStepSize</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>maxStepSize</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>int</name><index>[]</index></name></type> <name>sigma</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>thresh</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>useJitter</name></decl>;</decl_stmt>

    <comment type="line">// filtering</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>filterName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Filter</name></type> <name>filter</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>fs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>fhs</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>BucketRenderer</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>bucketSize</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>bucketOrderName</name> <operator>=</operator> <literal type="string">"hilbert"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>displayAA</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>contrastThreshold</name> <operator>=</operator> <literal type="number">0.1f</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>filterName</name> <operator>=</operator> <literal type="string">"box"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>jitter</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt> <comment type="line">// off by default</comment>
        <expr_stmt><expr><name>dumpBuckets</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt> <comment type="line">// for debugging only - not user settable</comment>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>prepare</name><parameter_list>(<parameter><decl><type><name>Options</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>Scene</name></type> <name>scene</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>scene</name></name> <operator>=</operator> <name>scene</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>imageWidth</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>imageHeight</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

        <comment type="line">// fetch options</comment>
        <expr_stmt><expr><name>bucketSize</name> <operator>=</operator> <call><name><name>options</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"bucket.size"</literal></expr></argument>, <argument><expr><name>bucketSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bucketOrderName</name> <operator>=</operator> <call><name><name>options</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"bucket.order"</literal></expr></argument>, <argument><expr><name>bucketOrderName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>minAADepth</name> <operator>=</operator> <call><name><name>options</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"aa.min"</literal></expr></argument>, <argument><expr><name>minAADepth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>maxAADepth</name> <operator>=</operator> <call><name><name>options</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"aa.max"</literal></expr></argument>, <argument><expr><name>maxAADepth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>superSampling</name> <operator>=</operator> <call><name><name>options</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"aa.samples"</literal></expr></argument>, <argument><expr><name>superSampling</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>displayAA</name> <operator>=</operator> <call><name><name>options</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"aa.display"</literal></expr></argument>, <argument><expr><name>displayAA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>jitter</name> <operator>=</operator> <call><name><name>options</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"aa.jitter"</literal></expr></argument>, <argument><expr><name>jitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>contrastThreshold</name> <operator>=</operator> <call><name><name>options</name><operator>.</operator><name>getFloat</name></name><argument_list>(<argument><expr><literal type="string">"aa.contrast"</literal></expr></argument>, <argument><expr><name>contrastThreshold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// limit bucket size and compute number of buckets in each direction</comment>
        <expr_stmt><expr><name>bucketSize</name> <operator>=</operator> <call><name><name>MathUtils</name><operator>.</operator><name>clamp</name></name><argument_list>(<argument><expr><name>bucketSize</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>numBucketsX</name> <init>= <expr><operator>(</operator><name>imageWidth</name> <operator>+</operator> <name>bucketSize</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>bucketSize</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>numBucketsY</name> <init>= <expr><operator>(</operator><name>imageHeight</name> <operator>+</operator> <name>bucketSize</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>bucketSize</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>bucketOrder</name> <operator>=</operator> <call><name><name>BucketOrderFactory</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>bucketOrderName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bucketCoords</name> <operator>=</operator> <call><name><name>bucketOrder</name><operator>.</operator><name>getBucketSequence</name></name><argument_list>(<argument><expr><name>numBucketsX</name></expr></argument>, <argument><expr><name>numBucketsY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// validate AA options</comment>
        <expr_stmt><expr><name>minAADepth</name> <operator>=</operator> <call><name><name>MathUtils</name><operator>.</operator><name>clamp</name></name><argument_list>(<argument><expr><name>minAADepth</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>maxAADepth</name> <operator>=</operator> <call><name><name>MathUtils</name><operator>.</operator><name>clamp</name></name><argument_list>(<argument><expr><name>maxAADepth</name></expr></argument>, <argument><expr><name>minAADepth</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>superSampling</name> <operator>=</operator> <call><name><name>MathUtils</name><operator>.</operator><name>clamp</name></name><argument_list>(<argument><expr><name>superSampling</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>invSuperSampling</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>/</operator> <name>superSampling</name></expr>;</expr_stmt>
        <comment type="line">// compute AA stepping sizes</comment>
        <expr_stmt><expr><name>subPixelSize</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>maxAADepth</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>maxAADepth</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name>minStepSize</name> <operator>=</operator> <ternary><condition><expr><name>maxAADepth</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><operator>-</operator><name>maxAADepth</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>minAADepth</name> <operator>==</operator> <name>maxAADepth</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>maxStepSize</name> <operator>=</operator> <name>minStepSize</name></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>maxStepSize</name> <operator>=</operator> <ternary><condition><expr><name>minAADepth</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>minAADepth</name></expr> </then><else>: <expr><name>subPixelSize</name> <operator>&lt;&lt;</operator> <operator>(</operator><operator>-</operator><name>minAADepth</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt><expr><name>useJitter</name> <operator>=</operator> <name>jitter</name> <operator>&amp;&amp;</operator> <name>maxAADepth</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <comment type="line">// compute anti-aliasing contrast thresholds</comment>
        <expr_stmt><expr><name>contrastThreshold</name> <operator>=</operator> <call><name><name>MathUtils</name><operator>.</operator><name>clamp</name></name><argument_list>(<argument><expr><name>contrastThreshold</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>thresh</name> <operator>=</operator> <name>contrastThreshold</name> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><literal type="number">2.0f</literal></expr></argument>, <argument><expr><name>minAADepth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// read filter settings from scene</comment>
        <expr_stmt><expr><name>filterName</name> <operator>=</operator> <call><name><name>options</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"filter"</literal></expr></argument>, <argument><expr><name>filterName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>filter</name> <operator>=</operator> <call><name><name>FilterFactory</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>filterName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// adjust filter</comment>
        <if_stmt><if>if <condition>(<expr><name>filter</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printWarning</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>BCKT</name></name></expr></argument>, <argument><expr><literal type="string">"Unrecognized filter type: \"%s\" - defaulting to box"</literal></expr></argument>, <argument><expr><name>filterName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>filter</name> <operator>=</operator> <operator>new</operator> <call><name>BoxFilter</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>filterName</name> <operator>=</operator> <literal type="string">"box"</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>fhs</name> <operator>=</operator> <call><name><name>filter</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>fs</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>ceil</name></name><argument_list>(<argument><expr><name>subPixelSize</name> <operator>*</operator> <operator>(</operator><name>fhs</name> <operator>-</operator> <literal type="number">0.5f</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// prepare QMC sampling</comment>
        <expr_stmt><expr><name>sigma</name> <operator>=</operator> <call><name><name>QMC</name><operator>.</operator><name>generateSigmaTable</name></name><argument_list>(<argument><expr><name>subPixelSize</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>BCKT</name></name></expr></argument>, <argument><expr><literal type="string">"Bucket renderer settings:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>BCKT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Resolution:         %dx%d"</literal></expr></argument>, <argument><expr><name>imageWidth</name></expr></argument>, <argument><expr><name>imageHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>BCKT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Bucket size:        %d"</literal></expr></argument>, <argument><expr><name>bucketSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>BCKT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Number of buckets:  %dx%d"</literal></expr></argument>, <argument><expr><name>numBucketsX</name></expr></argument>, <argument><expr><name>numBucketsY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>pixelMinAA</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>minAADepth</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><operator>-</operator><name>minAADepth</name><operator>)</operator><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>minAADepth</name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>pixelMaxAA</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>maxAADepth</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><operator>-</operator><name>maxAADepth</name><operator>)</operator><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>maxAADepth</name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>BCKT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Anti-aliasing:      [%dx%d] -&gt; [%dx%d]"</literal></expr></argument>, <argument><expr><name>pixelMinAA</name></expr></argument>, <argument><expr><name>pixelMinAA</name></expr></argument>, <argument><expr><name>pixelMaxAA</name></expr></argument>, <argument><expr><name>pixelMaxAA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>BCKT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Rays per sample:    %d"</literal></expr></argument>, <argument><expr><name>superSampling</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>BCKT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Subpixel jitter:    %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>useJitter</name></expr> ?</condition><then> <expr><literal type="string">"on"</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>jitter</name></expr> ?</condition><then> <expr><literal type="string">"auto-off"</literal></expr> </then><else>: <expr><literal type="string">"off"</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>BCKT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Contrast threshold: %.2f"</literal></expr></argument>, <argument><expr><name>contrastThreshold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>BCKT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Filter type:        %s"</literal></expr></argument>, <argument><expr><name>filterName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>BCKT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Filter size:        %.2f pixels"</literal></expr></argument>, <argument><expr><call><name><name>filter</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>render</name><parameter_list>(<parameter><decl><type><name>Display</name></type> <name>display</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>display</name></name> <operator>=</operator> <name>display</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>display</name><operator>.</operator><name>imageBegin</name></name><argument_list>(<argument><expr><name>imageWidth</name></expr></argument>, <argument><expr><name>imageHeight</name></expr></argument>, <argument><expr><name>bucketSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// set members variables</comment>
        <expr_stmt><expr><name>bucketCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <comment type="line">// start task</comment>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>taskStart</name></name><argument_list>(<argument><expr><literal type="string">"Rendering"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>bucketCoords</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Timer</name></type> <name>timer</name> <init>= <expr><operator>new</operator> <call><name>Timer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>timer</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Thread</name><index>[]</index></name></type> <name>renderThreads</name> <init>= <expr><operator>new</operator> <name><name>Thread</name><index>[<expr><call><name><name>scene</name><operator>.</operator><name>getThreads</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>renderThreads</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>renderThreads</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>BucketThread</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>renderThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>setPriority</name><argument_list>(<argument><expr><call><name><name>scene</name><operator>.</operator><name>getThreadPriority</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>renderThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>renderThreads</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <try>try <block>{<block_content>
                <expr_stmt><expr><name><name>renderThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>join</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printError</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>BCKT</name></name></expr></argument>, <argument><expr><literal type="string">"Bucket processing thread %d of %d was interrupted"</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>renderThreads</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>taskStop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>timer</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>BCKT</name></name></expr></argument>, <argument><expr><literal type="string">"Render time: %s"</literal></expr></argument>, <argument><expr><call><name><name>timer</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>display</name><operator>.</operator><name>imageEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <class><specifier>private</specifier> class <name>BucketThread</name> <super_list><extends>extends <super><name>Thread</name></super></extends></super_list> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>threadID</name></decl>;</decl_stmt>

        <constructor><name>BucketThread</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>threadID</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>threadID</name></name> <operator>=</operator> <name>threadID</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>IntersectionState</name></type> <name>istate</name> <init>= <expr><operator>new</operator> <call><name>IntersectionState</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>bx</name></decl>, <decl><type ref="prev"/><name>by</name></decl>;</decl_stmt>
                <synchronized>synchronized <init>(<expr><name><name>BucketRenderer</name><operator>.</operator><name>this</name></name></expr>)</init> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>bucketCounter</name> <operator>&gt;=</operator> <name><name>bucketCoords</name><operator>.</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content>
                        <return>return;</return></block_content></block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>taskUpdate</name></name><argument_list>(<argument><expr><name>bucketCounter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>bx</name> <operator>=</operator> <name><name>bucketCoords</name><index>[<expr><name>bucketCounter</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>by</name> <operator>=</operator> <name><name>bucketCoords</name><index>[<expr><name>bucketCounter</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>bucketCounter</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
                </block_content>}</block></synchronized>
                <expr_stmt><expr><call><name>renderBucket</name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>bx</name></expr></argument>, <argument><expr><name>by</name></expr></argument>, <argument><expr><name>threadID</name></expr></argument>, <argument><expr><name>istate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>UI</name><operator>.</operator><name>taskCanceled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <return>return;</return></block_content></block></if></if_stmt>
            </block_content>}</block></while>
        </block_content>}</block></function>
    }</block></class>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>renderBucket</name><parameter_list>(<parameter><decl><type><name>Display</name></type> <name>display</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>by</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>threadID</name></decl></parameter>, <parameter><decl><type><name>IntersectionState</name></type> <name>istate</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// pixel sized extents</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>x0</name> <init>= <expr><name>bx</name> <operator>*</operator> <name>bucketSize</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>y0</name> <init>= <expr><name>by</name> <operator>*</operator> <name>bucketSize</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>bw</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>bucketSize</name></expr></argument>, <argument><expr><name>imageWidth</name> <operator>-</operator> <name>x0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>bh</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>bucketSize</name></expr></argument>, <argument><expr><name>imageHeight</name> <operator>-</operator> <name>y0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// prepare bucket</comment>
        <expr_stmt><expr><call><name><name>display</name><operator>.</operator><name>imagePrepare</name></name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>, <argument><expr><name>bw</name></expr></argument>, <argument><expr><name>bh</name></expr></argument>, <argument><expr><name>threadID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>Color</name><index>[]</index></name></type> <name>bucketRGB</name> <init>= <expr><operator>new</operator> <name><name>Color</name><index>[<expr><name>bw</name> <operator>*</operator> <name>bh</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <comment type="line">// subpixel extents</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>sx0</name> <init>= <expr><name>x0</name> <operator>*</operator> <name>subPixelSize</name> <operator>-</operator> <name>fs</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>sy0</name> <init>= <expr><name>y0</name> <operator>*</operator> <name>subPixelSize</name> <operator>-</operator> <name>fs</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>sbw</name> <init>= <expr><name>bw</name> <operator>*</operator> <name>subPixelSize</name> <operator>+</operator> <name>fs</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>sbh</name> <init>= <expr><name>bh</name> <operator>*</operator> <name>subPixelSize</name> <operator>+</operator> <name>fs</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// round up to align with maximum step size</comment>
        <expr_stmt><expr><name>sbw</name> <operator>=</operator> <operator>(</operator><name>sbw</name> <operator>+</operator> <operator>(</operator><name>maxStepSize</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><operator>(</operator><name>maxStepSize</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>sbh</name> <operator>=</operator> <operator>(</operator><name>sbh</name> <operator>+</operator> <operator>(</operator><name>maxStepSize</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><operator>(</operator><name>maxStepSize</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
        <comment type="line">// extra padding as needed</comment>
        <if_stmt><if>if <condition>(<expr><name>maxStepSize</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>sbw</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>sbh</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// allocate bucket memory</comment>
        <decl_stmt><decl><type><name><name>ImageSample</name><index>[]</index></name></type> <name>samples</name> <init>= <expr><operator>new</operator> <name><name>ImageSample</name><index>[<expr><name>sbw</name> <operator>*</operator> <name>sbh</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <comment type="line">// allocate samples and compute jitter offsets</comment>
        <decl_stmt><decl><type><name>float</name></type> <name>invSubPixelSize</name> <init>= <expr><literal type="number">1.0f</literal> <operator>/</operator> <name>subPixelSize</name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>sbh</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>sbw</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr><operator>,</operator> <expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>sx</name> <init>= <expr><name>sx0</name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>sy</name> <init>= <expr><name>sy0</name> <operator>+</operator> <name>y</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>sx</name> <operator>&amp;</operator> <operator>(</operator><name><name>sigma</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name>sy</name> <operator>&amp;</operator> <operator>(</operator><name><name>sigma</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>j</name> <operator>*</operator> <name><name>sigma</name><operator>.</operator><name>length</name></name> <operator>+</operator> <name><name>sigma</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>float</name></type> <name>dx</name> <init>= <expr><ternary><condition><expr><name>useJitter</name></expr> ?</condition><then> <expr><operator>(</operator><name>float</name><operator>)</operator> <name><name>sigma</name><index>[<expr><name>k</name></expr>]</index></name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <name><name>sigma</name><operator>.</operator><name>length</name></name></expr> </then><else>: <expr><literal type="number">0.5f</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>float</name></type> <name>dy</name> <init>= <expr><ternary><condition><expr><name>useJitter</name></expr> ?</condition><then> <expr><operator>(</operator><name>float</name><operator>)</operator> <name><name>sigma</name><index>[<expr><name>j</name></expr>]</index></name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <name><name>sigma</name><operator>.</operator><name>length</name></name></expr> </then><else>: <expr><literal type="number">0.5f</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>float</name></type> <name>rx</name> <init>= <expr><operator>(</operator><name>sx</name> <operator>+</operator> <name>dx</name><operator>)</operator> <operator>*</operator> <name>invSubPixelSize</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>float</name></type> <name>ry</name> <init>= <expr><operator>(</operator><name>sy</name> <operator>+</operator> <name>dy</name><operator>)</operator> <operator>*</operator> <name>invSubPixelSize</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>ry</name> <operator>=</operator> <name>imageHeight</name> <operator>-</operator> <name>ry</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>samples</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>ImageSample</name><argument_list>(<argument><expr><name>rx</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>sbw</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <name>maxStepSize</name></expr></incr>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>sbh</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <name>maxStepSize</name></expr></incr>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>refineSamples</name><argument_list>(<argument><expr><name>samples</name></expr></argument>, <argument><expr><name>sbw</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>maxStepSize</name></expr></argument>, <argument><expr><name>thresh</name></expr></argument>, <argument><expr><name>istate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
        <if_stmt><if>if <condition>(<expr><name>dumpBuckets</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>BCKT</name></name></expr></argument>, <argument><expr><literal type="string">"Dumping bucket [%d, %d] to file ..."</literal></expr></argument>, <argument><expr><name>bx</name></expr></argument>, <argument><expr><name>by</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Bitmap</name></type> <name>bitmap</name> <init>= <expr><operator>new</operator> <call><name>Bitmap</name><argument_list>(<argument><expr><name>sbw</name></expr></argument>, <argument><expr><name>sbh</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name>sbh</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>y</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>sbw</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr><operator>,</operator> <expr><name>index</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>bitmap</name><operator>.</operator><name>setPixel</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>samples</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><call><name><name>c</name><operator>.</operator><name>copy</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toNonLinear</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
            <expr_stmt><expr><call><name><name>bitmap</name><operator>.</operator><name>save</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"bucket_%04d_%04d.png"</literal></expr></argument>, <argument><expr><name>bx</name></expr></argument>, <argument><expr><name>by</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>displayAA</name></expr>)</condition> <block>{<block_content>
            <comment type="line">// color coded image of what is visible</comment>
            <decl_stmt><decl><type><name>float</name></type> <name>invArea</name> <init>= <expr><name>invSubPixelSize</name> <operator>*</operator> <name>invSubPixelSize</name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>bh</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>bw</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr><operator>,</operator> <expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>sampled</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>subPixelSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>subPixelSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                            <decl_stmt><decl><type><name>int</name></type> <name>sx</name> <init>= <expr><name>x</name> <operator>*</operator> <name>subPixelSize</name> <operator>+</operator> <name>fs</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>int</name></type> <name>sy</name> <init>= <expr><name>y</name> <operator>*</operator> <name>subPixelSize</name> <operator>+</operator> <name>fs</name> <operator>+</operator> <name>j</name></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><name>sx</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>sbw</name></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><name>sampled</name> <operator>+=</operator> <ternary><condition><expr><name><name>samples</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>sampled</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></for>
                    <expr_stmt><expr><name><name>bucketRGB</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>Color</name><argument_list>(<argument><expr><name>sampled</name> <operator>*</operator> <name>invArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="line">// filter samples into pixels</comment>
            <decl_stmt><decl><type><name>float</name></type> <name>cy</name> <init>= <expr><name>imageHeight</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <operator>(</operator><name>y0</name> <operator>+</operator> <literal type="number">0.5f</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>bh</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr><operator>,</operator> <expr><name>cy</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>float</name></type> <name>cx</name> <init>= <expr><name>x0</name> <operator>+</operator> <literal type="number">0.5f</literal></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>bw</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr><operator>,</operator> <expr><name>index</name><operator>++</operator></expr><operator>,</operator> <expr><name>cx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>Color</name></type> <name>c</name> <init>= <expr><call><name><name>Color</name><operator>.</operator><name>black</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>float</name></type> <name>weight</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><operator>-</operator><name>fs</name></expr></init></decl>, <decl><type ref="prev"/><name>sy</name> <init>= <expr><name>y</name> <operator>*</operator> <name>subPixelSize</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>fs</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>sy</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>-</operator><name>fs</name></expr></init></decl>, <decl><type ref="prev"/><name>sx</name> <init>= <expr><name>x</name> <operator>*</operator> <name>subPixelSize</name></expr></init></decl>, <decl><type ref="prev"/><name>s</name> <init>= <expr><name>sx</name> <operator>+</operator> <name>sy</name> <operator>*</operator> <name>sbw</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>fs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>sx</name><operator>++</operator></expr><operator>,</operator> <expr><name>s</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                            <decl_stmt><decl><type><name>float</name></type> <name>dx</name> <init>= <expr><name><name>samples</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>rx</name> <operator>-</operator> <name>cx</name></expr></init></decl>;</decl_stmt>
                            <if_stmt><if>if <condition>(<expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name>dx</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>fhs</name></expr>)</condition><block type="pseudo"><block_content>
                                <continue>continue;</continue></block_content></block></if></if_stmt>
                            <decl_stmt><decl><type><name>float</name></type> <name>dy</name> <init>= <expr><name><name>samples</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>ry</name> <operator>-</operator> <name>cy</name></expr></init></decl>;</decl_stmt>
                            <if_stmt><if>if <condition>(<expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name>dy</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>fhs</name></expr>)</condition><block type="pseudo"><block_content>
                                <continue>continue;</continue></block_content></block></if></if_stmt>
                            <decl_stmt><decl><type><name>float</name></type> <name>f</name> <init>= <expr><call><name><name>filter</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>dx</name></expr></argument>, <argument><expr><name>dy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>madd</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>samples</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name>weight</name> <operator>+=</operator> <name>f</name></expr>;</expr_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></for>
                    <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>mul</name></name><argument_list>(<argument><expr><literal type="number">1.0f</literal> <operator>/</operator> <name>weight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>bucketRGB</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
        </block_content>}</block></else></if_stmt>
        <comment type="line">// update pixels</comment>
        <expr_stmt><expr><call><name><name>display</name><operator>.</operator><name>imageUpdate</name></name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>, <argument><expr><name>bw</name></expr></argument>, <argument><expr><name>bh</name></expr></argument>, <argument><expr><name>bucketRGB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>computeSubPixel</name><parameter_list>(<parameter><decl><type><name>ImageSample</name></type> <name>sample</name></decl></parameter>, <parameter><decl><type><name>IntersectionState</name></type> <name>istate</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><name><name>sample</name><operator>.</operator><name>rx</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>y</name> <init>= <expr><name><name>sample</name><operator>.</operator><name>ry</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>q0</name> <init>= <expr><call><name><name>QMC</name><operator>.</operator><name>halton</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>sample</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>q1</name> <init>= <expr><call><name><name>QMC</name><operator>.</operator><name>halton</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>sample</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>q2</name> <init>= <expr><call><name><name>QMC</name><operator>.</operator><name>halton</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>sample</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>superSampling</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// multiple sampling</comment>
            <expr_stmt><expr><call><name><name>sample</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>scene</name><operator>.</operator><name>getRadiance</name></name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>q2</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name><name>sample</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>superSampling</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>double</name></type> <name>time</name> <init>= <expr><call><name><name>QMC</name><operator>.</operator><name>mod1</name></name><argument_list>(<argument><expr><name>q0</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>invSuperSampling</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>lensU</name> <init>= <expr><call><name><name>QMC</name><operator>.</operator><name>mod1</name></name><argument_list>(<argument><expr><name>q1</name> <operator>+</operator> <call><name><name>QMC</name><operator>.</operator><name>halton</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>lensV</name> <init>= <expr><call><name><name>QMC</name><operator>.</operator><name>mod1</name></name><argument_list>(<argument><expr><name>q2</name> <operator>+</operator> <call><name><name>QMC</name><operator>.</operator><name>halton</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>sample</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>scene</name><operator>.</operator><name>getRadiance</name></name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>lensU</name></expr></argument>, <argument><expr><name>lensV</name></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><name><name>sample</name><operator>.</operator><name>i</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name><name>sample</name><operator>.</operator><name>scale</name></name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <name>invSuperSampling</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="line">// single sample</comment>
            <expr_stmt><expr><call><name><name>sample</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><call><name><name>scene</name><operator>.</operator><name>getRadiance</name></name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>q2</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name><name>sample</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>refineSamples</name><parameter_list>(<parameter><decl><type><name><name>ImageSample</name><index>[]</index></name></type> <name>samples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sbw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stepSize</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>thresh</name></decl></parameter>, <parameter><decl><type><name>IntersectionState</name></type> <name>istate</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>dx</name> <init>= <expr><name>stepSize</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>dy</name> <init>= <expr><name>stepSize</name> <operator>*</operator> <name>sbw</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i00</name> <init>= <expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>sbw</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ImageSample</name></type> <name>s00</name> <init>= <expr><name><name>samples</name><index>[<expr><name>i00</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ImageSample</name></type> <name>s01</name> <init>= <expr><name><name>samples</name><index>[<expr><name>i00</name> <operator>+</operator> <name>dy</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ImageSample</name></type> <name>s10</name> <init>= <expr><name><name>samples</name><index>[<expr><name>i00</name> <operator>+</operator> <name>dx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ImageSample</name></type> <name>s11</name> <init>= <expr><name><name>samples</name><index>[<expr><name>i00</name> <operator>+</operator> <name>dx</name> <operator>+</operator> <name>dy</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s00</name><operator>.</operator><name>sampled</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>computeSubPixel</name><argument_list>(<argument><expr><name>s00</name></expr></argument>, <argument><expr><name>istate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s01</name><operator>.</operator><name>sampled</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>computeSubPixel</name><argument_list>(<argument><expr><name>s01</name></expr></argument>, <argument><expr><name>istate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s10</name><operator>.</operator><name>sampled</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>computeSubPixel</name><argument_list>(<argument><expr><name>s10</name></expr></argument>, <argument><expr><name>istate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s11</name><operator>.</operator><name>sampled</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>computeSubPixel</name><argument_list>(<argument><expr><name>s11</name></expr></argument>, <argument><expr><name>istate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>stepSize</name> <operator>&gt;</operator> <name>minStepSize</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>s00</name><operator>.</operator><name>isDifferent</name></name><argument_list>(<argument><expr><name>s01</name></expr></argument>, <argument><expr><name>thresh</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>s00</name><operator>.</operator><name>isDifferent</name></name><argument_list>(<argument><expr><name>s10</name></expr></argument>, <argument><expr><name>thresh</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>s00</name><operator>.</operator><name>isDifferent</name></name><argument_list>(<argument><expr><name>s11</name></expr></argument>, <argument><expr><name>thresh</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>s01</name><operator>.</operator><name>isDifferent</name></name><argument_list>(<argument><expr><name>s11</name></expr></argument>, <argument><expr><name>thresh</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>s10</name><operator>.</operator><name>isDifferent</name></name><argument_list>(<argument><expr><name>s11</name></expr></argument>, <argument><expr><name>thresh</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>s01</name><operator>.</operator><name>isDifferent</name></name><argument_list>(<argument><expr><name>s10</name></expr></argument>, <argument><expr><name>thresh</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>stepSize</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>thresh</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>refineSamples</name><argument_list>(<argument><expr><name>samples</name></expr></argument>, <argument><expr><name>sbw</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>stepSize</name></expr></argument>, <argument><expr><name>thresh</name></expr></argument>, <argument><expr><name>istate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>refineSamples</name><argument_list>(<argument><expr><name>samples</name></expr></argument>, <argument><expr><name>sbw</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name>stepSize</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>stepSize</name></expr></argument>, <argument><expr><name>thresh</name></expr></argument>, <argument><expr><name>istate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>refineSamples</name><argument_list>(<argument><expr><name>samples</name></expr></argument>, <argument><expr><name>sbw</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>stepSize</name></expr></argument>, <argument><expr><name>stepSize</name></expr></argument>, <argument><expr><name>thresh</name></expr></argument>, <argument><expr><name>istate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>refineSamples</name><argument_list>(<argument><expr><name>samples</name></expr></argument>, <argument><expr><name>sbw</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name>stepSize</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>stepSize</name></expr></argument>, <argument><expr><name>stepSize</name></expr></argument>, <argument><expr><name>thresh</name></expr></argument>, <argument><expr><name>istate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// interpolate remaining samples</comment>
        <decl_stmt><decl><type><name>float</name></type> <name>ds</name> <init>= <expr><literal type="number">1.0f</literal> <operator>/</operator> <name>stepSize</name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>stepSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>stepSize</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>samples</name><index>[<expr><name>x</name> <operator>+</operator> <name>i</name> <operator>+</operator> <operator>(</operator><name>y</name> <operator>+</operator> <name>j</name><operator>)</operator> <operator>*</operator> <name>sbw</name></expr>]</index></name><operator>.</operator><call><name>processed</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>ImageSample</name><operator>.</operator><name>bilerp</name></name><argument_list>(<argument><expr><name><name>samples</name><index>[<expr><name>x</name> <operator>+</operator> <name>i</name> <operator>+</operator> <operator>(</operator><name>y</name> <operator>+</operator> <name>j</name><operator>)</operator> <operator>*</operator> <name>sbw</name></expr>]</index></name></expr></argument>, <argument><expr><name>s00</name></expr></argument>, <argument><expr><name>s01</name></expr></argument>, <argument><expr><name>s10</name></expr></argument>, <argument><expr><name>s11</name></expr></argument>, <argument><expr><name>i</name> <operator>*</operator> <name>ds</name></expr></argument>, <argument><expr><name>j</name> <operator>*</operator> <name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for>
    </block_content>}</block></function>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>ImageSample</name> <block>{
        <decl_stmt><decl><type><name>float</name></type> <name>rx</name></decl>, <decl><type ref="prev"/><name>ry</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Color</name></type> <name>c</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Instance</name></type> <name>instance</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Shader</name></type> <name>shader</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>nx</name></decl>, <decl><type ref="prev"/><name>ny</name></decl>, <decl><type ref="prev"/><name>nz</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>sampled</name></decl>;</decl_stmt>

        <constructor><name>ImageSample</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>rx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>ry</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>rx</name></name> <operator>=</operator> <name>rx</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ry</name></name> <operator>=</operator> <name>ry</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>i</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>instance</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>shader</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>nx</name> <operator>=</operator> <name>ny</name> <operator>=</operator> <name>nz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>sampled</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><name>void</name></type> <name>set</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>Color</name><operator>.</operator><name>BLACK</name></name></expr>;</expr_stmt></block_content></block></if>
            <else>else <block>{<block_content>
                <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name><name>state</name><operator>.</operator><name>getResult</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>c</name><operator>.</operator><name>isNan</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printError</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>BCKT</name></name></expr></argument>, <argument><expr><literal type="string">"NaN shading sample!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <if type="elseif">else if <condition>(<expr><call><name><name>c</name><operator>.</operator><name>isInf</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printError</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>BCKT</name></name></expr></argument>, <argument><expr><literal type="string">"Inf shading sample!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>shader</name> <operator>=</operator> <call><name><name>state</name><operator>.</operator><name>getShader</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>instance</name> <operator>=</operator> <call><name><name>state</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>nx</name> <operator>=</operator> <call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call><operator>.</operator><name>x</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ny</name> <operator>=</operator> <call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call><operator>.</operator><name>y</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>nz</name> <operator>=</operator> <call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call><operator>.</operator><name>z</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name>sampled</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name><name>Color</name><operator>.</operator><name>black</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>sampled</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>state</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getResult</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>state</name><operator>.</operator><name>getResult</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isNan</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printError</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>BCKT</name></name></expr></argument>, <argument><expr><literal type="string">"NaN shading sample!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <if type="elseif">else if <condition>(<expr><call><name><name>state</name><operator>.</operator><name>getResult</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isInf</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printError</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>BCKT</name></name></expr></argument>, <argument><expr><literal type="string">"Inf shading sample!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><name>void</name></type> <name>scale</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>mul</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><name>boolean</name></type> <name>processed</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><name>c</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
        </block_content>}</block></function>

        <function><type><name>boolean</name></type> <name>isDifferent</name><parameter_list>(<parameter><decl><type><name>ImageSample</name></type> <name>sample</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>thresh</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>instance</name> <operator>!=</operator> <name><name>sample</name><operator>.</operator><name>instance</name></name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>shader</name> <operator>!=</operator> <name><name>sample</name><operator>.</operator><name>shader</name></name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>shader</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>Color</name><operator>.</operator><name>hasContrast</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>sample</name><operator>.</operator><name>c</name></name></expr></argument>, <argument><expr><name>thresh</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>dot</name> <init>= <expr><operator>(</operator><name>nx</name> <operator>*</operator> <name><name>sample</name><operator>.</operator><name>nx</name></name> <operator>+</operator> <name>ny</name> <operator>*</operator> <name><name>sample</name><operator>.</operator><name>ny</name></name> <operator>+</operator> <name>nz</name> <operator>*</operator> <name><name>sample</name><operator>.</operator><name>nz</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <return>return <expr><name>dot</name> <operator>&lt;</operator> <literal type="number">0.9f</literal></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>static</specifier> <name>ImageSample</name></type> <name>bilerp</name><parameter_list>(<parameter><decl><type><name>ImageSample</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>ImageSample</name></type> <name>i00</name></decl></parameter>, <parameter><decl><type><name>ImageSample</name></type> <name>i01</name></decl></parameter>, <parameter><decl><type><name>ImageSample</name></type> <name>i10</name></decl></parameter>, <parameter><decl><type><name>ImageSample</name></type> <name>i11</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>dy</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>float</name></type> <name>k00</name> <init>= <expr><operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <name>dx</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <name>dy</name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>k01</name> <init>= <expr><operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <name>dx</name><operator>)</operator> <operator>*</operator> <name>dy</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>k10</name> <init>= <expr><name>dx</name> <operator>*</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <name>dy</name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>k11</name> <init>= <expr><name>dx</name> <operator>*</operator> <name>dy</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Color</name></type> <name>c00</name> <init>= <expr><name><name>i00</name><operator>.</operator><name>c</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Color</name></type> <name>c01</name> <init>= <expr><name><name>i01</name><operator>.</operator><name>c</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Color</name></type> <name>c10</name> <init>= <expr><name><name>i10</name><operator>.</operator><name>c</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Color</name></type> <name>c11</name> <init>= <expr><name><name>i11</name><operator>.</operator><name>c</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Color</name></type> <name>c</name> <init>= <expr><call><name><name>Color</name><operator>.</operator><name>mul</name></name><argument_list>(<argument><expr><name>k00</name></expr></argument>, <argument><expr><name>c00</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>madd</name></name><argument_list>(<argument><expr><name>k01</name></expr></argument>, <argument><expr><name>c01</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>madd</name></name><argument_list>(<argument><expr><name>k10</name></expr></argument>, <argument><expr><name>c10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>madd</name></name><argument_list>(<argument><expr><name>k11</name></expr></argument>, <argument><expr><name>c11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>result</name><operator>.</operator><name>c</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class></unit>
