<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/sunflow.jar.src/org/sunflow/core/gi/IrradianceCacheGIEngine.java"><package>package <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>gi</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>locks</name><operator>.</operator><name>ReentrantReadWriteLock</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>GIEngine</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>GlobalPhotonMapInterface</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>Options</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>PhotonStore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>Ray</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>Scene</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>ShadingState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>photonmap</name><operator>.</operator><name>GlobalPhotonMap</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>photonmap</name><operator>.</operator><name>GridPhotonMap</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>image</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>MathUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>OrthoNormalBasis</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Point3</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Vector3</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>system</name><operator>.</operator><name>UI</name></name>;</import>

<class><specifier>public</specifier> class <name>IrradianceCacheGIEngine</name> <super_list><implements>implements <super><name>GIEngine</name></super></implements></super_list> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>samples</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>tolerance</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>invTolerance</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>minSpacing</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>maxSpacing</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>Node</name></type> <name>root</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>ReentrantReadWriteLock</name></type> <name>rwl</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><specifier>private</specifier> <name>GlobalPhotonMapInterface</name></type> <name>globalPhotonMap</name></decl>;</decl_stmt>
  
  <constructor><specifier>public</specifier> <name>IrradianceCacheGIEngine</name><parameter_list>(<parameter><decl><type><name>Options</name></type> <name>paramOptions</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>samples</name></name> <operator>=</operator> <call><name><name>paramOptions</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"gi.irr-cache.samples"</literal></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tolerance</name></name> <operator>=</operator> <call><name><name>paramOptions</name><operator>.</operator><name>getFloat</name></name><argument_list>(<argument><expr><literal type="string">"gi.irr-cache.tolerance"</literal></expr></argument>, <argument><expr><literal type="number">0.05F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>invTolerance</name></name> <operator>=</operator> <literal type="number">1.0F</literal> <operator>/</operator> <name><name>this</name><operator>.</operator><name>tolerance</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>minSpacing</name></name> <operator>=</operator> <call><name><name>paramOptions</name><operator>.</operator><name>getFloat</name></name><argument_list>(<argument><expr><literal type="string">"gi.irr-cache.min_spacing"</literal></expr></argument>, <argument><expr><literal type="number">0.05F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>maxSpacing</name></name> <operator>=</operator> <call><name><name>paramOptions</name><operator>.</operator><name>getFloat</name></name><argument_list>(<argument><expr><literal type="string">"gi.irr-cache.max_spacing"</literal></expr></argument>, <argument><expr><literal type="number">5.0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>root</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>rwl</name></name> <operator>=</operator> <operator>new</operator> <call><name>ReentrantReadWriteLock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>globalPhotonMap</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>str</name> <init>= <expr><call><name><name>paramOptions</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"gi.irr-cache.gmap"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>str</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return;</return></block_content></block></if></if_stmt> 
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name><name>paramOptions</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"gi.irr-cache.gmap.emit"</literal></expr></argument>, <argument><expr><literal type="number">100000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><call><name><name>paramOptions</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"gi.irr-cache.gmap.gather"</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f</name> <init>= <expr><call><name><name>paramOptions</name><operator>.</operator><name>getFloat</name></name><argument_list>(<argument><expr><literal type="string">"gi.irr-cache.gmap.radius"</literal></expr></argument>, <argument><expr><literal type="number">0.5F</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>str</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"kd"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>globalPhotonMap</name></name> <operator>=</operator> <operator>(</operator><name>GlobalPhotonMapInterface</name><operator>)</operator><operator>new</operator> <call><name>GlobalPhotonMap</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>str</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"grid"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>globalPhotonMap</name></name> <operator>=</operator> <operator>(</operator><name>GlobalPhotonMapInterface</name><operator>)</operator><operator>new</operator> <call><name>GridPhotonMap</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printWarning</name></name><argument_list>(<argument><expr><name><name>UI</name><operator>.</operator><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"Unrecognized global photon map type \"%s\" - ignoring"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{ <expr><name>str</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt> 
  </block_content>}</block></constructor>
  
  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>Scene</name></type> <name>paramScene</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>samples</name></name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>minSpacing</name></name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">0.001F</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>minSpacing</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>maxSpacing</name></name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">0.001F</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>maxSpacing</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>UI</name><operator>.</operator><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"Irradiance cache settings:"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>Object</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>UI</name><operator>.</operator><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Samples: %d"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{ <expr><call><name><name>Integer</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>samples</name></name></expr></argument>)</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>tolerance</name></name> <operator>&lt;=</operator> <literal type="number">0.0F</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>UI</name><operator>.</operator><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Tolerance: off"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>Object</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>UI</name><operator>.</operator><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Tolerance: %.3f"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{ <expr><call><name><name>Float</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>tolerance</name></name></expr></argument>)</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt> 
    <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>UI</name><operator>.</operator><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Spacing: %.3f to %.3f"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{ <expr><call><name><name>Float</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>minSpacing</name></name></expr></argument>)</argument_list></call></expr>, <expr><call><name><name>Float</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>maxSpacing</name></name></expr></argument>)</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Vector3</name></type> <name>vector3</name> <init>= <expr><call><name><name>paramScene</name><operator>.</operator><name>getBounds</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getExtents</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>root</name></name> <operator>=</operator> <operator>new</operator> <call><name>Node</name><argument_list>(<argument><expr><call><name><name>paramScene</name><operator>.</operator><name>getBounds</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCenter</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1.0001F</literal> <operator>*</operator> <call><name><name>MathUtils</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name><name>vector3</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>vector3</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>vector3</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>this</name><operator>.</operator><name>globalPhotonMap</name></name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name><name>paramScene</name><operator>.</operator><name>calculatePhotons</name></name><argument_list>(<argument><expr><operator>(</operator><name>PhotonStore</name><operator>)</operator><name><name>this</name><operator>.</operator><name>globalPhotonMap</name></name></expr></argument>, <argument><expr><literal type="string">"global"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="boolean">true</literal></expr></else></ternary></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>Color</name></type> <name>getGlobalRadiance</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>paramShadingState</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>this</name><operator>.</operator><name>globalPhotonMap</name></name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><call><name><name>paramShadingState</name><operator>.</operator><name>getShader</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name><name>paramShadingState</name><operator>.</operator><name>getShader</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRadiance</name><argument_list>(<argument><expr><name>paramShadingState</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>Color</name><operator>.</operator><name>BLACK</name></name></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><call><name><name>this</name><operator>.</operator><name>globalPhotonMap</name><operator>.</operator><name>getRadiance</name></name><argument_list>(<argument><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <name>Color</name></type> <name>getIrradiance</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>paramShadingState</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>paramColor</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>samples</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name><name>Color</name><operator>.</operator><name>BLACK</name></name></expr>;</return></block_content></block></if></if_stmt> 
    <if_stmt><if>if <condition>(<expr><call><name><name>paramShadingState</name><operator>.</operator><name>getDiffuseDepth</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>float</name></type> <name>f1</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>paramShadingState</name><operator>.</operator><name>getRandom</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f2</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>paramShadingState</name><operator>.</operator><name>getRandom</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f3</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>f1</name> <operator>*</operator> <literal type="number">2.0F</literal><operator>)</operator> <operator>*</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f4</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name>f3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f5</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><name>f3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f6</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>sqrt</name></name><argument_list>(<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f7</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>sqrt</name></name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1.0F</literal> <operator>-</operator> <name>f2</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Vector3</name></type> <name>vector3</name> <init>= <expr><operator>new</operator> <call><name>Vector3</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>vector3</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>f4</name> <operator>*</operator> <name>f6</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>vector3</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>f5</name> <operator>*</operator> <name>f6</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>vector3</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name>f7</name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>OrthoNormalBasis</name></type> <name>orthoNormalBasis</name> <init>= <expr><call><name><name>paramShadingState</name><operator>.</operator><name>getBasis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>orthoNormalBasis</name><operator>.</operator><name>transform</name></name><argument_list>(<argument><expr><name>vector3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>Ray</name></type> <name>ray</name> <init>= <expr><operator>new</operator> <call><name>Ray</name><argument_list>(<argument><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>vector3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>ShadingState</name></type> <name>shadingState</name> <init>= <expr><call><name><name>paramShadingState</name><operator>.</operator><name>traceFinalGather</name></name><argument_list>(<argument><expr><name>ray</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><ternary><condition><expr><operator>(</operator><name>shadingState</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>getGlobalRadiance</name><argument_list>(<argument><expr><name>shadingState</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>copy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>mul</name><argument_list>(<argument><expr><literal type="number">3.1415927F</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>Color</name><operator>.</operator><name>BLACK</name></name></expr></else></ternary></expr>;</return>
    </block_content>}</block></if></if_stmt> 
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>rwl</name><operator>.</operator><name>readLock</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Color</name></type> <name>color</name> <init>= <expr><call><name>getIrradiance</name><argument_list>(<argument><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>rwl</name><operator>.</operator><name>readLock</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>color</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>color</name> <operator>=</operator> <call><name><name>Color</name><operator>.</operator><name>black</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>OrthoNormalBasis</name></type> <name>orthoNormalBasis</name> <init>= <expr><call><name><name>paramShadingState</name><operator>.</operator><name>getBasis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f1</name> <init>= <expr><literal type="number">0.0F</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f2</name> <init>= <expr><name><name>Float</name><operator>.</operator><name>POSITIVE_INFINITY</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Vector3</name></type> <name>vector3</name> <init>= <expr><operator>new</operator> <call><name>Vector3</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>byte</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name><name>this</name><operator>.</operator><name>samples</name></name></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>float</name></type> <name>f3</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>paramShadingState</name><operator>.</operator><name>getRandom</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>samples</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>f4</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>paramShadingState</name><operator>.</operator><name>getRandom</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>samples</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>f5</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><operator>(</operator><name>f3</name> <operator>*</operator> <literal type="number">2.0F</literal><operator>)</operator> <operator>*</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>f6</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name>f5</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>f7</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><name>f5</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>f8</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>sqrt</name></name><argument_list>(<argument><expr><name>f4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>f9</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>sqrt</name></name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1.0F</literal> <operator>-</operator> <name>f4</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>vector3</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>f6</name> <operator>*</operator> <name>f8</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>vector3</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>f7</name> <operator>*</operator> <name>f8</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>vector3</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name>f9</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>orthoNormalBasis</name><operator>.</operator><name>transform</name></name><argument_list>(<argument><expr><name>vector3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Ray</name></type> <name>ray</name> <init>= <expr><operator>new</operator> <call><name>Ray</name><argument_list>(<argument><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>vector3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ShadingState</name></type> <name>shadingState</name> <init>= <expr><call><name><name>paramShadingState</name><operator>.</operator><name>traceFinalGather</name></name><argument_list>(<argument><expr><name>ray</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>shadingState</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>f2</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><call><name><name>ray</name><operator>.</operator><name>getMax</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>f1</name> <operator>+=</operator> <literal type="number">1.0F</literal> <operator>/</operator> <call><name><name>ray</name><operator>.</operator><name>getMax</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>shadingState</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>prepareShadingState</name><argument_list>(<argument><expr><name>shadingState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>color</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>getGlobalRadiance</name><argument_list>(<argument><expr><name>shadingState</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt> 
      </block_content>}</block></for> 
      <expr_stmt><expr><call><name><name>color</name><operator>.</operator><name>mul</name></name><argument_list>(<argument><expr><literal type="number">3.1415927F</literal> <operator>/</operator> <name><name>this</name><operator>.</operator><name>samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>f1</name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>samples</name></name> <operator>/</operator> <name>f1</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>rwl</name><operator>.</operator><name>writeLock</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>insert</name><argument_list>(<argument><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>paramShadingState</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>f1</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>rwl</name><operator>.</operator><name>writeLock</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt> 
    <return>return <expr><name>color</name></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>private</specifier> <name>void</name></type> <name>insert</name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>paramPoint3</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>paramVector3</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>paramFloat</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>paramColor</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>tolerance</name></name> <operator>&lt;=</operator> <literal type="number">0.0F</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return;</return></block_content></block></if></if_stmt> 
    <decl_stmt><decl><type><name>Node</name></type> <name>node</name> <init>= <expr><name><name>this</name><operator>.</operator><name>root</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>paramFloat</name> <operator>=</operator> <call><name><name>MathUtils</name><operator>.</operator><name>clamp</name></name><argument_list>(<argument><expr><name>paramFloat</name> <operator>*</operator> <name><name>this</name><operator>.</operator><name>tolerance</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>minSpacing</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>maxSpacing</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>this</name><operator>.</operator><name>invTolerance</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>this</name><operator>.</operator><name>root</name><operator>.</operator><name>isInside</name></name><argument_list>(<argument><expr><name>paramPoint3</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <while>while <condition>(<expr><name><name>node</name><operator>.</operator><name>sideLength</name></name> <operator>&gt;=</operator> <literal type="number">4.0D</literal> <operator>*</operator> <name>paramFloat</name> <operator>*</operator> <name><name>this</name><operator>.</operator><name>tolerance</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>i</name> <operator>|=</operator> <ternary><condition><expr><operator>(</operator><name><name>paramPoint3</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <name><name>node</name><operator>.</operator><name>center</name><operator>.</operator><name>x</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> <operator>|=</operator> <ternary><condition><expr><operator>(</operator><name><name>paramPoint3</name><operator>.</operator><name>y</name></name> <operator>&gt;</operator> <name><name>node</name><operator>.</operator><name>center</name><operator>.</operator><name>y</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> <operator>|=</operator> <ternary><condition><expr><operator>(</operator><name><name>paramPoint3</name><operator>.</operator><name>z</name></name> <operator>&gt;</operator> <name><name>node</name><operator>.</operator><name>center</name><operator>.</operator><name>z</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>.</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>Point3</name></type> <name>point3</name> <init>= <expr><operator>new</operator> <call><name>Point3</name><argument_list>(<argument><expr><name><name>node</name><operator>.</operator><name>center</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>point3</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><name><name>node</name><operator>.</operator><name>quadSideLength</name></name></expr> </then><else>: <expr><name><name>node</name><operator>.</operator><name>quadSideLength</name></name></expr></else></ternary></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>point3</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x2</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><name><name>node</name><operator>.</operator><name>quadSideLength</name></name></expr> </then><else>: <expr><name><name>node</name><operator>.</operator><name>quadSideLength</name></name></expr></else></ternary></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>point3</name><operator>.</operator><name>z</name></name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x4</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><name><name>node</name><operator>.</operator><name>quadSideLength</name></name></expr> </then><else>: <expr><name><name>node</name><operator>.</operator><name>quadSideLength</name></name></expr></else></ternary></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>node</name><operator>.</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>Node</name><argument_list>(<argument><expr><name>point3</name></expr></argument>, <argument><expr><name><name>node</name><operator>.</operator><name>halfSideLength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt> 
        <expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>.</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></while></block_content></block></if></if_stmt>  
    <decl_stmt><decl><type><name>Sample</name></type> <name>sample</name> <init>= <expr><operator>new</operator> <call><name>Sample</name><argument_list>(<argument><expr><name>paramPoint3</name></expr></argument>, <argument><expr><name>paramVector3</name></expr></argument>, <argument><expr><name>paramFloat</name></expr></argument>, <argument><expr><name>paramColor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>sample</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name><name>node</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>node</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name>sample</name></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>private</specifier> <name>Color</name></type> <name>getIrradiance</name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>paramPoint3</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>paramVector3</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>tolerance</name></name> <operator>&lt;=</operator> <literal type="number">0.0F</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt> 
    <decl_stmt><decl><type><name>Sample</name></type> <name>sample</name> <init>= <expr><operator>new</operator> <call><name>Sample</name><argument_list>(<argument><expr><name>paramPoint3</name></expr></argument>, <argument><expr><name>paramVector3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>f</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>root</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>sample</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>sample</name><operator>.</operator><name>irr</name></name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>sample</name><operator>.</operator><name>irr</name><operator>.</operator><name>mul</name></name><argument_list>(<argument><expr><literal type="number">1.0F</literal> <operator>/</operator> <name>f</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
  </block_content>}</block></function>
  
  <class><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>Sample</name> <block>{
    <decl_stmt><decl><type><name>float</name></type> <name>pix</name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>float</name></type> <name>piy</name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>float</name></type> <name>piz</name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>float</name></type> <name>nix</name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>float</name></type> <name>niy</name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>float</name></type> <name>niz</name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>float</name></type> <name>invR0</name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>Color</name></type> <name>irr</name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>Sample</name></type> <name>next</name></decl>;</decl_stmt>
    
    <constructor><name>Sample</name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>param1Point3</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>param1Vector3</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>pix</name></name> <operator>=</operator> <name><name>param1Point3</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>piy</name></name> <operator>=</operator> <name><name>param1Point3</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>piz</name></name> <operator>=</operator> <name><name>param1Point3</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>Vector3</name></type> <name>vector3</name> <init>= <expr><operator>(</operator><operator>new</operator> <call><name>Vector3</name><argument_list>(<argument><expr><name>param1Vector3</name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>normalize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>nix</name></name> <operator>=</operator> <name><name>vector3</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>niy</name></name> <operator>=</operator> <name><name>vector3</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>niz</name></name> <operator>=</operator> <name><name>vector3</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>irr</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>next</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></constructor>
    
    <constructor><name>Sample</name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>param1Point3</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>param1Vector3</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>param1Float</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>param1Color</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>pix</name></name> <operator>=</operator> <name><name>param1Point3</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>piy</name></name> <operator>=</operator> <name><name>param1Point3</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>piz</name></name> <operator>=</operator> <name><name>param1Point3</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>Vector3</name></type> <name>vector3</name> <init>= <expr><operator>(</operator><operator>new</operator> <call><name>Vector3</name><argument_list>(<argument><expr><name>param1Vector3</name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>normalize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>nix</name></name> <operator>=</operator> <name><name>vector3</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>niy</name></name> <operator>=</operator> <name><name>vector3</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>niz</name></name> <operator>=</operator> <name><name>vector3</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>invR0</name></name> <operator>=</operator> <literal type="number">1.0F</literal> <operator>/</operator> <name>param1Float</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>irr</name></name> <operator>=</operator> <name>param1Color</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>next</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></constructor>
  }</block></class>
  
  <class><specifier>private</specifier> <specifier>final</specifier> class <name>Node</name> <block>{
    <decl_stmt><decl><type><name><name>Node</name><index>[]</index></name></type> <name>children</name> <init>= <expr><operator>new</operator> <name><name>Node</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name><name>IrradianceCacheGIEngine</name><operator>.</operator><name>Sample</name></name></type> <name>first</name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>Point3</name></type> <name>center</name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>float</name></type> <name>sideLength</name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>float</name></type> <name>halfSideLength</name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>float</name></type> <name>quadSideLength</name></decl>;</decl_stmt>
    
    <constructor><name>Node</name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>param1Point3</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>param1Float</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>byte</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>children</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt></block_content></block></for> 
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>center</name></name> <operator>=</operator> <operator>new</operator> <call><name>Point3</name><argument_list>(<argument><expr><name>param1Point3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sideLength</name></name> <operator>=</operator> <name>param1Float</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>halfSideLength</name></name> <operator>=</operator> <literal type="number">0.5F</literal> <operator>*</operator> <name>param1Float</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>quadSideLength</name></name> <operator>=</operator> <literal type="number">0.5F</literal> <operator>*</operator> <name><name>this</name><operator>.</operator><name>halfSideLength</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>first</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></constructor>
    
    <function><type><specifier>final</specifier> <name>boolean</name></type> <name>isInside</name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>param1Point3</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><operator>(</operator><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name><name>param1Point3</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>this</name><operator>.</operator><name>center</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>this</name><operator>.</operator><name>halfSideLength</name></name> <operator>&amp;&amp;</operator> <call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name><name>param1Point3</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>this</name><operator>.</operator><name>center</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>this</name><operator>.</operator><name>halfSideLength</name></name> <operator>&amp;&amp;</operator> <call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name><name>param1Point3</name><operator>.</operator><name>z</name></name> <operator>-</operator> <name><name>this</name><operator>.</operator><name>center</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>this</name><operator>.</operator><name>halfSideLength</name></name><operator>)</operator></expr>;</return>
    </block_content>}</block></function>
    
    <function><type><specifier>final</specifier> <name>float</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name><name>IrradianceCacheGIEngine</name><operator>.</operator><name>Sample</name></name></type> <name>param1Sample</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>float</name></type> <name>f</name> <init>= <expr><literal type="number">0.0F</literal></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name><name>IrradianceCacheGIEngine</name><operator>.</operator><name>Sample</name></name></type> <name>sample</name> <init>= <expr><name><name>this</name><operator>.</operator><name>first</name></name></expr></init></decl>;</init> <condition><expr><name>sample</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</condition> <incr><expr><name>sample</name> <operator>=</operator> <name><name>sample</name><operator>.</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>float</name></type> <name>f1</name> <init>= <expr><literal type="number">1.0F</literal> <operator>-</operator> <name><name>param1Sample</name><operator>.</operator><name>nix</name></name> <operator>*</operator> <name><name>sample</name><operator>.</operator><name>nix</name></name> <operator>+</operator> <name><name>param1Sample</name><operator>.</operator><name>niy</name></name> <operator>*</operator> <name><name>sample</name><operator>.</operator><name>niy</name></name> <operator>+</operator> <name><name>param1Sample</name><operator>.</operator><name>niz</name></name> <operator>*</operator> <name><name>sample</name><operator>.</operator><name>niz</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>f2</name> <init>= <expr><operator>(</operator><name><name>param1Sample</name><operator>.</operator><name>pix</name></name> <operator>-</operator> <name><name>sample</name><operator>.</operator><name>pix</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>param1Sample</name><operator>.</operator><name>pix</name></name> <operator>-</operator> <name><name>sample</name><operator>.</operator><name>pix</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>param1Sample</name><operator>.</operator><name>piy</name></name> <operator>-</operator> <name><name>sample</name><operator>.</operator><name>piy</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>param1Sample</name><operator>.</operator><name>piy</name></name> <operator>-</operator> <name><name>sample</name><operator>.</operator><name>piy</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>param1Sample</name><operator>.</operator><name>piz</name></name> <operator>-</operator> <name><name>sample</name><operator>.</operator><name>piz</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>param1Sample</name><operator>.</operator><name>piz</name></name> <operator>-</operator> <name><name>sample</name><operator>.</operator><name>piz</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>f1</name> <operator>&lt;=</operator> <name><name>IrradianceCacheGIEngine</name><operator>.</operator><name>this</name><operator>.</operator><name>tolerance</name></name> <operator>*</operator> <name><name>IrradianceCacheGIEngine</name><operator>.</operator><name>this</name><operator>.</operator><name>tolerance</name></name> <operator>&amp;&amp;</operator> <name>f2</name> <operator>&lt;=</operator> <name><name>IrradianceCacheGIEngine</name><operator>.</operator><name>this</name><operator>.</operator><name>maxSpacing</name></name> <operator>*</operator> <name><name>IrradianceCacheGIEngine</name><operator>.</operator><name>this</name><operator>.</operator><name>maxSpacing</name></name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>float</name></type> <name>f3</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><call><name><name>Math</name><operator>.</operator><name>sqrt</name></name><argument_list>(<argument><expr><name>f2</name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>sample</name><operator>.</operator><name>invR0</name></name> <operator>+</operator> <call><name><name>Math</name><operator>.</operator><name>sqrt</name></name><argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>f1</name></expr></argument>, <argument><expr><literal type="number">0.0F</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>f3</name> <operator>&lt;</operator> <name><name>IrradianceCacheGIEngine</name><operator>.</operator><name>this</name><operator>.</operator><name>tolerance</name></name> <operator>||</operator> <name>f2</name> <operator>&lt;</operator> <name><name>IrradianceCacheGIEngine</name><operator>.</operator><name>this</name><operator>.</operator><name>minSpacing</name></name> <operator>*</operator> <name><name>IrradianceCacheGIEngine</name><operator>.</operator><name>this</name><operator>.</operator><name>minSpacing</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>float</name></type> <name>f4</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><literal type="number">1.0E10F</literal></expr></argument>, <argument><expr><literal type="number">1.0F</literal> <operator>/</operator> <name>f3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>param1Sample</name><operator>.</operator><name>irr</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name><name>param1Sample</name><operator>.</operator><name>irr</name><operator>.</operator><name>madd</name></name><argument_list>(<argument><expr><name>f4</name></expr></argument>, <argument><expr><name><name>sample</name><operator>.</operator><name>irr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
              <expr_stmt><expr><name><name>param1Sample</name><operator>.</operator><name>irr</name></name> <operator>=</operator> <call><name><name>sample</name><operator>.</operator><name>irr</name><operator>.</operator><name>copy</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>mul</name><argument_list>(<argument><expr><name>f4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt> 
            <expr_stmt><expr><name>f</name> <operator>+=</operator> <name>f4</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt> 
        </block_content>}</block></if></if_stmt> 
      </block_content>}</block></for> 
      <for>for <control>(<init><decl><type><name>byte</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>children</name><index>[<expr><name>b</name></expr>]</index></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><operator>(</operator><name><name>this</name><operator>.</operator><name>children</name><index>[<expr><name>b</name></expr>]</index></name><operator>)</operator><operator>.</operator><name><name>center</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>param1Sample</name><operator>.</operator><name>pix</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name><name>this</name><operator>.</operator><name>halfSideLength</name></name> <operator>&amp;&amp;</operator> <call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><operator>(</operator><name><name>this</name><operator>.</operator><name>children</name><index>[<expr><name>b</name></expr>]</index></name><operator>)</operator><operator>.</operator><name><name>center</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>param1Sample</name><operator>.</operator><name>piy</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name><name>this</name><operator>.</operator><name>halfSideLength</name></name> <operator>&amp;&amp;</operator> <call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><operator>(</operator><name><name>this</name><operator>.</operator><name>children</name><index>[<expr><name>b</name></expr>]</index></name><operator>)</operator><operator>.</operator><name><name>center</name><operator>.</operator><name>z</name></name> <operator>-</operator> <name><name>param1Sample</name><operator>.</operator><name>piz</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name><name>this</name><operator>.</operator><name>halfSideLength</name></name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><name>f</name> <operator>+=</operator> <name><name>this</name><operator>.</operator><name>children</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><name>param1Sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
      </block_content>}</block></for> 
      <return>return <expr><name>f</name></expr>;</return>
    </block_content>}</block></function>
  }</block></class>
}</block></class>


<comment type="block">/* Location:              /Users/wang/Downloads/sunflow2 copy.jar!/org/sunflow/core/gi/IrradianceCacheGIEngine.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.3
 */</comment></unit>
