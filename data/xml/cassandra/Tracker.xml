<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/db/lifecycle/Tracker.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>lifecycle</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>CopyOnWriteArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicReference</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Function</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Predicate</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Predicates</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>*</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>ColumnFamilyStore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>Directories</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>Memtable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>commitlog</name><operator>.</operator><name>CommitLogPosition</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>compaction</name><operator>.</operator><name>OperationType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>format</name><operator>.</operator><name>SSTableReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>metadata</name><operator>.</operator><name>StatsMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>FileUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>metrics</name><operator>.</operator><name>StorageMetrics</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>notifications</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>Pair</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>Throwables</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>OpOrder</name></name>;</import>

<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Predicates</name><operator>.</operator><name>and</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableSet</name><operator>.</operator><name>copyOf</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name><operator>.</operator><name>filter</name></name>;</import>
<import>import static <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name><operator>.</operator><name>singleton</name></name>;</import>
<import>import static <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name><operator>.</operator><name>singletonList</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>Helpers</name><operator>.</operator><name>*</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>View</name><operator>.</operator><name>permitCompacting</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>View</name><operator>.</operator><name>updateCompacting</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>View</name><operator>.</operator><name>updateLiveSet</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>Throwables</name><operator>.</operator><name>maybeFail</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>Throwables</name><operator>.</operator><name>merge</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Refs</name><operator>.</operator><name>release</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Refs</name><operator>.</operator><name>selfRefs</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Tracker tracks live {@link View} of data store for a table.
 */</comment>
<class><specifier>public</specifier> class <name>Tracker</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>Tracker</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>INotificationConsumer</name></argument>&gt;</argument_list></name></type> <name>subscribers</name> <init>= <expr><operator>new</operator> <call><name><name>CopyOnWriteArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>ColumnFamilyStore</name></type> <name>cfstore</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>AtomicReference</name><argument_list type="generic">&lt;<argument><name>View</name></argument>&gt;</argument_list></name></type> <name>view</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>loadsstables</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * @param memtable Initial Memtable. Can be null.
     * @param loadsstables true to indicate to load SSTables (TODO: remove as this is only accessed from 2i)
     */</comment>
    <constructor><specifier>public</specifier> <name>Tracker</name><parameter_list>(<parameter><decl><type><name>Memtable</name></type> <name>memtable</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>loadsstables</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cfstore</name></name> <operator>=</operator> <ternary><condition><expr><name>memtable</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>memtable</name><operator>.</operator><name>cfs</name></name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>view</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>AtomicReference</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>loadsstables</name></name> <operator>=</operator> <name>loadsstables</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><name>memtable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>LifecycleTransaction</name></type> <name>tryModify</name><parameter_list>(<parameter><decl><type><name>SSTableReader</name></type> <name>sstable</name></decl></parameter>, <parameter><decl><type><name>OperationType</name></type> <name>operationType</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>tryModify</name><argument_list>(<argument><expr><call><name>singleton</name><argument_list>(<argument><expr><name>sstable</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>operationType</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return a Transaction over the provided sstables if we are able to mark the given @param sstables as compacted, before anyone else
     */</comment>
    <function><type><specifier>public</specifier> <name>LifecycleTransaction</name></type> <name>tryModify</name><parameter_list>(<parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>sstables</name></decl></parameter>, <parameter><decl><type><name>OperationType</name></type> <name>operationType</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>Iterables</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>sstables</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>new</operator> <call><name>LifecycleTransaction</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>operationType</name></expr></argument>, <argument><expr><name>sstables</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <call><name>apply</name><argument_list>(<argument><expr><call><name>permitCompacting</name><argument_list>(<argument><expr><name>sstables</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>updateCompacting</name><argument_list>(<argument><expr><call><name>emptySet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>sstables</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><operator>new</operator> <call><name>LifecycleTransaction</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>operationType</name></expr></argument>, <argument><expr><name>sstables</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>


    <comment type="line">// METHODS FOR ATOMICALLY MODIFYING THE VIEW</comment>

    <function><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>View</name></argument>, <argument><name>View</name></argument>&gt;</argument_list></name></type> <name>apply</name><parameter_list>(<parameter><decl><type><name><name>Function</name><argument_list type="generic">&lt;<argument><name>View</name></argument>, <argument><name>View</name></argument>&gt;</argument_list></name></type> <name>function</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>apply</name><argument_list>(<argument><expr><call><name><name>Predicates</name><operator>.</operator><name>alwaysTrue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>function</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>Throwable</name></type> <name>apply</name><parameter_list>(<parameter><decl><type><name><name>Function</name><argument_list type="generic">&lt;<argument><name>View</name></argument>, <argument><name>View</name></argument>&gt;</argument_list></name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name>Throwable</name></type> <name>accumulate</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><call><name>apply</name><argument_list>(<argument><expr><name>function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name>accumulate</name> <operator>=</operator> <call><name>merge</name><argument_list>(<argument><expr><name>accumulate</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
        <return>return <expr><name>accumulate</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * atomically tests permit against the view and applies function to it, if permit yields true, returning the original;
     * otherwise the method aborts, returning null
     */</comment>
    <function><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>View</name></argument>, <argument><name>View</name></argument>&gt;</argument_list></name></type> <name>apply</name><parameter_list>(<parameter><decl><type><name><name>Predicate</name><argument_list type="generic">&lt;<argument><name>View</name></argument>&gt;</argument_list></name></type> <name>permit</name></decl></parameter>, <parameter><decl><type><name><name>Function</name><argument_list type="generic">&lt;<argument><name>View</name></argument>, <argument><name>View</name></argument>&gt;</argument_list></name></type> <name>function</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>View</name></type> <name>cur</name> <init>= <expr><call><name><name>view</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>permit</name><operator>.</operator><name>apply</name></name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name>View</name></type> <name>updated</name> <init>= <expr><call><name><name>function</name><operator>.</operator><name>apply</name></name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>view</name><operator>.</operator><name>compareAndSet</name></name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>updated</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>updated</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></while>
    </block_content>}</block></function>

    <function><type><name>Throwable</name></type> <name>updateSizeTracking</name><parameter_list>(<parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>oldSSTables</name></decl></parameter>, <parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>newSSTables</name></decl></parameter>, <parameter><decl><type><name>Throwable</name></type> <name>accumulate</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isDummy</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>accumulate</name></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>long</name></type> <name>add</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>sstable</name> <range>: <expr><name>newSSTables</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"adding {} to list of files tracked for {}.{}"</literal></expr></argument>, <argument><expr><name><name>sstable</name><operator>.</operator><name>descriptor</name></name></expr></argument>, <argument><expr><call><name><name>cfstore</name><operator>.</operator><name>keyspace</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>cfstore</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <try>try
            <block>{<block_content>
                <expr_stmt><expr><name>add</name> <operator>+=</operator> <call><name><name>sstable</name><operator>.</operator><name>bytesOnDisk</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><name>accumulate</name> <operator>=</operator> <call><name>merge</name><argument_list>(<argument><expr><name>accumulate</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></for>
        <decl_stmt><decl><type><name>long</name></type> <name>subtract</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>sstable</name> <range>: <expr><name>oldSSTables</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isTraceEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"removing {} from list of files tracked for {}.{}"</literal></expr></argument>, <argument><expr><name><name>sstable</name><operator>.</operator><name>descriptor</name></name></expr></argument>, <argument><expr><call><name><name>cfstore</name><operator>.</operator><name>keyspace</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>cfstore</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <try>try
            <block>{<block_content>
                <expr_stmt><expr><name>subtract</name> <operator>+=</operator> <call><name><name>sstable</name><operator>.</operator><name>bytesOnDisk</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><name>accumulate</name> <operator>=</operator> <call><name>merge</name><argument_list>(<argument><expr><name>accumulate</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name><name>StorageMetrics</name><operator>.</operator><name>load</name><operator>.</operator><name>inc</name></name><argument_list>(<argument><expr><name>add</name> <operator>-</operator> <name>subtract</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cfstore</name><operator>.</operator><name>metric</name><operator>.</operator><name>liveDiskSpaceUsed</name><operator>.</operator><name>inc</name></name><argument_list>(<argument><expr><name>add</name> <operator>-</operator> <name>subtract</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// we don't subtract from total until the sstable is deleted, see TransactionLogs.SSTableTidier</comment>
        <expr_stmt><expr><call><name><name>cfstore</name><operator>.</operator><name>metric</name><operator>.</operator><name>totalDiskSpaceUsed</name><operator>.</operator><name>inc</name></name><argument_list>(<argument><expr><name>add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>accumulate</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// SETUP / CLEANUP</comment>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addInitialSSTables</name><parameter_list>(<parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>sstables</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>addSSTablesInternal</name><argument_list>(<argument><expr><name>sstables</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addInitialSSTablesWithoutUpdatingSize</name><parameter_list>(<parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>sstables</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>addSSTablesInternal</name><argument_list>(<argument><expr><name>sstables</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>updateInitialSSTableSize</name><parameter_list>(<parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>sstables</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>maybeFail</name><argument_list>(<argument><expr><call><name>updateSizeTracking</name><argument_list>(<argument><expr><call><name>emptySet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>sstables</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addSSTables</name><parameter_list>(<parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>sstables</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>addSSTablesInternal</name><argument_list>(<argument><expr><name>sstables</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>addSSTablesInternal</name><parameter_list>(<parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>sstables</name></decl></parameter>,
                                     <parameter><decl><type><name>boolean</name></type> <name>isInitialSSTables</name></decl></parameter>,
                                     <parameter><decl><type><name>boolean</name></type> <name>maybeIncrementallyBackup</name></decl></parameter>,
                                     <parameter><decl><type><name>boolean</name></type> <name>updateSize</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isDummy</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>setupOnline</name><argument_list>(<argument><expr><name>sstables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>apply</name><argument_list>(<argument><expr><call><name>updateLiveSet</name><argument_list>(<argument><expr><call><name>emptySet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>sstables</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>updateSize</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>maybeFail</name><argument_list>(<argument><expr><call><name>updateSizeTracking</name><argument_list>(<argument><expr><call><name>emptySet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>sstables</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>maybeIncrementallyBackup</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>maybeIncrementallyBackup</name><argument_list>(<argument><expr><name>sstables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>notifyAdded</name><argument_list>(<argument><expr><name>sstables</name></expr></argument>, <argument><expr><name>isInitialSSTables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** (Re)initializes the tracker, purging all references. */</comment>
    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>reset</name><parameter_list>(<parameter><decl><type><name>Memtable</name></type> <name>memtable</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>View</name><argument_list>(<argument><expr><ternary><condition><expr><name>memtable</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name>singletonList</name><argument_list>(<argument><expr><name>memtable</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>,
                          <argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr></argument>,
                          <argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr></argument>,
                          <argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr></argument>,
                          <argument><expr><call><name><name>SSTableIntervalTree</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Throwable</name></type> <name>dropSSTablesIfInvalid</name><parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>accumulate</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isDummy</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>cfstore</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>accumulate</name> <operator>=</operator> <call><name>dropSSTables</name><argument_list>(<argument><expr><name>accumulate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><name>accumulate</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>dropSSTables</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>maybeFail</name><argument_list>(<argument><expr><call><name>dropSSTables</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Throwable</name></type> <name>dropSSTables</name><parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>accumulate</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>dropSSTables</name><argument_list>(<argument><expr><call><name><name>Predicates</name><operator>.</operator><name>alwaysTrue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>OperationType</name><operator>.</operator><name>UNKNOWN</name></name></expr></argument>, <argument><expr><name>accumulate</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * removes all sstables that are not busy compacting.
     */</comment>
    <function><type><specifier>public</specifier> <name>Throwable</name></type> <name>dropSSTables</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>Predicate</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>remove</name></decl></parameter>, <parameter><decl><type><name>OperationType</name></type> <name>operationType</name></decl></parameter>, <parameter><decl><type><name>Throwable</name></type> <name>accumulate</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <try>try <init>(<decl><type><name>LogTransaction</name></type> <name>txnLogs</name> <init>= <expr><operator>new</operator> <call><name>LogTransaction</name><argument_list>(<argument><expr><name>operationType</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>)</init>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>View</name></argument>, <argument><name>View</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><call><name>apply</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>view</name></decl></parameter></parameter_list> -&gt; <block>{<block_content>
                <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>toremove</name> <init>= <expr><call><name>copyOf</name><argument_list>(<argument><expr><call><name>filter</name><argument_list>(<argument><expr><name><name>view</name><operator>.</operator><name>sstables</name></name></expr></argument>, <argument><expr><call><name>and</name><argument_list>(<argument><expr><name>remove</name></expr></argument>, <argument><expr><call><name>notIn</name><argument_list>(<argument><expr><name><name>view</name><operator>.</operator><name>compacting</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return>return <expr><call><name>updateLiveSet</name><argument_list>(<argument><expr><name>toremove</name></expr></argument>, <argument><expr><call><name>emptySet</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>apply</name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>removed</name> <init>= <expr><call><name><name>Sets</name><operator>.</operator><name>difference</name></name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>left</name><operator>.</operator><name>sstables</name></name></expr></argument>, <argument><expr><name><name>result</name><operator>.</operator><name>right</name><operator>.</operator><name>sstables</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <assert>assert <expr><call><name><name>Iterables</name><operator>.</operator><name>all</name></name><argument_list>(<argument><expr><name>removed</name></expr></argument>, <argument><expr><name>remove</name></expr></argument>)</argument_list></call></expr>;</assert>

            <comment type="line">// It is important that any method accepting/returning a Throwable never throws an exception, and does its best</comment>
            <comment type="line">// to complete the instructions given to it</comment>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>LogTransaction</name><operator>.</operator><name>Obsoletion</name></name></argument>&gt;</argument_list></name></type> <name>obsoletions</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>accumulate</name> <operator>=</operator> <call><name>prepareForObsoletion</name><argument_list>(<argument><expr><name>removed</name></expr></argument>, <argument><expr><name>txnLogs</name></expr></argument>, <argument><expr><name>obsoletions</name></expr></argument>, <argument><expr><name>accumulate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try>try
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>txnLogs</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>removed</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>accumulate</name> <operator>=</operator> <call><name>markObsolete</name><argument_list>(<argument><expr><name>obsoletions</name></expr></argument>, <argument><expr><name>accumulate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>accumulate</name> <operator>=</operator> <call><name>updateSizeTracking</name><argument_list>(<argument><expr><name>removed</name></expr></argument>, <argument><expr><call><name>emptySet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>accumulate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>accumulate</name> <operator>=</operator> <call><name>release</name><argument_list>(<argument><expr><call><name>selfRefs</name><argument_list>(<argument><expr><name>removed</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>accumulate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="line">// notifySSTablesChanged -&gt; LeveledManifest.promote doesn't like a no-op "promotion"</comment>
                    <expr_stmt><expr><name>accumulate</name> <operator>=</operator> <call><name>notifySSTablesChanged</name><argument_list>(<argument><expr><name>removed</name></expr></argument>, <argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptySet</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>txnLogs</name><operator>.</operator><name>type</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>accumulate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><name>accumulate</name> <operator>=</operator> <call><name>abortObsoletion</name><argument_list>(<argument><expr><name>obsoletions</name></expr></argument>, <argument><expr><name>accumulate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>accumulate</name> <operator>=</operator> <call><name><name>Throwables</name><operator>.</operator><name>merge</name></name><argument_list>(<argument><expr><name>accumulate</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name>accumulate</name> <operator>=</operator> <call><name><name>Throwables</name><operator>.</operator><name>merge</name></name><argument_list>(<argument><expr><name>accumulate</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>

        <return>return <expr><name>accumulate</name></expr>;</return>
    </block_content>}</block></function>


    <comment type="block" format="javadoc">/**
     * Removes every SSTable in the directory from the Tracker's view.
     * @param directory the unreadable directory, possibly with SSTables in it, but not necessarily.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeUnreadableSSTables</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>File</name></type> <name>directory</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>maybeFail</name><argument_list>(<argument><expr><call><name>dropSSTables</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>reader</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>reader</name><operator>.</operator><name>descriptor</name><operator>.</operator><name>directory</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>directory</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>, <argument><expr><name><name>OperationType</name><operator>.</operator><name>UNKNOWN</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>



    <comment type="line">// FLUSHING</comment>

    <comment type="block" format="javadoc">/**
     * get the Memtable that the ordered writeOp should be directed to
     */</comment>
    <function><type><specifier>public</specifier> <name>Memtable</name></type> <name>getMemtableFor</name><parameter_list>(<parameter><decl><type><name><name>OpOrder</name><operator>.</operator><name>Group</name></name></type> <name>opGroup</name></decl></parameter>, <parameter><decl><type><name>CommitLogPosition</name></type> <name>commitLogPosition</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// since any new memtables appended to the list after we fetch it will be for operations started</comment>
        <comment type="line">// after us, we can safely assume that we will always find the memtable that 'accepts' us;</comment>
        <comment type="line">// if the barrier for any memtable is set whilst we are reading the list, it must accept us.</comment>

        <comment type="line">// there may be multiple memtables in the list that would 'accept' us, however we only ever choose</comment>
        <comment type="line">// the oldest such memtable, as accepts() only prevents us falling behind (i.e. ensures we don't</comment>
        <comment type="line">// assign operations to a memtable that was retired/queued before we started)</comment>
        <for>for <control>(<init><decl><type><name>Memtable</name></type> <name>memtable</name> <range>: <expr><call><name><name>view</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><name>liveMemtables</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>memtable</name><operator>.</operator><name>accepts</name></name><argument_list>(<argument><expr><name>opGroup</name></expr></argument>, <argument><expr><name>commitLogPosition</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>memtable</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><call><name><name>view</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>liveMemtables</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Switch the current memtable. This atomically appends a new memtable to the end of the list of active memtables,
     * returning the previously last memtable. It leaves the previous Memtable in the list of live memtables until
     * discarding(memtable) is called. These two methods must be synchronized/paired, i.e. m = switchMemtable
     * must be followed by discarding(m), they cannot be interleaved.
     *
     * @return the previously active memtable
     */</comment>
    <function><type><specifier>public</specifier> <name>Memtable</name></type> <name>switchMemtable</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>truncating</name></decl></parameter>, <parameter><decl><type><name>Memtable</name></type> <name>newMemtable</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>View</name></argument>, <argument><name>View</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><call><name>apply</name><argument_list>(<argument><expr><call><name><name>View</name><operator>.</operator><name>switchMemtable</name></name><argument_list>(<argument><expr><name>newMemtable</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>truncating</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>notifyRenewed</name><argument_list>(<argument><expr><name>newMemtable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>notifySwitched</name><argument_list>(<argument><expr><call><name><name>result</name><operator>.</operator><name>left</name><operator>.</operator><name>getCurrentMemtable</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <return>return <expr><call><name><name>result</name><operator>.</operator><name>left</name><operator>.</operator><name>getCurrentMemtable</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>markFlushing</name><parameter_list>(<parameter><decl><type><name>Memtable</name></type> <name>memtable</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>apply</name><argument_list>(<argument><expr><call><name><name>View</name><operator>.</operator><name>markFlushing</name></name><argument_list>(<argument><expr><name>memtable</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>replaceFlushed</name><parameter_list>(<parameter><decl><type><name>Memtable</name></type> <name>memtable</name></decl></parameter>, <parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>sstables</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><operator>!</operator><call><name>isDummy</name><argument_list>()</argument_list></call></expr>;</assert>
        <if_stmt><if>if <condition>(<expr><call><name><name>Iterables</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>sstables</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// sstable may be null if we flushed batchlog and nothing needed to be retained</comment>
            <comment type="line">// if it's null, we don't care what state the cfstore is in, we just replace it and continue</comment>
            <expr_stmt><expr><call><name>apply</name><argument_list>(<argument><expr><call><name><name>View</name><operator>.</operator><name>replaceFlushed</name></name><argument_list>(<argument><expr><name>memtable</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>sstables</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><name>SSTableReader</name><operator>::</operator><name>setupOnline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// back up before creating a new Snapshot (which makes the new one eligible for compaction)</comment>
        <expr_stmt><expr><call><name>maybeIncrementallyBackup</name><argument_list>(<argument><expr><name>sstables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>apply</name><argument_list>(<argument><expr><call><name><name>View</name><operator>.</operator><name>replaceFlushed</name></name><argument_list>(<argument><expr><name>memtable</name></expr></argument>, <argument><expr><name>sstables</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Throwable</name></type> <name>fail</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>fail</name> <operator>=</operator> <call><name>updateSizeTracking</name><argument_list>(<argument><expr><call><name>emptySet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>sstables</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>notifyDiscarded</name><argument_list>(<argument><expr><name>memtable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// TODO: if we're invalidated, should we notifyadded AND removed, or just skip both?</comment>
        <expr_stmt><expr><name>fail</name> <operator>=</operator> <call><name>notifyAdded</name><argument_list>(<argument><expr><name>sstables</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>memtable</name></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isDummy</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>cfstore</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>dropSSTables</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>maybeFail</name><argument_list>(<argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>



    <comment type="line">// MISCELLANEOUS public utility calls</comment>

    <function><type><specifier>public</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>getCompacting</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>view</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><name>compacting</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>getUncompacting</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>view</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>select</name><argument_list>(<argument><expr><name><name>SSTableSet</name><operator>.</operator><name>NONCOMPACTING</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>getUncompacting</name><parameter_list>(<parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>candidates</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>view</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getUncompacting</name><argument_list>(<argument><expr><name>candidates</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>maybeIncrementallyBackup</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>sstables</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>isIncrementalBackupsEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>sstable</name> <range>: <expr><name>sstables</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>File</name></type> <name>backupsDir</name> <init>= <expr><call><name><name>Directories</name><operator>.</operator><name>getBackupsDirectory</name></name><argument_list>(<argument><expr><name><name>sstable</name><operator>.</operator><name>descriptor</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>sstable</name><operator>.</operator><name>createLinks</name></name><argument_list>(<argument><expr><call><name><name>FileUtils</name><operator>.</operator><name>getCanonicalPath</name></name><argument_list>(<argument><expr><name>backupsDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <comment type="line">// NOTIFICATION</comment>

    <function><type><name>Throwable</name></type> <name>notifySSTablesChanged</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>removed</name></decl></parameter>, <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>added</name></decl></parameter>, <parameter><decl><type><name>OperationType</name></type> <name>compactionType</name></decl></parameter>, <parameter><decl><type><name>Throwable</name></type> <name>accumulate</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>INotification</name></type> <name>notification</name> <init>= <expr><operator>new</operator> <call><name>SSTableListChangedNotification</name><argument_list>(<argument><expr><name>added</name></expr></argument>, <argument><expr><name>removed</name></expr></argument>, <argument><expr><name>compactionType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>INotificationConsumer</name></type> <name>subscriber</name> <range>: <expr><name>subscribers</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <try>try
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>subscriber</name><operator>.</operator><name>handleNotification</name></name><argument_list>(<argument><expr><name>notification</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><name>accumulate</name> <operator>=</operator> <call><name>merge</name><argument_list>(<argument><expr><name>accumulate</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></for>
        <return>return <expr><name>accumulate</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>Throwable</name></type> <name>notifyAdded</name><parameter_list>(<parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>added</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isInitialSSTables</name></decl></parameter>, <parameter><decl><type><name>Memtable</name></type> <name>memtable</name></decl></parameter>, <parameter><decl><type><name>Throwable</name></type> <name>accumulate</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>INotification</name></type> <name>notification</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isInitialSSTables</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>notification</name> <operator>=</operator> <operator>new</operator> <call><name>SSTableAddedNotification</name><argument_list>(<argument><expr><name>added</name></expr></argument>, <argument><expr><name>memtable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>notification</name> <operator>=</operator> <operator>new</operator> <call><name>InitialSSTableAddedNotification</name><argument_list>(<argument><expr><name>added</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <for>for <control>(<init><decl><type><name>INotificationConsumer</name></type> <name>subscriber</name> <range>: <expr><name>subscribers</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <try>try
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>subscriber</name><operator>.</operator><name>handleNotification</name></name><argument_list>(<argument><expr><name>notification</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><name>accumulate</name> <operator>=</operator> <call><name>merge</name><argument_list>(<argument><expr><name>accumulate</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></for>
        <return>return <expr><name>accumulate</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>notifyAdded</name><parameter_list>(<parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>added</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isInitialSSTables</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>maybeFail</name><argument_list>(<argument><expr><call><name>notifyAdded</name><argument_list>(<argument><expr><name>added</name></expr></argument>, <argument><expr><name>isInitialSSTables</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>notifySSTableRepairedStatusChanged</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>repairStatusesChanged</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>INotification</name></type> <name>notification</name> <init>= <expr><operator>new</operator> <call><name>SSTableRepairStatusChanged</name><argument_list>(<argument><expr><name>repairStatusesChanged</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>INotificationConsumer</name></type> <name>subscriber</name> <range>: <expr><name>subscribers</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>subscriber</name><operator>.</operator><name>handleNotification</name></name><argument_list>(<argument><expr><name>notification</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>notifySSTableMetadataChanged</name><parameter_list>(<parameter><decl><type><name>SSTableReader</name></type> <name>levelChanged</name></decl></parameter>, <parameter><decl><type><name>StatsMetadata</name></type> <name>oldMetadata</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>INotification</name></type> <name>notification</name> <init>= <expr><operator>new</operator> <call><name>SSTableMetadataChanged</name><argument_list>(<argument><expr><name>levelChanged</name></expr></argument>, <argument><expr><name>oldMetadata</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>INotificationConsumer</name></type> <name>subscriber</name> <range>: <expr><name>subscribers</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>subscriber</name><operator>.</operator><name>handleNotification</name></name><argument_list>(<argument><expr><name>notification</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>notifyDeleting</name><parameter_list>(<parameter><decl><type><name>SSTableReader</name></type> <name>deleting</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>INotification</name></type> <name>notification</name> <init>= <expr><operator>new</operator> <call><name>SSTableDeletingNotification</name><argument_list>(<argument><expr><name>deleting</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>INotificationConsumer</name></type> <name>subscriber</name> <range>: <expr><name>subscribers</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>subscriber</name><operator>.</operator><name>handleNotification</name></name><argument_list>(<argument><expr><name>notification</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>notifyTruncated</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>truncatedAt</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>INotification</name></type> <name>notification</name> <init>= <expr><operator>new</operator> <call><name>TruncationNotification</name><argument_list>(<argument><expr><name>truncatedAt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>INotificationConsumer</name></type> <name>subscriber</name> <range>: <expr><name>subscribers</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>subscriber</name><operator>.</operator><name>handleNotification</name></name><argument_list>(<argument><expr><name>notification</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>notifyRenewed</name><parameter_list>(<parameter><decl><type><name>Memtable</name></type> <name>renewed</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>notify</name><argument_list>(<argument><expr><operator>new</operator> <call><name>MemtableRenewedNotification</name><argument_list>(<argument><expr><name>renewed</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>notifySwitched</name><parameter_list>(<parameter><decl><type><name>Memtable</name></type> <name>previous</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>notify</name><argument_list>(<argument><expr><operator>new</operator> <call><name>MemtableSwitchedNotification</name><argument_list>(<argument><expr><name>previous</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>notifyDiscarded</name><parameter_list>(<parameter><decl><type><name>Memtable</name></type> <name>discarded</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>notify</name><argument_list>(<argument><expr><operator>new</operator> <call><name>MemtableDiscardedNotification</name><argument_list>(<argument><expr><name>discarded</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>notify</name><parameter_list>(<parameter><decl><type><name>INotification</name></type> <name>notification</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>INotificationConsumer</name></type> <name>subscriber</name> <range>: <expr><name>subscribers</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>subscriber</name><operator>.</operator><name>handleNotification</name></name><argument_list>(<argument><expr><name>notification</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDummy</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>cfstore</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>isDaemonInitialized</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>subscribe</name><parameter_list>(<parameter><decl><type><name>INotificationConsumer</name></type> <name>consumer</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>subscribers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>consumer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>unsubscribe</name><parameter_list>(<parameter><decl><type><name>INotificationConsumer</name></type> <name>consumer</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>subscribers</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>consumer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>emptySet</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>emptySet</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>View</name></type> <name>getView</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>view</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>removeUnsafe</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>toRemove</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>View</name></argument>, <argument><name>View</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><call><name>apply</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>view</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>updateLiveSet</name><argument_list>(<argument><expr><name>toRemove</name></expr></argument>, <argument><expr><call><name>emptySet</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>apply</name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>
