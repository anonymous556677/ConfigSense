<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/auth/AuthConfig.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>auth</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>Config</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>ConfigurationException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>FBUtilities</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Only purpose is to Initialize authentication/authorization via {@link #applyAuth()}.
 * This is in this separate class as it implicitly initializes schema stuff (via classes referenced in here).
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>AuthConfig</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>AuthConfig</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>initialized</name></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>applyAuth</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <comment type="line">// some tests need this</comment>
        <if_stmt><if>if <condition>(<expr><name>initialized</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>initialized</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Config</name></type> <name>conf</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getRawConfig</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>IAuthenticator</name></type> <name>authenticator</name> <init>= <expr><operator>new</operator> <call><name>AllowAllAuthenticator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block">/* Authentication, authorization and role management backend, implementing IAuthenticator, IAuthorizer &amp; IRoleMapper*/</comment>
        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>authenticator</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>authenticator</name> <operator>=</operator> <call><name><name>FBUtilities</name><operator>.</operator><name>newAuthenticator</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>authenticator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// the configuration options regarding credentials caching are only guaranteed to</comment>
        <comment type="line">// work with PasswordAuthenticator, so log a message if some other authenticator</comment>
        <comment type="line">// is in use and non-default values are detected</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>authenticator</name> <operator>instanceof</operator> <name>PasswordAuthenticator</name><operator>)</operator>
            <operator>&amp;&amp;</operator> <operator>(</operator><name><name>conf</name><operator>.</operator><name>credentials_update_interval_in_ms</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal>
                <operator>||</operator> <name><name>conf</name><operator>.</operator><name>credentials_validity_in_ms</name></name> <operator>!=</operator> <literal type="number">2000</literal>
                <operator>||</operator> <name><name>conf</name><operator>.</operator><name>credentials_cache_max_entries</name></name> <operator>!=</operator> <literal type="number">1000</literal><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Configuration options credentials_update_interval_in_ms, credentials_validity_in_ms and "</literal> <operator>+</operator>
                        <literal type="string">"credentials_cache_max_entries may not be applicable for the configured authenticator ({})"</literal></expr></argument>,
                        <argument><expr><call><name><name>authenticator</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setAuthenticator</name></name><argument_list>(<argument><expr><name>authenticator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// authorizer</comment>

        <decl_stmt><decl><type><name>IAuthorizer</name></type> <name>authorizer</name> <init>= <expr><operator>new</operator> <call><name>AllowAllAuthorizer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>authorizer</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>authorizer</name> <operator>=</operator> <call><name><name>FBUtilities</name><operator>.</operator><name>newAuthorizer</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>authorizer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>authenticator</name><operator>.</operator><name>requireAuthentication</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>authorizer</name><operator>.</operator><name>requireAuthorization</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>authenticator</name></name> <operator>+</operator> <literal type="string">" can't be used with "</literal> <operator>+</operator> <name><name>conf</name><operator>.</operator><name>authorizer</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setAuthorizer</name></name><argument_list>(<argument><expr><name>authorizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// role manager</comment>

        <decl_stmt><decl><type><name>IRoleManager</name></type> <name>roleManager</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>role_manager</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>roleManager</name> <operator>=</operator> <call><name><name>FBUtilities</name><operator>.</operator><name>newRoleManager</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>role_manager</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>roleManager</name> <operator>=</operator> <operator>new</operator> <call><name>CassandraRoleManager</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>authenticator</name> <operator>instanceof</operator> <name>PasswordAuthenticator</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>roleManager</name> <operator>instanceof</operator> <name>CassandraRoleManager</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"CassandraRoleManager must be used with PasswordAuthenticator"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setRoleManager</name></name><argument_list>(<argument><expr><name>roleManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// authenticator</comment>

        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>internode_authenticator</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setInternodeAuthenticator</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>construct</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>internode_authenticator</name></name></expr></argument>, <argument><expr><literal type="string">"internode_authenticator"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// network authorizer</comment>
        <decl_stmt><decl><type><name>INetworkAuthorizer</name></type> <name>networkAuthorizer</name> <init>= <expr><call><name><name>FBUtilities</name><operator>.</operator><name>newNetworkAuthorizer</name></name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>network_authorizer</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setNetworkAuthorizer</name></name><argument_list>(<argument><expr><name>networkAuthorizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>networkAuthorizer</name><operator>.</operator><name>requireAuthorization</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>authenticator</name><operator>.</operator><name>requireAuthentication</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><name><name>conf</name><operator>.</operator><name>network_authorizer</name></name> <operator>+</operator> <literal type="string">" can't be used with "</literal> <operator>+</operator> <name><name>conf</name><operator>.</operator><name>authenticator</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Validate at last to have authenticator, authorizer, role-manager and internode-auth setup</comment>
        <comment type="line">// in case these rely on each other.</comment>

        <expr_stmt><expr><call><name><name>authenticator</name><operator>.</operator><name>validateConfiguration</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>authorizer</name><operator>.</operator><name>validateConfiguration</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>roleManager</name><operator>.</operator><name>validateConfiguration</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>networkAuthorizer</name><operator>.</operator><name>validateConfiguration</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getInternodeAuthenticator</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>validateConfiguration</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>
