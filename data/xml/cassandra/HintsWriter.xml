<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/hints/HintsWriter.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>hints</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>channels</name><operator>.</operator><name>FileChannel</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>charset</name><operator>.</operator><name>StandardCharsets</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>file</name><operator>.</operator><name>Files</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>file</name><operator>.</operator><name>StandardOpenOption</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>zip</name><operator>.</operator><name>CRC32</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>FSWriteError</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>DataOutputBuffer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>DataOutputBufferFixed</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>NativeLibrary</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>SyncUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>Throwables</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>FBUtilities</name><operator>.</operator><name>updateChecksum</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>FBUtilities</name><operator>.</operator><name>updateChecksumInt</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>Throwables</name><operator>.</operator><name>perform</name></name>;</import>

<class>class <name>HintsWriter</name> <super_list><implements>implements <super><name>AutoCloseable</name></super></implements></super_list>
<block>{
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>PAGE_SIZE</name> <init>= <expr><literal type="number">4096</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>File</name></type> <name>directory</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>HintsDescriptor</name></type> <name>descriptor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>File</name></type> <name>file</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>FileChannel</name></type> <name>channel</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>fd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>CRC32</name></type> <name>globalCRC</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>long</name></type> <name>lastSyncPosition</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>

    <constructor><specifier>protected</specifier> <name>HintsWriter</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>directory</name></decl></parameter>, <parameter><decl><type><name>HintsDescriptor</name></type> <name>descriptor</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>FileChannel</name></type> <name>channel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>CRC32</name></type> <name>globalCRC</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>directory</name></name> <operator>=</operator> <name>directory</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>descriptor</name></name> <operator>=</operator> <name>descriptor</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>file</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>channel</name></name> <operator>=</operator> <name>channel</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>globalCRC</name></name> <operator>=</operator> <name>globalCRC</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"resource"</literal></expr></argument>)</argument_list></annotation> <comment type="line">// HintsWriter owns channel</comment>
    <type><specifier>static</specifier> <name>HintsWriter</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>directory</name></decl></parameter>, <parameter><decl><type><name>HintsDescriptor</name></type> <name>descriptor</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>File</name></type> <name>file</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>directory</name></expr></argument>, <argument><expr><call><name><name>descriptor</name><operator>.</operator><name>fileName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>FileChannel</name></type> <name>channel</name> <init>= <expr><call><name><name>FileChannel</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><call><name><name>file</name><operator>.</operator><name>toPath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>StandardOpenOption</name><operator>.</operator><name>WRITE</name></name></expr></argument>, <argument><expr><name><name>StandardOpenOption</name><operator>.</operator><name>CREATE_NEW</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name><name>NativeLibrary</name><operator>.</operator><name>getfd</name></name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>CRC32</name></type> <name>crc</name> <init>= <expr><operator>new</operator> <call><name>CRC32</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <try>try <init>(<decl><type><name>DataOutputBuffer</name></type> <name>dob</name> <init>= <expr><call><name><name>DataOutputBuffer</name><operator>.</operator><name>scratchBuffer</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>)</init>
        <block>{<block_content>
            <comment type="line">// write the descriptor</comment>
            <expr_stmt><expr><call><name><name>descriptor</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><name>dob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>descriptorBytes</name> <init>= <expr><call><name><name>dob</name><operator>.</operator><name>buffer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>updateChecksum</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><name>descriptorBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>channel</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>descriptorBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>descriptor</name><operator>.</operator><name>isEncrypted</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><operator>new</operator> <call><name>EncryptedHintsWriter</name><argument_list>(<argument><expr><name>directory</name></expr></argument>, <argument><expr><name>descriptor</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>crc</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>descriptor</name><operator>.</operator><name>isCompressed</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><operator>new</operator> <call><name>CompressedHintsWriter</name><argument_list>(<argument><expr><name>directory</name></expr></argument>, <argument><expr><name>descriptor</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>crc</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
            <return>return <expr><operator>new</operator> <call><name>HintsWriter</name><argument_list>(<argument><expr><name>directory</name></expr></argument>, <argument><expr><name>descriptor</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>channel</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>crc</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>channel</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>e</name></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><name>HintsDescriptor</name></type> <name>descriptor</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>descriptor</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeChecksum</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>File</name></type> <name>checksumFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>directory</name></expr></argument>, <argument><expr><call><name><name>descriptor</name><operator>.</operator><name>checksumFileName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <init>(<decl><type><name>OutputStream</name></type> <name>out</name> <init>= <expr><call><name><name>Files</name><operator>.</operator><name>newOutputStream</name></name><argument_list>(<argument><expr><call><name><name>checksumFile</name><operator>.</operator><name>toPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>)</init>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>toHexString</name></name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>globalCRC</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getBytes</name><argument_list>(<argument><expr><name><name>StandardCharsets</name><operator>.</operator><name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>FSWriteError</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>checksumFile</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>perform</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name><name>Throwables</name><operator>.</operator><name>FileOpType</name><operator>.</operator><name>WRITE</name></name></expr></argument>, <argument><expr><name>this</name><operator>::</operator><name>doFsync</name></expr></argument>, <argument><expr><name>channel</name><operator>::</operator><name>close</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>writeChecksum</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>fsync</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>perform</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name><name>Throwables</name><operator>.</operator><name>FileOpType</name><operator>.</operator><name>WRITE</name></name></expr></argument>, <argument><expr><name>this</name><operator>::</operator><name>doFsync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>doFsync</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>SyncUtil</name><operator>.</operator><name>force</name></name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>lastSyncPosition</name> <operator>=</operator> <call><name><name>channel</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>Session</name></type> <name>newSession</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>buffer</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>Session</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name><name>channel</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>FSWriteError</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><name>File</name></type> <name>getFile</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>file</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Writes byte buffer into the file channel. Buffer should be flipped before calling this
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>writeBuffer</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>bb</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name>updateChecksum</name><argument_list>(<argument><expr><name>globalCRC</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>channel</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * The primary goal of the Session class is to be able to share the same buffers among potentially dozens or hundreds
     * of hints writers, and ensure that their contents are always written to the underlying channels in the end.
     */</comment>
    <class><specifier>final</specifier> class <name>Session</name> <super_list><implements>implements <super><name>AutoCloseable</name></super></implements></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ByteBuffer</name></type> <name>buffer</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>long</name></type> <name>initialSize</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>bytesWritten</name></decl>;</decl_stmt>

        <constructor><name>Session</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>initialSize</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>buffer</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>bytesWritten</name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>buffer</name></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>initialSize</name></name> <operator>=</operator> <name>initialSize</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>VisibleForTesting</name></annotation>
        <type><name>long</name></type> <name>getBytesWritten</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>bytesWritten</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><name>long</name></type> <name>position</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>initialSize</name> <operator>+</operator> <name>bytesWritten</name></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Appends the serialized hint (with CRC included) to this session's aggregation buffer,
         * writes to the underlying channel when the buffer is overflown.
         *
         * @param hint the serialized hint (with CRC included)
         * @throws IOException
         */</comment>
        <function><type><name>void</name></type> <name>append</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>hint</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <expr_stmt><expr><name>bytesWritten</name> <operator>+=</operator> <call><name><name>hint</name><operator>.</operator><name>remaining</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// if the hint to write won't fit in the aggregation buffer, flush it</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>hint</name><operator>.</operator><name>remaining</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <call><name><name>buffer</name><operator>.</operator><name>remaining</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>buffer</name><operator>.</operator><name>flip</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>writeBuffer</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>buffer</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// if the hint fits in the aggregation buffer, then update the aggregation buffer,</comment>
            <comment type="line">// otherwise write the hint buffer to the channel</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>hint</name><operator>.</operator><name>remaining</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <call><name><name>buffer</name><operator>.</operator><name>remaining</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>buffer</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>writeBuffer</name><argument_list>(<argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Serializes and appends the hint (with CRC included) to this session's aggregation buffer,
         * writes to the underlying channel when the buffer is overflown.
         *
         * Used mainly by tests and {@link LegacyHintsMigrator}
         *
         * @param hint the unserialized hint
         * @throws IOException
         */</comment>
        <function><type><name>void</name></type> <name>append</name><parameter_list>(<parameter><decl><type><name>Hint</name></type> <name>hint</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>hintSize</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>Hint</name><operator>.</operator><name>serializer</name><operator>.</operator><name>serializedSize</name></name><argument_list>(<argument><expr><name>hint</name></expr></argument>, <argument><expr><call><name><name>descriptor</name><operator>.</operator><name>messagingVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>totalSize</name> <init>= <expr><name>hintSize</name> <operator>+</operator> <name><name>HintsBuffer</name><operator>.</operator><name>ENTRY_OVERHEAD_SIZE</name></name></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>totalSize</name> <operator>&gt;</operator> <call><name><name>buffer</name><operator>.</operator><name>remaining</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>flushBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>hintBuffer</name> <init>= <expr><ternary><condition><expr><name>totalSize</name> <operator>&lt;=</operator> <call><name><name>buffer</name><operator>.</operator><name>remaining</name></name><argument_list>()</argument_list></call></expr>
                                  ?</condition><then> <expr><name>buffer</name></expr>
                                  </then><else>: <expr><call><name><name>ByteBuffer</name><operator>.</operator><name>allocate</name></name><argument_list>(<argument><expr><name>totalSize</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>CRC32</name></type> <name>crc</name> <init>= <expr><operator>new</operator> <call><name>CRC32</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <try>try <init>(<decl><type><name>DataOutputBufferFixed</name></type> <name>out</name> <init>= <expr><operator>new</operator> <call><name>DataOutputBufferFixed</name><argument_list>(<argument><expr><name>hintBuffer</name></expr></argument>)</argument_list></call></expr></init></decl>)</init>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name>hintSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>updateChecksumInt</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><name>hintSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>crc</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>Hint</name><operator>.</operator><name>serializer</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><name>hint</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><call><name><name>descriptor</name><operator>.</operator><name>messagingVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>updateChecksum</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><name>hintBuffer</name></expr></argument>, <argument><expr><call><name><name>hintBuffer</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>hintSize</name></expr></argument>, <argument><expr><name>hintSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>crc</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></try>

            <if_stmt><if>if <condition>(<expr><name>hintBuffer</name> <operator>==</operator> <name>buffer</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>bytesWritten</name> <operator>+=</operator> <name>totalSize</name></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>append</name><argument_list>(<argument><expr><operator>(</operator><name>ByteBuffer</name><operator>)</operator> <call><name><name>hintBuffer</name><operator>.</operator><name>flip</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Closes the session - flushes the aggregation buffer (if not empty), does page aligning, and potentially fsyncs.
         * @throws IOException
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <expr_stmt><expr><call><name>flushBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>maybeFsync</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>maybeSkipCache</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>flushBuffer</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>buffer</name><operator>.</operator><name>flip</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>buffer</name><operator>.</operator><name>remaining</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>writeBuffer</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name><name>buffer</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>maybeFsync</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>position</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>lastSyncPosition</name> <operator>+</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getTrickleFsyncIntervalInKb</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">1024L</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>fsync</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>maybeSkipCache</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>position</name> <init>= <expr><call><name>position</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// don't skip page cache for tiny files, on the assumption that if they are tiny, the target node is probably</comment>
            <comment type="line">// alive, and if so, the file will be closed and dispatched shortly (within a minute), and the file will be dropped.</comment>
            <if_stmt><if>if <condition>(<expr><name>position</name> <operator>&gt;=</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getTrickleFsyncIntervalInKb</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">1024L</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>NativeLibrary</name><operator>.</operator><name>trySkipCache</name></name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>position</name> <operator>-</operator> <operator>(</operator><name>position</name> <operator>%</operator> <name>PAGE_SIZE</name><operator>)</operator></expr></argument>, <argument><expr><call><name><name>file</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
