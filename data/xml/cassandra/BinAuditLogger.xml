<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/audit/BinAuditLogger.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>audit</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>file</name><operator>.</operator><name>Paths</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>primitives</name><operator>.</operator><name>Ints</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>net</name><operator>.</operator><name>openhft</name><operator>.</operator><name>chronicle</name><operator>.</operator><name>wire</name><operator>.</operator><name>WireOut</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>ObjectSizes</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>binlog</name><operator>.</operator><name>BinLog</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>WeightedQueue</name></name>;</import>

<class><specifier>public</specifier> class <name>BinAuditLogger</name> <super_list><implements>implements <super><name>IAuditLogger</name></super></implements></super_list>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>CURRENT_VERSION</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>AUDITLOG_TYPE</name> <init>= <expr><literal type="string">"audit"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>AUDITLOG_MESSAGE</name> <init>= <expr><literal type="string">"message"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>BinAuditLogger</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>BinLog</name></type> <name>binLog</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>BinAuditLogger</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>params</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>AuditLogOptions</name></type> <name>auditLoggingOptions</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getAuditLoggingOptions</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>binLog</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>BinLog</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>path</name><argument_list>(<argument><expr><call><name><name>Paths</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>auditLoggingOptions</name><operator>.</operator><name>audit_logs_dir</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                          <operator>.</operator><call><name>rollCycle</name><argument_list>(<argument><expr><name><name>auditLoggingOptions</name><operator>.</operator><name>roll_cycle</name></name></expr></argument>)</argument_list></call>
                                          <operator>.</operator><call><name>blocking</name><argument_list>(<argument><expr><name><name>auditLoggingOptions</name><operator>.</operator><name>block</name></name></expr></argument>)</argument_list></call>
                                          <operator>.</operator><call><name>maxQueueWeight</name><argument_list>(<argument><expr><name><name>auditLoggingOptions</name><operator>.</operator><name>max_queue_weight</name></name></expr></argument>)</argument_list></call>
                                          <operator>.</operator><call><name>maxLogSize</name><argument_list>(<argument><expr><name><name>auditLoggingOptions</name><operator>.</operator><name>max_log_size</name></name></expr></argument>)</argument_list></call>
                                          <operator>.</operator><call><name>archiveCommand</name><argument_list>(<argument><expr><name><name>auditLoggingOptions</name><operator>.</operator><name>archive_command</name></name></expr></argument>)</argument_list></call>
                                          <operator>.</operator><call><name>maxArchiveRetries</name><argument_list>(<argument><expr><name><name>auditLoggingOptions</name><operator>.</operator><name>max_archive_retries</name></name></expr></argument>)</argument_list></call>
                                          <operator>.</operator><call><name>build</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Stop the audit log leaving behind any generated files.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>stop</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Deactivation of audit log requested."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>binLog</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Stopping audit logger"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>binLog</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>binLog</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isEnabled</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>binLog</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>log</name><parameter_list>(<parameter><decl><type><name>AuditLogEntry</name></type> <name>auditLogEntry</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>BinLog</name></type> <name>binLog</name> <init>= <expr><name><name>this</name><operator>.</operator><name>binLog</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>binLog</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>auditLogEntry</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>binLog</name><operator>.</operator><name>logRecord</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Message</name><argument_list>(<argument><expr><call><name><name>auditLogEntry</name><operator>.</operator><name>getLogString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>


    <class><annotation>@<name>VisibleForTesting</name></annotation>
    <specifier>public</specifier> <specifier>static</specifier> class <name>Message</name> <super_list><extends>extends <super><name><name>BinLog</name><operator>.</operator><name>ReleaseableWriteMarshallable</name></name></super></extends> <implements>implements <super><name><name>WeightedQueue</name><operator>.</operator><name>Weighable</name></name></super></implements></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>message</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>Message</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name> <operator>=</operator> <name>message</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>protected</specifier> <name>long</name></type> <name>version</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>CURRENT_VERSION</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>protected</specifier> <name>String</name></type> <name>type</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>AUDITLOG_TYPE</name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>void</name></type> <name>writeMarshallablePayload</name><parameter_list>(<parameter><decl><type><name>WireOut</name></type> <name>wire</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>wire</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>AUDITLOG_MESSAGE</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>text</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>void</name></type> <name>release</name><parameter_list>()</parameter_list>
        <block>{<block_content>

        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>int</name></type> <name>weight</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>Ints</name><operator>.</operator><name>checkedCast</name></name><argument_list>(<argument><expr><call><name><name>ObjectSizes</name><operator>.</operator><name>sizeOf</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
