<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/security/SSLFactory.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>security</name></name>;</package>


<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>file</name><operator>.</operator><name>Files</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>file</name><operator>.</operator><name>Paths</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>KeyStore</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>cert</name><operator>.</operator><name>X509Certificate</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Enumeration</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Objects</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ConcurrentHashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Collectors</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>net</name><operator>.</operator><name>ssl</name><operator>.</operator><name>KeyManagerFactory</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>net</name><operator>.</operator><name>ssl</name><operator>.</operator><name>SSLContext</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>net</name><operator>.</operator><name>ssl</name><operator>.</operator><name>SSLEngine</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>net</name><operator>.</operator><name>ssl</name><operator>.</operator><name>SSLParameters</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>net</name><operator>.</operator><name>ssl</name><operator>.</operator><name>SSLSocket</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>net</name><operator>.</operator><name>ssl</name><operator>.</operator><name>TrustManager</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>net</name><operator>.</operator><name>ssl</name><operator>.</operator><name>TrustManagerFactory</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableList</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ByteBufAllocator</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>handler</name><operator>.</operator><name>ssl</name><operator>.</operator><name>CipherSuiteFilter</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>handler</name><operator>.</operator><name>ssl</name><operator>.</operator><name>ClientAuth</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>handler</name><operator>.</operator><name>ssl</name><operator>.</operator><name>OpenSsl</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>handler</name><operator>.</operator><name>ssl</name><operator>.</operator><name>SslContext</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>handler</name><operator>.</operator><name>ssl</name><operator>.</operator><name>SslContextBuilder</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>handler</name><operator>.</operator><name>ssl</name><operator>.</operator><name>SslProvider</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>util</name><operator>.</operator><name>ReferenceCountUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ScheduledExecutors</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>Config</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>EncryptionOptions</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A Factory for providing and setting up client {@link SSLSocket}s. Also provides
 * methods for creating both JSSE {@link SSLContext} instances as well as netty {@link SslContext} instances.
 * &lt;p&gt;
 * Netty {@link SslContext} instances are expensive to create (as well as to destroy) and consume a lof of resources
 * (especially direct memory), but instances can be reused across connections (assuming the SSL params are the same).
 * Hence we cache created instances in {@link #cachedSslContexts}.
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>SSLFactory</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>SSLFactory</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Indicates if the process holds the inbound/listening end of the socket ({@link SocketType#SERVER})), or the
     * outbound side ({@link SocketType#CLIENT}).
     */</comment>
    <enum><specifier>public</specifier> enum <name>SocketType</name>
    <block>{
        <decl><name>SERVER</name></decl>, <decl><name>CLIENT</name></decl>
    }</block></enum>

    <decl_stmt><decl><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>static</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>checkedExpiry</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// Isolate calls to OpenSsl.isAvailable to allow in-jvm dtests to disable tcnative openssl</comment>
    <comment type="line">// support.  It creates a circular reference that prevents the instance class loader from being</comment>
    <comment type="line">// garbage collected.</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>openSslIsAvailable</name></decl>;</decl_stmt>
    <static>static
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>Boolean</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>Config</name><operator>.</operator><name>PROPERTY_PREFIX</name></name> <operator>+</operator> <literal type="string">"disable_tcactive_openssl"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>openSslIsAvailable</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>openSslIsAvailable</name> <operator>=</operator> <call><name><name>OpenSsl</name><operator>.</operator><name>isAvailable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></static>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>openSslIsAvailable</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>openSslIsAvailable</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Cached references of SSL Contexts
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>ConcurrentHashMap</name><argument_list type="generic">&lt;<argument><name>CacheKey</name></argument>, <argument><name>SslContext</name></argument>&gt;</argument_list></name></type> <name>cachedSslContexts</name> <init>= <expr><operator>new</operator> <call><name><name>ConcurrentHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * List of files that trigger hot reloading of SSL certificates
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>volatile</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>HotReloadableFile</name></argument>&gt;</argument_list></name></type> <name>hotReloadableFiles</name> <init>= <expr><call><name><name>ImmutableList</name><operator>.</operator><name>of</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Default initial delay for hot reloading
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_HOT_RELOAD_INITIAL_DELAY_SEC</name> <init>= <expr><literal type="number">600</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Default periodic check delay for hot reloading
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_HOT_RELOAD_PERIOD_SEC</name> <init>= <expr><literal type="number">600</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * State variable to maintain initialization invariant
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isHotReloadingInitialized</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Helper class for hot reloading SSL Contexts
     */</comment>
    <class><specifier>private</specifier> <specifier>static</specifier> class <name>HotReloadableFile</name>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>File</name></type> <name>file</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>long</name></type> <name>lastModTime</name></decl>;</decl_stmt>

        <constructor><name>HotReloadableFile</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>path</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name>file</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>lastModTime</name> <operator>=</operator> <call><name><name>file</name><operator>.</operator><name>lastModified</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><name>boolean</name></type> <name>shouldReload</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>curModTime</name> <init>= <expr><call><name><name>file</name><operator>.</operator><name>lastModified</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>result</name> <init>= <expr><name>curModTime</name> <operator>!=</operator> <name>lastModTime</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>lastModTime</name> <operator>=</operator> <name>curModTime</name></expr>;</expr_stmt>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><literal type="string">"HotReloadableFile{"</literal> <operator>+</operator>
                       <literal type="string">"file="</literal> <operator>+</operator> <name>file</name> <operator>+</operator>
                       <literal type="string">", lastModTime="</literal> <operator>+</operator> <name>lastModTime</name> <operator>+</operator>
                       <literal type="char">'}'</literal></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/** Provides the list of protocols that would have been supported if "TLS" was selected as the
     * protocol before the change for CASSANDRA-13325 that expects explicit protocol versions.
     * @return list of enabled protocol names
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>tlsInstanceProtocolSubstitution</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <decl_stmt><decl><type><name>SSLContext</name></type> <name>ctx</name> <init>= <expr><call><name><name>SSLContext</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"TLS"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>ctx</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>SSLParameters</name></type> <name>params</name> <init>= <expr><call><name><name>ctx</name><operator>.</operator><name>getDefaultSSLParameters</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>protocols</name> <init>= <expr><call><name><name>params</name><operator>.</operator><name>getProtocols</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>protocols</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Error finding supported TLS Protocols"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create a JSSE {@link SSLContext}.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>SSLContext</name></type> <name>createSSLContext</name><parameter_list>(<parameter><decl><type><name>EncryptionOptions</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>buildTruststore</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>TrustManager</name><index>[]</index></name></type> <name>trustManagers</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>buildTruststore</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>trustManagers</name> <operator>=</operator> <call><name>buildTrustManagerFactory</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTrustManagers</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>KeyManagerFactory</name></type> <name>kmf</name> <init>= <expr><call><name>buildKeyManagerFactory</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <try>try
        <block>{<block_content>
            <decl_stmt><decl><type><name>SSLContext</name></type> <name>ctx</name> <init>= <expr><call><name><name>SSLContext</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"TLS"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>ctx</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>kmf</name><operator>.</operator><name>getKeyManagers</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>trustManagers</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>ctx</name></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Error creating/initializing the SSL Context"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name>TrustManagerFactory</name></type> <name>buildTrustManagerFactory</name><parameter_list>(<parameter><decl><type><name>EncryptionOptions</name></type> <name>options</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <try>try <init>(<decl><type><name>InputStream</name></type> <name>tsf</name> <init>= <expr><call><name><name>Files</name><operator>.</operator><name>newInputStream</name></name><argument_list>(<argument><expr><call><name><name>Paths</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>options</name><operator>.</operator><name>truststore</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>)</init>
        <block>{<block_content>
            <decl_stmt><decl><type><name>TrustManagerFactory</name></type> <name>tmf</name> <init>= <expr><call><name><name>TrustManagerFactory</name><operator>.</operator><name>getInstance</name></name><argument_list>(
            <argument><expr><ternary><condition><expr><name><name>options</name><operator>.</operator><name>algorithm</name></name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>TrustManagerFactory</name><operator>.</operator><name>getDefaultAlgorithm</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name><name>options</name><operator>.</operator><name>algorithm</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>KeyStore</name></type> <name>ts</name> <init>= <expr><call><name><name>KeyStore</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name><name>options</name><operator>.</operator><name>store_type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>ts</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><name>tsf</name></expr></argument>, <argument><expr><call><name><name>options</name><operator>.</operator><name>truststore_password</name><operator>.</operator><name>toCharArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>tmf</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>tmf</name></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"failed to build trust manager store for secure connections"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name>KeyManagerFactory</name></type> <name>buildKeyManagerFactory</name><parameter_list>(<parameter><decl><type><name>EncryptionOptions</name></type> <name>options</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <try>try <init>(<decl><type><name>InputStream</name></type> <name>ksf</name> <init>= <expr><call><name><name>Files</name><operator>.</operator><name>newInputStream</name></name><argument_list>(<argument><expr><call><name><name>Paths</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>options</name><operator>.</operator><name>keystore</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>)</init>
        <block>{<block_content>
            <decl_stmt><decl><type><name>KeyManagerFactory</name></type> <name>kmf</name> <init>= <expr><call><name><name>KeyManagerFactory</name><operator>.</operator><name>getInstance</name></name><argument_list>(
            <argument><expr><ternary><condition><expr><name><name>options</name><operator>.</operator><name>algorithm</name></name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>KeyManagerFactory</name><operator>.</operator><name>getDefaultAlgorithm</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name><name>options</name><operator>.</operator><name>algorithm</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>KeyStore</name></type> <name>ks</name> <init>= <expr><call><name><name>KeyStore</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name><name>options</name><operator>.</operator><name>store_type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>ks</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><name>ksf</name></expr></argument>, <argument><expr><call><name><name>options</name><operator>.</operator><name>keystore_password</name><operator>.</operator><name>toCharArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>checkedExpiry</name></expr>)</condition>
            <block>{<block_content>
                <for>for <control>(<init><decl><type><name><name>Enumeration</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>aliases</name> <init>= <expr><call><name><name>ks</name><operator>.</operator><name>aliases</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>aliases</name><operator>.</operator><name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr/>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>alias</name> <init>= <expr><call><name><name>aliases</name><operator>.</operator><name>nextElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name><name>ks</name><operator>.</operator><name>getCertificate</name></name><argument_list>(<argument><expr><name>alias</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"X.509"</literal></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>Date</name></type> <name>expires</name> <init>= <expr><operator>(</operator><operator>(</operator><name>X509Certificate</name><operator>)</operator> <call><name><name>ks</name><operator>.</operator><name>getCertificate</name></name><argument_list>(<argument><expr><name>alias</name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>getNotAfter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><call><name><name>expires</name><operator>.</operator><name>before</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Certificate for {} expired on {}"</literal></expr></argument>, <argument><expr><name>alias</name></expr></argument>, <argument><expr><name>expires</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><name>checkedExpiry</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>kmf</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>ks</name></expr></argument>, <argument><expr><call><name><name>options</name><operator>.</operator><name>keystore_password</name><operator>.</operator><name>toCharArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>kmf</name></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"failed to build key manager store for secure connections"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * get a netty {@link SslContext} instance
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>SslContext</name></type> <name>getOrCreateSslContext</name><parameter_list>(<parameter><decl><type><name>EncryptionOptions</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>buildTruststore</name></decl></parameter>,
                                                   <parameter><decl><type><name>SocketType</name></type> <name>socketType</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <return>return <expr><call><name>getOrCreateSslContext</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>buildTruststore</name></expr></argument>, <argument><expr><name>socketType</name></expr></argument>, <argument><expr><call><name>openSslIsAvailable</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get a netty {@link SslContext} instance.
     */</comment>
    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>static</specifier> <name>SslContext</name></type> <name>getOrCreateSslContext</name><parameter_list>(<parameter><decl><type><name>EncryptionOptions</name></type> <name>options</name></decl></parameter>,
                                            <parameter><decl><type><name>boolean</name></type> <name>buildTruststore</name></decl></parameter>,
                                            <parameter><decl><type><name>SocketType</name></type> <name>socketType</name></decl></parameter>,
                                            <parameter><decl><type><name>boolean</name></type> <name>useOpenSsl</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CacheKey</name></type> <name>key</name> <init>= <expr><operator>new</operator> <call><name>CacheKey</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>socketType</name></expr></argument>, <argument><expr><name>useOpenSsl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SslContext</name></type> <name>sslContext</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>sslContext</name> <operator>=</operator> <call><name><name>cachedSslContexts</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>sslContext</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>sslContext</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>sslContext</name> <operator>=</operator> <call><name>createNettySslContext</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>buildTruststore</name></expr></argument>, <argument><expr><name>socketType</name></expr></argument>, <argument><expr><name>useOpenSsl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>SslContext</name></type> <name>previous</name> <init>= <expr><call><name><name>cachedSslContexts</name><operator>.</operator><name>putIfAbsent</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>sslContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>previous</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>sslContext</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>ReferenceCountUtil</name><operator>.</operator><name>release</name></name><argument_list>(<argument><expr><name>sslContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>previous</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create a Netty {@link SslContext}
     */</comment>
    <function><type><specifier>static</specifier> <name>SslContext</name></type> <name>createNettySslContext</name><parameter_list>(<parameter><decl><type><name>EncryptionOptions</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>buildTruststore</name></decl></parameter>,
                                            <parameter><decl><type><name>SocketType</name></type> <name>socketType</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>useOpenSsl</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <return>return <expr><call><name>createNettySslContext</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>buildTruststore</name></expr></argument>, <argument><expr><name>socketType</name></expr></argument>, <argument><expr><name>useOpenSsl</name></expr></argument>,
                                     <argument><expr><name><name>LoggingCipherSuiteFilter</name><operator>.</operator><name>QUIET_FILTER</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create a Netty {@link SslContext} with a supplied cipherFilter
     */</comment>
    <function><type><specifier>static</specifier> <name>SslContext</name></type> <name>createNettySslContext</name><parameter_list>(<parameter><decl><type><name>EncryptionOptions</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>buildTruststore</name></decl></parameter>,
                                            <parameter><decl><type><name>SocketType</name></type> <name>socketType</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>useOpenSsl</name></decl></parameter>, <parameter><decl><type><name>CipherSuiteFilter</name></type> <name>cipherFilter</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <comment type="block">/*
            There is a case where the netty/openssl combo might not support using KeyManagerFactory. specifically,
            I've seen this with the netty-tcnative dynamic openssl implementation. using the netty-tcnative static-boringssl
            works fine with KeyManagerFactory. If we want to support all of the netty-tcnative options, we would need
            to fall back to passing in a file reference for both a x509 and PKCS#8 private key file in PEM format (see
            {@link SslContextBuilder#forServer(File, File, String)}). However, we are not supporting that now to keep
            the config/yaml API simple.
         */</comment>
        <decl_stmt><decl><type><name>KeyManagerFactory</name></type> <name>kmf</name> <init>= <expr><call><name>buildKeyManagerFactory</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SslContextBuilder</name></type> <name>builder</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>socketType</name> <operator>==</operator> <name><name>SocketType</name><operator>.</operator><name>SERVER</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>builder</name> <operator>=</operator> <call><name><name>SslContextBuilder</name><operator>.</operator><name>forServer</name></name><argument_list>(<argument><expr><name>kmf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>clientAuth</name></name><argument_list>(<argument><expr><ternary><condition><expr><name><name>options</name><operator>.</operator><name>require_client_auth</name></name></expr> ?</condition><then> <expr><name><name>ClientAuth</name><operator>.</operator><name>REQUIRE</name></name></expr> </then><else>: <expr><name><name>ClientAuth</name><operator>.</operator><name>NONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>builder</name> <operator>=</operator> <call><name><name>SslContextBuilder</name><operator>.</operator><name>forClient</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>keyManager</name><argument_list>(<argument><expr><name>kmf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>sslProvider</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>useOpenSsl</name></expr> ?</condition><then> <expr><name><name>SslProvider</name><operator>.</operator><name>OPENSSL</name></name></expr> </then><else>: <expr><name><name>SslProvider</name><operator>.</operator><name>JDK</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>protocols</name></name><argument_list>(<argument><expr><call><name><name>options</name><operator>.</operator><name>acceptedProtocols</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// only set the cipher suites if the opertor has explicity configured values for it; else, use the default</comment>
        <comment type="line">// for each ssl implemention (jdk or openssl)</comment>
        <if_stmt><if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>cipher_suites</name></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>options</name><operator>.</operator><name>cipher_suites</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>ciphers</name></name><argument_list>(<argument><expr><name><name>options</name><operator>.</operator><name>cipher_suites</name></name></expr></argument>, <argument><expr><name>cipherFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>buildTruststore</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>trustManager</name></name><argument_list>(<argument><expr><call><name>buildTrustManagerFactory</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return>return <expr><call><name><name>builder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Performs a lightweight check whether the certificate files have been refreshed.
     *
     * @throws IllegalStateException if {@link #initHotReloading(EncryptionOptions.ServerEncryptionOptions, EncryptionOptions, boolean)}
     *                               is not called first
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>checkCertFilesForHotReloading</name><parameter_list>(<parameter><decl><type><name><name>EncryptionOptions</name><operator>.</operator><name>ServerEncryptionOptions</name></name></type> <name>serverOpts</name></decl></parameter>,
                                                     <parameter><decl><type><name>EncryptionOptions</name></type> <name>clientOpts</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isHotReloadingInitialized</name></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Hot reloading functionality has not been initialized."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Checking whether certificates have been updated {}"</literal></expr></argument>, <argument><expr><name>hotReloadableFiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>hotReloadableFiles</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>anyMatch</name><argument_list>(<argument><expr><name>HotReloadableFile</name><operator>::</operator><name>shouldReload</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"SSL certificates have been updated. Reseting the ssl contexts for new connections."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try>try
            <block>{<block_content>
                <expr_stmt><expr><call><name>validateSslCerts</name><argument_list>(<argument><expr><name>serverOpts</name></expr></argument>, <argument><expr><name>clientOpts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>cachedSslContexts</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch<parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Failed to hot reload the SSL Certificates! Please check the certificate files."</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Determines whether to hot reload certificates and schedules a periodic task for it.
     *
     * @param serverOpts Server encryption options (Internode)
     * @param clientOpts Client encryption options (Native Protocol)
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>initHotReloading</name><parameter_list>(<parameter><decl><type><name><name>EncryptionOptions</name><operator>.</operator><name>ServerEncryptionOptions</name></name></type> <name>serverOpts</name></decl></parameter>,
                                                     <parameter><decl><type><name>EncryptionOptions</name></type> <name>clientOpts</name></decl></parameter>,
                                                     <parameter><decl><type><name>boolean</name></type> <name>force</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>isHotReloadingInitialized</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>force</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Initializing hot reloading SSLContext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>HotReloadableFile</name></argument>&gt;</argument_list></name></type> <name>fileList</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>serverOpts</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>serverOpts</name><operator>.</operator><name>tlsEncryptionPolicy</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>EncryptionOptions</name><operator>.</operator><name>TlsEncryptionPolicy</name><operator>.</operator><name>UNENCRYPTED</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>fileList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>HotReloadableFile</name><argument_list>(<argument><expr><name><name>serverOpts</name><operator>.</operator><name>keystore</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>fileList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>HotReloadableFile</name><argument_list>(<argument><expr><name><name>serverOpts</name><operator>.</operator><name>truststore</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>clientOpts</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>clientOpts</name><operator>.</operator><name>tlsEncryptionPolicy</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>EncryptionOptions</name><operator>.</operator><name>TlsEncryptionPolicy</name><operator>.</operator><name>UNENCRYPTED</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>fileList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>HotReloadableFile</name><argument_list>(<argument><expr><name><name>clientOpts</name><operator>.</operator><name>keystore</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>fileList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>HotReloadableFile</name><argument_list>(<argument><expr><name><name>clientOpts</name><operator>.</operator><name>truststore</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>hotReloadableFiles</name> <operator>=</operator> <call><name><name>ImmutableList</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><name>fileList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isHotReloadingInitialized</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>ScheduledExecutors</name><operator>.</operator><name>scheduledTasks</name>
                <operator>.</operator><name>scheduleWithFixedDelay</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>checkCertFilesForHotReloading</name><argument_list>(
                                                <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getInternodeMessagingEncyptionOptions</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getNativeProtocolEncryptionOptions</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>,
                                        <argument><expr><name>DEFAULT_HOT_RELOAD_INITIAL_DELAY_SEC</name></expr></argument>,
                                        <argument><expr><name>DEFAULT_HOT_RELOAD_PERIOD_SEC</name></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>SECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>isHotReloadingInitialized</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="line">// Non-logging</comment>
    <comment type="block">/*
     * This class will filter all requested ciphers out that are not supported by the current {@link SSLEngine},
     * logging messages for all dropped ciphers, and throws an exception if no ciphers are supported
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>LoggingCipherSuiteFilter</name> <super_list><implements>implements <super><name>CipherSuiteFilter</name></super></implements></super_list>
    <block>{
        <comment type="line">// Version without logging the ciphers, make sure same filtering logic is used</comment>
        <comment type="line">// all the time, regardless of user output.</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>CipherSuiteFilter</name></type> <name>QUIET_FILTER</name> <init>= <expr><operator>new</operator> <call><name>LoggingCipherSuiteFilter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>settingDescription</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>LoggingCipherSuiteFilter</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>settingDescription</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <constructor><specifier>public</specifier> <name>LoggingCipherSuiteFilter</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>settingDescription</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>settingDescription</name></name> <operator>=</operator> <name>settingDescription</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>


        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name><name>String</name><index>[]</index></name></type> <name>filterCipherSuites</name><parameter_list>(<parameter><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>ciphers</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>defaultCiphers</name></decl></parameter>,
                                           <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>supportedCiphers</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>Objects</name><operator>.</operator><name>requireNonNull</name></name><argument_list>(<argument><expr><name>defaultCiphers</name></expr></argument>, <argument><expr><literal type="string">"defaultCiphers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Objects</name><operator>.</operator><name>requireNonNull</name></name><argument_list>(<argument><expr><name>supportedCiphers</name></expr></argument>, <argument><expr><literal type="string">"supportedCiphers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>newCiphers</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ciphers</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>newCiphers</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>defaultCiphers</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>ciphers</name> <operator>=</operator> <name>defaultCiphers</name></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name>newCiphers</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>supportedCiphers</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>c</name> <range>: <expr><name>ciphers</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
                <block>{<block_content>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>supportedCiphers</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>newCiphers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>settingDescription</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Dropping unsupported cipher_suite {} from {} configuration"</literal></expr></argument>,
                                    <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name><name>settingDescription</name><operator>.</operator><name>toLowerCase</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>
            <if_stmt><if>if <condition>(<expr><call><name><name>newCiphers</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"No ciphers left after filtering supported cipher suite"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>

            <return>return <expr><call><name><name>newCiphers</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>filterOutSSLv2Hello</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>string</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>!</operator><call><name><name>string</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"SSLv2Hello"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>validateSslContext</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>contextDescription</name></decl></parameter>, <parameter><decl><type><name>EncryptionOptions</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>buildTrustStore</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>logProtocolAndCiphers</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>options</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>options</name><operator>.</operator><name>tlsEncryptionPolicy</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>EncryptionOptions</name><operator>.</operator><name>TlsEncryptionPolicy</name><operator>.</operator><name>UNENCRYPTED</name></name></expr>)</condition>
        <block>{<block_content>
            <try>try
            <block>{<block_content>
                <decl_stmt><decl><type><name>CipherSuiteFilter</name></type> <name>loggingCipherSuiteFilter</name> <init>= <expr><ternary><condition><expr><name>logProtocolAndCiphers</name></expr> ?</condition><then> <expr><operator>new</operator> <call><name>LoggingCipherSuiteFilter</name><argument_list>(<argument><expr><name>contextDescription</name></expr></argument>)</argument_list></call></expr>
                                                                                   </then><else>: <expr><name><name>LoggingCipherSuiteFilter</name><operator>.</operator><name>QUIET_FILTER</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>SslContext</name></type> <name>serverSslContext</name> <init>= <expr><call><name>createNettySslContext</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>buildTrustStore</name></expr></argument>, <argument><expr><name><name>SocketType</name><operator>.</operator><name>SERVER</name></name></expr></argument>, <argument><expr><call><name>openSslIsAvailable</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>loggingCipherSuiteFilter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <try>try
                <block>{<block_content>
                    <decl_stmt><decl><type><name>SSLEngine</name></type> <name>engine</name> <init>= <expr><call><name><name>serverSslContext</name><operator>.</operator><name>newEngine</name></name><argument_list>(<argument><expr><name><name>ByteBufAllocator</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <try>try
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name>logProtocolAndCiphers</name></expr>)</condition>
                        <block>{<block_content>
                            <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>supportedProtocols</name> <init>= <expr><call><name><name>engine</name><operator>.</operator><name>getSupportedProtocols</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>supportedCiphers</name> <init>= <expr><call><name><name>engine</name><operator>.</operator><name>getSupportedCipherSuites</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <comment type="line">// Netty always adds the SSLv2Hello pseudo-protocol.  (Netty commit 7a39afd031accea9ee38653afbd58eb1c466deda)</comment>
                            <comment type="line">// To avoid triggering any log scanners that are concerned about SSL2 references, filter</comment>
                            <comment type="line">// it from the output.</comment>
                            <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>enabledProtocols</name> <init>= <expr><call><name><name>engine</name><operator>.</operator><name>getEnabledProtocols</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>String</name></type> <name>filteredEnabledProtocols</name> <init>=
                                <expr><ternary><condition><expr><name>supportedProtocols</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">"system default"</literal></expr>
                                                           </then><else>: <expr><call><name><name>Arrays</name><operator>.</operator><name>stream</name></name><argument_list>(<argument><expr><call><name><name>engine</name><operator>.</operator><name>getEnabledProtocols</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                                            <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>SSLFactory</name><operator>::</operator><name>filterOutSSLv2Hello</name></expr></argument>)</argument_list></call>
                                                            <operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>joining</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>enabledCiphers</name> <init>= <expr><call><name><name>engine</name><operator>.</operator><name>getEnabledCipherSuites</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"{} supported TLS protocols: {}"</literal></expr></argument>, <argument><expr><name>contextDescription</name></expr></argument>,
                                         <argument><expr><ternary><condition><expr><name>supportedProtocols</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">"system default"</literal></expr> </then><else>: <expr><call><name><name>String</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>, <argument><expr><name>supportedProtocols</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"{} unfiltered enabled TLS protocols: {}"</literal></expr></argument>, <argument><expr><name>contextDescription</name></expr></argument>,
                                        <argument><expr><ternary><condition><expr><name>enabledProtocols</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">"system default"</literal></expr> </then><else>: <expr><call><name><name>String</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>, <argument><expr><name>enabledProtocols</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"{} enabled TLS protocols: {}"</literal></expr></argument>, <argument><expr><name>contextDescription</name></expr></argument>, <argument><expr><name>filteredEnabledProtocols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"{} supported cipher suites: {}"</literal></expr></argument>, <argument><expr><name>contextDescription</name></expr></argument>,
                                         <argument><expr><ternary><condition><expr><name>supportedCiphers</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">"system default"</literal></expr> </then><else>: <expr><call><name><name>String</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>, <argument><expr><name>supportedCiphers</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"{} enabled cipher suites: {}"</literal></expr></argument>, <argument><expr><name>contextDescription</name></expr></argument>,
                                        <argument><expr><ternary><condition><expr><name>enabledCiphers</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">"system default"</literal></expr> </then><else>: <expr><call><name><name>String</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>, <argument><expr><name>enabledCiphers</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block>
                    <finally>finally
                    <block>{<block_content>
                        <expr_stmt><expr><call><name><name>engine</name><operator>.</operator><name>closeInbound</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>engine</name><operator>.</operator><name>closeOutbound</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>ReferenceCountUtil</name><operator>.</operator><name>release</name></name><argument_list>(<argument><expr><name>engine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></finally></try>
                </block_content>}</block>
                <finally>finally
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>ReferenceCountUtil</name><operator>.</operator><name>release</name></name><argument_list>(<argument><expr><name>serverSslContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></finally></try>

                <comment type="line">// Make sure it is possible to build the client context too</comment>
                <decl_stmt><decl><type><name>SslContext</name></type> <name>clientSslContext</name> <init>= <expr><call><name>createNettySslContext</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>buildTrustStore</name></expr></argument>, <argument><expr><name><name>SocketType</name><operator>.</operator><name>CLIENT</name></name></expr></argument>, <argument><expr><call><name>openSslIsAvailable</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>ReferenceCountUtil</name><operator>.</operator><name>release</name></name><argument_list>(<argument><expr><name>clientSslContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Failed to create SSL context using "</literal> <operator>+</operator> <name>contextDescription</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sanity checks all certificates to ensure we can actually load them
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>validateSslCerts</name><parameter_list>(<parameter><decl><type><name><name>EncryptionOptions</name><operator>.</operator><name>ServerEncryptionOptions</name></name></type> <name>serverOpts</name></decl></parameter>, <parameter><decl><type><name>EncryptionOptions</name></type> <name>clientOpts</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name>validateSslContext</name><argument_list>(<argument><expr><literal type="string">"server_encryption_options"</literal></expr></argument>, <argument><expr><name>serverOpts</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>validateSslContext</name><argument_list>(<argument><expr><literal type="string">"client_encryption_options"</literal></expr></argument>, <argument><expr><name>clientOpts</name></expr></argument>, <argument><expr><name><name>clientOpts</name><operator>.</operator><name>require_client_auth</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <class><specifier>static</specifier> class <name>CacheKey</name>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>EncryptionOptions</name></type> <name>encryptionOptions</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>SocketType</name></type> <name>socketType</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>useOpenSSL</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>CacheKey</name><parameter_list>(<parameter><decl><type><name>EncryptionOptions</name></type> <name>encryptionOptions</name></decl></parameter>, <parameter><decl><type><name>SocketType</name></type> <name>socketType</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>useOpenSSL</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>encryptionOptions</name></name> <operator>=</operator> <name>encryptionOptions</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>socketType</name></name> <operator>=</operator> <name>socketType</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>useOpenSSL</name></name> <operator>=</operator> <name>useOpenSSL</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>o</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name>getClass</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>o</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name>CacheKey</name></type> <name>cacheKey</name> <init>= <expr><operator>(</operator><name>CacheKey</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>
            <return>return <expr><operator>(</operator><name>socketType</name> <operator>==</operator> <name><name>cacheKey</name><operator>.</operator><name>socketType</name></name> <operator>&amp;&amp;</operator>
                    <name>useOpenSSL</name> <operator>==</operator> <name><name>cacheKey</name><operator>.</operator><name>useOpenSSL</name></name> <operator>&amp;&amp;</operator>
                    <call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>encryptionOptions</name></expr></argument>, <argument><expr><name><name>cacheKey</name><operator>.</operator><name>encryptionOptions</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>result</name> <operator>+=</operator> <literal type="number">31</literal> <operator>*</operator> <call><name><name>socketType</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>result</name> <operator>+=</operator> <literal type="number">31</literal> <operator>*</operator> <call><name><name>encryptionOptions</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>result</name> <operator>+=</operator> <literal type="number">31</literal> <operator>*</operator> <call><name><name>Boolean</name><operator>.</operator><name>hashCode</name></name><argument_list>(<argument><expr><name>useOpenSSL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
