<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Constructor</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>InvocationTargetException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Method</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicReference</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>ConsistencyLevel</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>WriteType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>Range</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>RingPosition</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>Token</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>ConfigurationException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>ReplicaCollection</name><operator>.</operator><name>Builder</name><operator>.</operator><name>Conflict</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>AbstractWriteResponseHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>DatacenterSyncWriteResponseHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>DatacenterWriteResponseHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>WriteResponseHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>FBUtilities</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>cliffc</name><operator>.</operator><name>high_scale_lib</name><operator>.</operator><name>NonBlockingHashMap</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A abstract parent for all replication strategies.
*/</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>AbstractReplicationStrategy</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>AbstractReplicationStrategy</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>configOptions</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>String</name></type> <name>keyspaceName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>TokenMetadata</name></type> <name>tokenMetadata</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ReplicaCache</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>, <argument><name>EndpointsForRange</name></argument>&gt;</argument_list></name></type> <name>replicas</name> <init>= <expr><operator>new</operator> <call><name><name>ReplicaCache</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>IEndpointSnitch</name></type> <name>snitch</name></decl>;</decl_stmt>

    <constructor><specifier>protected</specifier> <name>AbstractReplicationStrategy</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>TokenMetadata</name></type> <name>tokenMetadata</name></decl></parameter>, <parameter><decl><type><name>IEndpointSnitch</name></type> <name>snitch</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>configOptions</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><name>snitch</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
        <assert>assert <expr><name>tokenMetadata</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tokenMetadata</name></name> <operator>=</operator> <name>tokenMetadata</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>snitch</name></name> <operator>=</operator> <name>snitch</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>configOptions</name></name> <operator>=</operator> <ternary><condition><expr><name>configOptions</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>Collections</name><operator>.</operator></name>&lt;<name>String</name></expr></then></ternary></expr><operator>,</operator> <expr><name>String</name><operator>&gt;</operator><call><name>emptyMap</name><argument_list>()</argument_list></call> <operator>:</operator> <name>configOptions</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>keyspaceName</name></name> <operator>=</operator> <name>keyspaceName</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>EndpointsForRange</name></type> <name>getCachedReplicas</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>ringVersion</name></decl></parameter>, <parameter><decl><type><name>Token</name></type> <name>t</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>replicas</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>ringVersion</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * get the (possibly cached) endpoints that should store the given Token.
     * Note that while the endpoints are conceptually a Set (no duplicates will be included),
     * we return a List to avoid an extra allocation when sorting by proximity later
     * @param searchPosition the position the natural endpoints are requested for
     * @return a copy of the natural endpoints for the given token
     */</comment>
    <function><type><specifier>public</specifier> <name>EndpointsForToken</name></type> <name>getNaturalReplicasForToken</name><parameter_list>(<parameter><decl><type><name><name>RingPosition</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>searchPosition</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getNaturalReplicas</name><argument_list>(<argument><expr><name>searchPosition</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>forToken</name><argument_list>(<argument><expr><call><name><name>searchPosition</name><operator>.</operator><name>getToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>EndpointsForRange</name></type> <name>getNaturalReplicas</name><parameter_list>(<parameter><decl><type><name><name>RingPosition</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>searchPosition</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Token</name></type> <name>searchToken</name> <init>= <expr><call><name><name>searchPosition</name><operator>.</operator><name>getToken</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>currentRingVersion</name> <init>= <expr><call><name><name>tokenMetadata</name><operator>.</operator><name>getRingVersion</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Token</name></type> <name>keyToken</name> <init>= <expr><call><name><name>TokenMetadata</name><operator>.</operator><name>firstToken</name></name><argument_list>(<argument><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>sortedTokens</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>searchToken</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>EndpointsForRange</name></type> <name>endpoints</name> <init>= <expr><call><name>getCachedReplicas</name><argument_list>(<argument><expr><name>currentRingVersion</name></expr></argument>, <argument><expr><name>keyToken</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>endpoints</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>TokenMetadata</name></type> <name>tm</name> <init>= <expr><call><name><name>tokenMetadata</name><operator>.</operator><name>cachedOnlyTokenMap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// if our cache got invalidated, it's possible there is a new token to account for too</comment>
            <expr_stmt><expr><name>keyToken</name> <operator>=</operator> <call><name><name>TokenMetadata</name><operator>.</operator><name>firstToken</name></name><argument_list>(<argument><expr><call><name><name>tm</name><operator>.</operator><name>sortedTokens</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>searchToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>endpoints</name> <operator>=</operator> <call><name>calculateNaturalReplicas</name><argument_list>(<argument><expr><name>searchToken</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>replicas</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>tm</name><operator>.</operator><name>getRingVersion</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>keyToken</name></expr></argument>, <argument><expr><name>endpoints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><name>endpoints</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Replica</name></type> <name>getLocalReplicaFor</name><parameter_list>(<parameter><decl><type><name><name>RingPosition</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>searchPosition</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getNaturalReplicas</name><argument_list>(<argument><expr><name>searchPosition</name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>byEndpoint</name><argument_list>()</argument_list></call>
               <operator>.</operator><call><name>get</name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Calculate the natural endpoints for the given token. Endpoints are returned in the order
     * they occur in the ring following the searchToken, as defined by the replication strategy.
     *
     * Note that the order of the replicas is _implicitly relied upon_ by the definition of
     * "primary" range in
     * {@link org.apache.cassandra.service.StorageService#getPrimaryRangesForEndpoint(String, InetAddressAndPort)}
     * which is in turn relied on by various components like repair and size estimate calculations.
     *
     * @see #getNaturalReplicasForToken(org.apache.cassandra.dht.RingPosition)
     *
     * @param tokenMetadata the token metadata used to find the searchToken, e.g. contains token to endpoint
     *                      mapping information
     * @param searchToken the token to find the natural endpoints for
     * @return a copy of the natural endpoints for the given token
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>EndpointsForRange</name></type> <name>calculateNaturalReplicas</name><parameter_list>(<parameter><decl><type><name>Token</name></type> <name>searchToken</name></decl></parameter>, <parameter><decl><type><name>TokenMetadata</name></type> <name>tokenMetadata</name></decl></parameter>)</parameter_list>;</function_decl>

    <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>AbstractWriteResponseHandler</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>getWriteResponseHandler</name><parameter_list>(<parameter><decl><type><name><name>ReplicaPlan</name><operator>.</operator><name>ForTokenWrite</name></name></type> <name>replicaPlan</name></decl></parameter>,
                                                                       <parameter><decl><type><name>Runnable</name></type> <name>callback</name></decl></parameter>,
                                                                       <parameter><decl><type><name>WriteType</name></type> <name>writeType</name></decl></parameter>,
                                                                       <parameter><decl><type><name>long</name></type> <name>queryStartNanoTime</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getWriteResponseHandler</name><argument_list>(<argument><expr><name>replicaPlan</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>writeType</name></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>, <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getIdealConsistencyLevel</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>AbstractWriteResponseHandler</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>getWriteResponseHandler</name><parameter_list>(<parameter><decl><type><name><name>ReplicaPlan</name><operator>.</operator><name>ForTokenWrite</name></name></type> <name>replicaPlan</name></decl></parameter>,
                                                                       <parameter><decl><type><name>Runnable</name></type> <name>callback</name></decl></parameter>,
                                                                       <parameter><decl><type><name>WriteType</name></type> <name>writeType</name></decl></parameter>,
                                                                       <parameter><decl><type><name>long</name></type> <name>queryStartNanoTime</name></decl></parameter>,
                                                                       <parameter><decl><type><name>ConsistencyLevel</name></type> <name>idealConsistencyLevel</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>AbstractWriteResponseHandler</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>resultResponseHandler</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>replicaPlan</name><operator>.</operator><name>consistencyLevel</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isDatacenterLocal</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// block for in this context will be localnodes block.</comment>
            <expr_stmt><expr><name>resultResponseHandler</name> <operator>=</operator> <operator>new</operator> <call><name><name>DatacenterWriteResponseHandler</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>replicaPlan</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>writeType</name></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name><name>replicaPlan</name><operator>.</operator><name>consistencyLevel</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ConsistencyLevel</name><operator>.</operator><name>EACH_QUORUM</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>this</name> <operator>instanceof</operator> <name>NetworkTopologyStrategy</name><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>resultResponseHandler</name> <operator>=</operator> <operator>new</operator> <call><name><name>DatacenterSyncWriteResponseHandler</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>replicaPlan</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>writeType</name></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>resultResponseHandler</name> <operator>=</operator> <operator>new</operator> <call><name><name>WriteResponseHandler</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>replicaPlan</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>writeType</name></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">//Check if tracking the ideal consistency level is configured</comment>
        <if_stmt><if>if <condition>(<expr><name>idealConsistencyLevel</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">//If ideal and requested are the same just use this handler to track the ideal consistency level</comment>
            <comment type="line">//This is also used so that the ideal consistency level handler when constructed knows it is the ideal</comment>
            <comment type="line">//one for tracking purposes</comment>
            <if_stmt><if>if <condition>(<expr><name>idealConsistencyLevel</name> <operator>==</operator> <call><name><name>replicaPlan</name><operator>.</operator><name>consistencyLevel</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>resultResponseHandler</name><operator>.</operator><name>setIdealCLResponseHandler</name></name><argument_list>(<argument><expr><name>resultResponseHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <comment type="line">//Construct a delegate response handler to use to track the ideal consistency level</comment>
                <decl_stmt><decl><type><name><name>AbstractWriteResponseHandler</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>idealHandler</name> <init>= <expr><call><name>getWriteResponseHandler</name><argument_list>(<argument><expr><call><name><name>replicaPlan</name><operator>.</operator><name>withConsistencyLevel</name></name><argument_list>(<argument><expr><name>idealConsistencyLevel</name></expr></argument>)</argument_list></call></expr></argument>,
                                                                                       <argument><expr><name>callback</name></expr></argument>,
                                                                                       <argument><expr><name>writeType</name></expr></argument>,
                                                                                       <argument><expr><name>queryStartNanoTime</name></expr></argument>,
                                                                                       <argument><expr><name>idealConsistencyLevel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>resultResponseHandler</name><operator>.</operator><name>setIdealCLResponseHandler</name></name><argument_list>(<argument><expr><name>idealHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><name>resultResponseHandler</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * calculate the RF based on strategy_options. When overwriting, ensure that this get()
     *  is FAST, as this is called often.
     *
     * @return the replication factor
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>ReplicationFactor</name></type> <name>getReplicationFactor</name><parameter_list>()</parameter_list>;</function_decl>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasTransientReplicas</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getReplicationFactor</name><argument_list>()</argument_list></call><operator>.</operator><call><name>hasTransientReplicas</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block">/*
     * NOTE: this is pretty inefficient. also the inverse (getRangeAddresses) below.
     * this is fine as long as we don't use this on any critical path.
     * (fixing this would probably require merging tokenmetadata into replicationstrategy,
     * so we could cache/invalidate cleanly.)
     */</comment>
    <function><type><specifier>public</specifier> <name>RangesByEndpoint</name></type> <name>getAddressReplicas</name><parameter_list>(<parameter><decl><type><name>TokenMetadata</name></type> <name>metadata</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>RangesByEndpoint</name><operator>.</operator><name>Builder</name></name></type> <name>map</name> <init>= <expr><operator>new</operator> <call><name><name>RangesByEndpoint</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>Token</name></type> <name>token</name> <range>: <expr><call><name><name>metadata</name><operator>.</operator><name>sortedTokens</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name> <init>= <expr><call><name><name>metadata</name><operator>.</operator><name>getPrimaryRangeFor</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>Replica</name></type> <name>replica</name> <range>: <expr><call><name>calculateNaturalReplicas</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <comment type="line">// LocalStrategy always returns (min, min] ranges for it's replicas, so we skip the check here</comment>
                <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkState</name></name><argument_list>(<argument><expr><call><name><name>range</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>replica</name><operator>.</operator><name>range</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <name>this</name> <operator>instanceof</operator> <name>LocalStrategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>replica</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>replica</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>

        <return>return <expr><call><name><name>map</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>RangesAtEndpoint</name></type> <name>getAddressReplicas</name><parameter_list>(<parameter><decl><type><name>TokenMetadata</name></type> <name>metadata</name></decl></parameter>, <parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>RangesAtEndpoint</name><operator>.</operator><name>Builder</name></name></type> <name>builder</name> <init>= <expr><call><name><name>RangesAtEndpoint</name><operator>.</operator><name>builder</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Token</name></type> <name>token</name> <range>: <expr><call><name><name>metadata</name><operator>.</operator><name>sortedTokens</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name> <init>= <expr><call><name><name>metadata</name><operator>.</operator><name>getPrimaryRangeFor</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Replica</name></type> <name>replica</name> <init>= <expr><call><name>calculateNaturalReplicas</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>byEndpoint</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>replica</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// LocalStrategy always returns (min, min] ranges for it's replicas, so we skip the check here</comment>
                <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkState</name></name><argument_list>(<argument><expr><call><name><name>range</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>replica</name><operator>.</operator><name>range</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <name>this</name> <operator>instanceof</operator> <name>LocalStrategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>replica</name></expr></argument>, <argument><expr><name><name>Conflict</name><operator>.</operator><name>DUPLICATE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><call><name><name>builder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>


    <function><type><specifier>public</specifier> <name>EndpointsByRange</name></type> <name>getRangeAddresses</name><parameter_list>(<parameter><decl><type><name>TokenMetadata</name></type> <name>metadata</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>EndpointsByRange</name><operator>.</operator><name>Builder</name></name></type> <name>map</name> <init>= <expr><operator>new</operator> <call><name><name>EndpointsByRange</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>Token</name></type> <name>token</name> <range>: <expr><call><name><name>metadata</name><operator>.</operator><name>sortedTokens</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name> <init>= <expr><call><name><name>metadata</name><operator>.</operator><name>getPrimaryRangeFor</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>Replica</name></type> <name>replica</name> <range>: <expr><call><name>calculateNaturalReplicas</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <comment type="line">// LocalStrategy always returns (min, min] ranges for it's replicas, so we skip the check here</comment>
                <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkState</name></name><argument_list>(<argument><expr><call><name><name>range</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>replica</name><operator>.</operator><name>range</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <name>this</name> <operator>instanceof</operator> <name>LocalStrategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><name>replica</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>

        <return>return <expr><call><name><name>map</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>RangesByEndpoint</name></type> <name>getAddressReplicas</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getAddressReplicas</name><argument_list>(<argument><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>cloneOnlyTokenMap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>RangesAtEndpoint</name></type> <name>getAddressReplicas</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getAddressReplicas</name><argument_list>(<argument><expr><call><name><name>tokenMetadata</name><operator>.</operator><name>cloneOnlyTokenMap</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>RangesAtEndpoint</name></type> <name>getPendingAddressRanges</name><parameter_list>(<parameter><decl><type><name>TokenMetadata</name></type> <name>metadata</name></decl></parameter>, <parameter><decl><type><name>Token</name></type> <name>pendingToken</name></decl></parameter>, <parameter><decl><type><name>InetAddressAndPort</name></type> <name>pendingAddress</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getPendingAddressRanges</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><call><name><name>Collections</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><name>pendingToken</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pendingAddress</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>RangesAtEndpoint</name></type> <name>getPendingAddressRanges</name><parameter_list>(<parameter><decl><type><name>TokenMetadata</name></type> <name>metadata</name></decl></parameter>, <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>pendingTokens</name></decl></parameter>, <parameter><decl><type><name>InetAddressAndPort</name></type> <name>pendingAddress</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>TokenMetadata</name></type> <name>temp</name> <init>= <expr><call><name><name>metadata</name><operator>.</operator><name>cloneOnlyTokenMap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>temp</name><operator>.</operator><name>updateNormalTokens</name></name><argument_list>(<argument><expr><name>pendingTokens</name></expr></argument>, <argument><expr><name>pendingAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>getAddressReplicas</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>pendingAddress</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>validateOptions</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>;</function_decl>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>maybeWarnOnOptions</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block">/*
     * The options recognized by the strategy.
     * The empty collection means that no options are accepted, but null means
     * that any option is accepted.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>recognizedOptions</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <comment type="line">// We default to null for backward compatibility sake</comment>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>AbstractReplicationStrategy</name></type> <name>createInternal</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>,
                                                              <parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>AbstractReplicationStrategy</name></extends></argument>&gt;</argument_list></name></type> <name>strategyClass</name></decl></parameter>,
                                                              <parameter><decl><type><name>TokenMetadata</name></type> <name>tokenMetadata</name></decl></parameter>,
                                                              <parameter><decl><type><name>IEndpointSnitch</name></type> <name>snitch</name></decl></parameter>,
                                                              <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>strategyOptions</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>AbstractReplicationStrategy</name></type> <name>strategy</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><index>[]</index></name></type> <name>parameterTypes</name> <init>= <expr><operator>new</operator> <name><name>Class</name><index>[]</index></name> <block>{<expr><name><name>String</name><operator>.</operator><name>class</name></name></expr>, <expr><name><name>TokenMetadata</name><operator>.</operator><name>class</name></name></expr>, <expr><name><name>IEndpointSnitch</name><operator>.</operator><name>class</name></name></expr>, <expr><name><name>Map</name><operator>.</operator><name>class</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>Constructor</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>AbstractReplicationStrategy</name></extends></argument>&gt;</argument_list></name></type> <name>constructor</name> <init>= <expr><call><name><name>strategyClass</name><operator>.</operator><name>getConstructor</name></name><argument_list>(<argument><expr><name>parameterTypes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>strategy</name> <operator>=</operator> <call><name><name>constructor</name><operator>.</operator><name>newInstance</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>tokenMetadata</name></expr></argument>, <argument><expr><name>snitch</name></expr></argument>, <argument><expr><name>strategyOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>InvocationTargetException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>Throwable</name></type> <name>targetException</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getTargetException</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>targetException</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>targetException</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Error constructing replication strategy class"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
        <return>return <expr><name>strategy</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>AbstractReplicationStrategy</name></type> <name>createReplicationStrategy</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>,
                                                                        <parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>AbstractReplicationStrategy</name></extends></argument>&gt;</argument_list></name></type> <name>strategyClass</name></decl></parameter>,
                                                                        <parameter><decl><type><name>TokenMetadata</name></type> <name>tokenMetadata</name></decl></parameter>,
                                                                        <parameter><decl><type><name>IEndpointSnitch</name></type> <name>snitch</name></decl></parameter>,
                                                                        <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>strategyOptions</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>AbstractReplicationStrategy</name></type> <name>strategy</name> <init>= <expr><call><name>createInternal</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>strategyClass</name></expr></argument>, <argument><expr><name>tokenMetadata</name></expr></argument>, <argument><expr><name>snitch</name></expr></argument>, <argument><expr><name>strategyOptions</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Because we used to not properly validate unrecognized options, we only log a warning if we find one.</comment>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>strategy</name><operator>.</operator><name>validateExpectedOptions</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>ConfigurationException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Ignoring {}"</literal></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>

        <expr_stmt><expr><call><name><name>strategy</name><operator>.</operator><name>validateOptions</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>strategy</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Before constructing the ARS we first give it a chance to prepare the options map in any way it
     * would like to. For example datacenter auto-expansion or other templating to make the user interface
     * more usable. Note that this may mutate the passed strategyOptions Map.
     *
     * We do this prior to the construction of the strategyClass itself because at that point the option
     * map is already immutable and comes from {@link org.apache.cassandra.schema.ReplicationParams}
     * (and should probably stay that way so we don't start having bugs related to ReplicationParams being mutable).
     * Instead ARS classes get a static hook here via the prepareOptions(Map, Map) method to mutate the user input
     * before it becomes an immutable part of the ReplicationParams.
     *
     * @param strategyClass The class to call prepareOptions on
     * @param strategyOptions The proposed strategy options that will be potentially mutated by the prepareOptions
     *                        method.
     * @param previousStrategyOptions In the case of an ALTER statement, the previous strategy options of this class.
     *                                This map cannot be mutated.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>prepareReplicationStrategyOptions</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>AbstractReplicationStrategy</name></extends></argument>&gt;</argument_list></name></type> <name>strategyClass</name></decl></parameter>,
                                                         <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>strategyOptions</name></decl></parameter>,
                                                         <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>previousStrategyOptions</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <decl_stmt><decl><type><name>Method</name></type> <name>method</name> <init>= <expr><call><name><name>strategyClass</name><operator>.</operator><name>getDeclaredMethod</name></name><argument_list>(<argument><expr><literal type="string">"prepareOptions"</literal></expr></argument>, <argument><expr><name><name>Map</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>Map</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>method</name><operator>.</operator><name>invoke</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>strategyOptions</name></expr></argument>, <argument><expr><name>previousStrategyOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchMethodException</name></type> | <type><name>IllegalAccessException</name></type> | <type><name>InvocationTargetException</name></type> <name>ign</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <comment type="line">// If the subclass doesn't specify a prepareOptions method, then that means that it</comment>
            <comment type="line">// doesn't want to do anything to the options. So do nothing on reflection related exceptions.</comment>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>validateReplicationStrategy</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>,
                                                   <parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>AbstractReplicationStrategy</name></extends></argument>&gt;</argument_list></name></type> <name>strategyClass</name></decl></parameter>,
                                                   <parameter><decl><type><name>TokenMetadata</name></type> <name>tokenMetadata</name></decl></parameter>,
                                                   <parameter><decl><type><name>IEndpointSnitch</name></type> <name>snitch</name></decl></parameter>,
                                                   <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>strategyOptions</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>AbstractReplicationStrategy</name></type> <name>strategy</name> <init>= <expr><call><name>createInternal</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>strategyClass</name></expr></argument>, <argument><expr><name>tokenMetadata</name></expr></argument>, <argument><expr><name>snitch</name></expr></argument>, <argument><expr><name>strategyOptions</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>strategy</name><operator>.</operator><name>validateExpectedOptions</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>strategy</name><operator>.</operator><name>validateOptions</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>strategy</name><operator>.</operator><name>maybeWarnOnOptions</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>strategy</name><operator>.</operator><name>hasTransientReplicas</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>isTransientReplicationEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Transient replication is disabled. Enable in cassandra.yaml to use."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Class</name><argument_list type="generic">&lt;<argument><name>AbstractReplicationStrategy</name></argument>&gt;</argument_list></name></type> <name>getClass</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>cls</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>className</name> <init>= <expr><ternary><condition><expr><call><name><name>cls</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>cls</name></expr> </then><else>: <expr><literal type="string">"org.apache.cassandra.locator."</literal> <operator>+</operator> <name>cls</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><literal type="string">"org.apache.cassandra.locator.OldNetworkTopologyStrategy"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// see CASSANDRA-16301 </comment>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"The support for the OldNetworkTopologyStrategy has been removed in C* version 4.0. The keyspace strategy should be switch to NetworkTopologyStrategy"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>AbstractReplicationStrategy</name></argument>&gt;</argument_list></name></type> <name>strategyClass</name> <init>= <expr><call><name><name>FBUtilities</name><operator>.</operator><name>classForName</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>, <argument><expr><literal type="string">"replication strategy"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>AbstractReplicationStrategy</name><operator>.</operator><name><name>class</name><operator>.</operator><name>isAssignableFrom</name></name></name><argument_list>(<argument><expr><name>strategyClass</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Specified replication strategy class (%s) is not derived from AbstractReplicationStrategy"</literal></expr></argument>, <argument><expr><name>className</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>strategyClass</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasSameSettings</name><parameter_list>(<parameter><decl><type><name>AbstractReplicationStrategy</name></type> <name>other</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>getReplicationFactor</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getReplicationFactor</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>validateReplicationFactor</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <decl_stmt><decl><type><name>ReplicationFactor</name></type> <name>rf</name> <init>= <expr><call><name><name>ReplicationFactor</name><operator>.</operator><name>fromString</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>rf</name><operator>.</operator><name>hasTransientReplicas</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getNumTokens</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Transient replication is not supported with vnodes yet"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalArgumentException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>validateExpectedOptions</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>expectedOptions</name> <init>= <expr><call><name>recognizedOptions</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>expectedOptions</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <for>for <control>(<init><decl><type><name>String</name></type> <name>key</name> <range>: <expr><call><name><name>configOptions</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>expectedOptions</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Unrecognized strategy option {%s} passed to %s for keyspace %s"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <class><specifier>static</specifier> class <name><name>ReplicaCache</name><parameter_list>&lt;<parameter><name>K</name></parameter>, <parameter><name>V</name></parameter>&gt;</parameter_list></name>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>AtomicReference</name><argument_list type="generic">&lt;<argument><name><name>ReplicaHolder</name><argument_list type="generic">&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>cachedReplicas</name> <init>= <expr><operator>new</operator> <call><name><name>AtomicReference</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>ReplicaHolder</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <function><type><name>V</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>ringVersion</name></decl></parameter>, <parameter><decl><type><name>K</name></type> <name>keyToken</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>ReplicaHolder</name><argument_list type="generic">&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name></type> <name>replicaHolder</name> <init>= <expr><call><name>maybeClearAndGet</name><argument_list>(<argument><expr><name>ringVersion</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>replicaHolder</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>

            <return>return <expr><call><name><name>replicaHolder</name><operator>.</operator><name>replicas</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>keyToken</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><name>void</name></type> <name>put</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>ringVersion</name></decl></parameter>, <parameter><decl><type><name>K</name></type> <name>keyToken</name></decl></parameter>, <parameter><decl><type><name>V</name></type> <name>endpoints</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>ReplicaHolder</name><argument_list type="generic">&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name></type> <name>current</name> <init>= <expr><call><name>maybeClearAndGet</name><argument_list>(<argument><expr><name>ringVersion</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>current</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// if we have the same ringVersion, but already know about the keyToken the endpoints should be the same</comment>
                <expr_stmt><expr><call><name><name>current</name><operator>.</operator><name>replicas</name><operator>.</operator><name>putIfAbsent</name></name><argument_list>(<argument><expr><name>keyToken</name></expr></argument>, <argument><expr><name>endpoints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></function>

        <function><type><name><name>ReplicaHolder</name><argument_list type="generic">&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name></type> <name>maybeClearAndGet</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>ringVersion</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>ReplicaHolder</name><argument_list type="generic">&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name></type> <name>current</name> <init>= <expr><call><name><name>cachedReplicas</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ringVersion</name> <operator>==</operator> <name><name>current</name><operator>.</operator><name>ringVersion</name></name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>current</name></expr>;</return></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><name>ringVersion</name> <operator>&lt;</operator> <name><name>current</name><operator>.</operator><name>ringVersion</name></name></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// things have already moved on</comment>
                <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>

            <comment type="line">// If ring version has changed, create a fresh replica holder and try to replace the current one.</comment>
            <comment type="line">// This may race with other threads that have the same new ring version and one will win and the loosers</comment>
            <comment type="line">// will be garbage collected</comment>
            <decl_stmt><decl><type><name><name>ReplicaHolder</name><argument_list type="generic">&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name></type> <name>cleaned</name> <init>= <expr><operator>new</operator> <call><name><name>ReplicaHolder</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>ringVersion</name></expr></argument>, <argument><expr><call><name><name>current</name><operator>.</operator><name>replicas</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>cachedReplicas</name><operator>.</operator><name>compareAndSet</name></name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>cleaned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// A new ring version may have come along while making the new holder, so re-check the</comment>
            <comment type="line">// reference and return the ring version if the same, otherwise return null as there is no point</comment>
            <comment type="line">// in using it.</comment>
            <expr_stmt><expr><name>current</name> <operator>=</operator> <call><name><name>cachedReplicas</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>ringVersion</name> <operator>==</operator> <name><name>current</name><operator>.</operator><name>ringVersion</name></name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>current</name></expr>;</return></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></else></if_stmt>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>static</specifier> class <name><name>ReplicaHolder</name><parameter_list>&lt;<parameter><name>K</name></parameter>, <parameter><name>V</name></parameter>&gt;</parameter_list></name>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>long</name></type> <name>ringVersion</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>NonBlockingHashMap</name><argument_list type="generic">&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name></type> <name>replicas</name></decl>;</decl_stmt>

        <constructor><name>ReplicaHolder</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>ringVersion</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>expectedEntries</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ringVersion</name></name> <operator>=</operator> <name>ringVersion</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>replicas</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>NonBlockingHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>expectedEntries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>
    }</block></class>
}</block></class>
</unit>
