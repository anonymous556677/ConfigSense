<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/service/reads/range/RangeCommandIterator.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>reads</name><operator>.</operator><name>range</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Stage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>Keyspace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>PartitionRangeReadCommand</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>ReadCommand</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>filter</name><operator>.</operator><name>DataLimits</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>partitions</name><operator>.</operator><name>PartitionIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>rows</name><operator>.</operator><name>RowIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>ReadFailureException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>ReadTimeoutException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>UnavailableException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>EndpointsForRange</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>Replica</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>ReplicaPlan</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>metrics</name><operator>.</operator><name>ClientRequestMetrics</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>Message</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>MessagingService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>StorageProxy</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>reads</name><operator>.</operator><name>DataResolver</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>reads</name><operator>.</operator><name>ReadCallback</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>reads</name><operator>.</operator><name>repair</name><operator>.</operator><name>ReadRepair</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>tracing</name><operator>.</operator><name>Tracing</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>AbstractIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>CloseableIterator</name></name>;</import>

<class>class <name>RangeCommandIterator</name> <super_list><extends>extends <super><name><name>AbstractIterator</name><argument_list type="generic">&lt;<argument><name>RowIterator</name></argument>&gt;</argument_list></name></super></extends> <implements>implements <super><name>PartitionIterator</name></super></implements></super_list>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>RangeCommandIterator</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ClientRequestMetrics</name></type> <name>rangeMetrics</name> <init>= <expr><operator>new</operator> <call><name>ClientRequestMetrics</name><argument_list>(<argument><expr><literal type="string">"RangeSlice"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>CloseableIterator</name><argument_list type="generic">&lt;<argument><name><name>ReplicaPlan</name><operator>.</operator><name>ForRangeRead</name></name></argument>&gt;</argument_list></name></type> <name>replicaPlans</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>totalRangeCount</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>PartitionRangeReadCommand</name></type> <name>command</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>enforceStrictLiveness</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>long</name></type> <name>startTime</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>long</name></type> <name>queryStartNanoTime</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>DataLimits</name><operator>.</operator><name>Counter</name></name></type> <name>counter</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>PartitionIterator</name></type> <name>sentQueryIterator</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>maxConcurrencyFactor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>concurrencyFactor</name></decl>;</decl_stmt>
    <comment type="line">// The two following "metric" are maintained to improve the concurrencyFactor</comment>
    <comment type="line">// when it was not good enough initially.</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>liveReturned</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>rangesQueried</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>batchesRequested</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <constructor><name>RangeCommandIterator</name><parameter_list>(<parameter><decl><type><name><name>CloseableIterator</name><argument_list type="generic">&lt;<argument><name><name>ReplicaPlan</name><operator>.</operator><name>ForRangeRead</name></name></argument>&gt;</argument_list></name></type> <name>replicaPlans</name></decl></parameter>,
                         <parameter><decl><type><name>PartitionRangeReadCommand</name></type> <name>command</name></decl></parameter>,
                         <parameter><decl><type><name>int</name></type> <name>concurrencyFactor</name></decl></parameter>,
                         <parameter><decl><type><name>int</name></type> <name>maxConcurrencyFactor</name></decl></parameter>,
                         <parameter><decl><type><name>int</name></type> <name>totalRangeCount</name></decl></parameter>,
                         <parameter><decl><type><name>long</name></type> <name>queryStartNanoTime</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>replicaPlans</name></name> <operator>=</operator> <name>replicaPlans</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>command</name></name> <operator>=</operator> <name>command</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>concurrencyFactor</name></name> <operator>=</operator> <name>concurrencyFactor</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>maxConcurrencyFactor</name></name> <operator>=</operator> <name>maxConcurrencyFactor</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>totalRangeCount</name></name> <operator>=</operator> <name>totalRangeCount</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>queryStartNanoTime</name></name> <operator>=</operator> <name>queryStartNanoTime</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>startTime</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>enforceStrictLiveness</name> <operator>=</operator> <call><name><name>command</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>enforceStrictLiveness</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>protected</specifier> <name>RowIterator</name></type> <name>computeNext</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <while>while <condition>(<expr><name>sentQueryIterator</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><call><name><name>sentQueryIterator</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// If we don't have more range to handle, we're done</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>replicaPlans</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><call><name>endOfData</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

                <comment type="line">// else, sends the next batch of concurrent queries (after having close the previous iterator)</comment>
                <if_stmt><if>if <condition>(<expr><name>sentQueryIterator</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>liveReturned</name> <operator>+=</operator> <call><name><name>counter</name><operator>.</operator><name>counted</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>sentQueryIterator</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                    <comment type="line">// It's not the first batch of queries and we're not done, so we we can use what has been</comment>
                    <comment type="line">// returned so far to improve our rows-per-range estimate and update the concurrency accordingly</comment>
                    <expr_stmt><expr><call><name>updateConcurrencyFactor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>sentQueryIterator</name> <operator>=</operator> <call><name>sendNextRequests</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>

            <return>return <expr><call><name><name>sentQueryIterator</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>UnavailableException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>rangeMetrics</name><operator>.</operator><name>unavailables</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>e</name></expr>;</throw>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>ReadTimeoutException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>rangeMetrics</name><operator>.</operator><name>timeouts</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>e</name></expr>;</throw>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>ReadFailureException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>rangeMetrics</name><operator>.</operator><name>failures</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>e</name></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>updateConcurrencyFactor</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>liveReturned</name> <operator>+=</operator> <call><name><name>counter</name><operator>.</operator><name>counted</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>concurrencyFactor</name> <operator>=</operator> <call><name>computeConcurrencyFactor</name><argument_list>(<argument><expr><name>totalRangeCount</name></expr></argument>, <argument><expr><name>rangesQueried</name></expr></argument>, <argument><expr><name>maxConcurrencyFactor</name></expr></argument>, <argument><expr><call><name><name>command</name><operator>.</operator><name>limits</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>liveReturned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>static</specifier> <name>int</name></type> <name>computeConcurrencyFactor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>totalRangeCount</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rangesQueried</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxConcurrencyFactor</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>liveReturned</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>maxConcurrencyFactor</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>maxConcurrencyFactor</name></expr></argument>, <argument><expr><name>totalRangeCount</name> <operator>-</operator> <name>rangesQueried</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>liveReturned</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// we haven't actually gotten any results, so query up to the limit if not results so far</comment>
            <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Didn't get any response rows; new concurrent requests: {}"</literal></expr></argument>, <argument><expr><name>maxConcurrencyFactor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>maxConcurrencyFactor</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Otherwise, compute how many rows per range we got on average and pick a concurrency factor</comment>
        <comment type="line">// that should allow us to fetch all remaining rows with the next batch of (concurrent) queries.</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>remainingRows</name> <init>= <expr><name>limit</name> <operator>-</operator> <name>liveReturned</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>rowsPerRange</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <name>liveReturned</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>rangesQueried</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>concurrencyFactor</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>maxConcurrencyFactor</name></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><name>remainingRows</name> <operator>/</operator> <name>rowsPerRange</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Didn't get enough response rows; actual rows per range: {}; remaining rows: {}, new concurrent requests: {}"</literal></expr></argument>,
                     <argument><expr><name>rowsPerRange</name></expr></argument>, <argument><expr><name>remainingRows</name></expr></argument>, <argument><expr><name>concurrencyFactor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>concurrencyFactor</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Queries the provided sub-range.
     *
     * @param replicaPlan the subRange to query.
     * @param isFirst in the case where multiple queries are sent in parallel, whether that's the first query on
     * that batch or not. The reason it matters is that whe paging queries, the command (more specifically the
     * {@code DataLimits}) may have "state" information and that state may only be valid for the first query (in
     * that it's the query that "continues" whatever we're previously queried).
     */</comment>
    <function><type><specifier>private</specifier> <name>SingleRangeResponse</name></type> <name>query</name><parameter_list>(<parameter><decl><type><name><name>ReplicaPlan</name><operator>.</operator><name>ForRangeRead</name></name></type> <name>replicaPlan</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isFirst</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>PartitionRangeReadCommand</name></type> <name>rangeCommand</name> <init>= <expr><call><name><name>command</name><operator>.</operator><name>forSubRange</name></name><argument_list>(<argument><expr><call><name><name>replicaPlan</name><operator>.</operator><name>range</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>isFirst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <comment type="line">// If enabled, request repaired data tracking info from full replicas, but</comment>
        <comment type="line">// only if there are multiple full replicas to compare results from.</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>trackRepairedStatus</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getRepairedDataTrackingForRangeReadsEnabled</name></name><argument_list>()</argument_list></call>
                                      <operator>&amp;&amp;</operator> <call><name><name>replicaPlan</name><operator>.</operator><name>contacts</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>Replica</name><operator>::</operator><name>isFull</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>ReplicaPlan</name><operator>.</operator><name>SharedForRangeRead</name></name></type> <name>sharedReplicaPlan</name> <init>= <expr><call><name><name>ReplicaPlan</name><operator>.</operator><name>shared</name></name><argument_list>(<argument><expr><name>replicaPlan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ReadRepair</name><argument_list type="generic">&lt;<argument><name>EndpointsForRange</name></argument>, <argument><name><name>ReplicaPlan</name><operator>.</operator><name>ForRangeRead</name></name></argument>&gt;</argument_list></name></type> <name>readRepair</name> <init>=
                <expr><call><name><name>ReadRepair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>sharedReplicaPlan</name></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>DataResolver</name><argument_list type="generic">&lt;<argument><name>EndpointsForRange</name></argument>, <argument><name><name>ReplicaPlan</name><operator>.</operator><name>ForRangeRead</name></name></argument>&gt;</argument_list></name></type> <name>resolver</name> <init>=
                <expr><operator>new</operator> <call><name><name>DataResolver</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>rangeCommand</name></expr></argument>, <argument><expr><name>sharedReplicaPlan</name></expr></argument>, <argument><expr><name>readRepair</name></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>, <argument><expr><name>trackRepairedStatus</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ReadCallback</name><argument_list type="generic">&lt;<argument><name>EndpointsForRange</name></argument>, <argument><name><name>ReplicaPlan</name><operator>.</operator><name>ForRangeRead</name></name></argument>&gt;</argument_list></name></type> <name>handler</name> <init>=
                <expr><operator>new</operator> <call><name><name>ReadCallback</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>resolver</name></expr></argument>, <argument><expr><name>rangeCommand</name></expr></argument>, <argument><expr><name>sharedReplicaPlan</name></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>replicaPlan</name><operator>.</operator><name>contacts</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name><name>replicaPlan</name><operator>.</operator><name>contacts</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>isSelf</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>Stage</name><operator>.</operator><name>READ</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>StorageProxy</name><operator>.</operator><name>LocalReadRunnable</name></name><argument_list>(<argument><expr><name>rangeCommand</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>, <argument><expr><name>trackRepairedStatus</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Replica</name></type> <name>replica</name> <range>: <expr><call><name><name>replicaPlan</name><operator>.</operator><name>contacts</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Enqueuing request to {}"</literal></expr></argument>, <argument><expr><name>replica</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>ReadCommand</name></type> <name>command</name> <init>= <expr><ternary><condition><expr><call><name><name>replica</name><operator>.</operator><name>isFull</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>rangeCommand</name></expr> </then><else>: <expr><call><name><name>rangeCommand</name><operator>.</operator><name>copyAsTransientQuery</name></name><argument_list>(<argument><expr><name>replica</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>ReadCommand</name></argument>&gt;</argument_list></name></type> <name>message</name> <init>= <expr><call><name><name>command</name><operator>.</operator><name>createMessage</name></name><argument_list>(<argument><expr><name>trackRepairedStatus</name> <operator>&amp;&amp;</operator> <call><name><name>replica</name><operator>.</operator><name>isFull</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>MessagingService</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>sendWithCallback</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><call><name><name>replica</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></else></if_stmt>

        <return>return <expr><operator>new</operator> <call><name>SingleRangeResponse</name><argument_list>(<argument><expr><name>resolver</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>, <argument><expr><name>readRepair</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>PartitionIterator</name></type> <name>sendNextRequests</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PartitionIterator</name></argument>&gt;</argument_list></name></type> <name>concurrentQueries</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>concurrencyFactor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>ReadRepair</name><argument_list type="generic">&lt;<argument><name>?</name></argument>, <argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>readRepairs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>concurrencyFactor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <try>try
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>concurrencyFactor</name> <operator>&amp;&amp;</operator> <call><name><name>replicaPlans</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr/>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name><name>ReplicaPlan</name><operator>.</operator><name>ForRangeRead</name></name></type> <name>replicaPlan</name> <init>= <expr><call><name><name>replicaPlans</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"resource"</literal></expr></argument>)</argument_list></annotation> <comment type="line">// response will be closed by concatAndBlockOnRepair, or in the catch block below</comment>
                <type><name>SingleRangeResponse</name></type> <name>response</name> <init>= <expr><call><name>query</name><argument_list>(<argument><expr><name>replicaPlan</name></expr></argument>, <argument><expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>concurrentQueries</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>readRepairs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>response</name><operator>.</operator><name>getReadRepair</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// due to RangeMerger, coordinator may fetch more ranges than required by concurrency factor.</comment>
                <expr_stmt><expr><name>rangesQueried</name> <operator>+=</operator> <call><name><name>replicaPlan</name><operator>.</operator><name>vnodeCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name><name>replicaPlan</name><operator>.</operator><name>vnodeCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name>batchesRequested</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>PartitionIterator</name></type> <name>response</name> <range>: <expr><name>concurrentQueries</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>response</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <throw>throw <expr><name>t</name></expr>;</throw>
        </block_content>}</block></catch></try>

        <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Submitted {} concurrent range requests"</literal></expr></argument>, <argument><expr><call><name><name>concurrentQueries</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// We want to count the results for the sake of updating the concurrency factor (see updateConcurrencyFactor)</comment>
        <comment type="line">// but we don't want to enforce any particular limit at this point (this could break code than rely on</comment>
        <comment type="line">// postReconciliationProcessing), hence the DataLimits.NONE.</comment>
        <expr_stmt><expr><name>counter</name> <operator>=</operator> <call><name><name>DataLimits</name><operator>.</operator><name>NONE</name><operator>.</operator><name>newCounter</name></name><argument_list>(<argument><expr><call><name><name>command</name><operator>.</operator><name>nowInSec</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><call><name><name>command</name><operator>.</operator><name>selectsFullPartition</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>enforceStrictLiveness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>counter</name><operator>.</operator><name>applyTo</name></name><argument_list>(<argument><expr><call><name><name>StorageProxy</name><operator>.</operator><name>concatAndBlockOnRepair</name></name><argument_list>(<argument><expr><name>concurrentQueries</name></expr></argument>, <argument><expr><name>readRepairs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>sentQueryIterator</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>sentQueryIterator</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name><name>replicaPlans</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <finally>finally
        <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>latency</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>startTime</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>rangeMetrics</name><operator>.</operator><name>addNano</name></name><argument_list>(<argument><expr><name>latency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Keyspace</name><operator>.</operator><name>openAndGetStore</name></name><argument_list>(<argument><expr><call><name><name>command</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>metric</name><operator>.</operator><name>coordinatorScanLatency</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>latency</name></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>NANOSECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><name>int</name></type> <name>rangesQueried</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>rangesQueried</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><name>int</name></type> <name>batchesRequested</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>batchesRequested</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><name>int</name></type> <name>maxConcurrencyFactor</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>maxConcurrencyFactor</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><name>int</name></type> <name>concurrencyFactor</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>concurrencyFactor</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
