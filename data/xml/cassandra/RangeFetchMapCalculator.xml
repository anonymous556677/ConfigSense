<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/dht/RangeFetchMapCalculator.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>math</name><operator>.</operator><name>BigInteger</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Collectors</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Predicate</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Predicates</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>HashMultimap</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Multimap</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>EndpointsByRange</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>EndpointsForRange</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>InetAddressAndPort</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>Replica</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>Replicas</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>psjava</name><operator>.</operator><name>algo</name><operator>.</operator><name>graph</name><operator>.</operator><name>flownetwork</name><operator>.</operator><name>FordFulkersonAlgorithm</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>psjava</name><operator>.</operator><name>algo</name><operator>.</operator><name>graph</name><operator>.</operator><name>flownetwork</name><operator>.</operator><name>MaximumFlowAlgorithm</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>psjava</name><operator>.</operator><name>algo</name><operator>.</operator><name>graph</name><operator>.</operator><name>flownetwork</name><operator>.</operator><name>MaximumFlowAlgorithmResult</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>psjava</name><operator>.</operator><name>algo</name><operator>.</operator><name>graph</name><operator>.</operator><name>pathfinder</name><operator>.</operator><name>DFSPathFinder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>psjava</name><operator>.</operator><name>ds</name><operator>.</operator><name>graph</name><operator>.</operator><name>CapacityEdge</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>psjava</name><operator>.</operator><name>ds</name><operator>.</operator><name>graph</name><operator>.</operator><name>MutableCapacityGraph</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>psjava</name><operator>.</operator><name>ds</name><operator>.</operator><name>numbersystrem</name><operator>.</operator><name>IntegerNumberSystem</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>psjava</name><operator>.</operator><name>ds</name><operator>.</operator><name>math</name><operator>.</operator><name>Function</name></name>;</import>

<comment type="block" format="javadoc">/**
 * We model the graph like this:
 * * Each range we are about to stream is a vertex in the graph
 * * Each node that can provide a range is a vertex in the graph
 * * We add an edge from each range to the node that can provide the range
 * * Then, to be able to solve the maximum flow problem using Ford-Fulkerson we add a super source with edges to all range vertices
 *   and a super sink with incoming edges from all the node vertices.
 * * The capacity on the edges between the super source and the range-vertices is 1
 * * The capacity on the edges between the range-vertices and the node vertices is infinite
 * * The capacity on the edges between the nodes-vertices and the super sink is ceil(#range-vertices/#node-vertices)
 *   - if we have more machines than ranges to stream the capacity will be 1 (each machine will stream at most 1 range)
 * * Since the sum of the capacity on the edges from the super source to the range-vertices is less or equal to the sum
 *   of the capacities between the node-vertices and super sink we know that to get maximum flow we will use all the
 *   range-vertices. (Say we have x ranges, y machines to provide them, total supersource -&gt; range-vertice capacity will be x,
 *   total node-vertice -&gt; supersink capacity will be (y * ceil(x / y)) which worst case is x if x==y). The capacity between
 *   the range-vertices and node-vertices is infinite.
 * * Then we try to solve the max-flow problem using psjava
 * * If we can't find a solution where the total flow is = number of range-vertices, we bump the capacity between the node-vertices
 *   and the super source and try again.
 *
 *
 */</comment>
<class><specifier>public</specifier> class <name>RangeFetchMapCalculator</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>RangeFetchMapCalculator</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>TRIVIAL_RANGE_LIMIT</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>EndpointsByRange</name></type> <name>rangesWithSources</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Predicate</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>&gt;</argument_list></name></type> <name>sourceFilters</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>keyspace</name></decl>;</decl_stmt>
    <comment type="line">//We need two Vertices to act as source and destination in the algorithm</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Vertex</name></type> <name>sourceVertex</name> <init>= <expr><call><name><name>OuterVertex</name><operator>.</operator><name>getSourceVertex</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Vertex</name></type> <name>destinationVertex</name> <init>= <expr><call><name><name>OuterVertex</name><operator>.</operator><name>getDestinationVertex</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>trivialRanges</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>RangeFetchMapCalculator</name><parameter_list>(<parameter><decl><type><name>EndpointsByRange</name></type> <name>rangesWithSources</name></decl></parameter>,
                                   <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name><name>RangeStreamer</name><operator>.</operator><name>SourceFilter</name></name></argument>&gt;</argument_list></name></type> <name>sourceFilters</name></decl></parameter>,
                                   <parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>rangesWithSources</name></name> <operator>=</operator> <name>rangesWithSources</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sourceFilters</name></name> <operator>=</operator> <call><name><name>Predicates</name><operator>.</operator><name>and</name></name><argument_list>(<argument><expr><name>sourceFilters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>keyspace</name></name> <operator>=</operator> <name>keyspace</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>trivialRanges</name></name> <operator>=</operator> <call><name><name>rangesWithSources</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call>
                                              <operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call>
                                              <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>RangeFetchMapCalculator</name><operator>::</operator><name>isTrivial</name></expr></argument>)</argument_list></call>
                                              <operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toSet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>static</specifier> <name>boolean</name></type> <name>isTrivial</name><parameter_list>(<parameter><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>IPartitioner</name></type> <name>partitioner</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getPartitioner</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>partitioner</name><operator>.</operator><name>splitter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isPresent</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>BigInteger</name></type> <name>l</name> <init>= <expr><call><name><name>partitioner</name><operator>.</operator><name>splitter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call><operator>.</operator><call><name>valueForToken</name><argument_list>(<argument><expr><name><name>range</name><operator>.</operator><name>left</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>BigInteger</name></type> <name>r</name> <init>= <expr><call><name><name>partitioner</name><operator>.</operator><name>splitter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call><operator>.</operator><call><name>valueForToken</name><argument_list>(<argument><expr><name><name>range</name><operator>.</operator><name>right</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>r</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>r</name><operator>.</operator><name>subtract</name></name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>BigInteger</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>TRIVIAL_RANGE_LIMIT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Multimap</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getRangeFetchMap</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Multimap</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>fetchMap</name> <init>= <expr><call><name><name>HashMultimap</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>fetchMap</name><operator>.</operator><name>putAll</name></name><argument_list>(<argument><expr><call><name>getRangeFetchMapForNonTrivialRanges</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fetchMap</name><operator>.</operator><name>putAll</name></name><argument_list>(<argument><expr><call><name>getRangeFetchMapForTrivialRanges</name><argument_list>(<argument><expr><name>fetchMap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>fetchMap</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><name><name>Multimap</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getRangeFetchMapForNonTrivialRanges</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <comment type="line">//Get the graph with edges between ranges and their source endpoints</comment>
        <decl_stmt><decl><type><name><name>MutableCapacityGraph</name><argument_list type="generic">&lt;<argument><name>Vertex</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>graph</name> <init>= <expr><call><name>getGraph</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">//Add source and destination vertex and edges</comment>
        <expr_stmt><expr><call><name>addSourceAndDestination</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><call><name>getDestinationLinkCapacity</name><argument_list>(<argument><expr><name>graph</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>flow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>MaximumFlowAlgorithmResult</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name><name>CapacityEdge</name><argument_list type="generic">&lt;<argument><name>Vertex</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">//We might not be working on all ranges</comment>
        <while>while <condition>(<expr><name>flow</name> <operator>&lt;</operator> <call><name>getTotalRangeVertices</name><argument_list>(<argument><expr><name>graph</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>flow</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <comment type="line">//We could not find a path with previous graph. Bump the capacity b/w endpoint vertices and destination by 1</comment>
                <expr_stmt><expr><call><name>incrementCapacity</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name>MaximumFlowAlgorithm</name></type> <name>fordFulkerson</name> <init>= <expr><call><name><name>FordFulkersonAlgorithm</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><call><name><name>DFSPathFinder</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>fordFulkerson</name><operator>.</operator><name>calc</name></name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><name>sourceVertex</name></expr></argument>, <argument><expr><name>destinationVertex</name></expr></argument>, <argument><expr><call><name><name>IntegerNumberSystem</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>newFlow</name> <init>= <expr><call><name><name>result</name><operator>.</operator><name>calcTotalFlow</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <assert>assert <expr><name>newFlow</name> <operator>&gt;</operator> <name>flow</name></expr>;</assert>   <comment type="line">//We are not making progress which should not happen</comment>
            <expr_stmt><expr><name>flow</name> <operator>=</operator> <name>newFlow</name></expr>;</expr_stmt>
        </block_content>}</block></while>

        <return>return <expr><call><name>getRangeFetchMapFromGraphResult</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><name><name>Multimap</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getRangeFetchMapForTrivialRanges</name><parameter_list>(<parameter><decl><type><name><name>Multimap</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>optimisedMap</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Multimap</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>fetchMap</name> <init>= <expr><call><name><name>HashMultimap</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>trivialRange</name> <range>: <expr><name>trivialRanges</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>added</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>localDCCheck</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><operator>!</operator><name>added</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// sort with the endpoint having the least number of streams first:</comment>
                <decl_stmt><decl><type><name>EndpointsForRange</name></type> <name>replicas</name> <init>= <expr><call><name><name>rangesWithSources</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>trivialRange</name></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>sorted</name><argument_list>(<argument><expr><call><name><name>Comparator</name><operator>.</operator><name>comparingInt</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>o</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>optimisedMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>o</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>Replicas</name><operator>.</operator><name>temporaryAssertFull</name></name><argument_list>(<argument><expr><name>replicas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>Replica</name></type> <name>replica</name> <range>: <expr><name>replicas</name></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name>passFilters</name><argument_list>(<argument><expr><name>replica</name></expr></argument>, <argument><expr><name>localDCCheck</name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>added</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                        <comment type="line">// if we pass filters, it means that we don't filter away localhost and we can count it as a source,</comment>
                        <comment type="line">// see RangeFetchMapCalculator#addEndpoints  and RangeStreamer#getRangeFetchMap</comment>
                        <if_stmt><if>if <condition>(<expr><call><name><name>replica</name><operator>.</operator><name>isSelf</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                            <continue>continue;</continue></block_content></block></if></if_stmt> <comment type="line">// but don't add localhost to avoid streaming locally</comment>
                        <expr_stmt><expr><call><name><name>fetchMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>replica</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>trivialRange</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>added</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>localDCCheck</name></expr>)</condition><block type="pseudo"><block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Unable to find sufficient sources for streaming range "</literal> <operator>+</operator> <name>trivialRange</name> <operator>+</operator> <literal type="string">" in keyspace "</literal> <operator>+</operator> <name>keyspace</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>added</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Using other DC endpoints for streaming for range: {} and keyspace {}"</literal></expr></argument>, <argument><expr><name>trivialRange</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>localDCCheck</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            </block_content>}</block></while>
        </block_content>}</block></for>
        <return>return <expr><name>fetchMap</name></expr>;</return>
    </block_content>}</block></function>
    <comment type="block">/*
        Return the total number of range vertices in the graph
     */</comment>
    <function><type><specifier>private</specifier> <name>int</name></type> <name>getTotalRangeVertices</name><parameter_list>(<parameter><decl><type><name><name>MutableCapacityGraph</name><argument_list type="generic">&lt;<argument><name>Vertex</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>graph</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Vertex</name></type> <name>vertex</name> <range>: <expr><call><name><name>graph</name><operator>.</operator><name>getVertices</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>vertex</name><operator>.</operator><name>isRangeVertex</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <return>return <expr><name>count</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     *  Convert the max flow graph to Multimap&lt;InetAddress, Range&lt;Token&gt;&gt;
     *      We iterate over all range vertices and find an edge with flow of more than zero connecting to endpoint vertex.
     * @param graph  The graph to convert
     * @param result Flow algorithm result
     * @return  Multi Map of Machine to Ranges
     */</comment>
    <function><type><specifier>private</specifier> <name><name>Multimap</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getRangeFetchMapFromGraphResult</name><parameter_list>(<parameter><decl><type><name><name>MutableCapacityGraph</name><argument_list type="generic">&lt;<argument><name>Vertex</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>graph</name></decl></parameter>, <parameter><decl><type><name><name>MaximumFlowAlgorithmResult</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name><name>CapacityEdge</name><argument_list type="generic">&lt;<argument><name>Vertex</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>result</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Multimap</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>, <argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>rangeFetchMapMap</name> <init>= <expr><call><name><name>HashMultimap</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>rangeFetchMapMap</name></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Function</name><argument_list type="generic">&lt;<argument><name><name>CapacityEdge</name><argument_list type="generic">&lt;<argument><name>Vertex</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>flowFunction</name> <init>= <expr><call><name><name>result</name><operator>.</operator><name>calcFlowFunction</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>Vertex</name></type> <name>vertex</name> <range>: <expr><call><name><name>graph</name><operator>.</operator><name>getVertices</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>vertex</name><operator>.</operator><name>isRangeVertex</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>boolean</name></type> <name>sourceFound</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name><name>CapacityEdge</name><argument_list type="generic">&lt;<argument><name>Vertex</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>e</name> <range>: <expr><call><name><name>graph</name><operator>.</operator><name>getEdges</name></name><argument_list>(<argument><expr><name>vertex</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <if_stmt><if>if<condition>(<expr><call><name><name>flowFunction</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
                    <block>{<block_content>
                        <assert>assert <expr><operator>!</operator><name>sourceFound</name></expr>;</assert>
                        <expr_stmt><expr><name>sourceFound</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                        <if_stmt><if>if<condition>(<expr><call><name><name>e</name><operator>.</operator><name>to</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEndpointVertex</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><call><name><name>rangeFetchMapMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>EndpointVertex</name><operator>)</operator><call><name><name>e</name><operator>.</operator><name>to</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getEndpoint</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>RangeVertex</name><operator>)</operator><name>vertex</name><operator>)</operator><operator>.</operator><call><name>getRange</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                        <if type="elseif">else if<condition>(<expr><call><name><name>e</name><operator>.</operator><name>from</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEndpointVertex</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><call><name><name>rangeFetchMapMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>EndpointVertex</name><operator>)</operator><call><name><name>e</name><operator>.</operator><name>from</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getEndpoint</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>RangeVertex</name><operator>)</operator><name>vertex</name><operator>)</operator><operator>.</operator><call><name>getRange</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>

                <assert>assert <expr><name>sourceFound</name></expr>;</assert>

            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <return>return <expr><name>rangeFetchMapMap</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * This will increase the capacity from endpoint vertices to destination by incrementalCapacity
     * @param graph The graph to work on
     * @param incrementalCapacity Amount by which to increment capacity
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>incrementCapacity</name><parameter_list>(<parameter><decl><type><name><name>MutableCapacityGraph</name><argument_list type="generic">&lt;<argument><name>Vertex</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>graph</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>incrementalCapacity</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>Vertex</name></type> <name>vertex</name> <range>: <expr><call><name><name>graph</name><operator>.</operator><name>getVertices</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>vertex</name><operator>.</operator><name>isEndpointVertex</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>graph</name><operator>.</operator><name>addEdge</name></name><argument_list>(<argument><expr><name>vertex</name></expr></argument>, <argument><expr><name>destinationVertex</name></expr></argument>, <argument><expr><name>incrementalCapacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Add source and destination vertices. Add edges of capacity 1 b/w source and range vertices.
     * Also add edges b/w endpoint vertices and destination vertex with capacity of 'destinationCapacity'
     * @param graph Graph to work on
     * @param destinationCapacity The capacity for edges b/w endpoint vertices and destination
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>addSourceAndDestination</name><parameter_list>(<parameter><decl><type><name><name>MutableCapacityGraph</name><argument_list type="generic">&lt;<argument><name>Vertex</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>graph</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>destinationCapacity</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>graph</name><operator>.</operator><name>insertVertex</name></name><argument_list>(<argument><expr><name>sourceVertex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>graph</name><operator>.</operator><name>insertVertex</name></name><argument_list>(<argument><expr><name>destinationVertex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>Vertex</name></type> <name>vertex</name> <range>: <expr><call><name><name>graph</name><operator>.</operator><name>getVertices</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>vertex</name><operator>.</operator><name>isRangeVertex</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>graph</name><operator>.</operator><name>addEdge</name></name><argument_list>(<argument><expr><name>sourceVertex</name></expr></argument>, <argument><expr><name>vertex</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><call><name><name>vertex</name><operator>.</operator><name>isEndpointVertex</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>graph</name><operator>.</operator><name>addEdge</name></name><argument_list>(<argument><expr><name>vertex</name></expr></argument>, <argument><expr><name>destinationVertex</name></expr></argument>, <argument><expr><name>destinationCapacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Find the initial capacity which we want to use b/w machine vertices and destination to keep things optimal
     * @param graph Graph to work on
     * @return  The initial capacity
     */</comment>
    <function><type><specifier>private</specifier> <name>int</name></type> <name>getDestinationLinkCapacity</name><parameter_list>(<parameter><decl><type><name><name>MutableCapacityGraph</name><argument_list type="generic">&lt;<argument><name>Vertex</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>graph</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">//Find total nodes which are endpoints and ranges</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>endpointVertices</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>rangeVertices</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Vertex</name></type> <name>vertex</name> <range>: <expr><call><name><name>graph</name><operator>.</operator><name>getVertices</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>vertex</name><operator>.</operator><name>isEndpointVertex</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>endpointVertices</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><call><name><name>vertex</name><operator>.</operator><name>isRangeVertex</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>rangeVertices</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>ceil</name></name><argument_list>(<argument><expr><name>rangeVertices</name> <operator>/</operator> <name>endpointVertices</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     *  Generate a graph with all ranges and endpoints as vertices. It will create edges b/w a range and its filtered source endpoints
     *  It will try to use sources from local DC if possible
     * @return  The generated graph
     */</comment>
    <function><type><specifier>private</specifier> <name><name>MutableCapacityGraph</name><argument_list type="generic">&lt;<argument><name>Vertex</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>getGraph</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>MutableCapacityGraph</name><argument_list type="generic">&lt;<argument><name>Vertex</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>capacityGraph</name> <init>= <expr><call><name><name>MutableCapacityGraph</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">//Connect all ranges with all source endpoints</comment>
        <for>for <control>(<init><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name> <range>: <expr><call><name><name>rangesWithSources</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>trivialRanges</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Not optimising trivial range {} for keyspace {}"</literal></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name>RangeVertex</name></type> <name>rangeVertex</name> <init>= <expr><operator>new</operator> <call><name>RangeVertex</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">//Try to only add source endpoints from same DC</comment>
            <decl_stmt><decl><type><name>boolean</name></type> <name>sourceFound</name> <init>= <expr><call><name>addEndpoints</name><argument_list>(<argument><expr><name>capacityGraph</name></expr></argument>, <argument><expr><name>rangeVertex</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>sourceFound</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Using other DC endpoints for streaming for range: {} and keyspace {}"</literal></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>sourceFound</name> <operator>=</operator> <call><name>addEndpoints</name><argument_list>(<argument><expr><name>capacityGraph</name></expr></argument>, <argument><expr><name>rangeVertex</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>sourceFound</name></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Unable to find sufficient sources for streaming range "</literal> <operator>+</operator> <name>range</name> <operator>+</operator> <literal type="string">" in keyspace "</literal> <operator>+</operator> <name>keyspace</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        </block_content>}</block></for>

        <return>return <expr><name>capacityGraph</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create edges with infinite capacity b/w range vertex and all its source endpoints which clear the filters
     * @param capacityGraph The Capacity graph on which changes are made
     * @param rangeVertex The range for which we need to add all its source endpoints
     * @param localDCCheck Should add source endpoints from local DC only
     * @return If we were able to add atleast one source for this range after applying filters to endpoints
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>addEndpoints</name><parameter_list>(<parameter><decl><type><name><name>MutableCapacityGraph</name><argument_list type="generic">&lt;<argument><name>Vertex</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>capacityGraph</name></decl></parameter>, <parameter><decl><type><name>RangeVertex</name></type> <name>rangeVertex</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>localDCCheck</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>sourceFound</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Replicas</name><operator>.</operator><name>temporaryAssertFull</name></name><argument_list>(<argument><expr><call><name><name>rangesWithSources</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>rangeVertex</name><operator>.</operator><name>getRange</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>Replica</name></type> <name>replica</name> <range>: <expr><call><name><name>rangesWithSources</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>rangeVertex</name><operator>.</operator><name>getRange</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>passFilters</name><argument_list>(<argument><expr><name>replica</name></expr></argument>, <argument><expr><name>localDCCheck</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>sourceFound</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                <comment type="line">// if we pass filters, it means that we don't filter away localhost and we can count it as a source:</comment>
                <if_stmt><if>if <condition>(<expr><call><name><name>replica</name><operator>.</operator><name>isSelf</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <continue>continue;</continue></block_content></block></if></if_stmt> <comment type="line">// but don't add localhost to the graph to avoid streaming locally</comment>
                <decl_stmt><decl><type><specifier>final</specifier> <name>Vertex</name></type> <name>endpointVertex</name> <init>= <expr><operator>new</operator> <call><name>EndpointVertex</name><argument_list>(<argument><expr><call><name><name>replica</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>capacityGraph</name><operator>.</operator><name>insertVertex</name></name><argument_list>(<argument><expr><name>rangeVertex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>capacityGraph</name><operator>.</operator><name>insertVertex</name></name><argument_list>(<argument><expr><name>endpointVertex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>capacityGraph</name><operator>.</operator><name>addEdge</name></name><argument_list>(<argument><expr><name>rangeVertex</name></expr></argument>, <argument><expr><name>endpointVertex</name></expr></argument>, <argument><expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>sourceFound</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isInLocalDC</name><parameter_list>(<parameter><decl><type><name>Replica</name></type> <name>replica</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getLocalDataCenter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getEndpointSnitch</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDatacenter</name><argument_list>(<argument><expr><name>replica</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     *
     * @param replica   Replica to check
     * @param localDCCheck Allow endpoints with local DC
     * @return   True if filters pass this endpoint
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>passFilters</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Replica</name></type> <name>replica</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>localDCCheck</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>sourceFilters</name><operator>.</operator><name>apply</name></name><argument_list>(<argument><expr><name>replica</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>localDCCheck</name> <operator>||</operator> <call><name>isInLocalDC</name><argument_list>(<argument><expr><name>replica</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>private</specifier> <specifier>static</specifier> <specifier>abstract</specifier> class <name>Vertex</name>
    <block>{
        <enum><specifier>public</specifier> enum <name>VERTEX_TYPE</name>
        <block>{
            <decl><name>ENDPOINT</name></decl>, <decl><name>RANGE</name></decl>, <decl><name>SOURCE</name></decl>, <decl><name>DESTINATION</name></decl>
        }</block></enum>

        <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>VERTEX_TYPE</name></type> <name>getVertexType</name><parameter_list>()</parameter_list>;</function_decl>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isEndpointVertex</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name>getVertexType</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>VERTEX_TYPE</name><operator>.</operator><name>ENDPOINT</name></name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isRangeVertex</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name>getVertexType</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>VERTEX_TYPE</name><operator>.</operator><name>RANGE</name></name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block">/*
       This Vertex will contain the endpoints.
     */</comment>
    <class><specifier>private</specifier> <specifier>static</specifier> class <name>EndpointVertex</name> <super_list><extends>extends <super><name>Vertex</name></super></extends></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>InetAddressAndPort</name></type> <name>endpoint</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>EndpointVertex</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <assert>assert <expr><name>endpoint</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>endpoint</name></name> <operator>=</operator> <name>endpoint</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>InetAddressAndPort</name></type> <name>getEndpoint</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>endpoint</name></expr>;</return>
        </block_content>}</block></function>


        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>VERTEX_TYPE</name></type> <name>getVertexType</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name><name>VERTEX_TYPE</name><operator>.</operator><name>ENDPOINT</name></name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>o</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name>getClass</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>o</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>EndpointVertex</name></type> <name>that</name> <init>= <expr><operator>(</operator><name>EndpointVertex</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>

            <return>return <expr><call><name><name>endpoint</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>endpoint</name></name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>endpoint</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block">/*
       This Vertex will contain the Range
     */</comment>
    <class><specifier>private</specifier> <specifier>static</specifier> class <name>RangeVertex</name> <super_list><extends>extends <super><name>Vertex</name></super></extends></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>RangeVertex</name><parameter_list>(<parameter><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <assert>assert <expr><name>range</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>range</name></name> <operator>=</operator> <name>range</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>getRange</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>range</name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>VERTEX_TYPE</name></type> <name>getVertexType</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name><name>VERTEX_TYPE</name><operator>.</operator><name>RANGE</name></name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>o</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name>getClass</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>o</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>RangeVertex</name></type> <name>that</name> <init>= <expr><operator>(</operator><name>RangeVertex</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>

            <return>return <expr><call><name><name>range</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>range</name></name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>range</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block">/*
       This denotes the source and destination Vertex we need for the flow graph
     */</comment>
    <class><specifier>private</specifier> <specifier>static</specifier> class <name>OuterVertex</name> <super_list><extends>extends <super><name>Vertex</name></super></extends></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>source</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>OuterVertex</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>source</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>source</name></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Vertex</name></type> <name>getSourceVertex</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>OuterVertex</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Vertex</name></type> <name>getDestinationVertex</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>OuterVertex</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>VERTEX_TYPE</name></type> <name>getVertexType</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><ternary><condition><expr><name>source</name></expr>?</condition><then> <expr><name><name>VERTEX_TYPE</name><operator>.</operator><name>SOURCE</name></name></expr> </then><else>: <expr><name><name>VERTEX_TYPE</name><operator>.</operator><name>DESTINATION</name></name></expr></else></ternary></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>o</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name>getClass</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>o</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>OuterVertex</name></type> <name>that</name> <init>= <expr><operator>(</operator><name>OuterVertex</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>

            <return>return <expr><name>source</name> <operator>==</operator> <name><name>that</name><operator>.</operator><name>source</name></name></expr>;</return>

        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>(</operator><ternary><condition><expr><name>source</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
