<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/cql3/statements/DescribeStatement.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>statements</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>function</name><operator>.</operator><name>BiFunction</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Collectors</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Stream</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableList</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>audit</name><operator>.</operator><name>AuditLogContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>audit</name><operator>.</operator><name>AuditLogEntryType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>functions</name><operator>.</operator><name>FunctionName</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>KeyspaceNotDefinedException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>ListType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>MapType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>UTF8Type</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>virtual</name><operator>.</operator><name>VirtualKeyspaceRegistry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>InvalidRequestException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>RequestExecutionException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>RequestValidationException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>DataInputBuffer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>DataOutputBuffer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>ClientState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>QueryState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>StorageService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>pager</name><operator>.</operator><name>PagingState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>transport</name><operator>.</operator><name>messages</name><operator>.</operator><name>ResultMessage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>ByteBufferUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>FBUtilities</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>UUIDGen</name></name>;</import>

<import>import static <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name><operator>.</operator><name>format</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>statements</name><operator>.</operator><name>RequestValidations</name><operator>.</operator><name>checkNotEmpty</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>statements</name><operator>.</operator><name>RequestValidations</name><operator>.</operator><name>checkNotNull</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>statements</name><operator>.</operator><name>RequestValidations</name><operator>.</operator><name>checkTrue</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>statements</name><operator>.</operator><name>RequestValidations</name><operator>.</operator><name>invalidRequest</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>ByteBufferUtil</name><operator>.</operator><name>bytes</name></name>;</import>

<comment type="block" format="javadoc">/**
 * The differents &lt;code&gt;DESCRIBE&lt;/code&gt; statements parsed from a CQL statement.
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name><name>DescribeStatement</name><parameter_list>&lt;<parameter><name>T</name></parameter>&gt;</parameter_list></name> <super_list><extends>extends <super><name><name>CQLStatement</name><operator>.</operator><name>Raw</name></name></super></extends> <implements>implements <super><name>CQLStatement</name></super></implements></super_list>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KS</name> <init>= <expr><literal type="string">"system"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CF</name> <init>= <expr><literal type="string">"describe"</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The columns returned by the describe queries that only list elements names (e.g. DESCRIBE KEYSPACES, DESCRIBE TABLES...) 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnSpecification</name></argument>&gt;</argument_list></name></type> <name>LIST_METADATA</name> <init>= 
            <expr><call><name><name>ImmutableList</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ColumnSpecification</name><argument_list>(<argument><expr><name>KS</name></expr></argument>, <argument><expr><name>CF</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>ColumnIdentifier</name><argument_list>(<argument><expr><literal type="string">"keyspace_name"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>UTF8Type</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><operator>new</operator> <call><name>ColumnSpecification</name><argument_list>(<argument><expr><name>KS</name></expr></argument>, <argument><expr><name>CF</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>ColumnIdentifier</name><argument_list>(<argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>UTF8Type</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><operator>new</operator> <call><name>ColumnSpecification</name><argument_list>(<argument><expr><name>KS</name></expr></argument>, <argument><expr><name>CF</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>ColumnIdentifier</name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>UTF8Type</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The columns returned by the describe queries that returns the CREATE STATEMENT for the different elements (e.g. DESCRIBE KEYSPACE, DESCRIBE TABLE ...) 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnSpecification</name></argument>&gt;</argument_list></name></type> <name>ELEMENT_METADATA</name> <init>= 
            <expr><name><name>ImmutableList</name><operator>.</operator></name>&lt;<name>ColumnSpecification</name><operator>&gt;</operator><call><name>builder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>addAll</name><argument_list>(<argument><expr><name>LIST_METADATA</name></expr></argument>)</argument_list></call>
                                                        <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ColumnSpecification</name><argument_list>(<argument><expr><name>KS</name></expr></argument>, <argument><expr><name>CF</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>ColumnIdentifier</name><argument_list>(<argument><expr><literal type="string">"create_statement"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>UTF8Type</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                                        <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * "Magic version" for the paging state.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>PAGING_STATE_VERSION</name> <init>= <expr><literal type="number">0x0001</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SCHEMA_CHANGED_WHILE_PAGING_MESSAGE</name> <init>= <expr><literal type="string">"The schema has changed since the previous page of the DESCRIBE statement result. "</literal> <operator>+</operator>
                                                              <literal type="string">"Please retry the DESCRIBE statement."</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>includeInternalDetails</name></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>withInternalDetails</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>includeInternalDetails</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <specifier>final</specifier> <name>CQLStatement</name></type> <name>prepare</name><parameter_list>(<parameter><decl><type><name>ClientState</name></type> <name>clientState</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>RequestValidationException</name></expr></argument></throws>
    <block>{<block_content>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnSpecification</name></argument>&gt;</argument_list></name></type> <name>getBindVariables</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>authorize</name><parameter_list>(<parameter><decl><type><name>ClientState</name></type> <name>state</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>validate</name><parameter_list>(<parameter><decl><type><name>ClientState</name></type> <name>state</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>AuditLogContext</name></type> <name>getAuditLogContext</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>AuditLogContext</name><argument_list>(<argument><expr><name><name>AuditLogEntryType</name><operator>.</operator><name>DESCRIBE</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <specifier>final</specifier> <name>ResultMessage</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>QueryState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>QueryOptions</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>queryStartNanoTime</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>RequestValidationException</name></expr></argument>, <argument><expr><name>RequestExecutionException</name></expr></argument></throws>
    <block>{<block_content>
        <return>return <expr><call><name>executeLocally</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>ResultMessage</name></type> <name>executeLocally</name><parameter_list>(<parameter><decl><type><name>QueryState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>QueryOptions</name></type> <name>options</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Keyspaces</name></type> <name>keyspaces</name> <init>= <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>snapshot</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>UUID</name></type> <name>schemaVersion</name> <init>= <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getVersion</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>keyspaces</name> <operator>=</operator> <call><name><name>Keyspaces</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call>
                             <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>keyspaces</name></expr></argument>)</argument_list></call>
                             <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><call><name><name>VirtualKeyspaceRegistry</name><operator>.</operator><name>instance</name><operator>.</operator><name>virtualKeyspacesMetadata</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                             <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>PagingState</name></type> <name>pagingState</name> <init>= <expr><call><name><name>options</name><operator>.</operator><name>getPagingState</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// The paging implemented here uses some arbitray row number as the partition-key for paging,</comment>
        <comment type="line">// which is used to skip/limit the result from the Java Stream. This works good enough for</comment>
        <comment type="line">// reasonably sized schemas. Even a 'DESCRIBE SCHEMA' for an abnormally schema with 10000 tables</comment>
        <comment type="line">// completes within a few seconds. This seems good enough for now. Once Cassandra actually supports</comment>
        <comment type="line">// more than a few hundred tables, the implementation here should be reconsidered.</comment>
        <comment type="line">//</comment>
        <comment type="line">// Paging is only supported on row-level.</comment>
        <comment type="line">//</comment>
        <comment type="line">// The "partition key" in the paging-state contains a serialized object:</comment>
        <comment type="line">//   (short) version, currently 0x0001</comment>
        <comment type="line">//   (long) row offset</comment>
        <comment type="line">//   (vint bytes) serialized schema hash (currently the result of Keyspaces.hashCode())</comment>
        <comment type="line">//</comment>

        <decl_stmt><decl><type><name>long</name></type> <name>offset</name> <init>= <expr><call><name>getOffset</name><argument_list>(<argument><expr><name>pagingState</name></expr></argument>, <argument><expr><name>schemaVersion</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>pageSize</name> <init>= <expr><call><name><name>options</name><operator>.</operator><name>getPageSize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>Stream</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>T</name></extends></argument>&gt;</argument_list></name></type> <name>stream</name> <init>= <expr><call><name>describe</name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getClientState</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>keyspaces</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <literal type="number">0L</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name><name>stream</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>pageSize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name><name>stream</name><operator>.</operator><name>limit</name></name><argument_list>(<argument><expr><name>pageSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>rows</name> <init>= <expr><call><name><name>stream</name><operator>.</operator><name>map</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>e</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>toRow</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>includeInternalDetails</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
                                            <operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>ResultSet</name><operator>.</operator><name>ResultMetadata</name></name></type> <name>resultMetadata</name> <init>= <expr><operator>new</operator> <call><name><name>ResultSet</name><operator>.</operator><name>ResultMetadata</name></name><argument_list>(<argument><expr><call><name>metadata</name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getClientState</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ResultSet</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>ResultSet</name><argument_list>(<argument><expr><name>resultMetadata</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>pageSize</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>rows</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>pageSize</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>metadata</name><operator>.</operator><name>setHasMorePages</name></name><argument_list>(<argument><expr><call><name>getPagingState</name><argument_list>(<argument><expr><name>offset</name> <operator>+</operator> <name>pageSize</name></expr></argument>, <argument><expr><name>schemaVersion</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><operator>new</operator> <call><name><name>ResultMessage</name><operator>.</operator><name>Rows</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the columns of the {@code ResultMetadata}
     */</comment>
    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnSpecification</name></argument>&gt;</argument_list></name></type> <name>metadata</name><parameter_list>(<parameter><decl><type><name>ClientState</name></type> <name>state</name></decl></parameter>)</parameter_list>;</function_decl>

    <function><type><specifier>private</specifier> <name>PagingState</name></type> <name>getPagingState</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>nextPageOffset</name></decl></parameter>, <parameter><decl><type><name>UUID</name></type> <name>schemaVersion</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <try>try <init>(<decl><type><name>DataOutputBuffer</name></type> <name>out</name> <init>= <expr><operator>new</operator> <call><name>DataOutputBuffer</name><argument_list>()</argument_list></call></expr></init></decl>)</init>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeShort</name></name><argument_list>(<argument><expr><name>PAGING_STATE_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeUTF</name></name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getReleaseVersionString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>UUIDGen</name><operator>.</operator><name>decompose</name></name><argument_list>(<argument><expr><name>schemaVersion</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeLong</name></name><argument_list>(<argument><expr><name>nextPageOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><operator>new</operator> <call><name>PagingState</name><argument_list>(<argument><expr><call><name><name>out</name><operator>.</operator><name>asNewBuffer</name></name><argument_list>()</argument_list></call></expr></argument>,
                                   <argument><expr><literal type="null">null</literal></expr></argument>,
                                   <argument><expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>,
                                   <argument><expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>InvalidRequestException</name><argument_list>(<argument><expr><literal type="string">"Invalid paging state."</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>long</name></type> <name>getOffset</name><parameter_list>(<parameter><decl><type><name>PagingState</name></type> <name>pagingState</name></decl></parameter>, <parameter><decl><type><name>UUID</name></type> <name>schemaVersion</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>pagingState</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0L</literal></expr>;</return></block_content></block></if></if_stmt>

        <try>try <init>(<decl><type><name>DataInputBuffer</name></type> <name>in</name> <init>= <expr><operator>new</operator> <call><name>DataInputBuffer</name><argument_list>(<argument><expr><name><name>pagingState</name><operator>.</operator><name>partitionKey</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>)</init>
        <block>{<block_content>
            <expr_stmt><expr><call><name>checkTrue</name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readShort</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>PAGING_STATE_VERSION</name></expr></argument>, <argument><expr><literal type="string">"Incompatible paging state"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>pagingStateServerVersion</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readUTF</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>releaseVersion</name> <init>= <expr><call><name><name>FBUtilities</name><operator>.</operator><name>getReleaseVersionString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>checkTrue</name><argument_list>(<argument><expr><call><name><name>pagingStateServerVersion</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>releaseVersion</name></expr></argument>)</argument_list></call></expr></argument>,
                      <argument><expr><literal type="string">"The server version of the paging state %s is different from the one of the server %s"</literal></expr></argument>,
                      <argument><expr><name>pagingStateServerVersion</name></expr></argument>,
                      <argument><expr><name>releaseVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name><name>UUIDGen</name><operator>.</operator><name>UUID_LEN</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>UUID</name></type> <name>version</name> <init>= <expr><call><name><name>UUIDGen</name><operator>.</operator><name>getUUID</name></name><argument_list>(<argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>checkTrue</name><argument_list>(<argument><expr><call><name><name>schemaVersion</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SCHEMA_CHANGED_WHILE_PAGING_MESSAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><call><name><name>in</name><operator>.</operator><name>readLong</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>InvalidRequestException</name><argument_list>(<argument><expr><literal type="string">"Invalid paging state."</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>toRow</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>element</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>withInternals</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns the schema elements that must be part of the output.
     */</comment>
    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name><name>Stream</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>T</name></extends></argument>&gt;</argument_list></name></type> <name>describe</name><parameter_list>(<parameter><decl><type><name>ClientState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>Keyspaces</name></type> <name>keyspaces</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns the metadata for the given keyspace or throws a {@link KeyspaceNotDefinedException} exception.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>KeyspaceMetadata</name></type> <name>validateKeyspace</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ks</name></decl></parameter>, <parameter><decl><type><name>Keyspaces</name></type> <name>keyspaces</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>keyspaces</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>ks</name></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>orElseThrow</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><operator>new</operator> <call><name>KeyspaceNotDefinedException</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"'%s' not found in keyspaces"</literal></expr></argument>, <argument><expr><name>ks</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@code DescribeStatement} implementation used for describe queries that only list elements names.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>Listing</name> <super_list><extends>extends <super><name><name>DescribeStatement</name><argument_list type="generic">&lt;<argument><name>SchemaElement</name></argument>&gt;</argument_list></name></super></extends></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>function</name><operator>.</operator><name><name>Function</name><argument_list type="generic">&lt;<argument><name>KeyspaceMetadata</name></argument>, <argument><name><name>Stream</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>SchemaElement</name></extends></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>elementsProvider</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>Listing</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>function</name><operator>.</operator><name><name>Function</name><argument_list type="generic">&lt;<argument><name>KeyspaceMetadata</name></argument>, <argument><name><name>Stream</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>SchemaElement</name></extends></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>elementsProvider</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>elementsProvider</name></name> <operator>=</operator> <name>elementsProvider</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>protected</specifier> <name><name>Stream</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>SchemaElement</name></extends></argument>&gt;</argument_list></name></type> <name>describe</name><parameter_list>(<parameter><decl><type><name>ClientState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>Keyspaces</name></type> <name>keyspaces</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>keyspace</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>getRawKeyspace</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Stream</name><argument_list type="generic">&lt;<argument><name>KeyspaceMetadata</name></argument>&gt;</argument_list></name></type> <name>stream</name> <init>= <expr><ternary><condition><expr><name>keyspace</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>keyspaces</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>sorted</name><argument_list>(<argument><expr><name><name>SchemaElement</name><operator>.</operator><name>NAME_COMPARATOR</name></name></expr></argument>)</argument_list></call></expr>
                                                               </then><else>: <expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name>validateKeyspace</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>keyspaces</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <return>return <expr><call><name><name>stream</name><operator>.</operator><name>flatMap</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>k</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>elementsProvider</name><operator>.</operator><name>apply</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>sorted</name><argument_list>(<argument><expr><name><name>SchemaElement</name><operator>.</operator><name>NAME_COMPARATOR</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>protected</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnSpecification</name></argument>&gt;</argument_list></name></type> <name>metadata</name><parameter_list>(<parameter><decl><type><name>ClientState</name></type> <name>state</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>LIST_METADATA</name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>protected</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>toRow</name><parameter_list>(<parameter><decl><type><name>SchemaElement</name></type> <name>element</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>withInternals</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>ImmutableList</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name>bytes</name><argument_list>(<argument><expr><call><name><name>element</name><operator>.</operator><name>elementKeyspaceQuotedIfNeeded</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><call><name>bytes</name><argument_list>(<argument><expr><call><name><name>element</name><operator>.</operator><name>elementType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><call><name>bytes</name><argument_list>(<argument><expr><call><name><name>element</name><operator>.</operator><name>elementNameQuotedIfNeeded</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Creates a {@link DescribeStatement} for {@code DESCRIBE TABLES}.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>DescribeStatement</name><argument_list type="generic">&lt;<argument><name>SchemaElement</name></argument>&gt;</argument_list></name></type> <name>tables</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>Listing</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>ks</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>ks</name><operator>.</operator><name>tables</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a {@link DescribeStatement} for {@code DESCRIBE TYPES}.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>DescribeStatement</name><argument_list type="generic">&lt;<argument><name>SchemaElement</name></argument>&gt;</argument_list></name></type> <name>types</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>Listing</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>ks</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>ks</name><operator>.</operator><name>types</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a {@link DescribeStatement} for {@code DESCRIBE FUNCTIONS}.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>DescribeStatement</name><argument_list type="generic">&lt;<argument><name>SchemaElement</name></argument>&gt;</argument_list></name></type> <name>functions</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>Listing</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>ks</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>ks</name><operator>.</operator><name>functions</name><operator>.</operator><name>udfs</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a {@link DescribeStatement} for {@code DESCRIBE AGGREGATES}.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>DescribeStatement</name><argument_list type="generic">&lt;<argument><name>SchemaElement</name></argument>&gt;</argument_list></name></type> <name>aggregates</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>Listing</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>ks</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>ks</name><operator>.</operator><name>functions</name><operator>.</operator><name>udas</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a {@link DescribeStatement} for {@code DESCRIBE KEYSPACES}.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>DescribeStatement</name><argument_list type="generic">&lt;<argument><name>SchemaElement</name></argument>&gt;</argument_list></name></type> <name>keyspaces</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <class><super><name><name>DescribeStatement</name><argument_list type="generic">&lt;<argument><name>SchemaElement</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>protected</specifier> <name><name>Stream</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>SchemaElement</name></extends></argument>&gt;</argument_list></name></type> <name>describe</name><parameter_list>(<parameter><decl><type><name>ClientState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>Keyspaces</name></type> <name>keyspaces</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <return>return <expr><call><name><name>keyspaces</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>sorted</name><argument_list>(<argument><expr><name><name>SchemaElement</name><operator>.</operator><name>NAME_COMPARATOR</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>protected</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnSpecification</name></argument>&gt;</argument_list></name></type> <name>metadata</name><parameter_list>(<parameter><decl><type><name>ClientState</name></type> <name>state</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <return>return <expr><name>LIST_METADATA</name></expr>;</return>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>protected</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>toRow</name><parameter_list>(<parameter><decl><type><name>SchemaElement</name></type> <name>element</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>withInternals</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <return>return <expr><call><name><name>ImmutableList</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name>bytes</name><argument_list>(<argument><expr><call><name><name>element</name><operator>.</operator><name>elementKeyspaceQuotedIfNeeded</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                        <argument><expr><call><name>bytes</name><argument_list>(<argument><expr><call><name><name>element</name><operator>.</operator><name>elementType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                        <argument><expr><call><name>bytes</name><argument_list>(<argument><expr><call><name><name>element</name><operator>.</operator><name>elementNameQuotedIfNeeded</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a {@link DescribeStatement} for {@code DESCRIBE [FULL] SCHEMA}.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>DescribeStatement</name><argument_list type="generic">&lt;<argument><name>SchemaElement</name></argument>&gt;</argument_list></name></type> <name>schema</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>includeSystemKeyspaces</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <class><super><name><name>DescribeStatement</name><argument_list type="generic">&lt;<argument><name>SchemaElement</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>protected</specifier> <name><name>Stream</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>SchemaElement</name></extends></argument>&gt;</argument_list></name></type> <name>describe</name><parameter_list>(<parameter><decl><type><name>ClientState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>Keyspaces</name></type> <name>keyspaces</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <return>return <expr><call><name><name>keyspaces</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call>
                                <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>ks</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name>includeSystemKeyspaces</name> <operator>||</operator> <operator>!</operator><call><name><name>SchemaConstants</name><operator>.</operator><name>isSystemKeyspace</name></name><argument_list>(<argument><expr><name><name>ks</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
                                <operator>.</operator><call><name>sorted</name><argument_list>(<argument><expr><name><name>SchemaElement</name><operator>.</operator><name>NAME_COMPARATOR</name></name></expr></argument>)</argument_list></call>
                                <operator>.</operator><call><name>flatMap</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>ks</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>getKeyspaceElements</name><argument_list>(<argument><expr><name>ks</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>protected</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnSpecification</name></argument>&gt;</argument_list></name></type> <name>metadata</name><parameter_list>(<parameter><decl><type><name>ClientState</name></type> <name>state</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <return>return <expr><name>ELEMENT_METADATA</name></expr>;</return>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>protected</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>toRow</name><parameter_list>(<parameter><decl><type><name>SchemaElement</name></type> <name>element</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>withInternals</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <return>return <expr><call><name><name>ImmutableList</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name>bytes</name><argument_list>(<argument><expr><call><name><name>element</name><operator>.</operator><name>elementKeyspaceQuotedIfNeeded</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                        <argument><expr><call><name>bytes</name><argument_list>(<argument><expr><call><name><name>element</name><operator>.</operator><name>elementType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                        <argument><expr><call><name>bytes</name><argument_list>(<argument><expr><call><name><name>element</name><operator>.</operator><name>elementNameQuotedIfNeeded</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                        <argument><expr><call><name>bytes</name><argument_list>(<argument><expr><call><name><name>element</name><operator>.</operator><name>toCqlString</name></name><argument_list>(<argument><expr><name>withInternals</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@code DescribeStatement} implementation used for describe queries for a single schema element.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Element</name> <super_list><extends>extends <super><name><name>DescribeStatement</name><argument_list type="generic">&lt;<argument><name>SchemaElement</name></argument>&gt;</argument_list></name></super></extends></super_list>
    <block>{
        <comment type="block" format="javadoc">/**
         * The keyspace name 
         */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>keyspace</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * The element name
         */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>BiFunction</name><argument_list type="generic">&lt;<argument><name>KeyspaceMetadata</name></argument>, <argument><name>String</name></argument>, <argument><name><name>Stream</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>SchemaElement</name></extends></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>elementsProvider</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>Element</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>BiFunction</name><argument_list type="generic">&lt;<argument><name>KeyspaceMetadata</name></argument>, <argument><name>String</name></argument>, <argument><name><name>Stream</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>SchemaElement</name></extends></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>elementsProvider</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>keyspace</name></name> <operator>=</operator> <name>keyspace</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>elementsProvider</name></name> <operator>=</operator> <name>elementsProvider</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>protected</specifier> <name><name>Stream</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>SchemaElement</name></extends></argument>&gt;</argument_list></name></type> <name>describe</name><parameter_list>(<parameter><decl><type><name>ClientState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>Keyspaces</name></type> <name>keyspaces</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>ks</name> <init>= <expr><ternary><condition><expr><name>keyspace</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name>checkNotNull</name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getRawKeyspace</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"No keyspace specified and no current keyspace"</literal></expr></argument>)</argument_list></call></expr>
                                         </then><else>: <expr><name>keyspace</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <return>return <expr><call><name><name>elementsProvider</name><operator>.</operator><name>apply</name></name><argument_list>(<argument><expr><call><name>validateKeyspace</name><argument_list>(<argument><expr><name>ks</name></expr></argument>, <argument><expr><name>keyspaces</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>protected</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnSpecification</name></argument>&gt;</argument_list></name></type> <name>metadata</name><parameter_list>(<parameter><decl><type><name>ClientState</name></type> <name>state</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>ELEMENT_METADATA</name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>protected</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>toRow</name><parameter_list>(<parameter><decl><type><name>SchemaElement</name></type> <name>element</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>withInternals</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>ImmutableList</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name>bytes</name><argument_list>(<argument><expr><call><name><name>element</name><operator>.</operator><name>elementKeyspaceQuotedIfNeeded</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><call><name>bytes</name><argument_list>(<argument><expr><call><name><name>element</name><operator>.</operator><name>elementType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><call><name>bytes</name><argument_list>(<argument><expr><call><name><name>element</name><operator>.</operator><name>elementNameQuotedIfNeeded</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><call><name>bytes</name><argument_list>(<argument><expr><call><name><name>element</name><operator>.</operator><name>toCqlString</name></name><argument_list>(<argument><expr><name>withInternals</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Creates a {@link DescribeStatement} for {@code DESCRIBE KEYSPACE}.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>DescribeStatement</name><argument_list type="generic">&lt;<argument><name>SchemaElement</name></argument>&gt;</argument_list></name></type> <name>keyspace</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>onlyKeyspaceDefinition</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>Element</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>ks</name></decl></parameter>, <parameter><decl><name>t</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>getKeyspaceElements</name><argument_list>(<argument><expr><name>ks</name></expr></argument>, <argument><expr><name>onlyKeyspaceDefinition</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Stream</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>SchemaElement</name></extends></argument>&gt;</argument_list></name></type> <name>getKeyspaceElements</name><parameter_list>(<parameter><decl><type><name>KeyspaceMetadata</name></type> <name>ks</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>onlyKeyspace</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Stream</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>SchemaElement</name></extends></argument>&gt;</argument_list></name></type> <name>s</name> <init>= <expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>ks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>onlyKeyspace</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name><name>Stream</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name><name>ks</name><operator>.</operator><name>types</name><operator>.</operator><name>sortedStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name><name>Stream</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name><name>ks</name><operator>.</operator><name>functions</name><operator>.</operator><name>udfs</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>sorted</name><argument_list>(<argument><expr><name><name>SchemaElement</name><operator>.</operator><name>NAME_COMPARATOR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name><name>Stream</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name><name>ks</name><operator>.</operator><name>functions</name><operator>.</operator><name>udas</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>sorted</name><argument_list>(<argument><expr><name><name>SchemaElement</name><operator>.</operator><name>NAME_COMPARATOR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name><name>Stream</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name><name>ks</name><operator>.</operator><name>tables</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>sorted</name><argument_list>(<argument><expr><name><name>SchemaElement</name><operator>.</operator><name>NAME_COMPARATOR</name></name></expr></argument>)</argument_list></call>
                                                   <operator>.</operator><call><name>flatMap</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>tm</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>getTableElements</name><argument_list>(<argument><expr><name>ks</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><name>s</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Stream</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>SchemaElement</name></extends></argument>&gt;</argument_list></name></type> <name>getTableElements</name><parameter_list>(<parameter><decl><type><name>KeyspaceMetadata</name></type> <name>ks</name></decl></parameter>, <parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Stream</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>SchemaElement</name></extends></argument>&gt;</argument_list></name></type> <name>s</name> <init>= <expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name><name>Stream</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name><name>table</name><operator>.</operator><name>indexes</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call>
                                          <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>i</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>toDescribable</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
                                          <operator>.</operator><call><name>sorted</name><argument_list>(<argument><expr><name><name>SchemaElement</name><operator>.</operator><name>NAME_COMPARATOR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name><name>Stream</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name><name>ks</name><operator>.</operator><name>views</name><operator>.</operator><name>stream</name></name><argument_list>(<argument><expr><name><name>table</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call>
                                     <operator>.</operator><call><name>sorted</name><argument_list>(<argument><expr><name><name>SchemaElement</name><operator>.</operator><name>NAME_COMPARATOR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>s</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a {@link DescribeStatement} for {@code DESCRIBE TABLE}.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>DescribeStatement</name><argument_list type="generic">&lt;<argument><name>SchemaElement</name></argument>&gt;</argument_list></name></type> <name>table</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>Element</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>ks</name></decl></parameter>, <parameter><decl><name>t</name></decl></parameter>)</parameter_list> -&gt; <block>{<block_content>

            <decl_stmt><decl><type><name>TableMetadata</name></type> <name>table</name> <init>= <expr><call><name>checkNotNull</name><argument_list>(<argument><expr><call><name><name>ks</name><operator>.</operator><name>getTableOrViewNullable</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>,
                                               <argument><expr><literal type="string">"Table '%s' not found in keyspace '%s'"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>ks</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <return>return <expr><call><name><name>Stream</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>table</name><operator>.</operator><name>indexes</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call>
                                                                <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>index</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>toDescribable</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
                                                                <operator>.</operator><call><name>sorted</name><argument_list>(<argument><expr><name><name>SchemaElement</name><operator>.</operator><name>NAME_COMPARATOR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a {@link DescribeStatement} for {@code DESCRIBE INDEX}.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>DescribeStatement</name><argument_list type="generic">&lt;<argument><name>SchemaElement</name></argument>&gt;</argument_list></name></type> <name>index</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>Element</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>ks</name></decl></parameter>, <parameter><decl><name>index</name></decl></parameter>)</parameter_list> -&gt; <block>{<block_content>

            <decl_stmt><decl><type><name>TableMetadata</name></type> <name>tm</name> <init>= <expr><call><name><name>ks</name><operator>.</operator><name>findIndexedTable</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call>
                                 <operator>.</operator><call><name>orElseThrow</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>invalidRequest</name><argument_list>(<argument><expr><literal type="string">"Table for existing index '%s' not found in '%s'"</literal></expr></argument>,
                                                                   <argument><expr><name>index</name></expr></argument>,
                                                                   <argument><expr><name><name>ks</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>tm</name><operator>.</operator><name>indexes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call>
                             <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>i</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>toDescribable</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
                             <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>Stream</name><operator>::</operator><name>of</name></expr></argument>)</argument_list></call>
                             <operator>.</operator><call><name>orElseThrow</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>invalidRequest</name><argument_list>(<argument><expr><literal type="string">"Index '%s' not found in '%s'"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>ks</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a {@link DescribeStatement} for {@code DESCRIBE MATERIALIZED VIEW}.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>DescribeStatement</name><argument_list type="generic">&lt;<argument><name>SchemaElement</name></argument>&gt;</argument_list></name></type> <name>view</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>Element</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>ks</name></decl></parameter>, <parameter><decl><name>view</name></decl></parameter>)</parameter_list> -&gt; <block>{<block_content>

            <return>return <expr><call><name><name>ks</name><operator>.</operator><name>views</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>Stream</name><operator>::</operator><name>of</name></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>orElseThrow</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>invalidRequest</name><argument_list>(<argument><expr><literal type="string">"Materialized view '%s' not found in '%s'"</literal></expr></argument>, <argument><expr><name>view</name></expr></argument>, <argument><expr><name><name>ks</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a {@link DescribeStatement} for {@code DESCRIBE TYPE}.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>DescribeStatement</name><argument_list type="generic">&lt;<argument><name>SchemaElement</name></argument>&gt;</argument_list></name></type> <name>type</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>Element</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>ks</name></decl></parameter>, <parameter><decl><name>type</name></decl></parameter>)</parameter_list> -&gt; <block>{<block_content>

            <return>return <expr><call><name><name>ks</name><operator>.</operator><name>types</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>ByteBufferUtil</name><operator>.</operator><name>bytes</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>Stream</name><operator>::</operator><name>of</name></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>orElseThrow</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>invalidRequest</name><argument_list>(<argument><expr><literal type="string">"User defined type '%s' not found in '%s'"</literal></expr></argument>,
                                                             <argument><expr><name>type</name></expr></argument>,
                                                             <argument><expr><name><name>ks</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a {@link DescribeStatement} for {@code DESCRIBE FUNCTION}.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>DescribeStatement</name><argument_list type="generic">&lt;<argument><name>SchemaElement</name></argument>&gt;</argument_list></name></type> <name>function</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>Element</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>ks</name></decl></parameter>, <parameter><decl><name>n</name></decl></parameter>)</parameter_list> -&gt; <block>{<block_content>

            <return>return <expr><call><name>checkNotEmpty</name><argument_list>(<argument><expr><call><name><name>ks</name><operator>.</operator><name>functions</name><operator>.</operator><name>getUdfs</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FunctionName</name><argument_list>(<argument><expr><name><name>ks</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                 <argument><expr><literal type="string">"User defined function '%s' not found in '%s'"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>ks</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call>
                                                                                             <operator>.</operator><call><name>sorted</name><argument_list>(<argument><expr><name><name>SchemaElement</name><operator>.</operator><name>NAME_COMPARATOR</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a {@link DescribeStatement} for {@code DESCRIBE FUNCTION}.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>DescribeStatement</name><argument_list type="generic">&lt;<argument><name>SchemaElement</name></argument>&gt;</argument_list></name></type> <name>aggregate</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>Element</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>ks</name></decl></parameter>, <parameter><decl><name>n</name></decl></parameter>)</parameter_list> -&gt; <block>{<block_content>

            <return>return <expr><call><name>checkNotEmpty</name><argument_list>(<argument><expr><call><name><name>ks</name><operator>.</operator><name>functions</name><operator>.</operator><name>getUdas</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FunctionName</name><argument_list>(<argument><expr><name><name>ks</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                 <argument><expr><literal type="string">"User defined aggregate '%s' not found in '%s'"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>ks</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call>
                                                                                              <operator>.</operator><call><name>sorted</name><argument_list>(<argument><expr><name><name>SchemaElement</name><operator>.</operator><name>NAME_COMPARATOR</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>SchemaElement</name></type> <name>toDescribable</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>IndexMetadata</name></type> <name>index</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <class><super><name>SchemaElement</name></super><argument_list>()</argument_list>
                <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <type><specifier>public</specifier> <name>SchemaElementType</name></type> <name>elementType</name><parameter_list>()</parameter_list>
                    <block>{<block_content>
                        <return>return <expr><name><name>SchemaElementType</name><operator>.</operator><name>INDEX</name></name></expr>;</return>
                    </block_content>}</block></function>

                    <function><annotation>@<name>Override</name></annotation>
                    <type><specifier>public</specifier> <name>String</name></type> <name>elementKeyspace</name><parameter_list>()</parameter_list>
                    <block>{<block_content>
                        <return>return <expr><name><name>table</name><operator>.</operator><name>keyspace</name></name></expr>;</return>
                    </block_content>}</block></function>

                    <function><annotation>@<name>Override</name></annotation>
                    <type><specifier>public</specifier> <name>String</name></type> <name>elementName</name><parameter_list>()</parameter_list>
                    <block>{<block_content>
                        <return>return <expr><name><name>index</name><operator>.</operator><name>name</name></name></expr>;</return>
                    </block_content>}</block></function>

                    <function><annotation>@<name>Override</name></annotation>
                    <type><specifier>public</specifier> <name>String</name></type> <name>toCqlString</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>withInternals</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>ifNotExists</name></decl></parameter>)</parameter_list>
                    <block>{<block_content>
                        <return>return <expr><call><name><name>index</name><operator>.</operator><name>toCqlString</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>ifNotExists</name></expr></argument>)</argument_list></call></expr>;</return>
                    </block_content>}</block></function>
                }</block></class></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a {@link DescribeStatement} for the generic {@code DESCRIBE ...}.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>DescribeStatement</name><argument_list type="generic">&lt;<argument><name>SchemaElement</name></argument>&gt;</argument_list></name></type> <name>generic</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <class><super><name><name>DescribeStatement</name><argument_list type="generic">&lt;<argument><name>SchemaElement</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <decl_stmt><decl><type><specifier>private</specifier> <name><name>DescribeStatement</name><argument_list type="generic">&lt;<argument><name>SchemaElement</name></argument>&gt;</argument_list></name></type> <name>delegate</name></decl>;</decl_stmt>

            <function><type><specifier>private</specifier> <name><name>DescribeStatement</name><argument_list type="generic">&lt;<argument><name>SchemaElement</name></argument>&gt;</argument_list></name></type> <name>resolve</name><parameter_list>(<parameter><decl><type><name>ClientState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>Keyspaces</name></type> <name>keyspaces</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>ks</name> <init>= <expr><name>keyspace</name></expr></init></decl>;</decl_stmt>

                <comment type="line">// from cqlsh help: "keyspace or a table or an index or a materialized view (in this order)."</comment>
                <if_stmt><if>if <condition>(<expr><name>keyspace</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>keyspaces</name><operator>.</operator><name>containsKeyspace</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <return>return <expr><call><name>keyspace</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

                    <decl_stmt><decl><type><name>String</name></type> <name>rawKeyspace</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>getRawKeyspace</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>ks</name> <operator>=</operator> <ternary><condition><expr><name>rawKeyspace</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>name</name></expr> </then><else>: <expr><name>rawKeyspace</name></expr></else></ternary></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <decl_stmt><decl><type><name>KeyspaceMetadata</name></type> <name>keyspaceMetadata</name> <init>= <expr><call><name>validateKeyspace</name><argument_list>(<argument><expr><name>ks</name></expr></argument>, <argument><expr><name>keyspaces</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><call><name><name>keyspaceMetadata</name><operator>.</operator><name>tables</name><operator>.</operator><name>getNullable</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><call><name>table</name><argument_list>(<argument><expr><name>ks</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

                <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>TableMetadata</name></argument>&gt;</argument_list></name></type> <name>indexed</name> <init>= <expr><call><name><name>keyspaceMetadata</name><operator>.</operator><name>findIndexedTable</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>indexed</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>IndexMetadata</name></argument>&gt;</argument_list></name></type> <name>index</name> <init>= <expr><call><name><name>indexed</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>indexes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name><name>index</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <return>return <expr><call><name>index</name><argument_list>(<argument><expr><name>ks</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><call><name><name>keyspaceMetadata</name><operator>.</operator><name>views</name><operator>.</operator><name>getNullable</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><call><name>view</name><argument_list>(<argument><expr><name>ks</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

                <throw>throw <expr><call><name>invalidRequest</name><argument_list>(<argument><expr><literal type="string">"'%s' not found in keyspace '%s'"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>ks</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>protected</specifier> <name><name>Stream</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>SchemaElement</name></extends></argument>&gt;</argument_list></name></type> <name>describe</name><parameter_list>(<parameter><decl><type><name>ClientState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>Keyspaces</name></type> <name>keyspaces</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><name>delegate</name> <operator>=</operator> <call><name>resolve</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>keyspaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><call><name><name>delegate</name><operator>.</operator><name>describe</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>keyspaces</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>protected</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnSpecification</name></argument>&gt;</argument_list></name></type> <name>metadata</name><parameter_list>(<parameter><decl><type><name>ClientState</name></type> <name>state</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <return>return <expr><call><name><name>delegate</name><operator>.</operator><name>metadata</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>protected</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>toRow</name><parameter_list>(<parameter><decl><type><name>SchemaElement</name></type> <name>element</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>withInternals</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <return>return <expr><call><name><name>delegate</name><operator>.</operator><name>toRow</name></name><argument_list>(<argument><expr><name>element</name></expr></argument>, <argument><expr><name>withInternals</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a {@link DescribeStatement} for {@code DESCRIBE CLUSTER}.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>DescribeStatement</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>cluster</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <class><super><name><name>DescribeStatement</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <comment type="block" format="javadoc">/**
             * The column index of the cluster name
             */</comment>
            <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CLUSTER_NAME_INDEX</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <comment type="block" format="javadoc">/**
             * The column index of the partitioner name
             */</comment>
            <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>PARTITIONER_NAME_INDEX</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

            <comment type="block" format="javadoc">/**
             * The column index of the snitch class
             */</comment>
            <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SNITCH_CLASS_INDEX</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

            <comment type="block" format="javadoc">/**
             * The range ownerships index
             */</comment>
            <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>RANGE_OWNERSHIPS_INDEX</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>protected</specifier> <name><name>Stream</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>describe</name><parameter_list>(<parameter><decl><type><name>ClientState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>Keyspaces</name></type> <name>keyspaces</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getClusterName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>trimIfPresent</name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getPartitionerName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"org.apache.cassandra.dht."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>trimIfPresent</name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getEndpointSnitch</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                                            <argument><expr><literal type="string">"org.apache.cassandra.locator."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
                <decl_stmt><decl><type><name>String</name></type> <name>useKs</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>getRawKeyspace</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>mustReturnsRangeOwnerships</name><argument_list>(<argument><expr><name>useKs</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>getRangeToAddressMap</name></name><argument_list>(<argument><expr><name>useKs</name></expr></argument>)</argument_list></call>
                                                    <operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call>
                                                    <operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call>
                                                    <operator>.</operator><call><name>sorted</name><argument_list>(<argument><expr><call><name><name>Comparator</name><operator>.</operator><name>comparing</name></name><argument_list>(<argument><expr><name><name>Map</name><operator>.</operator><name>Entry</name></name><operator>::</operator><name>getKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                                    <operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toMap</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>e</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>e</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>right</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>,
                                                                              <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>e</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>e</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call>
                                                                                    <operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call>
                                                                                    <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>r</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>r</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
                                                                                    <operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <return>return <expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>private</specifier> <name>boolean</name></type> <name>mustReturnsRangeOwnerships</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>useKs</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <return>return <expr><name>useKs</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>SchemaConstants</name><operator>.</operator><name>isLocalSystemKeyspace</name></name><argument_list>(<argument><expr><name>useKs</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>SchemaConstants</name><operator>.</operator><name>isSystemKeyspace</name></name><argument_list>(<argument><expr><name>useKs</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>protected</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnSpecification</name></argument>&gt;</argument_list></name></type> <name>metadata</name><parameter_list>(<parameter><decl><type><name>ClientState</name></type> <name>state</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name><name>ImmutableList</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>ColumnSpecification</name></argument>&gt;</argument_list></name></name></type> <name>builder</name> <init>= <expr><call><name><name>ImmutableList</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ColumnSpecification</name><argument_list>(<argument><expr><name>KS</name></expr></argument>, <argument><expr><name>CF</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>ColumnIdentifier</name><argument_list>(<argument><expr><literal type="string">"cluster"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>UTF8Type</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                        <argument><expr><operator>new</operator> <call><name>ColumnSpecification</name><argument_list>(<argument><expr><name>KS</name></expr></argument>, <argument><expr><name>CF</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>ColumnIdentifier</name><argument_list>(<argument><expr><literal type="string">"partitioner"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>UTF8Type</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                        <argument><expr><operator>new</operator> <call><name>ColumnSpecification</name><argument_list>(<argument><expr><name>KS</name></expr></argument>, <argument><expr><name>CF</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>ColumnIdentifier</name><argument_list>(<argument><expr><literal type="string">"snitch"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>UTF8Type</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><call><name>mustReturnsRangeOwnerships</name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getRawKeyspace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ColumnSpecification</name><argument_list>(<argument><expr><name>KS</name></expr></argument>, <argument><expr><name>CF</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>ColumnIdentifier</name><argument_list>(<argument><expr><literal type="string">"range_ownership"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>MapType</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name><name>UTF8Type</name><operator>.</operator><name>instance</name></name></expr></argument>,
                                                                                                                                   <argument><expr><call><name><name>ListType</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name><name>UTF8Type</name><operator>.</operator><name>instance</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <return>return <expr><call><name><name>builder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>protected</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>toRow</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>elements</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>withInternals</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name><name>ImmutableList</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></name></type> <name>builder</name> <init>= <expr><call><name><name>ImmutableList</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> 

                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>UTF8Type</name><operator>.</operator><name>instance</name><operator>.</operator><name>decompose</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>elements</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>CLUSTER_NAME_INDEX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><call><name><name>UTF8Type</name><operator>.</operator><name>instance</name><operator>.</operator><name>decompose</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>elements</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>PARTITIONER_NAME_INDEX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><call><name><name>UTF8Type</name><operator>.</operator><name>instance</name><operator>.</operator><name>decompose</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>elements</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>SNITCH_CLASS_INDEX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><call><name><name>elements</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name><name>MapType</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>rangeOwnershipType</name> <init>= <expr><call><name><name>MapType</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name><name>UTF8Type</name><operator>.</operator><name>instance</name></name></expr></argument>,
                                                                                           <argument><expr><call><name><name>ListType</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name><name>UTF8Type</name><operator>.</operator><name>instance</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>,
                                                                                           <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>rangeOwnershipType</name><operator>.</operator><name>decompose</name></name><argument_list>(<argument><expr><operator>(</operator><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><operator>)</operator> <call><name><name>elements</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>RANGE_OWNERSHIPS_INDEX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <return>return <expr><call><name><name>builder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>private</specifier> <name>String</name></type> <name>trimIfPresent</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>begin</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>src</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>begin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><call><name><name>src</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><call><name><name>begin</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
                <return>return <expr><name>src</name></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
