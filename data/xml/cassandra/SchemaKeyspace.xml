<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/schema/SchemaKeyspace.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>charset</name><operator>.</operator><name>CharacterCodingException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Collectors</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>annotation</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>NotThreadSafe</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Maps</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>antlr</name><operator>.</operator><name>runtime</name><operator>.</operator><name>RecognitionException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>functions</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>statements</name><operator>.</operator><name>schema</name><operator>.</operator><name>CreateTableStatement</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>filter</name><operator>.</operator><name>ColumnFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>partitions</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>rows</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>InvalidRequestException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>reads</name><operator>.</operator><name>SpeculativeRetryPolicy</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>ColumnMetadata</name><operator>.</operator><name>ClusteringOrder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>Keyspaces</name><operator>.</operator><name>KeyspacesDiff</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>reads</name><operator>.</operator><name>repair</name><operator>.</operator><name>ReadRepairStrategy</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>transport</name><operator>.</operator><name>ProtocolVersion</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>ByteBufferUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>FBUtilities</name></name>;</import>

<import>import static <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name><operator>.</operator><name>format</name></name>;</import>

<import>import static <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Collectors</name><operator>.</operator><name>toList</name></name>;</import>
<import>import static <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Collectors</name><operator>.</operator><name>toSet</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>QueryProcessor</name><operator>.</operator><name>executeInternal</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>QueryProcessor</name><operator>.</operator><name>executeOnceInternal</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>SchemaKeyspaceTables</name><operator>.</operator><name>*</name></name>;</import>

<comment type="block" format="javadoc">/**
 * system_schema.* tables and methods for manipulating them.
 * 
 * Please notice this class is _not_ thread safe. It should be accessed through {@link org.apache.cassandra.schema.Schema}. See CASSANDRA-16856/16996
 */</comment>
<class><annotation>@<name>NotThreadSafe</name></annotation>
<specifier>final</specifier> class <name>SchemaKeyspace</name>
<block>{
    <constructor><specifier>private</specifier> <name>SchemaKeyspace</name><parameter_list>()</parameter_list>
    <block>{<block_content>
    </block_content>}</block></constructor>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>SchemaKeyspace</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>FLUSH_SCHEMA_TABLES</name> <init>= <expr><call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.test.flush_local_schema_changes"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>IGNORE_CORRUPTED_SCHEMA_TABLES</name> <init>= <expr><call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.ignore_corrupted_schema_tables"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The tables to which we added the cdc column. This is used in {@link #makeUpdateForSchema} below to make sure we skip that
     * column is cdc is disabled as the columns breaks pre-cdc to post-cdc upgrades (typically, 3.0 -&gt; 3.X).
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>TABLES_WITH_CDC_ADDED</name> <init>= <expr><call><name><name>ImmutableSet</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>TABLES</name></expr></argument>, <argument><expr><name>VIEWS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TableMetadata</name></type> <name>Keyspaces</name> <init>=
        <expr><call><name>parse</name><argument_list>(<argument><expr><name>KEYSPACES</name></expr></argument>,
              <argument><expr><literal type="string">"keyspace definitions"</literal></expr></argument>,
              <argument><expr><literal type="string">"CREATE TABLE %s ("</literal>
              <operator>+</operator> <literal type="string">"keyspace_name text,"</literal>
              <operator>+</operator> <literal type="string">"durable_writes boolean,"</literal>
              <operator>+</operator> <literal type="string">"replication frozen&lt;map&lt;text, text&gt;&gt;,"</literal>
              <operator>+</operator> <literal type="string">"PRIMARY KEY ((keyspace_name)))"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TableMetadata</name></type> <name>Tables</name> <init>=
        <expr><call><name>parse</name><argument_list>(<argument><expr><name>TABLES</name></expr></argument>,
              <argument><expr><literal type="string">"table definitions"</literal></expr></argument>,
              <argument><expr><literal type="string">"CREATE TABLE %s ("</literal>
              <operator>+</operator> <literal type="string">"keyspace_name text,"</literal>
              <operator>+</operator> <literal type="string">"table_name text,"</literal>
              <operator>+</operator> <literal type="string">"bloom_filter_fp_chance double,"</literal>
              <operator>+</operator> <literal type="string">"caching frozen&lt;map&lt;text, text&gt;&gt;,"</literal>
              <operator>+</operator> <literal type="string">"comment text,"</literal>
              <operator>+</operator> <literal type="string">"compaction frozen&lt;map&lt;text, text&gt;&gt;,"</literal>
              <operator>+</operator> <literal type="string">"compression frozen&lt;map&lt;text, text&gt;&gt;,"</literal>
              <operator>+</operator> <literal type="string">"crc_check_chance double,"</literal>
              <operator>+</operator> <literal type="string">"dclocal_read_repair_chance double,"</literal> <comment type="line">// no longer used, left for drivers' sake</comment>
              <operator>+</operator> <literal type="string">"default_time_to_live int,"</literal>
              <operator>+</operator> <literal type="string">"extensions frozen&lt;map&lt;text, blob&gt;&gt;,"</literal>
              <operator>+</operator> <literal type="string">"flags frozen&lt;set&lt;text&gt;&gt;,"</literal> <comment type="line">// SUPER, COUNTER, DENSE, COMPOUND</comment>
              <operator>+</operator> <literal type="string">"gc_grace_seconds int,"</literal>
              <operator>+</operator> <literal type="string">"id uuid,"</literal>
              <operator>+</operator> <literal type="string">"max_index_interval int,"</literal>
              <operator>+</operator> <literal type="string">"memtable_flush_period_in_ms int,"</literal>
              <operator>+</operator> <literal type="string">"min_index_interval int,"</literal>
              <operator>+</operator> <literal type="string">"read_repair_chance double,"</literal> <comment type="line">// no longer used, left for drivers' sake</comment>
              <operator>+</operator> <literal type="string">"speculative_retry text,"</literal>
              <operator>+</operator> <literal type="string">"additional_write_policy text,"</literal>
              <operator>+</operator> <literal type="string">"cdc boolean,"</literal>
              <operator>+</operator> <literal type="string">"read_repair text,"</literal>
              <operator>+</operator> <literal type="string">"PRIMARY KEY ((keyspace_name), table_name))"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TableMetadata</name></type> <name>Columns</name> <init>=
        <expr><call><name>parse</name><argument_list>(<argument><expr><name>COLUMNS</name></expr></argument>,
              <argument><expr><literal type="string">"column definitions"</literal></expr></argument>,
              <argument><expr><literal type="string">"CREATE TABLE %s ("</literal>
              <operator>+</operator> <literal type="string">"keyspace_name text,"</literal>
              <operator>+</operator> <literal type="string">"table_name text,"</literal>
              <operator>+</operator> <literal type="string">"column_name text,"</literal>
              <operator>+</operator> <literal type="string">"clustering_order text,"</literal>
              <operator>+</operator> <literal type="string">"column_name_bytes blob,"</literal>
              <operator>+</operator> <literal type="string">"kind text,"</literal>
              <operator>+</operator> <literal type="string">"position int,"</literal>
              <operator>+</operator> <literal type="string">"type text,"</literal>
              <operator>+</operator> <literal type="string">"PRIMARY KEY ((keyspace_name), table_name, column_name))"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TableMetadata</name></type> <name>DroppedColumns</name> <init>=
        <expr><call><name>parse</name><argument_list>(<argument><expr><name>DROPPED_COLUMNS</name></expr></argument>,
              <argument><expr><literal type="string">"dropped column registry"</literal></expr></argument>,
              <argument><expr><literal type="string">"CREATE TABLE %s ("</literal>
              <operator>+</operator> <literal type="string">"keyspace_name text,"</literal>
              <operator>+</operator> <literal type="string">"table_name text,"</literal>
              <operator>+</operator> <literal type="string">"column_name text,"</literal>
              <operator>+</operator> <literal type="string">"dropped_time timestamp,"</literal>
              <operator>+</operator> <literal type="string">"kind text,"</literal>
              <operator>+</operator> <literal type="string">"type text,"</literal>
              <operator>+</operator> <literal type="string">"PRIMARY KEY ((keyspace_name), table_name, column_name))"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TableMetadata</name></type> <name>Triggers</name> <init>=
        <expr><call><name>parse</name><argument_list>(<argument><expr><name>TRIGGERS</name></expr></argument>,
              <argument><expr><literal type="string">"trigger definitions"</literal></expr></argument>,
              <argument><expr><literal type="string">"CREATE TABLE %s ("</literal>
              <operator>+</operator> <literal type="string">"keyspace_name text,"</literal>
              <operator>+</operator> <literal type="string">"table_name text,"</literal>
              <operator>+</operator> <literal type="string">"trigger_name text,"</literal>
              <operator>+</operator> <literal type="string">"options frozen&lt;map&lt;text, text&gt;&gt;,"</literal>
              <operator>+</operator> <literal type="string">"PRIMARY KEY ((keyspace_name), table_name, trigger_name))"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TableMetadata</name></type> <name>Views</name> <init>=
        <expr><call><name>parse</name><argument_list>(<argument><expr><name>VIEWS</name></expr></argument>,
              <argument><expr><literal type="string">"view definitions"</literal></expr></argument>,
              <argument><expr><literal type="string">"CREATE TABLE %s ("</literal>
              <operator>+</operator> <literal type="string">"keyspace_name text,"</literal>
              <operator>+</operator> <literal type="string">"view_name text,"</literal>
              <operator>+</operator> <literal type="string">"base_table_id uuid,"</literal>
              <operator>+</operator> <literal type="string">"base_table_name text,"</literal>
              <operator>+</operator> <literal type="string">"where_clause text,"</literal>
              <operator>+</operator> <literal type="string">"bloom_filter_fp_chance double,"</literal>
              <operator>+</operator> <literal type="string">"caching frozen&lt;map&lt;text, text&gt;&gt;,"</literal>
              <operator>+</operator> <literal type="string">"comment text,"</literal>
              <operator>+</operator> <literal type="string">"compaction frozen&lt;map&lt;text, text&gt;&gt;,"</literal>
              <operator>+</operator> <literal type="string">"compression frozen&lt;map&lt;text, text&gt;&gt;,"</literal>
              <operator>+</operator> <literal type="string">"crc_check_chance double,"</literal>
              <operator>+</operator> <literal type="string">"dclocal_read_repair_chance double,"</literal> <comment type="line">// no longer used, left for drivers' sake</comment>
              <operator>+</operator> <literal type="string">"default_time_to_live int,"</literal>
              <operator>+</operator> <literal type="string">"extensions frozen&lt;map&lt;text, blob&gt;&gt;,"</literal>
              <operator>+</operator> <literal type="string">"gc_grace_seconds int,"</literal>
              <operator>+</operator> <literal type="string">"id uuid,"</literal>
              <operator>+</operator> <literal type="string">"include_all_columns boolean,"</literal>
              <operator>+</operator> <literal type="string">"max_index_interval int,"</literal>
              <operator>+</operator> <literal type="string">"memtable_flush_period_in_ms int,"</literal>
              <operator>+</operator> <literal type="string">"min_index_interval int,"</literal>
              <operator>+</operator> <literal type="string">"read_repair_chance double,"</literal> <comment type="line">// no longer used, left for drivers' sake</comment>
              <operator>+</operator> <literal type="string">"speculative_retry text,"</literal>
              <operator>+</operator> <literal type="string">"additional_write_policy text,"</literal>
              <operator>+</operator> <literal type="string">"cdc boolean,"</literal>
              <operator>+</operator> <literal type="string">"read_repair text,"</literal>
              <operator>+</operator> <literal type="string">"PRIMARY KEY ((keyspace_name), view_name))"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TableMetadata</name></type> <name>Indexes</name> <init>=
        <expr><call><name>parse</name><argument_list>(<argument><expr><name>INDEXES</name></expr></argument>,
              <argument><expr><literal type="string">"secondary index definitions"</literal></expr></argument>,
              <argument><expr><literal type="string">"CREATE TABLE %s ("</literal>
              <operator>+</operator> <literal type="string">"keyspace_name text,"</literal>
              <operator>+</operator> <literal type="string">"table_name text,"</literal>
              <operator>+</operator> <literal type="string">"index_name text,"</literal>
              <operator>+</operator> <literal type="string">"kind text,"</literal>
              <operator>+</operator> <literal type="string">"options frozen&lt;map&lt;text, text&gt;&gt;,"</literal>
              <operator>+</operator> <literal type="string">"PRIMARY KEY ((keyspace_name), table_name, index_name))"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TableMetadata</name></type> <name>Types</name> <init>=
        <expr><call><name>parse</name><argument_list>(<argument><expr><name>TYPES</name></expr></argument>,
              <argument><expr><literal type="string">"user defined type definitions"</literal></expr></argument>,
              <argument><expr><literal type="string">"CREATE TABLE %s ("</literal>
              <operator>+</operator> <literal type="string">"keyspace_name text,"</literal>
              <operator>+</operator> <literal type="string">"type_name text,"</literal>
              <operator>+</operator> <literal type="string">"field_names frozen&lt;list&lt;text&gt;&gt;,"</literal>
              <operator>+</operator> <literal type="string">"field_types frozen&lt;list&lt;text&gt;&gt;,"</literal>
              <operator>+</operator> <literal type="string">"PRIMARY KEY ((keyspace_name), type_name))"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TableMetadata</name></type> <name>Functions</name> <init>=
        <expr><call><name>parse</name><argument_list>(<argument><expr><name>FUNCTIONS</name></expr></argument>,
              <argument><expr><literal type="string">"user defined function definitions"</literal></expr></argument>,
              <argument><expr><literal type="string">"CREATE TABLE %s ("</literal>
              <operator>+</operator> <literal type="string">"keyspace_name text,"</literal>
              <operator>+</operator> <literal type="string">"function_name text,"</literal>
              <operator>+</operator> <literal type="string">"argument_types frozen&lt;list&lt;text&gt;&gt;,"</literal>
              <operator>+</operator> <literal type="string">"argument_names frozen&lt;list&lt;text&gt;&gt;,"</literal>
              <operator>+</operator> <literal type="string">"body text,"</literal>
              <operator>+</operator> <literal type="string">"language text,"</literal>
              <operator>+</operator> <literal type="string">"return_type text,"</literal>
              <operator>+</operator> <literal type="string">"called_on_null_input boolean,"</literal>
              <operator>+</operator> <literal type="string">"PRIMARY KEY ((keyspace_name), function_name, argument_types))"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TableMetadata</name></type> <name>Aggregates</name> <init>=
        <expr><call><name>parse</name><argument_list>(<argument><expr><name>AGGREGATES</name></expr></argument>,
              <argument><expr><literal type="string">"user defined aggregate definitions"</literal></expr></argument>,
              <argument><expr><literal type="string">"CREATE TABLE %s ("</literal>
              <operator>+</operator> <literal type="string">"keyspace_name text,"</literal>
              <operator>+</operator> <literal type="string">"aggregate_name text,"</literal>
              <operator>+</operator> <literal type="string">"argument_types frozen&lt;list&lt;text&gt;&gt;,"</literal>
              <operator>+</operator> <literal type="string">"final_func text,"</literal>
              <operator>+</operator> <literal type="string">"initcond text,"</literal>
              <operator>+</operator> <literal type="string">"return_type text,"</literal>
              <operator>+</operator> <literal type="string">"state_func text,"</literal>
              <operator>+</operator> <literal type="string">"state_type text,"</literal>
              <operator>+</operator> <literal type="string">"PRIMARY KEY ((keyspace_name), aggregate_name, argument_types))"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>TableMetadata</name></argument>&gt;</argument_list></name></type> <name>ALL_TABLE_METADATA</name> <init>=
        <expr><call><name><name>ImmutableList</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>Keyspaces</name></expr></argument>, <argument><expr><name>Tables</name></expr></argument>, <argument><expr><name>Columns</name></expr></argument>, <argument><expr><name>Triggers</name></expr></argument>, <argument><expr><name>DroppedColumns</name></expr></argument>, <argument><expr><name>Views</name></expr></argument>, <argument><expr><name>Types</name></expr></argument>, <argument><expr><name>Functions</name></expr></argument>, <argument><expr><name>Aggregates</name></expr></argument>, <argument><expr><name>Indexes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>TableMetadata</name></type> <name>parse</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>description</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>cql</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>CreateTableStatement</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><name>cql</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SCHEMA_KEYSPACE_NAME</name></name></expr></argument>)</argument_list></call>
                                   <operator>.</operator><call><name>id</name><argument_list>(<argument><expr><call><name><name>TableId</name><operator>.</operator><name>forSystemTable</name></name><argument_list>(<argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SCHEMA_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                   <operator>.</operator><call><name>gcGraceSeconds</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>TimeUnit</name><operator>.</operator><name>DAYS</name><operator>.</operator><name>toSeconds</name></name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                   <operator>.</operator><call><name>memtableFlushPeriod</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>TimeUnit</name><operator>.</operator><name>HOURS</name><operator>.</operator><name>toMillis</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                   <operator>.</operator><call><name>comment</name><argument_list>(<argument><expr><name>description</name></expr></argument>)</argument_list></call>
                                   <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name>KeyspaceMetadata</name></type> <name>metadata</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>KeyspaceMetadata</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SCHEMA_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><call><name><name>KeyspaceParams</name><operator>.</operator><name>local</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>Tables</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>ALL_TABLE_METADATA</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></type> <name>convertSchemaDiffToMutations</name><parameter_list>(<parameter><decl><type><name>KeyspacesDiff</name></type> <name>diff</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Mutation</name></argument>&gt;</argument_list></name></type> <name>mutations</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>diff</name><operator>.</operator><name>created</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>k</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>mutations</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>k</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>makeCreateKeyspaceMutation</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>diff</name><operator>.</operator><name>dropped</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>k</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>mutations</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>k</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>makeDropKeyspaceMutation</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>diff</name><operator>.</operator><name>altered</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>kd</name></decl></parameter></parameter_list> -&gt;
        <block>{<block_content>
            <decl_stmt><decl><type><name>KeyspaceMetadata</name></type> <name>ks</name> <init>= <expr><name><name>kd</name><operator>.</operator><name>after</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name><name>Mutation</name><operator>.</operator><name>SimpleBuilder</name></name></type> <name>builder</name> <init>= <expr><call><name>makeCreateKeyspaceMutation</name><argument_list>(<argument><expr><name><name>ks</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>ks</name><operator>.</operator><name>params</name></name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>kd</name><operator>.</operator><name>types</name><operator>.</operator><name>created</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>t</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>addTypeToSchemaMutation</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>kd</name><operator>.</operator><name>types</name><operator>.</operator><name>dropped</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>t</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>addDropTypeToSchemaMutation</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>kd</name><operator>.</operator><name>types</name><operator>.</operator><name>altered</name></name><argument_list>(<argument><expr><name><name>Difference</name><operator>.</operator><name>SHALLOW</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>td</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>addTypeToSchemaMutation</name><argument_list>(<argument><expr><name><name>td</name><operator>.</operator><name>after</name></name></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>kd</name><operator>.</operator><name>tables</name><operator>.</operator><name>created</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>t</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>addTableToSchemaMutation</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>kd</name><operator>.</operator><name>tables</name><operator>.</operator><name>dropped</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>t</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>addDropTableToSchemaMutation</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>kd</name><operator>.</operator><name>tables</name><operator>.</operator><name>altered</name></name><argument_list>(<argument><expr><name><name>Difference</name><operator>.</operator><name>SHALLOW</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>td</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>addAlterTableToSchemaMutation</name><argument_list>(<argument><expr><name><name>td</name><operator>.</operator><name>before</name></name></expr></argument>, <argument><expr><name><name>td</name><operator>.</operator><name>after</name></name></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>kd</name><operator>.</operator><name>views</name><operator>.</operator><name>created</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>addViewToSchemaMutation</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>kd</name><operator>.</operator><name>views</name><operator>.</operator><name>dropped</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>addDropViewToSchemaMutation</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>kd</name><operator>.</operator><name>views</name><operator>.</operator><name>altered</name></name><argument_list>(<argument><expr><name><name>Difference</name><operator>.</operator><name>SHALLOW</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>vd</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>addAlterViewToSchemaMutation</name><argument_list>(<argument><expr><name><name>vd</name><operator>.</operator><name>before</name></name></expr></argument>, <argument><expr><name><name>vd</name><operator>.</operator><name>after</name></name></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>kd</name><operator>.</operator><name>udfs</name><operator>.</operator><name>created</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>f</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>addFunctionToSchemaMutation</name><argument_list>(<argument><expr><operator>(</operator><name>UDFunction</name><operator>)</operator> <name>f</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>kd</name><operator>.</operator><name>udfs</name><operator>.</operator><name>dropped</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>f</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>addDropFunctionToSchemaMutation</name><argument_list>(<argument><expr><operator>(</operator><name>UDFunction</name><operator>)</operator> <name>f</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>kd</name><operator>.</operator><name>udfs</name><operator>.</operator><name>altered</name></name><argument_list>(<argument><expr><name><name>Difference</name><operator>.</operator><name>SHALLOW</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>fd</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>addFunctionToSchemaMutation</name><argument_list>(<argument><expr><name><name>fd</name><operator>.</operator><name>after</name></name></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>kd</name><operator>.</operator><name>udas</name><operator>.</operator><name>created</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>a</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>addAggregateToSchemaMutation</name><argument_list>(<argument><expr><operator>(</operator><name>UDAggregate</name><operator>)</operator> <name>a</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>kd</name><operator>.</operator><name>udas</name><operator>.</operator><name>dropped</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>a</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>addDropAggregateToSchemaMutation</name><argument_list>(<argument><expr><operator>(</operator><name>UDAggregate</name><operator>)</operator> <name>a</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>kd</name><operator>.</operator><name>udas</name><operator>.</operator><name>altered</name></name><argument_list>(<argument><expr><name><name>Difference</name><operator>.</operator><name>SHALLOW</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>ad</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>addAggregateToSchemaMutation</name><argument_list>(<argument><expr><name><name>ad</name><operator>.</operator><name>after</name></name></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>mutations</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ks</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><call><name><name>builder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><call><name><name>mutations</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Add entries to system_schema.* for the hardcoded system keyspaces
     */</comment>
    <function><type><specifier>static</specifier> <name>void</name></type> <name>saveSystemKeyspacesSchema</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>KeyspaceMetadata</name></type> <name>system</name> <init>= <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getKeyspaceMetadata</name></name><argument_list>(<argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SYSTEM_KEYSPACE_NAME</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>KeyspaceMetadata</name></type> <name>schema</name> <init>= <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getKeyspaceMetadata</name></name><argument_list>(<argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SCHEMA_KEYSPACE_NAME</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>long</name></type> <name>timestamp</name> <init>= <expr><call><name><name>FBUtilities</name><operator>.</operator><name>timestampMicros</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// delete old, possibly obsolete entries in schema tables</comment>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>schemaTable</name> <range>: <expr><name>ALL</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>query</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"DELETE FROM %s.%s USING TIMESTAMP ? WHERE keyspace_name = ?"</literal></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SCHEMA_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name>schemaTable</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>systemKeyspace</name> <range>: <expr><name><name>SchemaConstants</name><operator>.</operator><name>LOCAL_SYSTEM_KEYSPACE_NAMES</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>executeOnceInternal</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>systemKeyspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        </block_content>}</block></for>

        <comment type="line">// (+1 to timestamp to make sure we don't get shadowed by the tombstones we just added)</comment>
        <expr_stmt><expr><call><name>makeCreateKeyspaceMutation</name><argument_list>(<argument><expr><name>system</name></expr></argument>, <argument><expr><name>timestamp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call><operator>.</operator><call><name>apply</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>makeCreateKeyspaceMutation</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>timestamp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call><operator>.</operator><call><name>apply</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name>void</name></type> <name>truncate</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>ALL</name><operator>.</operator><name>reverse</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>table</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>getSchemaCFS</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>truncateBlocking</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>flush</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>isUnsafeSystem</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>ALL</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>table</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>FBUtilities</name><operator>.</operator><name>waitOnFuture</name></name><argument_list>(<argument><expr><call><name>getSchemaCFS</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>forceFlush</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Read schema from system keyspace and calculate MD5 digest of every row, resulting digest
     * will be converted into UUID which would act as content-based version of the schema.
     */</comment>
    <function><type><specifier>static</specifier> <name>UUID</name></type> <name>calculateSchemaDigest</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Digest</name></type> <name>digest</name> <init>= <expr><call><name><name>Digest</name><operator>.</operator><name>forSchema</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>table</name> <range>: <expr><name>ALL</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ReadCommand</name></type> <name>cmd</name> <init>= <expr><call><name>getReadCommandForTableSchema</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <try>try <init>(<decl><type><name>ReadExecutionController</name></type> <name>executionController</name> <init>= <expr><call><name><name>cmd</name><operator>.</operator><name>executionController</name></name><argument_list>()</argument_list></call></expr></init></decl>;
                 <decl><type><name>PartitionIterator</name></type> <name>schema</name> <init>= <expr><call><name><name>cmd</name><operator>.</operator><name>executeInternal</name></name><argument_list>(<argument><expr><name>executionController</name></expr></argument>)</argument_list></call></expr></init></decl>)</init>
            <block>{<block_content>
                <while>while <condition>(<expr><call><name><name>schema</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <try>try <init>(<decl><type><name>RowIterator</name></type> <name>partition</name> <init>= <expr><call><name><name>schema</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>)</init>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isSystemKeyspaceSchemaPartition</name><argument_list>(<argument><expr><call><name><name>partition</name><operator>.</operator><name>partitionKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><call><name><name>RowIterators</name><operator>.</operator><name>digest</name></name><argument_list>(<argument><expr><name>partition</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    </block_content>}</block></try>
                </block_content>}</block></while>
            </block_content>}</block></try>
        </block_content>}</block></for>
        <return>return <expr><call><name><name>UUID</name><operator>.</operator><name>nameUUIDFromBytes</name></name><argument_list>(<argument><expr><call><name><name>digest</name><operator>.</operator><name>digest</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @param schemaTableName The name of the table responsible for part of the schema
     * @return CFS responsible to hold low-level serialized schema
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>ColumnFamilyStore</name></type> <name>getSchemaCFS</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>schemaTableName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SCHEMA_KEYSPACE_NAME</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getColumnFamilyStore</name><argument_list>(<argument><expr><name>schemaTableName</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @param schemaTableName The name of the table responsible for part of the schema.
     * @return low-level schema representation
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>ReadCommand</name></type> <name>getReadCommandForTableSchema</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>schemaTableName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name> <init>= <expr><call><name>getSchemaCFS</name><argument_list>(<argument><expr><name>schemaTableName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>PartitionRangeReadCommand</name><operator>.</operator><name>allDataRead</name></name><argument_list>(<argument><expr><call><name><name>cfs</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>nowInSeconds</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></type> <name>convertSchemaToMutations</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>DecoratedKey</name></argument>, <argument><name><name>Mutation</name><operator>.</operator><name>PartitionUpdateCollector</name></name></argument>&gt;</argument_list></name></type> <name>mutationMap</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>String</name></type> <name>table</name> <range>: <expr><name>ALL</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>convertSchemaToMutations</name><argument_list>(<argument><expr><name>mutationMap</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <return>return <expr><call><name><name>mutationMap</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name><name>Mutation</name><operator>.</operator><name>PartitionUpdateCollector</name></name><operator>::</operator><name>build</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>convertSchemaToMutations</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>DecoratedKey</name></argument>, <argument><name><name>Mutation</name><operator>.</operator><name>PartitionUpdateCollector</name></name></argument>&gt;</argument_list></name></type> <name>mutationMap</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>schemaTableName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ReadCommand</name></type> <name>cmd</name> <init>= <expr><call><name>getReadCommandForTableSchema</name><argument_list>(<argument><expr><name>schemaTableName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <init>(<decl><type><name>ReadExecutionController</name></type> <name>executionController</name> <init>= <expr><call><name><name>cmd</name><operator>.</operator><name>executionController</name></name><argument_list>()</argument_list></call></expr></init></decl>;
             <decl><type><name>UnfilteredPartitionIterator</name></type> <name>iter</name> <init>= <expr><call><name><name>cmd</name><operator>.</operator><name>executeLocally</name></name><argument_list>(<argument><expr><name>executionController</name></expr></argument>)</argument_list></call></expr></init></decl>)</init>
        <block>{<block_content>
            <while>while <condition>(<expr><call><name><name>iter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <try>try <init>(<decl><type><name>UnfilteredRowIterator</name></type> <name>partition</name> <init>= <expr><call><name><name>iter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>)</init>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name>isSystemKeyspaceSchemaPartition</name><argument_list>(<argument><expr><call><name><name>partition</name><operator>.</operator><name>partitionKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <continue>continue;</continue></block_content></block></if></if_stmt>

                    <decl_stmt><decl><type><name>DecoratedKey</name></type> <name>key</name> <init>= <expr><call><name><name>partition</name><operator>.</operator><name>partitionKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>Mutation</name><operator>.</operator><name>PartitionUpdateCollector</name></name></type> <name>puCollector</name> <init>= <expr><call><name><name>mutationMap</name><operator>.</operator><name>computeIfAbsent</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>k</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><operator>new</operator> <call><name><name>Mutation</name><operator>.</operator><name>PartitionUpdateCollector</name></name><argument_list>(<argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SCHEMA_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>puCollector</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>makeUpdateForSchema</name><argument_list>(<argument><expr><name>partition</name></expr></argument>, <argument><expr><call><name><name>cmd</name><operator>.</operator><name>columnFilter</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></try>
            </block_content>}</block></while>
        </block_content>}</block></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a PartitionUpdate from a partition containing some schema table content.
     * This is mainly calling {@code PartitionUpdate.fromIterator} except for the fact that it deals with
     * the problem described in #12236.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>PartitionUpdate</name></type> <name>makeUpdateForSchema</name><parameter_list>(<parameter><decl><type><name>UnfilteredRowIterator</name></type> <name>partition</name></decl></parameter>, <parameter><decl><type><name>ColumnFilter</name></type> <name>filter</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// This method is used during schema migration tasks, and if cdc is disabled, we want to force excluding the</comment>
        <comment type="line">// 'cdc' column from the TABLES/VIEWS schema table because it is problematic if received by older nodes (see #12236</comment>
        <comment type="line">// and #12697). Otherwise though, we just simply "buffer" the content of the partition into a PartitionUpdate.</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>isCDCEnabled</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>TABLES_WITH_CDC_ADDED</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>partition</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>PartitionUpdate</name><operator>.</operator><name>fromIterator</name></name><argument_list>(<argument><expr><name>partition</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <comment type="line">// We want to skip the 'cdc' column. A simple solution for that is based on the fact that</comment>
        <comment type="line">// 'PartitionUpdate.fromIterator()' will ignore any columns that are marked as 'fetched' but not 'queried'.</comment>
        <decl_stmt><decl><type><name><name>ColumnFilter</name><operator>.</operator><name>Builder</name></name></type> <name>builder</name> <init>= <expr><call><name><name>ColumnFilter</name><operator>.</operator><name>allRegularColumnsBuilder</name></name><argument_list>(<argument><expr><call><name><name>partition</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>ColumnMetadata</name></type> <name>column</name> <range>: <expr><call><name><name>filter</name><operator>.</operator><name>fetchedColumns</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>column</name><operator>.</operator><name>name</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"cdc"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>

        <return>return <expr><call><name><name>PartitionUpdate</name><operator>.</operator><name>fromIterator</name></name><argument_list>(<argument><expr><name>partition</name></expr></argument>, <argument><expr><call><name><name>builder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isSystemKeyspaceSchemaPartition</name><parameter_list>(<parameter><decl><type><name>DecoratedKey</name></type> <name>partitionKey</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>SchemaConstants</name><operator>.</operator><name>isLocalSystemKeyspace</name></name><argument_list>(<argument><expr><call><name><name>UTF8Type</name><operator>.</operator><name>instance</name><operator>.</operator><name>compose</name></name><argument_list>(<argument><expr><call><name><name>partitionKey</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block">/*
     * Schema entities to mutations
     */</comment>

    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>private</specifier> <specifier>static</specifier> <name>DecoratedKey</name></type> <name>decorate</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>metadata</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>metadata</name><operator>.</operator><name>partitioner</name><operator>.</operator><name>decorateKey</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>AbstractType</name><operator>)</operator> <name><name>metadata</name><operator>.</operator><name>partitionKeyType</name></name><operator>)</operator><operator>.</operator><call><name>decompose</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name><name>Mutation</name><operator>.</operator><name>SimpleBuilder</name></name></type> <name>makeCreateKeyspaceMutation</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>KeyspaceParams</name></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Mutation</name><operator>.</operator><name>SimpleBuilder</name></name></type> <name>builder</name> <init>= <expr><call><name><name>Mutation</name><operator>.</operator><name>simpleBuilder</name></name><argument_list>(<argument><expr><name><name>Keyspaces</name><operator>.</operator><name>keyspace</name></name></expr></argument>, <argument><expr><call><name>decorate</name><argument_list>(<argument><expr><name>Keyspaces</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                                 <operator>.</operator><call><name>timestamp</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>Keyspaces</name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>row</name><argument_list>()</argument_list></call>
               <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><call><name><name>KeyspaceParams</name><operator>.</operator><name>Option</name><operator>.</operator><name>DURABLE_WRITES</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>params</name><operator>.</operator><name>durableWrites</name></name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><call><name><name>KeyspaceParams</name><operator>.</operator><name>Option</name><operator>.</operator><name>REPLICATION</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>params</name><operator>.</operator><name>replication</name><operator>.</operator><name>asMap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>builder</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name><name>Mutation</name><operator>.</operator><name>SimpleBuilder</name></name></type> <name>makeCreateKeyspaceMutation</name><parameter_list>(<parameter><decl><type><name>KeyspaceMetadata</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Mutation</name><operator>.</operator><name>SimpleBuilder</name></name></type> <name>builder</name> <init>= <expr><call><name>makeCreateKeyspaceMutation</name><argument_list>(<argument><expr><name><name>keyspace</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>keyspace</name><operator>.</operator><name>params</name></name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>keyspace</name><operator>.</operator><name>tables</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>table</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>addTableToSchemaMutation</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>keyspace</name><operator>.</operator><name>views</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>view</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>addViewToSchemaMutation</name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>keyspace</name><operator>.</operator><name>types</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>type</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>addTypeToSchemaMutation</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>keyspace</name><operator>.</operator><name>functions</name><operator>.</operator><name>udfs</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>udf</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>addFunctionToSchemaMutation</name><argument_list>(<argument><expr><name>udf</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>keyspace</name><operator>.</operator><name>functions</name><operator>.</operator><name>udas</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>uda</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>addAggregateToSchemaMutation</name><argument_list>(<argument><expr><name>uda</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>builder</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name><name>Mutation</name><operator>.</operator><name>SimpleBuilder</name></name></type> <name>makeDropKeyspaceMutation</name><parameter_list>(<parameter><decl><type><name>KeyspaceMetadata</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Mutation</name><operator>.</operator><name>SimpleBuilder</name></name></type> <name>builder</name> <init>= <expr><call><name><name>Mutation</name><operator>.</operator><name>simpleBuilder</name></name><argument_list>(<argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SCHEMA_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><call><name>decorate</name><argument_list>(<argument><expr><name>Keyspaces</name></expr></argument>, <argument><expr><name><name>keyspace</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                                 <operator>.</operator><call><name>timestamp</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>TableMetadata</name></type> <name>schemaTable</name> <range>: <expr><name>ALL_TABLE_METADATA</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>schemaTable</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>delete</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <return>return <expr><name>builder</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>addTypeToSchemaMutation</name><parameter_list>(<parameter><decl><type><name>UserType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name><name>Mutation</name><operator>.</operator><name>SimpleBuilder</name></name></type> <name>mutation</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>mutation</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>Types</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>row</name><argument_list>(<argument><expr><call><name><name>type</name><operator>.</operator><name>getNameAsString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"field_names"</literal></expr></argument>, <argument><expr><call><name><name>type</name><operator>.</operator><name>fieldNames</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>FieldIdentifier</name><operator>::</operator><name>toString</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name>toList</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"field_types"</literal></expr></argument>, <argument><expr><call><name><name>type</name><operator>.</operator><name>fieldTypes</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>AbstractType</name><operator>::</operator><name>asCQL3Type</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>CQL3Type</name><operator>::</operator><name>toString</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name>toList</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>addDropTypeToSchemaMutation</name><parameter_list>(<parameter><decl><type><name>UserType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name><name>Mutation</name><operator>.</operator><name>SimpleBuilder</name></name></type> <name>builder</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>Types</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>row</name><argument_list>(<argument><expr><name><name>type</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>delete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name><name>Mutation</name><operator>.</operator><name>SimpleBuilder</name></name></type> <name>makeCreateTableMutation</name><parameter_list>(<parameter><decl><type><name>KeyspaceMetadata</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// Include the serialized keyspace in case the target node missed a CREATE KEYSPACE migration (see CASSANDRA-5631).</comment>
        <decl_stmt><decl><type><name><name>Mutation</name><operator>.</operator><name>SimpleBuilder</name></name></type> <name>builder</name> <init>= <expr><call><name>makeCreateKeyspaceMutation</name><argument_list>(<argument><expr><name><name>keyspace</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>keyspace</name><operator>.</operator><name>params</name></name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>addTableToSchemaMutation</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>builder</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name>void</name></type> <name>addTableToSchemaMutation</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>withColumnsAndTriggers</name></decl></parameter>, <parameter><decl><type><name><name>Mutation</name><operator>.</operator><name>SimpleBuilder</name></name></type> <name>builder</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Row</name><operator>.</operator><name>SimpleBuilder</name></name></type> <name>rowBuilder</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>Tables</name></expr></argument>)</argument_list></call>
                                              <operator>.</operator><call><name>row</name><argument_list>(<argument><expr><name><name>table</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call>
                                              <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><call><name><name>table</name><operator>.</operator><name>id</name><operator>.</operator><name>asUUID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                              <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"flags"</literal></expr></argument>, <argument><expr><call><name><name>TableMetadata</name><operator>.</operator><name>Flag</name><operator>.</operator><name>toStringSet</name></name><argument_list>(<argument><expr><name><name>table</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>addTableParamsToRowBuilder</name><argument_list>(<argument><expr><name><name>table</name><operator>.</operator><name>params</name></name></expr></argument>, <argument><expr><name>rowBuilder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>withColumnsAndTriggers</name></expr>)</condition>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>ColumnMetadata</name></type> <name>column</name> <range>: <expr><call><name><name>table</name><operator>.</operator><name>columns</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>addColumnToSchemaMutation</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <for>for <control>(<init><decl><type><name>DroppedColumn</name></type> <name>column</name> <range>: <expr><call><name><name>table</name><operator>.</operator><name>droppedColumns</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>addDroppedColumnToSchemaMutation</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <for>for <control>(<init><decl><type><name>TriggerMetadata</name></type> <name>trigger</name> <range>: <expr><name><name>table</name><operator>.</operator><name>triggers</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>addTriggerToSchemaMutation</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>trigger</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <for>for <control>(<init><decl><type><name>IndexMetadata</name></type> <name>index</name> <range>: <expr><name><name>table</name><operator>.</operator><name>indexes</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>addIndexToSchemaMutation</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>addTableParamsToRowBuilder</name><parameter_list>(<parameter><decl><type><name>TableParams</name></type> <name>params</name></decl></parameter>, <parameter><decl><type><name><name>Row</name><operator>.</operator><name>SimpleBuilder</name></name></type> <name>builder</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"bloom_filter_fp_chance"</literal></expr></argument>, <argument><expr><name><name>params</name><operator>.</operator><name>bloomFilterFpChance</name></name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"comment"</literal></expr></argument>, <argument><expr><name><name>params</name><operator>.</operator><name>comment</name></name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"dclocal_read_repair_chance"</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call> <comment type="line">// no longer used, left for drivers' sake</comment>
               <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"default_time_to_live"</literal></expr></argument>, <argument><expr><name><name>params</name><operator>.</operator><name>defaultTimeToLive</name></name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"gc_grace_seconds"</literal></expr></argument>, <argument><expr><name><name>params</name><operator>.</operator><name>gcGraceSeconds</name></name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"max_index_interval"</literal></expr></argument>, <argument><expr><name><name>params</name><operator>.</operator><name>maxIndexInterval</name></name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"memtable_flush_period_in_ms"</literal></expr></argument>, <argument><expr><name><name>params</name><operator>.</operator><name>memtableFlushPeriodInMs</name></name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"min_index_interval"</literal></expr></argument>, <argument><expr><name><name>params</name><operator>.</operator><name>minIndexInterval</name></name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"read_repair_chance"</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call> <comment type="line">// no longer used, left for drivers' sake</comment>
               <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"speculative_retry"</literal></expr></argument>, <argument><expr><call><name><name>params</name><operator>.</operator><name>speculativeRetry</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"additional_write_policy"</literal></expr></argument>, <argument><expr><call><name><name>params</name><operator>.</operator><name>additionalWritePolicy</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"crc_check_chance"</literal></expr></argument>, <argument><expr><name><name>params</name><operator>.</operator><name>crcCheckChance</name></name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"caching"</literal></expr></argument>, <argument><expr><call><name><name>params</name><operator>.</operator><name>caching</name><operator>.</operator><name>asMap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"compaction"</literal></expr></argument>, <argument><expr><call><name><name>params</name><operator>.</operator><name>compaction</name><operator>.</operator><name>asMap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"compression"</literal></expr></argument>, <argument><expr><call><name><name>params</name><operator>.</operator><name>compression</name><operator>.</operator><name>asMap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"read_repair"</literal></expr></argument>, <argument><expr><call><name><name>params</name><operator>.</operator><name>readRepair</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"extensions"</literal></expr></argument>, <argument><expr><name><name>params</name><operator>.</operator><name>extensions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Only add CDC-enabled flag to schema if it's enabled on the node. This is to work around RTE's post-8099 if a 3.8+</comment>
        <comment type="line">// node sends table schema to a &lt; 3.8 versioned node with an unknown column.</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>isCDCEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"cdc"</literal></expr></argument>, <argument><expr><name><name>params</name><operator>.</operator><name>cdc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>addAlterTableToSchemaMutation</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>oldTable</name></decl></parameter>, <parameter><decl><type><name>TableMetadata</name></type> <name>newTable</name></decl></parameter>, <parameter><decl><type><name><name>Mutation</name><operator>.</operator><name>SimpleBuilder</name></name></type> <name>builder</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>addTableToSchemaMutation</name><argument_list>(<argument><expr><name>newTable</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>MapDifference</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>columnDiff</name> <init>= <expr><call><name><name>Maps</name><operator>.</operator><name>difference</name></name><argument_list>(<argument><expr><name><name>oldTable</name><operator>.</operator><name>columns</name></name></expr></argument>, <argument><expr><name><name>newTable</name><operator>.</operator><name>columns</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// columns that are no longer needed</comment>
        <for>for <control>(<init><decl><type><name>ColumnMetadata</name></type> <name>column</name> <range>: <expr><call><name><name>columnDiff</name><operator>.</operator><name>entriesOnlyOnLeft</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>values</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>dropColumnFromSchemaMutation</name><argument_list>(<argument><expr><name>oldTable</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <comment type="line">// newly added columns</comment>
        <for>for <control>(<init><decl><type><name>ColumnMetadata</name></type> <name>column</name> <range>: <expr><call><name><name>columnDiff</name><operator>.</operator><name>entriesOnlyOnRight</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>values</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>addColumnToSchemaMutation</name><argument_list>(<argument><expr><name>newTable</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <comment type="line">// old columns with updated attributes</comment>
        <for>for <control>(<init><decl><type><name>ByteBuffer</name></type> <name>name</name> <range>: <expr><call><name><name>columnDiff</name><operator>.</operator><name>entriesDiffering</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>keySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>addColumnToSchemaMutation</name><argument_list>(<argument><expr><name>newTable</name></expr></argument>, <argument><expr><call><name><name>newTable</name><operator>.</operator><name>getColumn</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <comment type="line">// dropped columns</comment>
        <decl_stmt><decl><type><name><name>MapDifference</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>DroppedColumn</name></argument>&gt;</argument_list></name></type> <name>droppedColumnDiff</name> <init>=
            <expr><call><name><name>Maps</name><operator>.</operator><name>difference</name></name><argument_list>(<argument><expr><name><name>oldTable</name><operator>.</operator><name>droppedColumns</name></name></expr></argument>, <argument><expr><name><name>newTable</name><operator>.</operator><name>droppedColumns</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// newly dropped columns</comment>
        <for>for <control>(<init><decl><type><name>DroppedColumn</name></type> <name>column</name> <range>: <expr><call><name><name>droppedColumnDiff</name><operator>.</operator><name>entriesOnlyOnRight</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>values</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>addDroppedColumnToSchemaMutation</name><argument_list>(<argument><expr><name>newTable</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <comment type="line">// columns added then dropped again</comment>
        <for>for <control>(<init><decl><type><name>ByteBuffer</name></type> <name>name</name> <range>: <expr><call><name><name>droppedColumnDiff</name><operator>.</operator><name>entriesDiffering</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>keySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>addDroppedColumnToSchemaMutation</name><argument_list>(<argument><expr><name>newTable</name></expr></argument>, <argument><expr><call><name><name>newTable</name><operator>.</operator><name>droppedColumns</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <decl_stmt><decl><type><name><name>MapDifference</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TriggerMetadata</name></argument>&gt;</argument_list></name></type> <name>triggerDiff</name> <init>= <expr><call><name>triggersDiff</name><argument_list>(<argument><expr><name><name>oldTable</name><operator>.</operator><name>triggers</name></name></expr></argument>, <argument><expr><name><name>newTable</name><operator>.</operator><name>triggers</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// dropped triggers</comment>
        <for>for <control>(<init><decl><type><name>TriggerMetadata</name></type> <name>trigger</name> <range>: <expr><call><name><name>triggerDiff</name><operator>.</operator><name>entriesOnlyOnLeft</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>values</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>dropTriggerFromSchemaMutation</name><argument_list>(<argument><expr><name>oldTable</name></expr></argument>, <argument><expr><name>trigger</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <comment type="line">// newly created triggers</comment>
        <for>for <control>(<init><decl><type><name>TriggerMetadata</name></type> <name>trigger</name> <range>: <expr><call><name><name>triggerDiff</name><operator>.</operator><name>entriesOnlyOnRight</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>values</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>addTriggerToSchemaMutation</name><argument_list>(<argument><expr><name>newTable</name></expr></argument>, <argument><expr><name>trigger</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <decl_stmt><decl><type><name><name>MapDifference</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>IndexMetadata</name></argument>&gt;</argument_list></name></type> <name>indexesDiff</name> <init>= <expr><call><name>indexesDiff</name><argument_list>(<argument><expr><name><name>oldTable</name><operator>.</operator><name>indexes</name></name></expr></argument>, <argument><expr><name><name>newTable</name><operator>.</operator><name>indexes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// dropped indexes</comment>
        <for>for <control>(<init><decl><type><name>IndexMetadata</name></type> <name>index</name> <range>: <expr><call><name><name>indexesDiff</name><operator>.</operator><name>entriesOnlyOnLeft</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>values</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>dropIndexFromSchemaMutation</name><argument_list>(<argument><expr><name>oldTable</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <comment type="line">// newly created indexes</comment>
        <for>for <control>(<init><decl><type><name>IndexMetadata</name></type> <name>index</name> <range>: <expr><call><name><name>indexesDiff</name><operator>.</operator><name>entriesOnlyOnRight</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>values</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>addIndexToSchemaMutation</name><argument_list>(<argument><expr><name>newTable</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <comment type="line">// updated indexes need to be updated</comment>
        <for>for <control>(<init><decl><type><name><name>MapDifference</name><operator>.</operator><name><name>ValueDifference</name><argument_list type="generic">&lt;<argument><name>IndexMetadata</name></argument>&gt;</argument_list></name></name></type> <name>diff</name> <range>: <expr><call><name><name>indexesDiff</name><operator>.</operator><name>entriesDiffering</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>values</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>addUpdatedIndexToSchemaMutation</name><argument_list>(<argument><expr><name>newTable</name></expr></argument>, <argument><expr><call><name><name>diff</name><operator>.</operator><name>rightValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name><name>Mutation</name><operator>.</operator><name>SimpleBuilder</name></name></type> <name>makeUpdateTableMutation</name><parameter_list>(<parameter><decl><type><name>KeyspaceMetadata</name></type> <name>keyspace</name></decl></parameter>,
                                                          <parameter><decl><type><name>TableMetadata</name></type> <name>oldTable</name></decl></parameter>,
                                                          <parameter><decl><type><name>TableMetadata</name></type> <name>newTable</name></decl></parameter>,
                                                          <parameter><decl><type><name>long</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Mutation</name><operator>.</operator><name>SimpleBuilder</name></name></type> <name>builder</name> <init>= <expr><call><name>makeCreateKeyspaceMutation</name><argument_list>(<argument><expr><name><name>keyspace</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>keyspace</name><operator>.</operator><name>params</name></name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>addAlterTableToSchemaMutation</name><argument_list>(<argument><expr><name>oldTable</name></expr></argument>, <argument><expr><name>newTable</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>builder</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>MapDifference</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>IndexMetadata</name></argument>&gt;</argument_list></name></type> <name>indexesDiff</name><parameter_list>(<parameter><decl><type><name>Indexes</name></type> <name>before</name></decl></parameter>, <parameter><decl><type><name>Indexes</name></type> <name>after</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>IndexMetadata</name></argument>&gt;</argument_list></name></type> <name>beforeMap</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>before</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>i</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>beforeMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>i</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>IndexMetadata</name></argument>&gt;</argument_list></name></type> <name>afterMap</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>after</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>i</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>afterMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>i</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><call><name><name>Maps</name><operator>.</operator><name>difference</name></name><argument_list>(<argument><expr><name>beforeMap</name></expr></argument>, <argument><expr><name>afterMap</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>MapDifference</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TriggerMetadata</name></argument>&gt;</argument_list></name></type> <name>triggersDiff</name><parameter_list>(<parameter><decl><type><name>Triggers</name></type> <name>before</name></decl></parameter>, <parameter><decl><type><name>Triggers</name></type> <name>after</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TriggerMetadata</name></argument>&gt;</argument_list></name></type> <name>beforeMap</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>before</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>t</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>beforeMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TriggerMetadata</name></argument>&gt;</argument_list></name></type> <name>afterMap</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>after</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>t</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>afterMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>t</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><call><name><name>Maps</name><operator>.</operator><name>difference</name></name><argument_list>(<argument><expr><name>beforeMap</name></expr></argument>, <argument><expr><name>afterMap</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name><name>Mutation</name><operator>.</operator><name>SimpleBuilder</name></name></type> <name>makeDropTableMutation</name><parameter_list>(<parameter><decl><type><name>KeyspaceMetadata</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// Include the serialized keyspace in case the target node missed a CREATE KEYSPACE migration (see CASSANDRA-5631).</comment>
        <decl_stmt><decl><type><name><name>Mutation</name><operator>.</operator><name>SimpleBuilder</name></name></type> <name>builder</name> <init>= <expr><call><name>makeCreateKeyspaceMutation</name><argument_list>(<argument><expr><name><name>keyspace</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>keyspace</name><operator>.</operator><name>params</name></name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>addDropTableToSchemaMutation</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>builder</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>addDropTableToSchemaMutation</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name><name>Mutation</name><operator>.</operator><name>SimpleBuilder</name></name></type> <name>builder</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>Tables</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>row</name><argument_list>(<argument><expr><name><name>table</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>delete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>ColumnMetadata</name></type> <name>column</name> <range>: <expr><call><name><name>table</name><operator>.</operator><name>columns</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>dropColumnFromSchemaMutation</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <for>for <control>(<init><decl><type><name>TriggerMetadata</name></type> <name>trigger</name> <range>: <expr><name><name>table</name><operator>.</operator><name>triggers</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>dropTriggerFromSchemaMutation</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>trigger</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <for>for <control>(<init><decl><type><name>DroppedColumn</name></type> <name>column</name> <range>: <expr><call><name><name>table</name><operator>.</operator><name>droppedColumns</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>dropDroppedColumnFromSchemaMutation</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <for>for <control>(<init><decl><type><name>IndexMetadata</name></type> <name>index</name> <range>: <expr><name><name>table</name><operator>.</operator><name>indexes</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>dropIndexFromSchemaMutation</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>addColumnToSchemaMutation</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>ColumnMetadata</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name><name>Mutation</name><operator>.</operator><name>SimpleBuilder</name></name></type> <name>builder</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>type</name> <init>= <expr><name><name>column</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>instanceof</operator> <name>ReversedType</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ReversedType</name><operator>)</operator> <name>type</name><operator>)</operator><operator>.</operator><name>baseType</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>Columns</name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>row</name><argument_list>(<argument><expr><name><name>table</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><call><name><name>column</name><operator>.</operator><name>name</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"column_name_bytes"</literal></expr></argument>, <argument><expr><name><name>column</name><operator>.</operator><name>name</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"kind"</literal></expr></argument>, <argument><expr><call><name><name>column</name><operator>.</operator><name>kind</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"position"</literal></expr></argument>, <argument><expr><call><name><name>column</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"clustering_order"</literal></expr></argument>, <argument><expr><call><name><name>column</name><operator>.</operator><name>clusteringOrder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><call><name><name>type</name><operator>.</operator><name>asCQL3Type</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>dropColumnFromSchemaMutation</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>ColumnMetadata</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name><name>Mutation</name><operator>.</operator><name>SimpleBuilder</name></name></type> <name>builder</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// Note: we do want to use name.toString(), not name.bytes directly for backward compatibility (For CQL3, this won't make a difference).</comment>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>Columns</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>row</name><argument_list>(<argument><expr><name><name>table</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><call><name><name>column</name><operator>.</operator><name>name</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>delete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>addDroppedColumnToSchemaMutation</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>DroppedColumn</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name><name>Mutation</name><operator>.</operator><name>SimpleBuilder</name></name></type> <name>builder</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>DroppedColumns</name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>row</name><argument_list>(<argument><expr><name><name>table</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><call><name><name>column</name><operator>.</operator><name>column</name><operator>.</operator><name>name</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"dropped_time"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>TimeUnit</name><operator>.</operator><name>MICROSECONDS</name><operator>.</operator><name>toMillis</name></name><argument_list>(<argument><expr><name><name>column</name><operator>.</operator><name>droppedTime</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><call><name><name>column</name><operator>.</operator><name>column</name><operator>.</operator><name>type</name><operator>.</operator><name>asCQL3Type</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"kind"</literal></expr></argument>, <argument><expr><call><name><name>column</name><operator>.</operator><name>column</name><operator>.</operator><name>kind</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>dropDroppedColumnFromSchemaMutation</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>DroppedColumn</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name><name>Mutation</name><operator>.</operator><name>SimpleBuilder</name></name></type> <name>builder</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>DroppedColumns</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>row</name><argument_list>(<argument><expr><name><name>table</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><call><name><name>column</name><operator>.</operator><name>column</name><operator>.</operator><name>name</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>delete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>addTriggerToSchemaMutation</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>TriggerMetadata</name></type> <name>trigger</name></decl></parameter>, <parameter><decl><type><name><name>Mutation</name><operator>.</operator><name>SimpleBuilder</name></name></type> <name>builder</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>Triggers</name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>row</name><argument_list>(<argument><expr><name><name>table</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>trigger</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"options"</literal></expr></argument>, <argument><expr><call><name><name>Collections</name><operator>.</operator><name>singletonMap</name></name><argument_list>(<argument><expr><literal type="string">"class"</literal></expr></argument>, <argument><expr><name><name>trigger</name><operator>.</operator><name>classOption</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>dropTriggerFromSchemaMutation</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>TriggerMetadata</name></type> <name>trigger</name></decl></parameter>, <parameter><decl><type><name><name>Mutation</name><operator>.</operator><name>SimpleBuilder</name></name></type> <name>builder</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>Triggers</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>row</name><argument_list>(<argument><expr><name><name>table</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>trigger</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>delete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>addViewToSchemaMutation</name><parameter_list>(<parameter><decl><type><name>ViewMetadata</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>includeColumns</name></decl></parameter>, <parameter><decl><type><name><name>Mutation</name><operator>.</operator><name>SimpleBuilder</name></name></type> <name>builder</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>TableMetadata</name></type> <name>table</name> <init>= <expr><name><name>view</name><operator>.</operator><name>metadata</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Row</name><operator>.</operator><name>SimpleBuilder</name></name></type> <name>rowBuilder</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>Views</name></expr></argument>)</argument_list></call>
                                              <operator>.</operator><call><name>row</name><argument_list>(<argument><expr><call><name><name>view</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                              <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"include_all_columns"</literal></expr></argument>, <argument><expr><name><name>view</name><operator>.</operator><name>includeAllColumns</name></name></expr></argument>)</argument_list></call>
                                              <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"base_table_id"</literal></expr></argument>, <argument><expr><call><name><name>view</name><operator>.</operator><name>baseTableId</name><operator>.</operator><name>asUUID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                              <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"base_table_name"</literal></expr></argument>, <argument><expr><name><name>view</name><operator>.</operator><name>baseTableName</name></name></expr></argument>)</argument_list></call>
                                              <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"where_clause"</literal></expr></argument>, <argument><expr><call><name><name>view</name><operator>.</operator><name>whereClause</name><operator>.</operator><name>toCQLString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                              <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><call><name><name>table</name><operator>.</operator><name>id</name><operator>.</operator><name>asUUID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>addTableParamsToRowBuilder</name><argument_list>(<argument><expr><name><name>table</name><operator>.</operator><name>params</name></name></expr></argument>, <argument><expr><name>rowBuilder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>includeColumns</name></expr>)</condition>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>ColumnMetadata</name></type> <name>column</name> <range>: <expr><call><name><name>table</name><operator>.</operator><name>columns</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>addColumnToSchemaMutation</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <for>for <control>(<init><decl><type><name>DroppedColumn</name></type> <name>column</name> <range>: <expr><call><name><name>table</name><operator>.</operator><name>droppedColumns</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>addDroppedColumnToSchemaMutation</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>addDropViewToSchemaMutation</name><parameter_list>(<parameter><decl><type><name>ViewMetadata</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name><name>Mutation</name><operator>.</operator><name>SimpleBuilder</name></name></type> <name>builder</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>Views</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>row</name><argument_list>(<argument><expr><call><name><name>view</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>delete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>TableMetadata</name></type> <name>table</name> <init>= <expr><name><name>view</name><operator>.</operator><name>metadata</name></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>ColumnMetadata</name></type> <name>column</name> <range>: <expr><call><name><name>table</name><operator>.</operator><name>columns</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>dropColumnFromSchemaMutation</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>addAlterViewToSchemaMutation</name><parameter_list>(<parameter><decl><type><name>ViewMetadata</name></type> <name>before</name></decl></parameter>, <parameter><decl><type><name>ViewMetadata</name></type> <name>after</name></decl></parameter>, <parameter><decl><type><name><name>Mutation</name><operator>.</operator><name>SimpleBuilder</name></name></type> <name>builder</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>addViewToSchemaMutation</name><argument_list>(<argument><expr><name>after</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>MapDifference</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>columnDiff</name> <init>= <expr><call><name><name>Maps</name><operator>.</operator><name>difference</name></name><argument_list>(<argument><expr><name><name>before</name><operator>.</operator><name>metadata</name><operator>.</operator><name>columns</name></name></expr></argument>, <argument><expr><name><name>after</name><operator>.</operator><name>metadata</name><operator>.</operator><name>columns</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// columns that are no longer needed</comment>
        <for>for <control>(<init><decl><type><name>ColumnMetadata</name></type> <name>column</name> <range>: <expr><call><name><name>columnDiff</name><operator>.</operator><name>entriesOnlyOnLeft</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>values</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>dropColumnFromSchemaMutation</name><argument_list>(<argument><expr><name><name>before</name><operator>.</operator><name>metadata</name></name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <comment type="line">// newly added columns</comment>
        <for>for <control>(<init><decl><type><name>ColumnMetadata</name></type> <name>column</name> <range>: <expr><call><name><name>columnDiff</name><operator>.</operator><name>entriesOnlyOnRight</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>values</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>addColumnToSchemaMutation</name><argument_list>(<argument><expr><name><name>after</name><operator>.</operator><name>metadata</name></name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <comment type="line">// old columns with updated attributes</comment>
        <for>for <control>(<init><decl><type><name>ByteBuffer</name></type> <name>name</name> <range>: <expr><call><name><name>columnDiff</name><operator>.</operator><name>entriesDiffering</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>keySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>addColumnToSchemaMutation</name><argument_list>(<argument><expr><name><name>after</name><operator>.</operator><name>metadata</name></name></expr></argument>, <argument><expr><call><name><name>after</name><operator>.</operator><name>metadata</name><operator>.</operator><name>getColumn</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>addIndexToSchemaMutation</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>IndexMetadata</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name><name>Mutation</name><operator>.</operator><name>SimpleBuilder</name></name></type> <name>builder</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>Indexes</name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>row</name><argument_list>(<argument><expr><name><name>table</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>index</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"kind"</literal></expr></argument>, <argument><expr><call><name><name>index</name><operator>.</operator><name>kind</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"options"</literal></expr></argument>, <argument><expr><name><name>index</name><operator>.</operator><name>options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>dropIndexFromSchemaMutation</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>IndexMetadata</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name><name>Mutation</name><operator>.</operator><name>SimpleBuilder</name></name></type> <name>builder</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>Indexes</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>row</name><argument_list>(<argument><expr><name><name>table</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>index</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>delete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>addUpdatedIndexToSchemaMutation</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>,
                                                        <parameter><decl><type><name>IndexMetadata</name></type> <name>index</name></decl></parameter>,
                                                        <parameter><decl><type><name><name>Mutation</name><operator>.</operator><name>SimpleBuilder</name></name></type> <name>builder</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>addIndexToSchemaMutation</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>addFunctionToSchemaMutation</name><parameter_list>(<parameter><decl><type><name>UDFunction</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name><name>Mutation</name><operator>.</operator><name>SimpleBuilder</name></name></type> <name>builder</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>Functions</name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>row</name><argument_list>(<argument><expr><call><name><name>function</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call><operator>.</operator><name>name</name></expr></argument>, <argument><expr><call><name><name>function</name><operator>.</operator><name>argumentsList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"body"</literal></expr></argument>, <argument><expr><call><name><name>function</name><operator>.</operator><name>body</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"language"</literal></expr></argument>, <argument><expr><call><name><name>function</name><operator>.</operator><name>language</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"return_type"</literal></expr></argument>, <argument><expr><call><name><name>function</name><operator>.</operator><name>returnType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>asCQL3Type</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"called_on_null_input"</literal></expr></argument>, <argument><expr><call><name><name>function</name><operator>.</operator><name>isCalledOnNullInput</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"argument_names"</literal></expr></argument>, <argument><expr><call><name><name>function</name><operator>.</operator><name>argNames</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>c</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>bbToString</name><argument_list>(<argument><expr><name><name>c</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name>toList</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>bbToString</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>bb</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <return>return <expr><call><name><name>ByteBufferUtil</name><operator>.</operator><name>string</name></name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>CharacterCodingException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>addDropFunctionToSchemaMutation</name><parameter_list>(<parameter><decl><type><name>UDFunction</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name><name>Mutation</name><operator>.</operator><name>SimpleBuilder</name></name></type> <name>builder</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>Functions</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>row</name><argument_list>(<argument><expr><call><name><name>function</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call><operator>.</operator><name>name</name></expr></argument>, <argument><expr><call><name><name>function</name><operator>.</operator><name>argumentsList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>delete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>addAggregateToSchemaMutation</name><parameter_list>(<parameter><decl><type><name>UDAggregate</name></type> <name>aggregate</name></decl></parameter>, <parameter><decl><type><name><name>Mutation</name><operator>.</operator><name>SimpleBuilder</name></name></type> <name>builder</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>Aggregates</name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>row</name><argument_list>(<argument><expr><call><name><name>aggregate</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call><operator>.</operator><name>name</name></expr></argument>, <argument><expr><call><name><name>aggregate</name><operator>.</operator><name>argumentsList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"return_type"</literal></expr></argument>, <argument><expr><call><name><name>aggregate</name><operator>.</operator><name>returnType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>asCQL3Type</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"state_func"</literal></expr></argument>, <argument><expr><call><name><name>aggregate</name><operator>.</operator><name>stateFunction</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>name</name><argument_list>()</argument_list></call><operator>.</operator><name>name</name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"state_type"</literal></expr></argument>, <argument><expr><call><name><name>aggregate</name><operator>.</operator><name>stateType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>asCQL3Type</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"final_func"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name><name>aggregate</name><operator>.</operator><name>finalFunction</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>aggregate</name><operator>.</operator><name>finalFunction</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>name</name><argument_list>()</argument_list></call><operator>.</operator><name>name</name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"initcond"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name><name>aggregate</name><operator>.</operator><name>initialCondition</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>
                                <comment type="line">// must use the frozen state type here, as 'null' for unfrozen collections may mean 'empty'</comment>
                                ?</condition><then> <expr><call><name><name>aggregate</name><operator>.</operator><name>stateType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>freeze</name><argument_list>()</argument_list></call><operator>.</operator><call><name>asCQL3Type</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toCQLLiteral</name><argument_list>(<argument><expr><call><name><name>aggregate</name><operator>.</operator><name>initialCondition</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>ProtocolVersion</name><operator>.</operator><name>CURRENT</name></name></expr></argument>)</argument_list></call></expr>
                                </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>addDropAggregateToSchemaMutation</name><parameter_list>(<parameter><decl><type><name>UDAggregate</name></type> <name>aggregate</name></decl></parameter>, <parameter><decl><type><name><name>Mutation</name><operator>.</operator><name>SimpleBuilder</name></name></type> <name>builder</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>Aggregates</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>row</name><argument_list>(<argument><expr><call><name><name>aggregate</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call><operator>.</operator><name>name</name></expr></argument>, <argument><expr><call><name><name>aggregate</name><operator>.</operator><name>argumentsList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>delete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block">/*
     * Fetching schema
     */</comment>

    <function><type><specifier>static</specifier> <name>Keyspaces</name></type> <name>fetchNonSystemKeyspaces</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>fetchKeyspacesWithout</name><argument_list>(<argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>LOCAL_SYSTEM_KEYSPACE_NAMES</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Keyspaces</name></type> <name>fetchKeyspacesWithout</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>excludedKeyspaceNames</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>query</name> <init>= <expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"SELECT keyspace_name FROM %s.%s"</literal></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SCHEMA_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name>KEYSPACES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>Keyspaces</name><operator>.</operator><name>Builder</name></name></type> <name>keyspaces</name> <init>= <expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>Keyspaces</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>UntypedResultSet</name><operator>.</operator><name>Row</name></name></type> <name>row</name> <range>: <expr><call><name>query</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>keyspaceName</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"keyspace_name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>excludedKeyspaceNames</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>keyspaces</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>fetchKeyspace</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><call><name><name>keyspaces</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>KeyspaceMetadata</name></type> <name>fetchKeyspace</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>KeyspaceParams</name></type> <name>params</name> <init>= <expr><call><name>fetchKeyspaceParams</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Types</name></type> <name>types</name> <init>= <expr><call><name>fetchTypes</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Tables</name></type> <name>tables</name> <init>= <expr><call><name>fetchTables</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>types</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Views</name></type> <name>views</name> <init>= <expr><call><name>fetchViews</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>types</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Functions</name></type> <name>functions</name> <init>= <expr><call><name>fetchFunctions</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>types</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>KeyspaceMetadata</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>tables</name></expr></argument>, <argument><expr><name>views</name></expr></argument>, <argument><expr><name>types</name></expr></argument>, <argument><expr><name>functions</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>KeyspaceParams</name></type> <name>fetchKeyspaceParams</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>query</name> <init>= <expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"SELECT * FROM %s.%s WHERE keyspace_name = ?"</literal></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SCHEMA_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name>KEYSPACES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>UntypedResultSet</name><operator>.</operator><name>Row</name></name></type> <name>row</name> <init>= <expr><call><name>query</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>one</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>durableWrites</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><call><name><name>KeyspaceParams</name><operator>.</operator><name>Option</name><operator>.</operator><name>DURABLE_WRITES</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>replication</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getFrozenTextMap</name></name><argument_list>(<argument><expr><call><name><name>KeyspaceParams</name><operator>.</operator><name>Option</name><operator>.</operator><name>REPLICATION</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>KeyspaceParams</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>durableWrites</name></expr></argument>, <argument><expr><name>replication</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Types</name></type> <name>fetchTypes</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>query</name> <init>= <expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"SELECT * FROM %s.%s WHERE keyspace_name = ?"</literal></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SCHEMA_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name>TYPES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>Types</name><operator>.</operator><name>RawBuilder</name></name></type> <name>types</name> <init>= <expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>Types</name><operator>.</operator><name>rawBuilder</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>UntypedResultSet</name><operator>.</operator><name>Row</name></name></type> <name>row</name> <range>: <expr><call><name>query</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"type_name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>fieldNames</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getFrozenList</name></name><argument_list>(<argument><expr><literal type="string">"field_names"</literal></expr></argument>, <argument><expr><name><name>UTF8Type</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>fieldTypes</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getFrozenList</name></name><argument_list>(<argument><expr><literal type="string">"field_types"</literal></expr></argument>, <argument><expr><name><name>UTF8Type</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>types</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>fieldNames</name></expr></argument>, <argument><expr><name>fieldTypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><call><name><name>types</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Tables</name></type> <name>fetchTables</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>Types</name></type> <name>types</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>query</name> <init>= <expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"SELECT table_name FROM %s.%s WHERE keyspace_name = ?"</literal></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SCHEMA_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name>TABLES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>Tables</name><operator>.</operator><name>Builder</name></name></type> <name>tables</name> <init>= <expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>Tables</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>UntypedResultSet</name><operator>.</operator><name>Row</name></name></type> <name>row</name> <range>: <expr><call><name>query</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>tableName</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"table_name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <try>try
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>tables</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>fetchTable</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>types</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>MissingColumns</name></type> <name>exc</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>errorMsg</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"No partition columns found for table %s.%s in %s.%s.  This may be due to "</literal> <operator>+</operator>
                                                <literal type="string">"corruption or concurrent dropping and altering of a table. If this table is supposed "</literal> <operator>+</operator>
                                                <literal type="string">"to be dropped, {}run the following query to cleanup: "</literal> <operator>+</operator>
                                                <literal type="string">"\"DELETE FROM %s.%s WHERE keyspace_name = '%s' AND table_name = '%s'; "</literal> <operator>+</operator>
                                                <literal type="string">"DELETE FROM %s.%s WHERE keyspace_name = '%s' AND table_name = '%s';\" "</literal> <operator>+</operator>
                                                <literal type="string">"If the table is not supposed to be dropped, restore %s.%s sstables from backups."</literal></expr></argument>,
                                                <argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SCHEMA_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name>COLUMNS</name></expr></argument>,
                                                <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SCHEMA_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name>TABLES</name></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>,
                                                <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SCHEMA_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name>COLUMNS</name></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>,
                                                <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SCHEMA_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name>COLUMNS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name>IGNORE_CORRUPTED_SCHEMA_TABLES</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>errorMsg</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>exc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>errorMsg</name></expr></argument>, <argument><expr><literal type="string">"restart cassandra with -Dcassandra.ignore_corrupted_schema_tables=true and "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <throw>throw <expr><name>exc</name></expr>;</throw>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></for>
        <return>return <expr><call><name><name>tables</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>TableMetadata</name></type> <name>fetchTable</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name>Types</name></type> <name>types</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>query</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"SELECT * FROM %s.%s WHERE keyspace_name = ? AND table_name = ?"</literal></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SCHEMA_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name>TABLES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>UntypedResultSet</name></type> <name>rows</name> <init>= <expr><call><name>query</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>rows</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s:%s not found in the schema definitions keyspace."</literal></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name><name>UntypedResultSet</name><operator>.</operator><name>Row</name></name></type> <name>row</name> <init>= <expr><call><name><name>rows</name><operator>.</operator><name>one</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>TableMetadata</name><operator>.</operator><name>Flag</name></name></argument>&gt;</argument_list></name></type> <name>flags</name> <init>= <expr><call><name><name>TableMetadata</name><operator>.</operator><name>Flag</name><operator>.</operator><name>fromStringSet</name></name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getFrozenSet</name></name><argument_list>(<argument><expr><literal type="string">"flags"</literal></expr></argument>, <argument><expr><name><name>UTF8Type</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>TableMetadata</name><operator>.</operator><name>builder</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><call><name><name>TableId</name><operator>.</operator><name>fromUUID</name></name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getUUID</name></name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>flags</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>params</name><argument_list>(<argument><expr><call><name>createTableParamsFromRow</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>addColumns</name><argument_list>(<argument><expr><call><name>fetchColumns</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>types</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>droppedColumns</name><argument_list>(<argument><expr><call><name>fetchDroppedColumns</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>indexes</name><argument_list>(<argument><expr><call><name>fetchIndexes</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>triggers</name><argument_list>(<argument><expr><call><name>fetchTriggers</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name>TableParams</name></type> <name>createTableParamsFromRow</name><parameter_list>(<parameter><decl><type><name><name>UntypedResultSet</name><operator>.</operator><name>Row</name></name></type> <name>row</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>TableParams</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call>
                          <operator>.</operator><call><name>bloomFilterFpChance</name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getDouble</name></name><argument_list>(<argument><expr><literal type="string">"bloom_filter_fp_chance"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>caching</name><argument_list>(<argument><expr><call><name><name>CachingParams</name><operator>.</operator><name>fromMap</name></name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getFrozenTextMap</name></name><argument_list>(<argument><expr><literal type="string">"caching"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>comment</name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"comment"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>compaction</name><argument_list>(<argument><expr><call><name><name>CompactionParams</name><operator>.</operator><name>fromMap</name></name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getFrozenTextMap</name></name><argument_list>(<argument><expr><literal type="string">"compaction"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>compression</name><argument_list>(<argument><expr><call><name><name>CompressionParams</name><operator>.</operator><name>fromMap</name></name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getFrozenTextMap</name></name><argument_list>(<argument><expr><literal type="string">"compression"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>defaultTimeToLive</name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"default_time_to_live"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>extensions</name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getFrozenMap</name></name><argument_list>(<argument><expr><literal type="string">"extensions"</literal></expr></argument>, <argument><expr><name><name>UTF8Type</name><operator>.</operator><name>instance</name></name></expr></argument>, <argument><expr><name><name>BytesType</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>gcGraceSeconds</name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"gc_grace_seconds"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>maxIndexInterval</name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"max_index_interval"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>memtableFlushPeriodInMs</name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"memtable_flush_period_in_ms"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>minIndexInterval</name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"min_index_interval"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>crcCheckChance</name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getDouble</name></name><argument_list>(<argument><expr><literal type="string">"crc_check_chance"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>speculativeRetry</name><argument_list>(<argument><expr><call><name><name>SpeculativeRetryPolicy</name><operator>.</operator><name>fromString</name></name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"speculative_retry"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>additionalWritePolicy</name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>row</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><literal type="string">"additional_write_policy"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then>
                                                     <expr><call><name><name>SpeculativeRetryPolicy</name><operator>.</operator><name>fromString</name></name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"additional_write_policy"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>:
                                                     <expr><call><name><name>SpeculativeRetryPolicy</name><operator>.</operator><name>fromString</name></name><argument_list>(<argument><expr><literal type="string">"99PERCENTILE"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>cdc</name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><literal type="string">"cdc"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>row</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"cdc"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>readRepair</name><argument_list>(<argument><expr><call><name>getReadRepairStrategy</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>fetchColumns</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>Types</name></type> <name>types</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>query</name> <init>= <expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"SELECT * FROM %s.%s WHERE keyspace_name = ? AND table_name = ?"</literal></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SCHEMA_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name>COLUMNS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>UntypedResultSet</name></type> <name>columnRows</name> <init>= <expr><call><name>query</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>columnRows</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>MissingColumns</name><argument_list>(<argument><expr><literal type="string">"Columns not found in schema table for "</literal> <operator>+</operator> <name>keyspace</name> <operator>+</operator> <literal type="char">'.'</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>columns</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>columnRows</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>row</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>columns</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>createColumnFromRow</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>types</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>columns</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>noneMatch</name><argument_list>(<argument><expr><name>ColumnMetadata</name><operator>::</operator><name>isPartitionKey</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>MissingColumns</name><argument_list>(<argument><expr><literal type="string">"No partition key columns found in schema table for "</literal> <operator>+</operator> <name>keyspace</name> <operator>+</operator> <literal type="string">"."</literal> <operator>+</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <return>return <expr><name>columns</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name>ColumnMetadata</name></type> <name>createColumnFromRow</name><parameter_list>(<parameter><decl><type><name><name>UntypedResultSet</name><operator>.</operator><name>Row</name></name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>Types</name></type> <name>types</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>keyspace</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"keyspace_name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>table</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"table_name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>ColumnMetadata</name><operator>.</operator><name>Kind</name></name></type> <name>kind</name> <init>= <expr><call><name><name>ColumnMetadata</name><operator>.</operator><name>Kind</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"kind"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toUpperCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>position</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"position"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ClusteringOrder</name></type> <name>order</name> <init>= <expr><call><name><name>ClusteringOrder</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"clustering_order"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toUpperCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>type</name> <init>= <expr><call><name><name>CQLTypeParser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>types</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>order</name> <operator>==</operator> <name><name>ClusteringOrder</name><operator>.</operator><name>DESC</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <call><name><name>ReversedType</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>ColumnIdentifier</name></type> <name>name</name> <init>= <expr><operator>new</operator> <call><name>ColumnIdentifier</name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getBytes</name></name><argument_list>(<argument><expr><literal type="string">"column_name_bytes"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"column_name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><operator>new</operator> <call><name>ColumnMetadata</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>DroppedColumn</name></argument>&gt;</argument_list></name></type> <name>fetchDroppedColumns</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>table</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>query</name> <init>= <expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"SELECT * FROM %s.%s WHERE keyspace_name = ? AND table_name = ?"</literal></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SCHEMA_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name>DROPPED_COLUMNS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>, <argument><name>DroppedColumn</name></argument>&gt;</argument_list></name></type> <name>columns</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>UntypedResultSet</name><operator>.</operator><name>Row</name></name></type> <name>row</name> <range>: <expr><call><name>query</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>DroppedColumn</name></type> <name>column</name> <init>= <expr><call><name>createDroppedColumnFromRow</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>columns</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>column</name><operator>.</operator><name>column</name><operator>.</operator><name>name</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>columns</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>DroppedColumn</name></type> <name>createDroppedColumnFromRow</name><parameter_list>(<parameter><decl><type><name><name>UntypedResultSet</name><operator>.</operator><name>Row</name></name></type> <name>row</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>keyspace</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"keyspace_name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>table</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"table_name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"column_name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="block">/*
         * we never store actual UDT names in dropped column types (so that we can safely drop types if nothing refers to
         * them anymore), so before storing dropped columns in schema we expand UDTs to tuples. See expandUserTypes method.
         * Because of that, we can safely pass Types.none() to parse()
         */</comment>
        <decl_stmt><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>type</name> <init>= <expr><call><name><name>CQLTypeParser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>Types</name><operator>.</operator><name>none</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ColumnMetadata</name><operator>.</operator><name>Kind</name></name></type> <name>kind</name> <init>= <expr><ternary><condition><expr><call><name><name>row</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><literal type="string">"kind"</literal></expr></argument>)</argument_list></call></expr>
                                 ?</condition><then> <expr><call><name><name>ColumnMetadata</name><operator>.</operator><name>Kind</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"kind"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toUpperCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>
                                 </then><else>: <expr><name><name>ColumnMetadata</name><operator>.</operator><name>Kind</name><operator>.</operator><name>REGULAR</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <assert>assert <expr><name>kind</name> <operator>==</operator> <name><name>ColumnMetadata</name><operator>.</operator><name>Kind</name><operator>.</operator><name>REGULAR</name></name> <operator>||</operator> <name>kind</name> <operator>==</operator> <name><name>ColumnMetadata</name><operator>.</operator><name>Kind</name><operator>.</operator><name>STATIC</name></name>
            <operator>:</operator> <literal type="string">"Unexpected dropped column kind: "</literal> <operator>+</operator> <call><name><name>kind</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</assert>

        <decl_stmt><decl><type><name>ColumnMetadata</name></type> <name>column</name> <init>= <expr><operator>new</operator> <call><name>ColumnMetadata</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><call><name><name>ColumnIdentifier</name><operator>.</operator><name>getInterned</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>ColumnMetadata</name><operator>.</operator><name>NO_POSITION</name></name></expr></argument>, <argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>droppedTime</name> <init>= <expr><call><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name><operator>.</operator><name>toMicros</name></name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="string">"dropped_time"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>new</operator> <call><name>DroppedColumn</name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><name>droppedTime</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Indexes</name></type> <name>fetchIndexes</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>table</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>query</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"SELECT * FROM %s.%s WHERE keyspace_name = ? AND table_name = ?"</literal></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SCHEMA_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name>INDEXES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Indexes</name><operator>.</operator><name>Builder</name></name></type> <name>indexes</name> <init>= <expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>Indexes</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>query</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>row</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>indexes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>createIndexMetadataFromRow</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>indexes</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>IndexMetadata</name></type> <name>createIndexMetadataFromRow</name><parameter_list>(<parameter><decl><type><name><name>UntypedResultSet</name><operator>.</operator><name>Row</name></name></type> <name>row</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"index_name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>IndexMetadata</name><operator>.</operator><name>Kind</name></name></type> <name>type</name> <init>= <expr><call><name><name>IndexMetadata</name><operator>.</operator><name>Kind</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"kind"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getFrozenTextMap</name></name><argument_list>(<argument><expr><literal type="string">"options"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>IndexMetadata</name><operator>.</operator><name>fromSchemaMetadata</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Triggers</name></type> <name>fetchTriggers</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>table</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>query</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"SELECT * FROM %s.%s WHERE keyspace_name = ? AND table_name = ?"</literal></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SCHEMA_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name>TRIGGERS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Triggers</name><operator>.</operator><name>Builder</name></name></type> <name>triggers</name> <init>= <expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>Triggers</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>query</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>row</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>triggers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>createTriggerFromRow</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>triggers</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>TriggerMetadata</name></type> <name>createTriggerFromRow</name><parameter_list>(<parameter><decl><type><name><name>UntypedResultSet</name><operator>.</operator><name>Row</name></name></type> <name>row</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"trigger_name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>classOption</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getFrozenTextMap</name></name><argument_list>(<argument><expr><literal type="string">"options"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="string">"class"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>new</operator> <call><name>TriggerMetadata</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>classOption</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Views</name></type> <name>fetchViews</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>Types</name></type> <name>types</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>query</name> <init>= <expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"SELECT view_name FROM %s.%s WHERE keyspace_name = ?"</literal></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SCHEMA_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name>VIEWS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>Views</name><operator>.</operator><name>Builder</name></name></type> <name>views</name> <init>= <expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>Views</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>UntypedResultSet</name><operator>.</operator><name>Row</name></name></type> <name>row</name> <range>: <expr><call><name>query</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>views</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name>fetchView</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"view_name"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>types</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <return>return <expr><call><name><name>views</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>ViewMetadata</name></type> <name>fetchView</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>viewName</name></decl></parameter>, <parameter><decl><type><name>Types</name></type> <name>types</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>query</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"SELECT * FROM %s.%s WHERE keyspace_name = ? AND view_name = ?"</literal></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SCHEMA_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name>VIEWS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>UntypedResultSet</name></type> <name>rows</name> <init>= <expr><call><name>query</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>viewName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>rows</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s:%s not found in the schema definitions keyspace."</literal></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>viewName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name><name>UntypedResultSet</name><operator>.</operator><name>Row</name></name></type> <name>row</name> <init>= <expr><call><name><name>rows</name><operator>.</operator><name>one</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>TableId</name></type> <name>baseTableId</name> <init>= <expr><call><name><name>TableId</name><operator>.</operator><name>fromUUID</name></name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getUUID</name></name><argument_list>(<argument><expr><literal type="string">"base_table_id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>baseTableName</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"base_table_name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>includeAll</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"include_all_columns"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>whereClauseString</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"where_clause"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>columns</name> <init>= <expr><call><name>fetchColumns</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>viewName</name></expr></argument>, <argument><expr><name>types</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>TableMetadata</name></type> <name>metadata</name> <init>=
            <expr><call><name><name>TableMetadata</name><operator>.</operator><name>builder</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>viewName</name></expr></argument>, <argument><expr><call><name><name>TableId</name><operator>.</operator><name>fromUUID</name></name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getUUID</name></name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                         <operator>.</operator><call><name>kind</name><argument_list>(<argument><expr><name><name>TableMetadata</name><operator>.</operator><name>Kind</name><operator>.</operator><name>VIEW</name></name></expr></argument>)</argument_list></call>
                         <operator>.</operator><call><name>addColumns</name><argument_list>(<argument><expr><name>columns</name></expr></argument>)</argument_list></call>
                         <operator>.</operator><call><name>droppedColumns</name><argument_list>(<argument><expr><call><name>fetchDroppedColumns</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>viewName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                         <operator>.</operator><call><name>params</name><argument_list>(<argument><expr><call><name>createTableParamsFromRow</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                         <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>WhereClause</name></type> <name>whereClause</name></decl>;</decl_stmt>

        <try>try
        <block>{<block_content>
            <expr_stmt><expr><name>whereClause</name> <operator>=</operator> <call><name><name>WhereClause</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>whereClauseString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>RecognitionException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"Unexpected error while parsing materialized view's where clause for '%s' (got %s)"</literal></expr></argument>, <argument><expr><name>viewName</name></expr></argument>, <argument><expr><name>whereClauseString</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>

        <return>return <expr><operator>new</operator> <call><name>ViewMetadata</name><argument_list>(<argument><expr><name>baseTableId</name></expr></argument>, <argument><expr><name>baseTableName</name></expr></argument>, <argument><expr><name>includeAll</name></expr></argument>, <argument><expr><name>whereClause</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Functions</name></type> <name>fetchFunctions</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>Types</name></type> <name>types</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>UDFunction</name></argument>&gt;</argument_list></name></type> <name>udfs</name> <init>= <expr><call><name>fetchUDFs</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>types</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>UDAggregate</name></argument>&gt;</argument_list></name></type> <name>udas</name> <init>= <expr><call><name>fetchUDAs</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>udfs</name></expr></argument>, <argument><expr><name>types</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>Functions</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>udfs</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>udas</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>UDFunction</name></argument>&gt;</argument_list></name></type> <name>fetchUDFs</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name>Types</name></type> <name>types</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>query</name> <init>= <expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"SELECT * FROM %s.%s WHERE keyspace_name = ?"</literal></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SCHEMA_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name>FUNCTIONS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>UDFunction</name></argument>&gt;</argument_list></name></type> <name>functions</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>UntypedResultSet</name><operator>.</operator><name>Row</name></name></type> <name>row</name> <range>: <expr><call><name>query</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>functions</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>createUDFFromRow</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>types</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <return>return <expr><name>functions</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>UDFunction</name></type> <name>createUDFFromRow</name><parameter_list>(<parameter><decl><type><name><name>UntypedResultSet</name><operator>.</operator><name>Row</name></name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>Types</name></type> <name>types</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>ksName</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"keyspace_name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>functionName</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"function_name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FunctionName</name></type> <name>name</name> <init>= <expr><operator>new</operator> <call><name>FunctionName</name><argument_list>(<argument><expr><name>ksName</name></expr></argument>, <argument><expr><name>functionName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>&gt;</argument_list></name></type> <name>argNames</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>arg</name> <range>: <expr><call><name><name>row</name><operator>.</operator><name>getFrozenList</name></name><argument_list>(<argument><expr><literal type="string">"argument_names"</literal></expr></argument>, <argument><expr><name><name>UTF8Type</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>argNames</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ColumnIdentifier</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>argTypes</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>type</name> <range>: <expr><call><name><name>row</name><operator>.</operator><name>getFrozenList</name></name><argument_list>(<argument><expr><literal type="string">"argument_types"</literal></expr></argument>, <argument><expr><name><name>UTF8Type</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>argTypes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>CQLTypeParser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>ksName</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>types</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <decl_stmt><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>returnType</name> <init>= <expr><call><name><name>CQLTypeParser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>ksName</name></expr></argument>, <argument><expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"return_type"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>types</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>language</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"language"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>body</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"body"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>calledOnNullInput</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"called_on_null_input"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block">/*
         * TODO: find a way to get rid of Schema.instance dependency; evaluate if the opimisation below makes a difference
         * in the first place. Remove if it isn't.
         */</comment>
        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>functions</name><operator>.</operator><name>Function</name></name></type> <name>existing</name> <init>= <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>findFunction</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>argTypes</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>orElse</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>existing</name> <operator>instanceof</operator> <name>UDFunction</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// This check prevents duplicate compilation of effectively the same UDF.</comment>
            <comment type="line">// Duplicate compilation attempts can occur on the coordinator node handling the CREATE FUNCTION</comment>
            <comment type="line">// statement, since CreateFunctionStatement needs to execute UDFunction.create but schema migration</comment>
            <comment type="line">// also needs that (since it needs to handle its own change).</comment>
            <decl_stmt><decl><type><name>UDFunction</name></type> <name>udf</name> <init>= <expr><operator>(</operator><name>UDFunction</name><operator>)</operator> <name>existing</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>udf</name><operator>.</operator><name>argNames</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>argNames</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                <call><name><name>udf</name><operator>.</operator><name>argTypes</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>argTypes</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                <call><name><name>udf</name><operator>.</operator><name>returnType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>returnType</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                <operator>!</operator><call><name><name>udf</name><operator>.</operator><name>isAggregate</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
                <call><name><name>udf</name><operator>.</operator><name>language</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>language</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                <call><name><name>udf</name><operator>.</operator><name>body</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                <call><name><name>udf</name><operator>.</operator><name>isCalledOnNullInput</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>calledOnNullInput</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Skipping duplicate compilation of already existing UDF {}"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>udf</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <try>try
        <block>{<block_content>
            <return>return <expr><call><name><name>UDFunction</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>argNames</name></expr></argument>, <argument><expr><name>argTypes</name></expr></argument>, <argument><expr><name>returnType</name></expr></argument>, <argument><expr><name>calledOnNullInput</name></expr></argument>, <argument><expr><name>language</name></expr></argument>, <argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidRequestException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Cannot load function '%s' from schema: this function won't be available (on this node)"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>UDFunction</name><operator>.</operator><name>createBrokenFunction</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>argNames</name></expr></argument>, <argument><expr><name>argTypes</name></expr></argument>, <argument><expr><name>returnType</name></expr></argument>, <argument><expr><name>calledOnNullInput</name></expr></argument>, <argument><expr><name>language</name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>UDAggregate</name></argument>&gt;</argument_list></name></type> <name>fetchUDAs</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>, <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>UDFunction</name></argument>&gt;</argument_list></name></type> <name>udfs</name></decl></parameter>, <parameter><decl><type><name>Types</name></type> <name>types</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>query</name> <init>= <expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"SELECT * FROM %s.%s WHERE keyspace_name = ?"</literal></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SCHEMA_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name>AGGREGATES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>UDAggregate</name></argument>&gt;</argument_list></name></type> <name>aggregates</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>query</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>row</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>aggregates</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>createUDAFromRow</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>udfs</name></expr></argument>, <argument><expr><name>types</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>aggregates</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>UDAggregate</name></type> <name>createUDAFromRow</name><parameter_list>(<parameter><decl><type><name><name>UntypedResultSet</name><operator>.</operator><name>Row</name></name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>UDFunction</name></argument>&gt;</argument_list></name></type> <name>functions</name></decl></parameter>, <parameter><decl><type><name>Types</name></type> <name>types</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>ksName</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"keyspace_name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>functionName</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"aggregate_name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FunctionName</name></type> <name>name</name> <init>= <expr><operator>new</operator> <call><name>FunctionName</name><argument_list>(<argument><expr><name>ksName</name></expr></argument>, <argument><expr><name>functionName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>argTypes</name> <init>=
            <expr><call><name><name>row</name><operator>.</operator><name>getFrozenList</name></name><argument_list>(<argument><expr><literal type="string">"argument_types"</literal></expr></argument>, <argument><expr><name><name>UTF8Type</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call>
               <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>t</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>CQLTypeParser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>ksName</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>types</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name>toList</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>returnType</name> <init>= <expr><call><name><name>CQLTypeParser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>ksName</name></expr></argument>, <argument><expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"return_type"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>types</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>FunctionName</name></type> <name>stateFunc</name> <init>= <expr><operator>new</operator> <call><name>FunctionName</name><argument_list>(<argument><expr><name>ksName</name></expr></argument>, <argument><expr><operator>(</operator><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"state_func"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>FunctionName</name></type> <name>finalFunc</name> <init>= <expr><ternary><condition><expr><call><name><name>row</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><literal type="string">"final_func"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>new</operator> <call><name>FunctionName</name><argument_list>(<argument><expr><name>ksName</name></expr></argument>, <argument><expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"final_func"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>stateType</name> <init>= <expr><ternary><condition><expr><call><name><name>row</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><literal type="string">"state_type"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name><name>CQLTypeParser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>ksName</name></expr></argument>, <argument><expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"state_type"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>types</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>initcond</name> <init>= <expr><ternary><condition><expr><call><name><name>row</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><literal type="string">"initcond"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name><name>Terms</name><operator>.</operator><name>asBytes</name></name><argument_list>(<argument><expr><name>ksName</name></expr></argument>, <argument><expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"initcond"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>stateType</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name><name>UDAggregate</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>functions</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>argTypes</name></expr></argument>, <argument><expr><name>returnType</name></expr></argument>, <argument><expr><name>stateFunc</name></expr></argument>, <argument><expr><name>finalFunc</name></expr></argument>, <argument><expr><name>stateType</name></expr></argument>, <argument><expr><name>initcond</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>UntypedResultSet</name></type> <name>query</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>Object</name><modifier>...</modifier></type> <name>variables</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>executeInternal</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>variables</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block">/*
     * Merging schema
     */</comment>

    <comment type="block" format="javadoc">/**
     * Computes the set of names of keyspaces affected by the provided schema mutations.
     */</comment>
    <function><type><specifier>static</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>affectedKeyspaces</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></type> <name>mutations</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// only compare the keyspaces affected by this set of schema mutations</comment>
        <return>return <expr><call><name><name>mutations</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call>
                        <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>m</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>UTF8Type</name><operator>.</operator><name>instance</name><operator>.</operator><name>compose</name></name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>key</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name>toSet</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name>void</name></type> <name>applyChanges</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Mutation</name></argument>&gt;</argument_list></name></type> <name>mutations</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>mutations</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><name>Mutation</name><operator>::</operator><name>apply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>SchemaKeyspace</name><operator>.</operator><name>FLUSH_SCHEMA_TABLES</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>SchemaKeyspace</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name>Keyspaces</name></type> <name>fetchKeyspaces</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>toFetch</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="block">/*
         * We know the keyspace names we are going to query, but we still want to run the SELECT IN
         * query, to filter out the keyspaces that had been dropped by the applied mutation set.
         */</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>query</name> <init>= <expr><call><name>format</name><argument_list>(<argument><expr><literal type="string">"SELECT keyspace_name FROM %s.%s WHERE keyspace_name IN ?"</literal></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SCHEMA_KEYSPACE_NAME</name></name></expr></argument>, <argument><expr><name>KEYSPACES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>Keyspaces</name><operator>.</operator><name>Builder</name></name></type> <name>keyspaces</name> <init>= <expr><call><name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>Keyspaces</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>UntypedResultSet</name><operator>.</operator><name>Row</name></name></type> <name>row</name> <range>: <expr><call><name>query</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>toFetch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>keyspaces</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>fetchKeyspace</name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"keyspace_name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <return>return <expr><call><name><name>keyspaces</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <class><annotation>@<name>VisibleForTesting</name></annotation>
    <specifier>static</specifier> class <name>MissingColumns</name> <super_list><extends>extends <super><name>RuntimeException</name></super></extends></super_list>
    <block>{
        <constructor><name>MissingColumns</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>
    }</block></class>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>ReadRepairStrategy</name></type> <name>getReadRepairStrategy</name><parameter_list>(<parameter><decl><type><name><name>UntypedResultSet</name><operator>.</operator><name>Row</name></name></type> <name>row</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><ternary><condition><expr><call><name><name>row</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><literal type="string">"read_repair"</literal></expr></argument>)</argument_list></call></expr>
               ?</condition><then> <expr><call><name><name>ReadRepairStrategy</name><operator>.</operator><name>fromString</name></name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"read_repair"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>
               </then><else>: <expr><name><name>ReadRepairStrategy</name><operator>.</operator><name>BLOCKING</name></name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
