<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/service/DatacenterSyncWriteResponseHandler.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicInteger</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>IEndpointSnitch</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>NetworkTopologyStrategy</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>Replica</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>ReplicaPlan</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>Message</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>ConsistencyLevel</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>WriteType</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class blocks for a quorum of responses _in all datacenters_ (CL.EACH_QUORUM).
 */</comment>
<class><specifier>public</specifier> class <name><name>DatacenterSyncWriteResponseHandler</name><parameter_list>&lt;<parameter><name>T</name></parameter>&gt;</parameter_list></name> <super_list><extends>extends <super><name><name>AbstractWriteResponseHandler</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></super></extends></super_list>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>IEndpointSnitch</name></type> <name>snitch</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getEndpointSnitch</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>AtomicInteger</name></argument>&gt;</argument_list></name></type> <name>responses</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>AtomicInteger</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>AtomicInteger</name></type> <name>acks</name> <init>= <expr><operator>new</operator> <call><name>AtomicInteger</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>DatacenterSyncWriteResponseHandler</name><parameter_list>(<parameter><decl><type><name><name>ReplicaPlan</name><operator>.</operator><name>ForTokenWrite</name></name></type> <name>replicaPlan</name></decl></parameter>,
                                              <parameter><decl><type><name>Runnable</name></type> <name>callback</name></decl></parameter>,
                                              <parameter><decl><type><name>WriteType</name></type> <name>writeType</name></decl></parameter>,
                                              <parameter><decl><type><name>long</name></type> <name>queryStartNanoTime</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// Response is been managed by the map so make it 1 for the superclass.</comment>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>replicaPlan</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>writeType</name></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <assert>assert <expr><call><name><name>replicaPlan</name><operator>.</operator><name>consistencyLevel</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ConsistencyLevel</name><operator>.</operator><name>EACH_QUORUM</name></name></expr>;</assert>

        <if_stmt><if>if <condition>(<expr><call><name><name>replicaPlan</name><operator>.</operator><name>replicationStrategy</name></name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>NetworkTopologyStrategy</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>NetworkTopologyStrategy</name></type> <name>strategy</name> <init>= <expr><operator>(</operator><name>NetworkTopologyStrategy</name><operator>)</operator> <call><name><name>replicaPlan</name><operator>.</operator><name>replicationStrategy</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>dc</name> <range>: <expr><call><name><name>strategy</name><operator>.</operator><name>getDatacenters</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>rf</name> <init>= <expr><call><name><name>strategy</name><operator>.</operator><name>getReplicationFactor</name></name><argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call><operator>.</operator><name>allReplicas</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>responses</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>AtomicInteger</name><argument_list>(<argument><expr><operator>(</operator><name>rf</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>responses</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getLocalDataCenter</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>AtomicInteger</name><argument_list>(<argument><expr><call><name><name>ConsistencyLevel</name><operator>.</operator><name>quorumFor</name></name><argument_list>(<argument><expr><call><name><name>replicaPlan</name><operator>.</operator><name>replicationStrategy</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// During bootstrap, we have to include the pending endpoints or we may fail the consistency level</comment>
        <comment type="line">// guarantees (see #833)</comment>
        <for>for <control>(<init><decl><type><name>Replica</name></type> <name>pending</name> <range>: <expr><call><name><name>replicaPlan</name><operator>.</operator><name>pending</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>responses</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>snitch</name><operator>.</operator><name>getDatacenter</name></name><argument_list>(<argument><expr><name>pending</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>incrementAndGet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>onResponse</name><parameter_list>(<parameter><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>message</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>dataCenter</name> <init>= <expr><ternary><condition><expr><name>message</name> <operator>==</operator> <literal type="null">null</literal></expr>
                                ?</condition><then> <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getLocalDataCenter</name></name><argument_list>()</argument_list></call></expr>
                                </then><else>: <expr><call><name><name>snitch</name><operator>.</operator><name>getDatacenter</name></name><argument_list>(<argument><expr><call><name><name>message</name><operator>.</operator><name>from</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>responses</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>dataCenter</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getAndDecrement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>acks</name><operator>.</operator><name>incrementAndGet</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <for>for <control>(<init><decl><type><name>AtomicInteger</name></type> <name>i</name> <range>: <expr><call><name><name>responses</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>i</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <return>return;</return></block_content></block></if></if_stmt>
            </block_content>}</block></for>

            <comment type="line">// all the quorum conditions are met</comment>
            <expr_stmt><expr><call><name>signal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <finally>finally
        <block>{<block_content>
            <comment type="line">//Must be last after all subclass processing</comment>
            <expr_stmt><expr><call><name>logResponseToIdealCLDelegate</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>int</name></type> <name>ackCount</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>acks</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
