<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/fql/FullQueryLogger.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>fql</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>file</name><operator>.</operator><name>Path</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>file</name><operator>.</operator><name>Paths</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Sets</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>primitives</name><operator>.</operator><name>Ints</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>buffer</name><operator>.</operator><name>ByteBuf</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>openhft</name><operator>.</operator><name>chronicle</name><operator>.</operator><name>bytes</name><operator>.</operator><name>BytesStore</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>openhft</name><operator>.</operator><name>chronicle</name><operator>.</operator><name>wire</name><operator>.</operator><name>ValueOut</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>openhft</name><operator>.</operator><name>chronicle</name><operator>.</operator><name>wire</name><operator>.</operator><name>WireOut</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>CQLStatement</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>QueryEvents</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>QueryOptions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>statements</name><operator>.</operator><name>BatchStatement</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>QueryState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>transport</name><operator>.</operator><name>CBUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>transport</name><operator>.</operator><name>Message</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>ObjectSizes</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>binlog</name><operator>.</operator><name>BinLog</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>binlog</name><operator>.</operator><name>BinLogOptions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>WeightedQueue</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>github</name><operator>.</operator><name>jamm</name><operator>.</operator><name>MemoryLayoutSpecification</name></name>;</import>

<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A logger that logs entire query contents after the query finishes (or times out).
 */</comment>
<class><specifier>public</specifier> class <name>FullQueryLogger</name> <super_list><implements>implements <super><name><name>QueryEvents</name><operator>.</operator><name>Listener</name></name></super></implements></super_list>
<block>{
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>FullQueryLogger</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>CURRENT_VERSION</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="line">// encode a dummy version, to prevent pain in decoding in the future</comment>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>VERSION</name> <init>= <expr><literal type="string">"version"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TYPE</name> <init>= <expr><literal type="string">"type"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PROTOCOL_VERSION</name> <init>= <expr><literal type="string">"protocol-version"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>QUERY_OPTIONS</name> <init>= <expr><literal type="string">"query-options"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>QUERY_START_TIME</name> <init>= <expr><literal type="string">"query-start-time"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>GENERATED_TIMESTAMP</name> <init>= <expr><literal type="string">"generated-timestamp"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>GENERATED_NOW_IN_SECONDS</name> <init>= <expr><literal type="string">"generated-now-in-seconds"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KEYSPACE</name> <init>= <expr><literal type="string">"keyspace"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BATCH</name> <init>= <expr><literal type="string">"batch"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SINGLE_QUERY</name> <init>= <expr><literal type="string">"single-query"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>QUERY</name> <init>= <expr><literal type="string">"query"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BATCH_TYPE</name> <init>= <expr><literal type="string">"batch-type"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>QUERIES</name> <init>= <expr><literal type="string">"queries"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>VALUES</name> <init>= <expr><literal type="string">"values"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>EMPTY_LIST_SIZE</name> <init>= <expr><call><name><name>Ints</name><operator>.</operator><name>checkedCast</name></name><argument_list>(<argument><expr><call><name><name>ObjectSizes</name><operator>.</operator><name>measureDeep</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>EMPTY_BYTEBUF_SIZE</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>OBJECT_HEADER_SIZE</name> <init>= <expr><call><name><name>MemoryLayoutSpecification</name><operator>.</operator><name>SPEC</name><operator>.</operator><name>getObjectHeaderSize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>OBJECT_REFERENCE_SIZE</name> <init>= <expr><call><name><name>MemoryLayoutSpecification</name><operator>.</operator><name>SPEC</name><operator>.</operator><name>getReferenceSize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>FullQueryLogger</name></type> <name>instance</name> <init>= <expr><operator>new</operator> <call><name>FullQueryLogger</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>volatile</specifier> <name>BinLog</name></type> <name>binLog</name></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>enable</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>rollCycle</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>blocking</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxQueueWeight</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>maxLogSize</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>archiveCommand</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxArchiveRetries</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>binLog</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Binlog is already configured"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>binLog</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>BinLog</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>path</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call>
                                          <operator>.</operator><call><name>rollCycle</name><argument_list>(<argument><expr><name>rollCycle</name></expr></argument>)</argument_list></call>
                                          <operator>.</operator><call><name>blocking</name><argument_list>(<argument><expr><name>blocking</name></expr></argument>)</argument_list></call>
                                          <operator>.</operator><call><name>maxQueueWeight</name><argument_list>(<argument><expr><name>maxQueueWeight</name></expr></argument>)</argument_list></call>
                                          <operator>.</operator><call><name>maxLogSize</name><argument_list>(<argument><expr><name>maxLogSize</name></expr></argument>)</argument_list></call>
                                          <operator>.</operator><call><name>archiveCommand</name><argument_list>(<argument><expr><name>archiveCommand</name></expr></argument>)</argument_list></call>
                                          <operator>.</operator><call><name>maxArchiveRetries</name><argument_list>(<argument><expr><name>maxArchiveRetries</name></expr></argument>)</argument_list></call>
                                          <operator>.</operator><call><name>build</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>QueryEvents</name><operator>.</operator><name>instance</name><operator>.</operator><name>registerListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>enableWithoutClean</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>rollCycle</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>blocking</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxQueueWeight</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>maxLogSize</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>archiveCommand</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxArchiveRetries</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>binLog</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Binlog is already configured"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>binLog</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>BinLog</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>path</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call>
                                          <operator>.</operator><call><name>rollCycle</name><argument_list>(<argument><expr><name>rollCycle</name></expr></argument>)</argument_list></call>
                                          <operator>.</operator><call><name>blocking</name><argument_list>(<argument><expr><name>blocking</name></expr></argument>)</argument_list></call>
                                          <operator>.</operator><call><name>maxQueueWeight</name><argument_list>(<argument><expr><name>maxQueueWeight</name></expr></argument>)</argument_list></call>
                                          <operator>.</operator><call><name>maxLogSize</name><argument_list>(<argument><expr><name>maxLogSize</name></expr></argument>)</argument_list></call>
                                          <operator>.</operator><call><name>archiveCommand</name><argument_list>(<argument><expr><name>archiveCommand</name></expr></argument>)</argument_list></call>
                                          <operator>.</operator><call><name>maxArchiveRetries</name><argument_list>(<argument><expr><name>maxArchiveRetries</name></expr></argument>)</argument_list></call>
                                          <operator>.</operator><call><name>build</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>QueryEvents</name><operator>.</operator><name>instance</name><operator>.</operator><name>registerListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>


    <static>static
    <block>{<block_content>
        <decl_stmt><decl><type><name>ByteBuf</name></type> <name>buf</name> <init>= <expr><call><name><name>CBUtil</name><operator>.</operator><name>allocator</name><operator>.</operator><name>buffer</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><name>EMPTY_BYTEBUF_SIZE</name> <operator>=</operator> <call><name><name>Ints</name><operator>.</operator><name>checkedCast</name></name><argument_list>(<argument><expr><call><name><name>ObjectSizes</name><operator>.</operator><name>measure</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <finally>finally
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>buf</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></static>

    <function><type><specifier>public</specifier> <name>FullQueryLoggerOptions</name></type> <name>getFullQueryLoggerOptions</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isEnabled</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><specifier>final</specifier> <name>FullQueryLoggerOptions</name></type> <name>options</name> <init>= <expr><operator>new</operator> <call><name>FullQueryLoggerOptions</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>BinLogOptions</name></type> <name>binLogOptions</name> <init>= <expr><call><name><name>binLog</name><operator>.</operator><name>getBinLogOptions</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name><name>options</name><operator>.</operator><name>archive_command</name></name> <operator>=</operator> <name><name>binLogOptions</name><operator>.</operator><name>archive_command</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>options</name><operator>.</operator><name>roll_cycle</name></name> <operator>=</operator> <name><name>binLogOptions</name><operator>.</operator><name>roll_cycle</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>options</name><operator>.</operator><name>block</name></name> <operator>=</operator> <name><name>binLogOptions</name><operator>.</operator><name>block</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>options</name><operator>.</operator><name>max_archive_retries</name></name> <operator>=</operator> <name><name>binLogOptions</name><operator>.</operator><name>max_archive_retries</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>options</name><operator>.</operator><name>max_queue_weight</name></name> <operator>=</operator> <name><name>binLogOptions</name><operator>.</operator><name>max_queue_weight</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>options</name><operator>.</operator><name>max_log_size</name></name> <operator>=</operator> <name><name>binLogOptions</name><operator>.</operator><name>max_log_size</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>options</name><operator>.</operator><name>log_dir</name></name> <operator>=</operator> <call><name><name>binLog</name><operator>.</operator><name>path</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><name>options</name></expr>;</return>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="line">// otherwise get what database is configured with from cassandra.yaml</comment>
            <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getFullQueryLogOptions</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>stop</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <decl_stmt><decl><type><name>BinLog</name></type> <name>binLog</name> <init>= <expr><name><name>this</name><operator>.</operator><name>binLog</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>binLog</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Stopping full query logging to {}"</literal></expr></argument>, <argument><expr><name><name>binLog</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>binLog</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Full query log already stopped"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch>
        <finally>finally
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>QueryEvents</name><operator>.</operator><name>instance</name><operator>.</operator><name>unregisterListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>binLog</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Need the path as a parameter as well because if the process is restarted the config file might be the only
     * location for retrieving the path to the full query log files, but JMX also allows you to specify a path
     * that isn't persisted anywhere so we have to clean that one as well.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>reset</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fullQueryLogPath</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>pathsToClean</name> <init>= <expr><call><name><name>Sets</name><operator>.</operator><name>newHashSet</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">//First decide whether to clean the path configured in the YAML</comment>
            <if_stmt><if>if <condition>(<expr><name>fullQueryLogPath</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>File</name></type> <name>fullQueryLogPathFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>fullQueryLogPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>fullQueryLogPathFile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>pathsToClean</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>fullQueryLogPathFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">//Then decide whether to clean the last used path, possibly configured by JMX</comment>
            <if_stmt><if>if <condition>(<expr><name>binLog</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>binLog</name><operator>.</operator><name>path</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>File</name></type> <name>pathFile</name> <init>= <expr><call><name><name>binLog</name><operator>.</operator><name>path</name><operator>.</operator><name>toFile</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>pathFile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>pathsToClean</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>pathFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Reset (and deactivation) of full query log requested."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>binLog</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Stopping full query log. Cleaning {}."</literal></expr></argument>, <argument><expr><name>pathsToClean</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>binLog</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>binLog</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Full query log already deactivated. Cleaning {}."</literal></expr></argument>, <argument><expr><name>pathsToClean</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <decl_stmt><decl><type><name>Throwable</name></type> <name>accumulate</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>File</name></type> <name>f</name> <range>: <expr><name>pathsToClean</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <expr_stmt><expr><name>accumulate</name> <operator>=</operator> <call><name><name>BinLog</name><operator>.</operator><name>cleanDirectory</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>accumulate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <if_stmt><if>if <condition>(<expr><name>accumulate</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>accumulate</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>e</name> <operator>instanceof</operator> <name>RuntimeException</name></expr>)</condition>
            <block>{<block_content>
                <throw>throw <expr><operator>(</operator><name>RuntimeException</name><operator>)</operator><name>e</name></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch>
        <finally>finally
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>QueryEvents</name><operator>.</operator><name>instance</name><operator>.</operator><name>unregisterListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isEnabled</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>this</name><operator>.</operator><name>binLog</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Log an invocation of a batch of queries
     * @param type The type of the batch
     * @param statements the prepared cql statements (unused here)
     * @param queries CQL text of the queries
     * @param values Values to bind to as parameters for the queries
     * @param queryOptions Options associated with the query invocation
     * @param queryState Timestamp state associated with the query invocation
     * @param batchTimeMillis Approximate time in milliseconds since the epoch since the batch was invoked
     * @param response the response from the batch query
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>batchSuccess</name><parameter_list>(<parameter><decl><type><name><name>BatchStatement</name><operator>.</operator><name>Type</name></name></type> <name>type</name></decl></parameter>,
                             <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>CQLStatement</name></extends></argument>&gt;</argument_list></name></type> <name>statements</name></decl></parameter>,
                             <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>queries</name></decl></parameter>,
                             <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>values</name></decl></parameter>,
                             <parameter><decl><type><name>QueryOptions</name></type> <name>queryOptions</name></decl></parameter>,
                             <parameter><decl><type><name>QueryState</name></type> <name>queryState</name></decl></parameter>,
                             <parameter><decl><type><name>long</name></type> <name>batchTimeMillis</name></decl></parameter>,
                             <parameter><decl><type><name><name>Message</name><operator>.</operator><name>Response</name></name></type> <name>response</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"type was null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>queries</name></expr></argument>, <argument><expr><literal type="string">"queries was null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="string">"value was null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>queryOptions</name></expr></argument>, <argument><expr><literal type="string">"queryOptions was null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>queryState</name></expr></argument>, <argument><expr><literal type="string">"queryState was null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkArgument</name></name><argument_list>(<argument><expr><name>batchTimeMillis</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"batchTimeMillis must be &gt; 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//Don't construct the wrapper if the log is disabled</comment>
        <decl_stmt><decl><type><name>BinLog</name></type> <name>binLog</name> <init>= <expr><name><name>this</name><operator>.</operator><name>binLog</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>binLog</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>Batch</name></type> <name>wrappedBatch</name> <init>= <expr><operator>new</operator> <call><name>Batch</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>queries</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>queryOptions</name></expr></argument>, <argument><expr><name>queryState</name></expr></argument>, <argument><expr><name>batchTimeMillis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>binLog</name><operator>.</operator><name>logRecord</name></name><argument_list>(<argument><expr><name>wrappedBatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Log a single CQL query
     * @param query CQL query text
     * @param queryOptions Options associated with the query invocation
     * @param queryState Timestamp state associated with the query invocation
     * @param queryTimeMillis Approximate time in milliseconds since the epoch since the batch was invoked
     * @param response the response from this query
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>querySuccess</name><parameter_list>(<parameter><decl><type><name>CQLStatement</name></type> <name>statement</name></decl></parameter>,
                             <parameter><decl><type><name>String</name></type> <name>query</name></decl></parameter>,
                             <parameter><decl><type><name>QueryOptions</name></type> <name>queryOptions</name></decl></parameter>,
                             <parameter><decl><type><name>QueryState</name></type> <name>queryState</name></decl></parameter>,
                             <parameter><decl><type><name>long</name></type> <name>queryTimeMillis</name></decl></parameter>,
                             <parameter><decl><type><name><name>Message</name><operator>.</operator><name>Response</name></name></type> <name>response</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="string">"query was null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>queryOptions</name></expr></argument>, <argument><expr><literal type="string">"queryOptions was null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>queryState</name></expr></argument>, <argument><expr><literal type="string">"queryState was null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkArgument</name></name><argument_list>(<argument><expr><name>queryTimeMillis</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"queryTimeMillis must be &gt; 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//Don't construct the wrapper if the log is disabled</comment>
        <decl_stmt><decl><type><name>BinLog</name></type> <name>binLog</name> <init>= <expr><name><name>this</name><operator>.</operator><name>binLog</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>binLog</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>Query</name></type> <name>wrappedQuery</name> <init>= <expr><operator>new</operator> <call><name>Query</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>queryOptions</name></expr></argument>, <argument><expr><name>queryState</name></expr></argument>, <argument><expr><name>queryTimeMillis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>binLog</name><operator>.</operator><name>logRecord</name></name><argument_list>(<argument><expr><name>wrappedQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>executeSuccess</name><parameter_list>(<parameter><decl><type><name>CQLStatement</name></type> <name>statement</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>QueryOptions</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>QueryState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>queryTime</name></decl></parameter>, <parameter><decl><type><name><name>Message</name><operator>.</operator><name>Response</name></name></type> <name>response</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>querySuccess</name><argument_list>(<argument><expr><name>statement</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>queryTime</name></expr></argument>, <argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Query</name> <super_list><extends>extends <super><name>AbstractLogEntry</name></super></extends></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>query</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>Query</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>QueryOptions</name></type> <name>queryOptions</name></decl></parameter>, <parameter><decl><type><name>QueryState</name></type> <name>queryState</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>queryStartTime</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>queryOptions</name></expr></argument>, <argument><expr><name>queryState</name></expr></argument>, <argument><expr><name>queryStartTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>query</name></name> <operator>=</operator> <name>query</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>protected</specifier> <name>String</name></type> <name>type</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>SINGLE_QUERY</name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>void</name></type> <name>writeMarshallablePayload</name><parameter_list>(<parameter><decl><type><name>WireOut</name></type> <name>wire</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>writeMarshallablePayload</name></name><argument_list>(<argument><expr><name>wire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>wire</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>QUERY</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>text</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>int</name></type> <name>weight</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>Ints</name><operator>.</operator><name>checkedCast</name></name><argument_list>(<argument><expr><call><name><name>ObjectSizes</name><operator>.</operator><name>sizeOf</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>super</name><operator>.</operator><name>weight</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Batch</name> <super_list><extends>extends <super><name>AbstractLogEntry</name></super></extends></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>weight</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>BatchStatement</name><operator>.</operator><name>Type</name></name></type> <name>batchType</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>queries</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>values</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>Batch</name><parameter_list>(<parameter><decl><type><name><name>BatchStatement</name><operator>.</operator><name>Type</name></name></type> <name>batchType</name></decl></parameter>,
                     <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>queries</name></decl></parameter>,
                     <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>values</name></decl></parameter>,
                     <parameter><decl><type><name>QueryOptions</name></type> <name>queryOptions</name></decl></parameter>,
                     <parameter><decl><type><name>QueryState</name></type> <name>queryState</name></decl></parameter>,
                     <parameter><decl><type><name>long</name></type> <name>batchTimeMillis</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>queryOptions</name></expr></argument>, <argument><expr><name>queryState</name></expr></argument>, <argument><expr><name>batchTimeMillis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>queries</name></name> <operator>=</operator> <name>queries</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>values</name></name> <operator>=</operator> <name>values</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>batchType</name></name> <operator>=</operator> <name>batchType</name></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>weight</name> <init>= <expr><call><name><name>super</name><operator>.</operator><name>weight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// weight, queries, values, batch type</comment>
            <expr_stmt><expr><name>weight</name> <operator>+=</operator> <name><name>Integer</name><operator>.</operator><name>BYTES</name></name> <operator>+</operator>            <comment type="line">// cached weight</comment>
                      <literal type="number">2</literal> <operator>*</operator> <name>EMPTY_LIST_SIZE</name> <operator>+</operator>      <comment type="line">// queries + values lists</comment>
                      <literal type="number">3</literal> <operator>*</operator> <name>OBJECT_REFERENCE_SIZE</name></expr>;</expr_stmt> <comment type="line">// batchType and two lists references</comment>

            <for>for <control>(<init><decl><type><name>String</name></type> <name>query</name> <range>: <expr><name>queries</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><name>weight</name> <operator>+=</operator> <call><name><name>ObjectSizes</name><operator>.</operator><name>sizeOf</name></name><argument_list>(<argument><expr><call><name>checkNotNull</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <name>OBJECT_REFERENCE_SIZE</name></expr>;</expr_stmt></block_content></block></for>

            <for>for <control>(<init><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>subValues</name> <range>: <expr><name>values</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <expr_stmt><expr><name>weight</name> <operator>+=</operator> <name>EMPTY_LIST_SIZE</name> <operator>+</operator> <name>OBJECT_REFERENCE_SIZE</name></expr>;</expr_stmt>

                <for>for <control>(<init><decl><type><name>ByteBuffer</name></type> <name>value</name> <range>: <expr><name>subValues</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>weight</name> <operator>+=</operator> <call><name><name>ObjectSizes</name><operator>.</operator><name>sizeOnHeapOf</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>OBJECT_REFERENCE_SIZE</name></expr>;</expr_stmt></block_content></block></for>
            </block_content>}</block></for>

            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>weight</name></name> <operator>=</operator> <name>weight</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>protected</specifier> <name>String</name></type> <name>type</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>BATCH</name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>void</name></type> <name>writeMarshallablePayload</name><parameter_list>(<parameter><decl><type><name>WireOut</name></type> <name>wire</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>writeMarshallablePayload</name></name><argument_list>(<argument><expr><name>wire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>wire</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>BATCH_TYPE</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>text</name><argument_list>(<argument><expr><call><name><name>batchType</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>ValueOut</name></type> <name>valueOut</name> <init>= <expr><call><name><name>wire</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>QUERIES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>valueOut</name><operator>.</operator><name>int32</name></name><argument_list>(<argument><expr><call><name><name>queries</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>query</name> <range>: <expr><name>queries</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>valueOut</name><operator>.</operator><name>text</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name>valueOut</name> <operator>=</operator> <call><name><name>wire</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>VALUES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>valueOut</name><operator>.</operator><name>int32</name></name><argument_list>(<argument><expr><call><name><name>values</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>subValues</name> <range>: <expr><name>values</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>valueOut</name><operator>.</operator><name>int32</name></name><argument_list>(<argument><expr><call><name><name>subValues</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>ByteBuffer</name></type> <name>value</name> <range>: <expr><name>subValues</name></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>valueOut</name><operator>.</operator><name>bytes</name></name><argument_list>(<argument><expr><call><name><name>BytesStore</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>int</name></type> <name>weight</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>weight</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>private</specifier> <specifier>static</specifier> <specifier>abstract</specifier> class <name>AbstractLogEntry</name> <super_list><extends>extends <super><name><name>BinLog</name><operator>.</operator><name>ReleaseableWriteMarshallable</name></name></super></extends> <implements>implements <super><name><name>WeightedQueue</name><operator>.</operator><name>Weighable</name></name></super></implements></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>long</name></type> <name>queryStartTime</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>protocolVersion</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ByteBuf</name></type> <name>queryOptionsBuffer</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>long</name></type> <name>generatedTimestamp</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>generatedNowInSeconds</name></decl>;</decl_stmt>
        <decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
        <type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>keyspace</name></decl>;</decl_stmt>

        <constructor><name>AbstractLogEntry</name><parameter_list>(<parameter><decl><type><name>QueryOptions</name></type> <name>queryOptions</name></decl></parameter>, <parameter><decl><type><name>QueryState</name></type> <name>queryState</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>queryStartTime</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>queryStartTime</name></name> <operator>=</operator> <name>queryStartTime</name></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>protocolVersion</name></name> <operator>=</operator> <call><name><name>queryOptions</name><operator>.</operator><name>getProtocolVersion</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>asInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>optionsSize</name> <init>= <expr><call><name><name>QueryOptions</name><operator>.</operator><name>codec</name><operator>.</operator><name>encodedSize</name></name><argument_list>(<argument><expr><name>queryOptions</name></expr></argument>, <argument><expr><call><name><name>queryOptions</name><operator>.</operator><name>getProtocolVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>queryOptionsBuffer</name> <operator>=</operator> <call><name><name>CBUtil</name><operator>.</operator><name>allocator</name><operator>.</operator><name>buffer</name></name><argument_list>(<argument><expr><name>optionsSize</name></expr></argument>, <argument><expr><name>optionsSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>generatedTimestamp</name></name> <operator>=</operator> <call><name><name>queryState</name><operator>.</operator><name>generatedTimestamp</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>generatedNowInSeconds</name></name> <operator>=</operator> <call><name><name>queryState</name><operator>.</operator><name>generatedNowInSeconds</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>keyspace</name></name> <operator>=</operator> <call><name><name>queryState</name><operator>.</operator><name>getClientState</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRawKeyspace</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/*
             * Struggled with what tradeoff to make in terms of query options which is potentially large and complicated
             * There is tension between low garbage production (or allocator overhead), small working set size, and CPU overhead reserializing the
             * query options into binary format.
             *
             * I went with the lowest risk most predictable option which is allocator overhead and CPU overhead
             * rather then keep the original query message around so I could just serialize that as a memcpy. It's more
             * instructions when turned on, but it doesn't change memory footprint quite as much and it's more pay for what you use
             * in terms of query volume. The CPU overhead is spread out across producers so we should at least get
             * some scaling.
             *
             */</comment>
            <try>try
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>QueryOptions</name><operator>.</operator><name>codec</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><name>queryOptions</name></expr></argument>, <argument><expr><name>queryOptionsBuffer</name></expr></argument>, <argument><expr><call><name><name>queryOptions</name><operator>.</operator><name>getProtocolVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>queryOptionsBuffer</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <throw>throw <expr><name>e</name></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>protected</specifier> <name>long</name></type> <name>version</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>CURRENT_VERSION</name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>void</name></type> <name>writeMarshallablePayload</name><parameter_list>(<parameter><decl><type><name>WireOut</name></type> <name>wire</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>wire</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>QUERY_START_TIME</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>int64</name><argument_list>(<argument><expr><name>queryStartTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>wire</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>int32</name><argument_list>(<argument><expr><name>protocolVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>wire</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>QUERY_OPTIONS</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>bytes</name><argument_list>(<argument><expr><call><name><name>BytesStore</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><call><name><name>queryOptionsBuffer</name><operator>.</operator><name>nioBuffer</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>wire</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>GENERATED_TIMESTAMP</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>int64</name><argument_list>(<argument><expr><name>generatedTimestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>wire</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>GENERATED_NOW_IN_SECONDS</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>int32</name><argument_list>(<argument><expr><name>generatedNowInSeconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>wire</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>KEYSPACE</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>text</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>void</name></type> <name>release</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>queryOptionsBuffer</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>int</name></type> <name>weight</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>OBJECT_HEADER_SIZE</name>
                 <operator>+</operator> <name><name>Long</name><operator>.</operator><name>BYTES</name></name>                                                                 <comment type="line">// queryStartTime</comment>
                 <operator>+</operator> <name><name>Integer</name><operator>.</operator><name>BYTES</name></name>                                                              <comment type="line">// protocolVersion</comment>
                 <operator>+</operator> <name>OBJECT_REFERENCE_SIZE</name> <operator>+</operator> <name>EMPTY_BYTEBUF_SIZE</name> <operator>+</operator> <call><name><name>queryOptionsBuffer</name><operator>.</operator><name>capacity</name></name><argument_list>()</argument_list></call> <comment type="line">// queryOptionsBuffer</comment>
                 <operator>+</operator> <name><name>Long</name><operator>.</operator><name>BYTES</name></name>                                                                 <comment type="line">// generatedTimestamp</comment>
                 <operator>+</operator> <name><name>Integer</name><operator>.</operator><name>BYTES</name></name>                                                              <comment type="line">// generatedNowInSeconds</comment>
                 <operator>+</operator> <name>OBJECT_REFERENCE_SIZE</name> <operator>+</operator> <call><name><name>Ints</name><operator>.</operator><name>checkedCast</name></name><argument_list>(<argument><expr><call><name><name>ObjectSizes</name><operator>.</operator><name>sizeOf</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>    <comment type="line">// keyspace</comment>
        </block_content>}</block></function>
    }</block></class>

}</block></class>
</unit>
