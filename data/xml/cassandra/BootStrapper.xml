<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/dht/BootStrapper.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicInteger</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ListenableFuture</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>Schema</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>Keyspace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>tokenallocator</name><operator>.</operator><name>TokenAllocation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>ConfigurationException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>gms</name><operator>.</operator><name>Gossiper</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>AbstractReplicationStrategy</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>InetAddressAndPort</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>TokenMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>StorageService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>streaming</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>FBUtilities</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>progress</name><operator>.</operator><name>ProgressEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>progress</name><operator>.</operator><name>ProgressEventNotifierSupport</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>progress</name><operator>.</operator><name>ProgressEventType</name></name>;</import>

<class><specifier>public</specifier> class <name>BootStrapper</name> <super_list><extends>extends <super><name>ProgressEventNotifierSupport</name></super></extends></super_list>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>BootStrapper</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* endpoint that needs to be bootstrapped */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>InetAddressAndPort</name></type> <name>address</name></decl>;</decl_stmt>
    <comment type="block">/* token of the node being bootstrapped. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>TokenMetadata</name></type> <name>tokenMetadata</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>BootStrapper</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>TokenMetadata</name></type> <name>tmd</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><name>address</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
        <assert>assert <expr><name>tokens</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>tokens</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>;</assert>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>address</name></name> <operator>=</operator> <name>address</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tokens</name></name> <operator>=</operator> <name>tokens</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tokenMetadata</name></name> <operator>=</operator> <name>tmd</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name><name>ListenableFuture</name><argument_list type="generic">&lt;<argument><name>StreamState</name></argument>&gt;</argument_list></name></type> <name>bootstrap</name><parameter_list>(<parameter><decl><type><name>StreamStateStore</name></type> <name>stateStore</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>useStrictConsistency</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Beginning bootstrap process"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>RangeStreamer</name></type> <name>streamer</name> <init>= <expr><operator>new</operator> <call><name>RangeStreamer</name><argument_list>(<argument><expr><name>tokenMetadata</name></expr></argument>,
                                                   <argument><expr><name>tokens</name></expr></argument>,
                                                   <argument><expr><name>address</name></expr></argument>,
                                                   <argument><expr><name><name>StreamOperation</name><operator>.</operator><name>BOOTSTRAP</name></name></expr></argument>,
                                                   <argument><expr><name>useStrictConsistency</name></expr></argument>,
                                                   <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getEndpointSnitch</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                   <argument><expr><name>stateStore</name></expr></argument>,
                                                   <argument><expr><literal type="boolean">true</literal></expr></argument>,
                                                   <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getStreamingConnectionsPerHost</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>nonLocalStrategyKeyspaces</name> <init>= <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getNonLocalStrategyKeyspaces</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>nonLocalStrategyKeyspaces</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Schema does not contain any non-local keyspaces to stream on bootstrap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>keyspaceName</name> <range>: <expr><name>nonLocalStrategyKeyspaces</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>AbstractReplicationStrategy</name></type> <name>strategy</name> <init>= <expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getReplicationStrategy</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>streamer</name><operator>.</operator><name>addRanges</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><call><name><name>strategy</name><operator>.</operator><name>getPendingAddressRanges</name></name><argument_list>(<argument><expr><name>tokenMetadata</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <decl_stmt><decl><type><name>StreamResultFuture</name></type> <name>bootstrapStreamResult</name> <init>= <expr><call><name><name>streamer</name><operator>.</operator><name>fetchAsync</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>bootstrapStreamResult</name><operator>.</operator><name>addEventListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>StreamEventHandler</name></super><argument_list>()</argument_list>
        <block>{
            <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>AtomicInteger</name></type> <name>receivedFiles</name> <init>= <expr><operator>new</operator> <call><name>AtomicInteger</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>AtomicInteger</name></type> <name>totalFilesToReceive</name> <init>= <expr><operator>new</operator> <call><name>AtomicInteger</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>handleStreamEvent</name><parameter_list>(<parameter><decl><type><name>StreamEvent</name></type> <name>event</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <switch>switch <condition>(<expr><name><name>event</name><operator>.</operator><name>eventType</name></name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>STREAM_PREPARED</name></expr>:</case>
                        <decl_stmt><decl><type><name><name>StreamEvent</name><operator>.</operator><name>SessionPreparedEvent</name></name></type> <name>prepared</name> <init>= <expr><operator>(</operator><name><name>StreamEvent</name><operator>.</operator><name>SessionPreparedEvent</name></name><operator>)</operator> <name>event</name></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>currentTotal</name> <init>= <expr><call><name><name>totalFilesToReceive</name><operator>.</operator><name>addAndGet</name></name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>prepared</name><operator>.</operator><name>session</name><operator>.</operator><name>getTotalFilesToReceive</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>ProgressEvent</name></type> <name>prepareProgress</name> <init>= <expr><operator>new</operator> <call><name>ProgressEvent</name><argument_list>(<argument><expr><name><name>ProgressEventType</name><operator>.</operator><name>PROGRESS</name></name></expr></argument>, <argument><expr><call><name><name>receivedFiles</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>currentTotal</name></expr></argument>, <argument><expr><literal type="string">"prepare with "</literal> <operator>+</operator> <name><name>prepared</name><operator>.</operator><name>session</name><operator>.</operator><name>peer</name></name> <operator>+</operator> <literal type="string">" complete"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name>fireProgressEvent</name><argument_list>(<argument><expr><literal type="string">"bootstrap"</literal></expr></argument>, <argument><expr><name>prepareProgress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>

                    <case>case <expr><name>FILE_PROGRESS</name></expr>:</case>
                        <decl_stmt><decl><type><name><name>StreamEvent</name><operator>.</operator><name>ProgressEvent</name></name></type> <name>progress</name> <init>= <expr><operator>(</operator><name><name>StreamEvent</name><operator>.</operator><name>ProgressEvent</name></name><operator>)</operator> <name>event</name></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><call><name><name>progress</name><operator>.</operator><name>progress</name><operator>.</operator><name>isCompleted</name></name><argument_list>()</argument_list></call></expr>)</condition>
                        <block>{<block_content>
                            <decl_stmt><decl><type><name>int</name></type> <name>received</name> <init>= <expr><call><name><name>receivedFiles</name><operator>.</operator><name>incrementAndGet</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>ProgressEvent</name></type> <name>currentProgress</name> <init>= <expr><operator>new</operator> <call><name>ProgressEvent</name><argument_list>(<argument><expr><name><name>ProgressEventType</name><operator>.</operator><name>PROGRESS</name></name></expr></argument>, <argument><expr><name>received</name></expr></argument>, <argument><expr><call><name><name>totalFilesToReceive</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"received file "</literal> <operator>+</operator> <name><name>progress</name><operator>.</operator><name>progress</name><operator>.</operator><name>fileName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><call><name>fireProgressEvent</name><argument_list>(<argument><expr><literal type="string">"bootstrap"</literal></expr></argument>, <argument><expr><name>currentProgress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <break>break;</break>

                    <case>case <expr><name>STREAM_COMPLETE</name></expr>:</case>
                        <decl_stmt><decl><type><name><name>StreamEvent</name><operator>.</operator><name>SessionCompleteEvent</name></name></type> <name>completeEvent</name> <init>= <expr><operator>(</operator><name><name>StreamEvent</name><operator>.</operator><name>SessionCompleteEvent</name></name><operator>)</operator> <name>event</name></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>ProgressEvent</name></type> <name>completeProgress</name> <init>= <expr><operator>new</operator> <call><name>ProgressEvent</name><argument_list>(<argument><expr><name><name>ProgressEventType</name><operator>.</operator><name>PROGRESS</name></name></expr></argument>, <argument><expr><call><name><name>receivedFiles</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>totalFilesToReceive</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"session with "</literal> <operator>+</operator> <name><name>completeEvent</name><operator>.</operator><name>peer</name></name> <operator>+</operator> <literal type="string">" complete"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name>fireProgressEvent</name><argument_list>(<argument><expr><literal type="string">"bootstrap"</literal></expr></argument>, <argument><expr><name>completeProgress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                </block_content>}</block></switch>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>onSuccess</name><parameter_list>(<parameter><decl><type><name>StreamState</name></type> <name>streamState</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name>ProgressEventType</name></type> <name>type</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>message</name></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><call><name><name>streamState</name><operator>.</operator><name>hasFailedSession</name></name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>ProgressEventType</name><operator>.</operator><name>ERROR</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>message</name> <operator>=</operator> <literal type="string">"Some bootstrap stream failed"</literal></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>ProgressEventType</name><operator>.</operator><name>SUCCESS</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>message</name> <operator>=</operator> <literal type="string">"Bootstrap streaming success"</literal></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <decl_stmt><decl><type><name>ProgressEvent</name></type> <name>currentProgress</name> <init>= <expr><operator>new</operator> <call><name>ProgressEvent</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><call><name><name>receivedFiles</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>totalFilesToReceive</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>fireProgressEvent</name><argument_list>(<argument><expr><literal type="string">"bootstrap"</literal></expr></argument>, <argument><expr><name>currentProgress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>onFailure</name><parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>throwable</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name>ProgressEvent</name></type> <name>currentProgress</name> <init>= <expr><operator>new</operator> <call><name>ProgressEvent</name><argument_list>(<argument><expr><name><name>ProgressEventType</name><operator>.</operator><name>ERROR</name></name></expr></argument>, <argument><expr><call><name><name>receivedFiles</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>totalFilesToReceive</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>throwable</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>fireProgressEvent</name><argument_list>(<argument><expr><literal type="string">"bootstrap"</literal></expr></argument>, <argument><expr><name>currentProgress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>bootstrapStreamResult</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * if initialtoken was specified, use that (split on comma).
     * otherwise, if allocationKeyspace is specified use the token allocation algorithm to generate suitable tokens
     * else choose num_tokens tokens at random
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>getBootstrapTokens</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>TokenMetadata</name></type> <name>metadata</name></decl></parameter>, <parameter><decl><type><name>InetAddressAndPort</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>schemaWaitDelay</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ConfigurationException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>allocationKeyspace</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getAllocateTokensForKeyspace</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Integer</name></type> <name>allocationLocalRf</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getAllocateTokensForLocalRf</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>initialTokens</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getInitialTokens</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>initialTokens</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>allocationKeyspace</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"manually specified tokens override automatic allocation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// if user specified tokens, use those</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>initialTokens</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name> <init>= <expr><call><name>getSpecifiedTokens</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>initialTokens</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>BootstrapDiagnostics</name><operator>.</operator><name>useSpecifiedTokens</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>allocationKeyspace</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getNumTokens</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>tokens</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>numTokens</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getNumTokens</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>numTokens</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"num_tokens must be &gt;= 1"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>allocationKeyspace</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>allocateTokens</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>allocationKeyspace</name></expr></argument>, <argument><expr><name>numTokens</name></expr></argument>, <argument><expr><name>schemaWaitDelay</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>allocationLocalRf</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>allocateTokens</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>allocationLocalRf</name></expr></argument>, <argument><expr><name>numTokens</name></expr></argument>, <argument><expr><name>schemaWaitDelay</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>numTokens</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Picking random token for a single vnode.  You should probably add more vnodes and/or use the automatic token allocation mechanism."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name> <init>= <expr><call><name>getRandomTokens</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>numTokens</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>BootstrapDiagnostics</name><operator>.</operator><name>useRandomTokens</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>numTokens</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>tokens</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>getSpecifiedTokens</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>TokenMetadata</name></type> <name>metadata</name></decl></parameter>,
                                                        <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>initialTokens</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"tokens manually specified as {}"</literal></expr></argument>,  <argument><expr><name>initialTokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>initialTokens</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>tokenString</name> <range>: <expr><name>initialTokens</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>Token</name></type> <name>token</name> <init>= <expr><call><name><name>metadata</name><operator>.</operator><name>partitioner</name><operator>.</operator><name>getTokenFactory</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>fromString</name><argument_list>(<argument><expr><name>tokenString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>metadata</name><operator>.</operator><name>getEndpoint</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Bootstrapping to existing token "</literal> <operator>+</operator> <name>tokenString</name> <operator>+</operator> <literal type="string">" is not allowed (decommission/removenode the old node first)."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name><name>tokens</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>tokens</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>allocateTokens</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>TokenMetadata</name></type> <name>metadata</name></decl></parameter>,
                                            <parameter><decl><type><name>InetAddressAndPort</name></type> <name>address</name></decl></parameter>,
                                            <parameter><decl><type><name>String</name></type> <name>allocationKeyspace</name></decl></parameter>,
                                            <parameter><decl><type><name>int</name></type> <name>numTokens</name></decl></parameter>,
                                            <parameter><decl><type><name>long</name></type> <name>schemaWaitDelay</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>waitForSchema</name></name><argument_list>(<argument><expr><name>schemaWaitDelay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>InetAddressAndPort</name><operator>.</operator><name>getLoopbackAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>Gossiper</name><operator>.</operator><name>waitToSettle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>Keyspace</name></type> <name>ks</name> <init>= <expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>allocationKeyspace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ks</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"Problem opening token allocation keyspace "</literal> <operator>+</operator> <name>allocationKeyspace</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>AbstractReplicationStrategy</name></type> <name>rs</name> <init>= <expr><call><name><name>ks</name><operator>.</operator><name>getReplicationStrategy</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name> <init>= <expr><call><name><name>TokenAllocation</name><operator>.</operator><name>allocateTokens</name></name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>numTokens</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>BootstrapDiagnostics</name><operator>.</operator><name>tokensAllocated</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>allocationKeyspace</name></expr></argument>, <argument><expr><name>numTokens</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>tokens</name></expr>;</return>
    </block_content>}</block></function>


    <function><type><specifier>static</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>allocateTokens</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>TokenMetadata</name></type> <name>metadata</name></decl></parameter>,
                                            <parameter><decl><type><name>InetAddressAndPort</name></type> <name>address</name></decl></parameter>,
                                            <parameter><decl><type><name>int</name></type> <name>rf</name></decl></parameter>,
                                            <parameter><decl><type><name>int</name></type> <name>numTokens</name></decl></parameter>,
                                            <parameter><decl><type><name>long</name></type> <name>schemaWaitDelay</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>waitForSchema</name></name><argument_list>(<argument><expr><name>schemaWaitDelay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>InetAddressAndPort</name><operator>.</operator><name>getLoopbackAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>Gossiper</name><operator>.</operator><name>waitToSettle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name> <init>= <expr><call><name><name>TokenAllocation</name><operator>.</operator><name>allocateTokens</name></name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>rf</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>numTokens</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>BootstrapDiagnostics</name><operator>.</operator><name>tokensAllocated</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>rf</name></expr></argument>, <argument><expr><name>numTokens</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>tokens</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>getRandomTokens</name><parameter_list>(<parameter><decl><type><name>TokenMetadata</name></type> <name>metadata</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numTokens</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>tokens</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>numTokens</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>tokens</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>numTokens</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>Token</name></type> <name>token</name> <init>= <expr><call><name><name>metadata</name><operator>.</operator><name>partitioner</name><operator>.</operator><name>getRandomToken</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>metadata</name><operator>.</operator><name>getEndpoint</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>tokens</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></while>

        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Generated random tokens. tokens are {}"</literal></expr></argument>, <argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>tokens</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
