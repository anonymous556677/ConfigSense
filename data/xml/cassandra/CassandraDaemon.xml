<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/service/CassandraDaemon.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>management</name><operator>.</operator><name>ManagementFactory</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>management</name><operator>.</operator><name>MemoryPoolMXBean</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>InetAddress</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>UnknownHostException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>file</name><operator>.</operator><name>Files</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>file</name><operator>.</operator><name>Path</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>file</name><operator>.</operator><name>Paths</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Stream</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>management</name><operator>.</operator><name>ObjectName</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>management</name><operator>.</operator><name>StandardMBean</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>management</name><operator>.</operator><name>remote</name><operator>.</operator><name>JMXConnectorServer</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Futures</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ListenableFuture</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>addthis</name><operator>.</operator><name>metrics3</name><operator>.</operator><name>reporter</name><operator>.</operator><name>config</name><operator>.</operator><name>ReporterConfig</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>codahale</name><operator>.</operator><name>metrics</name><operator>.</operator><name>Meter</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>codahale</name><operator>.</operator><name>metrics</name><operator>.</operator><name>MetricRegistryListener</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>codahale</name><operator>.</operator><name>metrics</name><operator>.</operator><name>SharedMetricRegistries</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>codahale</name><operator>.</operator><name>metrics</name><operator>.</operator><name>jvm</name><operator>.</operator><name>BufferPoolMetricSet</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>codahale</name><operator>.</operator><name>metrics</name><operator>.</operator><name>jvm</name><operator>.</operator><name>FileDescriptorRatioGauge</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>codahale</name><operator>.</operator><name>metrics</name><operator>.</operator><name>jvm</name><operator>.</operator><name>GarbageCollectorMetricSet</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>codahale</name><operator>.</operator><name>metrics</name><operator>.</operator><name>jvm</name><operator>.</operator><name>MemoryUsageGaugeSet</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>audit</name><operator>.</operator><name>AuditLogManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ScheduledExecutors</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>QueryProcessor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>ColumnFamilyStore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>Keyspace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>SizeEstimatesRecorder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>SystemKeyspace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>SystemKeyspaceMigrator40</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>WindowsFailedSnapshotTracker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>commitlog</name><operator>.</operator><name>CommitLog</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>virtual</name><operator>.</operator><name>SystemViewsKeyspace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>virtual</name><operator>.</operator><name>VirtualKeyspaceRegistry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>virtual</name><operator>.</operator><name>VirtualSchemaKeyspace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>ConfigurationException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>StartupException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>gms</name><operator>.</operator><name>Gossiper</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>FSError</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>CorruptSSTableException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>SSTableHeaderFix</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>FileUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>InetAddressAndPort</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>metrics</name><operator>.</operator><name>CassandraMetricsRegistry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>metrics</name><operator>.</operator><name>DefaultNameFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>metrics</name><operator>.</operator><name>StorageMetrics</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>StartupClusterConnectivityChecker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>Schema</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>SchemaConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>TableMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>security</name><operator>.</operator><name>ThreadAwareSecurityManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>tracing</name><operator>.</operator><name>Tracing</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>FBUtilities</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>JMXServerUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>JVMStabilityInspector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>MBeanWrapper</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>Mx4jTool</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>NativeLibrary</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>WindowsTimer</name></name>;</import>

<import>import static <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name><operator>.</operator><name>NANOSECONDS</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>CassandraRelevantProperties</name><operator>.</operator><name>CASSANDRA_FOREGROUND</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>CassandraRelevantProperties</name><operator>.</operator><name>CASSANDRA_JMX_REMOTE_PORT</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>CassandraRelevantProperties</name><operator>.</operator><name>CASSANDRA_PID_FILE</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>CassandraRelevantProperties</name><operator>.</operator><name>COM_SUN_MANAGEMENT_JMXREMOTE_PORT</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>CassandraRelevantProperties</name><operator>.</operator><name>JAVA_CLASS_PATH</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>CassandraRelevantProperties</name><operator>.</operator><name>JAVA_VERSION</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>CassandraRelevantProperties</name><operator>.</operator><name>JAVA_VM_NAME</name></name>;</import>

<comment type="block" format="javadoc">/**
 * The &lt;code&gt;CassandraDaemon&lt;/code&gt; is an abstraction for a Cassandra daemon
 * service, which defines not only a way to activate and deactivate it, but also
 * hooks into its lifecycle methods (see {@link #setup()}, {@link #start()},
 * {@link #stop()} and {@link #setup()}).
 */</comment>
<class><specifier>public</specifier> class <name>CassandraDaemon</name>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>MBEAN_NAME</name> <init>= <expr><literal type="string">"org.apache.cassandra.db:type=NativeAccess"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name></decl>;</decl_stmt>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>CassandraDaemon</name></type> <name>getInstanceForTesting</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>instance</name></expr>;</return>
    </block_content>}</block></function>

    <static>static <block>{<block_content>
        <comment type="line">// Need to register metrics before instrumented appender is created(first access to LoggerFactory).</comment>
        <expr_stmt><expr><call><name><name>SharedMetricRegistries</name><operator>.</operator><name>getOrCreate</name></name><argument_list>(<argument><expr><literal type="string">"logback-metrics"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>addListener</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>MetricRegistryListener</name><operator>.</operator><name>Base</name></name></super><argument_list>()</argument_list>
        <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>onMeterAdded</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>metricName</name></decl></parameter>, <parameter><decl><type><name>Meter</name></type> <name>meter</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <comment type="line">// Given metricName consists of appender name in logback.xml + "." + metric name.</comment>
                <comment type="line">// We first separate appender name</comment>
                <decl_stmt><decl><type><name>int</name></type> <name>separator</name> <init>= <expr><call><name><name>metricName</name><operator>.</operator><name>lastIndexOf</name></name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>appenderName</name> <init>= <expr><call><name><name>metricName</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>separator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>metric</name> <init>= <expr><call><name><name>metricName</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>separator</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// remove "."</comment>
                <decl_stmt><decl><type><name>ObjectName</name></type> <name>name</name> <init>= <expr><call><name><name>DefaultNameFactory</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><name>appenderName</name></expr></argument>, <argument><expr><name>metric</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getMBeanName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>CassandraMetricsRegistry</name><operator>.</operator><name>Metrics</name><operator>.</operator><name>registerMBean</name></name><argument_list>(<argument><expr><name>meter</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>logger</name> <operator>=</operator> <call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>CassandraDaemon</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></static>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>maybeInitJmx</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <comment type="line">// If the standard com.sun.management.jmxremote.port property has been set</comment>
        <comment type="line">// then the JVM agent will have already started up a default JMX connector</comment>
        <comment type="line">// server. This behaviour is deprecated, but some clients may be relying</comment>
        <comment type="line">// on it, so log a warning and skip setting up the server with the settings</comment>
        <comment type="line">// as configured in cassandra-env.(sh|ps1)</comment>
        <comment type="line">// See: CASSANDRA-11540 &amp; CASSANDRA-11725</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>COM_SUN_MANAGEMENT_JMXREMOTE_PORT</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"JMX settings in cassandra-env.sh have been bypassed as the JMX connector server is "</literal> <operator>+</operator>
                        <literal type="string">"already initialized. Please refer to cassandra-env.(sh|ps1) for JMX configuration info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"java.rmi.server.randomIDs"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// If a remote port has been specified then use that to set up a JMX</comment>
        <comment type="line">// connector server which can be accessed remotely. Otherwise, look</comment>
        <comment type="line">// for the local port property and create a server which is bound</comment>
        <comment type="line">// only to the loopback address. Auth options are applied to both</comment>
        <comment type="line">// remote and local-only servers, but currently SSL is only</comment>
        <comment type="line">// available for remote.</comment>
        <comment type="line">// If neither is remote nor local port is set in cassandra-env.(sh|ps)</comment>
        <comment type="line">// then JMX is effectively  disabled.</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>localOnly</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>jmxPort</name> <init>= <expr><call><name><name>CASSANDRA_JMX_REMOTE_PORT</name><operator>.</operator><name>getString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>jmxPort</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>localOnly</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>jmxPort</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.jmx.local.port"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>jmxPort</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <try>try
        <block>{<block_content>
            <expr_stmt><expr><name>jmxServer</name> <operator>=</operator> <call><name><name>JMXServerUtils</name><operator>.</operator><name>createJMXServer</name></name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>jmxPort</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>localOnly</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>jmxServer</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>exitOrFail</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <decl_stmt><decl><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>Runnable</name></type> <name>SPECULATION_THRESHOLD_UPDATER</name> <init>= 
        <expr><lambda><parameter_list>()</parameter_list> -&gt; 
        <block>{<block_content>
            <try>try
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>Keyspace</name><operator>.</operator><name>allExisting</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>k</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>k</name><operator>.</operator><name>getColumnFamilyStores</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><name>ColumnFamilyStore</name><operator>::</operator><name>updateSpeculationThreshold</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Failed to update speculative retry thresholds."</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>JVMStabilityInspector</name><operator>.</operator><name>inspectThrowable</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></lambda></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>CassandraDaemon</name></type> <name>instance</name> <init>= <expr><operator>new</operator> <call><name>CassandraDaemon</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>NativeTransportService</name></type> <name>nativeTransportService</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>JMXConnectorServer</name></type> <name>jmxServer</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>runManaged</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>StartupChecks</name></type> <name>startupChecks</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>setupCompleted</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>CassandraDaemon</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>CassandraDaemon</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>runManaged</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>runManaged</name></name> <operator>=</operator> <name>runManaged</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>startupChecks</name></name> <operator>=</operator> <operator>new</operator> <call><name>StartupChecks</name><argument_list>()</argument_list></call><operator>.</operator><call><name>withDefaultTests</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>setupCompleted</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * This is a hook for concrete daemons to initialize themselves suitably.
     *
     * Subclasses should override this to finish the job (listening on ports, etc.)
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setup</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>setFSErrorHandler</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DefaultFSErrorHandler</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Since CASSANDRA-14793 the local system keyspaces data are not dispatched across the data directories</comment>
        <comment type="line">// anymore to reduce the risks in case of disk failures. By consequence, the system need to ensure in case of</comment>
        <comment type="line">// upgrade that the old data files have been migrated to the new directories before we start deleting</comment>
        <comment type="line">// snapshots and upgrading system tables.</comment>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><call><name>migrateSystemDataIfNeeded</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>exitOrFail</name><argument_list>(<argument><expr><name><name>StartupException</name><operator>.</operator><name>ERR_WRONG_DISK_STATE</name></name></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>

        <comment type="line">// Delete any failed snapshot deletions on Windows - see CASSANDRA-9658</comment>
        <if_stmt><if>if <condition>(<expr><name><name>FBUtilities</name><operator>.</operator><name>isWindows</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>WindowsFailedSnapshotTracker</name><operator>.</operator><name>deleteOldSnapshots</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>maybeInitJmx</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>Mx4jTool</name><operator>.</operator><name>maybeLoad</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>ThreadAwareSecurityManager</name><operator>.</operator><name>install</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>logSystemInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>NativeLibrary</name><operator>.</operator><name>tryMlockall</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>CommitLog</name><operator>.</operator><name>instance</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>runStartupChecks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <try>try
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>snapshotOnVersionChange</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>exitOrFail</name><argument_list>(<argument><expr><name><name>StartupException</name><operator>.</operator><name>ERR_WRONG_DISK_STATE</name></name></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>

        <comment type="line">// We need to persist this as soon as possible after startup checks.</comment>
        <comment type="line">// This should be the first write to SystemKeyspace (CASSANDRA-11742)</comment>
        <expr_stmt><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>persistLocalMetadata</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>setDefaultUncaughtExceptionHandler</name></name><argument_list>(<argument><expr><name>CassandraDaemon</name><operator>::</operator><name>uncaughtException</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>SystemKeyspaceMigrator40</name><operator>.</operator><name>migrate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Populate token metadata before flushing, for token-aware sstable partitioning (#6696)</comment>
        <expr_stmt><expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>populateTokenMetadata</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <try>try
        <block>{<block_content>
            <comment type="line">// load schema from disk</comment>
            <expr_stmt><expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>loadFromDisk</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Error while loading schema: "</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>e</name></expr>;</throw>
        </block_content>}</block></catch></try>

        <expr_stmt><expr><call><name>setupVirtualKeyspaces</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>SSTableHeaderFix</name><operator>.</operator><name>fixNonFrozenUDTIfUpgradeFrom30</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// clean up debris in the rest of the keyspaces</comment>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>keyspaceName</name> <range>: <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getKeyspaces</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <comment type="line">// Skip system as we've already cleaned it</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>keyspaceName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SYSTEM_KEYSPACE_NAME</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>

            <for>for <control>(<init><decl><type><name>TableMetadata</name></type> <name>cfm</name> <range>: <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getTablesAndViews</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <try>try
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>ColumnFamilyStore</name><operator>.</operator><name>scrubDataDirectories</name></name><argument_list>(<argument><expr><name>cfm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <catch>catch <parameter_list>(<parameter><decl><type><name>StartupException</name></type> <name>e</name></decl></parameter>)</parameter_list>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>exitOrFail</name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>returnCode</name></name></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></catch></try>
            </block_content>}</block></for>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name><name>Keyspace</name><operator>.</operator><name>setInitialized</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// initialize keyspaces</comment>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>keyspaceName</name> <range>: <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getKeyspaces</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"opening keyspace {}"</literal></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <comment type="line">// disable auto compaction until gossip settles since disk boundaries may be affected by ring layout</comment>
            <for>for <control>(<init><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name> <range>: <expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getColumnFamilyStores</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <for>for <control>(<init><decl><type><name>ColumnFamilyStore</name></type> <name>store</name> <range>: <expr><call><name><name>cfs</name><operator>.</operator><name>concatWithIndexes</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>store</name><operator>.</operator><name>disableAutoCompaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
        </block_content>}</block></for>


        <try>try
        <block>{<block_content>
            <expr_stmt><expr><call><name>loadRowAndKeyCacheAsync</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>JVMStabilityInspector</name><operator>.</operator><name>inspectThrowable</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Error loading key or row cache"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>

        <try>try
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>GCInspector</name><operator>.</operator><name>register</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>JVMStabilityInspector</name><operator>.</operator><name>inspectThrowable</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Unable to start GCInspector (currently only supported on the Sun JVM)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>

        <comment type="line">// Replay any CommitLogSegments found on disk</comment>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>CommitLog</name><operator>.</operator><name>instance</name><operator>.</operator><name>recoverSegmentsOnDisk</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>

        <comment type="line">// Re-populate token metadata after commit log recover (new peers might be loaded onto system keyspace #10293)</comment>
        <expr_stmt><expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>populateTokenMetadata</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>finishStartup</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Clean up system.size_estimates entries left lying around from missed keyspace drops (CASSANDRA-14905)</comment>
        <expr_stmt><expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>cleanupSizeEstimates</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// schedule periodic dumps of table size estimates into SystemKeyspace.SIZE_ESTIMATES_CF</comment>
        <comment type="line">// set cassandra.size_recorder_interval to 0 to disable</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>sizeRecorderInterval</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>getInteger</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.size_recorder_interval"</literal></expr></argument>, <argument><expr><literal type="number">5</literal> <operator>*</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>sizeRecorderInterval</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>ScheduledExecutors</name><operator>.</operator><name>optionalTasks</name><operator>.</operator><name>scheduleWithFixedDelay</name></name><argument_list>(<argument><expr><name><name>SizeEstimatesRecorder</name><operator>.</operator><name>instance</name></name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><name>sizeRecorderInterval</name></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>SECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>ActiveRepairService</name><operator>.</operator><name>instance</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Prepared statements</comment>
        <expr_stmt><expr><call><name><name>QueryProcessor</name><operator>.</operator><name>instance</name><operator>.</operator><name>preloadPreparedStatements</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Metrics</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>metricsReporterConfigFile</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.metricsReporterConfigFile"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>metricsReporterConfigFile</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Trying to load metrics-reporter-config from file: {}"</literal></expr></argument>, <argument><expr><name>metricsReporterConfigFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try>try
            <block>{<block_content>
                <comment type="line">// enable metrics provided by metrics-jvm.jar</comment>
                <expr_stmt><expr><call><name><name>CassandraMetricsRegistry</name><operator>.</operator><name>Metrics</name><operator>.</operator><name>register</name></name><argument_list>(<argument><expr><literal type="string">"jvm.buffers"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>BufferPoolMetricSet</name><argument_list>(<argument><expr><call><name><name>ManagementFactory</name><operator>.</operator><name>getPlatformMBeanServer</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>CassandraMetricsRegistry</name><operator>.</operator><name>Metrics</name><operator>.</operator><name>register</name></name><argument_list>(<argument><expr><literal type="string">"jvm.gc"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>GarbageCollectorMetricSet</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>CassandraMetricsRegistry</name><operator>.</operator><name>Metrics</name><operator>.</operator><name>register</name></name><argument_list>(<argument><expr><literal type="string">"jvm.memory"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>MemoryUsageGaugeSet</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>CassandraMetricsRegistry</name><operator>.</operator><name>Metrics</name><operator>.</operator><name>register</name></name><argument_list>(<argument><expr><literal type="string">"jvm.fd.usage"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>FileDescriptorRatioGauge</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// initialize metrics-reporter-config from yaml file</comment>
                <decl_stmt><decl><type><name>URL</name></type> <name>resource</name> <init>= <expr><call><name><name>CassandraDaemon</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getClassLoader</name></name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>(<argument><expr><name>metricsReporterConfigFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>resource</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Failed to load metrics-reporter-config, file does not exist: {}"</literal></expr></argument>, <argument><expr><name>metricsReporterConfigFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>reportFileLocation</name> <init>= <expr><call><name><name>resource</name><operator>.</operator><name>getFile</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>ReporterConfig</name><operator>.</operator><name>loadFromFile</name></name><argument_list>(<argument><expr><name>reportFileLocation</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>enableAll</name><argument_list>(<argument><expr><name><name>CassandraMetricsRegistry</name><operator>.</operator><name>Metrics</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Failed to load metrics-reporter-config, metric sinks will not be activated"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// start server internals</comment>
        <expr_stmt><expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>registerDaemon</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>initServer</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>ConfigurationException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>err</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"\nFatal configuration error; unable to start server.  See log for stacktrace."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>exitOrFail</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Fatal configuration error"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>

        <comment type="line">// Because we are writing to the system_distributed keyspace, this should happen after that is created, which</comment>
        <comment type="line">// happens in StorageService.instance.initServer()</comment>
        <decl_stmt><decl><type><name>Runnable</name></type> <name>viewRebuild</name> <init>= <expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Keyspace</name></type> <name>keyspace</name> <range>: <expr><call><name><name>Keyspace</name><operator>.</operator><name>all</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>keyspace</name><operator>.</operator><name>viewManager</name><operator>.</operator><name>buildAllViews</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Completed submission of build tasks for any materialized views defined at startup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></lambda></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>ScheduledExecutors</name><operator>.</operator><name>optionalTasks</name><operator>.</operator><name>schedule</name></name><argument_list>(<argument><expr><name>viewRebuild</name></expr></argument>, <argument><expr><name><name>StorageService</name><operator>.</operator><name>RING_DELAY</name></name></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>InetAddressAndPort</name><operator>.</operator><name>getLoopbackAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>Gossiper</name><operator>.</operator><name>waitToSettle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>doAuthSetup</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// re-enable auto-compaction after gossip is settled, so correct disk boundaries are used</comment>
        <for>for <control>(<init><decl><type><name>Keyspace</name></type> <name>keyspace</name> <range>: <expr><call><name><name>Keyspace</name><operator>.</operator><name>all</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name> <range>: <expr><call><name><name>keyspace</name><operator>.</operator><name>getColumnFamilyStores</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <for>for <control>(<init><decl><type><specifier>final</specifier> <name>ColumnFamilyStore</name></type> <name>store</name> <range>: <expr><call><name><name>cfs</name><operator>.</operator><name>concatWithIndexes</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>store</name><operator>.</operator><name>reload</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">//reload CFs in case there was a change of disk boundaries</comment>
                    <if_stmt><if>if <condition>(<expr><call><name><name>store</name><operator>.</operator><name>getCompactionStrategyManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>shouldBeEnabled</name><argument_list>()</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getAutocompactionOnStartupEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name><name>store</name><operator>.</operator><name>enableAutoCompaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if>
                        <else>else
                        <block>{<block_content>
                            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Not enabling compaction for {}.{}; autocompaction_on_startup_enabled is set to false"</literal></expr></argument>, <argument><expr><call><name><name>store</name><operator>.</operator><name>keyspace</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>store</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name><name>AuditLogManager</name><operator>.</operator><name>instance</name><operator>.</operator><name>initialize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// schedule periodic background compaction task submission. this is simply a backstop against compactions stalling</comment>
        <comment type="line">// due to scheduling errors or race conditions</comment>
        <expr_stmt><expr><call><name><name>ScheduledExecutors</name><operator>.</operator><name>optionalTasks</name><operator>.</operator><name>scheduleWithFixedDelay</name></name><argument_list>(<argument><expr><call><name><name>ColumnFamilyStore</name><operator>.</operator><name>getBackgroundCompactionTaskSubmitter</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MINUTES</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// schedule periodic recomputation of speculative retry thresholds</comment>
        <expr_stmt><expr><call><name><name>ScheduledExecutors</name><operator>.</operator><name>optionalTasks</name><operator>.</operator><name>scheduleWithFixedDelay</name></name><argument_list>(<argument><expr><name>SPECULATION_THRESHOLD_UPDATER</name></expr></argument>, 
                                                                <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getReadRpcTimeout</name></name><argument_list>(<argument><expr><name>NANOSECONDS</name></expr></argument>)</argument_list></call></expr></argument>,
                                                                <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getReadRpcTimeout</name></name><argument_list>(<argument><expr><name>NANOSECONDS</name></expr></argument>)</argument_list></call></expr></argument>,
                                                                <argument><expr><name>NANOSECONDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>initializeClientTransports</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>completeSetup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>runStartupChecks</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>startupChecks</name><operator>.</operator><name>verify</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>StartupException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>exitOrFail</name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>returnCode</name></name></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>

    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Checks if the data of the local system keyspaces need to be migrated to a different location.
     *
     * @throws IOException
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>migrateSystemDataIfNeeded</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <comment type="line">// If there is only one directory and no system keyspace directory has been specified we do not need to do</comment>
        <comment type="line">// anything. If it is not the case we want to try to migrate the data.</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>useSpecificLocationForLocalSystemData</name></name><argument_list>()</argument_list></call>
                <operator>&amp;&amp;</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getNonLocalSystemKeyspacesDataFileLocations</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <comment type="line">// We can face several cases:</comment>
        <comment type="line">//  1) The system data are spread accross the data file locations and need to be moved to</comment>
        <comment type="line">//     the first data location (upgrade to 4.0)</comment>
        <comment type="line">//  2) The system data are spread accross the data file locations and need to be moved to</comment>
        <comment type="line">//     the system keyspace location configured by the user (upgrade to 4.0)</comment>
        <comment type="line">//  3) The system data are stored in the first data location and need to be moved to</comment>
        <comment type="line">//     the system keyspace location configured by the user (system_data_file_directory has been configured)</comment>
        <decl_stmt><decl><type><name>Path</name></type> <name>target</name> <init>= <expr><call><name><name>Paths</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getLocalSystemKeyspacesDataFileLocations</name></name><argument_list>()</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>nonLocalSystemKeyspacesFileLocations</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getNonLocalSystemKeyspacesDataFileLocations</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>sources</name> <init>= <expr><ternary><condition><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>useSpecificLocationForLocalSystemData</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>nonLocalSystemKeyspacesFileLocations</name></expr>
                                                                                      </then><else>: <expr><call><name><name>Arrays</name><operator>.</operator><name>copyOfRange</name></name><argument_list>(<argument><expr><name>nonLocalSystemKeyspacesFileLocations</name></expr></argument>,
                                                                                                           <argument><expr><literal type="number">1</literal></expr></argument>,
                                                                                                           <argument><expr><name><name>nonLocalSystemKeyspacesFileLocations</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>String</name></type> <name>source</name> <range>: <expr><name>sources</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>Path</name></type> <name>dataFileLocation</name> <init>= <expr><call><name><name>Paths</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Files</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>dataFileLocation</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>

            <try>try <init>(<decl><type><name><name>Stream</name><argument_list type="generic">&lt;<argument><name>Path</name></argument>&gt;</argument_list></name></type> <name>locationChildren</name> <init>= <expr><call><name><name>Files</name><operator>.</operator><name>list</name></name><argument_list>(<argument><expr><name>dataFileLocation</name></expr></argument>)</argument_list></call></expr></init></decl>)</init>
            <block>{<block_content>
                <decl_stmt><decl><type><name><name>Path</name><index>[]</index></name></type> <name>keyspaceDirectories</name> <init>= <expr><call><name><name>locationChildren</name><operator>.</operator><name>filter</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>p</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>SchemaConstants</name><operator>.</operator><name>isLocalSystemKeyspace</name></name><argument_list>(<argument><expr><call><name><name>p</name><operator>.</operator><name>getFileName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
                                                             <operator>.</operator><call><name>toArray</name><argument_list>(<argument><expr><name><name>Path</name><index>[]</index></name><operator>::</operator><operator>new</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <for>for <control>(<init><decl><type><name>Path</name></type> <name>keyspaceDirectory</name> <range>: <expr><name>keyspaceDirectories</name></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <try>try <init>(<decl><type><name><name>Stream</name><argument_list type="generic">&lt;<argument><name>Path</name></argument>&gt;</argument_list></name></type> <name>keyspaceChildren</name> <init>= <expr><call><name><name>Files</name><operator>.</operator><name>list</name></name><argument_list>(<argument><expr><name>keyspaceDirectory</name></expr></argument>)</argument_list></call></expr></init></decl>)</init>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name><name>Path</name><index>[]</index></name></type> <name>tableDirectories</name> <init>= <expr><call><name><name>keyspaceChildren</name><operator>.</operator><name>filter</name></name><argument_list>(<argument><expr><name>Files</name><operator>::</operator><name>isDirectory</name></expr></argument>)</argument_list></call>
                                                                  <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>p</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><operator>!</operator><call><name><name>SystemKeyspace</name><operator>.</operator><name>TABLES_SPLIT_ACROSS_MULTIPLE_DISKS</name>
                                                                                              <operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>p</name><operator>.</operator><name>getFileName</name></name><argument_list>()</argument_list></call>
                                                                                                         <operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
                                                                  <operator>.</operator><call><name>toArray</name><argument_list>(<argument><expr><name><name>Path</name><index>[]</index></name><operator>::</operator><operator>new</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <for>for <control>(<init><decl><type><name>Path</name></type> <name>tableDirectory</name> <range>: <expr><name>tableDirectories</name></expr></range></decl></init>)</control>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>moveRecursively</name></name><argument_list>(<argument><expr><name>tableDirectory</name></expr></argument>,
                                                      <argument><expr><call><name><name>target</name><operator>.</operator><name>resolve</name></name><argument_list>(<argument><expr><call><name><name>dataFileLocation</name><operator>.</operator><name>relativize</name></name><argument_list>(<argument><expr><name>tableDirectory</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></for>

                        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>SchemaConstants</name><operator>.</operator><name>SYSTEM_KEYSPACE_NAME</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>keyspaceDirectory</name><operator>.</operator><name>getFileName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>deleteDirectoryIfEmpty</name></name><argument_list>(<argument><expr><name>keyspaceDirectory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></try>
                </block_content>}</block></for>
            </block_content>}</block></try>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setupVirtualKeyspaces</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>VirtualKeyspaceRegistry</name><operator>.</operator><name>instance</name><operator>.</operator><name>register</name></name><argument_list>(<argument><expr><name><name>VirtualSchemaKeyspace</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>VirtualKeyspaceRegistry</name><operator>.</operator><name>instance</name><operator>.</operator><name>register</name></name><argument_list>(<argument><expr><name><name>SystemViewsKeyspace</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>initializeClientTransports</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <comment type="line">// Native transport</comment>
        <if_stmt><if>if <condition>(<expr><name>nativeTransportService</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>nativeTransportService</name> <operator>=</operator> <operator>new</operator> <call><name>NativeTransportService</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>uncaughtException</name><parameter_list>(<parameter><decl><type><name>Thread</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>Throwable</name></type> <name>e</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>StorageMetrics</name><operator>.</operator><name>uncaughtExceptions</name><operator>.</operator><name>inc</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Exception in thread {}"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Exception in thread {}"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>Throwable</name></type> <name>e2</name> <init>= <expr><name>e</name></expr></init></decl>;</init> <condition><expr><name>e2</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</condition> <incr><expr><name>e2</name> <operator>=</operator> <call><name><name>e2</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call></expr></incr>)</control>
        <block>{<block_content>
            <comment type="line">// make sure error gets logged exactly once.</comment>
            <if_stmt><if>if <condition>(<expr><name>e2</name> <operator>!=</operator> <name>e</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>e2</name> <operator>instanceof</operator> <name>FSError</name> <operator>||</operator> <name>e2</name> <operator>instanceof</operator> <name>CorruptSSTableException</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Exception in thread {}"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>JVMStabilityInspector</name><operator>.</operator><name>inspectThrowable</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block">/*
     * Asynchronously load the row and key cache in one off threads and return a compound future of the result.
     * Error handling is pushed into the cache load since cache loads are allowed to fail and are handled by logging.
     */</comment>
    <function><type><specifier>private</specifier> <name><name>ListenableFuture</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>loadRowAndKeyCacheAsync</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>ListenableFuture</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>keyCacheLoad</name> <init>= <expr><call><name><name>CacheService</name><operator>.</operator><name>instance</name><operator>.</operator><name>keyCache</name><operator>.</operator><name>loadSavedAsync</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name><name>ListenableFuture</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>rowCacheLoad</name> <init>= <expr><call><name><name>CacheService</name><operator>.</operator><name>instance</name><operator>.</operator><name>rowCache</name><operator>.</operator><name>loadSavedAsync</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
        <type><name><name>ListenableFuture</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>retval</name> <init>= <expr><call><name><name>Futures</name><operator>.</operator><name>successfulAsList</name></name><argument_list>(<argument><expr><name>keyCacheLoad</name></expr></argument>, <argument><expr><name>rowCacheLoad</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><name>retval</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>completeSetup</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>setupCompleted</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>setupCompleted</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>setupCompleted</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>logSystemInfo</name><parameter_list>()</parameter_list>
    <block>{<block_content>
    	<if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isInfoEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition>
    	<block>{<block_content>
	        <try>try
	        <block>{<block_content>
	            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Hostname: {}"</literal></expr></argument>, <argument><expr><call><name><name>InetAddress</name><operator>.</operator><name>getLocalHost</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getHostName</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">":"</literal> <operator>+</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getStoragePort</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">":"</literal> <operator>+</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getSSLStoragePort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        </block_content>}</block>
	        <catch>catch <parameter_list>(<parameter><decl><type><name>UnknownHostException</name></type> <name>e1</name></decl></parameter>)</parameter_list>
	        <block>{<block_content>
	            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Could not resolve local host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        </block_content>}</block></catch></try>

	        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"JVM vendor/version: {}/{}"</literal></expr></argument>, <argument><expr><call><name><name>JAVA_VM_NAME</name><operator>.</operator><name>getString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>JAVA_VERSION</name><operator>.</operator><name>getString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Heap size: {}/{}"</literal></expr></argument>,
                        <argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>prettyPrintMemory</name></name><argument_list>(<argument><expr><call><name><name>Runtime</name><operator>.</operator><name>getRuntime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>totalMemory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>prettyPrintMemory</name></name><argument_list>(<argument><expr><call><name><name>Runtime</name><operator>.</operator><name>getRuntime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>maxMemory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	        <for>for<control>(<init><decl><type><name>MemoryPoolMXBean</name></type> <name>pool</name><range>: <expr><call><name><name>ManagementFactory</name><operator>.</operator><name>getMemoryPoolMXBeans</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
	            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"{} {}: {}"</literal></expr></argument>, <argument><expr><call><name><name>pool</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>pool</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>pool</name><operator>.</operator><name>getPeakUsage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Classpath: {}"</literal></expr></argument>, <argument><expr><call><name><name>JAVA_CLASS_PATH</name><operator>.</operator><name>getString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"JVM Arguments: {}"</literal></expr></argument>, <argument><expr><call><name><name>ManagementFactory</name><operator>.</operator><name>getRuntimeMXBean</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInputArguments</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	</block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Initialize the Cassandra Daemon based on the given &lt;a
     * href="http://commons.apache.org/daemon/jsvc.html"&gt;Commons
     * Daemon&lt;/a&gt;-specific arguments. To clarify, this is a hook for JSVC.
     *
     * @param arguments
     *            the arguments passed in from JSVC
     * @throws IOException
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>arguments</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name>setup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Start the Cassandra Daemon, assuming that it has already been
     * initialized via {@link #init(String[])}
     *
     * Hook for JSVC
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>start</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StartupClusterConnectivityChecker</name></type> <name>connectivityChecker</name> <init>= <expr><call><name><name>StartupClusterConnectivityChecker</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getBlockForPeersTimeoutInSeconds</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                                                                         <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getBlockForPeersInRemoteDatacenters</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>connectivityChecker</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><call><name><name>Gossiper</name><operator>.</operator><name>instance</name><operator>.</operator><name>getEndpoints</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getEndpointSnitch</name></name><argument_list>()</argument_list></call><operator>::</operator><name>getDatacenter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// check to see if transports may start else return without starting.  This is needed when in survey mode or</comment>
        <comment type="line">// when bootstrap has not completed.</comment>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><call><name>validateTransportsCanStart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalStateException</name></type> <name>isx</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <comment type="line">// If there are any errors, we just log and return in this case</comment>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><call><name><name>isx</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></catch></try>

        <expr_stmt><expr><call><name>startClientTransports</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>startClientTransports</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>nativeFlag</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.start_native_transport"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>nativeFlag</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><name>nativeFlag</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><name>nativeFlag</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>startNativeTransport</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>startNativeTransport</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>setRpcReady</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Not starting native transport as requested. Use JMX (StorageService-&gt;startNativeTransport()) or nodetool (enablebinary) to start it"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Stop the daemon, ideally in an idempotent manner.
     *
     * Hook for JSVC / Procrun
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>stop</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <comment type="line">// On linux, this doesn't entirely shut down Cassandra, just the RPC server.</comment>
        <comment type="line">// jsvc takes care of taking the rest down</comment>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Cassandra shutting down..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>destroyClientTransports</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>setRpcReady</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// On windows, we need to stop the entire system as prunsrv doesn't have the jsvc hooks</comment>
        <comment type="line">// We rely on the shutdown hook to drain the node</comment>
        <if_stmt><if>if <condition>(<expr><name><name>FBUtilities</name><operator>.</operator><name>isWindows</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>exit</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>jmxServer</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <try>try
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>jmxServer</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Error shutting down local JMX server: "</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>destroyClientTransports</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>stopNativeTransport</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>nativeTransportService</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>nativeTransportService</name><operator>.</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Clean up all resources obtained during the lifetime of the daemon. This
     * is a hook for JSVC.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>destroy</name><parameter_list>()</parameter_list>
    <block>{<block_content/>}</block></function>

    <comment type="block" format="javadoc">/**
     * A convenience method to initialize and start the daemon in one shot.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>activate</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <comment type="line">// Do not put any references to DatabaseDescriptor above the forceStaticInitialization call.</comment>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><call><name>applyConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>registerNativeAccess</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>FBUtilities</name><operator>.</operator><name>isWindows</name></name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// We need to adjust the system timer on windows from the default 15ms down to the minimum of 1ms as this</comment>
                <comment type="line">// impacts timer intervals, thread scheduling, driver interrupts, etc.</comment>
                <expr_stmt><expr><call><name><name>WindowsTimer</name><operator>.</operator><name>startTimerPeriod</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getWindowsTimerInterval</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>setup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>String</name></type> <name>pidFile</name> <init>= <expr><call><name><name>CASSANDRA_PID_FILE</name><operator>.</operator><name>getString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>pidFile</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>pidFile</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>deleteOnExit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>CASSANDRA_FOREGROUND</name><operator>.</operator><name>getString</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>err</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Startup complete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>logStackTrace</name> <init>=
                    <expr><ternary><condition><expr><name>e</name> <operator>instanceof</operator> <name>ConfigurationException</name></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>ConfigurationException</name><operator>)</operator><name>e</name><operator>)</operator><operator>.</operator><name>logStackTrace</name></expr> </then><else>: <expr><literal type="boolean">true</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Exception ("</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">") encountered during startup: "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>logStackTrace</name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>runManaged</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Exception encountered during startup"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <comment type="line">// try to warn user on stdout too, if we haven't already detached</comment>
                <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>exitOrFail</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"Exception encountered during startup"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>runManaged</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Exception encountered during startup: {}"</literal></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <comment type="line">// try to warn user on stdout too, if we haven't already detached</comment>
                <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>err</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>exitOrFail</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"Exception encountered during startup: "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>registerNativeAccess</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name><name>javax</name><operator>.</operator><name>management</name><operator>.</operator><name>NotCompliantMBeanException</name></name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>MBeanWrapper</name><operator>.</operator><name>instance</name><operator>.</operator><name>registerMBean</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StandardMBean</name><argument_list>(<argument><expr><operator>new</operator> <call><name>NativeAccess</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>NativeAccessMBean</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MBEAN_NAME</name></expr></argument>, <argument><expr><name><name>MBeanWrapper</name><operator>.</operator><name>OnException</name><operator>.</operator><name>LOG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>applyConfig</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>daemonInitialization</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>validateTransportsCanStart</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <comment type="line">// We only start transports if bootstrap has completed and we're not in survey mode, OR if we are in</comment>
        <comment type="line">// survey mode and streaming has completed but we're not using auth.</comment>
        <comment type="line">// OR if we have not joined the ring yet.</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>hasJoined</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>isSurveyMode</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>isBootstrapMode</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getAuthenticator</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>requireAuthentication</name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Not starting client transports in write_survey mode as it's bootstrapping or "</literal> <operator>+</operator>
                                                    <literal type="string">"auth is enabled"</literal></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>SystemKeyspace</name><operator>.</operator><name>bootstrapComplete</name></name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Node is not yet bootstrapped completely. Use nodetool to check bootstrap"</literal> <operator>+</operator>
                                                    <literal type="string">" state and resume. For more, see `nodetool help bootstrap`"</literal></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>startNativeTransport</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>validateTransportsCanStart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>nativeTransportService</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"setup() must be called first for CassandraDaemon"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>nativeTransportService</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>stopNativeTransport</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>nativeTransportService</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>nativeTransportService</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isNativeTransportRunning</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>nativeTransportService</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>nativeTransportService</name><operator>.</operator><name>isRunning</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * A convenience method to stop and destroy the daemon in one shot.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>deactivate</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>stop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>destroy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// completely shut down cassandra</comment>
        <if_stmt><if>if<condition>(<expr><operator>!</operator><name>runManaged</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>exit</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>stop</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>instance</name><operator>.</operator><name>deactivate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>instance</name><operator>.</operator><name>activate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>clearConnectionHistory</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>nativeTransportService</name><operator>.</operator><name>clearConnectionHistory</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>exitOrFail</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>exitOrFail</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>exitOrFail</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>Throwable</name></type> <name>cause</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>runManaged</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>RuntimeException</name></type> <name>t</name> <init>= <expr><ternary><condition><expr><name>cause</name><operator>!=</operator><literal type="null">null</literal></expr> ?</condition><then> <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>cause</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <throw>throw <expr><name>t</name></expr>;</throw>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>cause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>exit</name></name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <class><specifier>static</specifier> class <name>NativeAccess</name> <super_list><implements>implements <super><name>NativeAccessMBean</name></super></implements></super_list>
    <block>{
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isAvailable</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>NativeLibrary</name><operator>.</operator><name>isAvailable</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isMemoryLockable</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>NativeLibrary</name><operator>.</operator><name>jnaMemoryLockable</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <interface><specifier>public</specifier> interface <name>Server</name>
    <block>{
        <comment type="block" format="javadoc">/**
         * Start the server.
         * This method shoud be able to restart a server stopped through stop().
         * Should throw a RuntimeException if the server cannot be started
         */</comment>
        <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>start</name><parameter_list>()</parameter_list>;</function_decl>

        <comment type="block" format="javadoc">/**
         * Stop the server.
         * This method should be able to stop server started through start().
         * Should throw a RuntimeException if the server cannot be stopped
         */</comment>
        <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>stop</name><parameter_list>()</parameter_list>;</function_decl>

        <comment type="block" format="javadoc">/**
         * Returns whether the server is currently running.
         */</comment>
        <function_decl><type><specifier>public</specifier> <name>boolean</name></type> <name>isRunning</name><parameter_list>()</parameter_list>;</function_decl>

        <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>clearConnectionHistory</name><parameter_list>()</parameter_list>;</function_decl>
    }</block></interface>
}</block></class>
</unit>
