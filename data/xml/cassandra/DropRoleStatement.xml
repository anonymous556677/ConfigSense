<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/cql3/statements/DropRoleStatement.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>statements</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>audit</name><operator>.</operator><name>AuditLogContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>audit</name><operator>.</operator><name>AuditLogEntryType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>auth</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>RoleName</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>ClientState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>transport</name><operator>.</operator><name>messages</name><operator>.</operator><name>ResultMessage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang3</name><operator>.</operator><name>builder</name><operator>.</operator><name>ToStringBuilder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>lang3</name><operator>.</operator><name>builder</name><operator>.</operator><name>ToStringStyle</name></name>;</import>

<class><specifier>public</specifier> class <name>DropRoleStatement</name> <super_list><extends>extends <super><name>AuthenticationStatement</name></super></extends></super_list>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>RoleResource</name></type> <name>role</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>ifExists</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>DropRoleStatement</name><parameter_list>(<parameter><decl><type><name>RoleName</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>ifExists</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>role</name></name> <operator>=</operator> <call><name><name>RoleResource</name><operator>.</operator><name>role</name></name><argument_list>(<argument><expr><call><name><name>name</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ifExists</name></name> <operator>=</operator> <name>ifExists</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>authorize</name><parameter_list>(<parameter><decl><type><name>ClientState</name></type> <name>state</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>UnauthorizedException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>checkPermission</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>Permission</name><operator>.</operator><name>DROP</name></name></expr></argument>, <argument><expr><name>role</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// We only check superuser status for existing roles to avoid</comment>
        <comment type="line">// caching info about roles which don't exist (CASSANDRA-9189)</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getRoleManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isExistingRole</name><argument_list>(<argument><expr><name>role</name></expr></argument>)</argument_list></call>
            <operator>&amp;&amp;</operator> <call><name><name>Roles</name><operator>.</operator><name>hasSuperuserStatus</name></name><argument_list>(<argument><expr><name>role</name></expr></argument>)</argument_list></call>
            <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>state</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isSuper</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>UnauthorizedException</name><argument_list>(<argument><expr><literal type="string">"Only superusers can drop a role with superuser status"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>validate</name><parameter_list>(<parameter><decl><type><name>ClientState</name></type> <name>state</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>RequestValidationException</name></expr></argument></throws>
    <block>{<block_content>
        <comment type="line">// validate login here before authorize to avoid leaking user existence to anonymous users.</comment>
        <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>ensureNotAnonymous</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ifExists</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getRoleManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isExistingRole</name><argument_list>(<argument><expr><name>role</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s doesn't exist"</literal></expr></argument>, <argument><expr><call><name><name>role</name><operator>.</operator><name>getRoleName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>AuthenticatedUser</name></type> <name>user</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>user</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>user</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>role</name><operator>.</operator><name>getRoleName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>InvalidRequestException</name><argument_list>(<argument><expr><literal type="string">"Cannot DROP primary role for current login"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>ResultMessage</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>ClientState</name></type> <name>state</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>RequestValidationException</name></expr></argument>, <argument><expr><name>RequestExecutionException</name></expr></argument></throws>
    <block>{<block_content>
        <comment type="line">// not rejected in validate()</comment>
        <if_stmt><if>if <condition>(<expr><name>ifExists</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getRoleManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isExistingRole</name><argument_list>(<argument><expr><name>role</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>

        <comment type="line">// clean up grants and permissions of/on the dropped role.</comment>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getRoleManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>dropRole</name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>role</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getAuthorizer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>revokeAllFrom</name><argument_list>(<argument><expr><name>role</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getAuthorizer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>revokeAllOn</name><argument_list>(<argument><expr><name>role</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getNetworkAuthorizer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>drop</name><argument_list>(<argument><expr><name>role</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>
    
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>ToStringBuilder</name><operator>.</operator><name>reflectionToString</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>ToStringStyle</name><operator>.</operator><name>SHORT_PREFIX_STYLE</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>AuditLogContext</name></type> <name>getAuditLogContext</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>AuditLogContext</name><argument_list>(<argument><expr><name><name>AuditLogEntryType</name><operator>.</operator><name>DROP_ROLE</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
