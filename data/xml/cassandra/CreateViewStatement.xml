<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/cql3/statements/schema/CreateViewStatement.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>statements</name><operator>.</operator><name>schema</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableSet</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Lists</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>audit</name><operator>.</operator><name>AuditLogContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>audit</name><operator>.</operator><name>AuditLogEntryType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>auth</name><operator>.</operator><name>Permission</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>restrictions</name><operator>.</operator><name>StatementRestrictions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>selection</name><operator>.</operator><name>RawSelector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>selection</name><operator>.</operator><name>Selectable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>statements</name><operator>.</operator><name>StatementType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>AbstractType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>ReversedType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>AlreadyExistsException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>InvalidRequestException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>Keyspaces</name><operator>.</operator><name>KeyspacesDiff</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>ClientState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>transport</name><operator>.</operator><name>Event</name><operator>.</operator><name>SchemaChange</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>transport</name><operator>.</operator><name>Event</name><operator>.</operator><name>SchemaChange</name><operator>.</operator><name>Change</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>transport</name><operator>.</operator><name>Event</name><operator>.</operator><name>SchemaChange</name><operator>.</operator><name>Target</name></name>;</import>

<import>import static <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name><operator>.</operator><name>join</name></name>;</import>

<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name><operator>.</operator><name>concat</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name><operator>.</operator><name>filter</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name><operator>.</operator><name>transform</name></name>;</import>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>CreateViewStatement</name> <super_list><extends>extends <super><name>AlterSchemaStatement</name></super></extends></super_list>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>tableName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>viewName</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>RawSelector</name></argument>&gt;</argument_list></name></type> <name>rawColumns</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>&gt;</argument_list></name></type> <name>partitionKeyColumns</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>&gt;</argument_list></name></type> <name>clusteringColumns</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>WhereClause</name></type> <name>whereClause</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>LinkedHashMap</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>, <argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>clusteringOrder</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>TableAttributes</name></type> <name>attrs</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>ifNotExists</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>CreateViewStatement</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>,
                               <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>,
                               <parameter><decl><type><name>String</name></type> <name>viewName</name></decl></parameter>,

                               <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>RawSelector</name></argument>&gt;</argument_list></name></type> <name>rawColumns</name></decl></parameter>,
                               <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>&gt;</argument_list></name></type> <name>partitionKeyColumns</name></decl></parameter>,
                               <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>&gt;</argument_list></name></type> <name>clusteringColumns</name></decl></parameter>,

                               <parameter><decl><type><name>WhereClause</name></type> <name>whereClause</name></decl></parameter>,

                               <parameter><decl><type><name><name>LinkedHashMap</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>, <argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>clusteringOrder</name></decl></parameter>,
                               <parameter><decl><type><name>TableAttributes</name></type> <name>attrs</name></decl></parameter>,

                               <parameter><decl><type><name>boolean</name></type> <name>ifNotExists</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tableName</name></name> <operator>=</operator> <name>tableName</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>viewName</name></name> <operator>=</operator> <name>viewName</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>rawColumns</name></name> <operator>=</operator> <name>rawColumns</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>partitionKeyColumns</name></name> <operator>=</operator> <name>partitionKeyColumns</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>clusteringColumns</name></name> <operator>=</operator> <name>clusteringColumns</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>whereClause</name></name> <operator>=</operator> <name>whereClause</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>clusteringOrder</name></name> <operator>=</operator> <name>clusteringOrder</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>attrs</name></name> <operator>=</operator> <name>attrs</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ifNotExists</name></name> <operator>=</operator> <name>ifNotExists</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>Keyspaces</name></type> <name>apply</name><parameter_list>(<parameter><decl><type><name>Keyspaces</name></type> <name>schema</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getEnableMaterializedViews</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Materialized views are disabled. Enable in cassandra.yaml to use."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <comment type="block">/*
         * Basic dependency validations
         */</comment>

        <decl_stmt><decl><type><name>KeyspaceMetadata</name></type> <name>keyspace</name> <init>= <expr><call><name><name>schema</name><operator>.</operator><name>getNullable</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name>keyspace</name></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Keyspace '%s' doesn't exist"</literal></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>keyspace</name><operator>.</operator><name>createReplicationStrategy</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>hasTransientReplicas</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>InvalidRequestException</name><argument_list>(<argument><expr><literal type="string">"Materialized views are not supported on transiently replicated keyspaces"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>TableMetadata</name></type> <name>table</name> <init>= <expr><call><name><name>keyspace</name><operator>.</operator><name>tables</name><operator>.</operator><name>getNullable</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name>table</name></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Base table '%s' doesn't exist"</literal></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>keyspace</name><operator>.</operator><name>hasTable</name></name><argument_list>(<argument><expr><name>viewName</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Cannot create materialized view '%s' - a table with the same name already exists"</literal></expr></argument>, <argument><expr><name>viewName</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>keyspace</name><operator>.</operator><name>hasView</name></name><argument_list>(<argument><expr><name>viewName</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>ifNotExists</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>schema</name></expr>;</return></block_content></block></if></if_stmt>

            <throw>throw <expr><operator>new</operator> <call><name>AlreadyExistsException</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>viewName</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/*
         * Base table validation
         */</comment>

        <if_stmt><if>if <condition>(<expr><call><name><name>table</name><operator>.</operator><name>isCounter</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Materialized views are not supported on counter tables"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>table</name><operator>.</operator><name>isView</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Materialized views cannot be created against other materialized views"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>table</name><operator>.</operator><name>params</name><operator>.</operator><name>gcGraceSeconds</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Cannot create materialized view '%s' for base table "</literal> <operator>+</operator>
                      <literal type="string">"'%s' with gc_grace_seconds of 0, since this value is "</literal> <operator>+</operator>
                      <literal type="string">"used to TTL undelivered updates. Setting gc_grace_seconds"</literal> <operator>+</operator>
                      <literal type="string">" too low might cause undelivered updates to expire "</literal> <operator>+</operator>
                      <literal type="string">"before being replayed."</literal></expr></argument>,
                      <argument><expr><name>viewName</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/*
         * Process SELECT clause
         */</comment>

        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>&gt;</argument_list></name></type> <name>selectedColumns</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>rawColumns</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// SELECT *</comment>
            <expr_stmt><expr><call><name><name>table</name><operator>.</operator><name>columns</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>c</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>selectedColumns</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>c</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>rawColumns</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>selector</name></decl></parameter></parameter_list> -&gt;
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name><name>selector</name><operator>.</operator><name>alias</name></name></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Cannot use aliases when defining a materialized view (got %s)"</literal></expr></argument>, <argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>selector</name><operator>.</operator><name>selectable</name></name> <operator>instanceof</operator> <name><name>Selectable</name><operator>.</operator><name>RawIdentifier</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Can only select columns by name when defining a materialized view (got %s)"</literal></expr></argument>, <argument><expr><name><name>selector</name><operator>.</operator><name>selectable</name></name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <comment type="line">// will throw IRE if the column doesn't exist in the base table</comment>
            <decl_stmt><decl><type><name>ColumnMetadata</name></type> <name>column</name> <init>= <expr><operator>(</operator><name>ColumnMetadata</name><operator>)</operator> <call><name><name>selector</name><operator>.</operator><name>selectable</name><operator>.</operator><name>prepare</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>selectedColumns</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>column</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>selectedColumns</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call>
                       <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>table</name><operator>::</operator><name>getColumn</name></expr></argument>)</argument_list></call>
                       <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>ColumnMetadata</name><operator>::</operator><name>isStatic</name></expr></argument>)</argument_list></call>
                       <operator>.</operator><call><name>findAny</name><argument_list>()</argument_list></call>
                       <operator>.</operator><call><name>ifPresent</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>c</name></decl></parameter></parameter_list> -&gt; <block>{<block_content> <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Cannot include static column '%s' in materialized view '%s'"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>viewName</name></expr></argument>)</argument_list></call></expr>;</throw> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * Process PRIMARY KEY columns and CLUSTERING ORDER BY clause
         */</comment>

        <if_stmt><if>if <condition>(<expr><call><name><name>partitionKeyColumns</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Must provide at least one partition key column for materialized view '%s'"</literal></expr></argument>, <argument><expr><name>viewName</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>&gt;</argument_list></name></type> <name>primaryKeyColumns</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>concat</name><argument_list>(<argument><expr><name>partitionKeyColumns</name></expr></argument>, <argument><expr><name>clusteringColumns</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>name</name></decl></parameter></parameter_list> -&gt;
        <block>{<block_content>
            <decl_stmt><decl><type><name>ColumnMetadata</name></type> <name>column</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getColumn</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name>column</name> <operator>||</operator> <operator>!</operator><call><name><name>selectedColumns</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Unknown column '%s' referenced in PRIMARY KEY for materialized view '%s'"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>viewName</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>primaryKeyColumns</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Duplicate column '%s' in PRIMARY KEY clause for materialized view '%s'"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>viewName</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>type</name> <init>= <expr><name><name>column</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>type</name><operator>.</operator><name>isMultiCell</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>type</name><operator>.</operator><name>isCollection</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Invalid non-frozen collection type '%s' for PRIMARY KEY column '%s'"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Invalid non-frozen user-defined type '%s' for PRIMARY KEY column '%s'"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></else></if_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>type</name><operator>.</operator><name>isCounter</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"counter type is not supported for PRIMARY KEY column '%s'"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>type</name><operator>.</operator><name>referencesDuration</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"duration type is not supported for PRIMARY KEY column '%s'"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// If we give a clustering order, we must explicitly do so for all aliases and in the order of the PK</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>clusteringOrder</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>clusteringColumns</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>clusteringOrder</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Clustering key columns must exactly match columns in CLUSTERING ORDER BY directive"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <comment type="block">/*
         * We need to include all of the primary key columns from the base table in order to make sure that we do not
         * overwrite values in the view. We cannot support "collapsing" the base table into a smaller number of rows in
         * the view because if we need to generate a tombstone, we have no way of knowing which value is currently being
         * used in the view and whether or not to generate a tombstone. In order to not surprise our users, we require
         * that they include all of the columns. We provide them with a list of all of the columns left to include.
         */</comment>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>&gt;</argument_list></name></type> <name>missingPrimaryKeyColumns</name> <init>=
            <expr><call><name><name>Lists</name><operator>.</operator><name>newArrayList</name></name><argument_list>(<argument><expr><call><name>filter</name><argument_list>(<argument><expr><call><name>transform</name><argument_list>(<argument><expr><call><name><name>table</name><operator>.</operator><name>primaryKeyColumns</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>c</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>c</name><operator>.</operator><name>name</name></name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>c</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><operator>!</operator><call><name><name>primaryKeyColumns</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>missingPrimaryKeyColumns</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Cannot create materialized view '%s' without primary key columns %s from base table '%s'"</literal></expr></argument>,
                      <argument><expr><name>viewName</name></expr></argument>, <argument><expr><call><name>join</name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>, <argument><expr><call><name>transform</name><argument_list>(<argument><expr><name>missingPrimaryKeyColumns</name></expr></argument>, <argument><expr><name>ColumnIdentifier</name><operator>::</operator><name>toString</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>&gt;</argument_list></name></type> <name>regularBaseTableColumnsInViewPrimaryKey</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>primaryKeyColumns</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>transform</name><argument_list>(<argument><expr><call><name><name>table</name><operator>.</operator><name>primaryKeyColumns</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>c</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>c</name><operator>.</operator><name>name</name></name></expr></block_content></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><name>regularBaseTableColumnsInViewPrimaryKey</name><operator>::</operator><name>remove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>regularBaseTableColumnsInViewPrimaryKey</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Cannot include more than one non-primary key column in materialized view primary key (got %s)"</literal></expr></argument>,
                      <argument><expr><call><name>join</name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>, <argument><expr><call><name>transform</name><argument_list>(<argument><expr><name>regularBaseTableColumnsInViewPrimaryKey</name></expr></argument>, <argument><expr><name>ColumnIdentifier</name><operator>::</operator><name>toString</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/*
         * Process WHERE clause
         */</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>whereClause</name><operator>.</operator><name>containsTokenRelations</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>InvalidRequestException</name><argument_list>(<argument><expr><literal type="string">"Cannot use token relation when defining a materialized view"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>whereClause</name><operator>.</operator><name>containsCustomExpressions</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"WHERE clause for materialized view '%s' cannot contain custom index expressions"</literal></expr></argument>, <argument><expr><name>viewName</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>StatementRestrictions</name></type> <name>restrictions</name> <init>=
            <expr><operator>new</operator> <call><name>StatementRestrictions</name><argument_list>(<argument><expr><name><name>StatementType</name><operator>.</operator><name>SELECT</name></name></expr></argument>,
                                      <argument><expr><name>table</name></expr></argument>,
                                      <argument><expr><name>whereClause</name></expr></argument>,
                                      <argument><expr><call><name><name>VariableSpecifications</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></argument>,
                                      <argument><expr><literal type="boolean">false</literal></expr></argument>,
                                      <argument><expr><literal type="boolean">false</literal></expr></argument>,
                                      <argument><expr><literal type="boolean">true</literal></expr></argument>,
                                      <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>&gt;</argument_list></name></type> <name>nonRestrictedPrimaryKeyColumns</name> <init>=
            <expr><call><name><name>Lists</name><operator>.</operator><name>newArrayList</name></name><argument_list>(<argument><expr><call><name>filter</name><argument_list>(<argument><expr><name>primaryKeyColumns</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>name</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><operator>!</operator><call><name><name>restrictions</name><operator>.</operator><name>isRestricted</name></name><argument_list>(<argument><expr><call><name><name>table</name><operator>.</operator><name>getColumn</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>nonRestrictedPrimaryKeyColumns</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Primary key columns %s must be restricted with 'IS NOT NULL' or otherwise"</literal></expr></argument>,
                      <argument><expr><call><name>join</name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>, <argument><expr><call><name>transform</name><argument_list>(<argument><expr><name>nonRestrictedPrimaryKeyColumns</name></expr></argument>, <argument><expr><name>ColumnIdentifier</name><operator>::</operator><name>toString</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// See CASSANDRA-13798</comment>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>&gt;</argument_list></name></type> <name>restrictedNonPrimaryKeyColumns</name> <init>= <expr><call><name><name>restrictions</name><operator>.</operator><name>nonPKRestrictedColumns</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>restrictedNonPrimaryKeyColumns</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>Boolean</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.mv.allow_filtering_nonkey_columns_unsafe"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Non-primary key columns can only be restricted with 'IS NOT NULL' (got: %s restricted illegally)"</literal></expr></argument>,
                      <argument><expr><call><name>join</name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><call><name>transform</name><argument_list>(<argument><expr><name>restrictedNonPrimaryKeyColumns</name></expr></argument>, <argument><expr><name>ColumnMetadata</name><operator>::</operator><name>toString</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/*
         * Validate WITH params
         */</comment>

        <expr_stmt><expr><call><name><name>attrs</name><operator>.</operator><name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>attrs</name><operator>.</operator><name>hasOption</name></name><argument_list>(<argument><expr><name><name>TableParams</name><operator>.</operator><name>Option</name><operator>.</operator><name>DEFAULT_TIME_TO_LIVE</name></name></expr></argument>)</argument_list></call>
            <operator>&amp;&amp;</operator> <call><name><name>attrs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>TableParams</name><operator>.</operator><name>Option</name><operator>.</operator><name>DEFAULT_TIME_TO_LIVE</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Cannot set default_time_to_live for a materialized view. "</literal> <operator>+</operator>
                      <literal type="string">"Data in a materialized view always expire at the same time than "</literal> <operator>+</operator>
                      <literal type="string">"the corresponding data in the parent table."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/*
         * Build the thing
         */</comment>

        <decl_stmt><decl><type><name><name>TableMetadata</name><operator>.</operator><name>Builder</name></name></type> <name>builder</name> <init>= <expr><call><name><name>TableMetadata</name><operator>.</operator><name>builder</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>viewName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>attrs</name><operator>.</operator><name>hasProperty</name></name><argument_list>(<argument><expr><name><name>TableAttributes</name><operator>.</operator><name>ID</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>id</name></name><argument_list>(<argument><expr><call><name><name>attrs</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>params</name></name><argument_list>(<argument><expr><call><name><name>attrs</name><operator>.</operator><name>asNewTableParams</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>kind</name><argument_list>(<argument><expr><name><name>TableMetadata</name><operator>.</operator><name>Kind</name><operator>.</operator><name>VIEW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>partitionKeyColumns</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>name</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>builder</name><operator>.</operator><name>addPartitionKeyColumn</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>getType</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>clusteringColumns</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>name</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>builder</name><operator>.</operator><name>addClusteringColumn</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>getType</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>selectedColumns</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call>
                       <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>name</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><operator>!</operator><call><name><name>primaryKeyColumns</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
                       <operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>name</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>builder</name><operator>.</operator><name>addRegularColumn</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>getType</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ViewMetadata</name></type> <name>view</name> <init>= <expr><operator>new</operator> <call><name>ViewMetadata</name><argument_list>(<argument><expr><name><name>table</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>table</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><call><name><name>rawColumns</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>whereClause</name></expr></argument>, <argument><expr><call><name><name>builder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>metadata</name><operator>.</operator><name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><call><name><name>schema</name><operator>.</operator><name>withAddedOrUpdated</name></name><argument_list>(<argument><expr><call><name><name>keyspace</name><operator>.</operator><name>withSwapped</name></name><argument_list>(<argument><expr><call><name><name>keyspace</name><operator>.</operator><name>views</name><operator>.</operator><name>with</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>SchemaChange</name></type> <name>schemaChangeEvent</name><parameter_list>(<parameter><decl><type><name>KeyspacesDiff</name></type> <name>diff</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>SchemaChange</name><argument_list>(<argument><expr><name><name>Change</name><operator>.</operator><name>CREATED</name></name></expr></argument>, <argument><expr><name><name>Target</name><operator>.</operator><name>TABLE</name></name></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>viewName</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>authorize</name><parameter_list>(<parameter><decl><type><name>ClientState</name></type> <name>client</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>client</name><operator>.</operator><name>ensureTablePermission</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name><name>Permission</name><operator>.</operator><name>ALTER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getType</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>ColumnIdentifier</name></type> <name>name</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>type</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getColumn</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>.</operator><name>type</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>clusteringOrder</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>reverse</name> <init>= <expr><operator>!</operator><call><name><name>clusteringOrder</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>type</name><operator>.</operator><name>isReversed</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>reverse</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><operator>(</operator><operator>(</operator><name>ReversedType</name><operator>)</operator> <name>type</name><operator>)</operator><operator>.</operator><name>baseType</name></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>type</name><operator>.</operator><name>isReversed</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>reverse</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><call><name><name>ReversedType</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>type</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>clientWarnings</name><parameter_list>(<parameter><decl><type><name>KeyspacesDiff</name></type> <name>diff</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>ImmutableSet</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>USAGE_WARNING</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>AuditLogContext</name></type> <name>getAuditLogContext</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>AuditLogContext</name><argument_list>(<argument><expr><name><name>AuditLogEntryType</name><operator>.</operator><name>CREATE_VIEW</name></name></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>viewName</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s (%s, %s)"</literal></expr></argument>, <argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>viewName</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> class <name>Raw</name> <super_list><extends>extends <super><name><name>CQLStatement</name><operator>.</operator><name>Raw</name></name></super></extends></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>QualifiedName</name></type> <name>tableName</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>QualifiedName</name></type> <name>viewName</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>ifNotExists</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>RawSelector</name></argument>&gt;</argument_list></name></type> <name>rawColumns</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>&gt;</argument_list></name></type> <name>clusteringColumns</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>&gt;</argument_list></name></type> <name>partitionKeyColumns</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>WhereClause</name></type> <name>whereClause</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>LinkedHashMap</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>, <argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>clusteringOrder</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>TableAttributes</name></type> <name>attrs</name> <init>= <expr><operator>new</operator> <call><name>TableAttributes</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>Raw</name><parameter_list>(<parameter><decl><type><name>QualifiedName</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name>QualifiedName</name></type> <name>viewName</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>RawSelector</name></argument>&gt;</argument_list></name></type> <name>rawColumns</name></decl></parameter>, <parameter><decl><type><name>WhereClause</name></type> <name>whereClause</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>ifNotExists</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tableName</name></name> <operator>=</operator> <name>tableName</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>viewName</name></name> <operator>=</operator> <name>viewName</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>rawColumns</name></name> <operator>=</operator> <name>rawColumns</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>whereClause</name></name> <operator>=</operator> <name>whereClause</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ifNotExists</name></name> <operator>=</operator> <name>ifNotExists</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>CreateViewStatement</name></type> <name>prepare</name><parameter_list>(<parameter><decl><type><name>ClientState</name></type> <name>state</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>keyspaceName</name> <init>= <expr><ternary><condition><expr><call><name><name>viewName</name><operator>.</operator><name>hasKeyspace</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>viewName</name><operator>.</operator><name>getKeyspace</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>state</name><operator>.</operator><name>getKeyspace</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>tableName</name><operator>.</operator><name>hasKeyspace</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>keyspaceName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>tableName</name><operator>.</operator><name>getKeyspace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Cannot create a materialized view on a table in a different keyspace"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>bindVariables</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Bind variables are not allowed in CREATE MATERIALIZED VIEW statements"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name>partitionKeyColumns</name></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"No PRIMARY KEY specifed for view '%s' (exactly one required)"</literal></expr></argument>, <argument><expr><name>viewName</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <return>return <expr><operator>new</operator> <call><name>CreateViewStatement</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>,
                                           <argument><expr><call><name><name>tableName</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                                           <argument><expr><call><name><name>viewName</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,

                                           <argument><expr><name>rawColumns</name></expr></argument>,
                                           <argument><expr><name>partitionKeyColumns</name></expr></argument>,
                                           <argument><expr><name>clusteringColumns</name></expr></argument>,

                                           <argument><expr><name>whereClause</name></expr></argument>,

                                           <argument><expr><name>clusteringOrder</name></expr></argument>,
                                           <argument><expr><name>attrs</name></expr></argument>,

                                           <argument><expr><name>ifNotExists</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>setPartitionKeyColumns</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>&gt;</argument_list></name></type> <name>columns</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name>partitionKeyColumns</name> <operator>=</operator> <name>columns</name></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>markClusteringColumn</name><parameter_list>(<parameter><decl><type><name>ColumnIdentifier</name></type> <name>column</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>clusteringColumns</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>extendClusteringOrder</name><parameter_list>(<parameter><decl><type><name>ColumnIdentifier</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>ascending</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <call><name><name>clusteringOrder</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><name>ascending</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Duplicate column '%s' in CLUSTERING ORDER BY clause for view '%s'"</literal></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>viewName</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
