<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/db/streaming/CassandraOutgoingFile.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>streaming</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Objects</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>Range</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>Token</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>format</name><operator>.</operator><name>SSTableReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>DataOutputStreamPlus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>AsyncStreamingOutputPlus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>TableId</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>streaming</name><operator>.</operator><name>OutgoingStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>streaming</name><operator>.</operator><name>StreamOperation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>streaming</name><operator>.</operator><name>StreamSession</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Ref</name></name>;</import>

<comment type="block" format="javadoc">/**
 * used to transfer the part(or whole) of a SSTable data file
 */</comment>
<class><specifier>public</specifier> class <name>CassandraOutgoingFile</name> <super_list><implements>implements <super><name>OutgoingStream</name></super></implements></super_list>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Ref</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>ref</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>long</name></type> <name>estimatedKeys</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>SSTableReader</name><operator>.</operator><name>PartitionPositionBounds</name></name></argument>&gt;</argument_list></name></type> <name>sections</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>filename</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>shouldStreamEntireSSTable</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>StreamOperation</name></type> <name>operation</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>CassandraStreamHeader</name></type> <name>header</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>CassandraOutgoingFile</name><parameter_list>(<parameter><decl><type><name>StreamOperation</name></type> <name>operation</name></decl></parameter>, <parameter><decl><type><name><name>Ref</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>ref</name></decl></parameter>,
                                 <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>SSTableReader</name><operator>.</operator><name>PartitionPositionBounds</name></name></argument>&gt;</argument_list></name></type> <name>sections</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>normalizedRanges</name></decl></parameter>,
                                 <parameter><decl><type><name>long</name></type> <name>estimatedKeys</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name><argument_list>(<argument><expr><call><name><name>ref</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Range</name><operator>.</operator><name>assertNormalized</name></name><argument_list>(<argument><expr><name>normalizedRanges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>operation</name></name> <operator>=</operator> <name>operation</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ref</name></name> <operator>=</operator> <name>ref</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>estimatedKeys</name></name> <operator>=</operator> <name>estimatedKeys</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sections</name></name> <operator>=</operator> <name>sections</name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>SSTableReader</name></type> <name>sstable</name> <init>= <expr><call><name><name>ref</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>filename</name></name> <operator>=</operator> <call><name><name>sstable</name><operator>.</operator><name>getFilename</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>shouldStreamEntireSSTable</name></name> <operator>=</operator> <call><name>computeShouldStreamEntireSSTables</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ComponentManifest</name></type> <name>manifest</name> <init>= <expr><call><name><name>ComponentManifest</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>sstable</name><operator>.</operator><name>descriptor</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>header</name></name> <operator>=</operator> <call><name>makeHeader</name><argument_list>(<argument><expr><name>sstable</name></expr></argument>, <argument><expr><name>operation</name></expr></argument>, <argument><expr><name>sections</name></expr></argument>, <argument><expr><name>estimatedKeys</name></expr></argument>, <argument><expr><name>shouldStreamEntireSSTable</name></expr></argument>, <argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>CassandraStreamHeader</name></type> <name>makeHeader</name><parameter_list>(<parameter><decl><type><name>SSTableReader</name></type> <name>sstable</name></decl></parameter>,
                                                    <parameter><decl><type><name>StreamOperation</name></type> <name>operation</name></decl></parameter>,
                                                    <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>SSTableReader</name><operator>.</operator><name>PartitionPositionBounds</name></name></argument>&gt;</argument_list></name></type> <name>sections</name></decl></parameter>,
                                                    <parameter><decl><type><name>long</name></type> <name>estimatedKeys</name></decl></parameter>,
                                                    <parameter><decl><type><name>boolean</name></type> <name>shouldStreamEntireSSTable</name></decl></parameter>,
                                                    <parameter><decl><type><name>ComponentManifest</name></type> <name>manifest</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>keepSSTableLevel</name> <init>= <expr><name>operation</name> <operator>==</operator> <name><name>StreamOperation</name><operator>.</operator><name>BOOTSTRAP</name></name> <operator>||</operator> <name>operation</name> <operator>==</operator> <name><name>StreamOperation</name><operator>.</operator><name>REBUILD</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>CompressionInfo</name></type> <name>compressionInfo</name> <init>= <expr><ternary><condition><expr><name><name>sstable</name><operator>.</operator><name>compression</name></name></expr>
                ?</condition><then> <expr><call><name><name>CompressionInfo</name><operator>.</operator><name>newLazyInstance</name></name><argument_list>(<argument><expr><call><name><name>sstable</name><operator>.</operator><name>getCompressionMetadata</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>sections</name></expr></argument>)</argument_list></call></expr>
                </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name><name>CassandraStreamHeader</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call>
                                    <operator>.</operator><call><name>withSSTableFormat</name><argument_list>(<argument><expr><name><name>sstable</name><operator>.</operator><name>descriptor</name><operator>.</operator><name>formatType</name></name></expr></argument>)</argument_list></call>
                                    <operator>.</operator><call><name>withSSTableVersion</name><argument_list>(<argument><expr><name><name>sstable</name><operator>.</operator><name>descriptor</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call>
                                    <operator>.</operator><call><name>withSSTableLevel</name><argument_list>(<argument><expr><ternary><condition><expr><name>keepSSTableLevel</name></expr> ?</condition><then> <expr><call><name><name>sstable</name><operator>.</operator><name>getSSTableLevel</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call>
                                    <operator>.</operator><call><name>withEstimatedKeys</name><argument_list>(<argument><expr><name>estimatedKeys</name></expr></argument>)</argument_list></call>
                                    <operator>.</operator><call><name>withSections</name><argument_list>(<argument><expr><name>sections</name></expr></argument>)</argument_list></call>
                                    <operator>.</operator><call><name>withCompressionInfo</name><argument_list>(<argument><expr><name>compressionInfo</name></expr></argument>)</argument_list></call>
                                    <operator>.</operator><call><name>withSerializationHeader</name><argument_list>(<argument><expr><call><name><name>sstable</name><operator>.</operator><name>header</name><operator>.</operator><name>toComponent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                    <operator>.</operator><call><name>isEntireSSTable</name><argument_list>(<argument><expr><name>shouldStreamEntireSSTable</name></expr></argument>)</argument_list></call>
                                    <operator>.</operator><call><name>withComponentManifest</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call>
                                    <operator>.</operator><call><name>withFirstKey</name><argument_list>(<argument><expr><name><name>sstable</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call>
                                    <operator>.</operator><call><name>withTableId</name><argument_list>(<argument><expr><call><name><name>sstable</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><name>id</name></expr></argument>)</argument_list></call>
                                    <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>CassandraOutgoingFile</name></type> <name>fromStream</name><parameter_list>(<parameter><decl><type><name>OutgoingStream</name></type> <name>stream</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkArgument</name></name><argument_list>(<argument><expr><name>stream</name> <operator>instanceof</operator> <name>CassandraOutgoingFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>(</operator><name>CassandraOutgoingFile</name><operator>)</operator> <name>stream</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <name><name>Ref</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>getRef</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>ref</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>filename</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>getEstimatedSize</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>header</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>TableId</name></type> <name>getTableId</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>ref</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>metadata</name><argument_list>()</argument_list></call><operator>.</operator><name>id</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getNumFiles</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>shouldStreamEntireSSTable</name></expr> ?</condition><then> <expr><call><name><name>header</name><operator>.</operator><name>componentManifest</name><operator>.</operator><name>components</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>getRepairedAt</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>ref</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRepairedAt</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>UUID</name></type> <name>getPendingRepair</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>ref</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPendingRepair</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>StreamSession</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>DataOutputStreamPlus</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <comment type="line">// FileStreamTask uses AsyncStreamingOutputPlus for streaming.</comment>
        <assert>assert <expr><name>out</name> <operator>instanceof</operator> <name>AsyncStreamingOutputPlus</name> <operator>:</operator> <literal type="string">"Unexpected DataOutputStreamPlus "</literal> <operator>+</operator> <call><name><name>out</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr>;</assert>

        <decl_stmt><decl><type><name>SSTableReader</name></type> <name>sstable</name> <init>= <expr><call><name><name>ref</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>shouldStreamEntireSSTable</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Acquire lock to avoid concurrent sstable component mutation because of stats update or index summary</comment>
            <comment type="line">// redistribution, otherwise file sizes recorded in component manifest will be different from actual</comment>
            <comment type="line">// file sizes. (Note: Windows doesn't support atomic replace and index summary redistribution deletes</comment>
            <comment type="line">// existing file first)</comment>
            <comment type="line">// Recreate the latest manifest and hard links for mutatable components in case they are modified.</comment>
            <try>try <init>(<decl><type><name>ComponentContext</name></type> <name>context</name> <init>= <expr><call><name><name>sstable</name><operator>.</operator><name>runWithLock</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>ignored</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>ComponentContext</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>sstable</name><operator>.</operator><name>descriptor</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>)</init>
            <block>{
                <expr><name>CassandraStreamHeader</name> <name>current</name> <operator>=</operator> <call><name>makeHeader</name><argument_list>(<argument><expr><name>sstable</name></expr></argument>, <argument><expr><name>operation</name></expr></argument>, <argument><expr><name>sections</name></expr></argument>, <argument><expr><name>estimatedKeys</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>manifest</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
                <call><name><name>CassandraStreamHeader</name><operator>.</operator><name>serializer</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></block><empty_stmt>;</empty_stmt></try>
                <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>CassandraEntireSSTableStreamWriter</name></type> <name>writer</name> <init>= <expr><operator>new</operator> <call><name>CassandraEntireSSTableStreamWriter</name><argument_list>(<argument><expr><name>sstable</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>(</operator><name>AsyncStreamingOutputPlus</name><operator>)</operator> <name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></function>
        <if_stmt><else>else
        <block>{<block_content>
            <comment type="line">// legacy streaming is not affected by stats metadata mutation and index sumary redistribution</comment>
            <expr_stmt><expr><call><name><name>CassandraStreamHeader</name><operator>.</operator><name>serializer</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>CassandraStreamWriter</name></type> <name>writer</name> <init>= <expr><ternary><condition><expr><call><name><name>header</name><operator>.</operator><name>isCompressed</name></name><argument_list>()</argument_list></call></expr> ?</condition><then>
                                           <expr><operator>new</operator> <call><name>CassandraCompressedStreamWriter</name><argument_list>(<argument><expr><name>sstable</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr> </then><else>:
                                           <expr><operator>new</operator> <call><name>CassandraStreamWriter</name><argument_list>(<argument><expr><name>sstable</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    }</block></class>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>computeShouldStreamEntireSSTables</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <comment type="line">// don't stream if full sstable transfers are disabled or legacy counter shards are present</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>streamEntireSSTables</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>ref</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSSTableMetadata</name><argument_list>()</argument_list></call><operator>.</operator><name>hasLegacyCounterShards</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><call><name>contained</name><argument_list>(<argument><expr><name>sections</name></expr></argument>, <argument><expr><call><name><name>ref</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>contained</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>SSTableReader</name><operator>.</operator><name>PartitionPositionBounds</name></name></argument>&gt;</argument_list></name></type> <name>sections</name></decl></parameter>, <parameter><decl><type><name>SSTableReader</name></type> <name>sstable</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>sections</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>sections</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

        <comment type="line">// if transfer sections contain entire sstable</comment>
        <decl_stmt><decl><type><name>long</name></type> <name>transferLength</name> <init>= <expr><call><name><name>sections</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>mapToLong</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>p</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>p</name><operator>.</operator><name>upperPosition</name></name> <operator>-</operator> <name><name>p</name><operator>.</operator><name>lowerPosition</name></name></expr></block_content></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>sum</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>transferLength</name> <operator>==</operator> <call><name><name>sstable</name><operator>.</operator><name>uncompressedLength</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>finish</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>ref</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>o</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name>getClass</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>o</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>CassandraOutgoingFile</name></type> <name>that</name> <init>= <expr><operator>(</operator><name>CassandraOutgoingFile</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>estimatedKeys</name> <operator>==</operator> <name><name>that</name><operator>.</operator><name>estimatedKeys</name></name> <operator>&amp;&amp;</operator>
               <call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name><name>that</name><operator>.</operator><name>ref</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
               <call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>sections</name></expr></argument>, <argument><expr><name><name>that</name><operator>.</operator><name>sections</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Objects</name><operator>.</operator><name>hash</name></name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>estimatedKeys</name></expr></argument>, <argument><expr><name>sections</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><literal type="string">"CassandraOutgoingFile{"</literal> <operator>+</operator> <name>filename</name> <operator>+</operator> <literal type="char">'}'</literal></expr>;</return>
    </block_content>}</block></function>
}
</unit>
