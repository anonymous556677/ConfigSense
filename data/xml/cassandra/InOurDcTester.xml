<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/locator/InOurDcTester.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>FBUtilities</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>function</name><operator>.</operator><name>Predicate</name></name>;</import>

<class><specifier>public</specifier> class <name>InOurDcTester</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>ReplicaTester</name></type> <name>replicas</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>EndpointTester</name></type> <name>endpoints</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>dc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>IEndpointSnitch</name></type> <name>snitch</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>InOurDcTester</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dc</name></decl></parameter>, <parameter><decl><type><name>IEndpointSnitch</name></type> <name>snitch</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dc</name></name> <operator>=</operator> <name>dc</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>snitch</name></name> <operator>=</operator> <name>snitch</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><name>boolean</name></type> <name>stale</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>dc</name> <operator>!=</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getLocalDataCenter</name></name><argument_list>()</argument_list></call>
                <operator>||</operator> <name>snitch</name> <operator>!=</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getEndpointSnitch</name></name><argument_list>()</argument_list></call>
                <comment type="line">// this final clause checks if somehow the snitch/localDc have got out of whack;</comment>
                <comment type="line">// presently, this is possible but very unlikely, but this check will also help</comment>
                <comment type="line">// resolve races on these global fields as well</comment>
                <operator>||</operator> <operator>!</operator><call><name><name>dc</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>snitch</name><operator>.</operator><name>getLocalDatacenter</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>ReplicaTester</name> <super_list><extends>extends <super><name>InOurDcTester</name></super></extends> <implements>implements <super><name><name>Predicate</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>&gt;</argument_list></name></super></implements></super_list>
    <block>{
        <constructor><specifier>private</specifier> <name>ReplicaTester</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dc</name></decl></parameter>, <parameter><decl><type><name>IEndpointSnitch</name></type> <name>snitch</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>snitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>boolean</name></type> <name>test</name><parameter_list>(<parameter><decl><type><name>Replica</name></type> <name>replica</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>dc</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>snitch</name><operator>.</operator><name>getDatacenter</name></name><argument_list>(<argument><expr><call><name><name>replica</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>EndpointTester</name> <super_list><extends>extends <super><name>InOurDcTester</name></super></extends> <implements>implements <super><name><name>Predicate</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></super></implements></super_list>
    <block>{
        <constructor><specifier>private</specifier> <name>EndpointTester</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dc</name></decl></parameter>, <parameter><decl><type><name>IEndpointSnitch</name></type> <name>snitch</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>snitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>boolean</name></type> <name>test</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>dc</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>snitch</name><operator>.</operator><name>getDatacenter</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Predicate</name><argument_list type="generic">&lt;<argument><name>Replica</name></argument>&gt;</argument_list></name></type> <name>replicas</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ReplicaTester</name></type> <name>cur</name> <init>= <expr><name>replicas</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>cur</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>cur</name><operator>.</operator><name>stale</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>replicas</name> <operator>=</operator> <name>cur</name> <operator>=</operator> <operator>new</operator> <call><name>ReplicaTester</name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getLocalDataCenter</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getEndpointSnitch</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><name>cur</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Predicate</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>endpoints</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>EndpointTester</name></type> <name>cur</name> <init>= <expr><name>endpoints</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>cur</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>cur</name><operator>.</operator><name>stale</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>endpoints</name> <operator>=</operator> <name>cur</name> <operator>=</operator> <operator>new</operator> <call><name>EndpointTester</name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getLocalDataCenter</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getEndpointSnitch</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><name>cur</name></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>
