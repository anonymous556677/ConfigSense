<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/db/UnfilteredValidation.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>Config</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>rows</name><operator>.</operator><name>Unfiltered</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>CorruptSSTableException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>format</name><operator>.</operator><name>SSTableReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>TableMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>serializers</name><operator>.</operator><name>MarshalException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>NoSpamLogger</name></name>;</import>


<comment type="block" format="javadoc">/**
 * Handles unfiltered validation - if configured, it checks if the provided unfiltered has
 * invalid deletions (if the local deletion time is negative or if the ttl is negative) and
 * then either logs or throws an exception if so.
 */</comment>
<class><specifier>public</specifier> class <name>UnfilteredValidation</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>UnfilteredValidation</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>NoSpamLogger</name></type> <name>nospam1m</name> <init>= <expr><call><name><name>NoSpamLogger</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name>logger</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MINUTES</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>maybeValidateUnfiltered</name><parameter_list>(<parameter><decl><type><name>Unfiltered</name></type> <name>unfiltered</name></decl></parameter>, <parameter><decl><type><name>TableMetadata</name></type> <name>metadata</name></decl></parameter>, <parameter><decl><type><name>DecoratedKey</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>SSTableReader</name></type> <name>sstable</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Config</name><operator>.</operator><name>CorruptedTombstoneStrategy</name></name></type> <name>strat</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getCorruptedTombstoneStrategy</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>strat</name> <operator>!=</operator> <name><name>Config</name><operator>.</operator><name>CorruptedTombstoneStrategy</name><operator>.</operator><name>disabled</name></name> <operator>&amp;&amp;</operator> <name>unfiltered</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>unfiltered</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>hasInvalidDeletions</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <try>try
            <block>{<block_content>
                <expr_stmt><expr><name>hasInvalidDeletions</name> <operator>=</operator> <call><name><name>unfiltered</name><operator>.</operator><name>hasInvalidDeletions</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list> <comment type="line">// make sure no unknown exceptions fail the read/compaction</comment>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>nospam1m</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Could not check if Unfiltered in {} had any invalid deletions"</literal></expr></argument>, <argument><expr><name>sstable</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>

            <if_stmt><if>if <condition>(<expr><name>hasInvalidDeletions</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>content</name></decl>;</decl_stmt>
                <try>try
                <block>{<block_content>
                    <expr_stmt><expr><name>content</name> <operator>=</operator> <call><name><name>unfiltered</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list>
                <block>{<block_content>
                    <expr_stmt><expr><name>content</name> <operator>=</operator> <literal type="string">"Could not get string representation: "</literal> <operator>+</operator> <call><name><name>t</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></catch></try>
                <expr_stmt><expr><call><name>handleInvalid</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>sstable</name></expr></argument>, <argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>handleInvalid</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>metadata</name></decl></parameter>, <parameter><decl><type><name>DecoratedKey</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>SSTableReader</name></type> <name>sstable</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>invalidContent</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Config</name><operator>.</operator><name>CorruptedTombstoneStrategy</name></name></type> <name>strat</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getCorruptedTombstoneStrategy</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>keyString</name></decl>;</decl_stmt>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><name>keyString</name> <operator>=</operator> <call><name><name>metadata</name><operator>.</operator><name>partitionKeyType</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>key</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name>keyString</name> <operator>=</operator> <literal type="string">"[corrupt token="</literal><operator>+</operator><call><name><name>key</name><operator>.</operator><name>getToken</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">"]"</literal></expr>;</expr_stmt>
        </block_content>}</block></catch></try>

        <if_stmt><if>if <condition>(<expr><name>strat</name> <operator>==</operator> <name><name>Config</name><operator>.</operator><name>CorruptedTombstoneStrategy</name><operator>.</operator><name>exception</name></name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>msg</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Key %s in %s.%s is invalid in %s: %s"</literal></expr></argument>,
                                       <argument><expr><name>keyString</name></expr></argument>,
                                       <argument><expr><name><name>metadata</name><operator>.</operator><name>keyspace</name></name></expr></argument>,
                                       <argument><expr><name><name>metadata</name><operator>.</operator><name>name</name></name></expr></argument>,
                                       <argument><expr><name>sstable</name></expr></argument>,
                                       <argument><expr><name>invalidContent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// we mark suspect to make sure this sstable is not included in future compactions - it would just keep</comment>
            <comment type="line">// throwing exceptions</comment>
            <expr_stmt><expr><call><name><name>sstable</name><operator>.</operator><name>markSuspect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>CorruptSSTableException</name><argument_list>(<argument><expr><operator>new</operator> <call><name>MarshalException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>sstable</name><operator>.</operator><name>getFilename</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>strat</name> <operator>==</operator> <name><name>Config</name><operator>.</operator><name>CorruptedTombstoneStrategy</name><operator>.</operator><name>warn</name></name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>msgTemplate</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Key {} in %s.%s is invalid in %s: {}"</literal></expr></argument>,
                                               <argument><expr><name><name>metadata</name><operator>.</operator><name>keyspace</name></name></expr></argument>,
                                               <argument><expr><name><name>metadata</name><operator>.</operator><name>name</name></name></expr></argument>,
                                               <argument><expr><name>sstable</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>nospam1m</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><name>msgTemplate</name></expr></argument>, <argument><expr><name>keyString</name></expr></argument>, <argument><expr><name>invalidContent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>
