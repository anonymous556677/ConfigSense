<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/service/paxos/PaxosState.java"><comment type="block">/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>paxos</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>locks</name><operator>.</operator><name>Lock</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Striped</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>TableMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>tracing</name><operator>.</operator><name>Tracing</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>UUIDGen</name></name>;</import>

<class><specifier>public</specifier> class <name>PaxosState</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Striped</name><argument_list type="generic">&lt;<argument><name>Lock</name></argument>&gt;</argument_list></name></type> <name>LOCKS</name> <init>= <expr><call><name><name>Striped</name><operator>.</operator><name>lazyWeakLock</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getConcurrentWriters</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Commit</name></type> <name>promised</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Commit</name></type> <name>accepted</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Commit</name></type> <name>mostRecentCommit</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>PaxosState</name><parameter_list>(<parameter><decl><type><name>DecoratedKey</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>TableMetadata</name></type> <name>metadata</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><call><name><name>Commit</name><operator>.</operator><name>emptyCommit</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Commit</name><operator>.</operator><name>emptyCommit</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Commit</name><operator>.</operator><name>emptyCommit</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>metadata</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>PaxosState</name><parameter_list>(<parameter><decl><type><name>Commit</name></type> <name>promised</name></decl></parameter>, <parameter><decl><type><name>Commit</name></type> <name>accepted</name></decl></parameter>, <parameter><decl><type><name>Commit</name></type> <name>mostRecentCommit</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><call><name><name>promised</name><operator>.</operator><name>update</name><operator>.</operator><name>partitionKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>accepted</name><operator>.</operator><name>update</name><operator>.</operator><name>partitionKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>accepted</name><operator>.</operator><name>update</name><operator>.</operator><name>partitionKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>mostRecentCommit</name><operator>.</operator><name>update</name><operator>.</operator><name>partitionKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</assert>
        <assert>assert <expr><call><name><name>promised</name><operator>.</operator><name>update</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>id</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>accepted</name><operator>.</operator><name>update</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><name>id</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>accepted</name><operator>.</operator><name>update</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>id</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>mostRecentCommit</name><operator>.</operator><name>update</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</assert>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>promised</name></name> <operator>=</operator> <name>promised</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>accepted</name></name> <operator>=</operator> <name>accepted</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mostRecentCommit</name></name> <operator>=</operator> <name>mostRecentCommit</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>PrepareResponse</name></type> <name>prepare</name><parameter_list>(<parameter><decl><type><name>Commit</name></type> <name>toPrepare</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>start</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{<block_content>
            <decl_stmt><decl><type><name>Lock</name></type> <name>lock</name> <init>= <expr><call><name><name>LOCKS</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>toPrepare</name><operator>.</operator><name>update</name><operator>.</operator><name>partitionKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>lock</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <try>try
            <block>{<block_content>
                <comment type="line">// When preparing, we need to use the same time as "now" (that's the time we use to decide if something</comment>
                <comment type="line">// is expired or not) accross nodes otherwise we may have a window where a Most Recent Commit shows up</comment>
                <comment type="line">// on some replica and not others during a new proposal (in StorageProxy.beginAndRepairPaxos()), and no</comment>
                <comment type="line">// amount of re-submit will fix this (because the node on which the commit has expired will have a</comment>
                <comment type="line">// tombstone that hides any re-submit). See CASSANDRA-12043 for details.</comment>
                <decl_stmt><decl><type><name>int</name></type> <name>nowInSec</name> <init>= <expr><call><name><name>UUIDGen</name><operator>.</operator><name>unixTimestampInSec</name></name><argument_list>(<argument><expr><name><name>toPrepare</name><operator>.</operator><name>ballot</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>PaxosState</name></type> <name>state</name> <init>= <expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>loadPaxosState</name></name><argument_list>(<argument><expr><call><name><name>toPrepare</name><operator>.</operator><name>update</name><operator>.</operator><name>partitionKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>toPrepare</name><operator>.</operator><name>update</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>nowInSec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>toPrepare</name><operator>.</operator><name>isAfter</name></name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>promised</name></name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Promising ballot {}"</literal></expr></argument>, <argument><expr><name><name>toPrepare</name><operator>.</operator><name>ballot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>savePaxosPromise</name></name><argument_list>(<argument><expr><name>toPrepare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><operator>new</operator> <call><name>PrepareResponse</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>accepted</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>mostRecentCommit</name></name></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Promise rejected; {} is not sufficiently newer than {}"</literal></expr></argument>, <argument><expr><name>toPrepare</name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>promised</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="line">// return the currently promised ballot (not the last accepted one) so the coordinator can make sure it uses newer ballot next time (#5667)</comment>
                    <return>return <expr><operator>new</operator> <call><name>PrepareResponse</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>promised</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>mostRecentCommit</name></name></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block>
            <finally>finally
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>lock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></finally></try>
        </block_content>}</block>
        <finally>finally
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><call><name><name>toPrepare</name><operator>.</operator><name>update</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><name>keyspace</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getColumnFamilyStore</name><argument_list>(<argument><expr><call><name><name>toPrepare</name><operator>.</operator><name>update</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><name>id</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>metric</name><operator>.</operator><name>casPrepare</name><operator>.</operator><name>addNano</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Boolean</name></type> <name>propose</name><parameter_list>(<parameter><decl><type><name>Commit</name></type> <name>proposal</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>start</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{<block_content>
            <decl_stmt><decl><type><name>Lock</name></type> <name>lock</name> <init>= <expr><call><name><name>LOCKS</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>proposal</name><operator>.</operator><name>update</name><operator>.</operator><name>partitionKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>lock</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <try>try
            <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>nowInSec</name> <init>= <expr><call><name><name>UUIDGen</name><operator>.</operator><name>unixTimestampInSec</name></name><argument_list>(<argument><expr><name><name>proposal</name><operator>.</operator><name>ballot</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>PaxosState</name></type> <name>state</name> <init>= <expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>loadPaxosState</name></name><argument_list>(<argument><expr><call><name><name>proposal</name><operator>.</operator><name>update</name><operator>.</operator><name>partitionKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>proposal</name><operator>.</operator><name>update</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>nowInSec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>proposal</name><operator>.</operator><name>hasBallot</name></name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>promised</name><operator>.</operator><name>ballot</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>proposal</name><operator>.</operator><name>isAfter</name></name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>promised</name></name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Accepting proposal {}"</literal></expr></argument>, <argument><expr><name>proposal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>savePaxosProposal</name></name><argument_list>(<argument><expr><name>proposal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Rejecting proposal for {} because inProgress is now {}"</literal></expr></argument>, <argument><expr><name>proposal</name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>promised</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block>
            <finally>finally
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>lock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></finally></try>
        </block_content>}</block>
        <finally>finally
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><call><name><name>proposal</name><operator>.</operator><name>update</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><name>keyspace</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getColumnFamilyStore</name><argument_list>(<argument><expr><call><name><name>proposal</name><operator>.</operator><name>update</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><name>id</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>metric</name><operator>.</operator><name>casPropose</name><operator>.</operator><name>addNano</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>commit</name><parameter_list>(<parameter><decl><type><name>Commit</name></type> <name>proposal</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>start</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{<block_content>
            <comment type="line">// There is no guarantee we will see commits in the right order, because messages</comment>
            <comment type="line">// can get delayed, so a proposal can be older than our current most recent ballot/commit.</comment>
            <comment type="line">// Committing it is however always safe due to column timestamps, so always do it. However,</comment>
            <comment type="line">// if our current in-progress ballot is strictly greater than the proposal one, we shouldn't</comment>
            <comment type="line">// erase the in-progress update.</comment>
            <comment type="line">// The table may have been truncated since the proposal was initiated. In that case, we</comment>
            <comment type="line">// don't want to perform the mutation and potentially resurrect truncated data</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>UUIDGen</name><operator>.</operator><name>unixTimestamp</name></name><argument_list>(<argument><expr><name><name>proposal</name><operator>.</operator><name>ballot</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <call><name><name>SystemKeyspace</name><operator>.</operator><name>getTruncatedAt</name></name><argument_list>(<argument><expr><call><name><name>proposal</name><operator>.</operator><name>update</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><name>id</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Committing proposal {}"</literal></expr></argument>, <argument><expr><name>proposal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>Mutation</name></type> <name>mutation</name> <init>= <expr><call><name><name>proposal</name><operator>.</operator><name>makeMutation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><call><name><name>mutation</name><operator>.</operator><name>getKeyspaceName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>apply</name><argument_list>(<argument><expr><name>mutation</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Not committing proposal {} as ballot timestamp predates last truncation time"</literal></expr></argument>, <argument><expr><name>proposal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <comment type="line">// We don't need to lock, we're just blindly updating</comment>
            <expr_stmt><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>savePaxosCommit</name></name><argument_list>(<argument><expr><name>proposal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <finally>finally
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><call><name><name>proposal</name><operator>.</operator><name>update</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><name>keyspace</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getColumnFamilyStore</name><argument_list>(<argument><expr><call><name><name>proposal</name><operator>.</operator><name>update</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><name>id</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>metric</name><operator>.</operator><name>casCommit</name><operator>.</operator><name>addNano</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>
}</block></class>
</unit>
