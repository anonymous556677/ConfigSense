<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/transport/Dispatcher.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>transport</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ConcurrentHashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ConcurrentMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>function</name><operator>.</operator><name>Consumer</name></name>;</import>

<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>channel</name><operator>.</operator><name>Channel</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>channel</name><operator>.</operator><name>EventLoop</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>netty</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>LocalAwareExecutorService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>FrameEncoder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>ClientWarn</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>QueryState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>transport</name><operator>.</operator><name>Flusher</name><operator>.</operator><name>FlushItem</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>transport</name><operator>.</operator><name>messages</name><operator>.</operator><name>ErrorMessage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>transport</name><operator>.</operator><name>messages</name><operator>.</operator><name>EventMessage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>JVMStabilityInspector</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>SharedExecutorPool</name><operator>.</operator><name>SHARED</name></name>;</import>

<class><specifier>public</specifier> class <name>Dispatcher</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>LocalAwareExecutorService</name></type> <name>requestExecutor</name> <init>= <expr><call><name><name>SHARED</name><operator>.</operator><name>newExecutor</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getNativeTransportMaxThreads</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                                                        <argument><expr><name>DatabaseDescriptor</name><operator>::</operator><name>setNativeTransportMaxThreads</name></expr></argument>,
                                                                                        <argument><expr><literal type="string">"transport"</literal></expr></argument>,
                                                                                        <argument><expr><literal type="string">"Native-Transport-Requests"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>ConcurrentMap</name><argument_list type="generic">&lt;<argument><name>EventLoop</name></argument>, <argument><name>Flusher</name></argument>&gt;</argument_list></name></type> <name>flusherLookup</name> <init>= <expr><operator>new</operator> <call><name><name>ConcurrentHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>useLegacyFlusher</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Takes a Channel, Request and the Response produced by processRequest and outputs a FlushItem
     * appropriate for the pipeline, which is specific to the protocol version. V5 and above will
     * produce FlushItem.Framed instances whereas earlier versions require FlushItem.Unframed.
     * The instances of these FlushItem subclasses are specialized to release resources in the
     * right way for the specific pipeline that produced them.
     */</comment>
    <comment type="line">// TODO parameterize with FlushItem subclass</comment>
    <interface>interface <name>FlushItemConverter</name>
    <block>{
        <function_decl><type><name><name>FlushItem</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>toFlushItem</name><parameter_list>(<parameter><decl><type><name>Channel</name></type> <name>channel</name></decl></parameter>, <parameter><decl><type><name><name>Message</name><operator>.</operator><name>Request</name></name></type> <name>request</name></decl></parameter>, <parameter><decl><type><name><name>Message</name><operator>.</operator><name>Response</name></name></type> <name>response</name></decl></parameter>)</parameter_list>;</function_decl>
    }</block></interface>

    <constructor><specifier>public</specifier> <name>Dispatcher</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>useLegacyFlusher</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>useLegacyFlusher</name></name> <operator>=</operator> <name>useLegacyFlusher</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>dispatch</name><parameter_list>(<parameter><decl><type><name>Channel</name></type> <name>channel</name></decl></parameter>, <parameter><decl><type><name><name>Message</name><operator>.</operator><name>Request</name></name></type> <name>request</name></decl></parameter>, <parameter><decl><type><name>FlushItemConverter</name></type> <name>forFlusher</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>requestExecutor</name><operator>.</operator><name>submit</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>processRequest</name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>request</name></expr></argument>, <argument><expr><name>forFlusher</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Note: this method may be executed on the netty event loop, during initial protocol negotiation
     */</comment>
    <function><type><specifier>static</specifier> <name><name>Message</name><operator>.</operator><name>Response</name></name></type> <name>processRequest</name><parameter_list>(<parameter><decl><type><name>ServerConnection</name></type> <name>connection</name></decl></parameter>, <parameter><decl><type><name><name>Message</name><operator>.</operator><name>Request</name></name></type> <name>request</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>queryStartNanoTime</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>connection</name><operator>.</operator><name>getVersion</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isGreaterOrEqualTo</name><argument_list>(<argument><expr><name><name>ProtocolVersion</name><operator>.</operator><name>V4</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>ClientWarn</name><operator>.</operator><name>instance</name><operator>.</operator><name>captureWarnings</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>QueryState</name></type> <name>qstate</name> <init>= <expr><call><name><name>connection</name><operator>.</operator><name>validateNewMessage</name></name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><call><name><name>connection</name><operator>.</operator><name>getVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>Message</name><operator>.</operator><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Received: {}, v={}"</literal></expr></argument>, <argument><expr><name>request</name></expr></argument>, <argument><expr><call><name><name>connection</name><operator>.</operator><name>getVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>connection</name><operator>.</operator><name>requests</name><operator>.</operator><name>inc</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Message</name><operator>.</operator><name>Response</name></name></type> <name>response</name> <init>= <expr><call><name><name>request</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>qstate</name></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>response</name><operator>.</operator><name>setStreamId</name></name><argument_list>(<argument><expr><call><name><name>request</name><operator>.</operator><name>getStreamId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>response</name><operator>.</operator><name>setWarnings</name></name><argument_list>(<argument><expr><call><name><name>ClientWarn</name><operator>.</operator><name>instance</name><operator>.</operator><name>getWarnings</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>response</name><operator>.</operator><name>attach</name></name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>connection</name><operator>.</operator><name>applyStateTransition</name></name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>response</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>response</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Note: this method is not expected to execute on the netty event loop.
     */</comment>
    <function><type><name>void</name></type> <name>processRequest</name><parameter_list>(<parameter><decl><type><name>Channel</name></type> <name>channel</name></decl></parameter>, <parameter><decl><type><name><name>Message</name><operator>.</operator><name>Request</name></name></type> <name>request</name></decl></parameter>, <parameter><decl><type><name>FlushItemConverter</name></type> <name>forFlusher</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Message</name><operator>.</operator><name>Response</name></name></type> <name>response</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>ServerConnection</name></type> <name>connection</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>FlushItem</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>toFlush</name></decl>;</decl_stmt>
        <try>try
        <block>{<block_content>
            <assert>assert <expr><call><name><name>request</name><operator>.</operator><name>connection</name></name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>ServerConnection</name></expr>;</assert>
            <expr_stmt><expr><name>connection</name> <operator>=</operator> <operator>(</operator><name>ServerConnection</name><operator>)</operator> <call><name><name>request</name><operator>.</operator><name>connection</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>response</name> <operator>=</operator> <call><name>processRequest</name><argument_list>(<argument><expr><name>connection</name></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>toFlush</name> <operator>=</operator> <call><name><name>forFlusher</name><operator>.</operator><name>toFlushItem</name></name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>request</name></expr></argument>, <argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Message</name><operator>.</operator><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Responding: {}, v={}"</literal></expr></argument>, <argument><expr><name>response</name></expr></argument>, <argument><expr><call><name><name>connection</name><operator>.</operator><name>getVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>JVMStabilityInspector</name><operator>.</operator><name>inspectThrowable</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>ExceptionHandlers</name><operator>.</operator><name>UnexpectedChannelExceptionHandler</name></name></type> <name>handler</name> <init>= <expr><operator>new</operator> <call><name><name>ExceptionHandlers</name><operator>.</operator><name>UnexpectedChannelExceptionHandler</name></name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ErrorMessage</name></type> <name>error</name> <init>= <expr><call><name><name>ErrorMessage</name><operator>.</operator><name>fromException</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>error</name><operator>.</operator><name>setStreamId</name></name><argument_list>(<argument><expr><call><name><name>request</name><operator>.</operator><name>getStreamId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>toFlush</name> <operator>=</operator> <call><name><name>forFlusher</name><operator>.</operator><name>toFlushItem</name></name><argument_list>(<argument><expr><name>channel</name></expr></argument>, <argument><expr><name>request</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch>
        <finally>finally
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>ClientWarn</name><operator>.</operator><name>instance</name><operator>.</operator><name>resetWarnings</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
        <expr_stmt><expr><call><name>flush</name><argument_list>(<argument><expr><name>toFlush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>flush</name><parameter_list>(<parameter><decl><type><name><name>FlushItem</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>item</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>EventLoop</name></type> <name>loop</name> <init>= <expr><call><name><name>item</name><operator>.</operator><name>channel</name><operator>.</operator><name>eventLoop</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Flusher</name></type> <name>flusher</name> <init>= <expr><call><name><name>flusherLookup</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>loop</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>flusher</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>Flusher</name></type> <name>created</name> <init>= <expr><ternary><condition><expr><name>useLegacyFlusher</name></expr> ?</condition><then> <expr><call><name><name>Flusher</name><operator>.</operator><name>legacy</name></name><argument_list>(<argument><expr><name>loop</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>Flusher</name><operator>.</operator><name>immediate</name></name><argument_list>(<argument><expr><name>loop</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Flusher</name></type> <name>alt</name> <init>= <expr><call><name><name>flusherLookup</name><operator>.</operator><name>putIfAbsent</name></name><argument_list>(<argument><expr><name>loop</name></expr></argument>, <argument><expr><name>flusher</name> <operator>=</operator> <name>created</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>alt</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>flusher</name> <operator>=</operator> <name>alt</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>flusher</name><operator>.</operator><name>enqueue</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>flusher</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>shutdown</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>requestExecutor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>requestExecutor</name><operator>.</operator><name>shutdown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>


    <comment type="block" format="javadoc">/**
     * Dispatcher for EventMessages. In {@link Server.ConnectionTracker#send(Event)}, the strategy
     * for delivering events to registered clients is dependent on protocol version and the configuration
     * of the pipeline. For v5 and newer connections, the event message is encoded into an Envelope,
     * wrapped in a FlushItem and then delivered via the pipeline's flusher, in a similar way to
     * a Response returned from {@link #processRequest(Channel, Message.Request, FlushItemConverter)}.
     * It's worth noting that events are not generally fired as a direct response to a client request,
     * so this flush item has a null request attribute. The dispatcher itself is created when the
     * pipeline is first configured during protocol negotiation and is attached to the channel for
     * later retrieval.
     *
     * Pre-v5 connections simply write the EventMessage directly to the pipeline.
     */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name><name>AttributeKey</name><argument_list type="generic">&lt;<argument><name><name>Consumer</name><argument_list type="generic">&lt;<argument><name>EventMessage</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>EVENT_DISPATCHER</name> <init>= <expr><call><name><name>AttributeKey</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><literal type="string">"EVTDISP"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <function><type><name><name>Consumer</name><argument_list type="generic">&lt;<argument><name>EventMessage</name></argument>&gt;</argument_list></name></type> <name>eventDispatcher</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Channel</name></type> <name>channel</name></decl></parameter>,
                                           <parameter><decl><type><specifier>final</specifier> <name>ProtocolVersion</name></type> <name>version</name></decl></parameter>,
                                           <parameter><decl><type><specifier>final</specifier> <name><name>FrameEncoder</name><operator>.</operator><name>PayloadAllocator</name></name></type> <name>allocator</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><lambda><parameter_list type="pseudo"><parameter><decl><name>eventMessage</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>flush</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>FlushItem</name><operator>.</operator><name>Framed</name></name><argument_list>(<argument><expr><name>channel</name></expr></argument>,
                                                          <argument><expr><call><name><name>eventMessage</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></argument>,
                                                          <argument><expr><literal type="null">null</literal></expr></argument>,
                                                          <argument><expr><name>allocator</name></expr></argument>,
                                                          <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>f</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>f</name><operator>.</operator><name>response</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
