<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/config/EncryptionOptions.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Objects</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableList</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>IEndpointSnitch</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>InetAddressAndPort</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>security</name><operator>.</operator><name>SSLFactory</name></name>;</import>

<class><specifier>public</specifier> class <name>EncryptionOptions</name>
<block>{
    <decl_stmt><decl><type><name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>EncryptionOptions</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <enum><specifier>public</specifier> enum <name>TlsEncryptionPolicy</name>
    <block>{
        <decl><name>UNENCRYPTED</name><argument_list>(<argument><expr><literal type="string">"unencrypted"</literal></expr></argument>)</argument_list></decl>, <decl><name>OPTIONAL</name><argument_list>(<argument><expr><literal type="string">"optionally encrypted"</literal></expr></argument>)</argument_list></decl>, <decl><name>ENCRYPTED</name><argument_list>(<argument><expr><literal type="string">"encrypted"</literal></expr></argument>)</argument_list></decl>;

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>description</name></decl>;</decl_stmt>

        <constructor><name>TlsEncryptionPolicy</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>description</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>description</name></name> <operator>=</operator> <name>description</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>String</name></type> <name>description</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>description</name></expr>;</return>
        </block_content>}</block></function>
    }</block></enum>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>keystore</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>keystore_password</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>truststore</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>truststore_password</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>cipher_suites</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>protocol</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>accepted_protocols</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>algorithm</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>store_type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>require_client_auth</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>require_endpoint_verification</name></decl>;</decl_stmt>
    <comment type="line">// ServerEncryptionOptions does not use the enabled flag at all instead using the existing</comment>
    <comment type="line">// internode_encryption option. So we force this private and expose through isEnabled</comment>
    <comment type="line">// so users of ServerEncryptionOptions can't accidentally use this when they should use isEnabled</comment>
    <comment type="line">// Long term we need to refactor ClientEncryptionOptions and ServerEncyrptionOptions to be separate</comment>
    <comment type="line">// classes so we can choose appropriate configuration for each.</comment>
    <comment type="line">// See CASSANDRA-15262 and CASSANDRA-15146</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Boolean</name></type> <name>enabled</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Boolean</name></type> <name>optional</name></decl>;</decl_stmt>

    <comment type="line">// Calculated by calling applyConfig() after populating/parsing</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Boolean</name></type> <name>isEnabled</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Boolean</name></type> <name>isOptional</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>EncryptionOptions</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>keystore</name> <operator>=</operator> <literal type="string">"conf/.keystore"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>keystore_password</name> <operator>=</operator> <literal type="string">"cassandra"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>truststore</name> <operator>=</operator> <literal type="string">"conf/.truststore"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>truststore_password</name> <operator>=</operator> <literal type="string">"cassandra"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>cipher_suites</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>protocol</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>accepted_protocols</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>algorithm</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>store_type</name> <operator>=</operator> <literal type="string">"JKS"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>require_client_auth</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>require_endpoint_verification</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>enabled</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>optional</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>EncryptionOptions</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keystore</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>keystore_password</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>truststore</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>truststore_password</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>cipher_suites</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>protocol</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>accepted_protocols</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>algorithm</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>store_type</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>require_client_auth</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>require_endpoint_verification</name></decl></parameter>, <parameter><decl><type><name>Boolean</name></type> <name>enabled</name></decl></parameter>, <parameter><decl><type><name>Boolean</name></type> <name>optional</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>keystore</name></name> <operator>=</operator> <name>keystore</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>keystore_password</name></name> <operator>=</operator> <name>keystore_password</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>truststore</name></name> <operator>=</operator> <name>truststore</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>truststore_password</name></name> <operator>=</operator> <name>truststore_password</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cipher_suites</name></name> <operator>=</operator> <name>cipher_suites</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>protocol</name></name> <operator>=</operator> <name>protocol</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>accepted_protocols</name></name> <operator>=</operator> <name>accepted_protocols</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>algorithm</name></name> <operator>=</operator> <name>algorithm</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>store_type</name></name> <operator>=</operator> <name>store_type</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>require_client_auth</name></name> <operator>=</operator> <name>require_client_auth</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>require_endpoint_verification</name></name> <operator>=</operator> <name>require_endpoint_verification</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>enabled</name></name> <operator>=</operator> <name>enabled</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>optional</name></name> <operator>=</operator> <name>optional</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>EncryptionOptions</name><parameter_list>(<parameter><decl><type><name>EncryptionOptions</name></type> <name>options</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>keystore</name> <operator>=</operator> <name><name>options</name><operator>.</operator><name>keystore</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>keystore_password</name> <operator>=</operator> <name><name>options</name><operator>.</operator><name>keystore_password</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>truststore</name> <operator>=</operator> <name><name>options</name><operator>.</operator><name>truststore</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>truststore_password</name> <operator>=</operator> <name><name>options</name><operator>.</operator><name>truststore_password</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cipher_suites</name> <operator>=</operator> <name><name>options</name><operator>.</operator><name>cipher_suites</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>protocol</name> <operator>=</operator> <name><name>options</name><operator>.</operator><name>protocol</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>accepted_protocols</name> <operator>=</operator> <name><name>options</name><operator>.</operator><name>accepted_protocols</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>algorithm</name> <operator>=</operator> <name><name>options</name><operator>.</operator><name>algorithm</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>store_type</name> <operator>=</operator> <name><name>options</name><operator>.</operator><name>store_type</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>require_client_auth</name> <operator>=</operator> <name><name>options</name><operator>.</operator><name>require_client_auth</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>require_endpoint_verification</name> <operator>=</operator> <name><name>options</name><operator>.</operator><name>require_endpoint_verification</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>enabled</name> <operator>=</operator> <name><name>options</name><operator>.</operator><name>enabled</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>optional</name></name> <operator>=</operator> <name><name>options</name><operator>.</operator><name>optional</name></name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block">/* Computes enabled and optional before use. Because the configuration can be loaded
     * through pluggable mechanisms this is the only safe way to make sure that
     * enabled and optional are set correctly.
     */</comment>
    <function><type><specifier>public</specifier> <name>EncryptionOptions</name></type> <name>applyConfig</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ensureConfigNotApplied</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>isEnabled</name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>enabled</name></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>enabled</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>optional</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>isOptional</name> <operator>=</operator> <name>optional</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <comment type="line">// If someone is asking for an _insecure_ connection and not explicitly telling us to refuse</comment>
        <comment type="line">// encrypted connections AND they have a keystore file, we assume they would like to be able</comment>
        <comment type="line">// to transition to encrypted connections in the future.</comment>
        <if type="elseif">else if <condition>(<expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>exists</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>isOptional</name> <operator>=</operator> <operator>!</operator><name>isEnabled</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="line">// Otherwise if there's no keystore, not possible to establish an optional secure connection</comment>
            <expr_stmt><expr><name>isOptional</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>ensureConfigApplied</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>isEnabled</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>isOptional</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"EncryptionOptions.applyConfig must be called first"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>ensureConfigNotApplied</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>isEnabled</name> <operator>!=</operator> <literal type="null">null</literal> <operator>||</operator> <name>isOptional</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"EncryptionOptions cannot be changed after configuration applied"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Indicates if the channel should be encrypted. Client and Server uses different logic to determine this
     *
     * @return if the channel should be encrypted
     */</comment>
    <function><type><specifier>public</specifier> <name>Boolean</name></type> <name>isEnabled</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>ensureConfigApplied</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>isEnabled</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets if encryption should be enabled for this channel. Note that this should only be called by
     * the configuration parser or tests. It is public only for that purpose, mutating enabled state
     * is probably a bad idea.
     * @param enabled value to set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setEnabled</name><parameter_list>(<parameter><decl><type><name>Boolean</name></type> <name>enabled</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>ensureConfigNotApplied</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>enabled</name></name> <operator>=</operator> <name>enabled</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Indicates if the channel may be encrypted (but is not required to be).
     * Explicitly providing a value in the configuration take precedent.
     * If no optional value is set and !isEnabled(), then optional connections are allowed
     * if a keystore exists. Without it, it would be impossible to establish the connections.
     *
     * Return type is Boolean even though it can never be null so that snakeyaml can find it
     * @return if the channel may be encrypted
     */</comment>
    <function><type><specifier>public</specifier> <name>Boolean</name></type> <name>isOptional</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ensureConfigApplied</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>isOptional</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets if encryption should be optional for this channel. Note that this should only be called by
     * the configuration parser or tests. It is public only for that purpose, mutating enabled state
     * is probably a bad idea.
     * @param optional value to set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOptional</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>optional</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>ensureConfigNotApplied</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>optional</name></name> <operator>=</operator> <name>optional</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets accepted TLS protocol for this channel. Note that this should only be called by
     * the configuration parser or tests. It is public only for that purpose, mutating protocol state
     * is probably a bad idea.
     * @param protocol value to set
     */</comment>
    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>setProtocol</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>protocol</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>protocol</name></name> <operator>=</operator> <name>protocol</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets accepted TLS protocols for this channel. Note that this should only be called by
     * the configuration parser or tests. It is public only for that purpose, mutating protocol state
     * is probably a bad idea. The function casing is required for snakeyaml to find this setter for the protected field.
     * @param accepted_protocols value to set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setaccepted_protocols</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>accepted_protocols</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>accepted_protocols</name></name> <operator>=</operator> <ternary><condition><expr><name>accepted_protocols</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>ImmutableList</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><name>accepted_protocols</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block">/* This list is substituted in configurations that have explicitly specified the original "TLS" default,
     * by extracting it from the default "TLS" SSL Context instance
     */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>TLS_PROTOCOL_SUBSTITUTION</name> <init>= <expr><call><name><name>SSLFactory</name><operator>.</operator><name>tlsInstanceProtocolSubstitution</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Combine the pre-4.0 protocol field with the accepted_protocols list, substituting a list of
     * explicit protocols for the previous catchall default of "TLS"
     * @return array of protocol names suitable for passing to SslContextBuilder.protocols, or null if the default
     */</comment>
    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>acceptedProtocols</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>accepted_protocols</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>protocol</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            </block_content>}</block></if>
            <comment type="line">// TLS is accepted by SSLContext.getInstance as a shorthand for give me an engine that</comment>
            <comment type="line">// can speak some of the TLS protocols.  It is not supported by SSLEngine.setAcceptedProtocols</comment>
            <comment type="line">// so substitute if the user hasn't provided an accepted protocol configuration</comment>
            <if type="elseif">else if <condition>(<expr><call><name><name>protocol</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><literal type="string">"TLS"</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <return>return <expr><name>TLS_PROTOCOL_SUBSTITUTION</name></expr>;</return>
            </block_content>}</block></if>
            <else>else <comment type="line">// the user was trying to limit to a single specific protocol, so try that</comment>
            <block>{<block_content>
                <return>return <expr><call><name><name>ImmutableList</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>protocol</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>protocol</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>protocol</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><literal type="string">"TLS"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
            <call><name><name>accepted_protocols</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>noneMatch</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>ap</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>ap</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>protocol</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{
            <comment type="line">// If the user provided a non-generic default protocol, append it to accepted_protocols - they wanted</comment>
            <comment type="line">// it after all.</comment>
            <return>return <expr><name><name>ImmutableList</name><operator>.</operator></name>&lt;<name>String</name><operator>&gt;</operator><call><name>builder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>addAll</name><argument_list>(<argument><expr><name>accepted_protocols</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>protocol</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></if>
        <else>else
        <block>{<block_content>
            <return>return <expr><name>accepted_protocols</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>String</name><index>[]</index></name></type> <name>acceptedProtocolsArray</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>ap</name> <init>= <expr><call><name>acceptedProtocols</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name>ap</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then>  <expr><operator>new</operator> <name><name>String</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><call><name><name>ap</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>String</name><index>[]</index></name></type> <name>cipherSuitesArray</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>cipher_suites</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><operator>new</operator> <name><name>String</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><call><name><name>cipher_suites</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>TlsEncryptionPolicy</name></type> <name>tlsEncryptionPolicy</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isOptional</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><name><name>TlsEncryptionPolicy</name><operator>.</operator><name>OPTIONAL</name></name></expr>;</return>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>isEnabled</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><name><name>TlsEncryptionPolicy</name><operator>.</operator><name>ENCRYPTED</name></name></expr>;</return>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <return>return <expr><name><name>TlsEncryptionPolicy</name><operator>.</operator><name>UNENCRYPTED</name></name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>EncryptionOptions</name></type> <name>withKeyStore</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keystore</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>EncryptionOptions</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><name>keystore_password</name></expr></argument>, <argument><expr><name>truststore</name></expr></argument>, <argument><expr><name>truststore_password</name></expr></argument>, <argument><expr><name>cipher_suites</name></expr></argument>,
                                           <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>accepted_protocols</name></expr></argument>, <argument><expr><name>algorithm</name></expr></argument>, <argument><expr><name>store_type</name></expr></argument>, <argument><expr><name>require_client_auth</name></expr></argument>, <argument><expr><name>require_endpoint_verification</name></expr></argument>,
                                           <argument><expr><name>enabled</name></expr></argument>, <argument><expr><name>optional</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>applyConfig</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>EncryptionOptions</name></type> <name>withKeyStorePassword</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keystore_password</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>EncryptionOptions</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><name>keystore_password</name></expr></argument>, <argument><expr><name>truststore</name></expr></argument>, <argument><expr><name>truststore_password</name></expr></argument>, <argument><expr><name>cipher_suites</name></expr></argument>,
                                           <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>accepted_protocols</name></expr></argument>, <argument><expr><name>algorithm</name></expr></argument>, <argument><expr><name>store_type</name></expr></argument>, <argument><expr><name>require_client_auth</name></expr></argument>, <argument><expr><name>require_endpoint_verification</name></expr></argument>,
                                           <argument><expr><name>enabled</name></expr></argument>, <argument><expr><name>optional</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>applyConfig</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>EncryptionOptions</name></type> <name>withTrustStore</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>truststore</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>EncryptionOptions</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><name>keystore_password</name></expr></argument>, <argument><expr><name>truststore</name></expr></argument>, <argument><expr><name>truststore_password</name></expr></argument>, <argument><expr><name>cipher_suites</name></expr></argument>,
                                           <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>accepted_protocols</name></expr></argument>, <argument><expr><name>algorithm</name></expr></argument>, <argument><expr><name>store_type</name></expr></argument>, <argument><expr><name>require_client_auth</name></expr></argument>, <argument><expr><name>require_endpoint_verification</name></expr></argument>,
                                           <argument><expr><name>enabled</name></expr></argument>, <argument><expr><name>optional</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>applyConfig</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>EncryptionOptions</name></type> <name>withTrustStorePassword</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>truststore_password</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>EncryptionOptions</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><name>keystore_password</name></expr></argument>, <argument><expr><name>truststore</name></expr></argument>, <argument><expr><name>truststore_password</name></expr></argument>, <argument><expr><name>cipher_suites</name></expr></argument>,
                                           <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>accepted_protocols</name></expr></argument>, <argument><expr><name>algorithm</name></expr></argument>, <argument><expr><name>store_type</name></expr></argument>, <argument><expr><name>require_client_auth</name></expr></argument>, <argument><expr><name>require_endpoint_verification</name></expr></argument>,
                                           <argument><expr><name>enabled</name></expr></argument>, <argument><expr><name>optional</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>applyConfig</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>EncryptionOptions</name></type> <name>withCipherSuites</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>cipher_suites</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>EncryptionOptions</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><name>keystore_password</name></expr></argument>, <argument><expr><name>truststore</name></expr></argument>, <argument><expr><name>truststore_password</name></expr></argument>, <argument><expr><name>cipher_suites</name></expr></argument>,
                                           <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>accepted_protocols</name></expr></argument>, <argument><expr><name>algorithm</name></expr></argument>, <argument><expr><name>store_type</name></expr></argument>, <argument><expr><name>require_client_auth</name></expr></argument>, <argument><expr><name>require_endpoint_verification</name></expr></argument>,
                                           <argument><expr><name>enabled</name></expr></argument>, <argument><expr><name>optional</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>applyConfig</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>EncryptionOptions</name></type> <name>withCipherSuites</name><parameter_list>(<parameter><decl><type><name>String</name> <modifier>...</modifier></type> <name>cipher_suites</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>EncryptionOptions</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><name>keystore_password</name></expr></argument>, <argument><expr><name>truststore</name></expr></argument>, <argument><expr><name>truststore_password</name></expr></argument>, <argument><expr><call><name><name>ImmutableList</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><name>cipher_suites</name></expr></argument>)</argument_list></call></expr></argument>,
                                           <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>accepted_protocols</name></expr></argument>, <argument><expr><name>algorithm</name></expr></argument>, <argument><expr><name>store_type</name></expr></argument>, <argument><expr><name>require_client_auth</name></expr></argument>, <argument><expr><name>require_endpoint_verification</name></expr></argument>,
                                           <argument><expr><name>enabled</name></expr></argument>, <argument><expr><name>optional</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>applyConfig</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>EncryptionOptions</name></type> <name>withProtocol</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>protocol</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>EncryptionOptions</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><name>keystore_password</name></expr></argument>, <argument><expr><name>truststore</name></expr></argument>, <argument><expr><name>truststore_password</name></expr></argument>, <argument><expr><name>cipher_suites</name></expr></argument>,
                                           <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>accepted_protocols</name></expr></argument>, <argument><expr><name>algorithm</name></expr></argument>, <argument><expr><name>store_type</name></expr></argument>, <argument><expr><name>require_client_auth</name></expr></argument>, <argument><expr><name>require_endpoint_verification</name></expr></argument>,
                                           <argument><expr><name>enabled</name></expr></argument>, <argument><expr><name>optional</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>applyConfig</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>


    <function><type><specifier>public</specifier> <name>EncryptionOptions</name></type> <name>withAcceptedProtocols</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>accepted_protocols</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>EncryptionOptions</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><name>keystore_password</name></expr></argument>, <argument><expr><name>truststore</name></expr></argument>, <argument><expr><name>truststore_password</name></expr></argument>, <argument><expr><name>cipher_suites</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>,
                                     <argument><expr><ternary><condition><expr><name>accepted_protocols</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>ImmutableList</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><name>accepted_protocols</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
                                     <argument><expr><name>algorithm</name></expr></argument>, <argument><expr><name>store_type</name></expr></argument>, <argument><expr><name>require_client_auth</name></expr></argument>, <argument><expr><name>require_endpoint_verification</name></expr></argument>, <argument><expr><name>enabled</name></expr></argument>, <argument><expr><name>optional</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>applyConfig</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>


    <function><type><specifier>public</specifier> <name>EncryptionOptions</name></type> <name>withAlgorithm</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>algorithm</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>EncryptionOptions</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><name>keystore_password</name></expr></argument>, <argument><expr><name>truststore</name></expr></argument>, <argument><expr><name>truststore_password</name></expr></argument>, <argument><expr><name>cipher_suites</name></expr></argument>,
                                           <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>accepted_protocols</name></expr></argument>, <argument><expr><name>algorithm</name></expr></argument>, <argument><expr><name>store_type</name></expr></argument>, <argument><expr><name>require_client_auth</name></expr></argument>, <argument><expr><name>require_endpoint_verification</name></expr></argument>,
                                           <argument><expr><name>enabled</name></expr></argument>, <argument><expr><name>optional</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>applyConfig</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>EncryptionOptions</name></type> <name>withStoreType</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>store_type</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>EncryptionOptions</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><name>keystore_password</name></expr></argument>, <argument><expr><name>truststore</name></expr></argument>, <argument><expr><name>truststore_password</name></expr></argument>, <argument><expr><name>cipher_suites</name></expr></argument>,
                                           <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>accepted_protocols</name></expr></argument>, <argument><expr><name>algorithm</name></expr></argument>, <argument><expr><name>store_type</name></expr></argument>, <argument><expr><name>require_client_auth</name></expr></argument>, <argument><expr><name>require_endpoint_verification</name></expr></argument>,
                                           <argument><expr><name>enabled</name></expr></argument>, <argument><expr><name>optional</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>applyConfig</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>EncryptionOptions</name></type> <name>withRequireClientAuth</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>require_client_auth</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>EncryptionOptions</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><name>keystore_password</name></expr></argument>, <argument><expr><name>truststore</name></expr></argument>, <argument><expr><name>truststore_password</name></expr></argument>, <argument><expr><name>cipher_suites</name></expr></argument>,
                                           <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>accepted_protocols</name></expr></argument>, <argument><expr><name>algorithm</name></expr></argument>, <argument><expr><name>store_type</name></expr></argument>, <argument><expr><name>require_client_auth</name></expr></argument>, <argument><expr><name>require_endpoint_verification</name></expr></argument>,
                                           <argument><expr><name>enabled</name></expr></argument>, <argument><expr><name>optional</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>applyConfig</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>EncryptionOptions</name></type> <name>withRequireEndpointVerification</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>require_endpoint_verification</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>EncryptionOptions</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><name>keystore_password</name></expr></argument>, <argument><expr><name>truststore</name></expr></argument>, <argument><expr><name>truststore_password</name></expr></argument>, <argument><expr><name>cipher_suites</name></expr></argument>,
                                           <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>accepted_protocols</name></expr></argument>, <argument><expr><name>algorithm</name></expr></argument>, <argument><expr><name>store_type</name></expr></argument>, <argument><expr><name>require_client_auth</name></expr></argument>, <argument><expr><name>require_endpoint_verification</name></expr></argument>,
                                           <argument><expr><name>enabled</name></expr></argument>, <argument><expr><name>optional</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>applyConfig</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>EncryptionOptions</name></type> <name>withEnabled</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>enabled</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>EncryptionOptions</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><name>keystore_password</name></expr></argument>, <argument><expr><name>truststore</name></expr></argument>, <argument><expr><name>truststore_password</name></expr></argument>, <argument><expr><name>cipher_suites</name></expr></argument>,
                                           <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>accepted_protocols</name></expr></argument>, <argument><expr><name>algorithm</name></expr></argument>, <argument><expr><name>store_type</name></expr></argument>, <argument><expr><name>require_client_auth</name></expr></argument>, <argument><expr><name>require_endpoint_verification</name></expr></argument>,
                                           <argument><expr><name>enabled</name></expr></argument>, <argument><expr><name>optional</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>applyConfig</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>EncryptionOptions</name></type> <name>withOptional</name><parameter_list>(<parameter><decl><type><name>Boolean</name></type> <name>optional</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>EncryptionOptions</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><name>keystore_password</name></expr></argument>, <argument><expr><name>truststore</name></expr></argument>, <argument><expr><name>truststore_password</name></expr></argument>, <argument><expr><name>cipher_suites</name></expr></argument>,
                                           <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>accepted_protocols</name></expr></argument>, <argument><expr><name>algorithm</name></expr></argument>, <argument><expr><name>store_type</name></expr></argument>, <argument><expr><name>require_client_auth</name></expr></argument>, <argument><expr><name>require_endpoint_verification</name></expr></argument>,
                                           <argument><expr><name>enabled</name></expr></argument>, <argument><expr><name>optional</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>applyConfig</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * The method is being mainly used to cache SslContexts therefore, we only consider
     * fields that would make a difference when the TrustStore or KeyStore files are updated
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <name>this</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name>getClass</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>o</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>EncryptionOptions</name></type> <name>opt</name> <init>= <expr><operator>(</operator><name>EncryptionOptions</name><operator>)</operator><name>o</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>enabled</name> <operator>==</operator> <name><name>opt</name><operator>.</operator><name>enabled</name></name> <operator>&amp;&amp;</operator>
               <name>optional</name> <operator>==</operator> <name><name>opt</name><operator>.</operator><name>optional</name></name> <operator>&amp;&amp;</operator>
               <name>require_client_auth</name> <operator>==</operator> <name><name>opt</name><operator>.</operator><name>require_client_auth</name></name> <operator>&amp;&amp;</operator>
               <name>require_endpoint_verification</name> <operator>==</operator> <name><name>opt</name><operator>.</operator><name>require_endpoint_verification</name></name> <operator>&amp;&amp;</operator>
               <call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>keystore</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
               <call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>keystore_password</name></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>keystore_password</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
               <call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>truststore</name></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>truststore</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
               <call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>truststore_password</name></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>truststore_password</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
               <call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>protocol</name></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>protocol</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
               <call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>accepted_protocols</name></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>accepted_protocols</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
               <call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>algorithm</name></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>algorithm</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
               <call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>store_type</name></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>store_type</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
               <call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>cipher_suites</name></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>cipher_suites</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * The method is being mainly used to cache SslContexts therefore, we only consider
     * fields that would make a difference when the TrustStore or KeyStore files are updated
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> <operator>+=</operator> <literal type="number">31</literal> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>keystore</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>keystore</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>+=</operator> <literal type="number">31</literal> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>keystore_password</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>keystore_password</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>+=</operator> <literal type="number">31</literal> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>truststore</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>truststore</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>+=</operator> <literal type="number">31</literal> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>truststore_password</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>truststore_password</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>+=</operator> <literal type="number">31</literal> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>protocol</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>protocol</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>+=</operator> <literal type="number">31</literal> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>accepted_protocols</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>accepted_protocols</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>+=</operator> <literal type="number">31</literal> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>algorithm</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>algorithm</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>+=</operator> <literal type="number">31</literal> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>store_type</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>store_type</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>+=</operator> <literal type="number">31</literal> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>enabled</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>Boolean</name><operator>.</operator><name>hashCode</name></name><argument_list>(<argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>+=</operator> <literal type="number">31</literal> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>optional</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>Boolean</name><operator>.</operator><name>hashCode</name></name><argument_list>(<argument><expr><name>optional</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>+=</operator> <literal type="number">31</literal> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>cipher_suites</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>cipher_suites</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>+=</operator> <literal type="number">31</literal> <operator>*</operator> <call><name><name>Boolean</name><operator>.</operator><name>hashCode</name></name><argument_list>(<argument><expr><name>require_client_auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>+=</operator> <literal type="number">31</literal> <operator>*</operator> <call><name><name>Boolean</name><operator>.</operator><name>hashCode</name></name><argument_list>(<argument><expr><name>require_endpoint_verification</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>ServerEncryptionOptions</name> <super_list><extends>extends <super><name>EncryptionOptions</name></super></extends></super_list>
    <block>{
        <enum><specifier>public</specifier> enum <name>InternodeEncryption</name>
        <block>{
            <decl><name>all</name></decl>, <decl><name>none</name></decl>, <decl><name>dc</name></decl>, <decl><name>rack</name></decl>
        }</block></enum>

        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>InternodeEncryption</name></type> <name>internode_encryption</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>enable_legacy_ssl_storage_port</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>ServerEncryptionOptions</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>internode_encryption</name></name> <operator>=</operator> <name><name>InternodeEncryption</name><operator>.</operator><name>none</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>enable_legacy_ssl_storage_port</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <constructor><specifier>public</specifier> <name>ServerEncryptionOptions</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keystore</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>keystore_password</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>truststore</name></decl></parameter>,
                                       <parameter><decl><type><name>String</name></type> <name>truststore_password</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>cipher_suites</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>protocol</name></decl></parameter>,
                                       <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>accepted_protocols</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>algorithm</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>store_type</name></decl></parameter>,
                                       <parameter><decl><type><name>boolean</name></type> <name>require_client_auth</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>require_endpoint_verification</name></decl></parameter>,
                                       <parameter><decl><type><name>Boolean</name></type> <name>optional</name></decl></parameter>, <parameter><decl><type><name>InternodeEncryption</name></type> <name>internode_encryption</name></decl></parameter>,
                                       <parameter><decl><type><name>boolean</name></type> <name>enable_legacy_ssl_storage_port</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><name>keystore_password</name></expr></argument>, <argument><expr><name>truststore</name></expr></argument>, <argument><expr><name>truststore_password</name></expr></argument>, <argument><expr><name>cipher_suites</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>,
                  <argument><expr><name>accepted_protocols</name></expr></argument>, <argument><expr><name>algorithm</name></expr></argument>, <argument><expr><name>store_type</name></expr></argument>, <argument><expr><name>require_client_auth</name></expr></argument>, <argument><expr><name>require_endpoint_verification</name></expr></argument>,
                  <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>optional</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>internode_encryption</name></name> <operator>=</operator> <name>internode_encryption</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>enable_legacy_ssl_storage_port</name></name> <operator>=</operator> <name>enable_legacy_ssl_storage_port</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <constructor><specifier>public</specifier> <name>ServerEncryptionOptions</name><parameter_list>(<parameter><decl><type><name>ServerEncryptionOptions</name></type> <name>options</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>internode_encryption</name></name> <operator>=</operator> <name><name>options</name><operator>.</operator><name>internode_encryption</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>enable_legacy_ssl_storage_port</name></name> <operator>=</operator> <name><name>options</name><operator>.</operator><name>enable_legacy_ssl_storage_port</name></name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>EncryptionOptions</name></type> <name>applyConfig</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name>applyConfigInternal</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>ServerEncryptionOptions</name></type> <name>applyConfigInternal</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>applyConfig</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>isEnabled</name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>internode_encryption</name></name> <operator>!=</operator> <name><name>InternodeEncryption</name><operator>.</operator><name>none</name></name></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>enabled</name></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>this</name><operator>.</operator><name>enabled</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>isEnabled</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Setting server_encryption_options.enabled has no effect, use internode_encryption"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>require_client_auth</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>internode_encryption</name> <operator>==</operator> <name><name>InternodeEncryption</name><operator>.</operator><name>rack</name></name> <operator>||</operator> <name>internode_encryption</name> <operator>==</operator> <name><name>InternodeEncryption</name><operator>.</operator><name>dc</name></name><operator>)</operator></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Setting require_client_auth is incompatible with 'rack' and 'dc' internode_encryption values."</literal>
                          <operator>+</operator> <literal type="string">" It is possible for an internode connection to pretend to be in the same rack/dc by spoofing"</literal>
                          <operator>+</operator> <literal type="string">" its broadcast address in the handshake and bypass authentication. To ensure that mutual TLS"</literal>
                          <operator>+</operator> <literal type="string">" authentication is not bypassed, please set internode_encryption to 'all'. Continuing with"</literal>
                          <operator>+</operator> <literal type="string">" insecure configuration."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// regardless of the optional flag, if the internode encryption is set to rack or dc</comment>
            <comment type="line">// it must be optional so that unencrypted connections within the rack or dc can be established.</comment>
            <expr_stmt><expr><name>isOptional</name> <operator>=</operator> <name><name>super</name><operator>.</operator><name>isOptional</name></name> <operator>||</operator> <name>internode_encryption</name> <operator>==</operator> <name><name>InternodeEncryption</name><operator>.</operator><name>rack</name></name> <operator>||</operator> <name>internode_encryption</name> <operator>==</operator> <name><name>InternodeEncryption</name><operator>.</operator><name>dc</name></name></expr>;</expr_stmt>

            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>shouldEncrypt</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>endpoint</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>IEndpointSnitch</name></type> <name>snitch</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getEndpointSnitch</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <switch>switch <condition>(<expr><name>internode_encryption</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>none</name></expr>:</case>
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return> <comment type="line">// if nothing needs to be encrypted then return immediately.</comment>
                <case>case <expr><name>all</name></expr>:</case>
                    <break>break;</break>
                <case>case <expr><name>dc</name></expr>:</case>
                    <if_stmt><if>if <condition>(<expr><call><name><name>snitch</name><operator>.</operator><name>getDatacenter</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>snitch</name><operator>.</operator><name>getLocalDatacenter</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
                    <break>break;</break>
                <case>case <expr><name>rack</name></expr>:</case>
                    <comment type="line">// for rack then check if the DC's are the same.</comment>
                    <if_stmt><if>if <condition>(<expr><call><name><name>snitch</name><operator>.</operator><name>getRack</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>snitch</name><operator>.</operator><name>getLocalRack</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                        <operator>&amp;&amp;</operator> <call><name><name>snitch</name><operator>.</operator><name>getDatacenter</name></name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>snitch</name><operator>.</operator><name>getLocalDatacenter</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
                    <break>break;</break>
            </block_content>}</block></switch>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * {@link #isOptional} will be set to {@code true} implicitly for {@code internode_encryption}
         * values of "dc" and "all". This method returns the explicit, raw value of {@link #optional}
         * as set by the user (if set at all).
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isExplicitlyOptional</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><name>optional</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>optional</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>ServerEncryptionOptions</name></type> <name>withKeyStore</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keystore</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>ServerEncryptionOptions</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><name>keystore_password</name></expr></argument>, <argument><expr><name>truststore</name></expr></argument>, <argument><expr><name>truststore_password</name></expr></argument>, <argument><expr><name>cipher_suites</name></expr></argument>,
                                               <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>accepted_protocols</name></expr></argument>, <argument><expr><name>algorithm</name></expr></argument>, <argument><expr><name>store_type</name></expr></argument>, <argument><expr><name>require_client_auth</name></expr></argument>, <argument><expr><name>require_endpoint_verification</name></expr></argument>,
                                               <argument><expr><name>optional</name></expr></argument>, <argument><expr><name>internode_encryption</name></expr></argument>, <argument><expr><name>enable_legacy_ssl_storage_port</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>applyConfigInternal</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>ServerEncryptionOptions</name></type> <name>withKeyStorePassword</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keystore_password</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>ServerEncryptionOptions</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><name>keystore_password</name></expr></argument>, <argument><expr><name>truststore</name></expr></argument>, <argument><expr><name>truststore_password</name></expr></argument>, <argument><expr><name>cipher_suites</name></expr></argument>,
                                               <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>accepted_protocols</name></expr></argument>, <argument><expr><name>algorithm</name></expr></argument>, <argument><expr><name>store_type</name></expr></argument>, <argument><expr><name>require_client_auth</name></expr></argument>, <argument><expr><name>require_endpoint_verification</name></expr></argument>,
                                               <argument><expr><name>optional</name></expr></argument>, <argument><expr><name>internode_encryption</name></expr></argument>, <argument><expr><name>enable_legacy_ssl_storage_port</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>applyConfigInternal</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>ServerEncryptionOptions</name></type> <name>withTrustStore</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>truststore</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>ServerEncryptionOptions</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><name>keystore_password</name></expr></argument>, <argument><expr><name>truststore</name></expr></argument>, <argument><expr><name>truststore_password</name></expr></argument>, <argument><expr><name>cipher_suites</name></expr></argument>,
                                               <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>accepted_protocols</name></expr></argument>, <argument><expr><name>algorithm</name></expr></argument>, <argument><expr><name>store_type</name></expr></argument>, <argument><expr><name>require_client_auth</name></expr></argument>, <argument><expr><name>require_endpoint_verification</name></expr></argument>,
                                               <argument><expr><name>optional</name></expr></argument>, <argument><expr><name>internode_encryption</name></expr></argument>, <argument><expr><name>enable_legacy_ssl_storage_port</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>applyConfigInternal</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>ServerEncryptionOptions</name></type> <name>withTrustStorePassword</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>truststore_password</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>ServerEncryptionOptions</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><name>keystore_password</name></expr></argument>, <argument><expr><name>truststore</name></expr></argument>, <argument><expr><name>truststore_password</name></expr></argument>, <argument><expr><name>cipher_suites</name></expr></argument>,
                                               <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>accepted_protocols</name></expr></argument>, <argument><expr><name>algorithm</name></expr></argument>, <argument><expr><name>store_type</name></expr></argument>, <argument><expr><name>require_client_auth</name></expr></argument>, <argument><expr><name>require_endpoint_verification</name></expr></argument>,
                                               <argument><expr><name>optional</name></expr></argument>, <argument><expr><name>internode_encryption</name></expr></argument>, <argument><expr><name>enable_legacy_ssl_storage_port</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>applyConfigInternal</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>ServerEncryptionOptions</name></type> <name>withCipherSuites</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>cipher_suites</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>ServerEncryptionOptions</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><name>keystore_password</name></expr></argument>, <argument><expr><name>truststore</name></expr></argument>, <argument><expr><name>truststore_password</name></expr></argument>, <argument><expr><name>cipher_suites</name></expr></argument>,
                                               <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>accepted_protocols</name></expr></argument>, <argument><expr><name>algorithm</name></expr></argument>, <argument><expr><name>store_type</name></expr></argument>, <argument><expr><name>require_client_auth</name></expr></argument>, <argument><expr><name>require_endpoint_verification</name></expr></argument>,
                                               <argument><expr><name>optional</name></expr></argument>, <argument><expr><name>internode_encryption</name></expr></argument>, <argument><expr><name>enable_legacy_ssl_storage_port</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>applyConfigInternal</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>ServerEncryptionOptions</name></type> <name>withCipherSuites</name><parameter_list>(<parameter><decl><type><name>String</name> <modifier>...</modifier></type> <name>cipher_suites</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>ServerEncryptionOptions</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><name>keystore_password</name></expr></argument>, <argument><expr><name>truststore</name></expr></argument>, <argument><expr><name>truststore_password</name></expr></argument>, <argument><expr><call><name><name>ImmutableList</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><name>cipher_suites</name></expr></argument>)</argument_list></call></expr></argument>,
                                               <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>accepted_protocols</name></expr></argument>, <argument><expr><name>algorithm</name></expr></argument>, <argument><expr><name>store_type</name></expr></argument>, <argument><expr><name>require_client_auth</name></expr></argument>, <argument><expr><name>require_endpoint_verification</name></expr></argument>,
                                               <argument><expr><name>optional</name></expr></argument>, <argument><expr><name>internode_encryption</name></expr></argument>, <argument><expr><name>enable_legacy_ssl_storage_port</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>applyConfigInternal</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>ServerEncryptionOptions</name></type> <name>withProtocol</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>protocol</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>ServerEncryptionOptions</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><name>keystore_password</name></expr></argument>, <argument><expr><name>truststore</name></expr></argument>, <argument><expr><name>truststore_password</name></expr></argument>, <argument><expr><name>cipher_suites</name></expr></argument>,
                                               <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>accepted_protocols</name></expr></argument>, <argument><expr><name>algorithm</name></expr></argument>, <argument><expr><name>store_type</name></expr></argument>, <argument><expr><name>require_client_auth</name></expr></argument>, <argument><expr><name>require_endpoint_verification</name></expr></argument>,
                                               <argument><expr><name>optional</name></expr></argument>, <argument><expr><name>internode_encryption</name></expr></argument>, <argument><expr><name>enable_legacy_ssl_storage_port</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>applyConfigInternal</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>ServerEncryptionOptions</name></type> <name>withAcceptedProtocols</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>accepted_protocols</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>ServerEncryptionOptions</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><name>keystore_password</name></expr></argument>, <argument><expr><name>truststore</name></expr></argument>, <argument><expr><name>truststore_password</name></expr></argument>, <argument><expr><name>cipher_suites</name></expr></argument>,
                                               <argument><expr><name>protocol</name></expr></argument>, <argument><expr><ternary><condition><expr><name>accepted_protocols</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>ImmutableList</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><name>accepted_protocols</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
                                               <argument><expr><name>algorithm</name></expr></argument>, <argument><expr><name>store_type</name></expr></argument>, <argument><expr><name>require_client_auth</name></expr></argument>, <argument><expr><name>require_endpoint_verification</name></expr></argument>,
                                               <argument><expr><name>optional</name></expr></argument>, <argument><expr><name>internode_encryption</name></expr></argument>, <argument><expr><name>enable_legacy_ssl_storage_port</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>applyConfigInternal</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>ServerEncryptionOptions</name></type> <name>withAlgorithm</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>algorithm</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>ServerEncryptionOptions</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><name>keystore_password</name></expr></argument>, <argument><expr><name>truststore</name></expr></argument>, <argument><expr><name>truststore_password</name></expr></argument>, <argument><expr><name>cipher_suites</name></expr></argument>,
                                               <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>accepted_protocols</name></expr></argument>, <argument><expr><name>algorithm</name></expr></argument>, <argument><expr><name>store_type</name></expr></argument>, <argument><expr><name>require_client_auth</name></expr></argument>, <argument><expr><name>require_endpoint_verification</name></expr></argument>,
                                               <argument><expr><name>optional</name></expr></argument>, <argument><expr><name>internode_encryption</name></expr></argument>, <argument><expr><name>enable_legacy_ssl_storage_port</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>applyConfigInternal</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>ServerEncryptionOptions</name></type> <name>withStoreType</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>store_type</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>ServerEncryptionOptions</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><name>keystore_password</name></expr></argument>, <argument><expr><name>truststore</name></expr></argument>, <argument><expr><name>truststore_password</name></expr></argument>, <argument><expr><name>cipher_suites</name></expr></argument>,
                                               <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>accepted_protocols</name></expr></argument>, <argument><expr><name>algorithm</name></expr></argument>, <argument><expr><name>store_type</name></expr></argument>, <argument><expr><name>require_client_auth</name></expr></argument>, <argument><expr><name>require_endpoint_verification</name></expr></argument>,
                                               <argument><expr><name>optional</name></expr></argument>, <argument><expr><name>internode_encryption</name></expr></argument>, <argument><expr><name>enable_legacy_ssl_storage_port</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>applyConfigInternal</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>ServerEncryptionOptions</name></type> <name>withRequireClientAuth</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>require_client_auth</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>ServerEncryptionOptions</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><name>keystore_password</name></expr></argument>, <argument><expr><name>truststore</name></expr></argument>, <argument><expr><name>truststore_password</name></expr></argument>, <argument><expr><name>cipher_suites</name></expr></argument>,
                                               <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>accepted_protocols</name></expr></argument>, <argument><expr><name>algorithm</name></expr></argument>, <argument><expr><name>store_type</name></expr></argument>, <argument><expr><name>require_client_auth</name></expr></argument>, <argument><expr><name>require_endpoint_verification</name></expr></argument>,
                                               <argument><expr><name>optional</name></expr></argument>, <argument><expr><name>internode_encryption</name></expr></argument>, <argument><expr><name>enable_legacy_ssl_storage_port</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>applyConfigInternal</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>ServerEncryptionOptions</name></type> <name>withRequireEndpointVerification</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>require_endpoint_verification</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>ServerEncryptionOptions</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><name>keystore_password</name></expr></argument>, <argument><expr><name>truststore</name></expr></argument>, <argument><expr><name>truststore_password</name></expr></argument>, <argument><expr><name>cipher_suites</name></expr></argument>,
                                               <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>accepted_protocols</name></expr></argument>, <argument><expr><name>algorithm</name></expr></argument>, <argument><expr><name>store_type</name></expr></argument>, <argument><expr><name>require_client_auth</name></expr></argument>, <argument><expr><name>require_endpoint_verification</name></expr></argument>,
                                               <argument><expr><name>optional</name></expr></argument>, <argument><expr><name>internode_encryption</name></expr></argument>, <argument><expr><name>enable_legacy_ssl_storage_port</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>applyConfigInternal</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>ServerEncryptionOptions</name></type> <name>withOptional</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>optional</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>ServerEncryptionOptions</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><name>keystore_password</name></expr></argument>, <argument><expr><name>truststore</name></expr></argument>, <argument><expr><name>truststore_password</name></expr></argument>, <argument><expr><name>cipher_suites</name></expr></argument>,
                                               <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>accepted_protocols</name></expr></argument>, <argument><expr><name>algorithm</name></expr></argument>, <argument><expr><name>store_type</name></expr></argument>, <argument><expr><name>require_client_auth</name></expr></argument>, <argument><expr><name>require_endpoint_verification</name></expr></argument>,
                                               <argument><expr><name>optional</name></expr></argument>, <argument><expr><name>internode_encryption</name></expr></argument>, <argument><expr><name>enable_legacy_ssl_storage_port</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>applyConfigInternal</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>ServerEncryptionOptions</name></type> <name>withInternodeEncryption</name><parameter_list>(<parameter><decl><type><name>InternodeEncryption</name></type> <name>internode_encryption</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>ServerEncryptionOptions</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><name>keystore_password</name></expr></argument>, <argument><expr><name>truststore</name></expr></argument>, <argument><expr><name>truststore_password</name></expr></argument>, <argument><expr><name>cipher_suites</name></expr></argument>,
                                               <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>accepted_protocols</name></expr></argument>, <argument><expr><name>algorithm</name></expr></argument>, <argument><expr><name>store_type</name></expr></argument>, <argument><expr><name>require_client_auth</name></expr></argument>, <argument><expr><name>require_endpoint_verification</name></expr></argument>,
                                               <argument><expr><name>optional</name></expr></argument>, <argument><expr><name>internode_encryption</name></expr></argument>, <argument><expr><name>enable_legacy_ssl_storage_port</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>applyConfigInternal</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>ServerEncryptionOptions</name></type> <name>withLegacySslStoragePort</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>enable_legacy_ssl_storage_port</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>ServerEncryptionOptions</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><name>keystore_password</name></expr></argument>, <argument><expr><name>truststore</name></expr></argument>, <argument><expr><name>truststore_password</name></expr></argument>, <argument><expr><name>cipher_suites</name></expr></argument>,
                                               <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>accepted_protocols</name></expr></argument>, <argument><expr><name>algorithm</name></expr></argument>, <argument><expr><name>store_type</name></expr></argument>, <argument><expr><name>require_client_auth</name></expr></argument>, <argument><expr><name>require_endpoint_verification</name></expr></argument>,
                                               <argument><expr><name>optional</name></expr></argument>, <argument><expr><name>internode_encryption</name></expr></argument>, <argument><expr><name>enable_legacy_ssl_storage_port</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>applyConfigInternal</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

    }</block></class>
}</block></class>
</unit>
