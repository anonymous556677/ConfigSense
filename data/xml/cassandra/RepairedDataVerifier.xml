<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/service/reads/repair/RepairedDataVerifier.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>reads</name><operator>.</operator><name>repair</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>time</name><operator>.</operator><name>LocalDate</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>time</name><operator>.</operator><name>format</name><operator>.</operator><name>DateTimeFormatter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ConcurrentHashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicLong</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>ColumnFamilyStore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>ReadCommand</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>SnapshotCommand</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>InetAddressAndPort</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>metrics</name><operator>.</operator><name>TableMetrics</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>Message</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>MessagingService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>Verb</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>TableId</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>SnapshotVerbHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>tracing</name><operator>.</operator><name>Tracing</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>DiagnosticSnapshotService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>NoSpamLogger</name></name>;</import>

<interface><specifier>public</specifier> interface <name>RepairedDataVerifier</name>
<block>{
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>verify</name><parameter_list>(<parameter><decl><type><name>RepairedDataTracker</name></type> <name>tracker</name></decl></parameter>)</parameter_list>;</function_decl>

    <function><type><specifier>static</specifier> <name>RepairedDataVerifier</name></type> <name>verifier</name><parameter_list>(<parameter><decl><type><name>ReadCommand</name></type> <name>command</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><ternary><condition><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>snapshotOnRepairedDataMismatch</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name>snapshotting</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>simple</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name>RepairedDataVerifier</name></type> <name>simple</name><parameter_list>(<parameter><decl><type><name>ReadCommand</name></type> <name>command</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>SimpleVerifier</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name>RepairedDataVerifier</name></type> <name>snapshotting</name><parameter_list>(<parameter><decl><type><name>ReadCommand</name></type> <name>command</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>SnapshottingVerifier</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>static</specifier> class <name>SimpleVerifier</name> <super_list><implements>implements <super><name>RepairedDataVerifier</name></super></implements></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>SimpleVerifier</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>ReadCommand</name></type> <name>command</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>INCONSISTENCY_WARNING</name> <init>= <expr><literal type="string">"Detected mismatch between repaired datasets for table {}.{} during read of {}. {}"</literal></expr></init></decl>;</decl_stmt>

        <constructor><name>SimpleVerifier</name><parameter_list>(<parameter><decl><type><name>ReadCommand</name></type> <name>command</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>command</name></name> <operator>=</operator> <name>command</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>void</name></type> <name>verify</name><parameter_list>(<parameter><decl><type><name>RepairedDataTracker</name></type> <name>tracker</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Verifying repaired data tracker {}"</literal></expr></argument>, <argument><expr><name>tracker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// some mismatch occurred between the repaired datasets on the replicas</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>tracker</name><operator>.</operator><name>digests</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// if any of the digests should be considered inconclusive, because there were</comment>
                <comment type="line">// pending repair sessions which had not yet been committed or unrepaired partition</comment>
                <comment type="line">// deletes which meant some sstables were skipped during reads, mark the inconsistency</comment>
                <comment type="line">// as confirmed</comment>
                <if_stmt><if>if <condition>(<expr><call><name><name>tracker</name><operator>.</operator><name>inconclusiveDigests</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>TableMetrics</name></type> <name>metrics</name> <init>= <expr><call><name><name>ColumnFamilyStore</name><operator>.</operator><name>metricsFor</name></name><argument_list>(<argument><expr><call><name><name>command</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>metrics</name><operator>.</operator><name>confirmedRepairedInconsistencies</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>NoSpamLogger</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name>logger</name></expr></argument>, <argument><expr><name><name>NoSpamLogger</name><operator>.</operator><name>Level</name><operator>.</operator><name>WARN</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MINUTES</name></name></expr></argument>,
                                     <argument><expr><name>INCONSISTENCY_WARNING</name></expr></argument>, <argument><expr><call><name><name>command</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><name>keyspace</name></expr></argument>,
                                     <argument><expr><call><name><name>command</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><name>name</name></expr></argument>, <argument><expr><call><name><name>command</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tracker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>reportUnconfirmedRepairedDataMismatches</name></name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>TableMetrics</name></type> <name>metrics</name> <init>= <expr><call><name><name>ColumnFamilyStore</name><operator>.</operator><name>metricsFor</name></name><argument_list>(<argument><expr><call><name><name>command</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>metrics</name><operator>.</operator><name>unconfirmedRepairedInconsistencies</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>NoSpamLogger</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name>logger</name></expr></argument>, <argument><expr><name><name>NoSpamLogger</name><operator>.</operator><name>Level</name><operator>.</operator><name>WARN</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MINUTES</name></name></expr></argument>,
                                     <argument><expr><name>INCONSISTENCY_WARNING</name></expr></argument>, <argument><expr><call><name><name>command</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><name>keyspace</name></expr></argument>,
                                     <argument><expr><call><name><name>command</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><name>name</name></expr></argument>, <argument><expr><call><name><name>command</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tracker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>static</specifier> class <name>SnapshottingVerifier</name> <super_list><extends>extends <super><name>SimpleVerifier</name></super></extends></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>SnapshottingVerifier</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SNAPSHOTTING_WARNING</name> <init>= <expr><literal type="string">"Issuing snapshot command for mismatch between repaired datasets for table {}.{} during read of {}. {}"</literal></expr></init></decl>;</decl_stmt>

        <constructor><name>SnapshottingVerifier</name><parameter_list>(<parameter><decl><type><name>ReadCommand</name></type> <name>command</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>verify</name><parameter_list>(<parameter><decl><type><name>RepairedDataTracker</name></type> <name>tracker</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>verify</name></name><argument_list>(<argument><expr><name>tracker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>tracker</name><operator>.</operator><name>digests</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>tracker</name><operator>.</operator><name>inconclusiveDigests</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>||</operator>  <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>reportUnconfirmedRepairedDataMismatches</name></name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><name>SNAPSHOTTING_WARNING</name></expr></argument>, <argument><expr><call><name><name>command</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><name>keyspace</name></expr></argument>, <argument><expr><call><name><name>command</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><name>name</name></expr></argument>, <argument><expr><call><name><name>command</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tracker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>DiagnosticSnapshotService</name><operator>.</operator><name>repairedDataMismatch</name></name><argument_list>(<argument><expr><call><name><name>command</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>tracker</name><operator>.</operator><name>digests</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></function>
    }</block></class>
}</block></interface>

</unit>
