<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/service/reads/DataResolver.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>reads</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>function</name><operator>.</operator><name>UnaryOperator</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Joiner</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>ColumnFamilyStore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>DecoratedKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>DeletionTime</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>ReadCommand</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>ReadResponse</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>filter</name><operator>.</operator><name>DataLimits</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>partitions</name><operator>.</operator><name>PartitionIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>partitions</name><operator>.</operator><name>PartitionIterators</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>partitions</name><operator>.</operator><name>UnfilteredPartitionIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>partitions</name><operator>.</operator><name>UnfilteredPartitionIterators</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>rows</name><operator>.</operator><name>RangeTombstoneMarker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>rows</name><operator>.</operator><name>Row</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>rows</name><operator>.</operator><name>UnfilteredRowIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>rows</name><operator>.</operator><name>UnfilteredRowIterators</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>transform</name><operator>.</operator><name>EmptyPartitionsDiscarder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>transform</name><operator>.</operator><name>Filter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>transform</name><operator>.</operator><name>FilteredPartitions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>transform</name><operator>.</operator><name>Transformation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>index</name><operator>.</operator><name>Index</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>Endpoints</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>ReplicaPlan</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>Message</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>IndexMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>TableMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>reads</name><operator>.</operator><name>repair</name><operator>.</operator><name>ReadRepair</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>reads</name><operator>.</operator><name>repair</name><operator>.</operator><name>RepairedDataTracker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>reads</name><operator>.</operator><name>repair</name><operator>.</operator><name>RepairedDataVerifier</name></name>;</import>

<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name><operator>.</operator><name>*</name></name>;</import>

<class><specifier>public</specifier> class <name><name>DataResolver</name><parameter_list>&lt;<parameter><name>E</name> <extends>extends <name><name>Endpoints</name><parameter_list>&lt;<parameter><name>E</name></parameter>&gt;</parameter_list></name></extends></parameter>, <parameter><name>P</name> <extends>extends <name>ReplicaPlan</name><operator>.</operator><name><name>ForRead</name><parameter_list>&lt;<parameter><name>E</name></parameter>&gt;</parameter_list></name></extends></parameter>&gt;</parameter_list></name> <super_list><extends>extends <super><name><name>ResponseResolver</name><argument_list type="generic">&lt;<argument><name>E</name></argument>, <argument><name>P</name></argument>&gt;</argument_list></name></super></extends></super_list>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>enforceStrictLiveness</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ReadRepair</name><argument_list type="generic">&lt;<argument><name>E</name></argument>, <argument><name>P</name></argument>&gt;</argument_list></name></type> <name>readRepair</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>trackRepairedStatus</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>DataResolver</name><parameter_list>(<parameter><decl><type><name>ReadCommand</name></type> <name>command</name></decl></parameter>, <parameter><decl><type><name><name>ReplicaPlan</name><operator>.</operator><name><name>Shared</name><argument_list type="generic">&lt;<argument><name>E</name></argument>, <argument><name>P</name></argument>&gt;</argument_list></name></name></type> <name>replicaPlan</name></decl></parameter>, <parameter><decl><type><name><name>ReadRepair</name><argument_list type="generic">&lt;<argument><name>E</name></argument>, <argument><name>P</name></argument>&gt;</argument_list></name></type> <name>readRepair</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>queryStartNanoTime</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>replicaPlan</name></expr></argument>, <argument><expr><name>readRepair</name></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>DataResolver</name><parameter_list>(<parameter><decl><type><name>ReadCommand</name></type> <name>command</name></decl></parameter>, <parameter><decl><type><name><name>ReplicaPlan</name><operator>.</operator><name><name>Shared</name><argument_list type="generic">&lt;<argument><name>E</name></argument>, <argument><name>P</name></argument>&gt;</argument_list></name></name></type> <name>replicaPlan</name></decl></parameter>, <parameter><decl><type><name><name>ReadRepair</name><argument_list type="generic">&lt;<argument><name>E</name></argument>, <argument><name>P</name></argument>&gt;</argument_list></name></type> <name>readRepair</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>queryStartNanoTime</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>trackRepairedStatus</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>replicaPlan</name></expr></argument>, <argument><expr><name>queryStartNanoTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>enforceStrictLiveness</name></name> <operator>=</operator> <call><name><name>command</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>enforceStrictLiveness</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>readRepair</name></name> <operator>=</operator> <name>readRepair</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>trackRepairedStatus</name></name> <operator>=</operator> <name>trackRepairedStatus</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>PartitionIterator</name></type> <name>getData</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ReadResponse</name></type> <name>response</name> <init>= <expr><call><name><name>responses</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>payload</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>UnfilteredPartitionIterators</name><operator>.</operator><name>filter</name></name><argument_list>(<argument><expr><call><name><name>response</name><operator>.</operator><name>makeIterator</name></name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>command</name><operator>.</operator><name>nowInSec</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDataPresent</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>!</operator><call><name><name>responses</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>PartitionIterator</name></type> <name>resolve</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <comment type="line">// We could get more responses while this method runs, which is ok (we're happy to ignore any response not here</comment>
        <comment type="line">// at the beginning of this method), so grab the response count once and use that through the method.</comment>
        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name><name>Message</name><argument_list type="generic">&lt;<argument><name>ReadResponse</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>messages</name> <init>= <expr><call><name><name>responses</name><operator>.</operator><name>snapshot</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <assert>assert <expr><operator>!</operator><call><name>any</name><argument_list>(<argument><expr><name>messages</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>msg</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>msg</name><operator>.</operator><name>payload</name><operator>.</operator><name>isDigestResponse</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</assert>

        <decl_stmt><decl><type><name>E</name></type> <name>replicas</name> <init>= <expr><call><name>replicaPlan</name><argument_list>()</argument_list></call><operator>.</operator><call><name>candidates</name><argument_list>()</argument_list></call><operator>.</operator><call><name>select</name><argument_list>(<argument><expr><call><name>transform</name><argument_list>(<argument><expr><name>messages</name></expr></argument>, <argument><expr><name>Message</name><operator>::</operator><name>from</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// If requested, inspect each response for a digest of the replica's repaired data set</comment>
        <decl_stmt><decl><type><name>RepairedDataTracker</name></type> <name>repairedDataTracker</name> <init>= <expr><ternary><condition><expr><name>trackRepairedStatus</name></expr>
                                                  ?</condition><then> <expr><operator>new</operator> <call><name>RepairedDataTracker</name><argument_list>(<argument><expr><call><name>getRepairedDataVerifier</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>
                                                  </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>repairedDataTracker</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>messages</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>msg</name></decl></parameter></parameter_list> -&gt; <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>msg</name><operator>.</operator><name>payload</name><operator>.</operator><name>mayIncludeRepairedDigest</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>replicas</name><operator>.</operator><name>byEndpoint</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><call><name><name>msg</name><operator>.</operator><name>from</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>isFull</name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>repairedDataTracker</name><operator>.</operator><name>recordDigest</name></name><argument_list>(<argument><expr><call><name><name>msg</name><operator>.</operator><name>from</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                     <argument><expr><call><name><name>msg</name><operator>.</operator><name>payload</name><operator>.</operator><name>repairedDataDigest</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                     <argument><expr><call><name><name>msg</name><operator>.</operator><name>payload</name><operator>.</operator><name>isRepairedDigestConclusive</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>needsReplicaFilteringProtection</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ResolveContext</name></type> <name>context</name> <init>= <expr><operator>new</operator> <call><name>ResolveContext</name><argument_list>(<argument><expr><name>replicas</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name>resolveWithReadRepair</name><argument_list>(<argument><expr><name>context</name></expr></argument>,
                                         <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>i</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>shortReadProtectedResponse</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>,
                                         <argument><expr><call><name><name>UnaryOperator</name><operator>.</operator><name>identity</name></name><argument_list>()</argument_list></call></expr></argument>,
                                         <argument><expr><name>repairedDataTracker</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><call><name>resolveWithReplicaFilteringProtection</name><argument_list>(<argument><expr><name>replicas</name></expr></argument>, <argument><expr><name>repairedDataTracker</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>needsReplicaFilteringProtection</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>command</name><operator>.</operator><name>rowFilter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>IndexMetadata</name></type> <name>indexMetadata</name> <init>= <expr><call><name><name>command</name><operator>.</operator><name>indexMetadata</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>indexMetadata</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><call><name><name>indexMetadata</name><operator>.</operator><name>isCustom</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name> <init>= <expr><call><name><name>ColumnFamilyStore</name><operator>.</operator><name>getIfExists</name></name><argument_list>(<argument><expr><call><name><name>command</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <assert>assert <expr><name>cfs</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>

        <decl_stmt><decl><type><name>Index</name></type> <name>index</name> <init>= <expr><call><name><name>command</name><operator>.</operator><name>getIndex</name></name><argument_list>(<argument><expr><name>cfs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <assert>assert <expr><name>index</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>

        <return>return <expr><call><name><name>index</name><operator>.</operator><name>supportsReplicaFilteringProtection</name></name><argument_list>(<argument><expr><call><name><name>command</name><operator>.</operator><name>rowFilter</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>private</specifier> class <name>ResolveContext</name>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>E</name></type> <name>replicas</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>DataLimits</name><operator>.</operator><name>Counter</name></name></type> <name>mergedResultCounter</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>ResolveContext</name><parameter_list>(<parameter><decl><type><name>E</name></type> <name>replicas</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>replicas</name></name> <operator>=</operator> <name>replicas</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mergedResultCounter</name></name> <operator>=</operator> <call><name><name>command</name><operator>.</operator><name>limits</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>newCounter</name><argument_list>(<argument><expr><call><name><name>command</name><operator>.</operator><name>nowInSec</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                                   <argument><expr><literal type="boolean">true</literal></expr></argument>,
                                                                   <argument><expr><call><name><name>command</name><operator>.</operator><name>selectsFullPartition</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                                   <argument><expr><name>enforceStrictLiveness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>private</specifier> <name>boolean</name></type> <name>needsReadRepair</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>replicas</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>boolean</name></type> <name>needShortReadProtection</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <comment type="line">// If we have only one result, there is no read repair to do and we can't get short reads</comment>
            <comment type="line">// Also, so-called "short reads" stems from nodes returning only a subset of the results they have for a</comment>
            <comment type="line">// partition due to the limit, but that subset not being enough post-reconciliation. So if we don't have limit,</comment>
            <comment type="line">// don't bother protecting against short reads.</comment>
            <return>return <expr><call><name><name>replicas</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>command</name><operator>.</operator><name>limits</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isUnlimited</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <interface><annotation>@<name>FunctionalInterface</name></annotation>
    <specifier>private</specifier> interface <name>ResponseProvider</name>
    <block>{
        <function_decl><type><name>UnfilteredPartitionIterator</name></type> <name>getResponse</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl>
    }</block></interface>

    <function><type><specifier>private</specifier> <name>UnfilteredPartitionIterator</name></type> <name>shortReadProtectedResponse</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>ResolveContext</name></type> <name>context</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>UnfilteredPartitionIterator</name></type> <name>originalResponse</name> <init>= <expr><call><name><name>responses</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>payload</name><operator>.</operator><name>makeIterator</name></name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><ternary><condition><expr><call><name><name>context</name><operator>.</operator><name>needShortReadProtection</name></name><argument_list>()</argument_list></call></expr>
               ?</condition><then> <expr><call><name><name>ShortReadProtection</name><operator>.</operator><name>extend</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>replicas</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
                                            <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>responses</name><operator>.</operator><name>clearUnsafe</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>,
                                            <argument><expr><name>originalResponse</name></expr></argument>,
                                            <argument><expr><name>command</name></expr></argument>,
                                            <argument><expr><name><name>context</name><operator>.</operator><name>mergedResultCounter</name></name></expr></argument>,
                                            <argument><expr><name>queryStartNanoTime</name></expr></argument>,
                                            <argument><expr><name>enforceStrictLiveness</name></expr></argument>)</argument_list></call></expr>
               </then><else>: <expr><name>originalResponse</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>PartitionIterator</name></type> <name>resolveWithReadRepair</name><parameter_list>(<parameter><decl><type><name>ResolveContext</name></type> <name>context</name></decl></parameter>,
                                                    <parameter><decl><type><name>ResponseProvider</name></type> <name>responseProvider</name></decl></parameter>,
                                                    <parameter><decl><type><name><name>UnaryOperator</name><argument_list type="generic">&lt;<argument><name>PartitionIterator</name></argument>&gt;</argument_list></name></type> <name>preCountFilter</name></decl></parameter>,
                                                    <parameter><decl><type><name>RepairedDataTracker</name></type> <name>repairedDataTracker</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>UnfilteredPartitionIterators</name><operator>.</operator><name>MergeListener</name></name></type> <name>listener</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>context</name><operator>.</operator><name>needsReadRepair</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>P</name></type> <name>sources</name> <init>= <expr><call><name><name>replicaPlan</name><operator>.</operator><name>getWithContacts</name></name><argument_list>(<argument><expr><name><name>context</name><operator>.</operator><name>replicas</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>listener</name> <operator>=</operator> <call><name>wrapMergeListener</name><argument_list>(<argument><expr><call><name><name>readRepair</name><operator>.</operator><name>getMergeListener</name></name><argument_list>(<argument><expr><name>sources</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sources</name></expr></argument>, <argument><expr><name>repairedDataTracker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><call><name>resolveInternal</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>listener</name></expr></argument>, <argument><expr><name>responseProvider</name></expr></argument>, <argument><expr><name>preCountFilter</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"resource"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>private</specifier> <name>PartitionIterator</name></type> <name>resolveWithReplicaFilteringProtection</name><parameter_list>(<parameter><decl><type><name>E</name></type> <name>replicas</name></decl></parameter>, <parameter><decl><type><name>RepairedDataTracker</name></type> <name>repairedDataTracker</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// Protecting against inconsistent replica filtering (some replica returning a row that is outdated but that</comment>
        <comment type="line">// wouldn't be removed by normal reconciliation because up-to-date replica have filtered the up-to-date version</comment>
        <comment type="line">// of that row) involves 3 main elements:</comment>
        <comment type="line">//   1) We combine short-read protection and a merge listener that identifies potentially "out-of-date"</comment>
        <comment type="line">//      rows to create an iterator that is guaranteed to produce enough valid row results to satisfy the query</comment>
        <comment type="line">//      limit if enough actually exist. A row is considered out-of-date if its merged from is non-empty and we</comment>
        <comment type="line">//      receive not response from at least one replica. In this case, it is possible that filtering at the</comment>
        <comment type="line">//      "silent" replica has produced a more up-to-date result.</comment>
        <comment type="line">//   2) This iterator is passed to the standard resolution process with read-repair, but is first wrapped in a</comment>
        <comment type="line">//      response provider that lazily "completes" potentially out-of-date rows by directly querying them on the</comment>
        <comment type="line">//      replicas that were previously silent. As this iterator is consumed, it caches valid data for potentially</comment>
        <comment type="line">//      out-of-date rows, and this cached data is merged with the fetched data as rows are requested. If there</comment>
        <comment type="line">//      is no replica divergence, only rows in the partition being evalutated will be cached (then released</comment>
        <comment type="line">//      when the partition is consumed).</comment>
        <comment type="line">//   3) After a "complete" row is materialized, it must pass the row filter supplied by the original query</comment>
        <comment type="line">//      before it counts against the limit.</comment>

        <comment type="line">// We need separate contexts, as each context has his own counter</comment>
        <decl_stmt><decl><type><name>ResolveContext</name></type> <name>firstPhaseContext</name> <init>= <expr><operator>new</operator> <call><name>ResolveContext</name><argument_list>(<argument><expr><name>replicas</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ResolveContext</name></type> <name>secondPhaseContext</name> <init>= <expr><operator>new</operator> <call><name>ResolveContext</name><argument_list>(<argument><expr><name>replicas</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ReplicaFilteringProtection</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>rfp</name> <init>= <expr><operator>new</operator> <call><name><name>ReplicaFilteringProtection</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name>replicaPlan</name><argument_list>()</argument_list></call><operator>.</operator><call><name>keyspace</name><argument_list>()</argument_list></call></expr></argument>,
                                                                             <argument><expr><name>command</name></expr></argument>,
                                                                             <argument><expr><call><name>replicaPlan</name><argument_list>()</argument_list></call><operator>.</operator><call><name>consistencyLevel</name><argument_list>()</argument_list></call></expr></argument>,
                                                                             <argument><expr><name>queryStartNanoTime</name></expr></argument>,
                                                                             <argument><expr><name><name>firstPhaseContext</name><operator>.</operator><name>replicas</name></name></expr></argument>,
                                                                             <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getCachedReplicaRowsWarnThreshold</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                                             <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getCachedReplicaRowsFailThreshold</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>PartitionIterator</name></type> <name>firstPhasePartitions</name> <init>= <expr><call><name>resolveInternal</name><argument_list>(<argument><expr><name>firstPhaseContext</name></expr></argument>,
                                                                 <argument><expr><call><name><name>rfp</name><operator>.</operator><name>mergeController</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                                 <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>i</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>shortReadProtectedResponse</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>firstPhaseContext</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>,
                                                                 <argument><expr><call><name><name>UnaryOperator</name><operator>.</operator><name>identity</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>PartitionIterator</name></type> <name>completedPartitions</name> <init>= <expr><call><name>resolveWithReadRepair</name><argument_list>(<argument><expr><name>secondPhaseContext</name></expr></argument>,
                                                                      <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>i</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>rfp</name><operator>.</operator><name>queryProtectedPartitions</name></name><argument_list>(<argument><expr><name>firstPhasePartitions</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>,
                                                                      <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>results</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>command</name><operator>.</operator><name>rowFilter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>results</name></expr></argument>, <argument><expr><call><name><name>command</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>command</name><operator>.</operator><name>nowInSec</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>,
                                                                      <argument><expr><name>repairedDataTracker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Ensure that the RFP instance has a chance to record metrics when the iterator closes.</comment>
        <return>return <expr><call><name><name>PartitionIterators</name><operator>.</operator><name>doOnClose</name></name><argument_list>(<argument><expr><name>completedPartitions</name></expr></argument>, <argument><expr><name>firstPhasePartitions</name><operator>::</operator><name>close</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"resource"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>private</specifier> <name>PartitionIterator</name></type> <name>resolveInternal</name><parameter_list>(<parameter><decl><type><name>ResolveContext</name></type> <name>context</name></decl></parameter>,
                                              <parameter><decl><type><name><name>UnfilteredPartitionIterators</name><operator>.</operator><name>MergeListener</name></name></type> <name>mergeListener</name></decl></parameter>,
                                              <parameter><decl><type><name>ResponseProvider</name></type> <name>responseProvider</name></decl></parameter>,
                                              <parameter><decl><type><name><name>UnaryOperator</name><argument_list type="generic">&lt;<argument><name>PartitionIterator</name></argument>&gt;</argument_list></name></type> <name>preCountFilter</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>replicas</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>UnfilteredPartitionIterator</name></argument>&gt;</argument_list></name></type> <name>results</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>results</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>responseProvider</name><operator>.</operator><name>getResponse</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <comment type="block">/*
         * Even though every response, individually, will honor the limit, it is possible that we will, after the merge,
         * have more rows than the client requested. To make sure that we still conform to the original limit,
         * we apply a top-level post-reconciliation counter to the merged partition iterator.
         *
         * Short read protection logic (ShortReadRowsProtection.moreContents()) relies on this counter to be applied
         * to the current partition to work. For this reason we have to apply the counter transformation before
         * empty partition discard logic kicks in - for it will eagerly consume the iterator.
         *
         * That's why the order here is: 1) merge; 2) filter rows; 3) count; 4) discard empty partitions
         *
         * See CASSANDRA-13747 for more details.
         */</comment>

        <decl_stmt><decl><type><name>UnfilteredPartitionIterator</name></type> <name>merged</name> <init>= <expr><call><name><name>UnfilteredPartitionIterators</name><operator>.</operator><name>merge</name></name><argument_list>(<argument><expr><name>results</name></expr></argument>, <argument><expr><name>mergeListener</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Filter</name></type> <name>filter</name> <init>= <expr><operator>new</operator> <call><name>Filter</name><argument_list>(<argument><expr><call><name><name>command</name><operator>.</operator><name>nowInSec</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>command</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>enforceStrictLiveness</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FilteredPartitions</name></type> <name>filtered</name> <init>= <expr><call><name><name>FilteredPartitions</name><operator>.</operator><name>filter</name></name><argument_list>(<argument><expr><name>merged</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PartitionIterator</name></type> <name>counted</name> <init>= <expr><call><name><name>Transformation</name><operator>.</operator><name>apply</name></name><argument_list>(<argument><expr><call><name><name>preCountFilter</name><operator>.</operator><name>apply</name></name><argument_list>(<argument><expr><name>filtered</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>context</name><operator>.</operator><name>mergedResultCounter</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>Transformation</name><operator>.</operator><name>apply</name></name><argument_list>(<argument><expr><name>counted</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>EmptyPartitionsDiscarder</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>RepairedDataVerifier</name></type> <name>getRepairedDataVerifier</name><parameter_list>(<parameter><decl><type><name>ReadCommand</name></type> <name>command</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>RepairedDataVerifier</name><operator>.</operator><name>verifier</name></name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>makeResponsesDebugString</name><parameter_list>(<parameter><decl><type><name>DecoratedKey</name></type> <name>partitionKey</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Joiner</name><operator>.</operator><name>on</name></name><argument_list>(<argument><expr><literal type="string">",\n"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>join</name><argument_list>(<argument><expr><call><name>transform</name><argument_list>(<argument><expr><call><name>getMessages</name><argument_list>()</argument_list></call><operator>.</operator><call><name>snapshot</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>m</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>m</name><operator>.</operator><name>from</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" =&gt; "</literal> <operator>+</operator> <call><name><name>m</name><operator>.</operator><name>payload</name><operator>.</operator><name>toDebugString</name></name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>partitionKey</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>UnfilteredPartitionIterators</name><operator>.</operator><name>MergeListener</name></name></type> <name>wrapMergeListener</name><parameter_list>(<parameter><decl><type><name><name>UnfilteredPartitionIterators</name><operator>.</operator><name>MergeListener</name></name></type> <name>partitionListener</name></decl></parameter>,
                                                                         <parameter><decl><type><name>P</name></type> <name>sources</name></decl></parameter>,
                                                                         <parameter><decl><type><name>RepairedDataTracker</name></type> <name>repairedDataTracker</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// Avoid wrapping no-op listener as it doesn't throw, unless we're tracking repaired status</comment>
        <comment type="line">// in which case we need to inject the tracker &amp; verify on close</comment>
        <if_stmt><if>if <condition>(<expr><name>partitionListener</name> <operator>==</operator> <name><name>UnfilteredPartitionIterators</name><operator>.</operator><name>MergeListener</name><operator>.</operator><name>NOOP</name></name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>repairedDataTracker</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>partitionListener</name></expr>;</return></block_content></block></if></if_stmt>

            <return>return <expr><operator>new</operator> <class><super><name><name>UnfilteredPartitionIterators</name><operator>.</operator><name>MergeListener</name></name></super><argument_list>()</argument_list>
            <block>{

                <function><type><specifier>public</specifier> <name><name>UnfilteredRowIterators</name><operator>.</operator><name>MergeListener</name></name></type> <name>getRowMergeListener</name><parameter_list>(<parameter><decl><type><name>DecoratedKey</name></type> <name>partitionKey</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>UnfilteredRowIterator</name></argument>&gt;</argument_list></name></type> <name>versions</name></decl></parameter>)</parameter_list>
                <block>{<block_content>
                    <return>return <expr><name><name>UnfilteredRowIterators</name><operator>.</operator><name>MergeListener</name><operator>.</operator><name>NOOP</name></name></expr>;</return>
                </block_content>}</block></function>

                <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>repairedDataTracker</name><operator>.</operator><name>verify</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></function>
            }</block></class></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><operator>new</operator> <class><super><name><name>UnfilteredPartitionIterators</name><operator>.</operator><name>MergeListener</name></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name><name>UnfilteredRowIterators</name><operator>.</operator><name>MergeListener</name></name></type> <name>getRowMergeListener</name><parameter_list>(<parameter><decl><type><name>DecoratedKey</name></type> <name>partitionKey</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>UnfilteredRowIterator</name></argument>&gt;</argument_list></name></type> <name>versions</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name><name>UnfilteredRowIterators</name><operator>.</operator><name>MergeListener</name></name></type> <name>rowListener</name> <init>= <expr><call><name><name>partitionListener</name><operator>.</operator><name>getRowMergeListener</name></name><argument_list>(<argument><expr><name>partitionKey</name></expr></argument>, <argument><expr><name>versions</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <return>return <expr><operator>new</operator> <class><super><name><name>UnfilteredRowIterators</name><operator>.</operator><name>MergeListener</name></name></super><argument_list>()</argument_list>
                <block>{
                    <function><type><specifier>public</specifier> <name>void</name></type> <name>onMergedPartitionLevelDeletion</name><parameter_list>(<parameter><decl><type><name>DeletionTime</name></type> <name>mergedDeletion</name></decl></parameter>, <parameter><decl><type><name><name>DeletionTime</name><index>[]</index></name></type> <name>versions</name></decl></parameter>)</parameter_list>
                    <block>{<block_content>
                        <try>try
                        <block>{<block_content>
                            <expr_stmt><expr><call><name><name>rowListener</name><operator>.</operator><name>onMergedPartitionLevelDeletion</name></name><argument_list>(<argument><expr><name>mergedDeletion</name></expr></argument>, <argument><expr><name>versions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block>
                        <catch>catch <parameter_list>(<parameter><decl><type><name>AssertionError</name></type> <name>e</name></decl></parameter>)</parameter_list>
                        <block>{<block_content>
                            <comment type="line">// The following can be pretty verbose, but it's really only triggered if a bug happen, so we'd</comment>
                            <comment type="line">// rather get more info to debug than not.</comment>
                            <decl_stmt><decl><type><name>TableMetadata</name></type> <name>table</name> <init>= <expr><call><name><name>command</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>String</name></type> <name>details</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Error merging partition level deletion on %s: merged=%s, versions=%s, sources={%s}, debug info:%n %s"</literal></expr></argument>,
                                                           <argument><expr><name>table</name></expr></argument>,
                                                           <argument><expr><ternary><condition><expr><name>mergedDeletion</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">"null"</literal></expr> </then><else>: <expr><call><name><name>mergedDeletion</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>,
                                                           <argument><expr><literal type="char">'['</literal> <operator>+</operator> <call><name><name>Joiner</name><operator>.</operator><name>on</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>join</name><argument_list>(<argument><expr><call><name>transform</name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>versions</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>rt</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><ternary><condition><expr><name>rt</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">"null"</literal></expr> </then><else>: <expr><call><name><name>rt</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></block_content></block></lambda></expr></condition></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="char">']'</literal></expr></argument>,
                                                           <argument><expr><call><name><name>sources</name><operator>.</operator><name>contacts</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                           <argument><expr><call><name>makeResponsesDebugString</name><argument_list>(<argument><expr><name>partitionKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>details</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                        </block_content>}</block></catch></try>
                    </block_content>}</block></function>

                    <function><type><specifier>public</specifier> <name>Row</name></type> <name>onMergedRows</name><parameter_list>(<parameter><decl><type><name>Row</name></type> <name>merged</name></decl></parameter>, <parameter><decl><type><name><name>Row</name><index>[]</index></name></type> <name>versions</name></decl></parameter>)</parameter_list>
                    <block>{<block_content>
                        <try>try
                        <block>{<block_content>
                            <return>return <expr><call><name><name>rowListener</name><operator>.</operator><name>onMergedRows</name></name><argument_list>(<argument><expr><name>merged</name></expr></argument>, <argument><expr><name>versions</name></expr></argument>)</argument_list></call></expr>;</return>
                        </block_content>}</block>
                        <catch>catch <parameter_list>(<parameter><decl><type><name>AssertionError</name></type> <name>e</name></decl></parameter>)</parameter_list>
                        <block>{<block_content>
                            <comment type="line">// The following can be pretty verbose, but it's really only triggered if a bug happen, so we'd</comment>
                            <comment type="line">// rather get more info to debug than not.</comment>
                            <decl_stmt><decl><type><name>TableMetadata</name></type> <name>table</name> <init>= <expr><call><name><name>command</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>String</name></type> <name>details</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Error merging rows on %s: merged=%s, versions=%s, sources={%s}, debug info:%n %s"</literal></expr></argument>,
                                                           <argument><expr><name>table</name></expr></argument>,
                                                           <argument><expr><ternary><condition><expr><name>merged</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">"null"</literal></expr> </then><else>: <expr><call><name><name>merged</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
                                                           <argument><expr><literal type="char">'['</literal> <operator>+</operator> <call><name><name>Joiner</name><operator>.</operator><name>on</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>join</name><argument_list>(<argument><expr><call><name>transform</name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>versions</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>rt</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><ternary><condition><expr><name>rt</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">"null"</literal></expr> </then><else>: <expr><call><name><name>rt</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></block_content></block></lambda></expr></condition></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="char">']'</literal></expr></argument>,
                                                           <argument><expr><call><name><name>sources</name><operator>.</operator><name>contacts</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                           <argument><expr><call><name>makeResponsesDebugString</name><argument_list>(<argument><expr><name>partitionKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>details</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                        </block_content>}</block></catch></try>
                    </block_content>}</block></function>

                    <function><type><specifier>public</specifier> <name>void</name></type> <name>onMergedRangeTombstoneMarkers</name><parameter_list>(<parameter><decl><type><name>RangeTombstoneMarker</name></type> <name>merged</name></decl></parameter>, <parameter><decl><type><name><name>RangeTombstoneMarker</name><index>[]</index></name></type> <name>versions</name></decl></parameter>)</parameter_list>
                    <block>{<block_content>
                        <try>try
                        <block>{<block_content>
                            <comment type="line">// The code for merging range tombstones is a tad complex and we had the assertions there triggered</comment>
                            <comment type="line">// unexpectedly in a few occasions (CASSANDRA-13237, CASSANDRA-13719). It's hard to get insights</comment>
                            <comment type="line">// when that happen without more context that what the assertion errors give us however, hence the</comment>
                            <comment type="line">// catch here that basically gather as much as context as reasonable.</comment>
                            <expr_stmt><expr><call><name><name>rowListener</name><operator>.</operator><name>onMergedRangeTombstoneMarkers</name></name><argument_list>(<argument><expr><name>merged</name></expr></argument>, <argument><expr><name>versions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block>
                        <catch>catch <parameter_list>(<parameter><decl><type><name>AssertionError</name></type> <name>e</name></decl></parameter>)</parameter_list>
                        <block>{<block_content>

                            <comment type="line">// The following can be pretty verbose, but it's really only triggered if a bug happen, so we'd</comment>
                            <comment type="line">// rather get more info to debug than not.</comment>
                            <decl_stmt><decl><type><name>TableMetadata</name></type> <name>table</name> <init>= <expr><call><name><name>command</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>String</name></type> <name>details</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Error merging RTs on %s: merged=%s, versions=%s, sources={%s}, debug info:%n %s"</literal></expr></argument>,
                                                           <argument><expr><name>table</name></expr></argument>,
                                                           <argument><expr><ternary><condition><expr><name>merged</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">"null"</literal></expr> </then><else>: <expr><call><name><name>merged</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
                                                           <argument><expr><literal type="char">'['</literal> <operator>+</operator> <call><name><name>Joiner</name><operator>.</operator><name>on</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>join</name><argument_list>(<argument><expr><call><name>transform</name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>versions</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>rt</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><ternary><condition><expr><name>rt</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">"null"</literal></expr> </then><else>: <expr><call><name><name>rt</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></block_content></block></lambda></expr></condition></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="char">']'</literal></expr></argument>,
                                                           <argument><expr><call><name><name>sources</name><operator>.</operator><name>contacts</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                           <argument><expr><call><name>makeResponsesDebugString</name><argument_list>(<argument><expr><name>partitionKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>details</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                        </block_content>}</block></catch></try>

                    </block_content>}</block></function>

                    <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name><name>rowListener</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></function>
                }</block></class></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>partitionListener</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>repairedDataTracker</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>repairedDataTracker</name><operator>.</operator><name>verify</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></function>
        }</block></class></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
