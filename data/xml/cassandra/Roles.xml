<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/auth/Roles.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>auth</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>function</name><operator>.</operator><name>BooleanSupplier</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Collectors</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>RequestExecutionException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>UnauthorizedException</name></name>;</import>

<class><specifier>public</specifier> class <name>Roles</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>Roles</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Role</name></type> <name>NO_ROLE</name> <init>= <expr><operator>new</operator> <call><name>Role</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>RolesCache</name></type> <name>cache</name></decl>;</decl_stmt>
    <static>static
    <block>{<block_content>
        <expr_stmt><expr><call><name>initRolesCache</name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getRoleManager</name></name><argument_list>()</argument_list></call></expr></argument>,
                       <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getAuthenticator</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>requireAuthentication</name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></static>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>initRolesCache</name><parameter_list>(<parameter><decl><type><name>IRoleManager</name></type> <name>roleManager</name></decl></parameter>, <parameter><decl><type><name>BooleanSupplier</name></type> <name>enableCache</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>cache</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>cache</name><operator>.</operator><name>unregisterMBean</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>cache</name> <operator>=</operator> <operator>new</operator> <call><name>RolesCache</name><argument_list>(<argument><expr><name>roleManager</name></expr></argument>, <argument><expr><name>enableCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>clearCache</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>cache</name><operator>.</operator><name>invalidate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Identify all roles granted to the supplied Role, including both directly granted
     * and inherited roles.
     * This method is used where we mainly just care about *which* roles are granted to a given role,
     * including when looking up or listing permissions for a role on a given resource.
     *
     * @param primaryRole the Role
     * @return set of all granted Roles for the primary Role
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>RoleResource</name></argument>&gt;</argument_list></name></type> <name>getRoles</name><parameter_list>(<parameter><decl><type><name>RoleResource</name></type> <name>primaryRole</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>cache</name><operator>.</operator><name>getRoleResources</name></name><argument_list>(<argument><expr><name>primaryRole</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get detailed info on all the roles granted to the role identified by the supplied RoleResource.
     * This includes superuser status and login privileges for the primary role and all roles granted directly
     * to it or inherited.
     * The returnred roles may be cached if roles_validity_in_ms &gt; 0
     * This method is used where we need to know specific attributes of the collection of granted roles, i.e.
     * when checking for superuser status which may be inherited from *any* granted role.
     *
     * @param primaryRole identifies the role
     * @return set of detailed info for all of the roles granted to the primary
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Role</name></argument>&gt;</argument_list></name></type> <name>getRoleDetails</name><parameter_list>(<parameter><decl><type><name>RoleResource</name></type> <name>primaryRole</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>cache</name><operator>.</operator><name>getRoles</name></name><argument_list>(<argument><expr><name>primaryRole</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns true if the supplied role or any other role granted to it
     * (directly or indirectly) has superuser status.
     *
     * @param role the primary role
     * @return true if the role has superuser status, false otherwise
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>hasSuperuserStatus</name><parameter_list>(<parameter><decl><type><name>RoleResource</name></type> <name>role</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Role</name></type> <name>r</name> <range>: <expr><call><name>getRoleDetails</name><argument_list>(<argument><expr><name>role</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>.</operator><name>isSuper</name></name></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>RequestExecutionException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Failed to authorize {} for super-user permission"</literal></expr></argument>, <argument><expr><call><name><name>role</name><operator>.</operator><name>getRoleName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>UnauthorizedException</name><argument_list>(<argument><expr><literal type="string">"Unable to perform authorization of super-user permission: "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns true if the supplied role has the login privilege. This cannot be inherited, so
     * returns true iff the named role has that bit set.
     * @param role the role identifier
     * @return true if the role has the canLogin privilege, false otherwise
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>canLogin</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>RoleResource</name></type> <name>role</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Role</name></type> <name>r</name> <range>: <expr><call><name>getRoleDetails</name><argument_list>(<argument><expr><name>role</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>r</name><operator>.</operator><name>resource</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>role</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><name><name>r</name><operator>.</operator><name>canLogin</name></name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>RequestExecutionException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Failed to authorize {} for login permission"</literal></expr></argument>, <argument><expr><call><name><name>role</name><operator>.</operator><name>getRoleName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>UnauthorizedException</name><argument_list>(<argument><expr><literal type="string">"Unable to perform authorization of login permission: "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the map of custom options for the named role. These options are not inherited from granted roles, but
     * are set directly.
     * @param role the role identifier
     * @return map of option_name -&gt; value. If no options are set for the named role, the map will be empty
     * but never null.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getOptions</name><parameter_list>(<parameter><decl><type><name>RoleResource</name></type> <name>role</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>Role</name></type> <name>r</name> <range>: <expr><call><name>getRoleDetails</name><argument_list>(<argument><expr><name>role</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>r</name><operator>.</operator><name>resource</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>role</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name><name>r</name><operator>.</operator><name>options</name></name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

        <return>return <expr><name><name>NO_ROLE</name><operator>.</operator><name>options</name></name></expr>;</return>
    </block_content>}</block></function>

   <comment type="block" format="javadoc">/**
    * Return the NullObject Role instance which can be safely used to indicate no information is available
    * when querying for a specific named role.
    * @return singleton null role object
    */</comment>
   <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Role</name></type> <name>nullRole</name><parameter_list>()</parameter_list>
   <block>{<block_content>
       <return>return <expr><name>NO_ROLE</name></expr>;</return>
   </block_content>}</block></function>

   <comment type="block" format="javadoc">/**
    * Just a convenience method which compares a role instance with the null object version, indicating if the
    * return from some query/lookup method was a valid Role or indicates that the role does not exist.
    * @param role
    * @return true if the supplied role is the null role instance, false otherwise.
    */</comment>
   <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isNullRole</name><parameter_list>(<parameter><decl><type><name>Role</name></type> <name>role</name></decl></parameter>)</parameter_list>
   <block>{<block_content>
       <return>return <expr><call><name><name>NO_ROLE</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>role</name></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>


   <comment type="block" format="javadoc">/**
    * Constructs a Role object from a RoleResource, using the methods of the supplied IRoleManager.
    * This is used by the default implementation of IRoleManager#getRoleDetails so that IRoleManager impls
    * which don't implement an optimized getRoleDetails remain compatible. Depending on the IRoleManager
    * implementation this could be quite heavyweight, so should not be used on any hot path.
    *
    * @param resource identifies the role
    * @param roleManager provides lookup functions to retrieve role info
    * @return Role object including superuser status, login privilege, custom options and the set of roles
    * granted to identified role.
    */</comment>
   <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Role</name></type> <name>fromRoleResource</name><parameter_list>(<parameter><decl><type><name>RoleResource</name></type> <name>resource</name></decl></parameter>, <parameter><decl><type><name>IRoleManager</name></type> <name>roleManager</name></decl></parameter>)</parameter_list>
   <block>{<block_content>
       <return>return <expr><operator>new</operator> <call><name>Role</name><argument_list>(<argument><expr><call><name><name>resource</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>,
                       <argument><expr><call><name><name>roleManager</name><operator>.</operator><name>isSuper</name></name><argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr></argument>,
                       <argument><expr><call><name><name>roleManager</name><operator>.</operator><name>canLogin</name></name><argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr></argument>,
                       <argument><expr><call><name><name>roleManager</name><operator>.</operator><name>getCustomOptions</name></name><argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr></argument>,
                       <argument><expr><call><name><name>roleManager</name><operator>.</operator><name>getRoles</name></name><argument_list>(<argument><expr><name>resource</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call>
                                  <operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call>
                                  <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>RoleResource</name><operator>::</operator><name>getRoleName</name></expr></argument>)</argument_list></call>
                                  <operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toSet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
   </block_content>}</block></function>
}</block></class>
</unit>
