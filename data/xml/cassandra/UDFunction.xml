<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/cql3/functions/UDFunction.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>functions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>management</name><operator>.</operator><name>ManagementFactory</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>management</name><operator>.</operator><name>ThreadMXBean</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>InetAddress</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Enumeration</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Optional</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>CompletableFuture</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Callable</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ExecutionException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ExecutorService</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Executors</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Future</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeoutException</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Objects</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Lists</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>Config</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>ColumnIdentifier</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>CqlBuilder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>SchemaElement</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>functions</name><operator>.</operator><name>types</name><operator>.</operator><name>DataType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>functions</name><operator>.</operator><name>types</name><operator>.</operator><name>TypeCodec</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>AbstractType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>UserType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>FunctionExecutionException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>InvalidRequestException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>ClientWarn</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>tracing</name><operator>.</operator><name>Tracing</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>transport</name><operator>.</operator><name>ProtocolVersion</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>JVMStabilityInspector</name></name>;</import>

<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name><operator>.</operator><name>any</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name><operator>.</operator><name>transform</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Base class for User Defined Functions.
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>UDFunction</name> <super_list><extends>extends <super><name>AbstractFunction</name></super></extends> <implements>implements <super><name>ScalarFunction</name></super>, <super><name>SchemaElement</name></super></implements></super_list>
<block>{
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>UDFunction</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>ThreadMXBean</name></type> <name>threadMXBean</name> <init>= <expr><call><name><name>ManagementFactory</name><operator>.</operator><name>getThreadMXBean</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>&gt;</argument_list></name></type> <name>argNames</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>String</name></type> <name>language</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>String</name></type> <name>body</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name><name><name>TypeCodec</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name><index>[]</index></name></type> <name>argCodecs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name><name>TypeCodec</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>returnCodec</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>calledOnNullInput</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>UDFContext</name></type> <name>udfContext</name></decl>;</decl_stmt>

    <comment type="line">//</comment>
    <comment type="line">// Access to classes is controlled via allow and disallow lists.</comment>
    <comment type="line">//</comment>
    <comment type="line">// When a class is requested (both during compilation and runtime),</comment>
    <comment type="line">// the allowedPatterns array is searched first, whether the</comment>
    <comment type="line">// requested name matches one of the patterns. If not, nothing is</comment>
    <comment type="line">// returned from the class-loader - meaning ClassNotFoundException</comment>
    <comment type="line">// during runtime and "type could not resolved" during compilation.</comment>
    <comment type="line">//</comment>
    <comment type="line">// If an allowed pattern has been found, the disallowedPatterns</comment>
    <comment type="line">// array is searched for a match. If a match is found, class-loader</comment>
    <comment type="line">// rejects access. Otherwise the class/resource can be loaded.</comment>
    <comment type="line">//</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>allowedPatterns</name> <init>=
    <expr><block>{
    <expr><literal type="string">"com/google/common/reflect/TypeToken"</literal></expr>,
    <expr><literal type="string">"java/io/IOException.class"</literal></expr>,
    <expr><literal type="string">"java/io/Serializable.class"</literal></expr>,
    <expr><literal type="string">"java/lang/"</literal></expr>,
    <expr><literal type="string">"java/math/"</literal></expr>,
    <expr><literal type="string">"java/net/InetAddress.class"</literal></expr>,
    <expr><literal type="string">"java/net/Inet4Address.class"</literal></expr>,
    <expr><literal type="string">"java/net/Inet6Address.class"</literal></expr>,
    <expr><literal type="string">"java/net/UnknownHostException.class"</literal></expr>, <comment type="line">// req'd by InetAddress</comment>
    <expr><literal type="string">"java/net/NetworkInterface.class"</literal></expr>, <comment type="line">// req'd by InetAddress</comment>
    <expr><literal type="string">"java/net/SocketException.class"</literal></expr>, <comment type="line">// req'd by InetAddress</comment>
    <expr><literal type="string">"java/nio/Buffer.class"</literal></expr>,
    <expr><literal type="string">"java/nio/ByteBuffer.class"</literal></expr>,
    <expr><literal type="string">"java/text/"</literal></expr>,
    <expr><literal type="string">"java/time/"</literal></expr>,
    <expr><literal type="string">"java/util/"</literal></expr>,
    <expr><literal type="string">"org/apache/cassandra/cql3/functions/types/"</literal></expr>,
    <expr><literal type="string">"org/apache/cassandra/cql3/functions/JavaUDF.class"</literal></expr>,
    <expr><literal type="string">"org/apache/cassandra/cql3/functions/UDFContext.class"</literal></expr>,
    <expr><literal type="string">"org/apache/cassandra/exceptions/"</literal></expr>,
    <expr><literal type="string">"org/apache/cassandra/transport/ProtocolVersion.class"</literal></expr>
    }</block></expr></init></decl>;</decl_stmt>
    <comment type="line">// Only need to disallow a pattern, if it would otherwise be allowed via allowedPatterns</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>disallowedPatterns</name> <init>=
    <expr><block>{
    <expr><literal type="string">"com/datastax/driver/core/Cluster.class"</literal></expr>,
    <expr><literal type="string">"com/datastax/driver/core/Metrics.class"</literal></expr>,
    <expr><literal type="string">"com/datastax/driver/core/NettyOptions.class"</literal></expr>,
    <expr><literal type="string">"com/datastax/driver/core/Session.class"</literal></expr>,
    <expr><literal type="string">"com/datastax/driver/core/Statement.class"</literal></expr>,
    <expr><literal type="string">"com/datastax/driver/core/TimestampGenerator.class"</literal></expr>, <comment type="line">// indirectly covers ServerSideTimestampGenerator + ThreadLocalMonotonicTimestampGenerator</comment>
    <expr><literal type="string">"java/lang/Compiler.class"</literal></expr>,
    <expr><literal type="string">"java/lang/InheritableThreadLocal.class"</literal></expr>,
    <expr><literal type="string">"java/lang/Package.class"</literal></expr>,
    <expr><literal type="string">"java/lang/Process.class"</literal></expr>,
    <expr><literal type="string">"java/lang/ProcessBuilder.class"</literal></expr>,
    <expr><literal type="string">"java/lang/ProcessEnvironment.class"</literal></expr>,
    <expr><literal type="string">"java/lang/ProcessImpl.class"</literal></expr>,
    <expr><literal type="string">"java/lang/Runnable.class"</literal></expr>,
    <expr><literal type="string">"java/lang/Runtime.class"</literal></expr>,
    <expr><literal type="string">"java/lang/Shutdown.class"</literal></expr>,
    <expr><literal type="string">"java/lang/Thread.class"</literal></expr>,
    <expr><literal type="string">"java/lang/ThreadGroup.class"</literal></expr>,
    <expr><literal type="string">"java/lang/ThreadLocal.class"</literal></expr>,
    <expr><literal type="string">"java/lang/instrument/"</literal></expr>,
    <expr><literal type="string">"java/lang/invoke/"</literal></expr>,
    <expr><literal type="string">"java/lang/management/"</literal></expr>,
    <expr><literal type="string">"java/lang/ref/"</literal></expr>,
    <expr><literal type="string">"java/lang/reflect/"</literal></expr>,
    <expr><literal type="string">"java/util/ServiceLoader.class"</literal></expr>,
    <expr><literal type="string">"java/util/Timer.class"</literal></expr>,
    <expr><literal type="string">"java/util/concurrent/"</literal></expr>,
    <expr><literal type="string">"java/util/function/"</literal></expr>,
    <expr><literal type="string">"java/util/jar/"</literal></expr>,
    <expr><literal type="string">"java/util/logging/"</literal></expr>,
    <expr><literal type="string">"java/util/prefs/"</literal></expr>,
    <expr><literal type="string">"java/util/spi/"</literal></expr>,
    <expr><literal type="string">"java/util/stream/"</literal></expr>,
    <expr><literal type="string">"java/util/zip/"</literal></expr>,
    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>disallowedPatternsSyncUDF</name> <init>=
    <expr><block>{
    <expr><literal type="string">"java/lang/System.class"</literal></expr>
    }</block></expr></init></decl>;</decl_stmt>

    <function><type><specifier>static</specifier> <name>boolean</name></type> <name>secureResource</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>resource</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <while>while <condition>(<expr><call><name><name>resource</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>resource</name> <operator>=</operator> <call><name><name>resource</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

        <for>for <control>(<init><decl><type><name>String</name></type> <name>allowed</name> <range>: <expr><name>allowedPatterns</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>resource</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>allowed</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// resource is in allowedPatterns, let's see if it is not explicitly disallowed</comment>
                <for>for <control>(<init><decl><type><name>String</name></type> <name>disallowed</name> <range>: <expr><name>disallowedPatterns</name></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>resource</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>disallowed</name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"access denied: resource {}"</literal></expr></argument>, <argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>enableUserDefinedFunctionsThreads</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>allowExtraInsecureUDFs</name></name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <for>for <control>(<init><decl><type><name>String</name></type> <name>disallowed</name> <range>: <expr><name>disallowedPatternsSyncUDF</name></expr></range></decl></init>)</control>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><call><name><name>resource</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>disallowed</name></expr></argument>)</argument_list></call></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"access denied: resource {}"</literal></expr></argument>, <argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></if></if_stmt>

                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt></block_content></block></for>

        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"access denied: resource {}"</literal></expr></argument>, <argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// setup the UDF class loader with a context class loader as a parent so that we have full control about what class/resource UDF uses</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>ClassLoader</name></type> <name>udfClassLoader</name> <init>= <expr><operator>new</operator> <call><name>UDFClassLoader</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>protected</specifier> <name>UDFunction</name><parameter_list>(<parameter><decl><type><name>FunctionName</name></type> <name>name</name></decl></parameter>,
                         <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>&gt;</argument_list></name></type> <name>argNames</name></decl></parameter>,
                         <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>argTypes</name></decl></parameter>,
                         <parameter><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>returnType</name></decl></parameter>,
                         <parameter><decl><type><name>boolean</name></type> <name>calledOnNullInput</name></decl></parameter>,
                         <parameter><decl><type><name>String</name></type> <name>language</name></decl></parameter>,
                         <parameter><decl><type><name>String</name></type> <name>body</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>argNames</name></expr></argument>, <argument><expr><name>argTypes</name></expr></argument>, <argument><expr><call><name><name>UDHelper</name><operator>.</operator><name>driverTypes</name></name><argument_list>(<argument><expr><name>argTypes</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>returnType</name></expr></argument>,
             <argument><expr><call><name><name>UDHelper</name><operator>.</operator><name>driverType</name></name><argument_list>(<argument><expr><name>returnType</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>calledOnNullInput</name></expr></argument>, <argument><expr><name>language</name></expr></argument>, <argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>protected</specifier> <name>UDFunction</name><parameter_list>(<parameter><decl><type><name>FunctionName</name></type> <name>name</name></decl></parameter>,
                         <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>&gt;</argument_list></name></type> <name>argNames</name></decl></parameter>,
                         <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>argTypes</name></decl></parameter>,
                         <parameter><decl><type><name><name>DataType</name><index>[]</index></name></type> <name>argDataTypes</name></decl></parameter>,
                         <parameter><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>returnType</name></decl></parameter>,
                         <parameter><decl><type><name>DataType</name></type> <name>returnDataType</name></decl></parameter>,
                         <parameter><decl><type><name>boolean</name></type> <name>calledOnNullInput</name></decl></parameter>,
                         <parameter><decl><type><name>String</name></type> <name>language</name></decl></parameter>,
                         <parameter><decl><type><name>String</name></type> <name>body</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>argTypes</name></expr></argument>, <argument><expr><name>returnType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <assert>assert <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>argNames</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>argNames</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>:</operator> <literal type="string">"duplicate argument names"</literal></expr>;</assert>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>argNames</name></name> <operator>=</operator> <name>argNames</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>language</name></name> <operator>=</operator> <name>language</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>body</name></name> <operator>=</operator> <name>body</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>argCodecs</name></name> <operator>=</operator> <call><name><name>UDHelper</name><operator>.</operator><name>codecsFor</name></name><argument_list>(<argument><expr><name>argDataTypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>returnCodec</name></name> <operator>=</operator> <call><name><name>UDHelper</name><operator>.</operator><name>codecFor</name></name><argument_list>(<argument><expr><name>returnDataType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>calledOnNullInput</name></name> <operator>=</operator> <name>calledOnNullInput</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>KeyspaceMetadata</name></type> <name>keyspaceMetadata</name> <init>= <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getKeyspaceMetadata</name></name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>keyspace</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>udfContext</name></name> <operator>=</operator> <operator>new</operator> <call><name>UDFContextImpl</name><argument_list>(<argument><expr><name>argNames</name></expr></argument>, <argument><expr><name>argCodecs</name></expr></argument>, <argument><expr><name>returnCodec</name></expr></argument>,
                                             <argument><expr><name>keyspaceMetadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>UDFunction</name></type> <name>tryCreate</name><parameter_list>(<parameter><decl><type><name>FunctionName</name></type> <name>name</name></decl></parameter>,
                                       <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>&gt;</argument_list></name></type> <name>argNames</name></decl></parameter>,
                                       <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>argTypes</name></decl></parameter>,
                                       <parameter><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>returnType</name></decl></parameter>,
                                       <parameter><decl><type><name>boolean</name></type> <name>calledOnNullInput</name></decl></parameter>,
                                       <parameter><decl><type><name>String</name></type> <name>language</name></decl></parameter>,
                                       <parameter><decl><type><name>String</name></type> <name>body</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <try>try
        <block>{<block_content>
            <return>return <expr><call><name>create</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>argNames</name></expr></argument>, <argument><expr><name>argTypes</name></expr></argument>, <argument><expr><name>returnType</name></expr></argument>, <argument><expr><name>calledOnNullInput</name></expr></argument>, <argument><expr><name>language</name></expr></argument>, <argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidRequestException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name>createBrokenFunction</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>argNames</name></expr></argument>, <argument><expr><name>argTypes</name></expr></argument>, <argument><expr><name>returnType</name></expr></argument>, <argument><expr><name>calledOnNullInput</name></expr></argument>, <argument><expr><name>language</name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>UDFunction</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>FunctionName</name></type> <name>name</name></decl></parameter>,
                                    <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>&gt;</argument_list></name></type> <name>argNames</name></decl></parameter>,
                                    <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>argTypes</name></decl></parameter>,
                                    <parameter><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>returnType</name></decl></parameter>,
                                    <parameter><decl><type><name>boolean</name></type> <name>calledOnNullInput</name></decl></parameter>,
                                    <parameter><decl><type><name>String</name></type> <name>language</name></decl></parameter>,
                                    <parameter><decl><type><name>String</name></type> <name>body</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>assertUdfsEnabled</name><argument_list>(<argument><expr><name>language</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch>switch <condition>(<expr><name>language</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><literal type="string">"java"</literal></expr>:</case>
                <return>return <expr><operator>new</operator> <call><name>JavaBasedUDFunction</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>argNames</name></expr></argument>, <argument><expr><name>argTypes</name></expr></argument>, <argument><expr><name>returnType</name></expr></argument>, <argument><expr><name>calledOnNullInput</name></expr></argument>, <argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</return>
            <default>default:</default>
                <return>return <expr><operator>new</operator> <call><name>ScriptBasedUDFunction</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>argNames</name></expr></argument>, <argument><expr><name>argTypes</name></expr></argument>, <argument><expr><name>returnType</name></expr></argument>, <argument><expr><name>calledOnNullInput</name></expr></argument>, <argument><expr><name>language</name></expr></argument>, <argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * It can happen that a function has been declared (is listed in the scheam) but cannot
     * be loaded (maybe only on some nodes). This is the case for instance if the class defining
     * the class is not on the classpath for some of the node, or after a restart. In that case,
     * we create a "fake" function so that:
     *  1) the broken function can be dropped easily if that is what people want to do.
     *  2) we return a meaningful error message if the function is executed (something more precise
     *     than saying that the function doesn't exist)
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>UDFunction</name></type> <name>createBrokenFunction</name><parameter_list>(<parameter><decl><type><name>FunctionName</name></type> <name>name</name></decl></parameter>,
                                                  <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>&gt;</argument_list></name></type> <name>argNames</name></decl></parameter>,
                                                  <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>argTypes</name></decl></parameter>,
                                                  <parameter><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>returnType</name></decl></parameter>,
                                                  <parameter><decl><type><name>boolean</name></type> <name>calledOnNullInput</name></decl></parameter>,
                                                  <parameter><decl><type><name>String</name></type> <name>language</name></decl></parameter>,
                                                  <parameter><decl><type><name>String</name></type> <name>body</name></decl></parameter>,
                                                  <parameter><decl><type><name>InvalidRequestException</name></type> <name>reason</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <class><super><name>UDFunction</name></super><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>argNames</name></expr></argument>, <argument><expr><name>argTypes</name></expr></argument>, <argument><expr><name>returnType</name></expr></argument>, <argument><expr><name>calledOnNullInput</name></expr></argument>, <argument><expr><name>language</name></expr></argument>, <argument><expr><name>body</name></expr></argument>)</argument_list>
        <block>{
            <function><type><specifier>protected</specifier> <name>ExecutorService</name></type> <name>executor</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <return>return <expr><call><name><name>Executors</name><operator>.</operator><name>newSingleThreadExecutor</name></name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>protected</specifier> <name>Object</name></type> <name>executeAggregateUserDefined</name><parameter_list>(<parameter><decl><type><name>ProtocolVersion</name></type> <name>protocolVersion</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>firstParam</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>parameters</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <throw>throw <expr><call><name>broken</name><argument_list>()</argument_list></call></expr>;</throw>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>executeUserDefined</name><parameter_list>(<parameter><decl><type><name>ProtocolVersion</name></type> <name>protocolVersion</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>parameters</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <throw>throw <expr><call><name>broken</name><argument_list>()</argument_list></call></expr>;</throw>
            </block_content>}</block></function>

            <function><type><specifier>private</specifier> <name>InvalidRequestException</name></type> <name>broken</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Function '%s' exists but hasn't been loaded successfully "</literal>
                                                                 <operator>+</operator> <literal type="string">"for the following reason: %s. Please see the server log for details"</literal></expr></argument>,
                                                                 <argument><expr><name>this</name></expr></argument>,
                                                                 <argument><expr><call><name><name>reason</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>SchemaElementType</name></type> <name>elementType</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>SchemaElementType</name><operator>.</operator><name>FUNCTION</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toCqlString</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>withInternals</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>ifNotExists</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CqlBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>CqlBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"CREATE FUNCTION "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>ifNotExists</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"IF NOT EXISTS "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>name</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>m</name> <init>= <expr><call><name>argNames</name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>argNames</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                   <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call>
                   <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name>toCqlString</name><argument_list>(<argument><expr><call><name>argTypes</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>newLine</name><argument_list>()</argument_list></call>
               <operator>.</operator><call><name>increaseIndent</name><argument_list>()</argument_list></call>
               <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>isCalledOnNullInput</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"CALLED"</literal></expr> </then><else>: <expr><literal type="string">"RETURNS NULL"</literal></expr></else></ternary></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" ON NULL INPUT"</literal></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>newLine</name><argument_list>()</argument_list></call>
               <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"RETURNS "</literal></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name>toCqlString</name><argument_list>(<argument><expr><call><name>returnType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>newLine</name><argument_list>()</argument_list></call>
               <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"LANGUAGE "</literal></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name>language</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>newLine</name><argument_list>()</argument_list></call>
               <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"AS $$"</literal></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name>body</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"$$;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><call><name><name>builder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>ByteBuffer</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>ProtocolVersion</name></type> <name>protocolVersion</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>parameters</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>assertUdfsEnabled</name><argument_list>(<argument><expr><name>language</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isCallableWrtNullable</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>long</name></type> <name>tStart</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>parameters</name> <operator>=</operator> <call><name>makeEmptyParametersNull</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try
        <block>{<block_content>
            <comment type="line">// Using async UDF execution is expensive (adds about 100us overhead per invocation on a Core-i7 MBPr).</comment>
            <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>result</name> <init>= <expr><ternary><condition><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>enableUserDefinedFunctionsThreads</name></name><argument_list>()</argument_list></call></expr>
                                ?</condition><then> <expr><call><name>executeAsync</name><argument_list>(<argument><expr><name>protocolVersion</name></expr></argument>, <argument><expr><name>parameters</name></expr></argument>)</argument_list></call></expr>
                                </then><else>: <expr><call><name>executeUserDefined</name><argument_list>(<argument><expr><name>protocolVersion</name></expr></argument>, <argument><expr><name>parameters</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Executed UDF {} in {}\u03bcs"</literal></expr></argument>, <argument><expr><call><name>name</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>tStart</name><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidRequestException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><name>e</name></expr>;</throw>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Invocation of user-defined function '{}' failed"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>t</name> <operator>instanceof</operator> <name>VirtualMachineError</name></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>(</operator><name>VirtualMachineError</name><operator>)</operator> <name>t</name></expr>;</throw></block_content></block></if></if_stmt>
            <throw>throw <expr><call><name><name>FunctionExecutionException</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Like {@link ScalarFunction#execute(ProtocolVersion, List)} but the first parameter is already in non-serialized form.
     * Remaining parameters (2nd paramters and all others) are in {@code parameters}.
     * This is used to prevent superfluous (de)serialization of the state of aggregates.
     * Means: scalar functions of aggregates are called using this variant.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>Object</name></type> <name>executeForAggregate</name><parameter_list>(<parameter><decl><type><name>ProtocolVersion</name></type> <name>protocolVersion</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>firstParam</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>parameters</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>assertUdfsEnabled</name><argument_list>(<argument><expr><name>language</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>calledOnNullInput</name> <operator>&amp;&amp;</operator> <name>firstParam</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><call><name>isCallableWrtNullable</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>long</name></type> <name>tStart</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>parameters</name> <operator>=</operator> <call><name>makeEmptyParametersNull</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try
        <block>{<block_content>
            <comment type="line">// Using async UDF execution is expensive (adds about 100us overhead per invocation on a Core-i7 MBPr).</comment>
            <decl_stmt><decl><type><name>Object</name></type> <name>result</name> <init>= <expr><ternary><condition><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>enableUserDefinedFunctionsThreads</name></name><argument_list>()</argument_list></call></expr>
                                ?</condition><then> <expr><call><name>executeAggregateAsync</name><argument_list>(<argument><expr><name>protocolVersion</name></expr></argument>, <argument><expr><name>firstParam</name></expr></argument>, <argument><expr><name>parameters</name></expr></argument>)</argument_list></call></expr>
                                </then><else>: <expr><call><name>executeAggregateUserDefined</name><argument_list>(<argument><expr><name>protocolVersion</name></expr></argument>, <argument><expr><name>firstParam</name></expr></argument>, <argument><expr><name>parameters</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Executed UDF {} in {}\u03bcs"</literal></expr></argument>, <argument><expr><call><name>name</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>tStart</name><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidRequestException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><name>e</name></expr>;</throw>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Invocation of user-defined function '{}' failed"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>t</name> <operator>instanceof</operator> <name>VirtualMachineError</name></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>(</operator><name>VirtualMachineError</name><operator>)</operator> <name>t</name></expr>;</throw></block_content></block></if></if_stmt>
            <throw>throw <expr><call><name><name>FunctionExecutionException</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertUdfsEnabled</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>language</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>enableUserDefinedFunctions</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>InvalidRequestException</name><argument_list>(<argument><expr><literal type="string">"User-defined functions are disabled in cassandra.yaml - set enable_user_defined_functions=true to enable"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><literal type="string">"java"</literal><operator>.</operator><call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name>language</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>enableScriptedUserDefinedFunctions</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>InvalidRequestException</name><argument_list>(<argument><expr><literal type="string">"Scripted user-defined functions are disabled in cassandra.yaml - set enable_scripted_user_defined_functions=true to enable if you are aware of the security risks"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name>void</name></type> <name>initializeThread</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <comment type="line">// Get the TypeCodec stuff in Java Driver initialized.</comment>
        <comment type="line">// This is to get the classes loaded outside of the restricted sandbox's security context of a UDF.</comment>
        <expr_stmt><expr><call><name><name>TypeCodec</name><operator>.</operator><name>inet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>format</name><argument_list>(<argument><expr><call><name><name>InetAddress</name><operator>.</operator><name>getLoopbackAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>TypeCodec</name><operator>.</operator><name>ascii</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>format</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <class><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>ThreadIdAndCpuTime</name> <super_list><extends>extends <super><name><name>CompletableFuture</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></super></extends></super_list>
    <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>threadId</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>cpuTime</name></decl>;</decl_stmt>

        <constructor><name>ThreadIdAndCpuTime</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <comment type="line">// Looks weird?</comment>
            <comment type="line">// This call "just" links this class to java.lang.management - otherwise UDFs (script UDFs) might fail due to</comment>
            <comment type="line">//      java.security.AccessControlException: access denied: ("java.lang.RuntimePermission" "accessClassInPackage.java.lang.management")</comment>
            <comment type="line">// because class loading would be deferred until setup() is executed - but setup() is called with</comment>
            <comment type="line">// limited privileges.</comment>
            <expr_stmt><expr><call><name><name>threadMXBean</name><operator>.</operator><name>getCurrentThreadCpuTime</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><name>void</name></type> <name>setup</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>threadId</name></name> <operator>=</operator> <call><name><name>Thread</name><operator>.</operator><name>currentThread</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cpuTime</name></name> <operator>=</operator> <call><name><name>threadMXBean</name><operator>.</operator><name>getCurrentThreadCpuTime</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>complete</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>
    }</block></class>

    <function><type><specifier>private</specifier> <name>ByteBuffer</name></type> <name>executeAsync</name><parameter_list>(<parameter><decl><type><name>ProtocolVersion</name></type> <name>protocolVersion</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>parameters</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ThreadIdAndCpuTime</name></type> <name>threadIdAndCpuTime</name> <init>= <expr><operator>new</operator> <call><name>ThreadIdAndCpuTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name>async</name><argument_list>(<argument><expr><name>threadIdAndCpuTime</name></expr></argument>, <argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{<block_content>
            <expr_stmt><expr><call><name><name>threadIdAndCpuTime</name><operator>.</operator><name>setup</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>executeUserDefined</name><argument_list>(<argument><expr><name>protocolVersion</name></expr></argument>, <argument><expr><name>parameters</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Like {@link #executeAsync(ProtocolVersion, List)} but the first parameter is already in non-serialized form.
     * Remaining parameters (2nd paramters and all others) are in {@code parameters}.
     * This is used to prevent superfluous (de)serialization of the state of aggregates.
     * Means: scalar functions of aggregates are called using this variant.
     */</comment>
    <function><type><specifier>private</specifier> <name>Object</name></type> <name>executeAggregateAsync</name><parameter_list>(<parameter><decl><type><name>ProtocolVersion</name></type> <name>protocolVersion</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>firstParam</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>parameters</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ThreadIdAndCpuTime</name></type> <name>threadIdAndCpuTime</name> <init>= <expr><operator>new</operator> <call><name>ThreadIdAndCpuTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name>async</name><argument_list>(<argument><expr><name>threadIdAndCpuTime</name></expr></argument>, <argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{<block_content>
            <expr_stmt><expr><call><name><name>threadIdAndCpuTime</name><operator>.</operator><name>setup</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>executeAggregateUserDefined</name><argument_list>(<argument><expr><name>protocolVersion</name></expr></argument>, <argument><expr><name>firstParam</name></expr></argument>, <argument><expr><name>parameters</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name>T</name></type> <name>async</name><parameter_list>(<parameter><decl><type><name>ThreadIdAndCpuTime</name></type> <name>threadIdAndCpuTime</name></decl></parameter>, <parameter><decl><type><name><name>Callable</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>callable</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Future</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>future</name> <init>= <expr><call><name>executor</name><argument_list>()</argument_list></call><operator>.</operator><call><name>submit</name><argument_list>(<argument><expr><name>callable</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <try>try
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getUserDefinedFunctionWarnTimeout</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <try>try
                <block>{<block_content>
                    <return>return <expr><call><name><name>future</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getUserDefinedFunctionWarnTimeout</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block>
                <catch>catch <parameter_list>(<parameter><decl><type><name>TimeoutException</name></type> <name>e</name></decl></parameter>)</parameter_list>
                <block>{<block_content>

                    <comment type="line">// log and emit a warning that UDF execution took long</comment>
                    <decl_stmt><decl><type><name>String</name></type> <name>warn</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"User defined function %s ran longer than %dms"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getUserDefinedFunctionWarnTimeout</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><name>warn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>ClientWarn</name><operator>.</operator><name>instance</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><name>warn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></catch></try></block_content></block></if></if_stmt>

            <comment type="line">// retry with difference of warn-timeout to fail-timeout</comment>
            <return>return <expr><call><name><name>future</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getUserDefinedFunctionFailTimeout</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getUserDefinedFunctionWarnTimeout</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>currentThread</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>interrupt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>ExecutionException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>Throwable</name></type> <name>c</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>c</name> <operator>instanceof</operator> <name>RuntimeException</name></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>(</operator><name>RuntimeException</name><operator>)</operator> <name>c</name></expr>;</throw></block_content></block></if></if_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch>
        <catch>catch <parameter_list>(<parameter><decl><type><name>TimeoutException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <comment type="line">// retry a last time with the difference of UDF-fail-timeout to consumed CPU time (just in case execution hit a badly timed GC)</comment>
            <try>try
            <block>{<block_content>
                <comment type="line">//The threadIdAndCpuTime shouldn't take a long time to be set so this should return immediately</comment>
                <expr_stmt><expr><call><name><name>threadIdAndCpuTime</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>SECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>long</name></type> <name>cpuTimeMillis</name> <init>= <expr><call><name><name>threadMXBean</name><operator>.</operator><name>getThreadCpuTime</name></name><argument_list>(<argument><expr><name><name>threadIdAndCpuTime</name><operator>.</operator><name>threadId</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>threadIdAndCpuTime</name><operator>.</operator><name>cpuTime</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>cpuTimeMillis</name> <operator>/=</operator> <literal type="number">1000000L</literal></expr>;</expr_stmt>

                <return>return <expr><call><name><name>future</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getUserDefinedFunctionFailTimeout</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>cpuTimeMillis</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e1</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>currentThread</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>interrupt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch>
            <catch>catch <parameter_list>(<parameter><decl><type><name>ExecutionException</name></type> <name>e1</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name>Throwable</name></type> <name>c</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>c</name> <operator>instanceof</operator> <name>RuntimeException</name></expr>)</condition><block type="pseudo"><block_content>
                    <throw>throw <expr><operator>(</operator><name>RuntimeException</name><operator>)</operator> <name>c</name></expr>;</throw></block_content></block></if></if_stmt>
                <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch>
            <catch>catch <parameter_list>(<parameter><decl><type><name>TimeoutException</name></type> <name>e1</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <decl_stmt><decl><type><name>TimeoutException</name></type> <name>cause</name> <init>= <expr><operator>new</operator> <call><name>TimeoutException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"User defined function %s ran longer than %dms%s"</literal></expr></argument>,
                                                                            <argument><expr><name>this</name></expr></argument>,
                                                                            <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getUserDefinedFunctionFailTimeout</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                                            <argument><expr><ternary><condition><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getUserFunctionTimeoutPolicy</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Config</name><operator>.</operator><name>UserFunctionTimeoutPolicy</name><operator>.</operator><name>ignore</name></name></expr>
                                                                            ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">" - will stop Cassandra VM"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>FunctionExecutionException</name></type> <name>fe</name> <init>= <expr><call><name><name>FunctionExecutionException</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>cause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>JVMStabilityInspector</name><operator>.</operator><name>userFunctionTimeout</name></name><argument_list>(<argument><expr><name>cause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw>throw <expr><name>fe</name></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>makeEmptyParametersNull</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>parameters</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>r</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>parameters</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>parameters</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>param</name> <init>= <expr><call><name><name>parameters</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>UDHelper</name><operator>.</operator><name>isNullOrEmpty</name></name><argument_list>(<argument><expr><call><name><name>argTypes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>
                  ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><name>param</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>r</name></expr>;</return>
    </block_content>}</block></function>

    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>ExecutorService</name></type> <name>executor</name><parameter_list>()</parameter_list>;</function_decl>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isCallableWrtNullable</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>parameters</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>calledOnNullInput</name></expr>)</condition><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>parameters</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>UDHelper</name><operator>.</operator><name>isNullOrEmpty</name></name><argument_list>(<argument><expr><call><name><name>argTypes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>parameters</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>ByteBuffer</name></type> <name>executeUserDefined</name><parameter_list>(<parameter><decl><type><name>ProtocolVersion</name></type> <name>protocolVersion</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>parameters</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>Object</name></type> <name>executeAggregateUserDefined</name><parameter_list>(<parameter><decl><type><name>ProtocolVersion</name></type> <name>protocolVersion</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>firstParam</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>parameters</name></decl></parameter>)</parameter_list>;</function_decl>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isAggregate</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isNative</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isCalledOnNullInput</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>calledOnNullInput</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>&gt;</argument_list></name></type> <name>argNames</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>argNames</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>body</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>body</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>language</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>language</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Used by UDF implementations (both Java code generated by {@link JavaBasedUDFunction}
     * and script executor {@link ScriptBasedUDFunction}) to convert the C*
     * serialized representation to the Java object representation.
     *
     * @param protocolVersion the native protocol version used for serialization
     * @param argIndex        index of the UDF input argument
     */</comment>
    <function><type><specifier>protected</specifier> <name>Object</name></type> <name>compose</name><parameter_list>(<parameter><decl><type><name>ProtocolVersion</name></type> <name>protocolVersion</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argIndex</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>compose</name><argument_list>(<argument><expr><name>argCodecs</name></expr></argument>, <argument><expr><name>protocolVersion</name></expr></argument>, <argument><expr><name>argIndex</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <specifier>static</specifier> <name>Object</name></type> <name>compose</name><parameter_list>(<parameter><decl><type><name><name><name>TypeCodec</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name><index>[]</index></name></type> <name>codecs</name></decl></parameter>, <parameter><decl><type><name>ProtocolVersion</name></type> <name>protocolVersion</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argIndex</name></decl></parameter>, <parameter><decl><type><name>ByteBuffer</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>UDHelper</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name><name>codecs</name><index>[<expr><name>argIndex</name></expr>]</index></name></expr></argument>, <argument><expr><name>protocolVersion</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Used by UDF implementations (both Java code generated by {@link JavaBasedUDFunction}
     * and script executor {@link ScriptBasedUDFunction}) to convert the Java
     * object representation for the return value to the C* serialized representation.
     *
     * @param protocolVersion the native protocol version used for serialization
     */</comment>
    <function><type><specifier>protected</specifier> <name>ByteBuffer</name></type> <name>decompose</name><parameter_list>(<parameter><decl><type><name>ProtocolVersion</name></type> <name>protocolVersion</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>decompose</name><argument_list>(<argument><expr><name>returnCodec</name></expr></argument>, <argument><expr><name>protocolVersion</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <specifier>static</specifier> <name>ByteBuffer</name></type> <name>decompose</name><parameter_list>(<parameter><decl><type><name><name>TypeCodec</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>codec</name></decl></parameter>, <parameter><decl><type><name>ProtocolVersion</name></type> <name>protocolVersion</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>UDHelper</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><name>codec</name></expr></argument>, <argument><expr><name>protocolVersion</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>referencesUserType</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>name</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>any</name><argument_list>(<argument><expr><call><name>argTypes</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>t</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>t</name><operator>.</operator><name>referencesUserType</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>returnType</name><operator>.</operator><name>referencesUserType</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>UDFunction</name></type> <name>withUpdatedUserType</name><parameter_list>(<parameter><decl><type><name>UserType</name></type> <name>udt</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>referencesUserType</name><argument_list>(<argument><expr><name><name>udt</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>this</name></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><call><name>tryCreate</name><argument_list>(<argument><expr><name>name</name></expr></argument>,
                         <argument><expr><name>argNames</name></expr></argument>,
                         <argument><expr><call><name><name>Lists</name><operator>.</operator><name>newArrayList</name></name><argument_list>(<argument><expr><call><name>transform</name><argument_list>(<argument><expr><name>argTypes</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>t</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>t</name><operator>.</operator><name>withUpdatedUserType</name></name><argument_list>(<argument><expr><name>udt</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                         <argument><expr><call><name><name>returnType</name><operator>.</operator><name>withUpdatedUserType</name></name><argument_list>(<argument><expr><name>udt</name></expr></argument>)</argument_list></call></expr></argument>,
                         <argument><expr><name>calledOnNullInput</name></expr></argument>,
                         <argument><expr><name>language</name></expr></argument>,
                         <argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>o</name> <operator>instanceof</operator> <name>UDFunction</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>UDFunction</name></type> <name>that</name> <init>= <expr><operator>(</operator><name>UDFunction</name><operator>)</operator><name>o</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>equalsWithoutTypes</name><argument_list>(<argument><expr><name>that</name></expr></argument>)</argument_list></call>
            <operator>&amp;&amp;</operator> <call><name><name>argTypes</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>argTypes</name></name></expr></argument>)</argument_list></call>
            <operator>&amp;&amp;</operator> <call><name><name>returnType</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>returnType</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>equalsWithoutTypes</name><parameter_list>(<parameter><decl><type><name>UDFunction</name></type> <name>other</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>name</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call>
            <operator>&amp;&amp;</operator> <call><name><name>argTypes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>other</name><operator>.</operator><name>argTypes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call>
            <operator>&amp;&amp;</operator> <call><name><name>argNames</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>argNames</name></name></expr></argument>)</argument_list></call>
            <operator>&amp;&amp;</operator> <call><name><name>body</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>body</name></name></expr></argument>)</argument_list></call>
            <operator>&amp;&amp;</operator> <call><name><name>language</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>language</name></name></expr></argument>)</argument_list></call>
            <operator>&amp;&amp;</operator> <name>calledOnNullInput</name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>calledOnNullInput</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>Difference</name></argument>&gt;</argument_list></name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>Function</name></type> <name>function</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>function</name> <operator>instanceof</operator> <name>UDFunction</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>UDFunction</name></type> <name>other</name> <init>= <expr><operator>(</operator><name>UDFunction</name><operator>)</operator> <name>function</name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>equalsWithoutTypes</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name><name>Difference</name><operator>.</operator><name>SHALLOW</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>boolean</name></type> <name>typesDifferDeeply</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>returnType</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>returnType</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>returnType</name><operator>.</operator><name>asCQL3Type</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>returnType</name><operator>.</operator><name>asCQL3Type</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>typesDifferDeeply</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name><name>Difference</name><operator>.</operator><name>SHALLOW</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
        </block_content>}</block></if></if_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>argTypes</name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>thisType</name> <init>= <expr><call><name><name>argTypes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>thatType</name> <init>= <expr><call><name><name>other</name><operator>.</operator><name>argTypes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>thisType</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>thatType</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>thisType</name><operator>.</operator><name>asCQL3Type</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>thatType</name><operator>.</operator><name>asCQL3Type</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>typesDifferDeeply</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name><name>Difference</name><operator>.</operator><name>SHALLOW</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <return>return <expr><ternary><condition><expr><name>typesDifferDeeply</name></expr> ?</condition><then> <expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name><name>Difference</name><operator>.</operator><name>DEEP</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>Optional</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Objects</name><operator>.</operator><name>hashCode</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>Functions</name><operator>.</operator><name>typeHashCode</name></name><argument_list>(<argument><expr><name>argTypes</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Functions</name><operator>.</operator><name>typeHashCode</name></name><argument_list>(<argument><expr><name>returnType</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>returnType</name></expr></argument>, <argument><expr><name>language</name></expr></argument>, <argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>UDFClassLoader</name> <super_list><extends>extends <super><name>ClassLoader</name></super></extends></super_list>
    <block>{
        <comment type="line">// insecureClassLoader is the C* class loader</comment>
        <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>ClassLoader</name></type> <name>insecureClassLoader</name> <init>= <expr><call><name><name>Thread</name><operator>.</operator><name>currentThread</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getContextClassLoader</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>UDFClassLoader</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>insecureClassLoader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>URL</name></type> <name>getResource</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>secureResource</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
            <return>return <expr><call><name><name>insecureClassLoader</name><operator>.</operator><name>getResource</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>protected</specifier> <name>URL</name></type> <name>findResource</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name>getResource</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name>Enumeration</name><argument_list type="generic">&lt;<argument><name>URL</name></argument>&gt;</argument_list></name></type> <name>getResources</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>emptyEnumeration</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>protected</specifier> <name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>findClass</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ClassNotFoundException</name></expr></argument></throws>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>secureResource</name><argument_list>(<argument><expr><call><name><name>name</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">".class"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ClassNotFoundException</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            <return>return <expr><call><name><name>insecureClassLoader</name><operator>.</operator><name>loadClass</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>loadClass</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ClassNotFoundException</name></expr></argument></throws>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>secureResource</name><argument_list>(<argument><expr><call><name><name>name</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">".class"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ClassNotFoundException</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            <return>return <expr><call><name><name>super</name><operator>.</operator><name>loadClass</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
