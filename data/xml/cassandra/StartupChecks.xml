<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/service/StartupChecks.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>management</name><operator>.</operator><name>ManagementFactory</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>management</name><operator>.</operator><name>RuntimeMXBean</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>file</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>file</name><operator>.</operator><name>attribute</name><operator>.</operator><name>BasicFileAttributes</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Collectors</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Joiner</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Throwables</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableList</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>net</name><operator>.</operator><name>jpountz</name><operator>.</operator><name>lz4</name><operator>.</operator><name>LZ4Factory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>QueryProcessor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>UntypedResultSet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>TableMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>Config</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>Schema</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>SchemaConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>ColumnFamilyStore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>Directories</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>SystemKeyspace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>ConfigurationException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>StartupException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>Descriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>FileUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>NativeLibrary</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>FBUtilities</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>JavaUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>NoSpamLogger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>SigarLibrary</name></name>;</import>

<import>import static <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name><operator>.</operator><name>format</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>CassandraRelevantProperties</name><operator>.</operator><name>COM_SUN_MANAGEMENT_JMXREMOTE_PORT</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>CassandraRelevantProperties</name><operator>.</operator><name>JAVA_VERSION</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>CassandraRelevantProperties</name><operator>.</operator><name>JAVA_VM_NAME</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Verifies that the system and environment is in a fit state to be started.
 * Used in CassandraDaemon#setup() to check various settings and invariants.
 *
 * Each individual test is modelled as an implementation of StartupCheck, these are run
 * at the start of CassandraDaemon#setup() before any local state is mutated. The default
 * checks are a mix of informational tests (inspectJvmOptions), initialization
 * (initSigarLibrary, checkCacheServiceInitialization) and invariant checking
 * (checkValidLaunchDate, checkSystemKeyspaceState, checkSSTablesFormat).
 *
 * In addition, if checkSystemKeyspaceState determines that the release version has
 * changed since last startup (i.e. the node has been upgraded) it snapshots the system
 * keyspace to make it easier to back out if necessary.
 *
 * If any check reports a failure, then the setup method exits with an error (after
 * logging any output from the tests). If all tests report success, setup can continue.
 * We should be careful in future to ensure anything which mutates local state (such as
 * writing new sstables etc) only happens after we've verified the initial setup.
 */</comment>
<class><specifier>public</specifier> class <name>StartupChecks</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>StartupChecks</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// List of checks to run before starting up. If any test reports failure, startup will be halted.</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>StartupCheck</name></argument>&gt;</argument_list></name></type> <name>preFlightChecks</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// The default set of pre-flight checks to run. Order is somewhat significant in that we probably</comment>
    <comment type="line">// always want the system keyspace check run last, as this actually loads the schema for that</comment>
    <comment type="line">// keyspace. All other checks should not require any schema initialization.</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>StartupCheck</name></argument>&gt;</argument_list></name></type> <name>DEFAULT_TESTS</name> <init>= <expr><call><name><name>ImmutableList</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>checkJemalloc</name></expr></argument>,
                                                                      <argument><expr><name>checkLz4Native</name></expr></argument>,
                                                                      <argument><expr><name>checkValidLaunchDate</name></expr></argument>,
                                                                      <argument><expr><name>checkJMXPorts</name></expr></argument>,
                                                                      <argument><expr><name>checkJMXProperties</name></expr></argument>,
                                                                      <argument><expr><name>inspectJvmOptions</name></expr></argument>,
                                                                      <argument><expr><name>checkNativeLibraryInitialization</name></expr></argument>,
                                                                      <argument><expr><name>initSigarLibrary</name></expr></argument>,
                                                                      <argument><expr><name>checkMaxMapCount</name></expr></argument>,
                                                                      <argument><expr><name>checkDataDirs</name></expr></argument>,
                                                                      <argument><expr><name>checkSSTablesFormat</name></expr></argument>,
                                                                      <argument><expr><name>checkSystemKeyspaceState</name></expr></argument>,
                                                                      <argument><expr><name>checkDatacenter</name></expr></argument>,
                                                                      <argument><expr><name>checkRack</name></expr></argument>,
                                                                      <argument><expr><name>checkLegacyAuthTables</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name>StartupChecks</name></type> <name>withDefaultTests</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>preFlightChecks</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>DEFAULT_TESTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Add system test to be run before schema is loaded during startup
     * @param test the system test to include
     */</comment>
    <function><type><specifier>public</specifier> <name>StartupChecks</name></type> <name>withTest</name><parameter_list>(<parameter><decl><type><name>StartupCheck</name></type> <name>test</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>preFlightChecks</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Run the configured tests and return a report detailing the results.
     * @throws org.apache.cassandra.exceptions.StartupException if any test determines that the
     * system is not in an valid state to startup
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>verify</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>StartupException</name></expr></argument></throws>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>StartupCheck</name></type> <name>test</name> <range>: <expr><name>preFlightChecks</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>test</name><operator>.</operator><name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></function>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>StartupCheck</name></type> <name>checkJemalloc</name> <init>= <expr><operator>new</operator> <class><super><name>StartupCheck</name></super><argument_list>()</argument_list>
    <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>FBUtilities</name><operator>.</operator><name>isWindows</name></name></expr>)</condition><block type="pseudo"><block_content>
                <return>return;</return></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>jemalloc</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.libjemalloc"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>jemalloc</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"jemalloc shared library could not be preloaded to speed up memory allocations"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><literal type="string">"-"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>jemalloc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"jemalloc preload explicitly disabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"jemalloc seems to be preloaded from {}"</literal></expr></argument>, <argument><expr><name>jemalloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>StartupCheck</name></type> <name>checkLz4Native</name> <init>= <expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{<block_content>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>LZ4Factory</name><operator>.</operator><name>nativeInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// make sure native loads</comment>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>AssertionError</name></type> | <type><name>LinkageError</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"lz4-java was unable to load native libraries; this will lower the performance of lz4 (network/sstables/etc.): {}"</literal></expr></argument>, <argument><expr><call><name><name>Throwables</name><operator>.</operator><name>getRootCause</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getMessage</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
    </block_content>}</block></lambda></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>StartupCheck</name></type> <name>checkValidLaunchDate</name> <init>= <expr><operator>new</operator> <class><super><name>StartupCheck</name></super><argument_list>()</argument_list>
    <block>{
        <comment type="block" format="javadoc">/**
         * The earliest legit timestamp a casandra instance could have ever launched.
         * Date roughly taken from http://perspectives.mvdirona.com/2008/07/12/FacebookReleasesCassandraAsOpenSource.aspx
         * We use this to ensure the system clock is at least somewhat correct at startup.
         */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>EARLIEST_LAUNCH_DATE</name> <init>= <expr><literal type="number">1215820800000L</literal></expr></init></decl>;</decl_stmt>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>StartupException</name></expr></argument></throws>
        <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>now</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>now</name> <operator>&lt;</operator> <name>EARLIEST_LAUNCH_DATE</name></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>StartupException</name><argument_list>(<argument><expr><name><name>StartupException</name><operator>.</operator><name>ERR_WRONG_MACHINE_STATE</name></name></expr></argument>,
                                           <argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"current machine time is %s, but that is seemingly incorrect. exiting now."</literal></expr></argument>,
                                                         <argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        </block_content>}</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>StartupCheck</name></type> <name>checkJMXPorts</name> <init>= <expr><operator>new</operator> <class><super><name>StartupCheck</name></super><argument_list>()</argument_list>
    <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>jmxPort</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.jmx.remote.port"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>jmxPort</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"JMX is not enabled to receive remote connections. Please see cassandra-env.sh for more info."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>jmxPort</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.jmx.local.port"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>jmxPort</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.jmx.local.port missing from cassandra-env.sh, unable to start local JMX service."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"JMX is enabled to receive remote connections on port: {}"</literal></expr></argument>, <argument><expr><name>jmxPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>StartupCheck</name></type> <name>checkJMXProperties</name> <init>= <expr><operator>new</operator> <class><super><name>StartupCheck</name></super><argument_list>()</argument_list>
    <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>COM_SUN_MANAGEMENT_JMXREMOTE_PORT</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Use of com.sun.management.jmxremote.port at startup is deprecated. "</literal> <operator>+</operator>
                            <literal type="string">"Please use cassandra.jmx.remote.port instead."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>StartupCheck</name></type> <name>inspectJvmOptions</name> <init>= <expr><operator>new</operator> <class><super><name>StartupCheck</name></super><argument_list>()</argument_list>
    <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <comment type="line">// log warnings for different kinds of sub-optimal JVMs.  tldr use 64-bit Oracle &gt;= 1.6u32</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>hasLargeAddressSpace</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"32bit JVM detected.  It is recommended to run Cassandra on a 64bit JVM for better performance."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>String</name></type> <name>javaVmName</name> <init>= <expr><call><name><name>JAVA_VM_NAME</name><operator>.</operator><name>getString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name><name>javaVmName</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"HotSpot"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>javaVmName</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"OpenJDK"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Non-Oracle JVM detected.  Some features, such as immediate unmap of compacted SSTables, may not work as intended"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>checkOutOfMemoryHandling</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Checks that the JVM is configured to handle OutOfMemoryError
         */</comment>
        <function><type><specifier>private</specifier> <name>void</name></type> <name>checkOutOfMemoryHandling</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>JavaUtils</name><operator>.</operator><name>supportExitOnOutOfMemory</name></name><argument_list>(<argument><expr><call><name><name>JAVA_VERSION</name><operator>.</operator><name>getString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>jvmOptionsContainsOneOf</name><argument_list>(<argument><expr><literal type="string">"-XX:OnOutOfMemoryError="</literal></expr></argument>, <argument><expr><literal type="string">"-XX:+ExitOnOutOfMemoryError"</literal></expr></argument>, <argument><expr><literal type="string">"-XX:+CrashOnOutOfMemoryError"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"The JVM is not configured to stop on OutOfMemoryError which can cause data corruption."</literal>
                                <operator>+</operator> <literal type="string">" Use one of the following JVM options to configure the behavior on OutOfMemoryError: "</literal>
                                <operator>+</operator> <literal type="string">" -XX:+ExitOnOutOfMemoryError, -XX:+CrashOnOutOfMemoryError, or -XX:OnOutOfMemoryError=\"&lt;cmd args&gt;;&lt;cmd args&gt;\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>jvmOptionsContainsOneOf</name><argument_list>(<argument><expr><literal type="string">"-XX:OnOutOfMemoryError="</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"The JVM is not configured to stop on OutOfMemoryError which can cause data corruption."</literal>
                            <operator>+</operator> <literal type="string">" Either upgrade your JRE to a version greater or equal to 8u92 and use -XX:+ExitOnOutOfMemoryError/-XX:+CrashOnOutOfMemoryError"</literal>
                            <operator>+</operator> <literal type="string">" or use -XX:OnOutOfMemoryError=\"&lt;cmd args&gt;;&lt;cmd args&gt;\" on your current JRE."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Checks if one of the specified options is being used.
         * @param optionNames The name of the options to check
         * @return {@code true} if one of the specified options is being used, {@code false} otherwise.
         */</comment>
        <function><type><specifier>private</specifier> <name>boolean</name></type> <name>jvmOptionsContainsOneOf</name><parameter_list>(<parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>optionNames</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>RuntimeMXBean</name></type> <name>runtimeMxBean</name> <init>= <expr><call><name><name>ManagementFactory</name><operator>.</operator><name>getRuntimeMXBean</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>inputArguments</name> <init>= <expr><call><name><name>runtimeMxBean</name><operator>.</operator><name>getInputArguments</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>argument</name> <range>: <expr><name>inputArguments</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <for>for <control>(<init><decl><type><name>String</name></type> <name>optionName</name> <range>: <expr><name>optionNames</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>argument</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>optionName</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
            </block_content>}</block></for>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>StartupCheck</name></type> <name>checkNativeLibraryInitialization</name> <init>= <expr><operator>new</operator> <class><super><name>StartupCheck</name></super><argument_list>()</argument_list>
    <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>StartupException</name></expr></argument></throws>
        <block>{<block_content>
            <comment type="line">// Fail-fast if the native library could not be linked.</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>NativeLibrary</name><operator>.</operator><name>isAvailable</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>StartupException</name><argument_list>(<argument><expr><name><name>StartupException</name><operator>.</operator><name>ERR_WRONG_MACHINE_STATE</name></name></expr></argument>, <argument><expr><literal type="string">"The native library could not be initialized properly. "</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        </block_content>}</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>StartupCheck</name></type> <name>initSigarLibrary</name> <init>= <expr><operator>new</operator> <class><super><name>StartupCheck</name></super><argument_list>()</argument_list>
    <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>SigarLibrary</name><operator>.</operator><name>instance</name><operator>.</operator><name>warnIfRunningInDegradedMode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>StartupCheck</name></type> <name>checkMaxMapCount</name> <init>= <expr><operator>new</operator> <class><super><name>StartupCheck</name></super><argument_list>()</argument_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>long</name></type> <name>EXPECTED_MAX_MAP_COUNT</name> <init>= <expr><literal type="number">1048575</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>MAX_MAP_COUNT_PATH</name> <init>= <expr><literal type="string">"/proc/sys/vm/max_map_count"</literal></expr></init></decl>;</decl_stmt>

        <function><type><specifier>private</specifier> <name>long</name></type> <name>getMaxMapCount</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Path</name></type> <name>path</name> <init>= <expr><call><name><name>Paths</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>MAX_MAP_COUNT_PATH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <try>try <init>(<decl><type><specifier>final</specifier> <name>BufferedReader</name></type> <name>bufferedReader</name> <init>= <expr><call><name><name>Files</name><operator>.</operator><name>newBufferedReader</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>)</init>
            <block>{<block_content>
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>data</name> <init>= <expr><call><name><name>bufferedReader</name><operator>.</operator><name>readLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>data</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
                <block>{<block_content>
                    <try>try
                    <block>{<block_content>
                        <return>return <expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
                    </block_content>}</block>
                    <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Unable to parse {}."</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></catch></try>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"IO exception while reading file {}."</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>FBUtilities</name><operator>.</operator><name>isLinux</name></name></expr>)</condition><block type="pseudo"><block_content>
                <return>return;</return></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getDiskAccessMode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Config</name><operator>.</operator><name>DiskAccessMode</name><operator>.</operator><name>standard</name></name> <operator>&amp;&amp;</operator>
                <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getIndexAccessMode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Config</name><operator>.</operator><name>DiskAccessMode</name><operator>.</operator><name>standard</name></name></expr>)</condition><block type="pseudo"><block_content>
                <return>return;</return></block_content></block></if></if_stmt> <comment type="line">// no need to check if disk access mode is only standard and not mmap</comment>

            <decl_stmt><decl><type><name>long</name></type> <name>maxMapCount</name> <init>= <expr><call><name>getMaxMapCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>maxMapCount</name> <operator>&lt;</operator> <name>EXPECTED_MAX_MAP_COUNT</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Maximum number of memory map areas per process (vm.max_map_count) {} "</literal> <operator>+</operator>
                            <literal type="string">"is too low, recommended value: {}, you can change it with sysctl."</literal></expr></argument>,
                            <argument><expr><name>maxMapCount</name></expr></argument>, <argument><expr><name>EXPECTED_MAX_MAP_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>StartupCheck</name></type> <name>checkDataDirs</name> <init>= <expr><lambda><parameter_list>()</parameter_list> -&gt;
    <block>{<block_content>
        <comment type="line">// check all directories(data, commitlog, saved cache) for existence and permission</comment>
        <decl_stmt><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>dirs</name> <init>= <expr><call><name><name>Iterables</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getAllDataFileLocations</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                                 <argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getCommitLogLocation</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                               <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getSavedCachesLocation</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                               <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getHintsDirectory</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>String</name></type> <name>dataDir</name> <range>: <expr><name>dirs</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Checking directory {}"</literal></expr></argument>, <argument><expr><name>dataDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>File</name></type> <name>dir</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>dataDir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// check that directories exist.</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>dir</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Directory {} doesn't exist"</literal></expr></argument>, <argument><expr><name>dataDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// if they don't, failing their creation, stop cassandra.</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>dir</name><operator>.</operator><name>mkdirs</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>StartupException</name><argument_list>(<argument><expr><name><name>StartupException</name><operator>.</operator><name>ERR_WRONG_DISK_STATE</name></name></expr></argument>,
                                               <argument><expr><literal type="string">"Has no permission to create directory "</literal><operator>+</operator> <name>dataDir</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// if directories exist verify their permissions</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Directories</name><operator>.</operator><name>verifyFullPermissions</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>dataDir</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>StartupException</name><argument_list>(<argument><expr><name><name>StartupException</name><operator>.</operator><name>ERR_WRONG_DISK_STATE</name></name></expr></argument>,
                                           <argument><expr><literal type="string">"Insufficient permissions on directory "</literal> <operator>+</operator> <name>dataDir</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></lambda></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>StartupCheck</name></type> <name>checkSSTablesFormat</name> <init>= <expr><operator>new</operator> <class><super><name>StartupCheck</name></super><argument_list>()</argument_list>
    <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>StartupException</name></expr></argument></throws>
        <block>{<block_content>
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>invalid</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>nonSSTablePaths</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>nonSSTablePaths</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>FileUtils</name><operator>.</operator><name>getCanonicalPath</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getCommitLogLocation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>nonSSTablePaths</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>FileUtils</name><operator>.</operator><name>getCanonicalPath</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getSavedCachesLocation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>nonSSTablePaths</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>FileUtils</name><operator>.</operator><name>getCanonicalPath</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getHintsDirectory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name><name>FileVisitor</name><argument_list type="generic">&lt;<argument><name>Path</name></argument>&gt;</argument_list></name></type> <name>sstableVisitor</name> <init>= <expr><operator>new</operator> <class><super><name><name>SimpleFileVisitor</name><argument_list type="generic">&lt;<argument><name>Path</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
            <block>{
                <function><type><specifier>public</specifier> <name>FileVisitResult</name></type> <name>visitFile</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>BasicFileAttributes</name></type> <name>attrs</name></decl></parameter>)</parameter_list>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>File</name></type> <name>file</name> <init>= <expr><call><name><name>path</name><operator>.</operator><name>toFile</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Descriptor</name><operator>.</operator><name>isValidFile</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <return>return <expr><name><name>FileVisitResult</name><operator>.</operator><name>CONTINUE</name></name></expr>;</return></block_content></block></if></if_stmt>

                    <try>try
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Descriptor</name><operator>.</operator><name>fromFilename</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isCompatible</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><call><name><name>invalid</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>file</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    </block_content>}</block>
                    <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name><name>invalid</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>file</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></catch></try>
                    <return>return <expr><name><name>FileVisitResult</name><operator>.</operator><name>CONTINUE</name></name></expr>;</return>
                </block_content>}</block></function>

                <function><type><specifier>public</specifier> <name>FileVisitResult</name></type> <name>preVisitDirectory</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>BasicFileAttributes</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>dir</name><operator>.</operator><name>getFileName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <return>return <expr><ternary><condition><expr><operator>(</operator><call><name><name>name</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>Directories</name><operator>.</operator><name>SNAPSHOT_SUBDIR</name></name></expr></argument>)</argument_list></call>
                            <operator>||</operator> <call><name><name>name</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>Directories</name><operator>.</operator><name>BACKUPS_SUBDIR</name></name></expr></argument>)</argument_list></call>
                            <operator>||</operator> <call><name><name>nonSSTablePaths</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>dir</name><operator>.</operator><name>toFile</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCanonicalPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>
                           ?</condition><then> <expr><name><name>FileVisitResult</name><operator>.</operator><name>SKIP_SUBTREE</name></name></expr>
                           </then><else>: <expr><name><name>FileVisitResult</name><operator>.</operator><name>CONTINUE</name></name></expr></else></ternary></expr>;</return>
                </block_content>}</block></function>
            }</block></class></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name>String</name></type> <name>dataDir</name> <range>: <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getAllDataFileLocations</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <try>try
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>Files</name><operator>.</operator><name>walkFileTree</name></name><argument_list>(<argument><expr><call><name><name>Paths</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>dataDir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sstableVisitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list>
                <block>{<block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>StartupException</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"Unable to verify sstable files on disk"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></catch></try>
            </block_content>}</block></for>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>invalid</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>StartupException</name><argument_list>(<argument><expr><name><name>StartupException</name><operator>.</operator><name>ERR_WRONG_DISK_STATE</name></name></expr></argument>,
                                           <argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Detected unreadable sstables %s, please check "</literal> <operator>+</operator>
                                                         <literal type="string">"NEWS.txt and ensure that you have upgraded through "</literal> <operator>+</operator>
                                                         <literal type="string">"all required intermediate versions, running "</literal> <operator>+</operator>
                                                         <literal type="string">"upgradesstables"</literal></expr></argument>,
                                                         <argument><expr><call><name><name>Joiner</name><operator>.</operator><name>on</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>join</name><argument_list>(<argument><expr><name>invalid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        </block_content>}</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>StartupCheck</name></type> <name>checkSystemKeyspaceState</name> <init>= <expr><operator>new</operator> <class><super><name>StartupCheck</name></super><argument_list>()</argument_list>
    <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>StartupException</name></expr></argument></throws>
        <block>{<block_content>
            <comment type="line">// check the system keyspace to keep user from shooting self in foot by changing partitioner, cluster name, etc.</comment>
            <comment type="line">// we do a one-off scrub of the system keyspace first; we can't load the list of the rest of the keyspaces,</comment>
            <comment type="line">// until system keyspace is opened.</comment>

            <for>for <control>(<init><decl><type><name>TableMetadata</name></type> <name>cfm</name> <range>: <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getTablesAndViews</name></name><argument_list>(<argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SYSTEM_KEYSPACE_NAME</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>ColumnFamilyStore</name><operator>.</operator><name>scrubDataDirectories</name></name><argument_list>(<argument><expr><name>cfm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <try>try
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>checkHealth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>ConfigurationException</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>StartupException</name><argument_list>(<argument><expr><name><name>StartupException</name><operator>.</operator><name>ERR_WRONG_CONFIG</name></name></expr></argument>, <argument><expr><literal type="string">"Fatal exception during initialization"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>StartupCheck</name></type> <name>checkDatacenter</name> <init>= <expr><operator>new</operator> <class><super><name>StartupCheck</name></super><argument_list>()</argument_list>
    <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>StartupException</name></expr></argument></throws>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Boolean</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.ignore_dc"</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>storedDc</name> <init>= <expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>getDatacenter</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>storedDc</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>currentDc</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getEndpointSnitch</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLocalDatacenter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>storedDc</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>currentDc</name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>String</name></type> <name>formatMessage</name> <init>= <expr><literal type="string">"Cannot start node if snitch's data center (%s) differs from previous data center (%s). "</literal> <operator>+</operator>
                                               <literal type="string">"Please fix the snitch configuration, decommission and rebootstrap this node or use the flag -Dcassandra.ignore_dc=true."</literal></expr></init></decl>;</decl_stmt>

                        <throw>throw <expr><operator>new</operator> <call><name>StartupException</name><argument_list>(<argument><expr><name><name>StartupException</name><operator>.</operator><name>ERR_WRONG_CONFIG</name></name></expr></argument>, <argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>formatMessage</name></expr></argument>, <argument><expr><name>currentDc</name></expr></argument>, <argument><expr><name>storedDc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>StartupCheck</name></type> <name>checkRack</name> <init>= <expr><operator>new</operator> <class><super><name>StartupCheck</name></super><argument_list>()</argument_list>
    <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>StartupException</name></expr></argument></throws>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Boolean</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.ignore_rack"</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>storedRack</name> <init>= <expr><call><name><name>SystemKeyspace</name><operator>.</operator><name>getRack</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>storedRack</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>currentRack</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getEndpointSnitch</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLocalRack</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>storedRack</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>currentRack</name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>String</name></type> <name>formatMessage</name> <init>= <expr><literal type="string">"Cannot start node if snitch's rack (%s) differs from previous rack (%s). "</literal> <operator>+</operator>
                                               <literal type="string">"Please fix the snitch configuration, decommission and rebootstrap this node or use the flag -Dcassandra.ignore_rack=true."</literal></expr></init></decl>;</decl_stmt>

                        <throw>throw <expr><operator>new</operator> <call><name>StartupException</name><argument_list>(<argument><expr><name><name>StartupException</name><operator>.</operator><name>ERR_WRONG_CONFIG</name></name></expr></argument>, <argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>formatMessage</name></expr></argument>, <argument><expr><name>currentRack</name></expr></argument>, <argument><expr><name>storedRack</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>StartupCheck</name></type> <name>checkLegacyAuthTables</name> <init>= <expr><lambda><parameter_list>()</parameter_list> -&gt;
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>errMsg</name> <init>= <expr><call><name>checkLegacyAuthTablesMessage</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>errMsg</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>StartupException</name><argument_list>(<argument><expr><name><name>StartupException</name><operator>.</operator><name>ERR_WRONG_CONFIG</name></name></expr></argument>, <argument><expr><call><name><name>errMsg</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    </block_content>}</block></lambda></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>static</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>checkLegacyAuthTablesMessage</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>existing</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>LEGACY_AUTH_TABLES</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call><operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>legacyAuthTable</name></decl></parameter>)</parameter_list> -&gt;
            <block>{<block_content>
                <decl_stmt><decl><type><name>UntypedResultSet</name></type> <name>result</name> <init>= <expr><call><name><name>QueryProcessor</name><operator>.</operator><name>executeOnceInternal</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"SELECT table_name FROM %s.%s WHERE keyspace_name='%s' AND table_name='%s'"</literal></expr></argument>,
                                                                                           <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>SCHEMA_KEYSPACE_NAME</name></name></expr></argument>,
                                                                                           <argument><expr><literal type="string">"tables"</literal></expr></argument>,
                                                                                           <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>AUTH_KEYSPACE_NAME</name></name></expr></argument>,
                                                                                           <argument><expr><name>legacyAuthTable</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return>return <expr><name>result</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>result</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>existing</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Legacy auth tables %s in keyspace %s still exist and have not been properly migrated."</literal></expr></argument>,
                        <argument><expr><call><name><name>Joiner</name><operator>.</operator><name>on</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>join</name><argument_list>(<argument><expr><name>existing</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>SchemaConstants</name><operator>.</operator><name>AUTH_KEYSPACE_NAME</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></function><empty_stmt>;</empty_stmt>
}</block></class>
</unit>
