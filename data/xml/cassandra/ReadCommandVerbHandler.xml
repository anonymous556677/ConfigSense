<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/db/ReadCommandVerbHandler.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>partitions</name><operator>.</operator><name>UnfilteredPartitionIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>Token</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>InvalidRequestException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>Replica</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>IVerbHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>Message</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>MessagingService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>StorageService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>tracing</name><operator>.</operator><name>Tracing</name></name>;</import>

<import>import static <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name><operator>.</operator><name>NANOSECONDS</name></name>;</import>

<class><specifier>public</specifier> class <name>ReadCommandVerbHandler</name> <super_list><implements>implements <super><name><name>IVerbHandler</name><argument_list type="generic">&lt;<argument><name>ReadCommand</name></argument>&gt;</argument_list></name></super></implements></super_list>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ReadCommandVerbHandler</name></type> <name>instance</name> <init>= <expr><operator>new</operator> <call><name>ReadCommandVerbHandler</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>ReadCommandVerbHandler</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>doVerb</name><parameter_list>(<parameter><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>ReadCommand</name></argument>&gt;</argument_list></name></type> <name>message</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>isBootstrapMode</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Cannot service reads while bootstrapping!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>ReadCommand</name></type> <name>command</name> <init>= <expr><name><name>message</name><operator>.</operator><name>payload</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>validateTransientStatus</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>long</name></type> <name>timeout</name> <init>= <expr><call><name><name>message</name><operator>.</operator><name>expiresAtNanos</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>message</name><operator>.</operator><name>createdAtNanos</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>setMonitoringTime</name></name><argument_list>(<argument><expr><call><name><name>message</name><operator>.</operator><name>createdAtNanos</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>isCrossNode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getSlowQueryTimeout</name></name><argument_list>(<argument><expr><name>NANOSECONDS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ReadResponse</name></type> <name>response</name></decl>;</decl_stmt>
        <try>try <init>(<decl><type><name>ReadExecutionController</name></type> <name>controller</name> <init>= <expr><call><name><name>command</name><operator>.</operator><name>executionController</name></name><argument_list>(<argument><expr><call><name><name>message</name><operator>.</operator><name>trackRepairedData</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;
             <decl><type><name>UnfilteredPartitionIterator</name></type> <name>iterator</name> <init>= <expr><call><name><name>command</name><operator>.</operator><name>executeLocally</name></name><argument_list>(<argument><expr><name>controller</name></expr></argument>)</argument_list></call></expr></init></decl>)</init>
        <block>{<block_content>
            <expr_stmt><expr><name>response</name> <operator>=</operator> <call><name><name>command</name><operator>.</operator><name>createResponse</name></name><argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><call><name><name>controller</name><operator>.</operator><name>getRepairedDataInfo</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></try>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>command</name><operator>.</operator><name>complete</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Discarding partial response to {} (timed out)"</literal></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>from</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>MessagingService</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>metrics</name><operator>.</operator><name>recordDroppedMessage</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>elapsedSinceCreated</name></name><argument_list>(<argument><expr><name>NANOSECONDS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NANOSECONDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Enqueuing response to {}"</literal></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>from</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>ReadResponse</name></argument>&gt;</argument_list></name></type> <name>reply</name> <init>= <expr><call><name><name>message</name><operator>.</operator><name>responseWith</name></name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>MessagingService</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>send</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>from</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>validateTransientStatus</name><parameter_list>(<parameter><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>ReadCommand</name></argument>&gt;</argument_list></name></type> <name>message</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ReadCommand</name></type> <name>command</name> <init>= <expr><name><name>message</name><operator>.</operator><name>payload</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Token</name></type> <name>token</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>command</name> <operator>instanceof</operator> <name>SinglePartitionReadCommand</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>token</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SinglePartitionReadCommand</name><operator>)</operator> <name>command</name><operator>)</operator><operator>.</operator><call><name>partitionKey</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getToken</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>token</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>PartitionRangeReadCommand</name><operator>)</operator> <name>command</name><operator>)</operator><operator>.</operator><call><name>dataRange</name><argument_list>()</argument_list></call><operator>.</operator><call><name>keyRange</name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>right</name><operator>.</operator><name>getToken</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <decl_stmt><decl><type><name>Replica</name></type> <name>replica</name> <init>= <expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><call><name><name>command</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><name>keyspace</name></expr></argument>)</argument_list></call>
                                  <operator>.</operator><call><name>getReplicationStrategy</name><argument_list>()</argument_list></call>
                                  <operator>.</operator><call><name>getLocalReplicaFor</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>replica</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Received a read request from {} for a range that is not owned by the current replica {}."</literal></expr></argument>,
                        <argument><expr><call><name><name>message</name><operator>.</operator><name>from</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>command</name><operator>.</operator><name>acceptsTransient</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>replica</name><operator>.</operator><name>isTransient</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>MessagingService</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>metrics</name><operator>.</operator><name>recordDroppedMessage</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>elapsedSinceCreated</name></name><argument_list>(<argument><expr><name>NANOSECONDS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NANOSECONDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Attempted to serve %s data request from %s node in %s"</literal></expr></argument>,
                                                            <argument><expr><ternary><condition><expr><call><name><name>command</name><operator>.</operator><name>acceptsTransient</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"transient"</literal></expr> </then><else>: <expr><literal type="string">"full"</literal></expr></else></ternary></expr></argument>,
                                                            <argument><expr><ternary><condition><expr><call><name><name>replica</name><operator>.</operator><name>isTransient</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"transient"</literal></expr> </then><else>: <expr><literal type="string">"full"</literal></expr></else></ternary></expr></argument>,
                                                            <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>
