<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/metrics/MessagingMetrics.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>metrics</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>EnumMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ConcurrentHashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicInteger</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>function</name><operator>.</operator><name>Consumer</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ScheduledExecutors</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>codahale</name><operator>.</operator><name>metrics</name><operator>.</operator><name>Timer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>InetAddressAndPort</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>Message</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>Verb</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>InboundMessageHandlers</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>LatencyConsumer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>StatusLogger</name></name>;</import>

<import>import static <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>metrics</name><operator>.</operator><name>CassandraMetricsRegistry</name><operator>.</operator><name>Metrics</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Metrics for messages
 */</comment>
<class><specifier>public</specifier> class <name>MessagingMetrics</name> <super_list><implements>implements <super><name><name>InboundMessageHandlers</name><operator>.</operator><name>GlobalMetricCallbacks</name></name></super></implements></super_list>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>MetricNameFactory</name></type> <name>factory</name> <init>= <expr><operator>new</operator> <call><name>DefaultNameFactory</name><argument_list>(<argument><expr><literal type="string">"Messaging"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>MessagingMetrics</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>LOG_DROPPED_INTERVAL_IN_MS</name> <init>= <expr><literal type="number">5000</literal></expr></init></decl>;</decl_stmt>
    
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>DCLatencyRecorder</name> <super_list><implements>implements <super><name>LatencyConsumer</name></super></implements></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Timer</name></type> <name>dcLatency</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Timer</name></type> <name>allLatency</name></decl>;</decl_stmt>

        <constructor><name>DCLatencyRecorder</name><parameter_list>(<parameter><decl><type><name>Timer</name></type> <name>dcLatency</name></decl></parameter>, <parameter><decl><type><name>Timer</name></type> <name>allLatency</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dcLatency</name></name> <operator>=</operator> <name>dcLatency</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>allLatency</name></name> <operator>=</operator> <name>allLatency</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>accept</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>timeTaken</name></decl></parameter>, <parameter><decl><type><name>TimeUnit</name></type> <name>units</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>timeTaken</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>dcLatency</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>timeTaken</name></expr></argument>, <argument><expr><name>units</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>allLatency</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>timeTaken</name></expr></argument>, <argument><expr><name>units</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>DroppedForVerb</name>
    <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>DroppedMessageMetrics</name></type> <name>metrics</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>AtomicInteger</name></type> <name>droppedFromSelf</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>AtomicInteger</name></type> <name>droppedFromPeer</name></decl>;</decl_stmt>

        <constructor><name>DroppedForVerb</name><parameter_list>(<parameter><decl><type><name>Verb</name></type> <name>verb</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><operator>new</operator> <call><name>DroppedMessageMetrics</name><argument_list>(<argument><expr><name>verb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <constructor><name>DroppedForVerb</name><parameter_list>(<parameter><decl><type><name>DroppedMessageMetrics</name></type> <name>metrics</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>metrics</name></name> <operator>=</operator> <name>metrics</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>droppedFromSelf</name></name> <operator>=</operator> <operator>new</operator> <call><name>AtomicInteger</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>droppedFromPeer</name></name> <operator>=</operator> <operator>new</operator> <call><name>AtomicInteger</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>
    }</block></class>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Timer</name></type> <name>allLatency</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>ConcurrentHashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>DCLatencyRecorder</name></argument>&gt;</argument_list></name></type> <name>dcLatency</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>EnumMap</name><argument_list type="generic">&lt;<argument><name>Verb</name></argument>, <argument><name>Timer</name></argument>&gt;</argument_list></name></type> <name>internalLatency</name></decl>;</decl_stmt>

    <comment type="line">// total dropped message counts for server lifetime</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Verb</name></argument>, <argument><name>DroppedForVerb</name></argument>&gt;</argument_list></name></type> <name>droppedMessages</name> <init>= <expr><operator>new</operator> <call><name><name>EnumMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>Verb</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>MessagingMetrics</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>allLatency</name> <operator>=</operator> <call><name><name>Metrics</name><operator>.</operator><name>timer</name></name><argument_list>(<argument><expr><call><name><name>factory</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><literal type="string">"CrossNodeLatency"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>dcLatency</name> <operator>=</operator> <operator>new</operator> <call><name><name>ConcurrentHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>internalLatency</name> <operator>=</operator> <operator>new</operator> <call><name><name>EnumMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>Verb</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>Verb</name></type> <name>verb</name> <range>: <expr><name><name>Verb</name><operator>.</operator><name>VERBS</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>internalLatency</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>verb</name></expr></argument>, <argument><expr><call><name><name>Metrics</name><operator>.</operator><name>timer</name></name><argument_list>(<argument><expr><call><name><name>factory</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><name>verb</name> <operator>+</operator> <literal type="string">"-WaitLatency"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <for>for <control>(<init><decl><type><name>Verb</name></type> <name>verb</name> <range>: <expr><call><name><name>Verb</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>droppedMessages</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>verb</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>DroppedForVerb</name><argument_list>(<argument><expr><name>verb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>DCLatencyRecorder</name></type> <name>internodeLatencyRecorder</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>from</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>dcName</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getEndpointSnitch</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDatacenter</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DCLatencyRecorder</name></type> <name>dcUpdater</name> <init>= <expr><call><name><name>dcLatency</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>dcName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>dcUpdater</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>dcUpdater</name> <operator>=</operator> <call><name><name>dcLatency</name><operator>.</operator><name>computeIfAbsent</name></name><argument_list>(<argument><expr><name>dcName</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>k</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><operator>new</operator> <call><name>DCLatencyRecorder</name><argument_list>(<argument><expr><call><name><name>Metrics</name><operator>.</operator><name>timer</name></name><argument_list>(<argument><expr><call><name><name>factory</name><operator>.</operator><name>createMetricName</name></name><argument_list>(<argument><expr><name>dcName</name> <operator>+</operator> <literal type="string">"-Latency"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>allLatency</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><name>dcUpdater</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>recordInternalLatency</name><parameter_list>(<parameter><decl><type><name>Verb</name></type> <name>verb</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>timeTaken</name></decl></parameter>, <parameter><decl><type><name>TimeUnit</name></type> <name>units</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>timeTaken</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>internalLatency</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>verb</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><name>timeTaken</name></expr></argument>, <argument><expr><name>units</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>recordSelfDroppedMessage</name><parameter_list>(<parameter><decl><type><name>Verb</name></type> <name>verb</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>recordDroppedMessage</name><argument_list>(<argument><expr><call><name><name>droppedMessages</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>verb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>recordSelfDroppedMessage</name><parameter_list>(<parameter><decl><type><name>Verb</name></type> <name>verb</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>timeElapsed</name></decl></parameter>, <parameter><decl><type><name>TimeUnit</name></type> <name>timeUnit</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>recordDroppedMessage</name><argument_list>(<argument><expr><name>verb</name></expr></argument>, <argument><expr><name>timeElapsed</name></expr></argument>, <argument><expr><name>timeUnit</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>recordInternodeDroppedMessage</name><parameter_list>(<parameter><decl><type><name>Verb</name></type> <name>verb</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>timeElapsed</name></decl></parameter>, <parameter><decl><type><name>TimeUnit</name></type> <name>timeUnit</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>recordDroppedMessage</name><argument_list>(<argument><expr><name>verb</name></expr></argument>, <argument><expr><name>timeElapsed</name></expr></argument>, <argument><expr><name>timeUnit</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>recordDroppedMessage</name><parameter_list>(<parameter><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>timeElapsed</name></decl></parameter>, <parameter><decl><type><name>TimeUnit</name></type> <name>timeUnit</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>recordDroppedMessage</name><argument_list>(<argument><expr><call><name><name>message</name><operator>.</operator><name>verb</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>timeElapsed</name></expr></argument>, <argument><expr><name>timeUnit</name></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>isCrossNode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>recordDroppedMessage</name><parameter_list>(<parameter><decl><type><name>Verb</name></type> <name>verb</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>timeElapsed</name></decl></parameter>, <parameter><decl><type><name>TimeUnit</name></type> <name>timeUnit</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isCrossNode</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>recordDroppedMessage</name><argument_list>(<argument><expr><call><name><name>droppedMessages</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>verb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>timeElapsed</name></expr></argument>, <argument><expr><name>timeUnit</name></expr></argument>, <argument><expr><name>isCrossNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>recordDroppedMessage</name><parameter_list>(<parameter><decl><type><name>DroppedForVerb</name></type> <name>droppedMessages</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>timeTaken</name></decl></parameter>, <parameter><decl><type><name>TimeUnit</name></type> <name>units</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isCrossNode</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>isCrossNode</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>droppedMessages</name><operator>.</operator><name>metrics</name><operator>.</operator><name>crossNodeDroppedLatency</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>timeTaken</name></expr></argument>, <argument><expr><name>units</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>droppedMessages</name><operator>.</operator><name>metrics</name><operator>.</operator><name>internalDroppedLatency</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>timeTaken</name></expr></argument>, <argument><expr><name>units</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt><expr><call><name>recordDroppedMessage</name><argument_list>(<argument><expr><name>droppedMessages</name></expr></argument>, <argument><expr><name>isCrossNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>recordDroppedMessage</name><parameter_list>(<parameter><decl><type><name>DroppedForVerb</name></type> <name>droppedMessages</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isCrossNode</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>droppedMessages</name><operator>.</operator><name>metrics</name><operator>.</operator><name>dropped</name><operator>.</operator><name>mark</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>isCrossNode</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>droppedMessages</name><operator>.</operator><name>droppedFromPeer</name><operator>.</operator><name>incrementAndGet</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>droppedMessages</name><operator>.</operator><name>droppedFromSelf</name><operator>.</operator><name>incrementAndGet</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>scheduleLogging</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>ScheduledExecutors</name><operator>.</operator><name>scheduledTasks</name><operator>.</operator><name>scheduleWithFixedDelay</name></name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>logDroppedMessages</name></expr></argument>,
                                                                 <argument><expr><name>LOG_DROPPED_INTERVAL_IN_MS</name></expr></argument>,
                                                                 <argument><expr><name>LOG_DROPPED_INTERVAL_IN_MS</name></expr></argument>,
                                                                 <argument><expr><name>MILLISECONDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>getDroppedMessages</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>droppedMessages</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Verb</name></argument>, <argument><name>DroppedForVerb</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>droppedMessages</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>metrics</name><operator>.</operator><name>dropped</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <return>return <expr><name>map</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>logDroppedMessages</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>resetAndConsumeDroppedErrors</name><argument_list>(<argument><expr><name>logger</name><operator>::</operator><name>info</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>StatusLogger</name><operator>.</operator><name>log</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>resetAndConsumeDroppedErrors</name><parameter_list>(<parameter><decl><type><name><name>Consumer</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>messageConsumer</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Verb</name></argument>, <argument><name>DroppedForVerb</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>droppedMessages</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>Verb</name></type> <name>verb</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>DroppedForVerb</name></type> <name>droppedForVerb</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>droppedInternal</name> <init>= <expr><call><name><name>droppedForVerb</name><operator>.</operator><name>droppedFromSelf</name><operator>.</operator><name>getAndSet</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>droppedCrossNode</name> <init>= <expr><call><name><name>droppedForVerb</name><operator>.</operator><name>droppedFromPeer</name><operator>.</operator><name>getAndSet</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>droppedInternal</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>droppedCrossNode</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>messageConsumer</name><operator>.</operator><name>accept</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s messages were dropped in last %d ms: %d internal and %d cross node."</literal>
                                      <operator>+</operator> <literal type="string">" Mean internal dropped latency: %d ms and Mean cross-node dropped latency: %d ms"</literal></expr></argument>,
                                      <argument><expr><name>verb</name></expr></argument>,
                                      <argument><expr><name>LOG_DROPPED_INTERVAL_IN_MS</name></expr></argument>,
                                      <argument><expr><name>droppedInternal</name></expr></argument>,
                                      <argument><expr><name>droppedCrossNode</name></expr></argument>,
                                      <argument><expr><call><name><name>TimeUnit</name><operator>.</operator><name>NANOSECONDS</name><operator>.</operator><name>toMillis</name></name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <call><name><name>droppedForVerb</name><operator>.</operator><name>metrics</name><operator>.</operator><name>internalDroppedLatency</name><operator>.</operator><name>getSnapshot</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMean</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                      <argument><expr><call><name><name>TimeUnit</name><operator>.</operator><name>NANOSECONDS</name><operator>.</operator><name>toMillis</name></name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <call><name><name>droppedForVerb</name><operator>.</operator><name>metrics</name><operator>.</operator><name>crossNodeDroppedLatency</name><operator>.</operator><name>getSnapshot</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMean</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>count</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>resetDroppedMessages</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>droppedMessages</name><operator>.</operator><name>replaceAll</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>u</name></decl></parameter>, <parameter><decl><name>v</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><operator>new</operator> <call><name>DroppedForVerb</name><argument_list>(<argument><expr><operator>new</operator> <call><name>DroppedMessageMetrics</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

}</block></class>
</unit>
