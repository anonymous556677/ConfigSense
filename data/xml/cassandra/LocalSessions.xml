<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/repair/consistent/LocalSessions.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>repair</name><operator>.</operator><name>consistent</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>UnknownHostException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>time</name><operator>.</operator><name>Instant</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>CopyOnWriteArraySet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ExecutorService</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Executors</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>function</name><operator>.</operator><name>BooleanSupplier</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>function</name><operator>.</operator><name>Predicate</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Collectors</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Preconditions</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Verify</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableMap</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableSet</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Lists</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Sets</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>primitives</name><operator>.</operator><name>Ints</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>FutureCallback</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Futures</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ListenableFuture</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>MoreExecutors</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>RangesAtEndpoint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>ColumnFamilyStore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>Replica</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>repair</name><operator>.</operator><name>KeyspaceRepairManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>repair</name><operator>.</operator><name>consistent</name><operator>.</operator><name>admin</name><operator>.</operator><name>CleanupSummary</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>repair</name><operator>.</operator><name>consistent</name><operator>.</operator><name>admin</name><operator>.</operator><name>PendingStat</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>repair</name><operator>.</operator><name>consistent</name><operator>.</operator><name>admin</name><operator>.</operator><name>PendingStats</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>Schema</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>UTF8Type</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>InetAddressAndPort</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>SchemaConstants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>QueryProcessor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>UntypedResultSet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>SystemKeyspace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>BytesType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>UUIDType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>IPartitioner</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>Range</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>Token</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>gms</name><operator>.</operator><name>FailureDetector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>DataInputBuffer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>DataOutputBuffer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>Message</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>MessagingService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>repair</name><operator>.</operator><name>messages</name><operator>.</operator><name>FailSession</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>repair</name><operator>.</operator><name>messages</name><operator>.</operator><name>FinalizeCommit</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>repair</name><operator>.</operator><name>messages</name><operator>.</operator><name>FinalizePromise</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>repair</name><operator>.</operator><name>messages</name><operator>.</operator><name>FinalizePropose</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>repair</name><operator>.</operator><name>messages</name><operator>.</operator><name>PrepareConsistentRequest</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>repair</name><operator>.</operator><name>messages</name><operator>.</operator><name>PrepareConsistentResponse</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>repair</name><operator>.</operator><name>messages</name><operator>.</operator><name>RepairMessage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>repair</name><operator>.</operator><name>messages</name><operator>.</operator><name>StatusRequest</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>repair</name><operator>.</operator><name>messages</name><operator>.</operator><name>StatusResponse</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>TableId</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>ActiveRepairService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>StorageService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>FBUtilities</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>Verb</name><operator>.</operator><name>FAILED_SESSION_MSG</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>Verb</name><operator>.</operator><name>FINALIZE_PROMISE_MSG</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>Verb</name><operator>.</operator><name>PREPARE_CONSISTENT_RSP</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>Verb</name><operator>.</operator><name>STATUS_REQ</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>Verb</name><operator>.</operator><name>STATUS_RSP</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>repair</name><operator>.</operator><name>consistent</name><operator>.</operator><name>ConsistentSession</name><operator>.</operator><name>State</name><operator>.</operator><name>*</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Manages all consistent repair sessions a node is participating in.
 * &lt;p/&gt;
 * Since sessions need to be loaded, and since we need to handle cases where sessions might not exist, most of the logic
 * around local sessions is implemented in this class, with the LocalSession class being treated more like a simple struct,
 * in contrast with {@link CoordinatorSession}
 */</comment>
<class><specifier>public</specifier> class <name>LocalSessions</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>LocalSessions</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Listener</name></argument>&gt;</argument_list></name></type> <name>listeners</name> <init>= <expr><operator>new</operator> <call><name><name>CopyOnWriteArraySet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Amount of time a session can go without any activity before we start checking the status of other
     * participants to see if we've missed a message
     */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CHECK_STATUS_TIMEOUT</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>getInteger</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.repair_status_check_timeout_seconds"</literal></expr></argument>,
                                                               <argument><expr><call><name><name>Ints</name><operator>.</operator><name>checkedCast</name></name><argument_list>(<argument><expr><call><name><name>TimeUnit</name><operator>.</operator><name>HOURS</name><operator>.</operator><name>toSeconds</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Amount of time a session can go without any activity before being automatically set to FAILED
     */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>AUTO_FAIL_TIMEOUT</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>getInteger</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.repair_fail_timeout_seconds"</literal></expr></argument>,
                                                            <argument><expr><call><name><name>Ints</name><operator>.</operator><name>checkedCast</name></name><argument_list>(<argument><expr><call><name><name>TimeUnit</name><operator>.</operator><name>DAYS</name><operator>.</operator><name>toSeconds</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Amount of time a completed session is kept around after completion before being deleted, this gives
     * compaction plenty of time to move sstables from successful sessions into the repaired bucket
     */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>AUTO_DELETE_TIMEOUT</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>getInteger</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.repair_delete_timeout_seconds"</literal></expr></argument>,
                                                              <argument><expr><call><name><name>Ints</name><operator>.</operator><name>checkedCast</name></name><argument_list>(<argument><expr><call><name><name>TimeUnit</name><operator>.</operator><name>DAYS</name><operator>.</operator><name>toSeconds</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * How often LocalSessions.cleanup is run
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CLEANUP_INTERVAL</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>getInteger</name></name><argument_list>(<argument><expr><literal type="string">"cassandra.repair_cleanup_interval_seconds"</literal></expr></argument>,
                                                                  <argument><expr><call><name><name>Ints</name><operator>.</operator><name>checkedCast</name></name><argument_list>(<argument><expr><call><name><name>TimeUnit</name><operator>.</operator><name>MINUTES</name><operator>.</operator><name>toSeconds</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>TableId</name></argument>&gt;</argument_list></name></type> <name>uuidToTableId</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>UUID</name></argument>&gt;</argument_list></name></type> <name>src</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>ImmutableSet</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><call><name><name>Iterables</name><operator>.</operator><name>transform</name></name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>TableId</name><operator>::</operator><name>fromUUID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>UUID</name></argument>&gt;</argument_list></name></type> <name>tableIdToUuid</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>TableId</name></argument>&gt;</argument_list></name></type> <name>src</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>ImmutableSet</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><call><name><name>Iterables</name><operator>.</operator><name>transform</name></name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>TableId</name><operator>::</operator><name>asUUID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>keyspace</name> <init>= <expr><name><name>SchemaConstants</name><operator>.</operator><name>SYSTEM_KEYSPACE_NAME</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>table</name> <init>= <expr><name><name>SystemKeyspace</name><operator>.</operator><name>REPAIRS</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>started</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name><name>ImmutableMap</name><argument_list type="generic">&lt;<argument><name>UUID</name></argument>, <argument><name>LocalSession</name></argument>&gt;</argument_list></name></type> <name>sessions</name> <init>= <expr><call><name><name>ImmutableMap</name><operator>.</operator><name>of</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name><name>ImmutableMap</name><argument_list type="generic">&lt;<argument><name>TableId</name></argument>, <argument><name>RepairedState</name></argument>&gt;</argument_list></name></type> <name>repairedStates</name> <init>= <expr><call><name><name>ImmutableMap</name><operator>.</operator><name>of</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><name>int</name></type> <name>getNumSessions</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>sessions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>protected</specifier> <name>InetAddressAndPort</name></type> <name>getBroadcastAddressAndPort</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>protected</specifier> <name>boolean</name></type> <name>isAlive</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>address</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>FailureDetector</name><operator>.</operator><name>instance</name><operator>.</operator><name>isAlive</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>protected</specifier> <name>boolean</name></type> <name>isNodeInitialized</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>isInitialized</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>sessionInfo</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>all</name></decl></parameter>, <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ranges</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>LocalSession</name></argument>&gt;</argument_list></name></type> <name>currentSessions</name> <init>= <expr><call><name><name>sessions</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>all</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>currentSessions</name> <operator>=</operator> <call><name><name>Iterables</name><operator>.</operator><name>filter</name></name><argument_list>(<argument><expr><name>currentSessions</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>s</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><operator>!</operator><call><name><name>s</name><operator>.</operator><name>isCompleted</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>ranges</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>currentSessions</name> <operator>=</operator> <call><name><name>Iterables</name><operator>.</operator><name>filter</name></name><argument_list>(<argument><expr><name>currentSessions</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>s</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>s</name><operator>.</operator><name>intersects</name></name><argument_list>(<argument><expr><name>ranges</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return>return <expr><call><name><name>Lists</name><operator>.</operator><name>newArrayList</name></name><argument_list>(<argument><expr><call><name><name>Iterables</name><operator>.</operator><name>transform</name></name><argument_list>(<argument><expr><name>currentSessions</name></expr></argument>, <argument><expr><name>LocalSessionInfo</name><operator>::</operator><name>sessionToMap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>RepairedState</name></type> <name>getRepairedState</name><parameter_list>(<parameter><decl><type><name>TableId</name></type> <name>tid</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>repairedStates</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <synchronized>synchronized <init>(<expr><name>this</name></expr>)</init>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>repairedStates</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>repairedStates</name> <operator>=</operator> <name><name>ImmutableMap</name><operator>.</operator></name>&lt;<name>TableId</name></expr><operator>,</operator> <expr><name>RepairedState</name><operator>&gt;</operator><call><name>builder</name><argument_list>()</argument_list></call>
                                     <operator>.</operator><call><name>putAll</name><argument_list>(<argument><expr><name>repairedStates</name></expr></argument>)</argument_list></call>
                                     <operator>.</operator><call><name>put</name><argument_list>(<argument><expr><name>tid</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>RepairedState</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                     <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></synchronized>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>Verify</name><operator>.</operator><name>verifyNotNull</name></name><argument_list>(<argument><expr><call><name><name>repairedStates</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>maybeUpdateRepairedState</name><parameter_list>(<parameter><decl><type><name>LocalSession</name></type> <name>session</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>shouldStoreSession</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <for>for <control>(<init><decl><type><name>TableId</name></type> <name>tid</name> <range>: <expr><name><name>session</name><operator>.</operator><name>tableIds</name></name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>RepairedState</name></type> <name>state</name> <init>= <expr><call><name>getRepairedState</name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>session</name><operator>.</operator><name>ranges</name></name></expr></argument>, <argument><expr><name><name>session</name><operator>.</operator><name>repairedAt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>shouldStoreSession</name><parameter_list>(<parameter><decl><type><name>LocalSession</name></type> <name>session</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>session</name><operator>.</operator><name>getState</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>FINALIZED</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

        <comment type="line">// if the session is finalized but has repairedAt set to 0, it was</comment>
        <comment type="line">// a forced repair, and we shouldn't update the repaired state</comment>
        <return>return <expr><name><name>session</name><operator>.</operator><name>repairedAt</name></name> <operator>!=</operator> <name><name>ActiveRepairService</name><operator>.</operator><name>UNREPAIRED_SSTABLE</name></name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Determine if all ranges and tables covered by this session
     * have since been re-repaired by a more recent session
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isSuperseded</name><parameter_list>(<parameter><decl><type><name>LocalSession</name></type> <name>session</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>TableId</name></type> <name>tid</name> <range>: <expr><name><name>session</name><operator>.</operator><name>tableIds</name></name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>RepairedState</name></type> <name>state</name> <init>= <expr><call><name><name>repairedStates</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>long</name></type> <name>minRepaired</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>minRepairedAt</name></name><argument_list>(<argument><expr><name><name>session</name><operator>.</operator><name>ranges</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>minRepaired</name> <operator>&lt;=</operator> <name><name>session</name><operator>.</operator><name>repairedAt</name></name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></for>

        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>RepairedState</name><operator>.</operator><name>Stats</name></name></type> <name>getRepairedStats</name><parameter_list>(<parameter><decl><type><name>TableId</name></type> <name>tid</name></decl></parameter>, <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ranges</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>RepairedState</name></type> <name>state</name> <init>= <expr><call><name><name>repairedStates</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name><name>RepairedState</name><operator>.</operator><name>Stats</name><operator>.</operator><name>EMPTY</name></name></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><call><name><name>state</name><operator>.</operator><name>getRepairedStats</name></name><argument_list>(<argument><expr><name>ranges</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>PendingStats</name></type> <name>getPendingStats</name><parameter_list>(<parameter><decl><type><name>TableId</name></type> <name>tid</name></decl></parameter>, <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ranges</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name> <init>= <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getColumnFamilyStoreInstance</name></name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkArgument</name></name><argument_list>(<argument><expr><name>cfs</name> <operator>!=</operator> <literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>PendingStat</name><operator>.</operator><name>Builder</name></name></type> <name>pending</name> <init>= <expr><operator>new</operator> <call><name><name>PendingStat</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>PendingStat</name><operator>.</operator><name>Builder</name></name></type> <name>finalized</name> <init>= <expr><operator>new</operator> <call><name><name>PendingStat</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>PendingStat</name><operator>.</operator><name>Builder</name></name></type> <name>failed</name> <init>= <expr><operator>new</operator> <call><name><name>PendingStat</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>UUID</name></argument>, <argument><name>PendingStat</name></argument>&gt;</argument_list></name></type> <name>stats</name> <init>= <expr><call><name><name>cfs</name><operator>.</operator><name>getPendingRepairStats</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>UUID</name></argument>, <argument><name>PendingStat</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>stats</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>UUID</name></type> <name>sessionID</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PendingStat</name></type> <name>stat</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>Verify</name><operator>.</operator><name>verify</name></name><argument_list>(<argument><expr><call><name><name>sessionID</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>Iterables</name><operator>.</operator><name>getOnlyElement</name></name><argument_list>(<argument><expr><name><name>stat</name><operator>.</operator><name>sessions</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>LocalSession</name></type> <name>session</name> <init>= <expr><call><name><name>sessions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>sessionID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>Verify</name><operator>.</operator><name>verifyNotNull</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Iterables</name><operator>.</operator><name>any</name></name><argument_list>(<argument><expr><name>ranges</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>r</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>r</name><operator>.</operator><name>intersects</name></name><argument_list>(<argument><expr><name><name>session</name><operator>.</operator><name>ranges</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>

            <switch>switch <condition>(<expr><call><name><name>session</name><operator>.</operator><name>getState</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>FINALIZED</name></expr>:</case>
                    <expr_stmt><expr><call><name><name>finalized</name><operator>.</operator><name>addStat</name></name><argument_list>(<argument><expr><name>stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name>FAILED</name></expr>:</case>
                    <expr_stmt><expr><call><name><name>failed</name><operator>.</operator><name>addStat</name></name><argument_list>(<argument><expr><name>stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <default>default:</default>
                    <expr_stmt><expr><call><name><name>pending</name><operator>.</operator><name>addStat</name></name><argument_list>(<argument><expr><name>stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></switch>
        </block_content>}</block></for>

        <return>return <expr><operator>new</operator> <call><name>PendingStats</name><argument_list>(<argument><expr><call><name><name>cfs</name><operator>.</operator><name>keyspace</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>cfs</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><call><name><name>pending</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>finalized</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>failed</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>CleanupSummary</name></type> <name>cleanup</name><parameter_list>(<parameter><decl><type><name>TableId</name></type> <name>tid</name></decl></parameter>, <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ranges</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>force</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>LocalSession</name></argument>&gt;</argument_list></name></type> <name>candidates</name> <init>= <expr><call><name><name>Iterables</name><operator>.</operator><name>filter</name></name><argument_list>(<argument><expr><call><name><name>sessions</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                             <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>ls</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>ls</name><operator>.</operator><name>isCompleted</name></name><argument_list>()</argument_list></call>
                                                                   <operator>&amp;&amp;</operator> <call><name><name>ls</name><operator>.</operator><name>tableIds</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call>
                                                                   <operator>&amp;&amp;</operator> <call><name><name>Range</name><operator>.</operator><name>intersects</name></name><argument_list>(<argument><expr><name><name>ls</name><operator>.</operator><name>ranges</name></name></expr></argument>, <argument><expr><name>ranges</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name> <init>= <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getColumnFamilyStoreInstance</name></name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>UUID</name></argument>&gt;</argument_list></name></type> <name>sessionIds</name> <init>= <expr><call><name><name>Sets</name><operator>.</operator><name>newHashSet</name></name><argument_list>(<argument><expr><call><name><name>Iterables</name><operator>.</operator><name>transform</name></name><argument_list>(<argument><expr><name>candidates</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>s</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>s</name><operator>.</operator><name>sessionID</name></name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


        <return>return <expr><call><name><name>cfs</name><operator>.</operator><name>releaseRepairData</name></name><argument_list>(<argument><expr><name>sessionIds</name></expr></argument>, <argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * hook for operators to cancel sessions, cancelling from a non-coordinator is an error, unless
     * force is set to true. Messages are sent out to other participants, but we don't wait for a response
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>cancelSession</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>sessionID</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>force</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Cancelling local repair session {}"</literal></expr></argument>, <argument><expr><name>sessionID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>LocalSession</name></type> <name>session</name> <init>= <expr><call><name>getSession</name><argument_list>(<argument><expr><name>sessionID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkArgument</name></name><argument_list>(<argument><expr><name>session</name> <operator>!=</operator> <literal type="null">null</literal></expr></argument>, <argument><expr><literal type="string">"Session {} does not exist"</literal></expr></argument>, <argument><expr><name>sessionID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkArgument</name></name><argument_list>(<argument><expr><name>force</name> <operator>||</operator> <call><name><name>session</name><operator>.</operator><name>coordinator</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name>getBroadcastAddressAndPort</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><literal type="string">"Cancel session %s from it's coordinator (%s) or use --force"</literal></expr></argument>,
                                    <argument><expr><name>sessionID</name></expr></argument>, <argument><expr><name><name>session</name><operator>.</operator><name>coordinator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setStateAndSave</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>FailSession</name></argument>&gt;</argument_list></name></type> <name>message</name> <init>= <expr><call><name><name>Message</name><operator>.</operator><name>out</name></name><argument_list>(<argument><expr><name>FAILED_SESSION_MSG</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>FailSession</name><argument_list>(<argument><expr><name>sessionID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>InetAddressAndPort</name></type> <name>participant</name> <range>: <expr><name><name>session</name><operator>.</operator><name>participants</name></name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>participant</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name>getBroadcastAddressAndPort</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>sendMessage</name><argument_list>(<argument><expr><name>participant</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Loads sessions out of the repairs table and sets state to started
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>start</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkArgument</name></name><argument_list>(<argument><expr><operator>!</operator><name>started</name></expr></argument>, <argument><expr><literal type="string">"LocalSessions.start can only be called once"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkArgument</name></name><argument_list>(<argument><expr><call><name><name>sessions</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"No sessions should be added before start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>UntypedResultSet</name></type> <name>rows</name> <init>= <expr><call><name><name>QueryProcessor</name><operator>.</operator><name>executeInternalWithPaging</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"SELECT * FROM %s.%s"</literal></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>UUID</name></argument>, <argument><name>LocalSession</name></argument>&gt;</argument_list></name></type> <name>loadedSessions</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>TableId</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>RepairedState</name><operator>.</operator><name>Level</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>initialLevels</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>UntypedResultSet</name><operator>.</operator><name>Row</name></name></type> <name>row</name> <range>: <expr><name>rows</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <try>try
            <block>{<block_content>
                <decl_stmt><decl><type><name>LocalSession</name></type> <name>session</name> <init>= <expr><call><name>load</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>loadedSessions</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>session</name><operator>.</operator><name>sessionID</name></name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>shouldStoreSession</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <for>for <control>(<init><decl><type><name>TableId</name></type> <name>tid</name> <range>: <expr><name><name>session</name><operator>.</operator><name>tableIds</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>initialLevels</name><operator>.</operator><name>computeIfAbsent</name></name><argument_list>(<argument><expr><name>tid</name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>t</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
                                     <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>RepairedState</name><operator>.</operator><name>Level</name></name><argument_list>(<argument><expr><name><name>session</name><operator>.</operator><name>ranges</name></name></expr></argument>, <argument><expr><name><name>session</name><operator>.</operator><name>repairedAt</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalArgumentException</name></type> | <type><name>NullPointerException</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Unable to load malformed repair session {}, removing"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name><name>row</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><literal type="string">"parent_id"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name><name>row</name><operator>.</operator><name>getUUID</name></name><argument_list>(<argument><expr><literal type="string">"parent_id"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>row</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><literal type="string">"parent_id"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>deleteRow</name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getUUID</name></name><argument_list>(<argument><expr><literal type="string">"parent_id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></for>
        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>TableId</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>RepairedState</name><operator>.</operator><name>Level</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>initialLevels</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>getRepairedState</name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>addAll</name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt><expr><name>sessions</name> <operator>=</operator> <call><name><name>ImmutableMap</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><name>loadedSessions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>failOngoingRepairs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>started</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>stop</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>started</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>started</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>failOngoingRepairs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>failOngoingRepairs</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>LocalSession</name></type> <name>session</name> <range>: <expr><call><name><name>sessions</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <synchronized>synchronized <init>(<expr><name>session</name></expr>)</init>
            <block>{<block_content>
                <switch>switch <condition>(<expr><call><name><name>session</name><operator>.</operator><name>getState</name></name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>FAILED</name></expr>:</case>
                    <case>case <expr><name>FINALIZED</name></expr>:</case>
                    <case>case <expr><name>FINALIZE_PROMISED</name></expr>:</case>
                        <continue>continue;</continue>
                    <default>default:</default>
                        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Found repair session {} with state = {} - failing the repair"</literal></expr></argument>, <argument><expr><name><name>session</name><operator>.</operator><name>sessionID</name></name></expr></argument>, <argument><expr><call><name><name>session</name><operator>.</operator><name>getState</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>failSession</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></switch>
            </block_content>}</block></synchronized>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isStarted</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>started</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>shouldCheckStatus</name><parameter_list>(<parameter><decl><type><name>LocalSession</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>now</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>!</operator><call><name><name>session</name><operator>.</operator><name>isCompleted</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>now</name> <operator>&gt;</operator> <call><name><name>session</name><operator>.</operator><name>getLastUpdate</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>CHECK_STATUS_TIMEOUT</name><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>shouldFail</name><parameter_list>(<parameter><decl><type><name>LocalSession</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>now</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>!</operator><call><name><name>session</name><operator>.</operator><name>isCompleted</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>now</name> <operator>&gt;</operator> <call><name><name>session</name><operator>.</operator><name>getLastUpdate</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>AUTO_FAIL_TIMEOUT</name><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>shouldDelete</name><parameter_list>(<parameter><decl><type><name>LocalSession</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>now</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>session</name><operator>.</operator><name>isCompleted</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>now</name> <operator>&gt;</operator> <call><name><name>session</name><operator>.</operator><name>getLastUpdate</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>AUTO_DELETE_TIMEOUT</name><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Auto fails and auto deletes timed out and old sessions
     * Compaction will clean up the sstables still owned by a deleted session
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>cleanup</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Running LocalSessions.cleanup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isNodeInitialized</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"node not initialized, aborting local session cleanup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>LocalSession</name></argument>&gt;</argument_list></name></type> <name>currentSessions</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>sessions</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>LocalSession</name></type> <name>session</name> <range>: <expr><name>currentSessions</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <synchronized>synchronized <init>(<expr><name>session</name></expr>)</init>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>now</name> <init>= <expr><call><name><name>FBUtilities</name><operator>.</operator><name>nowInSeconds</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>shouldFail</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Auto failing timed out repair session {}"</literal></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>failSession</name><argument_list>(<argument><expr><name><name>session</name><operator>.</operator><name>sessionID</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><call><name>shouldDelete</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>session</name><operator>.</operator><name>getState</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>FINALIZED</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isSuperseded</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <comment type="line">// if we delete a non-superseded session, some ranges will be mis-reported as</comment>
                        <comment type="line">// not having been repaired in repair_admin after a restart</comment>
                        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Skipping delete of FINALIZED LocalSession {} because it has "</literal> <operator>+</operator>
                                    <literal type="string">"not been superseded by a more recent session"</literal></expr></argument>, <argument><expr><name><name>session</name><operator>.</operator><name>sessionID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>sessionHasData</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Auto deleting repair session {}"</literal></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>deleteSession</name><argument_list>(<argument><expr><name><name>session</name><operator>.</operator><name>sessionID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
                        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Skipping delete of LocalSession {} because it still contains sstables"</literal></expr></argument>, <argument><expr><name><name>session</name><operator>.</operator><name>sessionID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><call><name>shouldCheckStatus</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>sendStatusRequest</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></synchronized>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>ByteBuffer</name></type> <name>serializeRange</name><parameter_list>(<parameter><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>Token</name><operator>.</operator><name>serializer</name><operator>.</operator><name>serializedSize</name></name><argument_list>(<argument><expr><name><name>range</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>size</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name><name>Token</name><operator>.</operator><name>serializer</name><operator>.</operator><name>serializedSize</name></name><argument_list>(<argument><expr><name><name>range</name><operator>.</operator><name>right</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <init>(<decl><type><name>DataOutputBuffer</name></type> <name>buffer</name> <init>= <expr><operator>new</operator> <call><name>DataOutputBuffer</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>)</init>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>Token</name><operator>.</operator><name>serializer</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><name><name>range</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Token</name><operator>.</operator><name>serializer</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><name><name>range</name><operator>.</operator><name>right</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>buffer</name><operator>.</operator><name>buffer</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>serializeRanges</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ranges</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>buffers</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>ranges</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ranges</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>r</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>buffers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>serializeRange</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>buffers</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>deserializeRange</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>bb</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <try>try <init>(<decl><type><name>DataInputBuffer</name></type> <name>in</name> <init>= <expr><operator>new</operator> <call><name>DataInputBuffer</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>)</init>
        <block>{<block_content>
            <decl_stmt><decl><type><name>IPartitioner</name></type> <name>partitioner</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getPartitioner</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Token</name></type> <name>left</name> <init>= <expr><call><name><name>Token</name><operator>.</operator><name>serializer</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>partitioner</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Token</name></type> <name>right</name> <init>= <expr><call><name><name>Token</name><operator>.</operator><name>serializer</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>partitioner</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><operator>new</operator> <call><name><name>Range</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>deserializeRanges</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>ByteBuffer</name></argument>&gt;</argument_list></name></type> <name>buffers</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ranges</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>buffers</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>buffers</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>bb</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>ranges</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>deserializeRange</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ranges</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Save session state to table
     */</comment>
    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><name>void</name></type> <name>save</name><parameter_list>(<parameter><decl><type><name>LocalSession</name></type> <name>session</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>query</name> <init>= <expr><literal type="string">"INSERT INTO %s.%s "</literal> <operator>+</operator>
                       <literal type="string">"(parent_id, "</literal> <operator>+</operator>
                       <literal type="string">"started_at, "</literal> <operator>+</operator>
                       <literal type="string">"last_update, "</literal> <operator>+</operator>
                       <literal type="string">"repaired_at, "</literal> <operator>+</operator>
                       <literal type="string">"state, "</literal> <operator>+</operator>
                       <literal type="string">"coordinator, "</literal> <operator>+</operator>
                       <literal type="string">"coordinator_port, "</literal> <operator>+</operator>
                       <literal type="string">"participants, "</literal> <operator>+</operator>
                       <literal type="string">"participants_wp,"</literal> <operator>+</operator>
                       <literal type="string">"ranges, "</literal> <operator>+</operator>
                       <literal type="string">"cfids) "</literal> <operator>+</operator>
                       <literal type="string">"VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>QueryProcessor</name><operator>.</operator><name>executeInternal</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>,
                                       <argument><expr><name><name>session</name><operator>.</operator><name>sessionID</name></name></expr></argument>,
                                       <argument><expr><call><name><name>Date</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><call><name><name>Instant</name><operator>.</operator><name>ofEpochSecond</name></name><argument_list>(<argument><expr><name><name>session</name><operator>.</operator><name>startedAt</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                       <argument><expr><call><name><name>Date</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><call><name><name>Instant</name><operator>.</operator><name>ofEpochSecond</name></name><argument_list>(<argument><expr><call><name><name>session</name><operator>.</operator><name>getLastUpdate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                       <argument><expr><call><name><name>Date</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><call><name><name>Instant</name><operator>.</operator><name>ofEpochMilli</name></name><argument_list>(<argument><expr><name><name>session</name><operator>.</operator><name>repairedAt</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                       <argument><expr><call><name><name>session</name><operator>.</operator><name>getState</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ordinal</name><argument_list>()</argument_list></call></expr></argument>,
                                       <argument><expr><name><name>session</name><operator>.</operator><name>coordinator</name><operator>.</operator><name>address</name></name></expr></argument>,
                                       <argument><expr><name><name>session</name><operator>.</operator><name>coordinator</name><operator>.</operator><name>port</name></name></expr></argument>,
                                       <argument><expr><call><name><name>session</name><operator>.</operator><name>participants</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>participant</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>participant</name><operator>.</operator><name>address</name></name></expr></block_content></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toSet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                       <argument><expr><call><name><name>session</name><operator>.</operator><name>participants</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>participant</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>participant</name><operator>.</operator><name>getHostAddressAndPort</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toSet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                       <argument><expr><call><name>serializeRanges</name><argument_list>(<argument><expr><name><name>session</name><operator>.</operator><name>ranges</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                       <argument><expr><call><name>tableIdToUuid</name><argument_list>(<argument><expr><name><name>session</name><operator>.</operator><name>tableIds</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>maybeUpdateRepairedState</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>dateToSeconds</name><parameter_list>(<parameter><decl><type><name>Date</name></type> <name>d</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Ints</name><operator>.</operator><name>checkedCast</name></name><argument_list>(<argument><expr><call><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name><operator>.</operator><name>toSeconds</name></name><argument_list>(<argument><expr><call><name><name>d</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>LocalSession</name></type> <name>load</name><parameter_list>(<parameter><decl><type><name><name>UntypedResultSet</name><operator>.</operator><name>Row</name></name></type> <name>row</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>LocalSession</name><operator>.</operator><name>Builder</name></name></type> <name>builder</name> <init>= <expr><call><name><name>LocalSession</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>withState</name></name><argument_list>(<argument><expr><call><name><name>ConsistentSession</name><operator>.</operator><name>State</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"state"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>withSessionID</name></name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getUUID</name></name><argument_list>(<argument><expr><literal type="string">"parent_id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>InetAddressAndPort</name></type> <name>coordinator</name> <init>= <expr><call><name><name>InetAddressAndPort</name><operator>.</operator><name>getByAddressOverrideDefaults</name></name><argument_list>(
            <argument><expr><call><name><name>row</name><operator>.</operator><name>getInetAddress</name></name><argument_list>(<argument><expr><literal type="string">"coordinator"</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name><name>row</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"coordinator_port"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>withCoordinator</name></name><argument_list>(<argument><expr><name>coordinator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>withTableIds</name></name><argument_list>(<argument><expr><call><name>uuidToTableId</name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getSet</name></name><argument_list>(<argument><expr><literal type="string">"cfids"</literal></expr></argument>, <argument><expr><name><name>UUIDType</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>withRepairedAt</name></name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getTimestamp</name></name><argument_list>(<argument><expr><literal type="string">"repaired_at"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>withRanges</name></name><argument_list>(<argument><expr><call><name>deserializeRanges</name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getSet</name></name><argument_list>(<argument><expr><literal type="string">"ranges"</literal></expr></argument>, <argument><expr><name><name>BytesType</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//There is no cross version streaming and thus no cross version repair so assume that</comment>
        <comment type="line">//any valid repair sessions has the participants_wp column and any that doesn't is malformed</comment>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>participants</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getSet</name></name><argument_list>(<argument><expr><literal type="string">"participants_wp"</literal></expr></argument>, <argument><expr><name><name>UTF8Type</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>withParticipants</name></name><argument_list>(<argument><expr><call><name><name>participants</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>participant</name></decl></parameter></parameter_list> -&gt;
                                                             <block>{<block_content>
                                                                 <try>try
                                                                 <block>{<block_content>
                                                                     <return>return <expr><call><name><name>InetAddressAndPort</name><operator>.</operator><name>getByName</name></name><argument_list>(<argument><expr><name>participant</name></expr></argument>)</argument_list></call></expr>;</return>
                                                                 </block_content>}</block>
                                                                 <catch>catch <parameter_list>(<parameter><decl><type><name>UnknownHostException</name></type> <name>e</name></decl></parameter>)</parameter_list>
                                                                 <block>{<block_content>
                                                                     <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                                                                 </block_content>}</block></catch></try>
                                                             </block_content>}</block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toSet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>withStartedAt</name></name><argument_list>(<argument><expr><call><name>dateToSeconds</name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getTimestamp</name></name><argument_list>(<argument><expr><literal type="string">"started_at"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>withLastUpdate</name></name><argument_list>(<argument><expr><call><name>dateToSeconds</name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getTimestamp</name></name><argument_list>(<argument><expr><literal type="string">"last_update"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><call><name>buildSession</name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>deleteRow</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>sessionID</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>query</name> <init>= <expr><literal type="string">"DELETE FROM %s.%s WHERE parent_id=?"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>QueryProcessor</name><operator>.</operator><name>executeInternal</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sessionID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>syncTable</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>TableId</name></type> <name>tid</name> <init>= <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getTableMetadata</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call><operator>.</operator><name>id</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ColumnFamilyStore</name></type> <name>cfm</name> <init>= <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getColumnFamilyStoreInstance</name></name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cfm</name><operator>.</operator><name>forceBlockingFlush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Loads a session directly from the table. Should be used for testing only
     */</comment>
    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><name>LocalSession</name></type> <name>loadUnsafe</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>sessionId</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>query</name> <init>= <expr><literal type="string">"SELECT * FROM %s.%s WHERE parent_id=?"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>UntypedResultSet</name></type> <name>result</name> <init>= <expr><call><name><name>QueryProcessor</name><operator>.</operator><name>executeInternal</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sessionId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>result</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>UntypedResultSet</name><operator>.</operator><name>Row</name></name></type> <name>row</name> <init>= <expr><call><name><name>result</name><operator>.</operator><name>one</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>load</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>protected</specifier> <name>LocalSession</name></type> <name>buildSession</name><parameter_list>(<parameter><decl><type><name><name>LocalSession</name><operator>.</operator><name>Builder</name></name></type> <name>builder</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>LocalSession</name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>LocalSession</name></type> <name>getSession</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>sessionID</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>sessions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>sessionID</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>synchronized</specifier> <name>void</name></type> <name>putSessionUnsafe</name><parameter_list>(<parameter><decl><type><name>LocalSession</name></type> <name>session</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>putSession</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>save</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>putSession</name><parameter_list>(<parameter><decl><type><name>LocalSession</name></type> <name>session</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkArgument</name></name><argument_list>(<argument><expr><operator>!</operator><call><name><name>sessions</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name><name>session</name><operator>.</operator><name>sessionID</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><literal type="string">"LocalSession %s already exists"</literal></expr></argument>, <argument><expr><name><name>session</name><operator>.</operator><name>sessionID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkArgument</name></name><argument_list>(<argument><expr><name>started</name></expr></argument>, <argument><expr><literal type="string">"sessions cannot be added before LocalSessions is started"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>sessions</name> <operator>=</operator> <name><name>ImmutableMap</name><operator>.</operator></name>&lt;<name>UUID</name></expr><operator>,</operator> <expr><name>LocalSession</name><operator>&gt;</operator><call><name>builder</name><argument_list>()</argument_list></call>
                               <operator>.</operator><call><name>putAll</name><argument_list>(<argument><expr><name>sessions</name></expr></argument>)</argument_list></call>
                               <operator>.</operator><call><name>put</name><argument_list>(<argument><expr><name><name>session</name><operator>.</operator><name>sessionID</name></name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call>
                               <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>removeSession</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>sessionID</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkArgument</name></name><argument_list>(<argument><expr><name>sessionID</name> <operator>!=</operator> <literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>UUID</name></argument>, <argument><name>LocalSession</name></argument>&gt;</argument_list></name></type> <name>temp</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>sessions</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>temp</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>sessionID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>sessions</name> <operator>=</operator> <call><name><name>ImmutableMap</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><name>LocalSession</name></type> <name>createSessionUnsafe</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>sessionId</name></decl></parameter>, <parameter><decl><type><name><name>ActiveRepairService</name><operator>.</operator><name>ParentRepairSession</name></name></type> <name>prs</name></decl></parameter>, <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>peers</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>LocalSession</name><operator>.</operator><name>Builder</name></name></type> <name>builder</name> <init>= <expr><call><name><name>LocalSession</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>withState</name></name><argument_list>(<argument><expr><name><name>ConsistentSession</name><operator>.</operator><name>State</name><operator>.</operator><name>PREPARING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>withSessionID</name></name><argument_list>(<argument><expr><name>sessionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>withCoordinator</name></name><argument_list>(<argument><expr><name><name>prs</name><operator>.</operator><name>coordinator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>withTableIds</name></name><argument_list>(<argument><expr><call><name><name>prs</name><operator>.</operator><name>getTableIds</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>withRepairedAt</name></name><argument_list>(<argument><expr><name><name>prs</name><operator>.</operator><name>repairedAt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>withRanges</name></name><argument_list>(<argument><expr><call><name><name>prs</name><operator>.</operator><name>getRanges</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>withParticipants</name></name><argument_list>(<argument><expr><name>peers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>now</name> <init>= <expr><call><name><name>FBUtilities</name><operator>.</operator><name>nowInSeconds</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>withStartedAt</name></name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>withLastUpdate</name></name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><call><name>buildSession</name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name><name>ActiveRepairService</name><operator>.</operator><name>ParentRepairSession</name></name></type> <name>getParentRepairSession</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>sessionID</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>ActiveRepairService</name><operator>.</operator><name>instance</name><operator>.</operator><name>getParentRepairSession</name></name><argument_list>(<argument><expr><name>sessionID</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>sendMessage</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>destination</name></decl></parameter>, <parameter><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>RepairMessage</name></extends></argument>&gt;</argument_list></name></type> <name>message</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"sending {} to {}"</literal></expr></argument>, <argument><expr><name><name>message</name><operator>.</operator><name>payload</name></name></expr></argument>, <argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>MessagingService</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>send</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><name>void</name></type> <name>setStateAndSave</name><parameter_list>(<parameter><decl><type><name>LocalSession</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ConsistentSession</name><operator>.</operator><name>State</name></name></type> <name>state</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <synchronized>synchronized <init>(<expr><name>session</name></expr>)</init>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkArgument</name></name><argument_list>(<argument><expr><call><name><name>session</name><operator>.</operator><name>getState</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>canTransitionTo</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></argument>,
                                        <argument><expr><literal type="string">"Invalid state transition %s -&gt; %s"</literal></expr></argument>,
                                        <argument><expr><call><name><name>session</name><operator>.</operator><name>getState</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Changing LocalSession state from {} -&gt; {} for {}"</literal></expr></argument>, <argument><expr><call><name><name>session</name><operator>.</operator><name>getState</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>session</name><operator>.</operator><name>sessionID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>wasCompleted</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>isCompleted</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>setState</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>setLastUpdate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>save</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>session</name><operator>.</operator><name>isCompleted</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>wasCompleted</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>sessionCompleted</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <for>for <control>(<init><decl><type><name>Listener</name></type> <name>listener</name> <range>: <expr><name>listeners</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>listener</name><operator>.</operator><name>onIRStateChange</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        </block_content>}</block></synchronized>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>failSession</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>sessionID</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>failSession</name><argument_list>(<argument><expr><name>sessionID</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>failSession</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>sessionID</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>sendMessage</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>failSession</name><argument_list>(<argument><expr><call><name>getSession</name><argument_list>(<argument><expr><name>sessionID</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sendMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>failSession</name><parameter_list>(<parameter><decl><type><name>LocalSession</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>sendMessage</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>session</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <synchronized>synchronized <init>(<expr><name>session</name></expr>)</init>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>session</name><operator>.</operator><name>getState</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>FAILED</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Failing local repair session {}"</literal></expr></argument>, <argument><expr><name><name>session</name><operator>.</operator><name>sessionID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>setStateAndSave</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></synchronized>
            <if_stmt><if>if <condition>(<expr><name>sendMessage</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>sendMessage</name><argument_list>(<argument><expr><name><name>session</name><operator>.</operator><name>coordinator</name></name></expr></argument>, <argument><expr><call><name><name>Message</name><operator>.</operator><name>out</name></name><argument_list>(<argument><expr><name>FAILED_SESSION_MSG</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>FailSession</name><argument_list>(<argument><expr><name><name>session</name><operator>.</operator><name>sessionID</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>deleteSession</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>sessionID</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Deleting local repair session {}"</literal></expr></argument>, <argument><expr><name>sessionID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>LocalSession</name></type> <name>session</name> <init>= <expr><call><name>getSession</name><argument_list>(<argument><expr><name>sessionID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Preconditions</name><operator>.</operator><name>checkArgument</name></name><argument_list>(<argument><expr><call><name><name>session</name><operator>.</operator><name>isCompleted</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Cannot delete incomplete sessions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>deleteRow</name><argument_list>(<argument><expr><name>sessionID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>removeSession</name><argument_list>(<argument><expr><name>sessionID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><name>ListenableFuture</name></type> <name>prepareSession</name><parameter_list>(<parameter><decl><type><name>KeyspaceRepairManager</name></type> <name>repairManager</name></decl></parameter>,
                                    <parameter><decl><type><name>UUID</name></type> <name>sessionID</name></decl></parameter>,
                                    <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>ColumnFamilyStore</name></argument>&gt;</argument_list></name></type> <name>tables</name></decl></parameter>,
                                    <parameter><decl><type><name>RangesAtEndpoint</name></type> <name>tokenRanges</name></decl></parameter>,
                                    <parameter><decl><type><name>ExecutorService</name></type> <name>executor</name></decl></parameter>,
                                    <parameter><decl><type><name>BooleanSupplier</name></type> <name>isCancelled</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>repairManager</name><operator>.</operator><name>prepareIncrementalRepair</name></name><argument_list>(<argument><expr><name>sessionID</name></expr></argument>, <argument><expr><name>tables</name></expr></argument>, <argument><expr><name>tokenRanges</name></expr></argument>, <argument><expr><name>executor</name></expr></argument>, <argument><expr><name>isCancelled</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>RangesAtEndpoint</name></type> <name>filterLocalRanges</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ranges</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>RangesAtEndpoint</name></type> <name>localRanges</name> <init>= <expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>getLocalReplicas</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>RangesAtEndpoint</name><operator>.</operator><name>Builder</name></name></type> <name>builder</name> <init>= <expr><call><name><name>RangesAtEndpoint</name><operator>.</operator><name>builder</name></name><argument_list>(<argument><expr><call><name><name>localRanges</name><operator>.</operator><name>endpoint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name> <range>: <expr><name>ranges</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Replica</name></type> <name>replica</name> <range>: <expr><name>localRanges</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>replica</name><operator>.</operator><name>range</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>replica</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><call><name><name>replica</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>replica</name><operator>.</operator><name>decorateSubrange</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>

        </block_content>}</block></for>
        <return>return <expr><call><name><name>builder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * The PrepareConsistentRequest promotes the parent repair session to a consistent incremental
     * session, and isolates the data to be repaired from the rest of the table's data
     *
     * No response is sent to the repair coordinator until the data preparation / isolation has completed
     * successfully. If the data preparation fails, a failure message is sent to the coordinator,
     * cancelling the session.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>handlePrepareMessage</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>PrepareConsistentRequest</name></type> <name>request</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"received {} from {}"</literal></expr></argument>, <argument><expr><name>request</name></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>UUID</name></type> <name>sessionID</name> <init>= <expr><name><name>request</name><operator>.</operator><name>parentSession</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InetAddressAndPort</name></type> <name>coordinator</name> <init>= <expr><name><name>request</name><operator>.</operator><name>coordinator</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>InetAddressAndPort</name></argument>&gt;</argument_list></name></type> <name>peers</name> <init>= <expr><name><name>request</name><operator>.</operator><name>participants</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>ActiveRepairService</name><operator>.</operator><name>ParentRepairSession</name></name></type> <name>parentSession</name></decl>;</decl_stmt>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><name>parentSession</name> <operator>=</operator> <call><name>getParentRepairSession</name><argument_list>(<argument><expr><name>sessionID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Error retrieving ParentRepairSession for session {}, responding with failure"</literal></expr></argument>, <argument><expr><name>sessionID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sendMessage</name><argument_list>(<argument><expr><name>coordinator</name></expr></argument>, <argument><expr><call><name><name>Message</name><operator>.</operator><name>out</name></name><argument_list>(<argument><expr><name>PREPARE_CONSISTENT_RSP</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>PrepareConsistentResponse</name><argument_list>(<argument><expr><name>sessionID</name></expr></argument>, <argument><expr><call><name>getBroadcastAddressAndPort</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></catch></try>

        <decl_stmt><decl><type><name>LocalSession</name></type> <name>session</name> <init>= <expr><call><name>createSessionUnsafe</name><argument_list>(<argument><expr><name>sessionID</name></expr></argument>, <argument><expr><name>parentSession</name></expr></argument>, <argument><expr><name>peers</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>putSessionUnsafe</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Beginning local incremental repair session {}"</literal></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ExecutorService</name></type> <name>executor</name> <init>= <expr><call><name><name>Executors</name><operator>.</operator><name>newFixedThreadPool</name></name><argument_list>(<argument><expr><call><name><name>parentSession</name><operator>.</operator><name>getColumnFamilyStores</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>KeyspaceRepairManager</name></type> <name>repairManager</name> <init>= <expr><call><name><name>parentSession</name><operator>.</operator><name>getKeyspace</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRepairManager</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RangesAtEndpoint</name></type> <name>tokenRanges</name> <init>= <expr><call><name>filterLocalRanges</name><argument_list>(<argument><expr><call><name><name>parentSession</name><operator>.</operator><name>getKeyspace</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>parentSession</name><operator>.</operator><name>getRanges</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ListenableFuture</name></type> <name>repairPreparation</name> <init>= <expr><call><name>prepareSession</name><argument_list>(<argument><expr><name>repairManager</name></expr></argument>, <argument><expr><name>sessionID</name></expr></argument>, <argument><expr><call><name><name>parentSession</name><operator>.</operator><name>getColumnFamilyStores</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                            <argument><expr><name>tokenRanges</name></expr></argument>, <argument><expr><name>executor</name></expr></argument>, <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>session</name><operator>.</operator><name>getState</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>PREPARING</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>Futures</name><operator>.</operator><name>addCallback</name></name><argument_list>(<argument><expr><name>repairPreparation</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>FutureCallback</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>void</name></type> <name>onSuccess</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Object</name></type> <name>result</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <try>try
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Prepare phase for incremental repair session {} completed"</literal></expr></argument>, <argument><expr><name>sessionID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>prepareSessionExceptFailed</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Session {} failed before anticompaction completed"</literal></expr></argument>, <argument><expr><name>sessionID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <decl_stmt><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>PrepareConsistentResponse</name></argument>&gt;</argument_list></name></type> <name>message</name> <init>=
                        <expr><call><name><name>Message</name><operator>.</operator><name>out</name></name><argument_list>(<argument><expr><name>PREPARE_CONSISTENT_RSP</name></expr></argument>,
                                    <argument><expr><operator>new</operator> <call><name>PrepareConsistentResponse</name><argument_list>(<argument><expr><name>sessionID</name></expr></argument>, <argument><expr><call><name>getBroadcastAddressAndPort</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>session</name><operator>.</operator><name>getState</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>FAILED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>sendMessage</name><argument_list>(<argument><expr><name>coordinator</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <finally>finally
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>executor</name><operator>.</operator><name>shutdown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></finally></try>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>onFailure</name><parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <try>try
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Prepare phase for incremental repair session {} failed"</literal></expr></argument>, <argument><expr><name>sessionID</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>sendMessage</name><argument_list>(<argument><expr><name>coordinator</name></expr></argument>,
                                <argument><expr><call><name><name>Message</name><operator>.</operator><name>out</name></name><argument_list>(<argument><expr><name>PREPARE_CONSISTENT_RSP</name></expr></argument>,
                                            <argument><expr><operator>new</operator> <call><name>PrepareConsistentResponse</name><argument_list>(<argument><expr><name>sessionID</name></expr></argument>, <argument><expr><call><name>getBroadcastAddressAndPort</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>failSession</name><argument_list>(<argument><expr><name>sessionID</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <finally>finally
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>executor</name><operator>.</operator><name>shutdown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></finally></try>
            </block_content>}</block></function>
        }</block></class></expr></argument>, <argument><expr><call><name><name>MoreExecutors</name><operator>.</operator><name>directExecutor</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Checks for the session state, and sets it to prepared unless it is on a failed state.
     * Making the checks inside a synchronized block to prevent the session state from
     * being changed between the read and the update.
     *
     * @param session The local session to be set to prepared.
     * @return true if the session is prepared, false if not, i.e. session failed
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>prepareSessionExceptFailed</name><parameter_list>(<parameter><decl><type><name>LocalSession</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <synchronized>synchronized <init>(<expr><name>session</name></expr>)</init>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>session</name><operator>.</operator><name>getState</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAILED</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>setStateAndSave</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>PREPARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></synchronized>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>maybeSetRepairing</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>sessionID</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>LocalSession</name></type> <name>session</name> <init>= <expr><call><name>getSession</name><argument_list>(<argument><expr><name>sessionID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>session</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>session</name><operator>.</operator><name>getState</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>REPAIRING</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Setting local incremental repair session {} to REPAIRING"</literal></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setStateAndSave</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>REPAIRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>handleFinalizeProposeMessage</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>FinalizePropose</name></type> <name>propose</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"received {} from {}"</literal></expr></argument>, <argument><expr><name>propose</name></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>UUID</name></type> <name>sessionID</name> <init>= <expr><name><name>propose</name><operator>.</operator><name>sessionID</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LocalSession</name></type> <name>session</name> <init>= <expr><call><name>getSession</name><argument_list>(<argument><expr><name>sessionID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>session</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Received FinalizePropose message for unknown repair session {}, responding with failure"</literal></expr></argument>, <argument><expr><name>sessionID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sendMessage</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><call><name><name>Message</name><operator>.</operator><name>out</name></name><argument_list>(<argument><expr><name>FAILED_SESSION_MSG</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>FailSession</name><argument_list>(<argument><expr><name>sessionID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <try>try
        <block>{<block_content>
            <expr_stmt><expr><call><name>setStateAndSave</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>FINALIZE_PROMISED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/*
             Flushing the repairs table here, *before* responding to the coordinator prevents a scenario where we respond
             with a promise to the coordinator, but there is a failure before the commit log mutation with the
             FINALIZE_PROMISED status is synced to disk. This could cause the state for this session to revert to an
             earlier status on startup, which would prevent the failure recovery mechanism from ever being able to promote
             this session to FINALIZED, likely creating inconsistencies in the repaired data sets across nodes.
             */</comment>
            <expr_stmt><expr><call><name>syncTable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>sendMessage</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><call><name><name>Message</name><operator>.</operator><name>out</name></name><argument_list>(<argument><expr><name>FINALIZE_PROMISE_MSG</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>FinalizePromise</name><argument_list>(<argument><expr><name>sessionID</name></expr></argument>, <argument><expr><call><name>getBroadcastAddressAndPort</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Received FinalizePropose message for incremental repair session {}, responded with FinalizePromise"</literal></expr></argument>, <argument><expr><name>sessionID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalArgumentException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Error handling FinalizePropose message for {}"</literal></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>failSession</name><argument_list>(<argument><expr><name>sessionID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>protected</specifier> <name>void</name></type> <name>sessionCompleted</name><parameter_list>(<parameter><decl><type><name>LocalSession</name></type> <name>session</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>TableId</name></type> <name>tid</name><range>: <expr><name><name>session</name><operator>.</operator><name>tableIds</name></name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name> <init>= <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getColumnFamilyStoreInstance</name></name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>cfs</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>cfs</name><operator>.</operator><name>getRepairManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>incrementalSessionCompleted</name><argument_list>(<argument><expr><name><name>session</name><operator>.</operator><name>sessionID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Finalizes the repair session, completing it as successful.
     *
     * This only changes the state of the session, it doesn't promote the siloed sstables to repaired. That will happen
     * as part of the compaction process, and avoids having to worry about in progress compactions interfering with the
     * promotion.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>handleFinalizeCommitMessage</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>FinalizeCommit</name></type> <name>commit</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"received {} from {}"</literal></expr></argument>, <argument><expr><name>commit</name></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>UUID</name></type> <name>sessionID</name> <init>= <expr><name><name>commit</name><operator>.</operator><name>sessionID</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LocalSession</name></type> <name>session</name> <init>= <expr><call><name>getSession</name><argument_list>(<argument><expr><name>sessionID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>session</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Ignoring FinalizeCommit message for unknown repair session {}"</literal></expr></argument>, <argument><expr><name>sessionID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>setStateAndSave</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>FINALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Finalized local repair session {}"</literal></expr></argument>, <argument><expr><name>sessionID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>handleFailSessionMessage</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>FailSession</name></type> <name>msg</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"received {} from {}"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>failSession</name><argument_list>(<argument><expr><name><name>msg</name><operator>.</operator><name>sessionID</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>sendStatusRequest</name><parameter_list>(<parameter><decl><type><name>LocalSession</name></type> <name>session</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Attempting to learn the outcome of unfinished local incremental repair session {}"</literal></expr></argument>, <argument><expr><name><name>session</name><operator>.</operator><name>sessionID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>StatusRequest</name></argument>&gt;</argument_list></name></type> <name>request</name> <init>= <expr><call><name><name>Message</name><operator>.</operator><name>out</name></name><argument_list>(<argument><expr><name>STATUS_REQ</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>StatusRequest</name><argument_list>(<argument><expr><name><name>session</name><operator>.</operator><name>sessionID</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>InetAddressAndPort</name></type> <name>participant</name> <range>: <expr><name><name>session</name><operator>.</operator><name>participants</name></name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>getBroadcastAddressAndPort</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>participant</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isAlive</name><argument_list>(<argument><expr><name>participant</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>sendMessage</name><argument_list>(<argument><expr><name>participant</name></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>handleStatusRequest</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>StatusRequest</name></type> <name>request</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"received {} from {}"</literal></expr></argument>, <argument><expr><name>request</name></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>UUID</name></type> <name>sessionID</name> <init>= <expr><name><name>request</name><operator>.</operator><name>sessionID</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LocalSession</name></type> <name>session</name> <init>= <expr><call><name>getSession</name><argument_list>(<argument><expr><name>sessionID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>session</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Received status request message for unknown session {}"</literal></expr></argument>, <argument><expr><name>sessionID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sendMessage</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><call><name><name>Message</name><operator>.</operator><name>out</name></name><argument_list>(<argument><expr><name>STATUS_RSP</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>StatusResponse</name><argument_list>(<argument><expr><name>sessionID</name></expr></argument>, <argument><expr><name>FAILED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>sendMessage</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><call><name><name>Message</name><operator>.</operator><name>out</name></name><argument_list>(<argument><expr><name>STATUS_RSP</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>StatusResponse</name><argument_list>(<argument><expr><name>sessionID</name></expr></argument>, <argument><expr><call><name><name>session</name><operator>.</operator><name>getState</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Responding to status response message for incremental repair session {} with local state {}"</literal></expr></argument>, <argument><expr><name>sessionID</name></expr></argument>, <argument><expr><call><name><name>session</name><operator>.</operator><name>getState</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>handleStatusResponse</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>StatusResponse</name></type> <name>response</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"received {} from {}"</literal></expr></argument>, <argument><expr><name>response</name></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>UUID</name></type> <name>sessionID</name> <init>= <expr><name><name>response</name><operator>.</operator><name>sessionID</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LocalSession</name></type> <name>session</name> <init>= <expr><call><name>getSession</name><argument_list>(<argument><expr><name>sessionID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>session</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Received StatusResponse message for unknown repair session {}"</literal></expr></argument>, <argument><expr><name>sessionID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// only change local state if response state is FINALIZED or FAILED, since those are</comment>
        <comment type="line">// the only statuses that would indicate we've missed a message completing the session</comment>
        <if_stmt><if>if <condition>(<expr><name><name>response</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name>FINALIZED</name> <operator>||</operator> <name><name>response</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name>FAILED</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>setStateAndSave</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>response</name><operator>.</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Unfinished local incremental repair session {} set to state {}"</literal></expr></argument>, <argument><expr><name>sessionID</name></expr></argument>, <argument><expr><name><name>response</name><operator>.</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Received StatusResponse for repair session {} with state {}, which is not actionable. Doing nothing."</literal></expr></argument>, <argument><expr><name>sessionID</name></expr></argument>, <argument><expr><name><name>response</name><operator>.</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * determines if a local session exists, and if it's not finalized or failed
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSessionInProgress</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>sessionID</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>LocalSession</name></type> <name>session</name> <init>= <expr><call><name>getSession</name><argument_list>(<argument><expr><name>sessionID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>session</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>session</name><operator>.</operator><name>getState</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>FINALIZED</name> <operator>&amp;&amp;</operator> <call><name><name>session</name><operator>.</operator><name>getState</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>FAILED</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * determines if a local session exists, and if it's in the finalized state
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSessionFinalized</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>sessionID</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>LocalSession</name></type> <name>session</name> <init>= <expr><call><name>getSession</name><argument_list>(<argument><expr><name>sessionID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>session</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>session</name><operator>.</operator><name>getState</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>FINALIZED</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * determines if a local session exists
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>sessionExists</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>sessionID</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getSession</name><argument_list>(<argument><expr><name>sessionID</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><specifier>protected</specifier> <name>boolean</name></type> <name>sessionHasData</name><parameter_list>(<parameter><decl><type><name>LocalSession</name></type> <name>session</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Predicate</name><argument_list type="generic">&lt;<argument><name>TableId</name></argument>&gt;</argument_list></name></type> <name>predicate</name> <init>= <expr><lambda><parameter_list type="pseudo"><parameter><decl><name>tid</name></decl></parameter></parameter_list> -&gt; <block>{<block_content>
            <decl_stmt><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name> <init>= <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getColumnFamilyStoreInstance</name></name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><name>cfs</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cfs</name><operator>.</operator><name>getCompactionStrategyManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>hasDataForPendingRepair</name><argument_list>(<argument><expr><name><name>session</name><operator>.</operator><name>sessionID</name></name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></lambda></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>Iterables</name><operator>.</operator><name>any</name></name><argument_list>(<argument><expr><name><name>session</name><operator>.</operator><name>tableIds</name></name></expr></argument>, <argument><expr><name>predicate</name><operator>::</operator><name>test</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the repairedAt time for a sessions which is unknown, failed, or finalized
     * calling this for a session which is in progress throws an exception
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getFinalSessionRepairedAt</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>sessionID</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>LocalSession</name></type> <name>session</name> <init>= <expr><call><name>getSession</name><argument_list>(<argument><expr><name>sessionID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>session</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>session</name><operator>.</operator><name>getState</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>FAILED</name></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><name><name>ActiveRepairService</name><operator>.</operator><name>UNREPAIRED_SSTABLE</name></name></expr>;</return>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name><name>session</name><operator>.</operator><name>getState</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>FINALIZED</name></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><name><name>session</name><operator>.</operator><name>repairedAt</name></name></expr>;</return>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Cannot get final repaired at value for in progress session: "</literal> <operator>+</operator> <name>session</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>registerListener</name><parameter_list>(<parameter><decl><type><name>Listener</name></type> <name>listener</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>listeners</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>unregisterListener</name><parameter_list>(<parameter><decl><type><name>Listener</name></type> <name>listener</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>listeners</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <interface><specifier>public</specifier> interface <name>Listener</name>
    <block>{
        <function_decl><type><name>void</name></type> <name>onIRStateChange</name><parameter_list>(<parameter><decl><type><name>LocalSession</name></type> <name>session</name></decl></parameter>)</parameter_list>;</function_decl>
    }</block></interface>
}</block></class>
</unit>
