<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/streaming/StreamManager.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>streaming</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>management</name><operator>.</operator><name>ListenerNotFoundException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>management</name><operator>.</operator><name>MBeanNotificationInfo</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>management</name><operator>.</operator><name>NotificationFilter</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>management</name><operator>.</operator><name>NotificationListener</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>management</name><operator>.</operator><name>openmbean</name><operator>.</operator><name>CompositeData</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Function</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Sets</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>MoreExecutors</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>RateLimiter</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>cliffc</name><operator>.</operator><name>high_scale_lib</name><operator>.</operator><name>NonBlockingHashMap</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>InetAddressAndPort</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>streaming</name><operator>.</operator><name>management</name><operator>.</operator><name>StreamEventJMXNotifier</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>streaming</name><operator>.</operator><name>management</name><operator>.</operator><name>StreamStateCompositeData</name></name>;</import>

<comment type="block" format="javadoc">/**
 * StreamManager manages currently running {@link StreamResultFuture}s and provides status of all operation invoked.
 *
 * All stream operation should be created through this class to track streaming status and progress.
 */</comment>
<class><specifier>public</specifier> class <name>StreamManager</name> <super_list><implements>implements <super><name>StreamManagerMBean</name></super></implements></super_list>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>StreamManager</name></type> <name>instance</name> <init>= <expr><operator>new</operator> <call><name>StreamManager</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Gets streaming rate limiter.
     * When stream_throughput_outbound_megabits_per_sec is 0, this returns rate limiter
     * with the rate of Double.MAX_VALUE bytes per second.
     * Rate unit is bytes per sec.
     *
     * @return StreamRateLimiter with rate limit set based on peer location.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>StreamRateLimiter</name></type> <name>getRateLimiter</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>peer</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>StreamRateLimiter</name><argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>StreamRateLimiter</name>
    <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>BYTES_PER_MEGABIT</name> <init>= <expr><operator>(</operator><literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator> <operator>/</operator> <literal type="number">8.0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>RateLimiter</name></type> <name>limiter</name> <init>= <expr><call><name><name>RateLimiter</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name>calculateRateInBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>RateLimiter</name></type> <name>interDCLimiter</name> <init>= <expr><call><name><name>RateLimiter</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name>calculateInterDCRateInBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>isLocalDC</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>StreamRateLimiter</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>peer</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getLocalDataCenter</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getEndpointSnitch</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>isLocalDC</name> <operator>=</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getLocalDataCenter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(
                            <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getEndpointSnitch</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDatacenter</name><argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>isLocalDC</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>acquire</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>toTransfer</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>limiter</name><operator>.</operator><name>acquire</name></name><argument_list>(<argument><expr><name>toTransfer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isLocalDC</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>interDCLimiter</name><operator>.</operator><name>acquire</name></name><argument_list>(<argument><expr><name>toTransfer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>updateThroughput</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>limiter</name><operator>.</operator><name>setRate</name></name><argument_list>(<argument><expr><call><name>calculateRateInBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>updateInterDCThroughput</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>interDCLimiter</name><operator>.</operator><name>setRate</name></name><argument_list>(<argument><expr><call><name>calculateInterDCRateInBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <specifier>static</specifier> <name>double</name></type> <name>calculateRateInBytes</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><ternary><condition><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getStreamThroughputOutboundMegabitsPerSec</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>
                   ?</condition><then> <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getStreamThroughputOutboundMegabitsPerSec</name></name><argument_list>()</argument_list></call> <operator>*</operator> <name>BYTES_PER_MEGABIT</name></expr>
                   </then><else>: <expr><name><name>Double</name><operator>.</operator><name>MAX_VALUE</name></name></expr></else></ternary></expr>;</return> <comment type="line">// if throughput is set to 0 or negative value, throttling is disabled</comment>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <specifier>static</specifier> <name>double</name></type> <name>calculateInterDCRateInBytes</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><ternary><condition><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getInterDCStreamThroughputOutboundMegabitsPerSec</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>
                   ?</condition><then> <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getInterDCStreamThroughputOutboundMegabitsPerSec</name></name><argument_list>()</argument_list></call> <operator>*</operator> <name>BYTES_PER_MEGABIT</name></expr>
                   </then><else>: <expr><name><name>Double</name><operator>.</operator><name>MAX_VALUE</name></name></expr></else></ternary></expr>;</return> <comment type="line">// if throughput is set to 0 or negative value, throttling is disabled</comment>
        </block_content>}</block></function>

        <function><annotation>@<name>VisibleForTesting</name></annotation>
        <type><specifier>public</specifier> <specifier>static</specifier> <name>double</name></type> <name>getRateLimiterRateInBytes</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>limiter</name><operator>.</operator><name>getRate</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>VisibleForTesting</name></annotation>
        <type><specifier>public</specifier> <specifier>static</specifier> <name>double</name></type> <name>getInterDCRateLimiterRateInBytes</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>interDCLimiter</name><operator>.</operator><name>getRate</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>StreamEventJMXNotifier</name></type> <name>notifier</name> <init>= <expr><operator>new</operator> <call><name>StreamEventJMXNotifier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * Currently running streams. Removed after completion/failure.
     * We manage them in two different maps to distinguish plan from initiated ones to
     * receiving ones withing the same JVM.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>UUID</name></argument>, <argument><name>StreamResultFuture</name></argument>&gt;</argument_list></name></type> <name>initiatorStreams</name> <init>= <expr><operator>new</operator> <call><name><name>NonBlockingHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>UUID</name></argument>, <argument><name>StreamResultFuture</name></argument>&gt;</argument_list></name></type> <name>followerStreams</name> <init>= <expr><operator>new</operator> <call><name><name>NonBlockingHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>CompositeData</name></argument>&gt;</argument_list></name></type> <name>getCurrentStreams</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Sets</name><operator>.</operator><name>newHashSet</name></name><argument_list>(<argument><expr><call><name><name>Iterables</name><operator>.</operator><name>transform</name></name><argument_list>(<argument><expr><call><name><name>Iterables</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><call><name><name>initiatorStreams</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>followerStreams</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Function</name><argument_list type="generic">&lt;<argument><name>StreamResultFuture</name></argument>, <argument><name>CompositeData</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>CompositeData</name></type> <name>apply</name><parameter_list>(<parameter><decl><type><name>StreamResultFuture</name></type> <name>input</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <return>return <expr><call><name><name>StreamStateCompositeData</name><operator>.</operator><name>toCompositeData</name></name><argument_list>(<argument><expr><call><name><name>input</name><operator>.</operator><name>getCurrentState</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>registerInitiator</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>StreamResultFuture</name></type> <name>result</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addEventListener</name></name><argument_list>(<argument><expr><name>notifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Make sure we remove the stream on completion (whether successful or not)</comment>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>initiatorStreams</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>planId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>
        }</block></class></expr></argument>, <argument><expr><call><name><name>MoreExecutors</name><operator>.</operator><name>directExecutor</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>initiatorStreams</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>planId</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>StreamResultFuture</name></type> <name>registerFollower</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>StreamResultFuture</name></type> <name>result</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addEventListener</name></name><argument_list>(<argument><expr><name>notifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Make sure we remove the stream on completion (whether successful or not)</comment>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>followerStreams</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>planId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>
        }</block></class></expr></argument>, <argument><expr><call><name><name>MoreExecutors</name><operator>.</operator><name>directExecutor</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>StreamResultFuture</name></type> <name>previous</name> <init>= <expr><call><name><name>followerStreams</name><operator>.</operator><name>putIfAbsent</name></name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>planId</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name>previous</name> <operator>==</operator>  <literal type="null">null</literal></expr> ?</condition><then> <expr><name>result</name></expr> </then><else>: <expr><name>previous</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>StreamResultFuture</name></type> <name>getReceivingStream</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>planId</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>followerStreams</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>planId</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addNotificationListener</name><parameter_list>(<parameter><decl><type><name>NotificationListener</name></type> <name>listener</name></decl></parameter>, <parameter><decl><type><name>NotificationFilter</name></type> <name>filter</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>handback</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>notifier</name><operator>.</operator><name>addNotificationListener</name></name><argument_list>(<argument><expr><name>listener</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>handback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeNotificationListener</name><parameter_list>(<parameter><decl><type><name>NotificationListener</name></type> <name>listener</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ListenerNotFoundException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>notifier</name><operator>.</operator><name>removeNotificationListener</name></name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeNotificationListener</name><parameter_list>(<parameter><decl><type><name>NotificationListener</name></type> <name>listener</name></decl></parameter>, <parameter><decl><type><name>NotificationFilter</name></type> <name>filter</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>handback</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ListenerNotFoundException</name></expr></argument></throws>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>notifier</name><operator>.</operator><name>removeNotificationListener</name></name><argument_list>(<argument><expr><name>listener</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>handback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>MBeanNotificationInfo</name><index>[]</index></name></type> <name>getNotificationInfo</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>notifier</name><operator>.</operator><name>getNotificationInfo</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>StreamSession</name></type> <name>findSession</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>peer</name></decl></parameter>, <parameter><decl><type><name>UUID</name></type> <name>planId</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sessionIndex</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>searchInitiatorSessions</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>UUID</name></argument>, <argument><name>StreamResultFuture</name></argument>&gt;</argument_list></name></type> <name>streams</name> <init>= <expr><ternary><condition><expr><name>searchInitiatorSessions</name></expr> ?</condition><then> <expr><name>initiatorStreams</name></expr> </then><else>: <expr><name>followerStreams</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>findSession</name><argument_list>(<argument><expr><name>streams</name></expr></argument>, <argument><expr><name>peer</name></expr></argument>, <argument><expr><name>planId</name></expr></argument>, <argument><expr><name>sessionIndex</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>StreamSession</name></type> <name>findSession</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>UUID</name></argument>, <argument><name>StreamResultFuture</name></argument>&gt;</argument_list></name></type> <name>streams</name></decl></parameter>, <parameter><decl><type><name>InetAddressAndPort</name></type> <name>peer</name></decl></parameter>, <parameter><decl><type><name>UUID</name></type> <name>planId</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sessionIndex</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StreamResultFuture</name></type> <name>streamResultFuture</name> <init>= <expr><call><name><name>streams</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>planId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>streamResultFuture</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><call><name><name>streamResultFuture</name><operator>.</operator><name>getSession</name></name><argument_list>(<argument><expr><name>peer</name></expr></argument>, <argument><expr><name>sessionIndex</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
