<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/db/virtual/InternodeInboundTable.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>virtual</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>InetAddress</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>DecoratedKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>CompositeType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>InetAddressType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>Int32Type</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>LongType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>UTF8Type</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>LocalPartitioner</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>InetAddressAndPort</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>MessagingService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>InboundMessageHandlers</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>TableMetadata</name></name>;</import>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>InternodeInboundTable</name> <super_list><extends>extends <super><name>AbstractVirtualTable</name></super></extends></super_list>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ADDRESS</name> <init>= <expr><literal type="string">"address"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PORT</name> <init>= <expr><literal type="string">"port"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DC</name> <init>= <expr><literal type="string">"dc"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>RACK</name> <init>= <expr><literal type="string">"rack"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>USING_BYTES</name> <init>= <expr><literal type="string">"using_bytes"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>USING_RESERVE_BYTES</name> <init>= <expr><literal type="string">"using_reserve_bytes"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CORRUPT_FRAMES_RECOVERED</name> <init>= <expr><literal type="string">"corrupt_frames_recovered"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CORRUPT_FRAMES_UNRECOVERED</name> <init>= <expr><literal type="string">"corrupt_frames_unrecovered"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ERROR_BYTES</name> <init>= <expr><literal type="string">"error_bytes"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ERROR_COUNT</name> <init>= <expr><literal type="string">"error_count"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>EXPIRED_BYTES</name> <init>= <expr><literal type="string">"expired_bytes"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>EXPIRED_COUNT</name> <init>= <expr><literal type="string">"expired_count"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SCHEDULED_BYTES</name> <init>= <expr><literal type="string">"scheduled_bytes"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SCHEDULED_COUNT</name> <init>= <expr><literal type="string">"scheduled_count"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PROCESSED_BYTES</name> <init>= <expr><literal type="string">"processed_bytes"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PROCESSED_COUNT</name> <init>= <expr><literal type="string">"processed_count"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>RECEIVED_BYTES</name> <init>= <expr><literal type="string">"received_bytes"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>RECEIVED_COUNT</name> <init>= <expr><literal type="string">"received_count"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>THROTTLED_COUNT</name> <init>= <expr><literal type="string">"throttled_count"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>THROTTLED_NANOS</name> <init>= <expr><literal type="string">"throttled_nanos"</literal></expr></init></decl>;</decl_stmt>

    <constructor><name>InternodeInboundTable</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspace</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><call><name><name>TableMetadata</name><operator>.</operator><name>builder</name></name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><literal type="string">"internode_inbound"</literal></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>kind</name><argument_list>(<argument><expr><name><name>TableMetadata</name><operator>.</operator><name>Kind</name><operator>.</operator><name>VIRTUAL</name></name></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>partitioner</name><argument_list>(<argument><expr><operator>new</operator> <call><name>LocalPartitioner</name><argument_list>(<argument><expr><call><name><name>CompositeType</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name><name>InetAddressType</name><operator>.</operator><name>instance</name></name></expr></argument>, <argument><expr><name><name>Int32Type</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>addPartitionKeyColumn</name><argument_list>(<argument><expr><name>ADDRESS</name></expr></argument>, <argument><expr><name><name>InetAddressType</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>addPartitionKeyColumn</name><argument_list>(<argument><expr><name>PORT</name></expr></argument>, <argument><expr><name><name>Int32Type</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>addClusteringColumn</name><argument_list>(<argument><expr><name>DC</name></expr></argument>, <argument><expr><name><name>UTF8Type</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>addClusteringColumn</name><argument_list>(<argument><expr><name>RACK</name></expr></argument>, <argument><expr><name><name>UTF8Type</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>addRegularColumn</name><argument_list>(<argument><expr><name>USING_BYTES</name></expr></argument>, <argument><expr><name><name>LongType</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>addRegularColumn</name><argument_list>(<argument><expr><name>USING_RESERVE_BYTES</name></expr></argument>, <argument><expr><name><name>LongType</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>addRegularColumn</name><argument_list>(<argument><expr><name>CORRUPT_FRAMES_RECOVERED</name></expr></argument>, <argument><expr><name><name>LongType</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>addRegularColumn</name><argument_list>(<argument><expr><name>CORRUPT_FRAMES_UNRECOVERED</name></expr></argument>, <argument><expr><name><name>LongType</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>addRegularColumn</name><argument_list>(<argument><expr><name>ERROR_BYTES</name></expr></argument>, <argument><expr><name><name>LongType</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>addRegularColumn</name><argument_list>(<argument><expr><name>ERROR_COUNT</name></expr></argument>, <argument><expr><name><name>LongType</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>addRegularColumn</name><argument_list>(<argument><expr><name>EXPIRED_BYTES</name></expr></argument>, <argument><expr><name><name>LongType</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>addRegularColumn</name><argument_list>(<argument><expr><name>EXPIRED_COUNT</name></expr></argument>, <argument><expr><name><name>LongType</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>addRegularColumn</name><argument_list>(<argument><expr><name>SCHEDULED_BYTES</name></expr></argument>, <argument><expr><name><name>LongType</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>addRegularColumn</name><argument_list>(<argument><expr><name>SCHEDULED_COUNT</name></expr></argument>, <argument><expr><name><name>LongType</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>addRegularColumn</name><argument_list>(<argument><expr><name>PROCESSED_BYTES</name></expr></argument>, <argument><expr><name><name>LongType</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>addRegularColumn</name><argument_list>(<argument><expr><name>PROCESSED_COUNT</name></expr></argument>, <argument><expr><name><name>LongType</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>addRegularColumn</name><argument_list>(<argument><expr><name>RECEIVED_BYTES</name></expr></argument>, <argument><expr><name><name>LongType</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>addRegularColumn</name><argument_list>(<argument><expr><name>RECEIVED_COUNT</name></expr></argument>, <argument><expr><name><name>LongType</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>addRegularColumn</name><argument_list>(<argument><expr><name>THROTTLED_COUNT</name></expr></argument>, <argument><expr><name><name>LongType</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>addRegularColumn</name><argument_list>(<argument><expr><name>THROTTLED_NANOS</name></expr></argument>, <argument><expr><name><name>LongType</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>DataSet</name></type> <name>data</name><parameter_list>(<parameter><decl><type><name>DecoratedKey</name></type> <name>partitionKey</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>ByteBuffer</name><index>[]</index></name></type> <name>addressAndPortBytes</name> <init>= <expr><operator>(</operator><operator>(</operator><name>CompositeType</name><operator>)</operator> <call><name>metadata</name><argument_list>()</argument_list></call><operator>.</operator><name>partitionKeyType</name><operator>)</operator><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><call><name><name>partitionKey</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InetAddress</name></type> <name>address</name> <init>= <expr><call><name><name>InetAddressType</name><operator>.</operator><name>instance</name><operator>.</operator><name>compose</name></name><argument_list>(<argument><expr><name><name>addressAndPortBytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>port</name> <init>= <expr><call><name><name>Int32Type</name><operator>.</operator><name>instance</name><operator>.</operator><name>compose</name></name><argument_list>(<argument><expr><name><name>addressAndPortBytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InetAddressAndPort</name></type> <name>addressAndPort</name> <init>= <expr><call><name><name>InetAddressAndPort</name><operator>.</operator><name>getByAddressOverrideDefaults</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>SimpleDataSet</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>SimpleDataSet</name><argument_list>(<argument><expr><call><name>metadata</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InboundMessageHandlers</name></type> <name>handlers</name> <init>= <expr><call><name><name>MessagingService</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>messageHandlers</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>addressAndPort</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name>handlers</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>addRow</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>addressAndPort</name></expr></argument>, <argument><expr><name>handlers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>DataSet</name></type> <name>data</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>SimpleDataSet</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>SimpleDataSet</name><argument_list>(<argument><expr><call><name>metadata</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>MessagingService</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call>
                        <operator>.</operator><call><name><name>messageHandlers</name>
                        <operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>addressAndPort</name></decl></parameter>, <parameter><decl><name>handlers</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>addRow</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>addressAndPort</name></expr></argument>, <argument><expr><name>handlers</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>addRow</name><parameter_list>(<parameter><decl><type><name>SimpleDataSet</name></type> <name>dataSet</name></decl></parameter>, <parameter><decl><type><name>InetAddressAndPort</name></type> <name>addressAndPort</name></decl></parameter>, <parameter><decl><type><name>InboundMessageHandlers</name></type> <name>handlers</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>dc</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getEndpointSnitch</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDatacenter</name><argument_list>(<argument><expr><name>addressAndPort</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>rack</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getEndpointSnitch</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRack</name><argument_list>(<argument><expr><name>addressAndPort</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dataSet</name><operator>.</operator><name>row</name></name><argument_list>(<argument><expr><name><name>addressAndPort</name><operator>.</operator><name>address</name></name></expr></argument>, <argument><expr><name><name>addressAndPort</name><operator>.</operator><name>port</name></name></expr></argument>, <argument><expr><name>dc</name></expr></argument>, <argument><expr><name>rack</name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>column</name><argument_list>(<argument><expr><name>USING_BYTES</name></expr></argument>, <argument><expr><call><name><name>handlers</name><operator>.</operator><name>usingCapacity</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>column</name><argument_list>(<argument><expr><name>USING_RESERVE_BYTES</name></expr></argument>, <argument><expr><call><name><name>handlers</name><operator>.</operator><name>usingEndpointReserveCapacity</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>column</name><argument_list>(<argument><expr><name>CORRUPT_FRAMES_RECOVERED</name></expr></argument>, <argument><expr><call><name><name>handlers</name><operator>.</operator><name>corruptFramesRecovered</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>column</name><argument_list>(<argument><expr><name>CORRUPT_FRAMES_UNRECOVERED</name></expr></argument>, <argument><expr><call><name><name>handlers</name><operator>.</operator><name>corruptFramesUnrecovered</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>column</name><argument_list>(<argument><expr><name>ERROR_BYTES</name></expr></argument>, <argument><expr><call><name><name>handlers</name><operator>.</operator><name>errorBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>column</name><argument_list>(<argument><expr><name>ERROR_COUNT</name></expr></argument>, <argument><expr><call><name><name>handlers</name><operator>.</operator><name>errorCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>column</name><argument_list>(<argument><expr><name>EXPIRED_BYTES</name></expr></argument>, <argument><expr><call><name><name>handlers</name><operator>.</operator><name>expiredBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>column</name><argument_list>(<argument><expr><name>EXPIRED_COUNT</name></expr></argument>, <argument><expr><call><name><name>handlers</name><operator>.</operator><name>expiredCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>column</name><argument_list>(<argument><expr><name>SCHEDULED_BYTES</name></expr></argument>, <argument><expr><call><name><name>handlers</name><operator>.</operator><name>scheduledBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>column</name><argument_list>(<argument><expr><name>SCHEDULED_COUNT</name></expr></argument>, <argument><expr><call><name><name>handlers</name><operator>.</operator><name>scheduledCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>column</name><argument_list>(<argument><expr><name>PROCESSED_BYTES</name></expr></argument>, <argument><expr><call><name><name>handlers</name><operator>.</operator><name>processedBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>column</name><argument_list>(<argument><expr><name>PROCESSED_COUNT</name></expr></argument>, <argument><expr><call><name><name>handlers</name><operator>.</operator><name>processedCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>column</name><argument_list>(<argument><expr><name>RECEIVED_BYTES</name></expr></argument>, <argument><expr><call><name><name>handlers</name><operator>.</operator><name>receivedBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>column</name><argument_list>(<argument><expr><name>RECEIVED_COUNT</name></expr></argument>, <argument><expr><call><name><name>handlers</name><operator>.</operator><name>receivedCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>column</name><argument_list>(<argument><expr><name>THROTTLED_COUNT</name></expr></argument>, <argument><expr><call><name><name>handlers</name><operator>.</operator><name>throttledCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>column</name><argument_list>(<argument><expr><name>THROTTLED_NANOS</name></expr></argument>, <argument><expr><call><name><name>handlers</name><operator>.</operator><name>throttledNanos</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>
