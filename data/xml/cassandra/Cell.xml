<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/db/rows/Cell.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>rows</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>ValueAccessor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>DataOutputPlus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>DataInputPlus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>ColumnMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>memory</name><operator>.</operator><name>ByteBufferCloner</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>memory</name><operator>.</operator><name>Cloner</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A cell is our atomic unit for a single value of a single column.
 * &lt;p&gt;
 * A cell always holds at least a timestamp that gives us how the cell reconcile. We then
 * have 3 main types of cells:
 *   1) live regular cells: those will also have a value and, if for a complex column, a path.
 *   2) expiring cells: on top of regular cells, those have a ttl and a local deletion time (when they are expired).
 *   3) tombstone cells: those won't have value, but they have a local deletion time (when the tombstone was created).
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name><name>Cell</name><parameter_list>&lt;<parameter><name>V</name></parameter>&gt;</parameter_list></name> <super_list><extends>extends <super><name>ColumnData</name></super></extends></super_list>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>NO_TTL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>NO_DELETION_TIME</name> <init>= <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MAX_DELETION_TIME</name> <init>= <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name><name>Cell</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>comparator</name> <init>= <expr><lambda><parameter_list>(<parameter><decl><name>c1</name></decl></parameter>, <parameter><decl><name>c2</name></decl></parameter>)</parameter_list> -&gt;
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name><name>c1</name><operator>.</operator><name>column</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>c2</name><operator>.</operator><name>column</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>cmp</name></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>CellPath</name></argument>&gt;</argument_list></name></type> <name>pathComparator</name> <init>= <expr><call><name><name>c1</name><operator>.</operator><name>column</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>cellPathComparator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name>pathComparator</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>pathComparator</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><call><name><name>c1</name><operator>.</operator><name>path</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>c2</name><operator>.</operator><name>path</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></lambda></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Serializer</name></type> <name>serializer</name> <init>= <expr><operator>new</operator> <call><name><name>BufferCell</name><operator>.</operator><name>Serializer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <interface><specifier>public</specifier> interface <name><name>Factory</name><parameter_list>&lt;<parameter><name>V</name></parameter>&gt;</parameter_list></name>
    <block>{
        <function_decl><type><name><name>Cell</name><argument_list type="generic">&lt;<argument><name>V</name></argument>&gt;</argument_list></name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>ColumnMetadata</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ttl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>localDeletionTime</name></decl></parameter>, <parameter><decl><type><name>V</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>CellPath</name></type> <name>path</name></decl></parameter>)</parameter_list>;</function_decl>
    }</block></interface>

    <constructor><specifier>protected</specifier> <name>Cell</name><parameter_list>(<parameter><decl><type><name>ColumnMetadata</name></type> <name>column</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Whether the cell is a counter cell or not.
     *
     * @return whether the cell is a counter cell or not.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>isCounterCell</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>V</name></type> <name>value</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>ValueAccessor</name><argument_list type="generic">&lt;<argument><name>V</name></argument>&gt;</argument_list></name></type> <name>accessor</name><parameter_list>()</parameter_list>;</function_decl>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>valueSize</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>accessor</name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>(<argument><expr><call><name>value</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>ByteBuffer</name></type> <name>buffer</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>accessor</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toBuffer</name><argument_list>(<argument><expr><call><name>value</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * The cell timestamp.
     * &lt;p&gt;
     * @return the cell timestamp.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>long</name></type> <name>timestamp</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * The cell ttl.
     *
     * @return the cell ttl, or {@code NO_TTL} if the cell isn't an expiring one.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>int</name></type> <name>ttl</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * The cell local deletion time.
     *
     * @return the cell local deletion time, or {@code NO_DELETION_TIME} if the cell is neither
     * a tombstone nor an expiring one.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>int</name></type> <name>localDeletionTime</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Whether the cell is a tombstone or not.
     *
     * @return whether the cell is a tombstone or not.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>isTombstone</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Whether the cell is an expiring one or not.
     * &lt;p&gt;
     * Note that this only correspond to whether the cell liveness info
     * have a TTL or not, but doesn't tells whether the cell is already expired
     * or not. You should use {@link #isLive} for that latter information.
     *
     * @return whether the cell is an expiring one or not.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>isExpiring</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Whether the cell is live or not given the current time.
     *
     * @param nowInSec the current time in seconds. This is used to
     * decide if an expiring cell is expired or live.
     * @return whether the cell is live or not at {@code nowInSec}.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>isLive</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nowInSec</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * For cells belonging to complex types (non-frozen collection and UDT), the
     * path to the cell.
     *
     * @return the cell path for cells of complex column, and {@code null} for other cells.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>CellPath</name></type> <name>path</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>Cell</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>withUpdatedColumn</name><parameter_list>(<parameter><decl><type><name>ColumnMetadata</name></type> <name>newColumn</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>Cell</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>withUpdatedValue</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>newValue</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>Cell</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>withUpdatedTimestampAndLocalDeletionTime</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>newTimestamp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newLocalDeletionTime</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Used to apply the same optimization as in {@link Cell.Serializer#deserialize} when
     * the column is not queried but eventhough it's used for digest calculation.
     * @return a cell with an empty buffer as value
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>Cell</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>withSkippedValue</name><parameter_list>()</parameter_list>;</function_decl>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <specifier>final</specifier> <name><name>Cell</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>clone</name><parameter_list>(<parameter><decl><type><name>Cloner</name></type> <name>cloner</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>cloner</name><operator>.</operator><name>clone</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>Cell</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>clone</name><parameter_list>(<parameter><decl><type><name>ByteBufferCloner</name></type> <name>cloner</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><annotation>@<name>Override</name></annotation>
    <comment type="line">// Overrides super type to provide a more precise return type.</comment>
    <type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>Cell</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>markCounterLocalToBeCleared</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><annotation>@<name>Override</name></annotation>
    <comment type="line">// Overrides super type to provide a more precise return type.</comment>
    <type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>Cell</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>purge</name><parameter_list>(<parameter><decl><type><name>DeletionPurger</name></type> <name>purger</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nowInSec</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * The serialization format for cell is:
     *     [ flags ][ timestamp ][ deletion time ][    ttl    ][ path size ][ path ][ value size ][ value ]
     *     [   1b  ][ 8b (vint) ][   4b (vint)   ][ 4b (vint) ][ 4b (vint) ][  arb ][  4b (vint) ][  arb  ]
     *
     * where not all field are always present (in fact, only the [ flags ] are guaranteed to be present). The fields have the following
     * meaning:
     *   - [ flags ] is the cell flags. It is a byte for which each bit represents a flag whose meaning is explained below (*_MASK constants)
     *   - [ timestamp ] is the cell timestamp. Present unless the cell has the USE_TIMESTAMP_MASK.
     *   - [ deletion time]: the local deletion time for the cell. Present if either the cell is deleted (IS_DELETED_MASK)
     *       or it is expiring (IS_EXPIRING_MASK) but doesn't have the USE_ROW_TTL_MASK.
     *   - [ ttl ]: the ttl for the cell. Present if the row is expiring (IS_EXPIRING_MASK) but doesn't have the
     *       USE_ROW_TTL_MASK.
     *   - [ value size ] is the size of the [ value ] field. It's present unless either the cell has the HAS_EMPTY_VALUE_MASK, or the value
     *       for columns of this type have a fixed length.
     *   - [ path size ] is the size of the [ path ] field. Present iff this is the cell of a complex column.
     *   - [ value ]: the cell value, unless it has the HAS_EMPTY_VALUE_MASK.
     *   - [ path ]: the cell path if the column this is a cell of is complex.
     */</comment>
    <class><specifier>static</specifier> class <name>Serializer</name>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>IS_DELETED_MASK</name>             <init>= <expr><literal type="number">0x01</literal></expr></init></decl>;</decl_stmt> <comment type="line">// Whether the cell is a tombstone or not.</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>IS_EXPIRING_MASK</name>            <init>= <expr><literal type="number">0x02</literal></expr></init></decl>;</decl_stmt> <comment type="line">// Whether the cell is expiring.</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>HAS_EMPTY_VALUE_MASK</name>        <init>= <expr><literal type="number">0x04</literal></expr></init></decl>;</decl_stmt> <comment type="line">// Wether the cell has an empty value. This will be the case for tombstone in particular.</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>USE_ROW_TIMESTAMP_MASK</name>      <init>= <expr><literal type="number">0x08</literal></expr></init></decl>;</decl_stmt> <comment type="line">// Wether the cell has the same timestamp than the row this is a cell of.</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>USE_ROW_TTL_MASK</name>            <init>= <expr><literal type="number">0x10</literal></expr></init></decl>;</decl_stmt> <comment type="line">// Wether the cell has the same ttl than the row this is a cell of.</comment>

        <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name>void</name></type> <name>serialize</name><parameter_list>(<parameter><decl><type><name><name>Cell</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>cell</name></decl></parameter>, <parameter><decl><type><name>ColumnMetadata</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name>DataOutputPlus</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>LivenessInfo</name></type> <name>rowLiveness</name></decl></parameter>, <parameter><decl><type><name>SerializationHeader</name></type> <name>header</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <assert>assert <expr><name>cell</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
            <decl_stmt><decl><type><name>boolean</name></type> <name>hasValue</name> <init>= <expr><call><name><name>cell</name><operator>.</operator><name>valueSize</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>isDeleted</name> <init>= <expr><call><name><name>cell</name><operator>.</operator><name>isTombstone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>isExpiring</name> <init>= <expr><call><name><name>cell</name><operator>.</operator><name>isExpiring</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>useRowTimestamp</name> <init>= <expr><operator>!</operator><call><name><name>rowLiveness</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>cell</name><operator>.</operator><name>timestamp</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>rowLiveness</name><operator>.</operator><name>timestamp</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>useRowTTL</name> <init>= <expr><name>isExpiring</name> <operator>&amp;&amp;</operator> <call><name><name>rowLiveness</name><operator>.</operator><name>isExpiring</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>cell</name><operator>.</operator><name>ttl</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>rowLiveness</name><operator>.</operator><name>ttl</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>cell</name><operator>.</operator><name>localDeletionTime</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>rowLiveness</name><operator>.</operator><name>localExpirationTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasValue</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>HAS_EMPTY_VALUE_MASK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>isDeleted</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>IS_DELETED_MASK</name></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><name>isExpiring</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>IS_EXPIRING_MASK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>useRowTimestamp</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>USE_ROW_TIMESTAMP_MASK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>useRowTTL</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>USE_ROW_TTL_MASK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeByte</name></name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>useRowTimestamp</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>header</name><operator>.</operator><name>writeTimestamp</name></name><argument_list>(<argument><expr><call><name><name>cell</name><operator>.</operator><name>timestamp</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>isDeleted</name> <operator>||</operator> <name>isExpiring</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>useRowTTL</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>header</name><operator>.</operator><name>writeLocalDeletionTime</name></name><argument_list>(<argument><expr><call><name><name>cell</name><operator>.</operator><name>localDeletionTime</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>isExpiring</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>useRowTTL</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>header</name><operator>.</operator><name>writeTTL</name></name><argument_list>(<argument><expr><call><name><name>cell</name><operator>.</operator><name>ttl</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>column</name><operator>.</operator><name>isComplex</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>column</name><operator>.</operator><name>cellPathSerializer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>serialize</name><argument_list>(<argument><expr><call><name><name>cell</name><operator>.</operator><name>path</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>hasValue</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>header</name><operator>.</operator><name>getType</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>writeValue</name><argument_list>(<argument><expr><call><name><name>cell</name><operator>.</operator><name>value</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cell</name><operator>.</operator><name>accessor</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>V</name></parameter>&gt;</parameter_list> <name><name>Cell</name><argument_list type="generic">&lt;<argument><name>V</name></argument>&gt;</argument_list></name></type> <name>deserialize</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>LivenessInfo</name></type> <name>rowLiveness</name></decl></parameter>, <parameter><decl><type><name>ColumnMetadata</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name>SerializationHeader</name></type> <name>header</name></decl></parameter>, <parameter><decl><type><name>DeserializationHelper</name></type> <name>helper</name></decl></parameter>, <parameter><decl><type><name><name>ValueAccessor</name><argument_list type="generic">&lt;<argument><name>V</name></argument>&gt;</argument_list></name></type> <name>accessor</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readUnsignedByte</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>hasValue</name> <init>= <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>HAS_EMPTY_VALUE_MASK</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>isDeleted</name> <init>= <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>IS_DELETED_MASK</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>isExpiring</name> <init>= <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>IS_EXPIRING_MASK</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>useRowTimestamp</name> <init>= <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>USE_ROW_TIMESTAMP_MASK</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>useRowTTL</name> <init>= <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>USE_ROW_TTL_MASK</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>long</name></type> <name>timestamp</name> <init>= <expr><ternary><condition><expr><name>useRowTimestamp</name></expr> ?</condition><then> <expr><call><name><name>rowLiveness</name><operator>.</operator><name>timestamp</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>header</name><operator>.</operator><name>readTimestamp</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>localDeletionTime</name> <init>= <expr><ternary><condition><expr><name>useRowTTL</name></expr>
                                    ?</condition><then> <expr><call><name><name>rowLiveness</name><operator>.</operator><name>localExpirationTime</name></name><argument_list>()</argument_list></call></expr>
                                    </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>isDeleted</name> <operator>||</operator> <name>isExpiring</name></expr> ?</condition><then> <expr><call><name><name>header</name><operator>.</operator><name>readLocalDeletionTime</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NO_DELETION_TIME</name></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>ttl</name> <init>= <expr><ternary><condition><expr><name>useRowTTL</name></expr> ?</condition><then> <expr><call><name><name>rowLiveness</name><operator>.</operator><name>ttl</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>isExpiring</name></expr> ?</condition><then> <expr><call><name><name>header</name><operator>.</operator><name>readTTL</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NO_TTL</name></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>CellPath</name></type> <name>path</name> <init>= <expr><ternary><condition><expr><call><name><name>column</name><operator>.</operator><name>isComplex</name></name><argument_list>()</argument_list></call></expr>
                            ?</condition><then> <expr><call><name><name>column</name><operator>.</operator><name>cellPathSerializer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>deserialize</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>
                            </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>V</name></type> <name>value</name> <init>= <expr><call><name><name>accessor</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>hasValue</name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>helper</name><operator>.</operator><name>canSkipValue</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>path</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>helper</name><operator>.</operator><name>canSkipValue</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>header</name><operator>.</operator><name>getType</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>skipValue</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <decl_stmt><decl><type><name>boolean</name></type> <name>isCounter</name> <init>= <expr><name>localDeletionTime</name> <operator>==</operator> <name>NO_DELETION_TIME</name> <operator>&amp;&amp;</operator> <call><name><name>column</name><operator>.</operator><name>type</name><operator>.</operator><name>isCounter</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name><name>header</name><operator>.</operator><name>getType</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>read</name><argument_list>(<argument><expr><name>accessor</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getMaxValueSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>isCounter</name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name><name>helper</name><operator>.</operator><name>maybeClearCounterValue</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>accessor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>

            <return>return <expr><call><name><name>accessor</name><operator>.</operator><name>factory</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>cell</name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>ttl</name></expr></argument>, <argument><expr><name>localDeletionTime</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name>long</name></type> <name>serializedSize</name><parameter_list>(<parameter><decl><type><name><name>Cell</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>cell</name></decl></parameter>, <parameter><decl><type><name>ColumnMetadata</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name>LivenessInfo</name></type> <name>rowLiveness</name></decl></parameter>, <parameter><decl><type><name>SerializationHeader</name></type> <name>header</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>size</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <comment type="line">// flags</comment>
            <decl_stmt><decl><type><name>boolean</name></type> <name>hasValue</name> <init>= <expr><call><name><name>cell</name><operator>.</operator><name>valueSize</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>isDeleted</name> <init>= <expr><call><name><name>cell</name><operator>.</operator><name>isTombstone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>isExpiring</name> <init>= <expr><call><name><name>cell</name><operator>.</operator><name>isExpiring</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>useRowTimestamp</name> <init>= <expr><operator>!</operator><call><name><name>rowLiveness</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>cell</name><operator>.</operator><name>timestamp</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>rowLiveness</name><operator>.</operator><name>timestamp</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>useRowTTL</name> <init>= <expr><name>isExpiring</name> <operator>&amp;&amp;</operator> <call><name><name>rowLiveness</name><operator>.</operator><name>isExpiring</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>cell</name><operator>.</operator><name>ttl</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>rowLiveness</name><operator>.</operator><name>ttl</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>cell</name><operator>.</operator><name>localDeletionTime</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>rowLiveness</name><operator>.</operator><name>localExpirationTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>useRowTimestamp</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>header</name><operator>.</operator><name>timestampSerializedSize</name></name><argument_list>(<argument><expr><call><name><name>cell</name><operator>.</operator><name>timestamp</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>isDeleted</name> <operator>||</operator> <name>isExpiring</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>useRowTTL</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>header</name><operator>.</operator><name>localDeletionTimeSerializedSize</name></name><argument_list>(<argument><expr><call><name><name>cell</name><operator>.</operator><name>localDeletionTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>isExpiring</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>useRowTTL</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>header</name><operator>.</operator><name>ttlSerializedSize</name></name><argument_list>(<argument><expr><call><name><name>cell</name><operator>.</operator><name>ttl</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>column</name><operator>.</operator><name>isComplex</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>column</name><operator>.</operator><name>cellPathSerializer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>serializedSize</name><argument_list>(<argument><expr><call><name><name>cell</name><operator>.</operator><name>path</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>hasValue</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>header</name><operator>.</operator><name>getType</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>writtenLength</name><argument_list>(<argument><expr><call><name><name>cell</name><operator>.</operator><name>value</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cell</name><operator>.</operator><name>accessor</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <return>return <expr><name>size</name></expr>;</return>
        </block_content>}</block></function>

        <comment type="line">// Returns if the skipped cell was an actual cell (i.e. it had its presence flag).</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>skip</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>ColumnMetadata</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name>SerializationHeader</name></type> <name>header</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readUnsignedByte</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>hasValue</name> <init>= <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>HAS_EMPTY_VALUE_MASK</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>isDeleted</name> <init>= <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>IS_DELETED_MASK</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>isExpiring</name> <init>= <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>IS_EXPIRING_MASK</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>useRowTimestamp</name> <init>= <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>USE_ROW_TIMESTAMP_MASK</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>useRowTTL</name> <init>= <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>USE_ROW_TTL_MASK</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>useRowTimestamp</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>header</name><operator>.</operator><name>skipTimestamp</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>useRowTTL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>isDeleted</name> <operator>||</operator> <name>isExpiring</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>header</name><operator>.</operator><name>skipLocalDeletionTime</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>useRowTTL</name> <operator>&amp;&amp;</operator> <name>isExpiring</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>header</name><operator>.</operator><name>skipTTL</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>column</name><operator>.</operator><name>isComplex</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>column</name><operator>.</operator><name>cellPathSerializer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>skip</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>hasValue</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>header</name><operator>.</operator><name>getType</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>skipValue</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
