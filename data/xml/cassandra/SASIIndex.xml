<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/index/sasi/SASIIndex.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>index</name><operator>.</operator><name>sasi</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Callable</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>function</name><operator>.</operator><name>BiFunction</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>googlecode</name><operator>.</operator><name>concurrenttrees</name><operator>.</operator><name>common</name><operator>.</operator><name>Iterables</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>Operator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>statements</name><operator>.</operator><name>schema</name><operator>.</operator><name>IndexTarget</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>compaction</name><operator>.</operator><name>CompactionManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>compaction</name><operator>.</operator><name>OperationType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>filter</name><operator>.</operator><name>RowFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>Tracker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>AbstractType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>partitions</name><operator>.</operator><name>PartitionIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>partitions</name><operator>.</operator><name>PartitionUpdate</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>rows</name><operator>.</operator><name>Row</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>Murmur3Partitioner</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>ConfigurationException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>InvalidRequestException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>index</name><operator>.</operator><name>Index</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexRegistry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>index</name><operator>.</operator><name>SecondaryIndexBuilder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>index</name><operator>.</operator><name>TargetParser</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>index</name><operator>.</operator><name>sasi</name><operator>.</operator><name>conf</name><operator>.</operator><name>ColumnIndex</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>index</name><operator>.</operator><name>sasi</name><operator>.</operator><name>conf</name><operator>.</operator><name>IndexMode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>index</name><operator>.</operator><name>sasi</name><operator>.</operator><name>disk</name><operator>.</operator><name>OnDiskIndexBuilder</name><operator>.</operator><name>Mode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>index</name><operator>.</operator><name>sasi</name><operator>.</operator><name>disk</name><operator>.</operator><name>PerSSTableIndexWriter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>index</name><operator>.</operator><name>sasi</name><operator>.</operator><name>plan</name><operator>.</operator><name>QueryPlan</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>index</name><operator>.</operator><name>transactions</name><operator>.</operator><name>IndexTransaction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>Descriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>format</name><operator>.</operator><name>SSTableFlushObserver</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>format</name><operator>.</operator><name>SSTableReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>notifications</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>ColumnMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>IndexMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>Schema</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>TableMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>FBUtilities</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>Pair</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>OpOrder</name></name>;</import>

<import>import static <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name>;</import>

<class><specifier>public</specifier> class <name>SASIIndex</name> <super_list><implements>implements <super><name>Index</name></super>, <super><name>INotificationConsumer</name></super></implements></super_list>
<block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>USAGE_WARNING</name> <init>= <expr><literal type="string">"SASI indexes are experimental and are not recommended for production use."</literal></expr></init></decl>;</decl_stmt>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>SASIIndexBuildingSupport</name> <super_list><implements>implements <super><name>IndexBuildingSupport</name></super></implements></super_list>
    <block>{
        <function><type><specifier>public</specifier> <name>SecondaryIndexBuilder</name></type> <name>getIndexBuildTask</name><parameter_list>(<parameter><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name></decl></parameter>,
                                                       <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Index</name></argument>&gt;</argument_list></name></type> <name>indexes</name></decl></parameter>,
                                                       <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>&gt;</argument_list></name></type> <name>sstablesToRebuild</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>NavigableMap</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>, <argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>, <argument><name>ColumnIndex</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>sstables</name> <init>= <expr><operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>a</name></decl></parameter>, <parameter><decl><name>b</name></decl></parameter>)</parameter_list> -&gt; <block>{<block_content>
                <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>descriptor</name><operator>.</operator><name>generation</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>descriptor</name><operator>.</operator><name>generation</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>indexes</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call>
                   <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>i</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name>i</name> <operator>instanceof</operator> <name>SASIIndex</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
                   <operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>i</name></decl></parameter>)</parameter_list> -&gt; <block>{
                       <expr><name>SASIIndex</name> <name>sasi</name> <operator>=</operator> <operator>(</operator><name>SASIIndex</name><operator>)</operator> <name>i</name></expr></block></lambda></expr></argument>;
                       <argument><expr><call><name><name>sasi</name><operator>.</operator><name>index</name><operator>.</operator><name>dropData</name></name><argument_list>(<argument><expr><name>sstablesToRebuild</name></expr></argument>)</argument_list></call></expr></argument>;
                       <argument><expr><call><name><name>sstablesToRebuild</name><operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call>
                                        <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>sstable</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><operator>!</operator><call><name><name>sasi</name><operator>.</operator><name>index</name><operator>.</operator><name>hasSSTable</name></name><argument_list>(<argument><expr><name>sstable</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
                                        <operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>sstable</name></decl></parameter>)</parameter_list> -&gt; <block>{
                                            <expr><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>, <argument><name>ColumnIndex</name></argument>&gt;</argument_list></name> <name>toBuild</name> <operator>=</operator> <call><name><name>sstables</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>sstable</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>;
                                            if <argument><expr><operator>(</operator><name>toBuild</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator>
                                                <call><name><name>sstables</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>sstable</name></expr></argument>, <argument><expr><operator>(</operator><name>toBuild</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>;

                                            <argument><expr><call><name><name>toBuild</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>sasi</name><operator>.</operator><name>index</name><operator>.</operator><name>getDefinition</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>sasi</name><operator>.</operator><name>index</name></name></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></argument></argument_list></call></expr></expr_stmt>
                                        </block_content>}</block></function>)</block>;</class>
                   }</block></class>)<empty_stmt>;</empty_stmt>

            <return>return <expr><operator>new</operator> <call><name>SASIIndexBuilder</name><argument_list>(<argument><expr><name>cfs</name></expr></argument>, <argument><expr><name>sstables</name></expr></argument>)</argument_list></call></expr>;</return>
        }
    }

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>SASIIndexBuildingSupport</name></type> <name>INDEX_BUILDER_SUPPORT</name> <init>= <expr><operator>new</operator> <call><name>SASIIndexBuildingSupport</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ColumnFamilyStore</name></type> <name>baseCfs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>IndexMetadata</name></type> <name>config</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ColumnIndex</name></type> <name>index</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>SASIIndex</name><parameter_list>(<parameter><decl><type><name>ColumnFamilyStore</name></type> <name>baseCfs</name></decl></parameter>, <parameter><decl><type><name>IndexMetadata</name></type> <name>config</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>baseCfs</name></name> <operator>=</operator> <name>baseCfs</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>config</name></name> <operator>=</operator> <name>config</name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ColumnMetadata</name></type> <name>column</name> <init>= <expr><call><name><name>TargetParser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><call><name><name>baseCfs</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>config</name></expr></argument>)</argument_list></call><operator>.</operator><name>left</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>index</name></name> <operator>=</operator> <operator>new</operator> <call><name>ColumnIndex</name><argument_list>(<argument><expr><call><name><name>baseCfs</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><name>partitionKeyType</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Tracker</name></type> <name>tracker</name> <init>= <expr><call><name><name>baseCfs</name><operator>.</operator><name>getTracker</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>tracker</name><operator>.</operator><name>subscribe</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>SortedMap</name><argument_list type="generic">&lt;<argument><name>SSTableReader</name></argument>, <argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>, <argument><name>ColumnIndex</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>toRebuild</name> <init>= <expr><operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>a</name></decl></parameter>, <parameter><decl><name>b</name></decl></parameter>)</parameter_list>
                                                -&gt;<block type="pseudo"><block_content> <expr><call><name><name>Integer</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>descriptor</name><operator>.</operator><name>generation</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>descriptor</name><operator>.</operator><name>generation</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>SSTableReader</name></type> <name>sstable</name> <range>: <expr><call><name><name>index</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>tracker</name><operator>.</operator><name>getView</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>liveSSTables</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>, <argument><name>ColumnIndex</name></argument>&gt;</argument_list></name></type> <name>perSSTable</name> <init>= <expr><call><name><name>toRebuild</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>sstable</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>perSSTable</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>toRebuild</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>sstable</name></expr></argument>, <argument><expr><operator>(</operator><name>perSSTable</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name><name>perSSTable</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>index</name><operator>.</operator><name>getDefinition</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name><name>CompactionManager</name><operator>.</operator><name>instance</name><operator>.</operator><name>submitIndexBuild</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SASIIndexBuilder</name><argument_list>(<argument><expr><name>baseCfs</name></expr></argument>, <argument><expr><name>toRebuild</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Called via reflection at {@link IndexMetadata#validateCustomIndexOptions}
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>validateOptions</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>TableMetadata</name></type> <name>metadata</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>metadata</name><operator>.</operator><name>partitioner</name></name> <operator>instanceof</operator> <name>Murmur3Partitioner</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"SASI only supports Murmur3Partitioner."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>targetColumn</name> <init>= <expr><call><name><name>options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"target"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>targetColumn</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"unknown target column"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>, <argument><name><name>IndexTarget</name><operator>.</operator><name>Type</name></name></argument>&gt;</argument_list></name></type> <name>target</name> <init>= <expr><call><name><name>TargetParser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><name>targetColumn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>target</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"failed to retrieve target column for: "</literal> <operator>+</operator> <name>targetColumn</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>target</name><operator>.</operator><name>left</name><operator>.</operator><name>isComplex</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"complex columns are not yet supported by SASI"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>target</name><operator>.</operator><name>left</name><operator>.</operator><name>isPartitionKey</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"partition key columns are not yet supported by SASI"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>IndexMode</name><operator>.</operator><name>validateAnalyzer</name></name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name><name>target</name><operator>.</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>IndexMode</name></type> <name>mode</name> <init>= <expr><call><name><name>IndexMode</name><operator>.</operator><name>getMode</name></name><argument_list>(<argument><expr><name><name>target</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>mode</name><operator>.</operator><name>mode</name></name> <operator>==</operator> <name><name>Mode</name><operator>.</operator><name>SPARSE</name></name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>mode</name><operator>.</operator><name>isLiteral</name></name></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"SPARSE mode is only supported on non-literal columns."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>mode</name><operator>.</operator><name>isAnalyzed</name></name></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConfigurationException</name><argument_list>(<argument><expr><literal type="string">"SPARSE mode doesn't support analyzers."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>register</name><parameter_list>(<parameter><decl><type><name>IndexRegistry</name></type> <name>registry</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>registry</name><operator>.</operator><name>registerIndex</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>IndexMetadata</name></type> <name>getIndexMetadata</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>config</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Callable</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getInitializationTask</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Callable</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getMetadataReloadTask</name><parameter_list>(<parameter><decl><type><name>IndexMetadata</name></type> <name>indexMetadata</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Callable</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getBlockingFlushTask</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return> <comment type="line">// SASI indexes are flushed along side memtable</comment>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Callable</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getInvalidateTask</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getTruncateTask</name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>timestampMicros</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Callable</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getTruncateTask</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>truncatedAt</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{<block_content>
            <expr_stmt><expr><call><name><name>index</name><operator>.</operator><name>dropData</name></name><argument_list>(<argument><expr><name>truncatedAt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></lambda></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>shouldBuildBlocking</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>ColumnFamilyStore</name></argument>&gt;</argument_list></name></type> <name>getBackingTable</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>indexes</name><parameter_list>(<parameter><decl><type><name>RegularAndStaticColumns</name></type> <name>columns</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>columns</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>index</name><operator>.</operator><name>getDefinition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>dependsOn</name><parameter_list>(<parameter><decl><type><name>ColumnMetadata</name></type> <name>column</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>index</name><operator>.</operator><name>getDefinition</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>supportsExpression</name><parameter_list>(<parameter><decl><type><name>ColumnMetadata</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name>Operator</name></type> <name>operator</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>dependsOn</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>index</name><operator>.</operator><name>supports</name></name><argument_list>(<argument><expr><name>operator</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>customExpressionValueType</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>RowFilter</name></type> <name>getPostIndexQueryFilter</name><parameter_list>(<parameter><decl><type><name>RowFilter</name></type> <name>filter</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>filter</name><operator>.</operator><name>withoutExpressions</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getEstimatedResultRows</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <comment type="line">// this is temporary (until proper QueryPlan is integrated into Cassandra)</comment>
        <comment type="line">// and allows us to priority SASI indexes if any in the query since they</comment>
        <comment type="line">// are going to be more efficient, to query and intersect, than built-in indexes.</comment>
        <return>return <expr><name><name>Long</name><operator>.</operator><name>MIN_VALUE</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>validate</name><parameter_list>(<parameter><decl><type><name>PartitionUpdate</name></type> <name>update</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{<block_content/>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>supportsReplicaFilteringProtection</name><parameter_list>(<parameter><decl><type><name>RowFilter</name></type> <name>rowFilter</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Indexer</name></type> <name>indexerFor</name><parameter_list>(<parameter><decl><type><name>DecoratedKey</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>RegularAndStaticColumns</name></type> <name>columns</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nowInSec</name></decl></parameter>, <parameter><decl><type><name>WriteContext</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name><name>IndexTransaction</name><operator>.</operator><name>Type</name></name></type> <name>transactionType</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <class><super><name>Indexer</name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>void</name></type> <name>begin</name><parameter_list>()</parameter_list>
            <block>{<block_content/>}</block></function>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>partitionDelete</name><parameter_list>(<parameter><decl><type><name>DeletionTime</name></type> <name>deletionTime</name></decl></parameter>)</parameter_list>
            <block>{<block_content/>}</block></function>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>rangeTombstone</name><parameter_list>(<parameter><decl><type><name>RangeTombstone</name></type> <name>tombstone</name></decl></parameter>)</parameter_list>
            <block>{<block_content/>}</block></function>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>insertRow</name><parameter_list>(<parameter><decl><type><name>Row</name></type> <name>row</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>isNewData</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>adjustMemtableSize</name><argument_list>(<argument><expr><call><name><name>index</name><operator>.</operator><name>index</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>CassandraWriteContext</name><operator>.</operator><name>fromContext</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getGroup</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>updateRow</name><parameter_list>(<parameter><decl><type><name>Row</name></type> <name>oldRow</name></decl></parameter>, <parameter><decl><type><name>Row</name></type> <name>newRow</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><call><name>insertRow</name><argument_list>(<argument><expr><name>newRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>removeRow</name><parameter_list>(<parameter><decl><type><name>Row</name></type> <name>row</name></decl></parameter>)</parameter_list>
            <block>{<block_content/>}</block></function>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>finish</name><parameter_list>()</parameter_list>
            <block>{<block_content/>}</block></function>

            <comment type="line">// we are only interested in the data from Memtable</comment>
            <comment type="line">// everything else is going to be handled by SSTableWriter observers</comment>
            <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isNewData</name><parameter_list>()</parameter_list>
            <block>{<block_content>
                <return>return <expr><name>transactionType</name> <operator>==</operator> <name><name>IndexTransaction</name><operator>.</operator><name>Type</name><operator>.</operator><name>UPDATE</name></name></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>adjustMemtableSize</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>additionalSpace</name></decl></parameter>, <parameter><decl><type><name><name>OpOrder</name><operator>.</operator><name>Group</name></name></type> <name>opGroup</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>baseCfs</name><operator>.</operator><name>getTracker</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getView</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCurrentMemtable</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAllocator</name><argument_list>()</argument_list></call><operator>.</operator><call><name>onHeap</name><argument_list>()</argument_list></call><operator>.</operator><call><name>allocate</name><argument_list>(<argument><expr><name>additionalSpace</name></expr></argument>, <argument><expr><name>opGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>
        }</block></class></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Searcher</name></type> <name>searcherFor</name><parameter_list>(<parameter><decl><type><name>ReadCommand</name></type> <name>command</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>InvalidRequestException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>TableMetadata</name></type> <name>config</name> <init>= <expr><call><name><name>command</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name> <init>= <expr><call><name><name>Schema</name><operator>.</operator><name>instance</name><operator>.</operator><name>getColumnFamilyStoreInstance</name></name><argument_list>(<argument><expr><name><name>config</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><lambda><parameter_list type="pseudo"><parameter><decl><name>controller</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><operator>new</operator> <call><name>QueryPlan</name><argument_list>(<argument><expr><name>cfs</name></expr></argument>, <argument><expr><name>command</name></expr></argument>, <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getRangeRpcTimeout</name></name><argument_list>(<argument><expr><name>MILLISECONDS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>execute</name><argument_list>(<argument><expr><name>controller</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>SSTableFlushObserver</name></type> <name>getFlushObserver</name><parameter_list>(<parameter><decl><type><name>Descriptor</name></type> <name>descriptor</name></decl></parameter>, <parameter><decl><type><name>OperationType</name></type> <name>opType</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>newWriter</name><argument_list>(<argument><expr><call><name><name>baseCfs</name><operator>.</operator><name>metadata</name></name><argument_list>()</argument_list></call><operator>.</operator><name>partitionKeyType</name></expr></argument>, <argument><expr><name>descriptor</name></expr></argument>, <argument><expr><call><name><name>Collections</name><operator>.</operator><name>singletonMap</name></name><argument_list>(<argument><expr><call><name><name>index</name><operator>.</operator><name>getDefinition</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>opType</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>BiFunction</name><argument_list type="generic">&lt;<argument><name>PartitionIterator</name></argument>, <argument><name>ReadCommand</name></argument>, <argument><name>PartitionIterator</name></argument>&gt;</argument_list></name></type> <name>postProcessorFor</name><parameter_list>(<parameter><decl><type><name>ReadCommand</name></type> <name>command</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><lambda><parameter_list>(<parameter><decl><name>partitionIterator</name></decl></parameter>, <parameter><decl><name>readCommand</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name>partitionIterator</name></expr></block_content></block></lambda></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>IndexBuildingSupport</name></type> <name>getBuildTaskSupport</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>INDEX_BUILDER_SUPPORT</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>handleNotification</name><parameter_list>(<parameter><decl><type><name>INotification</name></type> <name>notification</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>sender</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// unfortunately, we can only check the type of notification via instanceof :(</comment>
        <if_stmt><if>if <condition>(<expr><name>notification</name> <operator>instanceof</operator> <name>SSTableAddedNotification</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>SSTableAddedNotification</name></type> <name>notice</name> <init>= <expr><operator>(</operator><name>SSTableAddedNotification</name><operator>)</operator> <name>notification</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>index</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name><name>Collections</name><operator>.</operator></name>&lt;<name>SSTableReader</name><operator>&gt;</operator><call><name>emptyList</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Iterables</name><operator>.</operator><name>toList</name></name><argument_list>(<argument><expr><name><name>notice</name><operator>.</operator><name>added</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>notification</name> <operator>instanceof</operator> <name>SSTableListChangedNotification</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>SSTableListChangedNotification</name></type> <name>notice</name> <init>= <expr><operator>(</operator><name>SSTableListChangedNotification</name><operator>)</operator> <name>notification</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>index</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name><name>notice</name><operator>.</operator><name>removed</name></name></expr></argument>, <argument><expr><name><name>notice</name><operator>.</operator><name>added</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>notification</name> <operator>instanceof</operator> <name>MemtableRenewedNotification</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>index</name><operator>.</operator><name>switchMemtable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>notification</name> <operator>instanceof</operator> <name>MemtableSwitchedNotification</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>index</name><operator>.</operator><name>switchMemtable</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>MemtableSwitchedNotification</name><operator>)</operator> <name>notification</name><operator>)</operator><operator>.</operator><name>memtable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>notification</name> <operator>instanceof</operator> <name>MemtableDiscardedNotification</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>index</name><operator>.</operator><name>discardMemtable</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>MemtableDiscardedNotification</name><operator>)</operator> <name>notification</name><operator>)</operator><operator>.</operator><name>memtable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>ColumnIndex</name></type> <name>getIndex</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>index</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <specifier>static</specifier> <name>PerSSTableIndexWriter</name></type> <name>newWriter</name><parameter_list>(<parameter><decl><type><name><name>AbstractType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>keyValidator</name></decl></parameter>,
                                                     <parameter><decl><type><name>Descriptor</name></type> <name>descriptor</name></decl></parameter>,
                                                     <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ColumnMetadata</name></argument>, <argument><name>ColumnIndex</name></argument>&gt;</argument_list></name></type> <name>indexes</name></decl></parameter>,
                                                     <parameter><decl><type><name>OperationType</name></type> <name>opType</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>PerSSTableIndexWriter</name><argument_list>(<argument><expr><name>keyValidator</name></expr></argument>, <argument><expr><name>descriptor</name></expr></argument>, <argument><expr><name>opType</name></expr></argument>, <argument><expr><name>indexes</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}
</unit>
