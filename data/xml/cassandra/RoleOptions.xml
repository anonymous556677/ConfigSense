<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/auth/RoleOptions.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>auth</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>base</name><operator>.</operator><name>Optional</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>InvalidRequestException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>SyntaxException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>FBUtilities</name></name>;</import>

<class><specifier>public</specifier> class <name>RoleOptions</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>IRoleManager</name><operator>.</operator><name>Option</name></name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>options</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Set a value for a specific option.
     * Throws SyntaxException if the same option is set multiple times
     * @param option
     * @param value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOption</name><parameter_list>(<parameter><decl><type><name><name>IRoleManager</name><operator>.</operator><name>Option</name></name></type> <name>option</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>options</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>SyntaxException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Multiple definition for property '%s'"</literal></expr></argument>, <argument><expr><call><name><name>option</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>options</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Return true if there are no options with values set, false otherwise
     * @return whether any options have values set or not
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isEmpty</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>options</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Return a map of all the options which have been set
     * @return all options with values
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>IRoleManager</name><operator>.</operator><name>Option</name></name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>getOptions</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>options</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Return a boolean value of the superuser option
     * @return superuser option value
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>getSuperuser</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>fromNullable</name></name><argument_list>(<argument><expr><operator>(</operator><name>Boolean</name><operator>)</operator><call><name><name>options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>IRoleManager</name><operator>.</operator><name>Option</name><operator>.</operator><name>SUPERUSER</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Return a boolean value of the login option
     * @return login option value
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>getLogin</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>fromNullable</name></name><argument_list>(<argument><expr><operator>(</operator><name>Boolean</name><operator>)</operator><call><name><name>options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>IRoleManager</name><operator>.</operator><name>Option</name><operator>.</operator><name>LOGIN</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Return the string value of the password option
     * @return password option value
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getPassword</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>fromNullable</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator><call><name><name>options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>IRoleManager</name><operator>.</operator><name>Option</name><operator>.</operator><name>PASSWORD</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Return a {@code Map&lt;String, String&gt;} representing custom options
     * It is the responsiblity of IRoleManager implementations which support
     * IRoleManager.Option.OPTION to handle type checking and conversion of these
     * values, if present
     * @return map of custom options
     */</comment>
    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>public</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getCustomOptions</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>fromNullable</name></name><argument_list>(<argument><expr><operator>(</operator><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><operator>)</operator><call><name><name>options</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>IRoleManager</name><operator>.</operator><name>Option</name><operator>.</operator><name>OPTIONS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Validate the contents of the options in two ways:
     * - Ensure that only a subset of the options supported by the configured IRoleManager are set
     * - Validate the type of any option values present.
     * Should either condition fail, then InvalidRequestException is thrown. This method is called
     * during validation of CQL statements, so the IRE results in a error response to the client.
     *
     * @throws InvalidRequestException if any options which are not supported by the configured IRoleManager
     *     are set or if any option value is of an incorrect type.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>validate</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name><name>IRoleManager</name><operator>.</operator><name>Option</name></name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></name></type> <name>option</name> <range>: <expr><call><name><name>options</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getRoleManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>supportedOptions</name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><call><name><name>option</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s doesn't support %s"</literal></expr></argument>,
                                                                <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getRoleManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>,
                                                                <argument><expr><call><name><name>option</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            <switch>switch <condition>(<expr><call><name><name>option</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>LOGIN</name></expr>:</case>
                <case>case <expr><name>SUPERUSER</name></expr>:</case>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name><name>option</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>Boolean</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                        <throw>throw <expr><operator>new</operator> <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Invalid value for property '%s'. "</literal> <operator>+</operator>
                                                                        <literal type="string">"It must be a boolean"</literal></expr></argument>,
                                                                        <argument><expr><call><name><name>option</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
                    <break>break;</break>
                <case>case <expr><name>PASSWORD</name></expr>:</case>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name><name>option</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>String</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                        <throw>throw <expr><operator>new</operator> <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Invalid value for property '%s'. "</literal> <operator>+</operator>
                                                                        <literal type="string">"It must be a string"</literal></expr></argument>,
                                                                        <argument><expr><call><name><name>option</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
                    <break>break;</break>
                <case>case <expr><name>OPTIONS</name></expr>:</case>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name><name>option</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>Map</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                        <throw>throw <expr><operator>new</operator> <call><name>InvalidRequestException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Invalid value for property '%s'. "</literal> <operator>+</operator>
                                                                        <literal type="string">"It must be a map"</literal></expr></argument>,
                                                                        <argument><expr><call><name><name>option</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
                    <break>break;</break>

            </block_content>}</block></switch>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>FBUtilities</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
