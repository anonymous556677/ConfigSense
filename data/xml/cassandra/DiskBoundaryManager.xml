<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/db/DiskBoundaryManager.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Collectors</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>IPartitioner</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>Range</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>Splitter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>Token</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>RangesAtEndpoint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>TokenMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>PendingRangeCalculatorService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>StorageService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>FBUtilities</name></name>;</import>

<class><specifier>public</specifier> class <name>DiskBoundaryManager</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>DiskBoundaryManager</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>DiskBoundaries</name></type> <name>diskBoundaries</name></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name>DiskBoundaries</name></type> <name>getDiskBoundaries</name><parameter_list>(<parameter><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>cfs</name><operator>.</operator><name>getPartitioner</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>splitter</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isPresent</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>new</operator> <call><name>DiskBoundaries</name><argument_list>(<argument><expr><name>cfs</name></expr></argument>, <argument><expr><call><name><name>cfs</name><operator>.</operator><name>getDirectories</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWriteableLocations</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>DisallowedDirectories</name><operator>.</operator><name>getDirectoriesVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>diskBoundaries</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>diskBoundaries</name><operator>.</operator><name>isOutOfDate</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <synchronized>synchronized <init>(<expr><name>this</name></expr>)</init>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>diskBoundaries</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>diskBoundaries</name><operator>.</operator><name>isOutOfDate</name></name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Refreshing disk boundary cache for {}.{}"</literal></expr></argument>, <argument><expr><call><name><name>cfs</name><operator>.</operator><name>keyspace</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cfs</name><operator>.</operator><name>getTableName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>DiskBoundaries</name></type> <name>oldBoundaries</name> <init>= <expr><name>diskBoundaries</name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>diskBoundaries</name> <operator>=</operator> <call><name>getDiskBoundaryValue</name><argument_list>(<argument><expr><name>cfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Updating boundaries from {} to {} for {}.{}"</literal></expr></argument>, <argument><expr><name>oldBoundaries</name></expr></argument>, <argument><expr><name>diskBoundaries</name></expr></argument>, <argument><expr><call><name><name>cfs</name><operator>.</operator><name>keyspace</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cfs</name><operator>.</operator><name>getTableName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></synchronized>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>diskBoundaries</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>invalidate</name><parameter_list>()</parameter_list>
    <block>{<block_content>
       <if_stmt><if>if <condition>(<expr><name>diskBoundaries</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
           <expr_stmt><expr><call><name><name>diskBoundaries</name><operator>.</operator><name>invalidate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>DiskBoundaries</name></type> <name>getDiskBoundaryValue</name><parameter_list>(<parameter><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>RangesAtEndpoint</name></type> <name>localRanges</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>long</name></type> <name>ringVersion</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TokenMetadata</name></type> <name>tmd</name></decl>;</decl_stmt>
        <do>do
        <block>{<block_content>
            <expr_stmt><expr><name>tmd</name> <operator>=</operator> <call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>getTokenMetadata</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ringVersion</name> <operator>=</operator> <call><name><name>tmd</name><operator>.</operator><name>getRingVersion</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>StorageService</name><operator>.</operator><name>instance</name><operator>.</operator><name>isBootstrapMode</name></name><argument_list>()</argument_list></call>
                <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>StorageService</name><operator>.</operator><name>isReplacingSameAddress</name></name><argument_list>()</argument_list></call></expr>)</condition> <comment type="line">// When replacing same address, the node marks itself as UN locally</comment>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>PendingRangeCalculatorService</name><operator>.</operator><name>instance</name><operator>.</operator><name>blockUntilFinished</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>localRanges</name> <operator>=</operator> <call><name><name>tmd</name><operator>.</operator><name>getPendingRanges</name></name><argument_list>(<argument><expr><call><name><name>cfs</name><operator>.</operator><name>keyspace</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <comment type="line">// Reason we use use the future settled TMD is that if we decommission a node, we want to stream</comment>
                <comment type="line">// from that node to the correct location on disk, if we didn't, we would put new files in the wrong places.</comment>
                <comment type="line">// We do this to minimize the amount of data we need to move in rebalancedisks once everything settled</comment>
                <expr_stmt><expr><name>localRanges</name> <operator>=</operator> <call><name><name>cfs</name><operator>.</operator><name>keyspace</name><operator>.</operator><name>getReplicationStrategy</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAddressReplicas</name><argument_list>(<argument><expr><call><name><name>tmd</name><operator>.</operator><name>cloneAfterAllSettled</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Got local ranges {} (ringVersion = {})"</literal></expr></argument>, <argument><expr><name>localRanges</name></expr></argument>, <argument><expr><name>ringVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        while <condition>(<expr><name>ringVersion</name> <operator>!=</operator> <call><name><name>tmd</name><operator>.</operator><name>getRingVersion</name></name><argument_list>()</argument_list></call></expr>)</condition>;</do> <comment type="line">// if ringVersion is different here it means that</comment>
                                                     <comment type="line">// it might have changed before we calculated localRanges - recalculate</comment>

        <decl_stmt><decl><type><name>int</name></type> <name>directoriesVersion</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Directories</name><operator>.</operator><name>DataDirectory</name><index>[]</index></name></type> <name>dirs</name></decl>;</decl_stmt>
        <do>do
        <block>{<block_content>
            <expr_stmt><expr><name>directoriesVersion</name> <operator>=</operator> <call><name><name>DisallowedDirectories</name><operator>.</operator><name>getDirectoriesVersion</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>dirs</name> <operator>=</operator> <call><name><name>cfs</name><operator>.</operator><name>getDirectories</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWriteableLocations</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        while <condition>(<expr><name>directoriesVersion</name> <operator>!=</operator> <call><name><name>DisallowedDirectories</name><operator>.</operator><name>getDirectoriesVersion</name></name><argument_list>()</argument_list></call></expr>)</condition>;</do> <comment type="line">// if directoriesVersion has changed we need to recalculate</comment>

        <if_stmt><if>if <condition>(<expr><name>localRanges</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>localRanges</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>new</operator> <call><name>DiskBoundaries</name><argument_list>(<argument><expr><name>cfs</name></expr></argument>, <argument><expr><name>dirs</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>ringVersion</name></expr></argument>, <argument><expr><name>directoriesVersion</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PartitionPosition</name></argument>&gt;</argument_list></name></type> <name>positions</name> <init>= <expr><call><name>getDiskBoundaries</name><argument_list>(<argument><expr><name>localRanges</name></expr></argument>, <argument><expr><call><name><name>cfs</name><operator>.</operator><name>getPartitioner</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dirs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><operator>new</operator> <call><name>DiskBoundaries</name><argument_list>(<argument><expr><name>cfs</name></expr></argument>, <argument><expr><name>dirs</name></expr></argument>, <argument><expr><name>positions</name></expr></argument>, <argument><expr><name>ringVersion</name></expr></argument>, <argument><expr><name>directoriesVersion</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a list of disk boundaries, the result will differ depending on whether vnodes are enabled or not.
     *
     * What is returned are upper bounds for the disks, meaning everything from partitioner.minToken up to
     * getDiskBoundaries(..).get(0) should be on the first disk, everything between 0 to 1 should be on the second disk
     * etc.
     *
     * The final entry in the returned list will always be the partitioner maximum tokens upper key bound
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>PartitionPosition</name></argument>&gt;</argument_list></name></type> <name>getDiskBoundaries</name><parameter_list>(<parameter><decl><type><name>RangesAtEndpoint</name></type> <name>replicas</name></decl></parameter>, <parameter><decl><type><name>IPartitioner</name></type> <name>partitioner</name></decl></parameter>, <parameter><decl><type><name><name>Directories</name><operator>.</operator><name>DataDirectory</name><index>[]</index></name></type> <name>dataDirectories</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><call><name><name>partitioner</name><operator>.</operator><name>splitter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isPresent</name><argument_list>()</argument_list></call></expr>;</assert>

        <decl_stmt><decl><type><name>Splitter</name></type> <name>splitter</name> <init>= <expr><call><name><name>partitioner</name><operator>.</operator><name>splitter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>dontSplitRanges</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getNumTokens</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Splitter</name><operator>.</operator><name>WeightedRange</name></name></argument>&gt;</argument_list></name></type> <name>weightedRanges</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>replicas</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// note that Range.sort unwraps any wraparound ranges, so we need to sort them here</comment>
        <for>for <control>(<init><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>r</name> <range>: <expr><call><name><name>Range</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><call><name><name>replicas</name><operator>.</operator><name>onlyFull</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ranges</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>weightedRanges</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Splitter</name><operator>.</operator><name>WeightedRange</name></name><argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <for>for <control>(<init><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>r</name> <range>: <expr><call><name><name>Range</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><call><name><name>replicas</name><operator>.</operator><name>onlyTransient</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ranges</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>weightedRanges</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Splitter</name><operator>.</operator><name>WeightedRange</name></name><argument_list>(<argument><expr><literal type="number">0.1</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt><expr><call><name><name>weightedRanges</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><call><name><name>Comparator</name><operator>.</operator><name>comparing</name></name><argument_list>(<argument><expr><name><name>Splitter</name><operator>.</operator><name>WeightedRange</name></name><operator>::</operator><name>left</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>boundaries</name> <init>= <expr><call><name><name>splitter</name><operator>.</operator><name>splitOwnedRanges</name></name><argument_list>(<argument><expr><name><name>dataDirectories</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name>weightedRanges</name></expr></argument>, <argument><expr><name>dontSplitRanges</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// If we can't split by ranges, split evenly to ensure utilisation of all disks</comment>
        <if_stmt><if>if <condition>(<expr><name>dontSplitRanges</name> <operator>&amp;&amp;</operator> <call><name><name>boundaries</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name><name>dataDirectories</name><operator>.</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>boundaries</name> <operator>=</operator> <call><name><name>splitter</name><operator>.</operator><name>splitOwnedRanges</name></name><argument_list>(<argument><expr><name><name>dataDirectories</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name>weightedRanges</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PartitionPosition</name></argument>&gt;</argument_list></name></type> <name>diskBoundaries</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>boundaries</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>diskBoundaries</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>boundaries</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>maxKeyBound</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt><expr><call><name><name>diskBoundaries</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>partitioner</name><operator>.</operator><name>getMaximumToken</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>maxKeyBound</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>diskBoundaries</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
