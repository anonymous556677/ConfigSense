<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/io/sstable/format/SSTableReaderBuilder.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>format</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cache</name><operator>.</operator><name>ChunkCache</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>Config</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>DecoratedKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>RowIndexEntry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>SerializationHeader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>metadata</name><operator>.</operator><name>StatsMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>sstable</name><operator>.</operator><name>metadata</name><operator>.</operator><name>ValidationMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>DiskOptimizationStrategy</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>FileHandle</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>FileUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>RandomAccessReader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>TableMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>TableMetadataRef</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>file</name><operator>.</operator><name>Files</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>file</name><operator>.</operator><name>Paths</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>SSTableReaderBuilder</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>SSTableReaderBuilder</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name><name>SSTableReader</name><operator>.</operator><name>Factory</name></name></type> <name>readerFactory</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>Descriptor</name></type> <name>descriptor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>TableMetadataRef</name></type> <name>metadataRef</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>TableMetadata</name></type> <name>metadata</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>long</name></type> <name>maxDataAge</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Component</name></argument>&gt;</argument_list></name></type> <name>components</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>StatsMetadata</name></type> <name>statsMetadata</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name><name>SSTableReader</name><operator>.</operator><name>OpenReason</name></name></type> <name>openReason</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>SerializationHeader</name></type> <name>header</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>protected</specifier> <name>IndexSummary</name></type> <name>summary</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>DecoratedKey</name></type> <name>first</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>DecoratedKey</name></type> <name>last</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>IFilter</name></type> <name>bf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>FileHandle</name></type> <name>ifile</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>FileHandle</name></type> <name>dfile</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>SSTableReaderBuilder</name><parameter_list>(<parameter><decl><type><name>Descriptor</name></type> <name>descriptor</name></decl></parameter>,
                                <parameter><decl><type><name>TableMetadataRef</name></type> <name>metadataRef</name></decl></parameter>,
                                <parameter><decl><type><name>long</name></type> <name>maxDataAge</name></decl></parameter>,
                                <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Component</name></argument>&gt;</argument_list></name></type> <name>components</name></decl></parameter>,
                                <parameter><decl><type><name>StatsMetadata</name></type> <name>statsMetadata</name></decl></parameter>,
                                <parameter><decl><type><name><name>SSTableReader</name><operator>.</operator><name>OpenReason</name></name></type> <name>openReason</name></decl></parameter>,
                                <parameter><decl><type><name>SerializationHeader</name></type> <name>header</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>descriptor</name></name> <operator>=</operator> <name>descriptor</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>metadataRef</name></name> <operator>=</operator> <name>metadataRef</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>metadata</name></name> <operator>=</operator> <call><name><name>metadataRef</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>maxDataAge</name></name> <operator>=</operator> <name>maxDataAge</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>components</name></name> <operator>=</operator> <name>components</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>statsMetadata</name></name> <operator>=</operator> <name>statsMetadata</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>openReason</name></name> <operator>=</operator> <name>openReason</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>header</name></name> <operator>=</operator> <name>header</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>readerFactory</name></name> <operator>=</operator> <call><name><name>descriptor</name><operator>.</operator><name>getFormat</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getReaderFactory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>SSTableReader</name></type> <name>build</name><parameter_list>()</parameter_list>;</function_decl>

    <function><type><specifier>public</specifier> <name>SSTableReaderBuilder</name></type> <name>dfile</name><parameter_list>(<parameter><decl><type><name>FileHandle</name></type> <name>dfile</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dfile</name></name> <operator>=</operator> <name>dfile</name></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>SSTableReaderBuilder</name></type> <name>ifile</name><parameter_list>(<parameter><decl><type><name>FileHandle</name></type> <name>ifile</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ifile</name></name> <operator>=</operator> <name>ifile</name></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>SSTableReaderBuilder</name></type> <name>bf</name><parameter_list>(<parameter><decl><type><name>IFilter</name></type> <name>bf</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bf</name></name> <operator>=</operator> <name>bf</name></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>SSTableReaderBuilder</name></type> <name>summary</name><parameter_list>(<parameter><decl><type><name>IndexSummary</name></type> <name>summary</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>summary</name></name> <operator>=</operator> <name>summary</name></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Load index summary, first key and last key from Summary.db file if it exists.
     *
     * if loaded index summary has different index interval from current value stored in schema,
     * then Summary.db file will be deleted and need to be rebuilt.
     */</comment>
    <function><type><name>void</name></type> <name>loadSummary</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>File</name></type> <name>summariesFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>descriptor</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>SUMMARY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>summariesFile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"SSTable Summary File {} does not exist"</literal></expr></argument>, <argument><expr><call><name><name>summariesFile</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>DataInputStream</name></type> <name>iStream</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{<block_content>
            <expr_stmt><expr><name>iStream</name> <operator>=</operator> <operator>new</operator> <call><name>DataInputStream</name><argument_list>(<argument><expr><call><name><name>Files</name><operator>.</operator><name>newInputStream</name></name><argument_list>(<argument><expr><call><name><name>summariesFile</name><operator>.</operator><name>toPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>summary</name> <operator>=</operator> <call><name><name>IndexSummary</name><operator>.</operator><name>serializer</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name>iStream</name></expr></argument>,
                                                          <argument><expr><name><name>metadata</name><operator>.</operator><name>partitioner</name></name></expr></argument>,
                                                          <argument><expr><name><name>metadata</name><operator>.</operator><name>params</name><operator>.</operator><name>minIndexInterval</name></name></expr></argument>,
                                                          <argument><expr><name><name>metadata</name><operator>.</operator><name>params</name><operator>.</operator><name>maxIndexInterval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>first</name> <operator>=</operator> <call><name><name>metadata</name><operator>.</operator><name>partitioner</name><operator>.</operator><name>decorateKey</name></name><argument_list>(<argument><expr><call><name><name>ByteBufferUtil</name><operator>.</operator><name>readWithLength</name></name><argument_list>(<argument><expr><name>iStream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>last</name> <operator>=</operator> <call><name><name>metadata</name><operator>.</operator><name>partitioner</name><operator>.</operator><name>decorateKey</name></name><argument_list>(<argument><expr><call><name><name>ByteBufferUtil</name><operator>.</operator><name>readWithLength</name></name><argument_list>(<argument><expr><name>iStream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>summary</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>summary</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Cannot deserialize SSTable Summary File {}: {}"</literal></expr></argument>, <argument><expr><call><name><name>summariesFile</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// corrupted; delete it and fall back to creating a new summary</comment>
            <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>closeQuietly</name></name><argument_list>(<argument><expr><name>iStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// delete it and fall back to creating a new summary</comment>
            <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>deleteWithConfirm</name></name><argument_list>(<argument><expr><name>summariesFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch>
        <finally>finally
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>closeQuietly</name></name><argument_list>(<argument><expr><name>iStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Build index summary, first key, last key if {@code summaryLoaded} is false and recreate bloom filter if
     * {@code recreteBloomFilter} is true by reading through Index.db file.
     *
     * @param recreateBloomFilter true if recreate bloom filter
     * @param summaryLoaded true if index summary, first key and last key are already loaded and not need to build again
     */</comment>
    <function><type><name>void</name></type> <name>buildSummaryAndBloomFilter</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>recreateBloomFilter</name></decl></parameter>,
                                    <parameter><decl><type><name>boolean</name></type> <name>summaryLoaded</name></decl></parameter>,
                                    <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Component</name></argument>&gt;</argument_list></name></type> <name>components</name></decl></parameter>,
                                    <parameter><decl><type><name>StatsMetadata</name></type> <name>statsMetadata</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>components</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>PRIMARY_INDEX</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Attempting to build summary for {}"</literal></expr></argument>, <argument><expr><name>descriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


        <comment type="line">// we read the positions in a BRAF so we don't have to worry about an entry spanning a mmap boundary.</comment>
        <try>try <init>(<decl><type><name>RandomAccessReader</name></type> <name>primaryIndex</name> <init>= <expr><call><name><name>RandomAccessReader</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>descriptor</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>PRIMARY_INDEX</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>)</init>
        <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>indexSize</name> <init>= <expr><call><name><name>primaryIndex</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>histogramCount</name> <init>= <expr><call><name><name>statsMetadata</name><operator>.</operator><name>estimatedPartitionSize</name><operator>.</operator><name>count</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>estimatedKeys</name> <init>= <expr><ternary><condition><expr><name>histogramCount</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>statsMetadata</name><operator>.</operator><name>estimatedPartitionSize</name><operator>.</operator><name>isOverflowed</name></name><argument_list>()</argument_list></call></expr>
                                 ?</condition><then> <expr><name>histogramCount</name></expr>
                                 </then><else>: <expr><call><name><name>SSTable</name><operator>.</operator><name>estimateRowsFromIndex</name></name><argument_list>(<argument><expr><name>primaryIndex</name></expr></argument>, <argument><expr><name>descriptor</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt> <comment type="line">// statistics is supposed to be optional</comment>

            <if_stmt><if>if <condition>(<expr><name>recreateBloomFilter</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>bf</name> <operator>=</operator> <call><name><name>FilterFactory</name><operator>.</operator><name>getFilter</name></name><argument_list>(<argument><expr><name>estimatedKeys</name></expr></argument>, <argument><expr><name><name>metadata</name><operator>.</operator><name>params</name><operator>.</operator><name>bloomFilterFpChance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <try>try <init>(<decl><type><name>IndexSummaryBuilder</name></type> <name>summaryBuilder</name> <init>= <expr><ternary><condition><expr><name>summaryLoaded</name></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><operator>new</operator> <call><name>IndexSummaryBuilder</name><argument_list>(<argument><expr><name>estimatedKeys</name></expr></argument>, <argument><expr><name><name>metadata</name><operator>.</operator><name>params</name><operator>.</operator><name>minIndexInterval</name></name></expr></argument>, <argument><expr><name><name>Downsampling</name><operator>.</operator><name>BASE_SAMPLING_LEVEL</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>)</init>
            <block>{<block_content>
                <decl_stmt><decl><type><name>long</name></type> <name>indexPosition</name></decl>;</decl_stmt>

                <while>while <condition>(<expr><operator>(</operator><name>indexPosition</name> <operator>=</operator> <call><name><name>primaryIndex</name><operator>.</operator><name>getFilePointer</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>indexSize</name></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>ByteBuffer</name></type> <name>key</name> <init>= <expr><call><name><name>ByteBufferUtil</name><operator>.</operator><name>readWithShortLength</name></name><argument_list>(<argument><expr><name>primaryIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>RowIndexEntry</name><operator>.</operator><name>Serializer</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>primaryIndex</name></expr></argument>, <argument><expr><name><name>descriptor</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>DecoratedKey</name></type> <name>decoratedKey</name> <init>= <expr><call><name><name>metadata</name><operator>.</operator><name>partitioner</name><operator>.</operator><name>decorateKey</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>summaryLoaded</name></expr>)</condition>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name>first</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><name>first</name> <operator>=</operator> <name>decoratedKey</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                        <expr_stmt><expr><name>last</name> <operator>=</operator> <name>decoratedKey</name></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>

                    <if_stmt><if>if <condition>(<expr><name>recreateBloomFilter</name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>bf</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>decoratedKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <comment type="line">// if summary was already read from disk we don't want to re-populate it using primary index</comment>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>summaryLoaded</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name><name>summaryBuilder</name><operator>.</operator><name>maybeAddEntry</name></name><argument_list>(<argument><expr><name>decoratedKey</name></expr></argument>, <argument><expr><name>indexPosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></while>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>summaryLoaded</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>summary</name> <operator>=</operator> <call><name><name>summaryBuilder</name><operator>.</operator><name>build</name></name><argument_list>(<argument><expr><name><name>metadata</name><operator>.</operator><name>partitioner</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></try>
        </block_content>}</block></try>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>summaryLoaded</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>first</name> <operator>=</operator> <call><name><name>SSTable</name><operator>.</operator><name>getMinimalKey</name></name><argument_list>(<argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>last</name> <operator>=</operator> <call><name><name>SSTable</name><operator>.</operator><name>getMinimalKey</name></name><argument_list>(<argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Load bloom filter from Filter.db file.
     *
     * @throws IOException
     */</comment>
    <function><type><name>IFilter</name></type> <name>loadBloomFilter</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <try>try <init>(<decl><type><name>DataInputStream</name></type> <name>stream</name> <init>= <expr><operator>new</operator> <call><name>DataInputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>BufferedInputStream</name><argument_list>(<argument><expr><call><name><name>Files</name><operator>.</operator><name>newInputStream</name></name><argument_list>(<argument><expr><call><name><name>Paths</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>descriptor</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>FILTER</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>)</init>
        <block>{<block_content>
            <return>return <expr><call><name><name>BloomFilterSerializer</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><call><name><name>descriptor</name><operator>.</operator><name>version</name><operator>.</operator><name>hasOldBfFormat</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></try>
    </block_content>}</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>ForWriter</name> <super_list><extends>extends <super><name>SSTableReaderBuilder</name></super></extends></super_list>
    <block>{
        <constructor><specifier>public</specifier> <name>ForWriter</name><parameter_list>(<parameter><decl><type><name>Descriptor</name></type> <name>descriptor</name></decl></parameter>,
                         <parameter><decl><type><name>TableMetadataRef</name></type> <name>metadataRef</name></decl></parameter>,
                         <parameter><decl><type><name>long</name></type> <name>maxDataAge</name></decl></parameter>,
                         <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Component</name></argument>&gt;</argument_list></name></type> <name>components</name></decl></parameter>,
                         <parameter><decl><type><name>StatsMetadata</name></type> <name>statsMetadata</name></decl></parameter>,
                         <parameter><decl><type><name><name>SSTableReader</name><operator>.</operator><name>OpenReason</name></name></type> <name>openReason</name></decl></parameter>,
                         <parameter><decl><type><name>SerializationHeader</name></type> <name>header</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>, <argument><expr><name>metadataRef</name></expr></argument>, <argument><expr><name>maxDataAge</name></expr></argument>, <argument><expr><name>components</name></expr></argument>, <argument><expr><name>statsMetadata</name></expr></argument>, <argument><expr><name>openReason</name></expr></argument>, <argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>SSTableReader</name></type> <name>build</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>SSTableReader</name></type> <name>reader</name> <init>= <expr><call><name><name>readerFactory</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>reader</name><operator>.</operator><name>setup</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>reader</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>ForBatch</name> <super_list><extends>extends <super><name>SSTableReaderBuilder</name></super></extends></super_list>
    <block>{
        <constructor><specifier>public</specifier> <name>ForBatch</name><parameter_list>(<parameter><decl><type><name>Descriptor</name></type> <name>descriptor</name></decl></parameter>,
                        <parameter><decl><type><name>TableMetadataRef</name></type> <name>metadataRef</name></decl></parameter>,
                        <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Component</name></argument>&gt;</argument_list></name></type> <name>components</name></decl></parameter>,
                        <parameter><decl><type><name>StatsMetadata</name></type> <name>statsMetadata</name></decl></parameter>,
                        <parameter><decl><type><name>SerializationHeader</name></type> <name>header</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>, <argument><expr><name>metadataRef</name></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>components</name></expr></argument>, <argument><expr><name>statsMetadata</name></expr></argument>, <argument><expr><name><name>SSTableReader</name><operator>.</operator><name>OpenReason</name><operator>.</operator><name>NORMAL</name></name></expr></argument>, <argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>SSTableReader</name></type> <name>build</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>dataFilePath</name> <init>= <expr><call><name><name>descriptor</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>DATA</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>fileLength</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>dataFilePath</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Opening {} ({})"</literal></expr></argument>, <argument><expr><name>descriptor</name></expr></argument>, <argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>prettyPrintMemory</name></name><argument_list>(<argument><expr><name>fileLength</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>initSummary</name><argument_list>(<argument><expr><name>dataFilePath</name></expr></argument>, <argument><expr><name>components</name></expr></argument>, <argument><expr><name>statsMetadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>boolean</name></type> <name>compression</name> <init>= <expr><call><name><name>components</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>COMPRESSION_INFO</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <try>try <init>(<decl><type><name><name>FileHandle</name><operator>.</operator><name>Builder</name></name></type> <name>ibuilder</name> <init>= <expr><operator>new</operator> <call><name><name>FileHandle</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><call><name><name>descriptor</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>PRIMARY_INDEX</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>mmapped</name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getIndexAccessMode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Config</name><operator>.</operator><name>DiskAccessMode</name><operator>.</operator><name>mmap</name></name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>withChunkCache</name><argument_list>(<argument><expr><name><name>ChunkCache</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr></init></decl>;
                    <decl><type><name><name>FileHandle</name><operator>.</operator><name>Builder</name></name></type> <name>dbuilder</name> <init>= <expr><operator>new</operator> <call><name><name>FileHandle</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><call><name><name>descriptor</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>DATA</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>compressed</name><argument_list>(<argument><expr><name>compression</name></expr></argument>)</argument_list></call>
                                                                                                                <operator>.</operator><call><name>mmapped</name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getDiskAccessMode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Config</name><operator>.</operator><name>DiskAccessMode</name><operator>.</operator><name>mmap</name></name></expr></argument>)</argument_list></call>
                                                                                                                <operator>.</operator><call><name>withChunkCache</name><argument_list>(<argument><expr><name><name>ChunkCache</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr></init></decl>)</init>
            <block>{<block_content>
                <decl_stmt><decl><type><name>long</name></type> <name>indexFileLength</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>descriptor</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>PRIMARY_INDEX</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>DiskOptimizationStrategy</name></type> <name>optimizationStrategy</name> <init>= <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getDiskOptimizationStrategy</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>dataBufferSize</name> <init>= <expr><call><name><name>optimizationStrategy</name><operator>.</operator><name>bufferSize</name></name><argument_list>(<argument><expr><call><name><name>statsMetadata</name><operator>.</operator><name>estimatedPartitionSize</name><operator>.</operator><name>percentile</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getDiskOptimizationEstimatePercentile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>indexBufferSize</name> <init>= <expr><call><name><name>optimizationStrategy</name><operator>.</operator><name>bufferSize</name></name><argument_list>(<argument><expr><name>indexFileLength</name> <operator>/</operator> <call><name><name>summary</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>ifile</name> <operator>=</operator> <call><name><name>ibuilder</name><operator>.</operator><name>bufferSize</name></name><argument_list>(<argument><expr><name>indexBufferSize</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>complete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>dfile</name> <operator>=</operator> <call><name><name>dbuilder</name><operator>.</operator><name>bufferSize</name></name><argument_list>(<argument><expr><name>dataBufferSize</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>complete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>bf</name> <operator>=</operator> <name><name>FilterFactory</name><operator>.</operator><name>AlwaysPresent</name></name></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>SSTableReader</name></type> <name>sstable</name> <init>= <expr><call><name><name>readerFactory</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><name><name>sstable</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name>first</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>sstable</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name>last</name></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>sstable</name><operator>.</operator><name>setup</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>sstable</name></expr>;</return>
            </block_content>}</block></try>
        </block_content>}</block></function>

        <function><type><name>void</name></type> <name>initSummary</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dataFilePath</name></decl></parameter>, <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Component</name></argument>&gt;</argument_list></name></type> <name>components</name></decl></parameter>, <parameter><decl><type><name>StatsMetadata</name></type> <name>statsMetadata</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>loadSummary</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>summary</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <try>try
                <block>{<block_content>
                    <expr_stmt><expr><call><name>buildSummaryAndBloomFilter</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>components</name></expr></argument>, <argument><expr><name>statsMetadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list>
                <block>{<block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>CorruptSSTableException</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>dataFilePath</name></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></catch></try>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>ForRead</name> <super_list><extends>extends <super><name>SSTableReaderBuilder</name></super></extends></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ValidationMetadata</name></type> <name>validationMetadata</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>isOffline</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>ForRead</name><parameter_list>(<parameter><decl><type><name>Descriptor</name></type> <name>descriptor</name></decl></parameter>,
                       <parameter><decl><type><name>TableMetadataRef</name></type> <name>metadataRef</name></decl></parameter>,
                       <parameter><decl><type><name>ValidationMetadata</name></type> <name>validationMetadata</name></decl></parameter>,
                       <parameter><decl><type><name>boolean</name></type> <name>isOffline</name></decl></parameter>,
                       <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Component</name></argument>&gt;</argument_list></name></type> <name>components</name></decl></parameter>,
                       <parameter><decl><type><name>StatsMetadata</name></type> <name>statsMetadata</name></decl></parameter>,
                       <parameter><decl><type><name>SerializationHeader</name></type> <name>header</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>, <argument><expr><name>metadataRef</name></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>components</name></expr></argument>, <argument><expr><name>statsMetadata</name></expr></argument>, <argument><expr><name><name>SSTableReader</name><operator>.</operator><name>OpenReason</name><operator>.</operator><name>NORMAL</name></name></expr></argument>, <argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>validationMetadata</name></name> <operator>=</operator> <name>validationMetadata</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isOffline</name></name> <operator>=</operator> <name>isOffline</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>SSTableReader</name></type> <name>build</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>dataFilePath</name> <init>= <expr><call><name><name>descriptor</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>DATA</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>fileLength</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>dataFilePath</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"Opening {} ({})"</literal></expr></argument>, <argument><expr><name>descriptor</name></expr></argument>, <argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>prettyPrintMemory</name></name><argument_list>(<argument><expr><name>fileLength</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <try>try
            <block>{<block_content>
                <comment type="line">// load index and filter</comment>
                <decl_stmt><decl><type><name>long</name></type> <name>start</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><name>validationMetadata</name></expr></argument>, <argument><expr><name>isOffline</name></expr></argument>, <argument><expr><name>components</name></expr></argument>, <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getDiskOptimizationStrategy</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>statsMetadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"INDEX LOAD TIME for {}: {} ms."</literal></expr></argument>, <argument><expr><name>descriptor</name></expr></argument>, <argument><expr><call><name><name>TimeUnit</name><operator>.</operator><name>NANOSECONDS</name><operator>.</operator><name>toMillis</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>t</name></decl></parameter>)</parameter_list>
            <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>CorruptSSTableException</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>dataFilePath</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>

            <decl_stmt><decl><type><name>SSTableReader</name></type> <name>sstable</name> <init>= <expr><call><name><name>readerFactory</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name><name>sstable</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name>first</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sstable</name><operator>.</operator><name>last</name></name> <operator>=</operator> <name>last</name></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>sstable</name><operator>.</operator><name>setup</name></name><argument_list>(<argument><expr><operator>!</operator><name>isOffline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Don't track hotness if we're offline.</comment>
            <return>return <expr><name>sstable</name></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * @param validation Metadata for SSTable being loaded
         * @param isOffline Whether the SSTable is being loaded by an offline tool (sstabledump, scrub, etc)
         */</comment>
        <function><type><specifier>private</specifier> <name>void</name></type> <name>load</name><parameter_list>(<parameter><decl><type><name>ValidationMetadata</name></type> <name>validation</name></decl></parameter>,
                          <parameter><decl><type><name>boolean</name></type> <name>isOffline</name></decl></parameter>,
                          <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Component</name></argument>&gt;</argument_list></name></type> <name>components</name></decl></parameter>,
                          <parameter><decl><type><name>DiskOptimizationStrategy</name></type> <name>optimizationStrategy</name></decl></parameter>,
                          <parameter><decl><type><name>StatsMetadata</name></type> <name>statsMetadata</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>metadata</name><operator>.</operator><name>params</name><operator>.</operator><name>bloomFilterFpChance</name></name> <operator>==</operator> <literal type="number">1.0</literal></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// bf is disabled.</comment>
                <expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><operator>!</operator><name>isOffline</name></expr></argument>, <argument><expr><name>optimizationStrategy</name></expr></argument>, <argument><expr><name>statsMetadata</name></expr></argument>, <argument><expr><name>components</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>bf</name> <operator>=</operator> <name><name>FilterFactory</name><operator>.</operator><name>AlwaysPresent</name></name></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name><name>components</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>PRIMARY_INDEX</name></name></expr></argument>)</argument_list></call></expr>)</condition> <comment type="line">// What happens if filter component and primary index is missing?</comment>
            <block>{<block_content>
                <comment type="line">// avoid any reading of the missing primary index component.</comment>
                <comment type="line">// this should only happen during StandaloneScrubber</comment>
                <expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><operator>!</operator><name>isOffline</name></expr></argument>, <argument><expr><name>optimizationStrategy</name></expr></argument>, <argument><expr><name>statsMetadata</name></expr></argument>, <argument><expr><name>components</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name><name>components</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>FILTER</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name>validation</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// bf is enabled, but filter component is missing.</comment>
                <expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><operator>!</operator><name>isOffline</name></expr></argument>, <argument><expr><operator>!</operator><name>isOffline</name></expr></argument>, <argument><expr><name>optimizationStrategy</name></expr></argument>, <argument><expr><name>statsMetadata</name></expr></argument>, <argument><expr><name>components</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>isOffline</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>bf</name> <operator>=</operator> <name><name>FilterFactory</name><operator>.</operator><name>AlwaysPresent</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <comment type="line">// bf is enabled and fp chance matches the currently configured value.</comment>
                <expr_stmt><expr><call><name>load</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><operator>!</operator><name>isOffline</name></expr></argument>, <argument><expr><name>optimizationStrategy</name></expr></argument>, <argument><expr><name>statsMetadata</name></expr></argument>, <argument><expr><name>components</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>bf</name> <operator>=</operator> <call><name>loadBloomFilter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Loads ifile, dfile and indexSummary, and optionally recreates and persists the bloom filter.
         * @param recreateBloomFilter Recreate the bloomfilter.
         * @param saveSummaryIfCreated for bulk loading purposes, if the summary was absent and needed to be built, you can
         *                             avoid persisting it to disk by setting this to false
         */</comment>
        <function><type><name>void</name></type> <name>load</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>recreateBloomFilter</name></decl></parameter>,
                  <parameter><decl><type><name>boolean</name></type> <name>saveSummaryIfCreated</name></decl></parameter>,
                  <parameter><decl><type><name>DiskOptimizationStrategy</name></type> <name>optimizationStrategy</name></decl></parameter>,
                  <parameter><decl><type><name>StatsMetadata</name></type> <name>statsMetadata</name></decl></parameter>,
                  <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Component</name></argument>&gt;</argument_list></name></type> <name>components</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <try>try<init>(<decl><type><name><name>FileHandle</name><operator>.</operator><name>Builder</name></name></type> <name>ibuilder</name> <init>= <expr><operator>new</operator> <call><name><name>FileHandle</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><call><name><name>descriptor</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>PRIMARY_INDEX</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>mmapped</name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getIndexAccessMode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Config</name><operator>.</operator><name>DiskAccessMode</name><operator>.</operator><name>mmap</name></name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>withChunkCache</name><argument_list>(<argument><expr><name><name>ChunkCache</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr></init></decl>;
                    <decl><type><name><name>FileHandle</name><operator>.</operator><name>Builder</name></name></type> <name>dbuilder</name> <init>= <expr><operator>new</operator> <call><name><name>FileHandle</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><call><name><name>descriptor</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>DATA</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>compressed</name><argument_list>(<argument><expr><call><name><name>components</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>COMPRESSION_INFO</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                                                                                                <operator>.</operator><call><name>mmapped</name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getDiskAccessMode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Config</name><operator>.</operator><name>DiskAccessMode</name><operator>.</operator><name>mmap</name></name></expr></argument>)</argument_list></call>
                                                                                                                <operator>.</operator><call><name>withChunkCache</name><argument_list>(<argument><expr><name><name>ChunkCache</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr></init></decl>)</init>
            <block>{<block_content>
                <expr_stmt><expr><call><name>loadSummary</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>boolean</name></type> <name>buildSummary</name> <init>= <expr><name>summary</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>recreateBloomFilter</name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>buildSummary</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>buildSummaryAndBloomFilter</name><argument_list>(<argument><expr><name>recreateBloomFilter</name></expr></argument>, <argument><expr><name>summary</name> <operator>!=</operator> <literal type="null">null</literal></expr></argument>, <argument><expr><name>components</name></expr></argument>, <argument><expr><name>statsMetadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <decl_stmt><decl><type><name>int</name></type> <name>dataBufferSize</name> <init>= <expr><call><name><name>optimizationStrategy</name><operator>.</operator><name>bufferSize</name></name><argument_list>(<argument><expr><call><name><name>statsMetadata</name><operator>.</operator><name>estimatedPartitionSize</name><operator>.</operator><name>percentile</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getDiskOptimizationEstimatePercentile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><call><name><name>components</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>PRIMARY_INDEX</name></name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>long</name></type> <name>indexFileLength</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>descriptor</name><operator>.</operator><name>filenameFor</name></name><argument_list>(<argument><expr><name><name>Component</name><operator>.</operator><name>PRIMARY_INDEX</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>indexBufferSize</name> <init>= <expr><call><name><name>optimizationStrategy</name><operator>.</operator><name>bufferSize</name></name><argument_list>(<argument><expr><name>indexFileLength</name> <operator>/</operator> <call><name><name>summary</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>ifile</name> <operator>=</operator> <call><name><name>ibuilder</name><operator>.</operator><name>bufferSize</name></name><argument_list>(<argument><expr><name>indexBufferSize</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>complete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><name>dfile</name> <operator>=</operator> <call><name><name>dbuilder</name><operator>.</operator><name>bufferSize</name></name><argument_list>(<argument><expr><name>dataBufferSize</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>complete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name>buildSummary</name></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>saveSummaryIfCreated</name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>SSTableReader</name><operator>.</operator><name>saveSummary</name></name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>summary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>recreateBloomFilter</name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>SSTableReader</name><operator>.</operator><name>saveBloomFilter</name></name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>, <argument><expr><name>bf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list>
            <block>{<block_content> <comment type="line">// Because the tidier has not been set-up yet in SSTableReader.open(), we must release the files in case of error</comment>
                <if_stmt><if>if <condition>(<expr><name>ifile</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>ifile</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><name>dfile</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>dfile</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><name>summary</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>summary</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <throw>throw <expr><name>t</name></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
