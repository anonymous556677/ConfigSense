<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/repair/ValidationManager.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>repair</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Callable</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Future</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>ColumnFamilyStore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>rows</name><operator>.</operator><name>UnfilteredRowIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>Range</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>dht</name><operator>.</operator><name>Token</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>metrics</name><operator>.</operator><name>TableMetrics</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>FBUtilities</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>MerkleTree</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>MerkleTrees</name></name>;</import>

<class><specifier>public</specifier> class <name>ValidationManager</name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>ValidationManager</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ValidationManager</name></type> <name>instance</name> <init>= <expr><operator>new</operator> <call><name>ValidationManager</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>ValidationManager</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></constructor>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>MerkleTrees</name></type> <name>createMerkleTrees</name><parameter_list>(<parameter><decl><type><name>ValidationPartitionIterator</name></type> <name>validationIterator</name></decl></parameter>, <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ranges</name></decl></parameter>, <parameter><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>MerkleTrees</name></type> <name>tree</name> <init>= <expr><operator>new</operator> <call><name>MerkleTrees</name><argument_list>(<argument><expr><call><name><name>cfs</name><operator>.</operator><name>getPartitioner</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>allPartitions</name> <init>= <expr><call><name><name>validationIterator</name><operator>.</operator><name>estimatedPartitions</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>rangePartitionCounts</name> <init>= <expr><call><name><name>validationIterator</name><operator>.</operator><name>getRangePartitionCounts</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// The repair coordinator must hold RF trees in memory at once, so a given validation compaction can only</comment>
        <comment type="line">// use 1 / RF of the allowed space.</comment>
        <decl_stmt><decl><type><name>long</name></type> <name>availableBytes</name> <init>= <expr><operator>(</operator><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getRepairSessionSpaceInMegabytes</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">1048576</literal><operator>)</operator> <operator>/</operator>
                              <call><name><name>cfs</name><operator>.</operator><name>keyspace</name><operator>.</operator><name>getReplicationStrategy</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getReplicationFactor</name><argument_list>()</argument_list></call><operator>.</operator><name>allReplicas</name></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name><name>Range</name><argument_list type="generic">&lt;<argument><name>Token</name></argument>&gt;</argument_list></name></type> <name>range</name> <range>: <expr><name>ranges</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>numPartitions</name> <init>= <expr><call><name><name>rangePartitionCounts</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>rangeOwningRatio</name> <init>= <expr><ternary><condition><expr><name>allPartitions</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name>double</name><operator>)</operator><name>numPartitions</name> <operator>/</operator> <name>allPartitions</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <comment type="line">// determine max tree depth proportional to range size to avoid blowing up memory with multiple tress,</comment>
            <comment type="line">// capping at a depth that does not exceed our memory budget (CASSANDRA-11390, CASSANDRA-14096)</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>rangeAvailableBytes</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>rangeOwningRatio</name> <operator>*</operator> <name>availableBytes</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// Try to estimate max tree depth that fits the space budget assuming hashes of 256 bits = 32 bytes</comment>
            <comment type="line">// note that estimatedMaxDepthForBytes cannot return a number lower than 1</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>estimatedMaxDepth</name> <init>= <expr><call><name><name>MerkleTree</name><operator>.</operator><name>estimatedMaxDepthForBytes</name></name><argument_list>(<argument><expr><call><name><name>cfs</name><operator>.</operator><name>getPartitioner</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>rangeAvailableBytes</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>maxDepth</name> <init>= <expr><ternary><condition><expr><name>rangeOwningRatio</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>
                           ?</condition><then> <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>estimatedMaxDepth</name></expr></argument>, <argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getRepairSessionMaxTreeDepth</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>
                           </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <comment type="line">// determine tree depth from number of partitions, capping at max tree depth (CASSANDRA-5263)</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>depth</name> <init>= <expr><ternary><condition><expr><name>numPartitions</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>ceil</name></name><argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name>numPartitions</name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name><name>Math</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>maxDepth</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>tree</name><operator>.</operator><name>addMerkleTree</name></name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// MT serialize may take time</comment>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Created {} merkle trees with merkle trees size {}, {} partitions, {} bytes"</literal></expr></argument>, <argument><expr><call><name><name>tree</name><operator>.</operator><name>ranges</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>tree</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>allPartitions</name></expr></argument>, <argument><expr><call><name><name>MerkleTrees</name><operator>.</operator><name>serializer</name><operator>.</operator><name>serializedSize</name></name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><name>tree</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>ValidationPartitionIterator</name></type> <name>getValidationIterator</name><parameter_list>(<parameter><decl><type><name>TableRepairManager</name></type> <name>repairManager</name></decl></parameter>, <parameter><decl><type><name>Validator</name></type> <name>validator</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>RepairJobDesc</name></type> <name>desc</name> <init>= <expr><name><name>validator</name><operator>.</operator><name>desc</name></name></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>repairManager</name><operator>.</operator><name>getValidationIterator</name></name><argument_list>(<argument><expr><name><name>desc</name><operator>.</operator><name>ranges</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>.</operator><name>parentSessionId</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>.</operator><name>sessionId</name></name></expr></argument>, <argument><expr><name><name>validator</name><operator>.</operator><name>isIncremental</name></name></expr></argument>, <argument><expr><name><name>validator</name><operator>.</operator><name>nowInSec</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Performs a readonly "compaction" of all sstables in order to validate complete rows,
     * but without writing the merge result
     */</comment>
    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"resource"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>private</specifier> <name>void</name></type> <name>doValidation</name><parameter_list>(<parameter><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name></decl></parameter>, <parameter><decl><type><name>Validator</name></type> <name>validator</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <comment type="line">// this isn't meant to be race-proof, because it's not -- it won't cause bugs for a CFS to be dropped</comment>
        <comment type="line">// mid-validation, or to attempt to validate a droped CFS.  this is just a best effort to avoid useless work,</comment>
        <comment type="line">// particularly in the scenario where a validation is submitted before the drop, and there are compactions</comment>
        <comment type="line">// started prior to the drop keeping some sstables alive.  Since validationCompaction can run</comment>
        <comment type="line">// concurrently with other compactions, it would otherwise go ahead and scan those again.</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>cfs</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <comment type="line">// Create Merkle trees suitable to hold estimated partitions for the given ranges.</comment>
        <comment type="line">// We blindly assume that a partition is evenly distributed on all sstables for now.</comment>
        <decl_stmt><decl><type><name>long</name></type> <name>start</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>partitionCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>estimatedTotalBytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <try>try <init>(<decl><type><name>ValidationPartitionIterator</name></type> <name>vi</name> <init>= <expr><call><name>getValidationIterator</name><argument_list>(<argument><expr><call><name><name>cfs</name><operator>.</operator><name>getRepairManager</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>validator</name></expr></argument>)</argument_list></call></expr></init></decl>)</init>
        <block>{<block_content>
            <decl_stmt><decl><type><name>MerkleTrees</name></type> <name>tree</name> <init>= <expr><call><name>createMerkleTrees</name><argument_list>(<argument><expr><name>vi</name></expr></argument>, <argument><expr><name><name>validator</name><operator>.</operator><name>desc</name><operator>.</operator><name>ranges</name></name></expr></argument>, <argument><expr><name>cfs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <try>try
            <block>{<block_content>
                <comment type="line">// validate the CF as we iterate over it</comment>
                <expr_stmt><expr><call><name><name>validator</name><operator>.</operator><name>prepare</name></name><argument_list>(<argument><expr><name>cfs</name></expr></argument>, <argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <while>while <condition>(<expr><call><name><name>vi</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <try>try <init>(<decl><type><name>UnfilteredRowIterator</name></type> <name>partition</name> <init>= <expr><call><name><name>vi</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>)</init>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name><name>validator</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>partition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>partitionCount</name><operator>++</operator></expr>;</expr_stmt>
                    </block_content>}</block></try>
                </block_content>}</block></while>
                <expr_stmt><expr><call><name><name>validator</name><operator>.</operator><name>complete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <finally>finally
            <block>{<block_content>
                <expr_stmt><expr><name>estimatedTotalBytes</name> <operator>=</operator> <call><name><name>vi</name><operator>.</operator><name>getEstimatedBytes</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>partitionCount</name> <operator>=</operator> <call><name><name>vi</name><operator>.</operator><name>estimatedPartitions</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></finally></try>
        </block_content>}</block>
        <finally>finally
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>cfs</name><operator>.</operator><name>metric</name><operator>.</operator><name>bytesValidated</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>estimatedTotalBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cfs</name><operator>.</operator><name>metric</name><operator>.</operator><name>partitionsValidated</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>partitionCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
        <if_stmt><if>if <condition>(<expr><call><name><name>logger</name><operator>.</operator><name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>duration</name> <init>= <expr><call><name><name>TimeUnit</name><operator>.</operator><name>NANOSECONDS</name><operator>.</operator><name>toMillis</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Validation of {} partitions (~{}) finished in {} msec, for {}"</literal></expr></argument>,
                         <argument><expr><name>partitionCount</name></expr></argument>,
                         <argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>prettyPrintMemory</name></name><argument_list>(<argument><expr><name>estimatedTotalBytes</name></expr></argument>)</argument_list></call></expr></argument>,
                         <argument><expr><name>duration</name></expr></argument>,
                         <argument><expr><name><name>validator</name><operator>.</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Does not mutate data, so is not scheduled.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Future</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>submitValidation</name><parameter_list>(<parameter><decl><type><name>ColumnFamilyStore</name></type> <name>cfs</name></decl></parameter>, <parameter><decl><type><name>Validator</name></type> <name>validator</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Callable</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>validation</name> <init>= <expr><operator>new</operator> <class><super><name><name>Callable</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
        <block>{
            <function><type><specifier>public</specifier> <name>Object</name></type> <name>call</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
            <block>{<block_content>
                <try>try <init>(<decl><type><name><name>TableMetrics</name><operator>.</operator><name>TableTimer</name><operator>.</operator><name>Context</name></name></type> <name>c</name> <init>= <expr><call><name><name>cfs</name><operator>.</operator><name>metric</name><operator>.</operator><name>validationTime</name><operator>.</operator><name>time</name></name><argument_list>()</argument_list></call></expr></init></decl>)</init>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>doValidation</name><argument_list>(<argument><expr><name>cfs</name></expr></argument>, <argument><expr><name>validator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <catch>catch <parameter_list>(<parameter><decl><type><name>PreviewRepairConflictWithIncrementalRepairException</name></type> <name>e</name></decl></parameter>)</parameter_list>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>validator</name><operator>.</operator><name>fail</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></catch>
                <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>e</name></decl></parameter>)</parameter_list>
                <block>{<block_content>
                    <comment type="line">// we need to inform the remote end of our failure, otherwise it will hang on repair forever</comment>
                    <expr_stmt><expr><call><name><name>validator</name><operator>.</operator><name>fail</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><literal type="string">"Validation failed."</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <throw>throw <expr><name>e</name></expr>;</throw>
                </block_content>}</block></catch></try>
                <return>return <expr><name>this</name></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name><name>cfs</name><operator>.</operator><name>getRepairManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>submitValidation</name><argument_list>(<argument><expr><name>validation</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
