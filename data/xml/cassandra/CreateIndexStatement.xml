<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/cql3/statements/schema/CreateIndexStatement.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>statements</name><operator>.</operator><name>schema</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableSet</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Lists</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>audit</name><operator>.</operator><name>AuditLogContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>audit</name><operator>.</operator><name>AuditLogEntryType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>auth</name><operator>.</operator><name>Permission</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>CQLStatement</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>ColumnIdentifier</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>QualifiedName</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cql3</name><operator>.</operator><name>statements</name><operator>.</operator><name>schema</name><operator>.</operator><name>IndexTarget</name><operator>.</operator><name>Type</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>Keyspace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>marshal</name><operator>.</operator><name>MapType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>InvalidRequestException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>index</name><operator>.</operator><name>sasi</name><operator>.</operator><name>SASIIndex</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>schema</name><operator>.</operator><name>Keyspaces</name><operator>.</operator><name>KeyspacesDiff</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>service</name><operator>.</operator><name>ClientState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>transport</name><operator>.</operator><name>Event</name><operator>.</operator><name>SchemaChange</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>transport</name><operator>.</operator><name>Event</name><operator>.</operator><name>SchemaChange</name><operator>.</operator><name>Change</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>transport</name><operator>.</operator><name>Event</name><operator>.</operator><name>SchemaChange</name><operator>.</operator><name>Target</name></name>;</import>

<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name><operator>.</operator><name>transform</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name><operator>.</operator><name>tryFind</name></name>;</import>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>CreateIndexStatement</name> <super_list><extends>extends <super><name>AlterSchemaStatement</name></super></extends></super_list>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>indexName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>tableName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>IndexTarget</name><operator>.</operator><name>Raw</name></name></argument>&gt;</argument_list></name></type> <name>rawIndexTargets</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>IndexAttributes</name></type> <name>attrs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>ifNotExists</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>CreateIndexStatement</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyspaceName</name></decl></parameter>,
                                <parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>,
                                <parameter><decl><type><name>String</name></type> <name>indexName</name></decl></parameter>,
                                <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>IndexTarget</name><operator>.</operator><name>Raw</name></name></argument>&gt;</argument_list></name></type> <name>rawIndexTargets</name></decl></parameter>,
                                <parameter><decl><type><name>IndexAttributes</name></type> <name>attrs</name></decl></parameter>,
                                <parameter><decl><type><name>boolean</name></type> <name>ifNotExists</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tableName</name></name> <operator>=</operator> <name>tableName</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>indexName</name></name> <operator>=</operator> <name>indexName</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>rawIndexTargets</name></name> <operator>=</operator> <name>rawIndexTargets</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>attrs</name></name> <operator>=</operator> <name>attrs</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ifNotExists</name></name> <operator>=</operator> <name>ifNotExists</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>Keyspaces</name></type> <name>apply</name><parameter_list>(<parameter><decl><type><name>Keyspaces</name></type> <name>schema</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>attrs</name><operator>.</operator><name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>attrs</name><operator>.</operator><name>isCustom</name></name> <operator>&amp;&amp;</operator> <call><name><name>attrs</name><operator>.</operator><name>customClass</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>SASIIndex</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getEnableSASIIndexes</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>InvalidRequestException</name><argument_list>(<argument><expr><literal type="string">"SASI indexes are disabled. Enable in cassandra.yaml to use."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>KeyspaceMetadata</name></type> <name>keyspace</name> <init>= <expr><call><name><name>schema</name><operator>.</operator><name>getNullable</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name>keyspace</name></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Keyspace '%s' doesn't exist"</literal></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>TableMetadata</name></type> <name>table</name> <init>= <expr><call><name><name>keyspace</name><operator>.</operator><name>getTableOrViewNullable</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name>table</name></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Table '%s' doesn't exist"</literal></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name>indexName</name> <operator>&amp;&amp;</operator> <call><name><name>keyspace</name><operator>.</operator><name>hasIndex</name></name><argument_list>(<argument><expr><name>indexName</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>ifNotExists</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>schema</name></expr>;</return></block_content></block></if></if_stmt>

            <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Index '%s' already exists"</literal></expr></argument>, <argument><expr><name>indexName</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>table</name><operator>.</operator><name>isCounter</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Secondary indexes on counter tables aren't supported"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>table</name><operator>.</operator><name>isView</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Secondary indexes on materialized views aren't supported"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>Keyspace</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name><name>table</name><operator>.</operator><name>keyspace</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getReplicationStrategy</name><argument_list>()</argument_list></call><operator>.</operator><call><name>hasTransientReplicas</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>InvalidRequestException</name><argument_list>(<argument><expr><literal type="string">"Secondary indexes are not supported on transiently replicated keyspaces"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>IndexTarget</name></argument>&gt;</argument_list></name></type> <name>indexTargets</name> <init>= <expr><call><name><name>Lists</name><operator>.</operator><name>newArrayList</name></name><argument_list>(<argument><expr><call><name>transform</name><argument_list>(<argument><expr><name>rawIndexTargets</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>t</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>t</name><operator>.</operator><name>prepare</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>indexTargets</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>attrs</name><operator>.</operator><name>isCustom</name></name></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Only CUSTOM indexes can be created without specifying a target column"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>indexTargets</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>attrs</name><operator>.</operator><name>isCustom</name></name></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Only CUSTOM indexes support multiple columns"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>ColumnIdentifier</name></argument>&gt;</argument_list></name></type> <name>columns</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>IndexTarget</name></type> <name>target</name> <range>: <expr><name>indexTargets</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>columns</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>target</name><operator>.</operator><name>column</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Duplicate column '%s' in index target list"</literal></expr></argument>, <argument><expr><name><name>target</name><operator>.</operator><name>column</name></name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt></block_content></block></for>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>indexTargets</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>t</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name>validateIndexTarget</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><ternary><condition><expr><literal type="null">null</literal> <operator>==</operator> <name>indexName</name></expr> ?</condition><then> <expr><call><name>generateIndexName</name><argument_list>(<argument><expr><name>keyspace</name></expr></argument>, <argument><expr><name>indexTargets</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>indexName</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>IndexMetadata</name><operator>.</operator><name>Kind</name></name></type> <name>kind</name> <init>= <expr><ternary><condition><expr><name><name>attrs</name><operator>.</operator><name>isCustom</name></name></expr> ?</condition><then> <expr><name><name>IndexMetadata</name><operator>.</operator><name>Kind</name><operator>.</operator><name>CUSTOM</name></name></expr> </then><else>: <expr><name><name>IndexMetadata</name><operator>.</operator><name>Kind</name><operator>.</operator><name>COMPOSITES</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name> <init>= <expr><ternary><condition><expr><name><name>attrs</name><operator>.</operator><name>isCustom</name></name></expr> ?</condition><then> <expr><call><name><name>attrs</name><operator>.</operator><name>getOptions</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>Collections</name><operator>.</operator><name>emptyMap</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>IndexMetadata</name></type> <name>index</name> <init>= <expr><call><name><name>IndexMetadata</name><operator>.</operator><name>fromIndexTargets</name></name><argument_list>(<argument><expr><name>indexTargets</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>kind</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// check to disallow creation of an index which duplicates an existing one in all but name</comment>
        <decl_stmt><decl><type><name>IndexMetadata</name></type> <name>equalIndex</name> <init>= <expr><call><name>tryFind</name><argument_list>(<argument><expr><name><name>table</name><operator>.</operator><name>indexes</name></name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>i</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>i</name><operator>.</operator><name>equalsWithoutName</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>orNull</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name>equalIndex</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>ifNotExists</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>schema</name></expr>;</return></block_content></block></if></if_stmt>

            <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Index %s is a duplicate of existing index %s"</literal></expr></argument>, <argument><expr><name><name>index</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>equalIndex</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>TableMetadata</name></type> <name>newTable</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>withSwapped</name></name><argument_list>(<argument><expr><call><name><name>table</name><operator>.</operator><name>indexes</name><operator>.</operator><name>with</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>newTable</name><operator>.</operator><name>validate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><call><name><name>schema</name><operator>.</operator><name>withAddedOrUpdated</name></name><argument_list>(<argument><expr><call><name><name>keyspace</name><operator>.</operator><name>withSwapped</name></name><argument_list>(<argument><expr><call><name><name>keyspace</name><operator>.</operator><name>tables</name><operator>.</operator><name>withSwapped</name></name><argument_list>(<argument><expr><name>newTable</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>clientWarnings</name><parameter_list>(<parameter><decl><type><name>KeyspacesDiff</name></type> <name>diff</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>attrs</name><operator>.</operator><name>isCustom</name></name> <operator>&amp;&amp;</operator> <call><name><name>attrs</name><operator>.</operator><name>customClass</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>SASIIndex</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>ImmutableSet</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name><name>SASIIndex</name><operator>.</operator><name>USAGE_WARNING</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><call><name><name>ImmutableSet</name><operator>.</operator><name>of</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>validateIndexTarget</name><parameter_list>(<parameter><decl><type><name>TableMetadata</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>IndexTarget</name></type> <name>target</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ColumnMetadata</name></type> <name>column</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getColumn</name></name><argument_list>(<argument><expr><name><name>target</name><operator>.</operator><name>column</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name>column</name></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Column '%s' doesn't exist"</literal></expr></argument>, <argument><expr><name><name>target</name><operator>.</operator><name>column</name></name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>column</name><operator>.</operator><name>type</name><operator>.</operator><name>referencesDuration</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>column</name><operator>.</operator><name>type</name><operator>.</operator><name>isCollection</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Secondary indexes are not supported on collections containing durations"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>column</name><operator>.</operator><name>type</name><operator>.</operator><name>isTuple</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Secondary indexes are not supported on tuples containing durations"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>column</name><operator>.</operator><name>type</name><operator>.</operator><name>isUDT</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw  <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Secondary indexes are not supported on UDTs containing durations"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Secondary indexes are not supported on duration columns"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>table</name><operator>.</operator><name>isCompactTable</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>TableMetadata</name><operator>.</operator><name>CompactTableMetadata</name></name></type> <name>compactTable</name> <init>= <expr><operator>(</operator><name><name>TableMetadata</name><operator>.</operator><name>CompactTableMetadata</name></name><operator>)</operator> <name>table</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>column</name><operator>.</operator><name>isPrimaryKeyColumn</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>InvalidRequestException</name><argument_list>(<argument><expr><literal type="string">"Secondary indexes are not supported on PRIMARY KEY columns in COMPACT STORAGE tables"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>compactTable</name><operator>.</operator><name>compactValueColumn</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>InvalidRequestException</name><argument_list>(<argument><expr><literal type="string">"Secondary indexes are not supported on compact value column of COMPACT STORAGE tables"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>column</name><operator>.</operator><name>isPartitionKey</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>table</name><operator>.</operator><name>partitionKeyColumns</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Cannot create secondary index on the only partition key column %s"</literal></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>column</name><operator>.</operator><name>type</name><operator>.</operator><name>isFrozenCollection</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>target</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name><name>Type</name><operator>.</operator><name>FULL</name></name></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Cannot create %s() index on frozen column %s. Frozen collections are immutable and must be fully "</literal> <operator>+</operator>
                      <literal type="string">"indexed by using the 'full(%s)' modifier"</literal></expr></argument>, <argument><expr><name><name>target</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>column</name><operator>.</operator><name>type</name><operator>.</operator><name>isFrozenCollection</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>target</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>Type</name><operator>.</operator><name>FULL</name></name></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"full() indexes can only be created on frozen collections"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>column</name><operator>.</operator><name>type</name><operator>.</operator><name>isCollection</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>target</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name><name>Type</name><operator>.</operator><name>SIMPLE</name></name></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Cannot create %s() index on %s. Non-collection columns only support simple indexes"</literal></expr></argument>, <argument><expr><name><name>target</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>column</name><operator>.</operator><name>type</name></name> <operator>instanceof</operator> <name>MapType</name> <operator>&amp;&amp;</operator> <call><name><name>column</name><operator>.</operator><name>type</name><operator>.</operator><name>isMultiCell</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>target</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>Type</name><operator>.</operator><name>KEYS</name></name> <operator>||</operator> <name><name>target</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>Type</name><operator>.</operator><name>KEYS_AND_VALUES</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Cannot create index on %s of column %s with non-map type"</literal></expr></argument>, <argument><expr><name><name>target</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>column</name><operator>.</operator><name>type</name><operator>.</operator><name>isUDT</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>column</name><operator>.</operator><name>type</name><operator>.</operator><name>isMultiCell</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Cannot create index on non-frozen UDT column %s"</literal></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>generateIndexName</name><parameter_list>(<parameter><decl><type><name>KeyspaceMetadata</name></type> <name>keyspace</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>IndexTarget</name></argument>&gt;</argument_list></name></type> <name>targets</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>baseName</name> <init>= <expr><ternary><condition><expr><call><name><name>targets</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>
                        ?</condition><then> <expr><call><name><name>IndexMetadata</name><operator>.</operator><name>generateDefaultIndexName</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><call><name><name>targets</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>column</name></expr></argument>)</argument_list></call></expr>
                        </then><else>: <expr><call><name><name>IndexMetadata</name><operator>.</operator><name>generateDefaultIndexName</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>keyspace</name><operator>.</operator><name>findAvailableIndexName</name></name><argument_list>(<argument><expr><name>baseName</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>SchemaChange</name></type> <name>schemaChangeEvent</name><parameter_list>(<parameter><decl><type><name>KeyspacesDiff</name></type> <name>diff</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>SchemaChange</name><argument_list>(<argument><expr><name><name>Change</name><operator>.</operator><name>UPDATED</name></name></expr></argument>, <argument><expr><name><name>Target</name><operator>.</operator><name>TABLE</name></name></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>authorize</name><parameter_list>(<parameter><decl><type><name>ClientState</name></type> <name>client</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>client</name><operator>.</operator><name>ensureTablePermission</name></name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name><name>Permission</name><operator>.</operator><name>ALTER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>AuditLogContext</name></type> <name>getAuditLogContext</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>AuditLogContext</name><argument_list>(<argument><expr><name><name>AuditLogEntryType</name><operator>.</operator><name>CREATE_INDEX</name></name></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>indexName</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s (%s, %s)"</literal></expr></argument>, <argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>indexName</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>Raw</name> <super_list><extends>extends <super><name><name>CQLStatement</name><operator>.</operator><name>Raw</name></name></super></extends></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>QualifiedName</name></type> <name>tableName</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>QualifiedName</name></type> <name>indexName</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>IndexTarget</name><operator>.</operator><name>Raw</name></name></argument>&gt;</argument_list></name></type> <name>rawIndexTargets</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>IndexAttributes</name></type> <name>attrs</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>ifNotExists</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>Raw</name><parameter_list>(<parameter><decl><type><name>QualifiedName</name></type> <name>tableName</name></decl></parameter>,
                   <parameter><decl><type><name>QualifiedName</name></type> <name>indexName</name></decl></parameter>,
                   <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>IndexTarget</name><operator>.</operator><name>Raw</name></name></argument>&gt;</argument_list></name></type> <name>rawIndexTargets</name></decl></parameter>,
                   <parameter><decl><type><name>IndexAttributes</name></type> <name>attrs</name></decl></parameter>,
                   <parameter><decl><type><name>boolean</name></type> <name>ifNotExists</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tableName</name></name> <operator>=</operator> <name>tableName</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>indexName</name></name> <operator>=</operator> <name>indexName</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>rawIndexTargets</name></name> <operator>=</operator> <name>rawIndexTargets</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>attrs</name></name> <operator>=</operator> <name>attrs</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ifNotExists</name></name> <operator>=</operator> <name>ifNotExists</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>CreateIndexStatement</name></type> <name>prepare</name><parameter_list>(<parameter><decl><type><name>ClientState</name></type> <name>state</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>keyspaceName</name> <init>= <expr><ternary><condition><expr><call><name><name>tableName</name><operator>.</operator><name>hasKeyspace</name></name><argument_list>()</argument_list></call></expr>
                                ?</condition><then> <expr><call><name><name>tableName</name><operator>.</operator><name>getKeyspace</name></name><argument_list>()</argument_list></call></expr>
                                </then><else>: <expr><ternary><condition><expr><call><name><name>indexName</name><operator>.</operator><name>hasKeyspace</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>indexName</name><operator>.</operator><name>getKeyspace</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>state</name><operator>.</operator><name>getKeyspace</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>tableName</name><operator>.</operator><name>hasKeyspace</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>keyspaceName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>tableName</name><operator>.</operator><name>getKeyspace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Keyspace name '%s' doesn't match table name '%s'"</literal></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>indexName</name><operator>.</operator><name>hasKeyspace</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>keyspaceName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>indexName</name><operator>.</operator><name>getKeyspace</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><call><name>ire</name><argument_list>(<argument><expr><literal type="string">"Keyspace name '%s' doesn't match index name '%s'"</literal></expr></argument>, <argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <return>return <expr><operator>new</operator> <call><name>CreateIndexStatement</name><argument_list>(<argument><expr><name>keyspaceName</name></expr></argument>, <argument><expr><call><name><name>tableName</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>indexName</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>rawIndexTargets</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>ifNotExists</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
