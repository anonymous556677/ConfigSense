<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/diag/DiagnosticEventService.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>diag</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Serializable</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>management</name><operator>.</operator><name>ManagementFactory</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Objects</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>SortedMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>function</name><operator>.</operator><name>Consumer</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>management</name><operator>.</operator><name>MBeanServer</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>management</name><operator>.</operator><name>ObjectName</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableCollection</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableMap</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableMultimap</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableSet</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>ImmutableSetMultimap</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>collect</name><operator>.</operator><name>Iterables</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>MBeanWrapper</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Service for publishing and consuming {@link DiagnosticEvent}s.
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>DiagnosticEventService</name> <super_list><implements>implements <super><name>DiagnosticEventServiceMBean</name></super></implements></super_list>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>DiagnosticEventService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Subscribers interested in consuming all kind of events</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>ImmutableSet</name><argument_list type="generic">&lt;<argument><name><name>Consumer</name><argument_list type="generic">&lt;<argument><name>DiagnosticEvent</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>subscribersAll</name> <init>= <expr><call><name><name>ImmutableSet</name><operator>.</operator><name>of</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Subscribers for particular event class, e.g. BootstrapEvent</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>ImmutableSetMultimap</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>DiagnosticEvent</name></extends></argument>&gt;</argument_list></name></argument>, <argument><name><name>Consumer</name><argument_list type="generic">&lt;<argument><name>DiagnosticEvent</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>subscribersByClass</name> <init>= <expr><call><name><name>ImmutableSetMultimap</name><operator>.</operator><name>of</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Subscribers for event class and type, e.g. BootstrapEvent#TOKENS_ALLOCATED</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>ImmutableMap</name><argument_list type="generic">&lt;<argument><name>Class</name></argument>, <argument><name><name>ImmutableSetMultimap</name><argument_list type="generic">&lt;<argument><name><name>Enum</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>Consumer</name><argument_list type="generic">&lt;<argument><name>DiagnosticEvent</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>subscribersByClassAndType</name> <init>= <expr><call><name><name>ImmutableMap</name><operator>.</operator><name>of</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>DiagnosticEventService</name></type> <name>instance</name> <init>= <expr><operator>new</operator> <call><name>DiagnosticEventService</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>DiagnosticEventService</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>MBeanWrapper</name><operator>.</operator><name>instance</name><operator>.</operator><name>registerMBean</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="string">"org.apache.cassandra.diag:type=DiagnosticEventService"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// register broadcasters for JMX events</comment>
        <expr_stmt><expr><call><name><name>DiagnosticEventPersistence</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Makes provided event available to all subscribers.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>publish</name><parameter_list>(<parameter><decl><type><name>DiagnosticEvent</name></type> <name>event</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>diagnosticEventsEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><literal type="string">"Publishing: {}={}"</literal></expr></argument>, <argument><expr><call><name><name>event</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>event</name><operator>.</operator><name>toMap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// event class + type</comment>
        <decl_stmt><decl><type><name><name>ImmutableMultimap</name><argument_list type="generic">&lt;<argument><name><name>Enum</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>Consumer</name><argument_list type="generic">&lt;<argument><name>DiagnosticEvent</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>consumersByType</name> <init>= <expr><call><name><name>subscribersByClassAndType</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>event</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>consumersByType</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>ImmutableCollection</name><argument_list type="generic">&lt;<argument><name><name>Consumer</name><argument_list type="generic">&lt;<argument><name>DiagnosticEvent</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>consumers</name> <init>= <expr><call><name><name>consumersByType</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>event</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>consumers</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <for>for <control>(<init><decl><type><name><name>Consumer</name><argument_list type="generic">&lt;<argument><name>DiagnosticEvent</name></argument>&gt;</argument_list></name></type> <name>consumer</name> <range>: <expr><name>consumers</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>consumer</name><operator>.</operator><name>accept</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// event class</comment>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Consumer</name><argument_list type="generic">&lt;<argument><name>DiagnosticEvent</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>consumersByEvents</name> <init>= <expr><call><name><name>subscribersByClass</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>event</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>consumersByEvents</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name><name>Consumer</name><argument_list type="generic">&lt;<argument><name>DiagnosticEvent</name></argument>&gt;</argument_list></name></type> <name>consumer</name> <range>: <expr><name>consumersByEvents</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>consumer</name><operator>.</operator><name>accept</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// all events</comment>
        <for>for <control>(<init><decl><type><name><name>Consumer</name><argument_list type="generic">&lt;<argument><name>DiagnosticEvent</name></argument>&gt;</argument_list></name></type> <name>consumer</name> <range>: <expr><name>subscribersAll</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>consumer</name><operator>.</operator><name>accept</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Registers event handler for specified class of events.
     * @param event DiagnosticEvent class implementation
     * @param consumer Consumer for received events
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <parameter_list type="generic">&lt;<parameter><name>E</name> <extends>extends <name>DiagnosticEvent</name></extends></parameter>&gt;</parameter_list> <name>void</name></type> <name>subscribe</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name><name>Consumer</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>consumer</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Adding subscriber: {}"</literal></expr></argument>, <argument><expr><name>consumer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>subscribersByClass</name> <operator>=</operator> <name><name>ImmutableSetMultimap</name><operator>.</operator></name>&lt;<name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>DiagnosticEvent</name></extends></argument>&gt;</argument_list></name></expr><operator>,</operator> <expr><name><name>Consumer</name><argument_list type="generic">&lt;<argument><name>DiagnosticEvent</name></argument>&gt;</argument_list></name><operator>&gt;</operator><call><name>builder</name><argument_list>()</argument_list></call>
                              <operator>.</operator><call><name>putAll</name><argument_list>(<argument><expr><name>subscribersByClass</name></expr></argument>)</argument_list></call>
                              <operator>.</operator><call><name>put</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>TypedConsumerWrapper</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>consumer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                              <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logger</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Total subscribers: {}"</literal></expr></argument>, <argument><expr><call><name><name>subscribersByClass</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Registers event handler for specified class of events.
     * @param event DiagnosticEvent class implementation
     * @param consumer Consumer for received events
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <parameter_list type="generic">&lt;<parameter><name>E</name> <extends>extends <name>DiagnosticEvent</name></extends></parameter>, <parameter><name>T</name> <extends>extends <name><name>Enum</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></extends></parameter>&gt;</parameter_list> <name>void</name></type> <name>subscribe</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>event</name></decl></parameter>,
                                                                                      <parameter><decl><type><name>T</name></type> <name>eventType</name></decl></parameter>,
                                                                                      <parameter><decl><type><name><name>Consumer</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>consumer</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>ImmutableSetMultimap</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name><name>Enum</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>Consumer</name><argument_list type="generic">&lt;<argument><name>DiagnosticEvent</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>byTypeBuilder</name> <init>= <expr><call><name><name>ImmutableSetMultimap</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>subscribersByClassAndType</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>byTypeBuilder</name><operator>.</operator><name>putAll</name></name><argument_list>(<argument><expr><call><name><name>subscribersByClassAndType</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>byTypeBuilder</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>eventType</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>TypedConsumerWrapper</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>consumer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>ImmutableMap</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>Class</name></argument>, <argument><name><name>ImmutableSetMultimap</name><argument_list type="generic">&lt;<argument><name><name>Enum</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>Consumer</name><argument_list type="generic">&lt;<argument><name>DiagnosticEvent</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>byClassBuilder</name> <init>= <expr><call><name><name>ImmutableMap</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Class</name></type> <name>clazz</name> <range>: <expr><call><name><name>subscribersByClassAndType</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>clazz</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>byClassBuilder</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>clazz</name></expr></argument>, <argument><expr><call><name><name>subscribersByClassAndType</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><name>subscribersByClassAndType</name> <operator>=</operator> <call><name><name>byClassBuilder</name>
                                    <operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><call><name><name>byTypeBuilder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                    <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Registers event handler for all DiagnosticEvents published from this point.
     * @param consumer Consumer for received events
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>subscribeAll</name><parameter_list>(<parameter><decl><type><name><name>Consumer</name><argument_list type="generic">&lt;<argument><name>DiagnosticEvent</name></argument>&gt;</argument_list></name></type> <name>consumer</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>subscribersAll</name> <operator>=</operator> <name><name>ImmutableSet</name><operator>.</operator></name>&lt;<name><name>Consumer</name><argument_list type="generic">&lt;<argument><name>DiagnosticEvent</name></argument>&gt;</argument_list></name><operator>&gt;</operator><call><name>builder</name><argument_list>()</argument_list></call>
                         <operator>.</operator><call><name>addAll</name><argument_list>(<argument><expr><name>subscribersAll</name></expr></argument>)</argument_list></call>
                         <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>consumer</name></expr></argument>)</argument_list></call>
                         <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * De-registers event handler from receiving any further events.
     * @param consumer Consumer registered for receiving events
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <parameter_list type="generic">&lt;<parameter><name>E</name> <extends>extends <name>DiagnosticEvent</name></extends></parameter>&gt;</parameter_list> <name>void</name></type> <name>unsubscribe</name><parameter_list>(<parameter><decl><type><name><name>Consumer</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>consumer</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>unsubscribe</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>consumer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * De-registers event handler from receiving any further events.
     * @param event DiagnosticEvent class to unsubscribe from
     * @param consumer Consumer registered for receiving events
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <parameter_list type="generic">&lt;<parameter><name>E</name> <extends>extends <name>DiagnosticEvent</name></extends></parameter>&gt;</parameter_list> <name>void</name></type> <name>unsubscribe</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name><name>Class</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name><name>Consumer</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>consumer</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// all events</comment>
        <expr_stmt><expr><name>subscribersAll</name> <operator>=</operator> <call><name><name>ImmutableSet</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><call><name><name>Iterables</name><operator>.</operator><name>filter</name></name><argument_list>(<argument><expr><name>subscribersAll</name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>c</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name>c</name> <operator>!=</operator> <name>consumer</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// event class</comment>
        <decl_stmt><decl><type><name><name>ImmutableSetMultimap</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>DiagnosticEvent</name></extends></argument>&gt;</argument_list></name></argument>, <argument><name><name>Consumer</name><argument_list type="generic">&lt;<argument><name>DiagnosticEvent</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>byClassBuilder</name> <init>= <expr><call><name><name>ImmutableSetMultimap</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>DiagnosticEvent</name></extends></argument>&gt;</argument_list></name></argument>, <argument><name><name>Consumer</name><argument_list type="generic">&lt;<argument><name>DiagnosticEvent</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></argument>&gt;</argument_list></name></type> <name>entries</name> <init>= <expr><call><name><name>subscribersByClass</name><operator>.</operator><name>entries</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>DiagnosticEvent</name></extends></argument>&gt;</argument_list></name></argument>, <argument><name><name>Consumer</name><argument_list type="generic">&lt;<argument><name>DiagnosticEvent</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><name>entries</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>Consumer</name><argument_list type="generic">&lt;<argument><name>DiagnosticEvent</name></argument>&gt;</argument_list></name></type> <name>subscriber</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>subscriber</name> <operator>instanceof</operator> <name>TypedConsumerWrapper</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>subscriber</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>TypedConsumerWrapper</name><operator>)</operator><name>subscriber</name><operator>)</operator><operator>.</operator><name>wrapped</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="line">// other consumers or other events</comment>
            <if_stmt><if>if <condition>(<expr><name>subscriber</name> <operator>!=</operator> <name>consumer</name> <operator>||</operator> <operator>(</operator><name>event</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>byClassBuilder</name> <operator>=</operator> <call><name><name>byClassBuilder</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>subscribersByClass</name> <operator>=</operator> <call><name><name>byClassBuilder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>


        <comment type="line">// event class + type</comment>
        <decl_stmt><decl><type><name><name>ImmutableMap</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>Class</name></argument>, <argument><name><name>ImmutableSetMultimap</name><argument_list type="generic">&lt;<argument><name><name>Enum</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>Consumer</name><argument_list type="generic">&lt;<argument><name>DiagnosticEvent</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>byClassAndTypeBuilder</name> <init>= <expr><call><name><name>ImmutableMap</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Class</name></argument>, <argument><name><name>ImmutableSetMultimap</name><argument_list type="generic">&lt;<argument><name><name>Enum</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>Consumer</name><argument_list type="generic">&lt;<argument><name>DiagnosticEvent</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>byClassEntry</name> <range>: <expr><call><name><name>subscribersByClassAndType</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>ImmutableSetMultimap</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name><name>Enum</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>Consumer</name><argument_list type="generic">&lt;<argument><name>DiagnosticEvent</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name></type> <name>byTypeBuilder</name> <init>= <expr><call><name><name>ImmutableSetMultimap</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>ImmutableSetMultimap</name><argument_list type="generic">&lt;<argument><name><name>Enum</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>Consumer</name><argument_list type="generic">&lt;<argument><name>DiagnosticEvent</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>byTypeConsumers</name> <init>= <expr><call><name><name>byClassEntry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>Iterables</name><operator>.</operator><name>filter</name></name><argument_list>(<argument><expr><call><name><name>byTypeConsumers</name><operator>.</operator><name>entries</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>e</name></decl></parameter>)</parameter_list> -&gt;
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>e</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
                <decl_stmt><decl><type><name><name>Consumer</name><argument_list type="generic">&lt;<argument><name>DiagnosticEvent</name></argument>&gt;</argument_list></name></type> <name>subscriber</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>subscriber</name> <operator>instanceof</operator> <name>TypedConsumerWrapper</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>subscriber</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>TypedConsumerWrapper</name><operator>)</operator> <name>subscriber</name><operator>)</operator><operator>.</operator><name>wrapped</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <return>return <expr><name>subscriber</name> <operator>!=</operator> <name>consumer</name> <operator>||</operator> <operator>(</operator><name>event</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>byClassEntry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
            </block_content>}</block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><name>byTypeBuilder</name><operator>::</operator><name>put</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name><name>ImmutableSetMultimap</name><argument_list type="generic">&lt;<argument><name><name>Enum</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>Consumer</name><argument_list type="generic">&lt;<argument><name>DiagnosticEvent</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>byType</name> <init>= <expr><call><name><name>byTypeBuilder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>byType</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>byClassAndTypeBuilder</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>byClassEntry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>byType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><name>subscribersByClassAndType</name> <operator>=</operator> <call><name><name>byClassAndTypeBuilder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Indicates if any {@link Consumer} has been registered for the specified class of events.
     * @param event DiagnosticEvent class implementation
     */</comment>
    <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>E</name> <extends>extends <name>DiagnosticEvent</name></extends></parameter>&gt;</parameter_list> <name>boolean</name></type> <name>hasSubscribers</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>event</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>!</operator><call><name><name>subscribersAll</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>subscribersByClass</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>subscribersByClassAndType</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Indicates if any {@link Consumer} has been registered for the specified class of events.
     * @param event DiagnosticEvent class implementation
     * @param eventType Subscribed event type matched against {@link DiagnosticEvent#getType()}
     */</comment>
    <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>E</name> <extends>extends <name>DiagnosticEvent</name></extends></parameter>, <parameter><name>T</name> <extends>extends <name><name>Enum</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></extends></parameter>&gt;</parameter_list> <name>boolean</name></type> <name>hasSubscribers</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>eventType</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>subscribersAll</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>ImmutableSet</name><argument_list type="generic">&lt;<argument><name><name>Consumer</name><argument_list type="generic">&lt;<argument><name>DiagnosticEvent</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>subscribers</name> <init>= <expr><call><name><name>subscribersByClass</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>subscribers</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>subscribers</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>ImmutableSetMultimap</name><argument_list type="generic">&lt;<argument><name><name>Enum</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>Consumer</name><argument_list type="generic">&lt;<argument><name>DiagnosticEvent</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>byType</name> <init>= <expr><call><name><name>subscribersByClassAndType</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>byType</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>byType</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Consumer</name><argument_list type="generic">&lt;<argument><name>DiagnosticEvent</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>consumers</name> <init>= <expr><call><name><name>byType</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>eventType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>consumers</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>consumers</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Indicates if events are enabled for specified event class based on {@link DatabaseDescriptor#diagnosticEventsEnabled()}
     * and {@link #hasSubscribers(Class)}.
     * @param event DiagnosticEvent class implementation
     */</comment>
    <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>E</name> <extends>extends <name>DiagnosticEvent</name></extends></parameter>&gt;</parameter_list> <name>boolean</name></type> <name>isEnabled</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>event</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>diagnosticEventsEnabled</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>hasSubscribers</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Indicates if events are enabled for specified event class based on {@link DatabaseDescriptor#diagnosticEventsEnabled()}
     * and {@link #hasSubscribers(Class, Enum)}.
     * @param event DiagnosticEvent class implementation
     * @param eventType Subscribed event type matched against {@link DiagnosticEvent#getType()}
     */</comment>
    <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>E</name> <extends>extends <name>DiagnosticEvent</name></extends></parameter>, <parameter><name>T</name> <extends>extends <name><name>Enum</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></extends></parameter>&gt;</parameter_list> <name>boolean</name></type> <name>isEnabled</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>eventType</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>diagnosticEventsEnabled</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>hasSubscribers</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><name>eventType</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>DiagnosticEventService</name></type> <name>instance</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>instance</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Removes all active subscribers. Should only be called from testing.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>cleanup</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>subscribersByClass</name> <operator>=</operator> <call><name><name>ImmutableSetMultimap</name><operator>.</operator><name>of</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>subscribersAll</name> <operator>=</operator> <call><name><name>ImmutableSet</name><operator>.</operator><name>of</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>subscribersByClassAndType</name> <operator>=</operator> <call><name><name>ImmutableMap</name><operator>.</operator><name>of</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDiagnosticsEnabled</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>diagnosticEventsEnabled</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>disableDiagnostics</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>setDiagnosticEventsEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>SortedMap</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Serializable</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>readEvents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>eventClazz</name></decl></parameter>, <parameter><decl><type><name>Long</name></type> <name>lastKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>DiagnosticEventPersistence</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getEvents</name><argument_list>(<argument><expr><name>eventClazz</name></expr></argument>, <argument><expr><name>lastKey</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>enableEventPersistence</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>eventClazz</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DiagnosticEventPersistence</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>enableEventPersistence</name><argument_list>(<argument><expr><name>eventClazz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>disableEventPersistence</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>eventClazz</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>DiagnosticEventPersistence</name><operator>.</operator><name>instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>disableEventPersistence</name><argument_list>(<argument><expr><name>eventClazz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Wrapper class for supporting typed event handling for consumers.
     */</comment>
    <class><specifier>private</specifier> <specifier>static</specifier> class <name><name>TypedConsumerWrapper</name><parameter_list>&lt;<parameter><name>E</name></parameter>&gt;</parameter_list></name> <super_list><implements>implements <super><name><name>Consumer</name><argument_list type="generic">&lt;<argument><name>DiagnosticEvent</name></argument>&gt;</argument_list></name></super></implements></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Consumer</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>wrapped</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>TypedConsumerWrapper</name><parameter_list>(<parameter><decl><type><name><name>Consumer</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>wrapped</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>wrapped</name></name> <operator>=</operator> <name>wrapped</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>accept</name><parameter_list>(<parameter><decl><type><name>DiagnosticEvent</name></type> <name>e</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>wrapped</name><operator>.</operator><name>accept</name></name><argument_list>(<argument><expr><operator>(</operator><name>E</name><operator>)</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>o</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name>getClass</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>o</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name><name>TypedConsumerWrapper</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>that</name> <init>= <expr><operator>(</operator><name><name>TypedConsumerWrapper</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>wrapped</name></expr></argument>, <argument><expr><name><name>that</name><operator>.</operator><name>wrapped</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>Objects</name><operator>.</operator><name>hash</name></name><argument_list>(<argument><expr><name>wrapped</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class></unit>
