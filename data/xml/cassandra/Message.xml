<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/net/Message.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>EnumMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicInteger</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>annotations</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>primitives</name><operator>.</operator><name>Ints</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>slf4j</name><operator>.</operator><name>LoggerFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>RequestFailureReason</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>IVersionedAsymmetricSerializer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>IVersionedSerializer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>DataInputBuffer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>DataInputPlus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>DataOutputPlus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>InetAddressAndPort</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>tracing</name><operator>.</operator><name>Tracing</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>tracing</name><operator>.</operator><name>Tracing</name><operator>.</operator><name>TraceType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>FBUtilities</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>MonotonicClockTranslation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>NoSpamLogger</name></name>;</import>

<import>import static <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name><operator>.</operator><name>MINUTES</name></name>;</import>
<import>import static <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name><operator>.</operator><name>NANOSECONDS</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>TypeSizes</name><operator>.</operator><name>sizeof</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>TypeSizes</name><operator>.</operator><name>sizeofUnsignedVInt</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>locator</name><operator>.</operator><name>InetAddressAndPort</name><operator>.</operator><name>Serializer</name><operator>.</operator><name>inetAddressAndPortSerializer</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>MessagingService</name><operator>.</operator><name>VERSION_3014</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>MessagingService</name><operator>.</operator><name>VERSION_30</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>MessagingService</name><operator>.</operator><name>VERSION_40</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>net</name><operator>.</operator><name>MessagingService</name><operator>.</operator><name>instance</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>MonotonicClock</name><operator>.</operator><name>approxTime</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>vint</name><operator>.</operator><name>VIntCoding</name><operator>.</operator><name>computeUnsignedVIntSize</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>vint</name><operator>.</operator><name>VIntCoding</name><operator>.</operator><name>getUnsignedVInt</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>utils</name><operator>.</operator><name>vint</name><operator>.</operator><name>VIntCoding</name><operator>.</operator><name>skipUnsignedVInt</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Immutable main unit of internode communication - what used to be {@code MessageIn} and {@code MessageOut} fused
 * in one class.
 *
 * @param &lt;T&gt; The type of the message payload.
 */</comment>
<class><specifier>public</specifier> class <name><name>Message</name><parameter_list>&lt;<parameter><name>T</name></parameter>&gt;</parameter_list></name>
<block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Logger</name></type> <name>logger</name> <init>= <expr><call><name><name>LoggerFactory</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name><name>Message</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>NoSpamLogger</name></type> <name>noSpam1m</name> <init>= <expr><call><name><name>NoSpamLogger</name><operator>.</operator><name>getLogger</name></name><argument_list>(<argument><expr><name>logger</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MINUTES</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Header</name></type> <name>header</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>T</name></type> <name>payload</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>Message</name><parameter_list>(<parameter><decl><type><name>Header</name></type> <name>header</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>payload</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>header</name></name> <operator>=</operator> <name>header</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>payload</name></name> <operator>=</operator> <name>payload</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/** Sender of the message. */</comment>
    <function><type><specifier>public</specifier> <name>InetAddressAndPort</name></type> <name>from</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>header</name><operator>.</operator><name>from</name></name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** Whether the message has crossed the node boundary, that is whether it originated from another node. */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isCrossNode</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>!</operator><call><name>from</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * id of the request/message. In 4.0+ can be shared between multiple messages of the same logical request,
     * whilst in versions above a new id would be allocated for each message sent.
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>id</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>header</name><operator>.</operator><name>id</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Verb</name></type> <name>verb</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>header</name><operator>.</operator><name>verb</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>boolean</name></type> <name>isFailureResponse</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>verb</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Verb</name><operator>.</operator><name>FAILURE_RSP</name></name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creation time of the message. If cross-node timeouts are enabled ({@link DatabaseDescriptor#hasCrossNodeTimeout()},
     * {@code deserialize()} will use the marshalled value, otherwise will use current time on the deserializing machine.
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>createdAtNanos</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>header</name><operator>.</operator><name>createdAtNanos</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>expiresAtNanos</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>header</name><operator>.</operator><name>expiresAtNanos</name></name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** For how long the message has lived. */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>elapsedSinceCreated</name><parameter_list>(<parameter><decl><type><name>TimeUnit</name></type> <name>units</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>units</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><call><name><name>approxTime</name><operator>.</operator><name>now</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name>createdAtNanos</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NANOSECONDS</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>creationTimeMillis</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>approxTime</name><operator>.</operator><name>translate</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toMillisSinceEpoch</name><argument_list>(<argument><expr><call><name>createdAtNanos</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** Whether a failure response should be returned upon failure */</comment>
    <function><type><name>boolean</name></type> <name>callBackOnFailure</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>header</name><operator>.</operator><name>callBackOnFailure</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** See CASSANDRA-14145 */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>trackRepairedData</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>header</name><operator>.</operator><name>trackRepairedData</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** Used for cross-DC write optimisation - pick one node in the DC and have it relay the write to its local peers */</comment>
    <function><annotation>@<name>Nullable</name></annotation>
    <type><specifier>public</specifier> <name>ForwardingInfo</name></type> <name>forwardTo</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>header</name><operator>.</operator><name>forwardTo</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** The originator of the request - used when forwarding and will differ from {@link #from()} */</comment>
    <function><annotation>@<name>Nullable</name></annotation>
    <type><specifier>public</specifier> <name>InetAddressAndPort</name></type> <name>respondTo</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>header</name><operator>.</operator><name>respondTo</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Nullable</name></annotation>
    <type><specifier>public</specifier> <name>UUID</name></type> <name>traceSession</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>header</name><operator>.</operator><name>traceSession</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Nullable</name></annotation>
    <type><specifier>public</specifier> <name>TraceType</name></type> <name>traceType</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>header</name><operator>.</operator><name>traceType</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block">/*
     * request/response convenience
     */</comment>

    <comment type="block" format="javadoc">/**
     * Make a request {@link Message} with supplied verb and payload. Will fill in remaining fields
     * automatically.
     *
     * If you know that you will need to set some params or flags - prefer using variants of {@code out()}
     * that allow providing them at point of message constructions, rather than allocating new messages
     * with those added flags and params. See {@code outWithFlag()}, {@code outWithFlags()}, and {@code outWithParam()}
     * family.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>Message</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>out</name><parameter_list>(<parameter><decl><type><name>Verb</name></type> <name>verb</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>payload</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><operator>!</operator><call><name><name>verb</name><operator>.</operator><name>isResponse</name></name><argument_list>()</argument_list></call></expr>;</assert>

        <return>return <expr><call><name>outWithParam</name><argument_list>(<argument><expr><call><name>nextId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>verb</name></expr></argument>, <argument><expr><name>payload</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>Message</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>out</name><parameter_list>(<parameter><decl><type><name>Verb</name></type> <name>verb</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>payload</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>expiresAtNanos</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>outWithParam</name><argument_list>(<argument><expr><call><name>nextId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>verb</name></expr></argument>, <argument><expr><name>expiresAtNanos</name></expr></argument>, <argument><expr><name>payload</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>Message</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>outWithFlag</name><parameter_list>(<parameter><decl><type><name>Verb</name></type> <name>verb</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>payload</name></decl></parameter>, <parameter><decl><type><name>MessageFlag</name></type> <name>flag</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><operator>!</operator><call><name><name>verb</name><operator>.</operator><name>isResponse</name></name><argument_list>()</argument_list></call></expr>;</assert>
        <return>return <expr><call><name>outWithParam</name><argument_list>(<argument><expr><call><name>nextId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>verb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>payload</name></expr></argument>, <argument><expr><call><name><name>flag</name><operator>.</operator><name>addTo</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>Message</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>outWithFlags</name><parameter_list>(<parameter><decl><type><name>Verb</name></type> <name>verb</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>payload</name></decl></parameter>, <parameter><decl><type><name>MessageFlag</name></type> <name>flag1</name></decl></parameter>, <parameter><decl><type><name>MessageFlag</name></type> <name>flag2</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><operator>!</operator><call><name><name>verb</name><operator>.</operator><name>isResponse</name></name><argument_list>()</argument_list></call></expr>;</assert>
        <return>return <expr><call><name>outWithParam</name><argument_list>(<argument><expr><call><name>nextId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>verb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>payload</name></expr></argument>, <argument><expr><call><name><name>flag2</name><operator>.</operator><name>addTo</name></name><argument_list>(<argument><expr><call><name><name>flag1</name><operator>.</operator><name>addTo</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>Message</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>outWithParam</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>Verb</name></type> <name>verb</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>payload</name></decl></parameter>, <parameter><decl><type><name>ParamType</name></type> <name>paramType</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>paramValue</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>outWithParam</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>verb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>payload</name></expr></argument>, <argument><expr><name>paramType</name></expr></argument>, <argument><expr><name>paramValue</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>Message</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>outWithParam</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>Verb</name></type> <name>verb</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>expiresAtNanos</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>payload</name></decl></parameter>, <parameter><decl><type><name>ParamType</name></type> <name>paramType</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>paramValue</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>outWithParam</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>verb</name></expr></argument>, <argument><expr><name>expiresAtNanos</name></expr></argument>, <argument><expr><name>payload</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>paramType</name></expr></argument>, <argument><expr><name>paramValue</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>Message</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>outWithParam</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>Verb</name></type> <name>verb</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>expiresAtNanos</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>payload</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>ParamType</name></type> <name>paramType</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>paramValue</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>payload</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>InetAddressAndPort</name></type> <name>from</name> <init>= <expr><call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>createdAtNanos</name> <init>= <expr><call><name><name>approxTime</name><operator>.</operator><name>now</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>expiresAtNanos</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>expiresAtNanos</name> <operator>=</operator> <call><name><name>verb</name><operator>.</operator><name>expiresAtNanos</name></name><argument_list>(<argument><expr><name>createdAtNanos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return>return <expr><operator>new</operator> <call><name><name>Message</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Header</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>verb</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>createdAtNanos</name></expr></argument>, <argument><expr><name>expiresAtNanos</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><call><name>buildParams</name><argument_list>(<argument><expr><name>paramType</name></expr></argument>, <argument><expr><name>paramValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>Message</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>internalResponse</name><parameter_list>(<parameter><decl><type><name>Verb</name></type> <name>verb</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>payload</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <assert>assert <expr><call><name><name>verb</name><operator>.</operator><name>isResponse</name></name><argument_list>()</argument_list></call></expr>;</assert>
        <return>return <expr><call><name>outWithParam</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>verb</name></expr></argument>, <argument><expr><name>payload</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** Builds a response Message with provided payload, and all the right fields inferred from request Message */</comment>
    <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>Message</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>responseWith</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>payload</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>outWithParam</name><argument_list>(<argument><expr><call><name>id</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>verb</name><argument_list>()</argument_list></call><operator>.</operator><name>responseVerb</name></expr></argument>, <argument><expr><call><name>expiresAtNanos</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>payload</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** Builds a response Message with no payload, and all the right fields inferred from request Message */</comment>
    <function><type><specifier>public</specifier> <name><name>Message</name><argument_list type="generic">&lt;<argument><name>NoPayload</name></argument>&gt;</argument_list></name></type> <name>emptyResponse</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>responseWith</name><argument_list>(<argument><expr><name><name>NoPayload</name><operator>.</operator><name>noPayload</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** Builds a failure response Message with an explicit reason, and fields inferred from request Message */</comment>
    <function><type><specifier>public</specifier> <name><name>Message</name><argument_list type="generic">&lt;<argument><name>RequestFailureReason</name></argument>&gt;</argument_list></name></type> <name>failureResponse</name><parameter_list>(<parameter><decl><type><name>RequestFailureReason</name></type> <name>reason</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>failureResponse</name><argument_list>(<argument><expr><call><name>id</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>expiresAtNanos</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name><name>Message</name><argument_list type="generic">&lt;<argument><name>RequestFailureReason</name></argument>&gt;</argument_list></name></type> <name>failureResponse</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>expiresAtNanos</name></decl></parameter>, <parameter><decl><type><name>RequestFailureReason</name></type> <name>reason</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>outWithParam</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>Verb</name><operator>.</operator><name>FAILURE_RSP</name></name></expr></argument>, <argument><expr><name>expiresAtNanos</name></expr></argument>, <argument><expr><name>reason</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>withCallBackOnFailure</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name><name>Message</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>header</name><operator>.</operator><name>withFlag</name></name><argument_list>(<argument><expr><name><name>MessageFlag</name><operator>.</operator><name>CALL_BACK_ON_FAILURE</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Message</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>withForwardTo</name><parameter_list>(<parameter><decl><type><name>ForwardingInfo</name></type> <name>peers</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name><name>Message</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>header</name><operator>.</operator><name>withParam</name></name><argument_list>(<argument><expr><name><name>ParamType</name><operator>.</operator><name>FORWARD_TO</name></name></expr></argument>, <argument><expr><name>peers</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>EnumMap</name><argument_list type="generic">&lt;<argument><name>ParamType</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>NO_PARAMS</name> <init>= <expr><operator>new</operator> <call><name><name>EnumMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>ParamType</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>ParamType</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>buildParams</name><parameter_list>(<parameter><decl><type><name>ParamType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ParamType</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>params</name> <init>= <expr><name>NO_PARAMS</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>Tracing</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>params</name> <operator>=</operator> <call><name><name>Tracing</name><operator>.</operator><name>instance</name><operator>.</operator><name>addTraceHeaders</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>EnumMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>ParamType</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>params</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>params</name> <operator>=</operator> <operator>new</operator> <call><name><name>EnumMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>ParamType</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><name>params</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>ParamType</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>addParam</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ParamType</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>ParamType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>params</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>params</name> <operator>=</operator> <operator>new</operator> <call><name><name>EnumMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>params</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block">/*
     * id generation
     */</comment>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>NO_ID</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt> <comment type="line">// this is a valid ID for pre40 nodes</comment>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>AtomicInteger</name></type> <name>nextId</name> <init>= <expr><operator>new</operator> <call><name>AtomicInteger</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>long</name></type> <name>nextId</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>id</name></decl>;</decl_stmt>
        <do>do
        <block>{<block_content>
            <expr_stmt><expr><name>id</name> <operator>=</operator> <call><name><name>nextId</name><operator>.</operator><name>incrementAndGet</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        while <condition>(<expr><name>id</name> <operator>==</operator> <name>NO_ID</name></expr>)</condition>;</do>

        <return>return <expr><name>id</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * WARNING: this is inaccurate for messages from pre40 nodes, which can use 0 as an id (but will do so rarely)
     */</comment>
    <function><annotation>@<name>VisibleForTesting</name></annotation>
    <type><name>boolean</name></type> <name>hasId</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>id</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>NO_ID</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/** we preface every message with this number so the recipient can validate the sender is sane */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>PROTOCOL_MAGIC</name> <init>= <expr><literal type="number">0xCA552DFA</literal></expr></init></decl>;</decl_stmt>

    <function><type><specifier>static</specifier> <name>void</name></type> <name>validateLegacyProtocolMagic</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>magic</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>InvalidLegacyProtocolMagic</name></expr></argument></throws>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>magic</name> <operator>!=</operator> <name>PROTOCOL_MAGIC</name></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>InvalidLegacyProtocolMagic</name><argument_list>(<argument><expr><name>magic</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>InvalidLegacyProtocolMagic</name> <super_list><extends>extends <super><name>IOException</name></super></extends></super_list>
    <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>read</name></decl>;</decl_stmt>
        <constructor><specifier>private</specifier> <name>InvalidLegacyProtocolMagic</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>read</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Read %d, Expected %d"</literal></expr></argument>, <argument><expr><name>read</name></expr></argument>, <argument><expr><name>PROTOCOL_MAGIC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>read</name></name> <operator>=</operator> <name>read</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>
    }</block></class>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><literal type="string">"(from:"</literal> <operator>+</operator> <call><name>from</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">", type:"</literal> <operator>+</operator> <call><name>verb</name><argument_list>()</argument_list></call><operator>.</operator><name>stage</name> <operator>+</operator> <literal type="string">" verb:"</literal> <operator>+</operator> <call><name>verb</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="char">')'</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Split into a separate object to allow partial message deserialization without wasting work and allocation
     * afterwards, if the entire message is necessary and available.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Header</name>
    <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>long</name></type> <name>id</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Verb</name></type> <name>verb</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>InetAddressAndPort</name></type> <name>from</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>long</name></type> <name>createdAtNanos</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>long</name></type> <name>expiresAtNanos</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>flags</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>ParamType</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>params</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>Header</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>Verb</name></type> <name>verb</name></decl></parameter>, <parameter><decl><type><name>InetAddressAndPort</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>createdAtNanos</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>expiresAtNanos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ParamType</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>params</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>verb</name></name> <operator>=</operator> <name>verb</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>from</name></name> <operator>=</operator> <name>from</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>expiresAtNanos</name></name> <operator>=</operator> <name>expiresAtNanos</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>createdAtNanos</name></name> <operator>=</operator> <name>createdAtNanos</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>params</name></name> <operator>=</operator> <name>params</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><name>Header</name></type> <name>withFlag</name><parameter_list>(<parameter><decl><type><name>MessageFlag</name></type> <name>flag</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>Header</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>verb</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>createdAtNanos</name></expr></argument>, <argument><expr><name>expiresAtNanos</name></expr></argument>, <argument><expr><call><name><name>flag</name><operator>.</operator><name>addTo</name></name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><name>Header</name></type> <name>withParam</name><parameter_list>(<parameter><decl><type><name>ParamType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>Header</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>verb</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>createdAtNanos</name></expr></argument>, <argument><expr><name>expiresAtNanos</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><call><name>addParam</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><name>boolean</name></type> <name>callBackOnFailure</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>MessageFlag</name><operator>.</operator><name>CALL_BACK_ON_FAILURE</name><operator>.</operator><name>isIn</name></name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><name>boolean</name></type> <name>trackRepairedData</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><call><name><name>MessageFlag</name><operator>.</operator><name>TRACK_REPAIRED_DATA</name><operator>.</operator><name>isIn</name></name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Nullable</name></annotation>
        <type><name>ForwardingInfo</name></type> <name>forwardTo</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>(</operator><name>ForwardingInfo</name><operator>)</operator> <call><name><name>params</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ParamType</name><operator>.</operator><name>FORWARD_TO</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Nullable</name></annotation>
        <type><name>InetAddressAndPort</name></type> <name>respondTo</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>(</operator><name>InetAddressAndPort</name><operator>)</operator> <call><name><name>params</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ParamType</name><operator>.</operator><name>RESPOND_TO</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Nullable</name></annotation>
        <type><specifier>public</specifier> <name>UUID</name></type> <name>traceSession</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>(</operator><name>UUID</name><operator>)</operator> <call><name><name>params</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ParamType</name><operator>.</operator><name>TRACE_SESSION</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Nullable</name></annotation>
        <type><specifier>public</specifier> <name>TraceType</name></type> <name>traceType</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <return>return <expr><operator>(</operator><name>TraceType</name><operator>)</operator> <call><name><name>params</name><operator>.</operator><name>getOrDefault</name></name><argument_list>(<argument><expr><name><name>ParamType</name><operator>.</operator><name>TRACE_TYPE</name></name></expr></argument>, <argument><expr><name><name>TraceType</name><operator>.</operator><name>QUERY</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"WeakerAccess"</literal></expr></argument>)</argument_list></annotation>
    <specifier>public</specifier> <specifier>static</specifier> class <name><name>Builder</name><parameter_list>&lt;<parameter><name>T</name></parameter>&gt;</parameter_list></name>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>Verb</name></type> <name>verb</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>InetAddressAndPort</name></type> <name>from</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>T</name></type> <name>payload</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>ParamType</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>params</name> <init>= <expr><operator>new</operator> <call><name><name>EnumMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>ParamType</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>createdAtNanos</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>expiresAtNanos</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>id</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>hasId</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>Builder</name><parameter_list>()</parameter_list>
        <block>{<block_content>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name><name>Builder</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>from</name><parameter_list>(<parameter><decl><type><name>InetAddressAndPort</name></type> <name>from</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>from</name></name> <operator>=</operator> <name>from</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name>Builder</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>withPayload</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>payload</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>payload</name></name> <operator>=</operator> <name>payload</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name>Builder</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>withFlag</name><parameter_list>(<parameter><decl><type><name>MessageFlag</name></type> <name>flag</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name><name>flag</name><operator>.</operator><name>addTo</name></name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name>Builder</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>withFlags</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name>Builder</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>withParam</name><parameter_list>(<parameter><decl><type><name>ParamType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * A shortcut to add tracing params.
         * Effectively, it is the same as calling {@link #withParam(ParamType, Object)} with tracing params
         * If there is already tracing params, calling this method overrides any existing ones.
         */</comment>
        <function><type><specifier>public</specifier> <name><name>Builder</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>withTracingParams</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>Tracing</name><operator>.</operator><name>isTracing</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>Tracing</name><operator>.</operator><name>instance</name><operator>.</operator><name>addTraceHeaders</name></name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name>Builder</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>withoutParam</name><parameter_list>(<parameter><decl><type><name>ParamType</name></type> <name>type</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name>Builder</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>withParams</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ParamType</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>params</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>params</name><operator>.</operator><name>putAll</name></name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name>Builder</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>ofVerb</name><parameter_list>(<parameter><decl><type><name>Verb</name></type> <name>verb</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>verb</name></name> <operator>=</operator> <name>verb</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>expiresAtNanos</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>verb</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>createdAtNanos</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>expiresAtNanos</name> <operator>=</operator> <call><name><name>verb</name><operator>.</operator><name>expiresAtNanos</name></name><argument_list>(<argument><expr><name>createdAtNanos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>this</name><operator>.</operator><name>verb</name><operator>.</operator><name>isResponse</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>from</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// default to sending from self if we're a request verb</comment>
                <expr_stmt><expr><name>from</name> <operator>=</operator> <call><name><name>FBUtilities</name><operator>.</operator><name>getBroadcastAddressAndPort</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name>Builder</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>withCreatedAt</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>createdAtNanos</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>createdAtNanos</name></name> <operator>=</operator> <name>createdAtNanos</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>expiresAtNanos</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>verb</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>expiresAtNanos</name> <operator>=</operator> <call><name><name>verb</name><operator>.</operator><name>expiresAtNanos</name></name><argument_list>(<argument><expr><name>createdAtNanos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name>Builder</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>withExpiresAt</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>expiresAtNanos</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>expiresAtNanos</name></name> <operator>=</operator> <name>expiresAtNanos</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name>Builder</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>withId</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>hasId</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name>Message</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>build</name><parameter_list>()</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>verb</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>from</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>payload</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <return>return <expr><operator>new</operator> <call><name><name>Message</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Header</name><argument_list>(<argument><expr><ternary><condition><expr><name>hasId</name></expr> ?</condition><then> <expr><name>id</name></expr> </then><else>: <expr><call><name>nextId</name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>, <argument><expr><name>verb</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>createdAtNanos</name></expr></argument>, <argument><expr><name>expiresAtNanos</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>Builder</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>builder</name><parameter_list>(<parameter><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>message</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><operator>.</operator><call><name>from</name><argument_list>(<argument><expr><call><name><name>message</name><operator>.</operator><name>from</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                               <operator>.</operator><call><name>withId</name><argument_list>(<argument><expr><call><name><name>message</name><operator>.</operator><name>id</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                               <operator>.</operator><call><name>ofVerb</name><argument_list>(<argument><expr><call><name><name>message</name><operator>.</operator><name>verb</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                               <operator>.</operator><call><name>withCreatedAt</name><argument_list>(<argument><expr><call><name><name>message</name><operator>.</operator><name>createdAtNanos</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                               <operator>.</operator><call><name>withExpiresAt</name><argument_list>(<argument><expr><call><name><name>message</name><operator>.</operator><name>expiresAtNanos</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                               <operator>.</operator><call><name>withFlags</name><argument_list>(<argument><expr><name><name>message</name><operator>.</operator><name>header</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call>
                               <operator>.</operator><call><name>withParams</name><argument_list>(<argument><expr><name><name>message</name><operator>.</operator><name>header</name><operator>.</operator><name>params</name></name></expr></argument>)</argument_list></call>
                               <operator>.</operator><call><name>withPayload</name><argument_list>(<argument><expr><name><name>message</name><operator>.</operator><name>payload</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>Builder</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>builder</name><parameter_list>(<parameter><decl><type><name>Verb</name></type> <name>verb</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>payload</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ofVerb</name><argument_list>(<argument><expr><name>verb</name></expr></argument>)</argument_list></call>
                               <operator>.</operator><call><name>withCreatedAt</name><argument_list>(<argument><expr><call><name><name>approxTime</name><operator>.</operator><name>now</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                               <operator>.</operator><call><name>withPayload</name><argument_list>(<argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Serializer</name></type> <name>serializer</name> <init>= <expr><operator>new</operator> <call><name>Serializer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Each message contains a header with several fixed fields, an optional key-value params section, and then
     * the message payload itself. Below is a visualization of the layout.
     *
     *  The params are prefixed by the count of key-value pairs; this value is encoded as unsigned vint.
     *  An individual param has an unsvint id (more specifically, a {@link ParamType}), and a byte array value.
     *  The param value is prefixed with it's length, encoded as an unsigned vint, followed by by the value's bytes.
     *
     * Legacy Notes (see {@link Serializer#serialize(Message, DataOutputPlus, int)} for complete details):
     * - pre 4.0, the IP address was sent along in the header, before the verb. The IP address may be either IPv4 (4 bytes) or IPv6 (16 bytes)
     * - pre-4.0, the verb was encoded as a 4-byte integer; in 4.0 and up it is an unsigned vint
     * - pre-4.0, the payloadSize was encoded as a 4-byte integer; in 4.0 and up it is an unsigned vint
     * - pre-4.0, the count of param key-value pairs was encoded as a 4-byte integer; in 4.0 and up it is an unsigned vint
     * - pre-4.0, param names were encoded as strings; in 4.0 they are encoded as enum id vints
     * - pre-4.0, expiry time wasn't encoded at all; in 4.0 it's an unsigned vint
     * - pre-4.0, message id was an int; in 4.0 and up it's an unsigned vint
     * - pre-4.0, messages included PROTOCOL MAGIC BYTES; post-4.0, we rely on frame CRCs instead
     * - pre-4.0, messages would serialize boolean params as dummy ONE_BYTEs; post-4.0 we have a dedicated 'flags' vint
     *
     * &lt;pre&gt;
     * {@code
     *            1 1 1 1 1 2 2 2 2 2 3
     *  0 2 4 6 8 0 2 4 6 8 0 2 4 6 8 0
     * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     * | Message ID (vint)             |
     * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     * | Creation timestamp (int)      |
     * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     * | Expiry (vint)                 |
     * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     * | Verb (vint)                   |
     * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     * | Flags (vint)                  |
     * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     * | Param count (vint)            |
     * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     * |                               /
     * /           Params              /
     * /                               |
     * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     * | Payload size (vint)           |
     * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     * |                               /
     * /           Payload             /
     * /                               |
     * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     * }
     * &lt;/pre&gt;
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>Serializer</name>
    <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CREATION_TIME_SIZE</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>Serializer</name><parameter_list>()</parameter_list>
        <block>{<block_content>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name>void</name></type> <name>serialize</name><parameter_list>(<parameter><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>DataOutputPlus</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;=</operator> <name>VERSION_40</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>serializePost40</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>serializePre40</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>Message</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>deserialize</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>InetAddressAndPort</name></type> <name>peer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <return>return <expr><ternary><condition><expr><name>version</name> <operator>&gt;=</operator> <name>VERSION_40</name></expr> ?</condition><then> <expr><call><name>deserializePost40</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>peer</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>deserializePre40</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * A partial variant of deserialize, taking in a previously deserialized {@link Header} as an argument.
         *
         * Skip deserializing the {@link Header} from the input stream in favour of using the provided header.
         */</comment>
        <function><type><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>Message</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>deserialize</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>Header</name></type> <name>header</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <return>return <expr><ternary><condition><expr><name>version</name> <operator>&gt;=</operator> <name>VERSION_40</name></expr> ?</condition><then> <expr><call><name>deserializePost40</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>deserializePre40</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name>int</name></type> <name>serializedSize</name><parameter_list>(<parameter><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <return>return <expr><ternary><condition><expr><name>version</name> <operator>&gt;=</operator> <name>VERSION_40</name></expr> ?</condition><then> <expr><call><name>serializedSizePost40</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>serializedSizePre40</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Size of the next message in the stream. Returns -1 if there aren't sufficient bytes read yet to determine size.
         */</comment>
        <function><type><name>int</name></type> <name>inferMessageSize</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>InvalidLegacyProtocolMagic</name></expr></argument></throws>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><ternary><condition><expr><name>version</name> <operator>&gt;=</operator> <name>VERSION_40</name></expr> ?</condition><then> <expr><call><name>inferMessageSizePost40</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>inferMessageSizePre40</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getInternodeMaxMessageSizeInBytes</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><operator>new</operator> <call><name>OversizedMessageException</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
            <return>return <expr><name>size</name></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Partially deserialize the message - by only extracting the header and leaving the payload alone.
         *
         * To get the rest of the message without repeating the work done here, use {@link #deserialize(DataInputPlus, Header, int)}
         * method.
         *
         * It's assumed that the provided buffer contains all the bytes necessary to deserialize the header fully.
         */</comment>
        <function><type><name>Header</name></type> <name>extractHeader</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>InetAddressAndPort</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>currentTimeNanos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <return>return <expr><ternary><condition><expr><name>version</name> <operator>&gt;=</operator> <name>VERSION_40</name></expr>
                 ?</condition><then> <expr><call><name>extractHeaderPost40</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>currentTimeNanos</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>
                 </then><else>: <expr><call><name>extractHeaderPre40</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>currentTimeNanos</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <specifier>static</specifier> <name>long</name></type> <name>getExpiresAtNanos</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>createdAtNanos</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>currentTimeNanos</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>expirationPeriodNanos</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>hasCrossNodeTimeout</name></name><argument_list>()</argument_list></call> <operator>||</operator> <name>createdAtNanos</name> <operator>&gt;</operator> <name>currentTimeNanos</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>createdAtNanos</name> <operator>=</operator> <name>currentTimeNanos</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <return>return <expr><name>createdAtNanos</name> <operator>+</operator> <name>expirationPeriodNanos</name></expr>;</return>
        </block_content>}</block></function>

        <comment type="block">/*
         * 4.0 ser/deser
         */</comment>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>serializeHeaderPost40</name><parameter_list>(<parameter><decl><type><name>Header</name></type> <name>header</name></decl></parameter>, <parameter><decl><type><name>DataOutputPlus</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeUnsignedVInt</name></name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// int cast cuts off the high-order half of the timestamp, which we can assume remains</comment>
            <comment type="line">// the same between now and when the recipient reconstructs it.</comment>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>approxTime</name><operator>.</operator><name>translate</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toMillisSinceEpoch</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>createdAtNanos</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeUnsignedVInt</name></name><argument_list>(<argument><expr><call><name><name>NANOSECONDS</name><operator>.</operator><name>toMillis</name></name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>expiresAtNanos</name></name> <operator>-</operator> <name><name>header</name><operator>.</operator><name>createdAtNanos</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeUnsignedVInt</name></name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>verb</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeUnsignedVInt</name></name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>serializeParams</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>params</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>Header</name></type> <name>deserializeHeaderPost40</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>InetAddressAndPort</name></type> <name>peer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>id</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readUnsignedVInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>currentTimeNanos</name> <init>= <expr><call><name><name>approxTime</name><operator>.</operator><name>now</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>MonotonicClockTranslation</name></type> <name>timeSnapshot</name> <init>= <expr><call><name><name>approxTime</name><operator>.</operator><name>translate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>creationTimeNanos</name> <init>= <expr><call><name>calculateCreationTimeNanos</name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>timeSnapshot</name></expr></argument>, <argument><expr><name>currentTimeNanos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>expiresAtNanos</name> <init>= <expr><call><name>getExpiresAtNanos</name><argument_list>(<argument><expr><name>creationTimeNanos</name></expr></argument>, <argument><expr><name>currentTimeNanos</name></expr></argument>, <argument><expr><call><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name><operator>.</operator><name>toNanos</name></name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readUnsignedVInt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Verb</name></type> <name>verb</name> <init>= <expr><call><name><name>Verb</name><operator>.</operator><name>fromId</name></name><argument_list>(<argument><expr><call><name><name>Ints</name><operator>.</operator><name>checkedCast</name></name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readUnsignedVInt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><call><name><name>Ints</name><operator>.</operator><name>checkedCast</name></name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readUnsignedVInt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ParamType</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>params</name> <init>= <expr><call><name>deserializeParams</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><operator>new</operator> <call><name>Header</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>verb</name></expr></argument>, <argument><expr><name>peer</name></expr></argument>, <argument><expr><name>creationTimeNanos</name></expr></argument>, <argument><expr><name>expiresAtNanos</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>skipHeaderPost40</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <expr_stmt><expr><call><name>skipUnsignedVInt</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// id</comment>
            <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>skipBytesFully</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// createdAt</comment>
            <expr_stmt><expr><call><name>skipUnsignedVInt</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// expiresIn</comment>
            <expr_stmt><expr><call><name>skipUnsignedVInt</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// verb</comment>
            <expr_stmt><expr><call><name>skipUnsignedVInt</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// flags</comment>
            <expr_stmt><expr><call><name>skipParamsPost40</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// params</comment>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>int</name></type> <name>serializedHeaderSizePost40</name><parameter_list>(<parameter><decl><type><name>Header</name></type> <name>header</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>sizeofUnsignedVInt</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>size</name> <operator>+=</operator> <name>CREATION_TIME_SIZE</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>sizeofUnsignedVInt</name><argument_list>(<argument><expr><call><name><name>NANOSECONDS</name><operator>.</operator><name>toMillis</name></name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>expiresAtNanos</name></name> <operator>-</operator> <name><name>header</name><operator>.</operator><name>createdAtNanos</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>sizeofUnsignedVInt</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>verb</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>sizeofUnsignedVInt</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>serializedParamsSize</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>params</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>Ints</name><operator>.</operator><name>checkedCast</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>Header</name></type> <name>extractHeaderPost40</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>InetAddressAndPort</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>currentTimeNanos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <decl_stmt><decl><type><name>MonotonicClockTranslation</name></type> <name>timeSnapshot</name> <init>= <expr><call><name><name>approxTime</name><operator>.</operator><name>translate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name><name>buf</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>long</name></type> <name>id</name> <init>= <expr><call><name>getUnsignedVInt</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>index</name> <operator>+=</operator> <call><name>computeUnsignedVIntSize</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>createdAtMillis</name> <init>= <expr><call><name><name>buf</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>index</name> <operator>+=</operator> <call><name>sizeof</name><argument_list>(<argument><expr><name>createdAtMillis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>long</name></type> <name>expiresInMillis</name> <init>= <expr><call><name>getUnsignedVInt</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>index</name> <operator>+=</operator> <call><name>computeUnsignedVIntSize</name><argument_list>(<argument><expr><name>expiresInMillis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>Verb</name></type> <name>verb</name> <init>= <expr><call><name><name>Verb</name><operator>.</operator><name>fromId</name></name><argument_list>(<argument><expr><call><name><name>Ints</name><operator>.</operator><name>checkedCast</name></name><argument_list>(<argument><expr><call><name>getUnsignedVInt</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>index</name> <operator>+=</operator> <call><name>computeUnsignedVIntSize</name><argument_list>(<argument><expr><name><name>verb</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><call><name><name>Ints</name><operator>.</operator><name>checkedCast</name></name><argument_list>(<argument><expr><call><name>getUnsignedVInt</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>index</name> <operator>+=</operator> <call><name>computeUnsignedVIntSize</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ParamType</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>params</name> <init>= <expr><call><name>extractParams</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>long</name></type> <name>createdAtNanos</name> <init>= <expr><call><name>calculateCreationTimeNanos</name><argument_list>(<argument><expr><name>createdAtMillis</name></expr></argument>, <argument><expr><name>timeSnapshot</name></expr></argument>, <argument><expr><name>currentTimeNanos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>expiresAtNanos</name> <init>= <expr><call><name>getExpiresAtNanos</name><argument_list>(<argument><expr><name>createdAtNanos</name></expr></argument>, <argument><expr><name>currentTimeNanos</name></expr></argument>, <argument><expr><call><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name><operator>.</operator><name>toNanos</name></name><argument_list>(<argument><expr><name>expiresInMillis</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <return>return <expr><operator>new</operator> <call><name>Header</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>verb</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>createdAtNanos</name></expr></argument>, <argument><expr><name>expiresAtNanos</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name>void</name></type> <name>serializePost40</name><parameter_list>(<parameter><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>DataOutputPlus</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <expr_stmt><expr><call><name>serializeHeaderPost40</name><argument_list>(<argument><expr><name><name>message</name><operator>.</operator><name>header</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeUnsignedVInt</name></name><argument_list>(<argument><expr><call><name><name>message</name><operator>.</operator><name>payloadSize</name></name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>message</name><operator>.</operator><name>getPayloadSerializer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>serialize</name><argument_list>(<argument><expr><name><name>message</name><operator>.</operator><name>payload</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>Message</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>deserializePost40</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>InetAddressAndPort</name></type> <name>peer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <decl_stmt><decl><type><name>Header</name></type> <name>header</name> <init>= <expr><call><name>deserializeHeaderPost40</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>peer</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>skipUnsignedVInt</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// payload size, not needed by payload deserializer</comment>
            <decl_stmt><decl><type><name>T</name></type> <name>payload</name> <init>= <expr><operator>(</operator><name>T</name><operator>)</operator> <call><name><name>header</name><operator>.</operator><name>verb</name><operator>.</operator><name>serializer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>deserialize</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><operator>new</operator> <call><name><name>Message</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>Message</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>deserializePost40</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>Header</name></type> <name>header</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <expr_stmt><expr><call><name>skipHeaderPost40</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>skipUnsignedVInt</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// payload size, not needed by payload deserializer</comment>
            <decl_stmt><decl><type><name>T</name></type> <name>payload</name> <init>= <expr><operator>(</operator><name>T</name><operator>)</operator> <call><name><name>header</name><operator>.</operator><name>verb</name><operator>.</operator><name>serializer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>deserialize</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><operator>new</operator> <call><name><name>Message</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name>int</name></type> <name>serializedSizePost40</name><parameter_list>(<parameter><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>serializedHeaderSizePost40</name><argument_list>(<argument><expr><name><name>message</name><operator>.</operator><name>header</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>payloadSize</name> <init>= <expr><call><name><name>message</name><operator>.</operator><name>payloadSize</name></name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>sizeofUnsignedVInt</name><argument_list>(<argument><expr><name>payloadSize</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>payloadSize</name></expr>;</expr_stmt>
            <return>return <expr><call><name><name>Ints</name><operator>.</operator><name>checkedCast</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>int</name></type> <name>inferMessageSizePost40</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>readerIndex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>readerLimit</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name>readerIndex</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>idSize</name> <init>= <expr><call><name>computeUnsignedVIntSize</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>readerLimit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>idSize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="line">// not enough bytes to read id</comment>
            <expr_stmt><expr><name>index</name> <operator>+=</operator> <name>idSize</name></expr>;</expr_stmt>

            <expr_stmt><expr><name>index</name> <operator>+=</operator> <name>CREATION_TIME_SIZE</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;</operator> <name>readerLimit</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>expirationSize</name> <init>= <expr><call><name>computeUnsignedVIntSize</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>readerLimit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>expirationSize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>index</name> <operator>+=</operator> <name>expirationSize</name></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>verbIdSize</name> <init>= <expr><call><name>computeUnsignedVIntSize</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>readerLimit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>verbIdSize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>index</name> <operator>+=</operator> <name>verbIdSize</name></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>flagsSize</name> <init>= <expr><call><name>computeUnsignedVIntSize</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>readerLimit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>flagsSize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>index</name> <operator>+=</operator> <name>flagsSize</name></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>paramsSize</name> <init>= <expr><call><name>extractParamsSizePost40</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>readerLimit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>paramsSize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>index</name> <operator>+=</operator> <name>paramsSize</name></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>long</name></type> <name>payloadSize</name> <init>= <expr><call><name>getUnsignedVInt</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>readerLimit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>payloadSize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>index</name> <operator>+=</operator> <call><name>computeUnsignedVIntSize</name><argument_list>(<argument><expr><name>payloadSize</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>payloadSize</name></expr>;</expr_stmt>

            <return>return <expr><name>index</name> <operator>-</operator> <name>readerIndex</name></expr>;</return>
        </block_content>}</block></function>

        <comment type="block">/*
         * legacy ser/deser
         */</comment>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>serializeHeaderPre40</name><parameter_list>(<parameter><decl><type><name>Header</name></type> <name>header</name></decl></parameter>, <parameter><decl><type><name>DataOutputPlus</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name>PROTOCOL_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>Ints</name><operator>.</operator><name>checkedCast</name></name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// int cast cuts off the high-order half of the timestamp, which we can assume remains</comment>
            <comment type="line">// the same between now and when the recipient reconstructs it.</comment>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>approxTime</name><operator>.</operator><name>translate</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toMillisSinceEpoch</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>createdAtNanos</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>inetAddressAndPortSerializer</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>from</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>header</name><operator>.</operator><name>verb</name><operator>.</operator><name>toPre40Verb</name></name><argument_list>()</argument_list></call><operator>.</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>serializeParams</name><argument_list>(<argument><expr><call><name>addFlagsToLegacyParams</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>params</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>Header</name></type> <name>deserializeHeaderPre40</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <expr_stmt><expr><call><name>validateLegacyProtocolMagic</name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>currentTimeNanos</name> <init>= <expr><call><name><name>approxTime</name><operator>.</operator><name>now</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>MonotonicClockTranslation</name></type> <name>timeSnapshot</name> <init>= <expr><call><name><name>approxTime</name><operator>.</operator><name>translate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>creationTimeNanos</name> <init>= <expr><call><name>calculateCreationTimeNanos</name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>timeSnapshot</name></expr></argument>, <argument><expr><name>currentTimeNanos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>InetAddressAndPort</name></type> <name>from</name> <init>= <expr><call><name><name>inetAddressAndPortSerializer</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Verb</name></type> <name>verb</name> <init>= <expr><call><name><name>Verb</name><operator>.</operator><name>fromId</name></name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ParamType</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>params</name> <init>= <expr><call><name>deserializeParams</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><call><name>removeFlagsFromLegacyParams</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><operator>new</operator> <call><name>Header</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>verb</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>creationTimeNanos</name></expr></argument>, <argument><expr><call><name><name>verb</name><operator>.</operator><name>expiresAtNanos</name></name><argument_list>(<argument><expr><name>creationTimeNanos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>PRE_40_MESSAGE_PREFIX_SIZE</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>;</decl_stmt> <comment type="line">// protocol magic + id + createdAt</comment>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>skipHeaderPre40</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>skipBytesFully</name></name><argument_list>(<argument><expr><name>PRE_40_MESSAGE_PREFIX_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// magic, id, createdAt</comment>
            <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>skipBytesFully</name></name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readByte</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>              <comment type="line">// from</comment>
            <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>skipBytesFully</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                          <comment type="line">// verb</comment>
            <expr_stmt><expr><call><name>skipParamsPre40</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                           <comment type="line">// params</comment>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>int</name></type> <name>serializedHeaderSizePre40</name><parameter_list>(<parameter><decl><type><name>Header</name></type> <name>header</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>size</name> <operator>+=</operator> <name>PRE_40_MESSAGE_PREFIX_SIZE</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>inetAddressAndPortSerializer</name><operator>.</operator><name>serializedSize</name></name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>from</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>sizeof</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>verb</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>serializedParamsSize</name><argument_list>(<argument><expr><call><name>addFlagsToLegacyParams</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>params</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>Ints</name><operator>.</operator><name>checkedCast</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>Header</name></type> <name>extractHeaderPre40</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>currentTimeNanos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <decl_stmt><decl><type><name>MonotonicClockTranslation</name></type> <name>timeSnapshot</name> <init>= <expr><call><name><name>approxTime</name><operator>.</operator><name>translate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name><name>buf</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>index</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <comment type="line">// protocol magic</comment>

            <decl_stmt><decl><type><name>long</name></type> <name>id</name> <init>= <expr><call><name><name>buf</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>index</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>createdAtMillis</name> <init>= <expr><call><name><name>buf</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>index</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>InetAddressAndPort</name></type> <name>from</name> <init>= <expr><call><name><name>inetAddressAndPortSerializer</name><operator>.</operator><name>extract</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>index</name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name><name>buf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>Verb</name></type> <name>verb</name> <init>= <expr><call><name><name>Verb</name><operator>.</operator><name>fromId</name></name><argument_list>(<argument><expr><call><name><name>buf</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>index</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

            <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ParamType</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>params</name> <init>= <expr><call><name>extractParams</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><call><name>removeFlagsFromLegacyParams</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>long</name></type> <name>createdAtNanos</name> <init>= <expr><call><name>calculateCreationTimeNanos</name><argument_list>(<argument><expr><name>createdAtMillis</name></expr></argument>, <argument><expr><name>timeSnapshot</name></expr></argument>, <argument><expr><name>currentTimeNanos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>expiresAtNanos</name> <init>= <expr><call><name><name>verb</name><operator>.</operator><name>expiresAtNanos</name></name><argument_list>(<argument><expr><name>createdAtNanos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <return>return <expr><operator>new</operator> <call><name>Header</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>verb</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>createdAtNanos</name></expr></argument>, <argument><expr><name>expiresAtNanos</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name>void</name></type> <name>serializePre40</name><parameter_list>(<parameter><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>DataOutputPlus</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>message</name><operator>.</operator><name>isFailureResponse</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>toPre40FailureResponse</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>serializeHeaderPre40</name><argument_list>(<argument><expr><name><name>message</name><operator>.</operator><name>header</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>message</name><operator>.</operator><name>payload</name></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>message</name><operator>.</operator><name>payload</name></name> <operator>!=</operator> <name><name>NoPayload</name><operator>.</operator><name>noPayload</name></name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>payloadSize</name> <init>= <expr><call><name><name>message</name><operator>.</operator><name>payloadSize</name></name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name>payloadSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>message</name><operator>.</operator><name>getPayloadSerializer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>serialize</name><argument_list>(<argument><expr><name><name>message</name><operator>.</operator><name>payload</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>Message</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>deserializePre40</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <decl_stmt><decl><type><name>Header</name></type> <name>header</name> <init>= <expr><call><name>deserializeHeaderPre40</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name>deserializePre40</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>Message</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>deserializePre40</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>Header</name></type> <name>header</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <return>return <expr><call><name>deserializePre40</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>Message</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>deserializePre40</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>Header</name></type> <name>header</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>skipHeader</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>skipHeader</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>skipHeaderPre40</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>payloadSize</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>T</name></type> <name>payload</name> <init>= <expr><call><name>deserializePayloadPre40</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><call><name>getPayloadSerializer</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>verb</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>from</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>payloadSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>message</name> <init>= <expr><operator>new</operator> <call><name><name>Message</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <return>return <expr><ternary><condition><expr><call><name><name>header</name><operator>.</operator><name>params</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name><name>ParamType</name><operator>.</operator><name>FAILURE_RESPONSE</name></name></expr></argument>)</argument_list></call></expr>
                 ?</condition><then> <expr><operator>(</operator><name><name>Message</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name>toPost40FailureResponse</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>
                 </then><else>: <expr><name>message</name></expr></else></ternary></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name>T</name></type> <name>deserializePayloadPre40</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name><name>IVersionedAsymmetricSerializer</name><argument_list type="generic">&lt;<argument><name>?</name></argument>, <argument><name>T</name></argument>&gt;</argument_list></name></type> <name>serializer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>payloadSize</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>payloadSize</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>serializer</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// if there's no deserializer for the verb, skip the payload bytes to leave</comment>
                <comment type="line">// the stream in a clean state (for the next message)</comment>
                <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>skipBytesFully</name></name><argument_list>(<argument><expr><name>payloadSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <return>return <expr><call><name><name>serializer</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name>int</name></type> <name>serializedSizePre40</name><parameter_list>(<parameter><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>message</name><operator>.</operator><name>isFailureResponse</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>toPre40FailureResponse</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>long</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>serializedHeaderSizePre40</name><argument_list>(<argument><expr><name><name>message</name><operator>.</operator><name>header</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>payloadSize</name> <init>= <expr><call><name><name>message</name><operator>.</operator><name>payloadSize</name></name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>sizeof</name><argument_list>(<argument><expr><name>payloadSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>size</name> <operator>+=</operator> <name>payloadSize</name></expr>;</expr_stmt>
            <return>return <expr><call><name><name>Ints</name><operator>.</operator><name>checkedCast</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>int</name></type> <name>inferMessageSizePre40</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>readerIndex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>readerLimit</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>InvalidLegacyProtocolMagic</name></expr></argument></throws>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name>readerIndex</name></expr></init></decl>;</decl_stmt>
            <comment type="line">// protocol magic</comment>
            <expr_stmt><expr><name>index</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;</operator> <name>readerLimit</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>validateLegacyProtocolMagic</name><argument_list>(<argument><expr><call><name><name>buf</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>index</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// rest of prefix</comment>
            <expr_stmt><expr><name>index</name> <operator>+=</operator> <name>PRE_40_MESSAGE_PREFIX_SIZE</name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>
            <comment type="line">// ip address</comment>
            <expr_stmt><expr><name>index</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;</operator> <name>readerLimit</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>index</name> <operator>+=</operator> <call><name><name>buf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// verb</comment>
            <expr_stmt><expr><name>index</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;</operator> <name>readerLimit</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>paramsSize</name> <init>= <expr><call><name>extractParamsSizePre40</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>readerLimit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>paramsSize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>index</name> <operator>+=</operator> <name>paramsSize</name></expr>;</expr_stmt>

            <comment type="line">// payload</comment>
            <expr_stmt><expr><name>index</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;</operator> <name>readerLimit</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>index</name> <operator>+=</operator> <call><name><name>buf</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>index</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><name>index</name> <operator>-</operator> <name>readerIndex</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>Message</name></type> <name>toPre40FailureResponse</name><parameter_list>(<parameter><decl><type><name>Message</name></type> <name>post40</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ParamType</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>params</name> <init>= <expr><operator>new</operator> <call><name><name>EnumMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>ParamType</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>putAll</name></name><argument_list>(<argument><expr><name><name>post40</name><operator>.</operator><name>header</name><operator>.</operator><name>params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ParamType</name><operator>.</operator><name>FAILURE_RESPONSE</name></name></expr></argument>, <argument><expr><name><name>LegacyFlag</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ParamType</name><operator>.</operator><name>FAILURE_REASON</name></name></expr></argument>, <argument><expr><name><name>post40</name><operator>.</operator><name>payload</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>Header</name></type> <name>header</name> <init>= <expr><operator>new</operator> <call><name>Header</name><argument_list>(<argument><expr><call><name><name>post40</name><operator>.</operator><name>id</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>post40</name><operator>.</operator><name>verb</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toPre40Verb</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>post40</name><operator>.</operator><name>from</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>post40</name><operator>.</operator><name>createdAtNanos</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>post40</name><operator>.</operator><name>expiresAtNanos</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><operator>new</operator> <call><name><name>Message</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name><name>NoPayload</name><operator>.</operator><name>noPayload</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name><name>Message</name><argument_list type="generic">&lt;<argument><name>RequestFailureReason</name></argument>&gt;</argument_list></name></type> <name>toPost40FailureResponse</name><parameter_list>(<parameter><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>pre40</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ParamType</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>params</name> <init>= <expr><operator>new</operator> <call><name><name>EnumMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>ParamType</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>putAll</name></name><argument_list>(<argument><expr><name><name>pre40</name><operator>.</operator><name>header</name><operator>.</operator><name>params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name><name>ParamType</name><operator>.</operator><name>FAILURE_RESPONSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>RequestFailureReason</name></type> <name>reason</name> <init>= <expr><operator>(</operator><name>RequestFailureReason</name><operator>)</operator> <call><name><name>params</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name><name>ParamType</name><operator>.</operator><name>FAILURE_REASON</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name>reason</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>reason</name> <operator>=</operator> <name><name>RequestFailureReason</name><operator>.</operator><name>UNKNOWN</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>Header</name></type> <name>header</name> <init>= <expr><operator>new</operator> <call><name>Header</name><argument_list>(<argument><expr><call><name><name>pre40</name><operator>.</operator><name>id</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Verb</name><operator>.</operator><name>FAILURE_RSP</name></name></expr></argument>, <argument><expr><call><name><name>pre40</name><operator>.</operator><name>from</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>pre40</name><operator>.</operator><name>createdAtNanos</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>pre40</name><operator>.</operator><name>expiresAtNanos</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>pre40</name><operator>.</operator><name>header</name><operator>.</operator><name>flags</name></name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><operator>new</operator> <call><name><name>Message</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <comment type="block">/*
         * created at + cross-node
         */</comment>

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>TIMESTAMP_WRAPAROUND_GRACE_PERIOD_START</name>  <init>= <expr><literal type="number">0xFFFFFFFFL</literal> <operator>-</operator> <call><name><name>MINUTES</name><operator>.</operator><name>toMillis</name></name><argument_list>(<argument><expr><literal type="number">15L</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>TIMESTAMP_WRAPAROUND_GRACE_PERIOD_END</name>    <init>=               <expr><call><name><name>MINUTES</name><operator>.</operator><name>toMillis</name></name><argument_list>(<argument><expr><literal type="number">15L</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <function><annotation>@<name>VisibleForTesting</name></annotation>
        <type><specifier>static</specifier> <name>long</name></type> <name>calculateCreationTimeNanos</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>messageTimestampMillis</name></decl></parameter>, <parameter><decl><type><name>MonotonicClockTranslation</name></type> <name>timeSnapshot</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>currentTimeNanos</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>currentTimeMillis</name> <init>= <expr><call><name><name>timeSnapshot</name><operator>.</operator><name>toMillisSinceEpoch</name></name><argument_list>(<argument><expr><name>currentTimeNanos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// Reconstruct the message construction time sent by the remote host (we sent only the lower 4 bytes, assuming the</comment>
            <comment type="line">// higher 4 bytes wouldn't change between the sender and receiver)</comment>
            <decl_stmt><decl><type><name>long</name></type> <name>highBits</name> <init>= <expr><name>currentTimeMillis</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFF00000000L</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>long</name></type> <name>sentLowBits</name> <init>= <expr><name>messageTimestampMillis</name> <operator>&amp;</operator> <literal type="number">0x00000000FFFFFFFFL</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>currentLowBits</name> <init>=   <expr><name>currentTimeMillis</name> <operator>&amp;</operator> <literal type="number">0x00000000FFFFFFFFL</literal></expr></init></decl>;</decl_stmt>

            <comment type="line">// if our sent bits occur within a grace period of a wrap around event,</comment>
            <comment type="line">// and our current bits are no more than the same grace period after a wrap around event,</comment>
            <comment type="line">// assume a wrap around has occurred, and deduct one highBit</comment>
            <if_stmt><if>if <condition>(      <expr><name>sentLowBits</name> <operator>&gt;</operator> <name>TIMESTAMP_WRAPAROUND_GRACE_PERIOD_START</name>
                      <operator>&amp;&amp;</operator> <name>currentLowBits</name> <operator>&lt;</operator> <name>TIMESTAMP_WRAPAROUND_GRACE_PERIOD_END</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>highBits</name> <operator>-=</operator> <literal type="number">0x0000000100000000L</literal></expr>;</expr_stmt>
            </block_content>}</block></if>
            <comment type="line">// if the message timestamp wrapped, but we still haven't, add one highBit</comment>
            <if type="elseif">else if <condition>(<expr><name><name>sentLowBits</name> <argument_list type="generic">&lt; <argument><name>TIMESTAMP_WRAPAROUND_GRACE_PERIOD_END</name>
                     <operator>&amp;&amp;</operator> <name>currentLowBits</name></argument> &gt;</argument_list></name> <name>TIMESTAMP_WRAPAROUND_GRACE_PERIOD_START</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>highBits</name> <operator>+=</operator> <literal type="number">0x0000000100000000L</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name>long</name></type> <name>sentTimeMillis</name> <init>= <expr><operator>(</operator><name>highBits</name> <operator>|</operator> <name>sentLowBits</name><operator>)</operator></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name>currentTimeMillis</name> <operator>-</operator> <name>sentTimeMillis</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name><name>MINUTES</name><operator>.</operator><name>toMillis</name></name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>noSpam1m</name><operator>.</operator><name>warn</name></name><argument_list>(<argument><expr><literal type="string">"Bad timestamp {} generated, overriding with currentTimeMillis = {}"</literal></expr></argument>, <argument><expr><name>sentTimeMillis</name></expr></argument>, <argument><expr><name>currentTimeMillis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>sentTimeMillis</name> <operator>=</operator> <name>currentTimeMillis</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <return>return <expr><call><name><name>timeSnapshot</name><operator>.</operator><name>fromMillisSinceEpoch</name></name><argument_list>(<argument><expr><name>sentTimeMillis</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <comment type="block">/*
         * param ser/deser
         */</comment>

        <function><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>ParamType</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>addFlagsToLegacyParams</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ParamType</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>params</name></expr>;</return></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ParamType</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>extended</name> <init>= <expr><operator>new</operator> <call><name><name>EnumMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>ParamType</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>extended</name><operator>.</operator><name>putAll</name></name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>MessageFlag</name><operator>.</operator><name>CALL_BACK_ON_FAILURE</name><operator>.</operator><name>isIn</name></name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>extended</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ParamType</name><operator>.</operator><name>FAILURE_CALLBACK</name></name></expr></argument>, <argument><expr><name><name>LegacyFlag</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>MessageFlag</name><operator>.</operator><name>TRACK_REPAIRED_DATA</name><operator>.</operator><name>isIn</name></name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>extended</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>ParamType</name><operator>.</operator><name>TRACK_REPAIRED_DATA</name></name></expr></argument>, <argument><expr><name><name>LegacyFlag</name><operator>.</operator><name>instance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <return>return <expr><name>extended</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>int</name></type> <name>removeFlagsFromLegacyParams</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ParamType</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>params</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <call><name><name>params</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name><name>ParamType</name><operator>.</operator><name>FAILURE_CALLBACK</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name><name>MessageFlag</name><operator>.</operator><name>CALL_BACK_ON_FAILURE</name><operator>.</operator><name>addTo</name></name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <call><name><name>params</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name><name>ParamType</name><operator>.</operator><name>TRACK_REPAIRED_DATA</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name><name>MessageFlag</name><operator>.</operator><name>TRACK_REPAIRED_DATA</name><operator>.</operator><name>addTo</name></name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <return>return <expr><name>flags</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>serializeParams</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ParamType</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>DataOutputPlus</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;=</operator> <name>VERSION_40</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeUnsignedVInt</name></name><argument_list>(<argument><expr><call><name><name>params</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>params</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>ParamType</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></name></type> <name>kv</name> <range>: <expr><call><name><name>params</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>ParamType</name></type> <name>type</name> <init>= <expr><call><name><name>kv</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;=</operator> <name>VERSION_40</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeUnsignedVInt</name></name><argument_list>(<argument><expr><name><name>type</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeUTF</name></name><argument_list>(<argument><expr><name><name>type</name><operator>.</operator><name>legacyAlias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <decl_stmt><decl><type><name>IVersionedSerializer</name></type> <name>serializer</name> <init>= <expr><name><name>type</name><operator>.</operator><name>serializer</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Object</name></type> <name>value</name> <init>= <expr><call><name><name>kv</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name><name>Ints</name><operator>.</operator><name>checkedCast</name></name><argument_list>(<argument><expr><call><name><name>serializer</name><operator>.</operator><name>serializedSize</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;=</operator> <name>VERSION_40</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeUnsignedVInt</name></name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt><expr><call><name><name>serializer</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>ParamType</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>deserializeParams</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><ternary><condition><expr><name>version</name> <operator>&gt;=</operator> <name>VERSION_40</name></expr> ?</condition><then> <expr><call><name><name>Ints</name><operator>.</operator><name>checkedCast</name></name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readUnsignedVInt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>NO_PARAMS</name></expr>;</return></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ParamType</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>params</name> <init>= <expr><operator>new</operator> <call><name><name>EnumMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>ParamType</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>ParamType</name></type> <name>type</name> <init>= <expr><ternary><condition><expr><name>version</name> <operator>&gt;=</operator> <name>VERSION_40</name></expr>
                    ?</condition><then> <expr><call><name><name>ParamType</name><operator>.</operator><name>lookUpById</name></name><argument_list>(<argument><expr><call><name><name>Ints</name><operator>.</operator><name>checkedCast</name></name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readUnsignedVInt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>
                    </then><else>: <expr><call><name><name>ParamType</name><operator>.</operator><name>lookUpByAlias</name></name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readUTF</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><ternary><condition><expr><name>version</name> <operator>&gt;=</operator> <name>VERSION_40</name></expr>
                    ?</condition><then> <expr><call><name><name>Ints</name><operator>.</operator><name>checkedCast</name></name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readUnsignedVInt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>
                    </then><else>: <expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name>type</name></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// Have to special case deserializer as pre-4.0 needs length to decode correctly</comment>
                    <if_stmt><if>if <condition>(<expr><name>version</name> <operator>&lt;</operator> <name>VERSION_40</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>==</operator> <name><name>ParamType</name><operator>.</operator><name>RESPOND_TO</name></name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><call><name><name>InetAddressAndPort</name><operator>.</operator><name>FwdFrmSerializer</name><operator>.</operator><name>fwdFrmSerializer</name><operator>.</operator><name>pre40DeserializeWithLength</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
                        <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><call><name><name>type</name><operator>.</operator><name>serializer</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>skipBytesFully</name></name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// forward compatibiliy with minor version changes</comment>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>

            <return>return <expr><name>params</name></expr>;</return>
        </block_content>}</block></function>

        <comment type="block">/*
         * Extract post-4.0 params map from a ByteBuffer without modifying it.
         */</comment>
        <function><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>ParamType</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>extractParams</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>readerIndex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>count</name> <init>= <expr><ternary><condition><expr><name>version</name> <operator>&gt;=</operator> <name>VERSION_40</name></expr> ?</condition><then> <expr><call><name>getUnsignedVInt</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>readerIndex</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>buf</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>readerIndex</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>NO_PARAMS</name></expr>;</return></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name> <init>= <expr><call><name><name>buf</name><operator>.</operator><name>position</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>buf</name><operator>.</operator><name>position</name></name><argument_list>(<argument><expr><name>readerIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <try>try <init>(<decl><type><name>DataInputBuffer</name></type> <name>in</name> <init>= <expr><operator>new</operator> <call><name>DataInputBuffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>)</init>
            <block>{<block_content>
                <return>return <expr><call><name>deserializeParams</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block>
            <finally>finally
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>buf</name><operator>.</operator><name>position</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></finally></try>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>skipParamsPost40</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name><name>Ints</name><operator>.</operator><name>checkedCast</name></name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readUnsignedVInt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <expr_stmt><expr><call><name>skipUnsignedVInt</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>skipBytesFully</name></name><argument_list>(<argument><expr><call><name><name>Ints</name><operator>.</operator><name>checkedCast</name></name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readUnsignedVInt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>skipParamsPre40</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>skipBytesFully</name></name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readShort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>skipBytesFully</name></name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>long</name></type> <name>serializedParamsSize</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>ParamType</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>size</name> <init>= <expr><ternary><condition><expr><name>version</name> <operator>&gt;=</operator> <name>VERSION_40</name></expr>
                      ?</condition><then> <expr><call><name>computeUnsignedVIntSize</name><argument_list>(<argument><expr><call><name><name>params</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>
                      </then><else>: <expr><call><name>sizeof</name><argument_list>(<argument><expr><call><name><name>params</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>ParamType</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></name></type> <name>kv</name> <range>: <expr><call><name><name>params</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>ParamType</name></type> <name>type</name> <init>= <expr><call><name><name>kv</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Object</name></type> <name>value</name> <init>= <expr><call><name><name>kv</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>long</name></type> <name>valueLength</name> <init>= <expr><call><name><name>type</name><operator>.</operator><name>serializer</name><operator>.</operator><name>serializedSize</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;=</operator> <name>VERSION_40</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>sizeofUnsignedVInt</name><argument_list>(<argument><expr><name><name>type</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>sizeofUnsignedVInt</name><argument_list>(<argument><expr><name>valueLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>sizeof</name><argument_list>(<argument><expr><name><name>type</name><operator>.</operator><name>legacyAlias</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt><expr><name>size</name> <operator>+=</operator> <name>valueLength</name></expr>;</expr_stmt>
            </block_content>}</block></for>

            <return>return <expr><name>size</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>int</name></type> <name>extractParamsSizePost40</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>readerIndex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>readerLimit</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name>readerIndex</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>long</name></type> <name>paramsCount</name> <init>= <expr><call><name>getUnsignedVInt</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>readerLimit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>paramsCount</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>index</name> <operator>+=</operator> <call><name>computeUnsignedVIntSize</name><argument_list>(<argument><expr><name>paramsCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>paramsCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>long</name></type> <name>type</name> <init>= <expr><call><name>getUnsignedVInt</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>readerLimit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>type</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>index</name> <operator>+=</operator> <call><name>computeUnsignedVIntSize</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>long</name></type> <name>length</name> <init>= <expr><call><name>getUnsignedVInt</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>readerLimit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>length</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>index</name> <operator>+=</operator> <call><name>computeUnsignedVIntSize</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>length</name></expr>;</expr_stmt>
            </block_content>}</block></for>

            <return>return <expr><name>index</name> <operator>-</operator> <name>readerIndex</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>int</name></type> <name>extractParamsSizePre40</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>readerIndex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>readerLimit</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name>readerIndex</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>index</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;</operator> <name>readerLimit</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>paramsCount</name> <init>= <expr><call><name><name>buf</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>index</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>paramsCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <comment type="line">// try to read length and skip to the end of the param name</comment>
                <expr_stmt><expr><name>index</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;</operator> <name>readerLimit</name></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>index</name> <operator>+=</operator> <call><name><name>buf</name><operator>.</operator><name>getShort</name></name><argument_list>(<argument><expr><name>index</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// try to read length and skip to the end of the param value</comment>
                <expr_stmt><expr><name>index</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;</operator> <name>readerLimit</name></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>index</name> <operator>+=</operator> <call><name><name>buf</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>index</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>

            <return>return <expr><name>index</name> <operator>-</operator> <name>readerIndex</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name>int</name></type> <name>payloadSize</name><parameter_list>(<parameter><decl><type><name><name>Message</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>payloadSize</name> <init>= <expr><ternary><condition><expr><name><name>message</name><operator>.</operator><name>payload</name></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>message</name><operator>.</operator><name>payload</name></name> <operator>!=</operator> <name><name>NoPayload</name><operator>.</operator><name>noPayload</name></name></expr>
                             ?</condition><then> <expr><call><name><name>message</name><operator>.</operator><name>getPayloadSerializer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>serializedSize</name><argument_list>(<argument><expr><name><name>message</name><operator>.</operator><name>payload</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>
                             </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>Ints</name><operator>.</operator><name>checkedCast</name></name><argument_list>(<argument><expr><name>payloadSize</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <function><type><specifier>private</specifier> <name><name>IVersionedAsymmetricSerializer</name><argument_list type="generic">&lt;<argument><name>T</name></argument>, <argument><name>?</name></argument>&gt;</argument_list></name></type> <name>getPayloadSerializer</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name>getPayloadSerializer</name><argument_list>(<argument><expr><call><name>verb</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>id</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>from</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// Verb#serializer() is null for legacy response messages. Once all Verbs with null handlers</comment>
    <comment type="line">// are removed in a future major, this method can be replaced with a call to verb.serializer.</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>In</name></parameter>,<parameter><name>Out</name></parameter>&gt;</parameter_list> <name><name>IVersionedAsymmetricSerializer</name><argument_list type="generic">&lt;<argument><name>In</name></argument>, <argument><name>Out</name></argument>&gt;</argument_list></name></type> <name>getPayloadSerializer</name><parameter_list>(<parameter><decl><type><name>Verb</name></type> <name>verb</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>InetAddressAndPort</name></type> <name>from</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><ternary><condition><expr><literal type="null">null</literal> <operator>!=</operator> <call><name><name>verb</name><operator>.</operator><name>serializer</name></name><argument_list>()</argument_list></call></expr>
             ?</condition><then> <expr><call><name><name>verb</name><operator>.</operator><name>serializer</name></name><argument_list>()</argument_list></call></expr>
             </then><else>: <expr><call><name>instance</name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>callbacks</name><operator>.</operator><name>responseSerializer</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>serializedSize30</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>serializedSize3014</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>serializedSize40</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Serialized size of the entire message, for the provided messaging version. Caches the calculated value.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>serializedSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <switch>switch <condition>(<expr><name>version</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>VERSION_30</name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><name>serializedSize30</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>serializedSize30</name> <operator>=</operator> <call><name><name>serializer</name><operator>.</operator><name>serializedSize</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>VERSION_30</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <return>return <expr><name>serializedSize30</name></expr>;</return>
            <case>case <expr><name>VERSION_3014</name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><name>serializedSize3014</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>serializedSize3014</name> <operator>=</operator> <call><name><name>serializer</name><operator>.</operator><name>serializedSize</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>VERSION_3014</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <return>return <expr><name>serializedSize3014</name></expr>;</return>
            <case>case <expr><name>VERSION_40</name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><name>serializedSize40</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>serializedSize40</name> <operator>=</operator> <call><name><name>serializer</name><operator>.</operator><name>serializedSize</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>VERSION_40</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <return>return <expr><name>serializedSize40</name></expr>;</return>
            <default>default:</default>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>payloadSize30</name>   <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>payloadSize3014</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>payloadSize40</name>   <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <function><type><specifier>private</specifier> <name>int</name></type> <name>payloadSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <switch>switch <condition>(<expr><name>version</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>VERSION_30</name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><name>payloadSize30</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>payloadSize30</name> <operator>=</operator> <call><name><name>serializer</name><operator>.</operator><name>payloadSize</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>VERSION_30</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <return>return <expr><name>payloadSize30</name></expr>;</return>
            <case>case <expr><name>VERSION_3014</name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><name>payloadSize3014</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>payloadSize3014</name> <operator>=</operator> <call><name><name>serializer</name><operator>.</operator><name>payloadSize</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>VERSION_3014</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <return>return <expr><name>payloadSize3014</name></expr>;</return>
            <case>case <expr><name>VERSION_40</name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><name>payloadSize40</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>payloadSize40</name> <operator>=</operator> <call><name><name>serializer</name><operator>.</operator><name>payloadSize</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>VERSION_40</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <return>return <expr><name>payloadSize40</name></expr>;</return>
            <default>default:</default>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <class><specifier>static</specifier> class <name>OversizedMessageException</name> <super_list><extends>extends <super><name>RuntimeException</name></super></extends></super_list>
    <block>{
        <constructor><name>OversizedMessageException</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><literal type="string">"Message of size "</literal> <operator>+</operator> <name>size</name> <operator>+</operator> <literal type="string">" bytes exceeds allowed maximum of "</literal> <operator>+</operator> <call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getInternodeMaxMessageSizeInBytes</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>
    }</block></class>
}</block></class>
</unit>
