<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/cassandra/src/java/org/apache/cassandra/cache/SerializingCacheProvider.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>cache</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>config</name><operator>.</operator><name>DatabaseDescriptor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>TypeSizes</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>db</name><operator>.</operator><name>partitions</name><operator>.</operator><name>CachedPartition</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>ISerializer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>DataInputPlus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>cassandra</name><operator>.</operator><name>io</name><operator>.</operator><name>util</name><operator>.</operator><name>DataOutputPlus</name></name>;</import>

<class><specifier>public</specifier> class <name>SerializingCacheProvider</name> <super_list><implements>implements <super><name><name>CacheProvider</name><argument_list type="generic">&lt;<argument><name>RowCacheKey</name></argument>, <argument><name>IRowCacheEntry</name></argument>&gt;</argument_list></name></super></implements></super_list>
<block>{
    <function><type><specifier>public</specifier> <name><name>ICache</name><argument_list type="generic">&lt;<argument><name>RowCacheKey</name></argument>, <argument><name>IRowCacheEntry</name></argument>&gt;</argument_list></name></type> <name>create</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>SerializingCache</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name><name>DatabaseDescriptor</name><operator>.</operator><name>getRowCacheSizeInMB</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>RowCacheSerializer</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// Package Public: used by external Row Cache plugins</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>RowCacheSerializer</name> <super_list><implements>implements <super><name><name>ISerializer</name><argument_list type="generic">&lt;<argument><name>IRowCacheEntry</name></argument>&gt;</argument_list></name></super></implements></super_list>
    <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<parameter><decl><type><name>IRowCacheEntry</name></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name>DataOutputPlus</name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <assert>assert <expr><name>entry</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert> <comment type="line">// unlike CFS we don't support nulls, since there is no need for that in the cache</comment>
            <decl_stmt><decl><type><name>boolean</name></type> <name>isSentinel</name> <init>= <expr><name>entry</name> <operator>instanceof</operator> <name>RowCacheSentinel</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeBoolean</name></name><argument_list>(<argument><expr><name>isSentinel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>isSentinel</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeLong</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>RowCacheSentinel</name><operator>)</operator> <name>entry</name><operator>)</operator><operator>.</operator><name>sentinelId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>CachedPartition</name><operator>.</operator><name>cacheSerializer</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><operator>(</operator><name>CachedPartition</name><operator>)</operator><name>entry</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>IRowCacheEntry</name></type> <name>deserialize</name><parameter_list>(<parameter><decl><type><name>DataInputPlus</name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
        <block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>isSentinel</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readBoolean</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>isSentinel</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><operator>new</operator> <call><name>RowCacheSentinel</name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readLong</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

            <return>return <expr><call><name><name>CachedPartition</name><operator>.</operator><name>cacheSerializer</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>long</name></type> <name>serializedSize</name><parameter_list>(<parameter><decl><type><name>IRowCacheEntry</name></type> <name>entry</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>TypeSizes</name><operator>.</operator><name>sizeof</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>entry</name> <operator>instanceof</operator> <name>RowCacheSentinel</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>TypeSizes</name><operator>.</operator><name>sizeof</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>RowCacheSentinel</name><operator>)</operator> <name>entry</name><operator>)</operator><operator>.</operator><name>sentinelId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>CachedPartition</name><operator>.</operator><name>cacheSerializer</name><operator>.</operator><name>serializedSize</name></name><argument_list>(<argument><expr><operator>(</operator><name>CachedPartition</name><operator>)</operator> <name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <return>return <expr><name>size</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
