<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/sunflow/src/org/sunflow/core/display/FrameDisplay.java"><package>package <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>display</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Dimension</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Toolkit</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>KeyAdapter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>KeyEvent</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>swing</name><operator>.</operator><name>JFrame</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>SunflowAPI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>Display</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>image</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>system</name><operator>.</operator><name>ImagePanel</name></name>;</import>

<class><specifier>public</specifier> class <name>FrameDisplay</name> <super_list><implements>implements <super><name>Display</name></super></implements></super_list> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>filename</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>RenderFrame</name></type> <name>frame</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>FrameDisplay</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>FrameDisplay</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>filename</name></name> <operator>=</operator> <name>filename</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>frame</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>imageBegin</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bucketSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>frame</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>frame</name> <operator>=</operator> <operator>new</operator> <call><name>RenderFrame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>frame</name><operator>.</operator><name>imagePanel</name><operator>.</operator><name>imageBegin</name></name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>bucketSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Dimension</name></type> <name>screenRes</name> <init>= <expr><call><name><name>Toolkit</name><operator>.</operator><name>getDefaultToolkit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getScreenSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>needFit</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>w</name> <operator>&gt;=</operator> <operator>(</operator><call><name><name>screenRes</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">200</literal><operator>)</operator> <operator>||</operator> <name>h</name> <operator>&gt;=</operator> <operator>(</operator><call><name><name>screenRes</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">200</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>frame</name><operator>.</operator><name>imagePanel</name><operator>.</operator><name>setPreferredSize</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Dimension</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>screenRes</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">200</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>screenRes</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">200</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>needFit</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>frame</name><operator>.</operator><name>imagePanel</name><operator>.</operator><name>setPreferredSize</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Dimension</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <expr_stmt><expr><call><name><name>frame</name><operator>.</operator><name>pack</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>frame</name><operator>.</operator><name>setLocationRelativeTo</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>frame</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>needFit</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>frame</name><operator>.</operator><name>imagePanel</name><operator>.</operator><name>fit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>frame</name><operator>.</operator><name>imagePanel</name><operator>.</operator><name>imageBegin</name></name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>bucketSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>imagePrepare</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>frame</name><operator>.</operator><name>imagePanel</name><operator>.</operator><name>imagePrepare</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>imageUpdate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name><name>Color</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>frame</name><operator>.</operator><name>imagePanel</name><operator>.</operator><name>imageUpdate</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>imageFill</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>frame</name><operator>.</operator><name>imagePanel</name><operator>.</operator><name>imageFill</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>imageEnd</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>frame</name><operator>.</operator><name>imagePanel</name><operator>.</operator><name>imageEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>filename</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>frame</name><operator>.</operator><name>imagePanel</name><operator>.</operator><name>save</name></name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"serial"</literal></expr></argument>)</argument_list></annotation>
    <specifier>private</specifier> <specifier>static</specifier> class <name>RenderFrame</name> <super_list><extends>extends <super><name>JFrame</name></super></extends></super_list> <block>{
        <decl_stmt><decl><type><name>ImagePanel</name></type> <name>imagePanel</name></decl>;</decl_stmt>

        <constructor><name>RenderFrame</name><parameter_list>()</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><literal type="string">"Sunflow v"</literal> <operator>+</operator> <name><name>SunflowAPI</name><operator>.</operator><name>VERSION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setDefaultCloseOperation</name><argument_list>(<argument><expr><name>EXIT_ON_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>addKeyListener</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>KeyAdapter</name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <type><specifier>public</specifier> <name>void</name></type> <name>keyPressed</name><parameter_list>(<parameter><decl><type><name>KeyEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>e</name><operator>.</operator><name>getKeyCode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>KeyEvent</name><operator>.</operator><name>VK_ESCAPE</name></name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>exit</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>imagePanel</name> <operator>=</operator> <operator>new</operator> <call><name>ImagePanel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setContentPane</name><argument_list>(<argument><expr><name>imagePanel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pack</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>
    }</block></class>
}</block></class></unit>
