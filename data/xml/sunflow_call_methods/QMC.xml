<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/sunflow/src/org/sunflow/math/QMC.java"><package>package <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>system</name><operator>.</operator><name>UI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>system</name><operator>.</operator><name>UI</name><operator>.</operator><name>Module</name></name>;</import>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>QMC</name> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>NUM</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>int</name><index>[]</index><index>[]</index></name></type> <name>SIGMA</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>NUM</name></expr>]</index><index>[]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>PRIMES</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>NUM</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <static>static <block>{<block_content>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>QMC</name></name></expr></argument>, <argument><expr><literal type="string">"Initializing Faure scrambling tables ..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// build table of first primes</comment>
        <expr_stmt><expr><name><name>PRIMES</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>PRIMES</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>PRIMES</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>nextPrime</name><argument_list>(<argument><expr><name><name>PRIMES</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>table</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name><name>PRIMES</name><index>[<expr><name><name>PRIMES</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>table</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>table</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>table</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>PRIMES</name><index>[<expr><name><name>PRIMES</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>prev</name> <init>= <expr><name><name>table</name><index>[<expr><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>prev</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>prev</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>prev</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name><name>prev</name><operator>.</operator><name>length</name></name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>prev</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>prev</name> <init>= <expr><name><name>table</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>med</name> <init>= <expr><operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>med</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>prev</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>prev</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;=</operator> <name>med</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
                <expr_stmt><expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>med</name></expr>]</index></name> <operator>=</operator> <name>med</name></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>med</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>med</name> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>prev</name><index>[<expr><name>j</name> <operator>+</operator> <name>med</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>prev</name><index>[<expr><name>j</name> <operator>+</operator> <name>med</name></expr>]</index></name> <operator>&gt;=</operator> <name>med</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>PRIMES</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><name><name>PRIMES</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>SIGMA</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name><name>table</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>SIGMA</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></static>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>nextPrime</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <name>p</name> <operator>+</operator> <operator>(</operator><name>p</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>div</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>isPrime</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>isPrime</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>div</name> <operator>*</operator> <name>div</name><operator>)</operator> <operator>&lt;=</operator> <name>p</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>isPrime</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>p</name> <operator>%</operator> <name>div</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>div</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            </block_content>}</block></while>
            <if_stmt><if>if <condition>(<expr><name>isPrime</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>p</name></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></function>

    <constructor><specifier>private</specifier> <name>QMC</name><parameter_list>()</parameter_list> <block>{<block_content>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>double</name></type> <name>riVDC</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>bits</name> <operator>=</operator> <operator>(</operator><name>bits</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>bits</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>bits</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>bits</name> <operator>&amp;</operator> <literal type="number">0x00ff00ff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>bits</name> <operator>&amp;</operator> <literal type="number">0xff00ff00</literal><operator>)</operator> <operator>&gt;&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>bits</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>bits</name> <operator>&amp;</operator> <literal type="number">0x0f0f0f0f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>bits</name> <operator>&amp;</operator> <literal type="number">0xf0f0f0f0</literal><operator>)</operator> <operator>&gt;&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>bits</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>bits</name> <operator>&amp;</operator> <literal type="number">0x33333333</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>bits</name> <operator>&amp;</operator> <literal type="number">0xcccccccc</literal><operator>)</operator> <operator>&gt;&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>bits</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>bits</name> <operator>&amp;</operator> <literal type="number">0x55555555</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>bits</name> <operator>&amp;</operator> <literal type="number">0xaaaaaaaa</literal><operator>)</operator> <operator>&gt;&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>bits</name> <operator>^=</operator> <name>r</name></expr>;</expr_stmt>
        <return>return <expr><operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><name>bits</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFL</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <literal type="number">0x100000000L</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>double</name></type> <name>riS</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>v</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name> <operator>&gt;&gt;&gt;=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>v</name> <operator>^=</operator> <name>v</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>r</name> <operator>^=</operator> <name>v</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
        <return>return <expr><operator>(</operator><name>double</name><operator>)</operator> <name>r</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <literal type="number">0x100000000L</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>double</name></type> <name>riLP</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>v</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name> <operator>&gt;&gt;&gt;=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>v</name> <operator>|=</operator> <name>v</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>r</name> <operator>^=</operator> <name>v</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
        <return>return <expr><operator>(</operator><name>double</name><operator>)</operator> <name>r</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <literal type="number">0x100000000L</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>halton</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// generalized Halton sequence</comment>
        <switch>switch <condition>(<expr><name>d</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><literal type="number">0</literal></expr>:</case> <block>{<block_content>
                <expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>i</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x00ff00ff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0xff00ff00</literal><operator>)</operator> <operator>&gt;&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x0f0f0f0f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0xf0f0f0f0</literal><operator>)</operator> <operator>&gt;&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x33333333</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0xcccccccc</literal><operator>)</operator> <operator>&gt;&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0x55555555</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0xaaaaaaaa</literal><operator>)</operator> <operator>&gt;&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
                <return>return <expr><operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFL</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <literal type="number">0x100000000L</literal></expr>;</return>
            </block_content>}</block>
            <case>case <expr><literal type="number">1</literal></expr>:</case> <block>{<block_content>
                <decl_stmt><decl><type><name>double</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>inv</name> <init>= <expr><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>p</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
                <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>inv</name></expr><operator>,</operator> <expr><name>n</name> <operator>=</operator> <name>i</name></expr>;</init> <condition><expr><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>p</name> <operator>*=</operator> <name>inv</name></expr><operator>,</operator> <expr><name>n</name> <operator>/=</operator> <literal type="number">3</literal></expr></incr>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>v</name> <operator>+=</operator> <operator>(</operator><name>n</name> <operator>%</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <name>p</name></expr>;</expr_stmt></block_content></block></for>
                <return>return <expr><name>v</name></expr>;</return>
            </block_content>}</block>
            <default>default:</default>
        </block_content>}</block></switch>
        <decl_stmt><decl><type><name>int</name></type> <name>base</name> <init>= <expr><name><name>PRIMES</name><index>[<expr><name>d</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>perm</name> <init>= <expr><name><name>SIGMA</name><index>[<expr><name>d</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>inv</name> <init>= <expr><literal type="number">1.0</literal> <operator>/</operator> <name>base</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>p</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>inv</name></expr><operator>,</operator> <expr><name>n</name> <operator>=</operator> <name>i</name></expr>;</init> <condition><expr><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>p</name> <operator>*=</operator> <name>inv</name></expr><operator>,</operator> <expr><name>n</name> <operator>/=</operator> <name>base</name></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name>v</name> <operator>+=</operator> <name><name>perm</name><index>[<expr><name>n</name> <operator>%</operator> <name>base</name></expr>]</index></name> <operator>*</operator> <name>p</name></expr>;</expr_stmt></block_content></block></for>
        <return>return <expr><name>v</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>mod1</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// assumes x &gt;= 0</comment>
        <return>return <expr><name>x</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>x</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>generateSigmaTable</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <assert>assert <expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>;</assert>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>sigma</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>digit</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>sigma</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><name>i</name></expr></init></decl>;</init> <condition><expr><name>bits</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>bits</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name>digit</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>bits</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name><name>sigma</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>digit</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <return>return <expr><name>sigma</name></expr>;</return>
    </block_content>}</block></function>
}</block></class></unit>
