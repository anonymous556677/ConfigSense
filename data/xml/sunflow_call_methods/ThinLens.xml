<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/sunflow/src/org/sunflow/core/camera/ThinLens.java"><package>package <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>camera</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>SunflowAPI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>CameraLens</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>ParameterList</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>Ray</name></name>;</import>

<class><specifier>public</specifier> class <name>ThinLens</name> <super_list><implements>implements <super><name>CameraLens</name></super></implements></super_list> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>au</name></decl>, <decl><type ref="prev"/><name>av</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>aspect</name></decl>, <decl><type ref="prev"/><name>fov</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>focusDistance</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>lensRadius</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>lensSides</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>lensRotation</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>lensRotationRadians</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ThinLens</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>focusDistance</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>lensRadius</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>fov</name> <operator>=</operator> <literal type="number">90</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>aspect</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>lensSides</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="line">// &lt; 3 means use circular lens</comment>
        <expr_stmt><expr><name>lensRotation</name> <operator>=</operator> <name>lensRotationRadians</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="line">// this rotates polygonal lenses</comment>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>ParameterList</name></type> <name>pl</name></decl></parameter>, <parameter><decl><type><name>SunflowAPI</name></type> <name>api</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// get parameters</comment>
        <expr_stmt><expr><name>fov</name> <operator>=</operator> <call><name><name>pl</name><operator>.</operator><name>getFloat</name></name><argument_list>(<argument><expr><literal type="string">"fov"</literal></expr></argument>, <argument><expr><name>fov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>aspect</name> <operator>=</operator> <call><name><name>pl</name><operator>.</operator><name>getFloat</name></name><argument_list>(<argument><expr><literal type="string">"aspect"</literal></expr></argument>, <argument><expr><name>aspect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>focusDistance</name> <operator>=</operator> <call><name><name>pl</name><operator>.</operator><name>getFloat</name></name><argument_list>(<argument><expr><literal type="string">"focus.distance"</literal></expr></argument>, <argument><expr><name>focusDistance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>lensRadius</name> <operator>=</operator> <call><name><name>pl</name><operator>.</operator><name>getFloat</name></name><argument_list>(<argument><expr><literal type="string">"lens.radius"</literal></expr></argument>, <argument><expr><name>lensRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>lensSides</name> <operator>=</operator> <call><name><name>pl</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"lens.sides"</literal></expr></argument>, <argument><expr><name>lensSides</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>lensRotation</name> <operator>=</operator> <call><name><name>pl</name><operator>.</operator><name>getFloat</name></name><argument_list>(<argument><expr><literal type="string">"lens.rotation"</literal></expr></argument>, <argument><expr><name>lensRotation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>update</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>update</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>au</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>tan</name></name><argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>toRadians</name></name><argument_list>(<argument><expr><name>fov</name> <operator>*</operator> <literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>*</operator> <name>focusDistance</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>av</name> <operator>=</operator> <name>au</name> <operator>/</operator> <name>aspect</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>lensRotationRadians</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>toRadians</name></name><argument_list>(<argument><expr><name>lensRotation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Ray</name></type> <name>getRay</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>imageWidth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>imageHeight</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>lensX</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>lensY</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>time</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>float</name></type> <name>du</name> <init>= <expr><operator>-</operator><name>au</name> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">2.0f</literal> <operator>*</operator> <name>au</name> <operator>*</operator> <name>x</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>imageWidth</name> <operator>-</operator> <literal type="number">1.0f</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>dv</name> <init>= <expr><operator>-</operator><name>av</name> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">2.0f</literal> <operator>*</operator> <name>av</name> <operator>*</operator> <name>y</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>imageHeight</name> <operator>-</operator> <literal type="number">1.0f</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>float</name></type> <name>eyeX</name></decl>, <decl><type ref="prev"/><name>eyeY</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>lensSides</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>double</name></type> <name>angle</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
            <comment type="line">// concentric map sampling</comment>
            <decl_stmt><decl><type><name>double</name></type> <name>r1</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>lensX</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>r2</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>lensY</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>r1</name> <operator>&gt;</operator> <operator>-</operator><name>r2</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>r1</name> <operator>&gt;</operator> <name>r2</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>r</name> <operator>=</operator> <name>r1</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>angle</name> <operator>=</operator> <literal type="number">0.25</literal> <operator>*</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name> <operator>*</operator> <name>r2</name> <operator>/</operator> <name>r1</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>r</name> <operator>=</operator> <name>r2</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>angle</name> <operator>=</operator> <literal type="number">0.25</literal> <operator>*</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name> <operator>*</operator> <operator>(</operator><literal type="number">2</literal> <operator>-</operator> <name>r1</name> <operator>/</operator> <name>r2</name><operator>)</operator></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>r1</name> <operator>&lt;</operator> <name>r2</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>-</operator><name>r1</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>angle</name> <operator>=</operator> <literal type="number">0.25</literal> <operator>*</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name> <operator>*</operator> <operator>(</operator><literal type="number">4</literal> <operator>+</operator> <name>r2</name> <operator>/</operator> <name>r1</name><operator>)</operator></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>-</operator><name>r2</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>r2</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>angle</name> <operator>=</operator> <literal type="number">0.25</literal> <operator>*</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name> <operator>*</operator> <operator>(</operator><literal type="number">6</literal> <operator>-</operator> <name>r1</name> <operator>/</operator> <name>r2</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
                    <else>else<block type="pseudo"><block_content>
                        <expr_stmt><expr><name>angle</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name>r</name> <operator>*=</operator> <name>lensRadius</name></expr>;</expr_stmt>
            <comment type="line">// point on the lens</comment>
            <expr_stmt><expr><name>eyeX</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>r</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>eyeY</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>r</name><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="line">// sample N-gon</comment>
            <comment type="line">// FIXME: this could use concentric sampling</comment>
            <expr_stmt><expr><name>lensY</name> <operator>*=</operator> <name>lensSides</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>side</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name>lensY</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>offs</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <name>lensY</name> <operator>-</operator> <name>side</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>dist</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>sqrt</name></name><argument_list>(<argument><expr><name>lensX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>a0</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><name>side</name> <operator>*</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name> <operator>*</operator> <literal type="number">2.0f</literal> <operator>/</operator> <name>lensSides</name> <operator>+</operator> <name>lensRotationRadians</name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>a1</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>side</name> <operator>+</operator> <literal type="number">1.0f</literal><operator>)</operator> <operator>*</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name> <operator>*</operator> <literal type="number">2.0f</literal> <operator>/</operator> <name>lensSides</name> <operator>+</operator> <name>lensRotationRadians</name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>eyeX</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><operator>(</operator><call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name>a0</name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <name>offs</name><operator>)</operator> <operator>+</operator> <call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>offs</name><operator>)</operator> <operator>*</operator> <name>dist</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>eyeY</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><operator>(</operator><call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><name>a0</name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <name>offs</name><operator>)</operator> <operator>+</operator> <call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>offs</name><operator>)</operator> <operator>*</operator> <name>dist</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>eyeX</name> <operator>*=</operator> <name>lensRadius</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>eyeY</name> <operator>*=</operator> <name>lensRadius</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>eyeZ</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">// point on the image plane</comment>
        <decl_stmt><decl><type><name>float</name></type> <name>dirX</name> <init>= <expr><name>du</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>dirY</name> <init>= <expr><name>dv</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>dirZ</name> <init>= <expr><operator>-</operator><name>focusDistance</name></expr></init></decl>;</decl_stmt>
        <comment type="line">// ray</comment>
        <return>return <expr><operator>new</operator> <call><name>Ray</name><argument_list>(<argument><expr><name>eyeX</name></expr></argument>, <argument><expr><name>eyeY</name></expr></argument>, <argument><expr><name>eyeZ</name></expr></argument>, <argument><expr><name>dirX</name> <operator>-</operator> <name>eyeX</name></expr></argument>, <argument><expr><name>dirY</name> <operator>-</operator> <name>eyeY</name></expr></argument>, <argument><expr><name>dirZ</name> <operator>-</operator> <name>eyeZ</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class></unit>
