<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/sunflow/src/org/sunflow/core/photonmap/GridPhotonMap.java"><package>package <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>photonmap</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>locks</name><operator>.</operator><name>ReentrantReadWriteLock</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>GlobalPhotonMapInterface</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>ShadingState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>image</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>BoundingBox</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>MathUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Point3</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Vector3</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>system</name><operator>.</operator><name>UI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>system</name><operator>.</operator><name>UI</name><operator>.</operator><name>Module</name></name>;</import>

<class><specifier>public</specifier> class <name>GridPhotonMap</name> <super_list><implements>implements <super><name>GlobalPhotonMapInterface</name></super></implements></super_list> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>numGather</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>gatherRadius</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>numStoredPhotons</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>nx</name></decl>, <decl><type ref="prev"/><name>ny</name></decl>, <decl><type ref="prev"/><name>nz</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>BoundingBox</name></type> <name>bounds</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>PhotonGroup</name><index>[]</index></name></type> <name>cellHash</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>hashSize</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>hashPrime</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ReentrantReadWriteLock</name></type> <name>rwl</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>numEmit</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>float</name></type> <name>NORMAL_THRESHOLD</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><literal type="number">10.0</literal> <operator>*</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name> <operator>/</operator> <literal type="number">180.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>PRIMES</name> <init>= <expr><block>{ <expr><literal type="number">11</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">109</literal></expr>, <expr><literal type="number">163</literal></expr>, <expr><literal type="number">251</literal></expr>, <expr><literal type="number">367</literal></expr>, <expr><literal type="number">557</literal></expr>,
            <expr><literal type="number">823</literal></expr>, <expr><literal type="number">1237</literal></expr>, <expr><literal type="number">1861</literal></expr>, <expr><literal type="number">2777</literal></expr>, <expr><literal type="number">4177</literal></expr>, <expr><literal type="number">6247</literal></expr>, <expr><literal type="number">9371</literal></expr>, <expr><literal type="number">21089</literal></expr>, <expr><literal type="number">31627</literal></expr>, <expr><literal type="number">47431</literal></expr>,
            <expr><literal type="number">71143</literal></expr>, <expr><literal type="number">106721</literal></expr>, <expr><literal type="number">160073</literal></expr>, <expr><literal type="number">240101</literal></expr>, <expr><literal type="number">360163</literal></expr>, <expr><literal type="number">540217</literal></expr>, <expr><literal type="number">810343</literal></expr>, <expr><literal type="number">1215497</literal></expr>,
            <expr><literal type="number">1823231</literal></expr>, <expr><literal type="number">2734867</literal></expr>, <expr><literal type="number">4102283</literal></expr>, <expr><literal type="number">6153409</literal></expr>, <expr><literal type="number">9230113</literal></expr>, <expr><literal type="number">13845163</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>GridPhotonMap</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>numEmit</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numGather</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>gatherRadius</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>numEmit</name></name> <operator>=</operator> <name>numEmit</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>numGather</name></name> <operator>=</operator> <name>numGather</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>gatherRadius</name></name> <operator>=</operator> <name>gatherRadius</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>numStoredPhotons</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>hashSize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="line">// number of unique IDs in the hash</comment>
        <expr_stmt><expr><name>rwl</name> <operator>=</operator> <operator>new</operator> <call><name>ReentrantReadWriteLock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>numEmit</name> <operator>=</operator> <literal type="number">100000</literal></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>prepare</name><parameter_list>(<parameter><decl><type><name>BoundingBox</name></type> <name>sceneBounds</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>bounds</name> <operator>=</operator> <operator>new</operator> <call><name>BoundingBox</name><argument_list>(<argument><expr><name>sceneBounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bounds</name><operator>.</operator><name>enlargeUlps</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Vector3</name></type> <name>w</name> <init>= <expr><call><name><name>bounds</name><operator>.</operator><name>getExtents</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>nx</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name><name>w</name><operator>.</operator><name>x</name></name> <operator>/</operator> <name>gatherRadius</name><operator>)</operator> <operator>+</operator> <literal type="number">0.5f</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ny</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name><name>w</name><operator>.</operator><name>y</name></name> <operator>/</operator> <name>gatherRadius</name><operator>)</operator> <operator>+</operator> <literal type="number">0.5f</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nz</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name><name>w</name><operator>.</operator><name>z</name></name> <operator>/</operator> <name>gatherRadius</name><operator>)</operator> <operator>+</operator> <literal type="number">0.5f</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>numCells</name> <init>= <expr><name>nx</name> <operator>*</operator> <name>ny</name> <operator>*</operator> <name>nz</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"Initializing grid photon map:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Resolution:  %dx%dx%d"</literal></expr></argument>, <argument><expr><name>nx</name></expr></argument>, <argument><expr><name>ny</name></expr></argument>, <argument><expr><name>nz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Total cells: %d"</literal></expr></argument>, <argument><expr><name>numCells</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>hashPrime</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>hashPrime</name> <operator>&lt;</operator> <name><name>PRIMES</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>hashPrime</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><name><name>PRIMES</name><index>[<expr><name>hashPrime</name></expr>]</index></name> <operator>&gt;</operator> <operator>(</operator><name>numCells</name> <operator>/</operator> <literal type="number">5</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
        <expr_stmt><expr><name>cellHash</name> <operator>=</operator> <operator>new</operator> <name><name>PhotonGroup</name><index>[<expr><name><name>PRIMES</name><index>[<expr><name>hashPrime</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Initial hash size: %d"</literal></expr></argument>, <argument><expr><name><name>cellHash</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>numStoredPhotons</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>store</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>power</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>diffuse</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// don't store on the wrong side of a surface</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>Vector3</name><operator>.</operator><name>dot</name></name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>Point3</name></type> <name>pt</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// outside grid bounds ?</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>bounds</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>Vector3</name></type> <name>ext</name> <init>= <expr><call><name><name>bounds</name><operator>.</operator><name>getExtents</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>ix</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>pt</name><operator>.</operator><name>x</name></name> <operator>-</operator> <call><name><name>bounds</name><operator>.</operator><name>getMinimum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>x</name><operator>)</operator> <operator>*</operator> <name>nx</name><operator>)</operator> <operator>/</operator> <name><name>ext</name><operator>.</operator><name>x</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>iy</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>pt</name><operator>.</operator><name>y</name></name> <operator>-</operator> <call><name><name>bounds</name><operator>.</operator><name>getMinimum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>y</name><operator>)</operator> <operator>*</operator> <name>ny</name><operator>)</operator> <operator>/</operator> <name><name>ext</name><operator>.</operator><name>y</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>iz</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>pt</name><operator>.</operator><name>z</name></name> <operator>-</operator> <call><name><name>bounds</name><operator>.</operator><name>getMinimum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>z</name><operator>)</operator> <operator>*</operator> <name>nz</name><operator>)</operator> <operator>/</operator> <name><name>ext</name><operator>.</operator><name>z</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>ix</name> <operator>=</operator> <call><name><name>MathUtils</name><operator>.</operator><name>clamp</name></name><argument_list>(<argument><expr><name>ix</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nx</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>iy</name> <operator>=</operator> <call><name><name>MathUtils</name><operator>.</operator><name>clamp</name></name><argument_list>(<argument><expr><name>iy</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ny</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>iz</name> <operator>=</operator> <call><name><name>MathUtils</name><operator>.</operator><name>clamp</name></name><argument_list>(<argument><expr><name>iz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nz</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><name>ix</name> <operator>+</operator> <name>iy</name> <operator>*</operator> <name>nx</name> <operator>+</operator> <name>iz</name> <operator>*</operator> <name>nx</name> <operator>*</operator> <name>ny</name></expr></init></decl>;</decl_stmt>
        <synchronized>synchronized <init>(<expr><name>this</name></expr>)</init> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>hid</name> <init>= <expr><name>id</name> <operator>%</operator> <name><name>cellHash</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PhotonGroup</name></type> <name>g</name> <init>= <expr><name><name>cellHash</name><index>[<expr><name>hid</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PhotonGroup</name></type> <name>last</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>hasID</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>g</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>g</name><operator>.</operator><name>id</name></name> <operator>==</operator> <name>id</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>hasID</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name><name>Vector3</name><operator>.</operator><name>dot</name></name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>normal</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>NORMAL_THRESHOLD</name></expr>)</condition><block type="pseudo"><block_content>
                        <break>break;</break></block_content></block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>last</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
            </block_content>}</block></while>
            <if_stmt><if>if <condition>(<expr><name>g</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>g</name> <operator>=</operator> <operator>new</operator> <call><name>PhotonGroup</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>last</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name><name>cellHash</name><index>[<expr><name>hid</name></expr>]</index></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><name><name>last</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasID</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>hashSize</name><operator>++</operator></expr>;</expr_stmt> <comment type="line">// we have not seen this ID before</comment>
                    <comment type="line">// resize hash if we have grown too large</comment>
                    <if_stmt><if>if <condition>(<expr><name>hashSize</name> <operator>&gt;</operator> <name><name>cellHash</name><operator>.</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>growPhotonHash</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>g</name><operator>.</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>flux</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>power</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>diffuse</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>diffuse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>numStoredPhotons</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></synchronized>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"Initializing photon grid ..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Photon hits:      %d"</literal></expr></argument>, <argument><expr><name>numStoredPhotons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Final hash size:  %d"</literal></expr></argument>, <argument><expr><name><name>cellHash</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>cells</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cellHash</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>PhotonGroup</name></type> <name>g</name> <init>= <expr><name><name>cellHash</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>g</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</condition> <incr><expr><name>g</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>diffuse</name><operator>.</operator><name>mul</name></name><argument_list>(<argument><expr><literal type="number">1.0f</literal> <operator>/</operator> <name><name>g</name><operator>.</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>cells</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Num photon cells: %d"</literal></expr></argument>, <argument><expr><name>cells</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>precomputeRadiance</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>includeDirect</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>includeCaustics</name></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>growPhotonHash</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// enlarge the hash size:</comment>
        <if_stmt><if>if <condition>(<expr><name>hashPrime</name> <operator>&gt;=</operator> <name><name>PRIMES</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name><name>PhotonGroup</name><index>[]</index></name></type> <name>temp</name> <init>= <expr><operator>new</operator> <name><name>PhotonGroup</name><index>[<expr><name><name>PRIMES</name><index>[<expr><operator>++</operator><name>hashPrime</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cellHash</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>PhotonGroup</name></type> <name>g</name> <init>= <expr><name><name>cellHash</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>g</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <comment type="line">// re-hash into the new table</comment>
                <decl_stmt><decl><type><name>int</name></type> <name>hid</name> <init>= <expr><name><name>g</name><operator>.</operator><name>id</name></name> <operator>%</operator> <name><name>temp</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>PhotonGroup</name></type> <name>last</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>PhotonGroup</name></type> <name>gn</name> <init>= <expr><name><name>temp</name><index>[<expr><name>hid</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>gn</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</condition> <incr><expr><name>gn</name> <operator>=</operator> <name><name>gn</name><operator>.</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>last</name> <operator>=</operator> <name>gn</name></expr>;</expr_stmt></block_content></block></for>
                <if_stmt><if>if <condition>(<expr><name>last</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name><name>temp</name><index>[<expr><name>hid</name></expr>]</index></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><name><name>last</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
                <decl_stmt><decl><type><name>PhotonGroup</name></type> <name>next</name> <init>= <expr><name><name>g</name><operator>.</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>g</name><operator>.</operator><name>next</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>g</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
            </block_content>}</block></while>
        </block_content>}</block></for>
        <expr_stmt><expr><name>cellHash</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>Color</name></type> <name>getRadiance</name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>bounds</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name><name>Color</name><operator>.</operator><name>BLACK</name></name></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>Vector3</name></type> <name>ext</name> <init>= <expr><call><name><name>bounds</name><operator>.</operator><name>getExtents</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>ix</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>.</operator><name>x</name></name> <operator>-</operator> <call><name><name>bounds</name><operator>.</operator><name>getMinimum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>x</name><operator>)</operator> <operator>*</operator> <name>nx</name><operator>)</operator> <operator>/</operator> <name><name>ext</name><operator>.</operator><name>x</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>iy</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>.</operator><name>y</name></name> <operator>-</operator> <call><name><name>bounds</name><operator>.</operator><name>getMinimum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>y</name><operator>)</operator> <operator>*</operator> <name>ny</name><operator>)</operator> <operator>/</operator> <name><name>ext</name><operator>.</operator><name>y</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>iz</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>.</operator><name>z</name></name> <operator>-</operator> <call><name><name>bounds</name><operator>.</operator><name>getMinimum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>z</name><operator>)</operator> <operator>*</operator> <name>nz</name><operator>)</operator> <operator>/</operator> <name><name>ext</name><operator>.</operator><name>z</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>ix</name> <operator>=</operator> <call><name><name>MathUtils</name><operator>.</operator><name>clamp</name></name><argument_list>(<argument><expr><name>ix</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nx</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>iy</name> <operator>=</operator> <call><name><name>MathUtils</name><operator>.</operator><name>clamp</name></name><argument_list>(<argument><expr><name>iy</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ny</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>iz</name> <operator>=</operator> <call><name><name>MathUtils</name><operator>.</operator><name>clamp</name></name><argument_list>(<argument><expr><name>iz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nz</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><name>ix</name> <operator>+</operator> <name>iy</name> <operator>*</operator> <name>nx</name> <operator>+</operator> <name>iz</name> <operator>*</operator> <name>nx</name> <operator>*</operator> <name>ny</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rwl</name><operator>.</operator><name>readLock</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>PhotonGroup</name></type> <name>center</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>PhotonGroup</name></type> <name>g</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><name>ix</name></expr></argument>, <argument><expr><name>iy</name></expr></argument>, <argument><expr><name>iz</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>g</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</condition> <incr><expr><name>g</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>g</name><operator>.</operator><name>id</name></name> <operator>==</operator> <name>id</name> <operator>&amp;&amp;</operator> <call><name><name>Vector3</name><operator>.</operator><name>dot</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>normal</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>NORMAL_THRESHOLD</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>g</name><operator>.</operator><name>radiance</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>center</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>Color</name></type> <name>r</name> <init>= <expr><call><name><name>g</name><operator>.</operator><name>radiance</name><operator>.</operator><name>copy</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>rwl</name><operator>.</operator><name>readLock</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>r</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <decl_stmt><decl><type><name>int</name></type> <name>vol</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>numPhotons</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>ndiff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Color</name></type> <name>irr</name> <init>= <expr><call><name><name>Color</name><operator>.</operator><name>black</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Color</name></type> <name>diff</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>center</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name><name>Color</name><operator>.</operator><name>black</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>z</name> <init>= <expr><name>iz</name> <operator>-</operator> <operator>(</operator><name>vol</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</init> <condition><expr><name>z</name> <operator>&lt;=</operator> <name>iz</name> <operator>+</operator> <operator>(</operator><name>vol</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>z</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name>iy</name> <operator>-</operator> <operator>(</operator><name>vol</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;=</operator> <name>iy</name> <operator>+</operator> <operator>(</operator><name>vol</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>ix</name> <operator>-</operator> <operator>(</operator><name>vol</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;=</operator> <name>ix</name> <operator>+</operator> <operator>(</operator><name>vol</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                        <decl_stmt><decl><type><name>int</name></type> <name>vid</name> <init>= <expr><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>nx</name> <operator>+</operator> <name>z</name> <operator>*</operator> <name>nx</name> <operator>*</operator> <name>ny</name></expr></init></decl>;</decl_stmt>
                        <for>for <control>(<init><decl><type><name>PhotonGroup</name></type> <name>g</name> <init>= <expr><call><name>get</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>g</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</condition> <incr><expr><name>g</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><name><name>g</name><operator>.</operator><name>id</name></name> <operator>==</operator> <name>vid</name> <operator>&amp;&amp;</operator> <call><name><name>Vector3</name><operator>.</operator><name>dot</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>normal</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>NORMAL_THRESHOLD</name></expr>)</condition> <block>{<block_content>
                                <expr_stmt><expr><name>numPhotons</name> <operator>+=</operator> <name><name>g</name><operator>.</operator><name>count</name></name></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name><name>irr</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>flux</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if_stmt><if>if <condition>(<expr><name>diff</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                                    <expr_stmt><expr><call><name><name>diff</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>diffuse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <expr_stmt><expr><name>ndiff</name><operator>++</operator></expr>;</expr_stmt>
                                </block_content>}</block></if></if_stmt>
                                <break>break;</break> <comment type="line">// only one valid group can be found,</comment>
                                <comment type="line">// skip the others</comment>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></for>
                </block_content>}</block></for>
            </block_content>}</block></for>
            <if_stmt><if>if <condition>(<expr><name>numPhotons</name> <operator>&gt;=</operator> <name>numGather</name> <operator>||</operator> <name>vol</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
                <comment type="line">// we have found enough photons</comment>
                <comment type="line">// cache irradiance and return</comment>
                <decl_stmt><decl><type><name>float</name></type> <name>area</name> <init>= <expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>vol</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">3.0f</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>ext</name><operator>.</operator><name>x</name></name> <operator>/</operator> <name>nx</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>ext</name><operator>.</operator><name>y</name></name> <operator>/</operator> <name>ny</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>ext</name><operator>.</operator><name>z</name></name> <operator>/</operator> <name>nz</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>area</name> <operator>*=</operator> <name>area</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>area</name> <operator>*=</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>irr</name><operator>.</operator><name>mul</name></name><argument_list>(<argument><expr><literal type="number">1.0f</literal> <operator>/</operator> <name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// upgrade lock manually</comment>
                <expr_stmt><expr><call><name><name>rwl</name><operator>.</operator><name>readLock</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>rwl</name><operator>.</operator><name>writeLock</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>center</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>ndiff</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>diff</name><operator>.</operator><name>mul</name></name><argument_list>(<argument><expr><literal type="number">1.0f</literal> <operator>/</operator> <name>ndiff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <expr_stmt><expr><name>center</name> <operator>=</operator> <operator>new</operator> <call><name>PhotonGroup</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>center</name><operator>.</operator><name>diffuse</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>center</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name><name>cellHash</name><index>[<expr><name>id</name> <operator>%</operator> <name><name>cellHash</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>cellHash</name><index>[<expr><name>id</name> <operator>%</operator> <name><name>cellHash</name><operator>.</operator><name>length</name></name></expr>]</index></name> <operator>=</operator> <name>center</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>irr</name><operator>.</operator><name>mul</name></name><argument_list>(<argument><expr><name><name>center</name><operator>.</operator><name>diffuse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>center</name><operator>.</operator><name>radiance</name></name> <operator>=</operator> <call><name><name>irr</name><operator>.</operator><name>copy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>rwl</name><operator>.</operator><name>writeLock</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>unlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// unlock write - done</comment>
                <return>return <expr><name>irr</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>vol</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>PhotonGroup</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// returns the list associated with the specified location</comment>
        <if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>x</name> <operator>&gt;=</operator> <name>nx</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>y</name> <operator>&gt;=</operator> <name>ny</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>z</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>z</name> <operator>&gt;=</operator> <name>nz</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><name><name>cellHash</name><index>[<expr><operator>(</operator><name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>nx</name> <operator>+</operator> <name>z</name> <operator>*</operator> <name>nx</name> <operator>*</operator> <name>ny</name><operator>)</operator> <operator>%</operator> <name><name>cellHash</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>private</specifier> class <name>PhotonGroup</name> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Vector3</name></type> <name>normal</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Color</name></type> <name>flux</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Color</name></type> <name>radiance</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Color</name></type> <name>diffuse</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PhotonGroup</name></type> <name>next</name></decl>;</decl_stmt>

        <constructor><name>PhotonGroup</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>normal</name> <operator>=</operator> <operator>new</operator> <call><name>Vector3</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>flux</name> <operator>=</operator> <call><name><name>Color</name><operator>.</operator><name>black</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>diffuse</name> <operator>=</operator> <call><name><name>Color</name><operator>.</operator><name>black</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>radiance</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>next</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></constructor>
    }</block></class>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>allowDiffuseBounced</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>allowReflectionBounced</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>allowRefractionBounced</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>numEmit</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>numEmit</name></expr>;</return>
    </block_content>}</block></function>
}</block></class></unit>
