<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/sunflow/src/org/sunflow/core/primitive/CornellBox.java"><package>package <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>primitive</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>SunflowAPI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>IntersectionState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>LightSample</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>LightSource</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>ParameterList</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>PrimitiveList</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>Ray</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>Shader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>ShadingState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>image</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>BoundingBox</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Matrix4</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>OrthoNormalBasis</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Point3</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Vector3</name></name>;</import>

<class><specifier>public</specifier> class <name>CornellBox</name> <super_list><implements>implements <super><name>PrimitiveList</name></super>, <super><name>Shader</name></super>, <super><name>LightSource</name></super></implements></super_list> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>minX</name></decl>, <decl><type ref="prev"/><name>minY</name></decl>, <decl><type ref="prev"/><name>minZ</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>maxX</name></decl>, <decl><type ref="prev"/><name>maxY</name></decl>, <decl><type ref="prev"/><name>maxZ</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Color</name></type> <name>left</name></decl>, <decl><type ref="prev"/><name>right</name></decl>, <decl><type ref="prev"/><name>top</name></decl>, <decl><type ref="prev"/><name>bottom</name></decl>, <decl><type ref="prev"/><name>back</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Color</name></type> <name>radiance</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>samples</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>lxmin</name></decl>, <decl><type ref="prev"/><name>lymin</name></decl>, <decl><type ref="prev"/><name>lxmax</name></decl>, <decl><type ref="prev"/><name>lymax</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>area</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>BoundingBox</name></type> <name>lightBounds</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>CornellBox</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>updateGeometry</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Point3</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Point3</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// cube colors</comment>
        <expr_stmt><expr><name>left</name> <operator>=</operator> <operator>new</operator> <call><name>Color</name><argument_list>(<argument><expr><literal type="number">0.80f</literal></expr></argument>, <argument><expr><literal type="number">0.25f</literal></expr></argument>, <argument><expr><literal type="number">0.25f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>right</name> <operator>=</operator> <operator>new</operator> <call><name>Color</name><argument_list>(<argument><expr><literal type="number">0.25f</literal></expr></argument>, <argument><expr><literal type="number">0.25f</literal></expr></argument>, <argument><expr><literal type="number">0.80f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Color</name></type> <name>gray</name> <init>= <expr><operator>new</operator> <call><name>Color</name><argument_list>(<argument><expr><literal type="number">0.70f</literal></expr></argument>, <argument><expr><literal type="number">0.70f</literal></expr></argument>, <argument><expr><literal type="number">0.70f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>top</name> <operator>=</operator> <name>bottom</name> <operator>=</operator> <name>back</name> <operator>=</operator> <name>gray</name></expr>;</expr_stmt>

        <comment type="line">// light source</comment>
        <expr_stmt><expr><name>radiance</name> <operator>=</operator> <name><name>Color</name><operator>.</operator><name>WHITE</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>samples</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>updateGeometry</name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>c0</name></decl></parameter>, <parameter><decl><type><name>Point3</name></type> <name>c1</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// figure out cube extents</comment>
        <expr_stmt><expr><name>lightBounds</name> <operator>=</operator> <operator>new</operator> <call><name>BoundingBox</name><argument_list>(<argument><expr><name>c0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>lightBounds</name><operator>.</operator><name>include</name></name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// cube extents</comment>
        <expr_stmt><expr><name>minX</name> <operator>=</operator> <call><name><name>lightBounds</name><operator>.</operator><name>getMinimum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>minY</name> <operator>=</operator> <call><name><name>lightBounds</name><operator>.</operator><name>getMinimum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>minZ</name> <operator>=</operator> <call><name><name>lightBounds</name><operator>.</operator><name>getMinimum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>z</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>maxX</name> <operator>=</operator> <call><name><name>lightBounds</name><operator>.</operator><name>getMaximum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>maxY</name> <operator>=</operator> <call><name><name>lightBounds</name><operator>.</operator><name>getMaximum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>maxZ</name> <operator>=</operator> <call><name><name>lightBounds</name><operator>.</operator><name>getMaximum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>z</name></expr>;</expr_stmt>

        <comment type="line">// work around epsilon problems for light test</comment>
        <expr_stmt><expr><call><name><name>lightBounds</name><operator>.</operator><name>enlargeUlps</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// light source geometry</comment>
        <expr_stmt><expr><name>lxmin</name> <operator>=</operator> <name>maxX</name> <operator>/</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>minX</name> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>lxmax</name> <operator>=</operator> <name>minX</name> <operator>/</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>maxX</name> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>lymin</name> <operator>=</operator> <name>maxY</name> <operator>/</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>minY</name> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>lymax</name> <operator>=</operator> <name>minY</name> <operator>/</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>maxY</name> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>area</name> <operator>=</operator> <operator>(</operator><name>lxmax</name> <operator>-</operator> <name>lxmin</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>lymax</name> <operator>-</operator> <name>lymin</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>ParameterList</name></type> <name>pl</name></decl></parameter>, <parameter><decl><type><name>SunflowAPI</name></type> <name>api</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Point3</name></type> <name>corner0</name> <init>= <expr><call><name><name>pl</name><operator>.</operator><name>getPoint</name></name><argument_list>(<argument><expr><literal type="string">"corner0"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Point3</name></type> <name>corner1</name> <init>= <expr><call><name><name>pl</name><operator>.</operator><name>getPoint</name></name><argument_list>(<argument><expr><literal type="string">"corner1"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>corner0</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>corner1</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>updateGeometry</name><argument_list>(<argument><expr><name>corner0</name></expr></argument>, <argument><expr><name>corner1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// shader colors</comment>
        <expr_stmt><expr><name>left</name> <operator>=</operator> <call><name><name>pl</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><literal type="string">"leftColor"</literal></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>right</name> <operator>=</operator> <call><name><name>pl</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><literal type="string">"rightColor"</literal></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>top</name> <operator>=</operator> <call><name><name>pl</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><literal type="string">"topColor"</literal></expr></argument>, <argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bottom</name> <operator>=</operator> <call><name><name>pl</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><literal type="string">"bottomColor"</literal></expr></argument>, <argument><expr><name>bottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>back</name> <operator>=</operator> <call><name><name>pl</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><literal type="string">"backColor"</literal></expr></argument>, <argument><expr><name>back</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// light</comment>
        <expr_stmt><expr><name>radiance</name> <operator>=</operator> <call><name><name>pl</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><literal type="string">"radiance"</literal></expr></argument>, <argument><expr><name>radiance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>samples</name> <operator>=</operator> <call><name><name>pl</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"samples"</literal></expr></argument>, <argument><expr><name>samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>SunflowAPI</name></type> <name>api</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// register with the api properly</comment>
        <expr_stmt><expr><call><name><name>api</name><operator>.</operator><name>geometry</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>api</name><operator>.</operator><name>shader</name></name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <literal type="string">".shader"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>api</name><operator>.</operator><name>parameter</name></name><argument_list>(<argument><expr><literal type="string">"shaders"</literal></expr></argument>, <argument><expr><name>name</name> <operator>+</operator> <literal type="string">".shader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>api</name><operator>.</operator><name>instance</name></name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <literal type="string">".instance"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>api</name><operator>.</operator><name>light</name></name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <literal type="string">".light"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>BoundingBox</name></type> <name>getBounds</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>lightBounds</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>float</name></type> <name>getBound</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><literal type="number">0</literal></expr>:</case>
                <return>return <expr><name>minX</name></expr>;</return>
            <case>case <expr><literal type="number">1</literal></expr>:</case>
                <return>return <expr><name>maxX</name></expr>;</return>
            <case>case <expr><literal type="number">2</literal></expr>:</case>
                <return>return <expr><name>minY</name></expr>;</return>
            <case>case <expr><literal type="number">3</literal></expr>:</case>
                <return>return <expr><name>maxY</name></expr>;</return>
            <case>case <expr><literal type="number">4</literal></expr>:</case>
                <return>return <expr><name>minZ</name></expr>;</return>
            <case>case <expr><literal type="number">5</literal></expr>:</case>
                <return>return <expr><name>maxZ</name></expr>;</return>
            <default>default:</default>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>intersects</name><parameter_list>(<parameter><decl><type><name>BoundingBox</name></type> <name>box</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// this could be optimized</comment>
        <decl_stmt><decl><type><name>BoundingBox</name></type> <name>b</name> <init>= <expr><operator>new</operator> <call><name>BoundingBox</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>include</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Point3</name><argument_list>(<argument><expr><name>minX</name></expr></argument>, <argument><expr><name>minY</name></expr></argument>, <argument><expr><name>minZ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>include</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Point3</name><argument_list>(<argument><expr><name>maxX</name></expr></argument>, <argument><expr><name>maxY</name></expr></argument>, <argument><expr><name>maxZ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>b</name><operator>.</operator><name>intersects</name></name><argument_list>(<argument><expr><name>box</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// the box is overlapping or enclosed</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>b</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Point3</name><argument_list>(<argument><expr><call><name><name>box</name><operator>.</operator><name>getMinimum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>x</name></expr></argument>, <argument><expr><call><name><name>box</name><operator>.</operator><name>getMinimum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>y</name></expr></argument>, <argument><expr><call><name><name>box</name><operator>.</operator><name>getMinimum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>z</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>b</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Point3</name><argument_list>(<argument><expr><call><name><name>box</name><operator>.</operator><name>getMinimum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>x</name></expr></argument>, <argument><expr><call><name><name>box</name><operator>.</operator><name>getMinimum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>y</name></expr></argument>, <argument><expr><call><name><name>box</name><operator>.</operator><name>getMaximum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>z</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>b</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Point3</name><argument_list>(<argument><expr><call><name><name>box</name><operator>.</operator><name>getMinimum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>x</name></expr></argument>, <argument><expr><call><name><name>box</name><operator>.</operator><name>getMaximum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>y</name></expr></argument>, <argument><expr><call><name><name>box</name><operator>.</operator><name>getMinimum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>z</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>b</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Point3</name><argument_list>(<argument><expr><call><name><name>box</name><operator>.</operator><name>getMinimum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>x</name></expr></argument>, <argument><expr><call><name><name>box</name><operator>.</operator><name>getMaximum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>y</name></expr></argument>, <argument><expr><call><name><name>box</name><operator>.</operator><name>getMaximum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>z</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>b</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Point3</name><argument_list>(<argument><expr><call><name><name>box</name><operator>.</operator><name>getMaximum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>x</name></expr></argument>, <argument><expr><call><name><name>box</name><operator>.</operator><name>getMinimum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>y</name></expr></argument>, <argument><expr><call><name><name>box</name><operator>.</operator><name>getMinimum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>z</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>b</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Point3</name><argument_list>(<argument><expr><call><name><name>box</name><operator>.</operator><name>getMaximum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>x</name></expr></argument>, <argument><expr><call><name><name>box</name><operator>.</operator><name>getMinimum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>y</name></expr></argument>, <argument><expr><call><name><name>box</name><operator>.</operator><name>getMaximum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>z</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>b</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Point3</name><argument_list>(<argument><expr><call><name><name>box</name><operator>.</operator><name>getMaximum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>x</name></expr></argument>, <argument><expr><call><name><name>box</name><operator>.</operator><name>getMaximum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>y</name></expr></argument>, <argument><expr><call><name><name>box</name><operator>.</operator><name>getMinimum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>z</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>b</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Point3</name><argument_list>(<argument><expr><call><name><name>box</name><operator>.</operator><name>getMaximum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>x</name></expr></argument>, <argument><expr><call><name><name>box</name><operator>.</operator><name>getMaximum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>y</name></expr></argument>, <argument><expr><call><name><name>box</name><operator>.</operator><name>getMaximum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>z</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
            <comment type="line">// all vertices of the box are inside - the surface of the box is</comment>
            <comment type="line">// not intersected</comment>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>prepareShadingState</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getRay</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPoint</name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>getPrimitiveID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><literal type="number">0</literal></expr>:</case>
                <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>set</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Vector3</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="number">1</literal></expr>:</case>
                <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>set</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Vector3</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="number">2</literal></expr>:</case>
                <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>set</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Vector3</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="number">3</literal></expr>:</case>
                <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>set</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Vector3</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="number">4</literal></expr>:</case>
                <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>set</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Vector3</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="number">5</literal></expr>:</case>
                <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>set</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Vector3</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>set</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Vector3</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </block_content>}</block></switch>
        <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getGeoNormal</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>set</name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>setBasis</name></name><argument_list>(<argument><expr><call><name><name>OrthoNormalBasis</name><operator>.</operator><name>makeFromW</name></name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>setShader</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>intersectPrimitive</name><parameter_list>(<parameter><decl><type><name>Ray</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>primID</name></decl></parameter>, <parameter><decl><type><name>IntersectionState</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>float</name></type> <name>intervalMin</name> <init>= <expr><name><name>Float</name><operator>.</operator><name>NEGATIVE_INFINITY</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>intervalMax</name> <init>= <expr><name><name>Float</name><operator>.</operator><name>POSITIVE_INFINITY</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>orgX</name> <init>= <expr><name><name>r</name><operator>.</operator><name>ox</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>invDirX</name> <init>= <expr><literal type="number">1</literal> <operator>/</operator> <name><name>r</name><operator>.</operator><name>dx</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>t1</name> <operator>=</operator> <operator>(</operator><name>minX</name> <operator>-</operator> <name>orgX</name><operator>)</operator> <operator>*</operator> <name>invDirX</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>(</operator><name>maxX</name> <operator>-</operator> <name>orgX</name><operator>)</operator> <operator>*</operator> <name>invDirX</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>sideIn</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>sideOut</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>invDirX</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>t1</name> <operator>&gt;</operator> <name>intervalMin</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>intervalMin</name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>sideIn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>t2</name> <operator>&lt;</operator> <name>intervalMax</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>intervalMax</name> <operator>=</operator> <name>t2</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>sideOut</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>t2</name> <operator>&gt;</operator> <name>intervalMin</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>intervalMin</name> <operator>=</operator> <name>t2</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>sideIn</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>t1</name> <operator>&lt;</operator> <name>intervalMax</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>intervalMax</name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>sideOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>intervalMin</name> <operator>&gt;</operator> <name>intervalMax</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>orgY</name> <init>= <expr><name><name>r</name><operator>.</operator><name>oy</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>invDirY</name> <init>= <expr><literal type="number">1</literal> <operator>/</operator> <name><name>r</name><operator>.</operator><name>dy</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>t1</name> <operator>=</operator> <operator>(</operator><name>minY</name> <operator>-</operator> <name>orgY</name><operator>)</operator> <operator>*</operator> <name>invDirY</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>(</operator><name>maxY</name> <operator>-</operator> <name>orgY</name><operator>)</operator> <operator>*</operator> <name>invDirY</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>invDirY</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>t1</name> <operator>&gt;</operator> <name>intervalMin</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>intervalMin</name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>sideIn</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>t2</name> <operator>&lt;</operator> <name>intervalMax</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>intervalMax</name> <operator>=</operator> <name>t2</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>sideOut</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>t2</name> <operator>&gt;</operator> <name>intervalMin</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>intervalMin</name> <operator>=</operator> <name>t2</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>sideIn</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>t1</name> <operator>&lt;</operator> <name>intervalMax</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>intervalMax</name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>sideOut</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>intervalMin</name> <operator>&gt;</operator> <name>intervalMax</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>orgZ</name> <init>= <expr><name><name>r</name><operator>.</operator><name>oz</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>invDirZ</name> <init>= <expr><literal type="number">1</literal> <operator>/</operator> <name><name>r</name><operator>.</operator><name>dz</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>t1</name> <operator>=</operator> <operator>(</operator><name>minZ</name> <operator>-</operator> <name>orgZ</name><operator>)</operator> <operator>*</operator> <name>invDirZ</name></expr>;</expr_stmt> <comment type="line">// no front wall</comment>
        <expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>(</operator><name>maxZ</name> <operator>-</operator> <name>orgZ</name><operator>)</operator> <operator>*</operator> <name>invDirZ</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>invDirZ</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>t1</name> <operator>&gt;</operator> <name>intervalMin</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>intervalMin</name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>sideIn</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>t2</name> <operator>&lt;</operator> <name>intervalMax</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>intervalMax</name> <operator>=</operator> <name>t2</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>sideOut</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>t2</name> <operator>&gt;</operator> <name>intervalMin</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>intervalMin</name> <operator>=</operator> <name>t2</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>sideIn</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>t1</name> <operator>&lt;</operator> <name>intervalMax</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>intervalMax</name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>sideOut</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>intervalMin</name> <operator>&gt;</operator> <name>intervalMax</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
        <assert>assert <expr><name>sideIn</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</assert>
        <assert>assert <expr><name>sideOut</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</assert>
        <comment type="line">// can't hit minY wall, there is none</comment>
        <if_stmt><if>if <condition>(<expr><name>sideIn</name> <operator>!=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name><name>r</name><operator>.</operator><name>isInside</name></name><argument_list>(<argument><expr><name>intervalMin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>setMax</name></name><argument_list>(<argument><expr><name>intervalMin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>setIntersection</name></name><argument_list>(<argument><expr><name>sideIn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sideOut</name> <operator>!=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name><name>r</name><operator>.</operator><name>isInside</name></name><argument_list>(<argument><expr><name>intervalMax</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>setMax</name></name><argument_list>(<argument><expr><name>intervalMax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>setIntersection</name></name><argument_list>(<argument><expr><name>sideOut</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Color</name></type> <name>getRadiance</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>side</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>getPrimitiveID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Color</name></type> <name>kd</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>side</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><literal type="number">0</literal></expr>:</case>
                <expr_stmt><expr><name>kd</name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="number">1</literal></expr>:</case>
                <expr_stmt><expr><name>kd</name> <operator>=</operator> <name>right</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="number">3</literal></expr>:</case>
                <expr_stmt><expr><name>kd</name> <operator>=</operator> <name>back</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="number">4</literal></expr>:</case>
                <expr_stmt><expr><name>kd</name> <operator>=</operator> <name>bottom</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="number">5</literal></expr>:</case>
                <decl_stmt><decl><type><name>float</name></type> <name>lx</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call><operator>.</operator><name>x</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>float</name></type> <name>ly</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call><operator>.</operator><name>y</name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>lx</name> <operator>&gt;=</operator> <name>lxmin</name> <operator>&amp;&amp;</operator> <name>lx</name> <operator>&lt;</operator> <name>lxmax</name> <operator>&amp;&amp;</operator> <name>ly</name> <operator>&gt;=</operator> <name>lymin</name> <operator>&amp;&amp;</operator> <name>ly</name> <operator>&lt;</operator> <name>lymax</name> <operator>&amp;&amp;</operator> <call><name><name>state</name><operator>.</operator><name>getRay</name></name><argument_list>()</argument_list></call><operator>.</operator><name>dz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><ternary><condition><expr><call><name><name>state</name><operator>.</operator><name>includeLights</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>radiance</name></expr> </then><else>: <expr><name><name>Color</name><operator>.</operator><name>BLACK</name></name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>kd</name> <operator>=</operator> <name>top</name></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <assert>assert <expr><literal type="boolean">false</literal></expr>;</assert>
        </block_content>}</block></switch>
        <comment type="line">// make sure we are on the right side of the material</comment>
        <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>faceforward</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// setup lighting</comment>
        <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>initLightSamples</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>initCausticSamples</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>state</name><operator>.</operator><name>diffuse</name></name><argument_list>(<argument><expr><name>kd</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>scatterPhoton</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>power</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>side</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>getPrimitiveID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Color</name></type> <name>kd</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>side</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><literal type="number">0</literal></expr>:</case>
                <expr_stmt><expr><name>kd</name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="number">1</literal></expr>:</case>
                <expr_stmt><expr><name>kd</name> <operator>=</operator> <name>right</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="number">3</literal></expr>:</case>
                <expr_stmt><expr><name>kd</name> <operator>=</operator> <name>back</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="number">4</literal></expr>:</case>
                <expr_stmt><expr><name>kd</name> <operator>=</operator> <name>bottom</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="number">5</literal></expr>:</case>
                <decl_stmt><decl><type><name>float</name></type> <name>lx</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call><operator>.</operator><name>x</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>float</name></type> <name>ly</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call><operator>.</operator><name>y</name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>lx</name> <operator>&gt;=</operator> <name>lxmin</name> <operator>&amp;&amp;</operator> <name>lx</name> <operator>&lt;</operator> <name>lxmax</name> <operator>&amp;&amp;</operator> <name>ly</name> <operator>&gt;=</operator> <name>lymin</name> <operator>&amp;&amp;</operator> <name>ly</name> <operator>&lt;</operator> <name>lymax</name> <operator>&amp;&amp;</operator> <call><name><name>state</name><operator>.</operator><name>getRay</name></name><argument_list>()</argument_list></call><operator>.</operator><name>dz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <return>return;</return></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>kd</name> <operator>=</operator> <name>top</name></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <assert>assert <expr><literal type="boolean">false</literal></expr>;</assert>
        </block_content>}</block></switch>
        <comment type="line">// make sure we are on the right side of the material</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>Vector3</name><operator>.</operator><name>dot</name></name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>state</name><operator>.</operator><name>getRay</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDirection</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>negate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getGeoNormal</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>negate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>storePhoton</name></name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getRay</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDirection</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>power</name></expr></argument>, <argument><expr><name>kd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>avg</name> <init>= <expr><call><name><name>kd</name><operator>.</operator><name>getAverage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>rnd</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>getRandom</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>rnd</name> <operator>&lt;</operator> <name>avg</name></expr>)</condition> <block>{<block_content>
            <comment type="line">// photon is scattered</comment>
            <expr_stmt><expr><call><name><name>power</name><operator>.</operator><name>mul</name></name><argument_list>(<argument><expr><name>kd</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>mul</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>avg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>OrthoNormalBasis</name></type> <name>onb</name> <init>= <expr><call><name><name>OrthoNormalBasis</name><operator>.</operator><name>makeFromW</name></name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>u</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name> <operator>*</operator> <name>rnd</name> <operator>/</operator> <name>avg</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>v</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>getRandom</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>s</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>sqrt</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>s1</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>sqrt</name></name><argument_list>(<argument><expr><literal type="number">1.0</literal> <operator>-</operator> <name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Vector3</name></type> <name>w</name> <init>= <expr><operator>new</operator> <call><name>Vector3</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>s</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>w</name> <operator>=</operator> <call><name><name>onb</name><operator>.</operator><name>transform</name></name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Vector3</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>traceDiffusePhoton</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Ray</name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>power</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getNumSamples</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>samples</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>getSamples</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>lightBounds</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>state</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call><operator>.</operator><name>z</name> <operator>&lt;</operator> <name>maxZ</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><ternary><condition><expr><call><name><name>state</name><operator>.</operator><name>getDiffuseDepth</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>samples</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>a</name> <init>= <expr><name>area</name> <operator>/</operator> <name>n</name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <comment type="line">// random offset on unit square, we use the infinite version of</comment>
                <comment type="line">// getRandom</comment>
                <comment type="line">// because the light sampling is adaptive</comment>
                <decl_stmt><decl><type><name>double</name></type> <name>randX</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>getRandom</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>randY</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>getRandom</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>Point3</name></type> <name>p</name> <init>= <expr><operator>new</operator> <call><name>Point3</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>p</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><name>lxmin</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>randX</name><operator>)</operator> <operator>+</operator> <name>lxmax</name> <operator>*</operator> <name>randX</name><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>p</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><name>lymin</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>randY</name><operator>)</operator> <operator>+</operator> <name>lymax</name> <operator>*</operator> <name>randY</name><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>p</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name>maxZ</name> <operator>-</operator> <literal type="number">0.001f</literal></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>LightSample</name></type> <name>dest</name> <init>= <expr><operator>new</operator> <call><name>LightSample</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <comment type="line">// prepare shadow ray to sampled point</comment>
                <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>setShadowRay</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Ray</name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// check that the direction of the sample is the same as the</comment>
                <comment type="line">// normal</comment>
                <decl_stmt><decl><type><name>float</name></type> <name>cosNx</name> <init>= <expr><call><name><name>dest</name><operator>.</operator><name>dot</name></name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>cosNx</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <return>return;</return></block_content></block></if></if_stmt>

                <comment type="line">// light source facing point ?</comment>
                <comment type="line">// (need to check with light source's normal)</comment>
                <decl_stmt><decl><type><name>float</name></type> <name>cosNy</name> <init>= <expr><call><name><name>dest</name><operator>.</operator><name>getShadowRay</name></name><argument_list>()</argument_list></call><operator>.</operator><name>dz</name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>cosNy</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <comment type="line">// compute geometric attenuation and probability scale</comment>
                    <comment type="line">// factor</comment>
                    <decl_stmt><decl><type><name>float</name></type> <name>r</name> <init>= <expr><call><name><name>dest</name><operator>.</operator><name>getShadowRay</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMax</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>float</name></type> <name>g</name> <init>= <expr><name>cosNy</name> <operator>/</operator> <operator>(</operator><name>r</name> <operator>*</operator> <name>r</name><operator>)</operator></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>float</name></type> <name>scale</name> <init>= <expr><name>g</name> <operator>*</operator> <name>a</name></expr></init></decl>;</decl_stmt>
                    <comment type="line">// set final sample radiance</comment>
                    <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>setRadiance</name></name><argument_list>(<argument><expr><name>radiance</name></expr></argument>, <argument><expr><name>radiance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>getDiffuseRadiance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>mul</name><argument_list>(<argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>getSpecularRadiance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>mul</name><argument_list>(<argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>traceShadow</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>addSample</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>getPhoton</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>randX1</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>randY1</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>randX2</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>randY2</name></decl></parameter>, <parameter><decl><type><name>Point3</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>power</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>p</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><name>lxmin</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>randX2</name><operator>)</operator> <operator>+</operator> <name>lxmax</name> <operator>*</operator> <name>randX2</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><name>lymin</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>randY2</name><operator>)</operator> <operator>+</operator> <name>lymax</name> <operator>*</operator> <name>randY2</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name>maxZ</name> <operator>-</operator> <literal type="number">0.001f</literal></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>u</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name> <operator>*</operator> <name>randX1</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>s</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>sqrt</name></name><argument_list>(<argument><expr><name>randY1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dir</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>s</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>s</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator> <operator>-</operator><call><name><name>Math</name><operator>.</operator><name>sqrt</name></name><argument_list>(<argument><expr><literal type="number">1.0f</literal> <operator>-</operator> <name>randY1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Color</name><operator>.</operator><name>mul</name></name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name> <operator>*</operator> <name>area</name></expr></argument>, <argument><expr><name>radiance</name></expr></argument>, <argument><expr><name>power</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>float</name></type> <name>getPower</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>radiance</name><operator>.</operator><name>copy</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>mul</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name> <operator>*</operator> <name>area</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getLuminance</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getNumPrimitives</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>float</name></type> <name>getPrimitiveBound</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>primID</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><literal type="number">0</literal></expr>:</case>
                <return>return <expr><name>minX</name></expr>;</return>
            <case>case <expr><literal type="number">1</literal></expr>:</case>
                <return>return <expr><name>maxX</name></expr>;</return>
            <case>case <expr><literal type="number">2</literal></expr>:</case>
                <return>return <expr><name>minY</name></expr>;</return>
            <case>case <expr><literal type="number">3</literal></expr>:</case>
                <return>return <expr><name>maxY</name></expr>;</return>
            <case>case <expr><literal type="number">4</literal></expr>:</case>
                <return>return <expr><name>minZ</name></expr>;</return>
            <case>case <expr><literal type="number">5</literal></expr>:</case>
                <return>return <expr><name>maxZ</name></expr>;</return>
            <default>default:</default>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>BoundingBox</name></type> <name>getWorldBounds</name><parameter_list>(<parameter><decl><type><name>Matrix4</name></type> <name>o2w</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>BoundingBox</name></type> <name>bounds</name> <init>= <expr><operator>new</operator> <call><name>BoundingBox</name><argument_list>(<argument><expr><name>minX</name></expr></argument>, <argument><expr><name>minY</name></expr></argument>, <argument><expr><name>minZ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>bounds</name><operator>.</operator><name>include</name></name><argument_list>(<argument><expr><name>maxX</name></expr></argument>, <argument><expr><name>maxY</name></expr></argument>, <argument><expr><name>maxZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>o2w</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>bounds</name></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><call><name><name>o2w</name><operator>.</operator><name>transform</name></name><argument_list>(<argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>PrimitiveList</name></type> <name>getBakingPrimitives</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>
}</block></class></unit>
