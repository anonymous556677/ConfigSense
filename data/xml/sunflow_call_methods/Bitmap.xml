<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/sunflow/src/org/sunflow/image/Bitmap.java"><package>package <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>image</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>BufferedImage</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileNotFoundException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>imageio</name><operator>.</operator><name>ImageIO</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>system</name><operator>.</operator><name>UI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>system</name><operator>.</operator><name>UI</name><operator>.</operator><name>Module</name></name>;</import>

<class><specifier>public</specifier> class <name>Bitmap</name> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>int</name><index>[]</index></name></type> <name>pixels</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>width</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>height</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>isHDR</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>Bitmap</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isLinear</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>filename</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><literal type="string">".hdr"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>isHDR</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <comment type="line">// load radiance rgbe file</comment>
            <decl_stmt><decl><type><name>FileInputStream</name></type> <name>f</name> <init>= <expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// parse header</comment>
            <decl_stmt><decl><type><name>boolean</name></type> <name>parseWidth</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>, <decl><type ref="prev"/><name>parseHeight</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>width</name> <operator>=</operator> <name>height</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>last</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>width</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>height</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>last</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name><name>f</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <switch>switch <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>
                    <case>case <expr><literal type="char">'Y'</literal></expr>:</case>
                        <expr_stmt><expr><name>parseHeight</name> <operator>=</operator> <name>last</name> <operator>==</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name>parseWidth</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                        <break>break;</break>
                    <case>case <expr><literal type="char">'X'</literal></expr>:</case>
                        <expr_stmt><expr><name>parseHeight</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name>parseWidth</name> <operator>=</operator> <name>last</name> <operator>==</operator> <literal type="char">'+'</literal></expr>;</expr_stmt>
                        <break>break;</break>
                    <case>case <expr><literal type="char">' '</literal></expr>:</case>
                        <expr_stmt><expr><name>parseWidth</name> <operator>&amp;=</operator> <name>width</name> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name>parseHeight</name> <operator>&amp;=</operator> <name>height</name> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                        <break>break;</break>
                    <case>case <expr><literal type="char">'0'</literal></expr>:</case>
                    <case>case <expr><literal type="char">'1'</literal></expr>:</case>
                    <case>case <expr><literal type="char">'2'</literal></expr>:</case>
                    <case>case <expr><literal type="char">'3'</literal></expr>:</case>
                    <case>case <expr><literal type="char">'4'</literal></expr>:</case>
                    <case>case <expr><literal type="char">'5'</literal></expr>:</case>
                    <case>case <expr><literal type="char">'6'</literal></expr>:</case>
                    <case>case <expr><literal type="char">'7'</literal></expr>:</case>
                    <case>case <expr><literal type="char">'8'</literal></expr>:</case>
                    <case>case <expr><literal type="char">'9'</literal></expr>:</case>
                        <if_stmt><if>if <condition>(<expr><name>parseHeight</name></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><name>height</name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>height</name> <operator>+</operator> <operator>(</operator><name>n</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
                        <if type="elseif">else if <condition>(<expr><name>parseWidth</name></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>width</name> <operator>+</operator> <operator>(</operator><name>n</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
                        <break>break;</break>
                    <default>default:</default>
                        <expr_stmt><expr><name>parseWidth</name> <operator>=</operator> <name>parseHeight</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                        <break>break;</break>
                </block_content>}</block></switch>
                <expr_stmt><expr><name>last</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
            </block_content>}</block></while>
            <comment type="line">// allocate image</comment>
            <expr_stmt><expr><name>pixels</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><name>width</name> <operator>*</operator> <name>height</name></expr>]</index></name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>width</name> <operator>&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>width</name> <operator>&gt;</operator> <literal type="number">0x7fff</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
                <comment type="line">// run length encoding is not allowed so read flat</comment>
                <expr_stmt><expr><call><name>readFlatRGBE</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>width</name> <operator>*</operator> <name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>rasterPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>numScanlines</name> <init>= <expr><name>height</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>scanlineBuffer</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>width</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>numScanlines</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name><name>f</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><call><name><name>f</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><call><name><name>f</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><call><name><name>f</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>!=</operator> <literal type="number">2</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>g</name> <operator>!=</operator> <literal type="number">2</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
                    <comment type="line">// this file is not run length encoded</comment>
                    <expr_stmt><expr><name><name>pixels</name><index>[<expr><name>rasterPos</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>r</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>g</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>b</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>e</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>readFlatRGBE</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>rasterPos</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>width</name> <operator>*</operator> <name>numScanlines</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return;</return>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>b</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>e</name><operator>)</operator> <operator>!=</operator> <name>width</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Invalid scanline width"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return;</return>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <comment type="line">// read each of the four channels for the scanline into</comment>
                <comment type="line">// the buffer</comment>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>%</operator> <name>width</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Unaligned access to scanline data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>width</name></expr></init></decl>;</decl_stmt>
                    <while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
                        <decl_stmt><decl><type><name>int</name></type> <name>b0</name> <init>= <expr><call><name><name>f</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>b1</name> <init>= <expr><call><name><name>f</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>b0</name> <operator>&gt;</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>
                            <comment type="line">// a run of the same value</comment>
                            <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><name>b0</name> <operator>-</operator> <literal type="number">128</literal></expr></init></decl>;</decl_stmt>
                            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>count</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>count</name> <operator>&gt;</operator> <operator>(</operator><name>end</name> <operator>-</operator> <name>p</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
                                <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Bad scanline data - invalid RLE run"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <return>return;</return>
                            </block_content>}</block></if></if_stmt>
                            <while>while <condition>(<expr><name>count</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                                <expr_stmt><expr><name><name>scanlineBuffer</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name>b1</name></expr>;</expr_stmt>
                                <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
                            </block_content>}</block></while>
                        </block_content>}</block></if> <else>else <block>{<block_content>
                            <comment type="line">// a non-run</comment>
                            <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><name>b0</name></expr></init></decl>;</decl_stmt>
                            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>count</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>count</name> <operator>&gt;</operator> <operator>(</operator><name>end</name> <operator>-</operator> <name>p</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
                                <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Bad scanline data - invalid count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <return>return;</return>
                            </block_content>}</block></if></if_stmt>
                            <expr_stmt><expr><name><name>scanlineBuffer</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name>b1</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
                            <if_stmt><if>if <condition>(<expr><operator>--</operator><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                                <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                                    <expr_stmt><expr><name><name>scanlineBuffer</name><index>[<expr><name>p</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <call><name><name>f</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                                <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block></while>
                </block_content>}</block></for>
                <comment type="line">// now convert data from buffer into floats</comment>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>scanlineBuffer</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>scanlineBuffer</name><index>[<expr><name>i</name> <operator>+</operator> <name>width</name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>scanlineBuffer</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>width</name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>scanlineBuffer</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>width</name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>pixels</name><index>[<expr><name>rasterPos</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>r</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>g</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>b</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>e</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>rasterPos</name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><name>numScanlines</name><operator>--</operator></expr>;</expr_stmt>
            </block_content>}</block></while>
            <comment type="line">// flip image</comment>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ir</name> <init>= <expr><operator>(</operator><name>height</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>width</name></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr><operator>,</operator> <expr><name>ir</name> <operator>-=</operator> <name>width</name></expr></incr>)</control> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i2</name> <init>= <expr><name>ir</name></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>i2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pixels</name><index>[<expr><name>i2</name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>pixels</name><index>[<expr><name>i2</name></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>filename</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><literal type="string">".tga"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>isHDR</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>FileInputStream</name></type> <name>f</name> <init>= <expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>pix_ptr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>pix</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>read</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <comment type="line">// read header</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>idsize</name> <init>= <expr><call><name><name>f</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// cmap byte (unsupported)</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>datatype</name> <init>= <expr><call><name><name>f</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></init></decl>;</decl_stmt>

            <comment type="line">// colormap info (not supported)</comment>
            <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// xstart, 16 bits</comment>
            <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// ystart, 16 bits</comment>
            <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// read resolution</comment>
            <expr_stmt><expr><name>width</name> <operator>=</operator> <operator>(</operator><call><name><name>f</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>width</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><call><name><name>f</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>height</name> <operator>=</operator> <operator>(</operator><call><name><name>f</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>height</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><call><name><name>f</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><name>pixels</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><name>width</name> <operator>*</operator> <name>height</name></expr>]</index></name></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>bpp</name> <init>= <expr><operator>(</operator><call><name><name>f</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>imgdscr</name> <init>= <expr><operator>(</operator><call><name><name>f</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

            <comment type="line">// skip image ID</comment>
            <if_stmt><if>if <condition>(<expr><name>idsize</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>idsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <switch>switch <condition>(<expr><name>datatype</name></expr>)</condition> <block>{<block_content>
                <case>case <expr><literal type="number">10</literal></expr>:</case>
                    <comment type="line">// RLE RGB image</comment>
                    <while>while <condition>(<expr><name>pix_ptr</name> <operator>&lt;</operator> <operator>(</operator><name>width</name> <operator>*</operator> <name>height</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><call><name><name>f</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>&amp;</operator> <literal type="number">128</literal><operator>)</operator> <operator>==</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>
                            <comment type="line">// a runlength packet</comment>
                            <expr_stmt><expr><name>r</name> <operator>&amp;=</operator> <literal type="number">127</literal></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <comment type="line">// alpha not yet supported</comment>
                            <expr_stmt><expr><name>pix</name> <operator>=</operator> <operator>(</operator><name><name>read</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
                            <expr_stmt><expr><name>pix</name> <operator>|=</operator> <operator>(</operator><name><name>read</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
                            <expr_stmt><expr><name>pix</name> <operator>|=</operator> <operator>(</operator><name><name>read</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>
                            <comment type="line">// replicate pixel</comment>
                            <expr_stmt><expr><name>pix</name> <operator>=</operator> <ternary><condition><expr><name>isLinear</name></expr> ?</condition><then> <expr><name>pix</name></expr> </then><else>: <expr><call><name><name>Color</name><operator>.</operator><name>rgbToLinear</name></name><argument_list>(<argument><expr><name>pix</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
                            <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>r</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>pix_ptr</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                                <expr_stmt><expr><name><name>pixels</name><index>[<expr><name>pix_ptr</name></expr>]</index></name> <operator>=</operator> <name>pix</name></expr>;</expr_stmt></block_content></block></for>
                        </block_content>}</block></if> <else>else <block>{<block_content>
                            <comment type="line">// a raw packet</comment>
                            <expr_stmt><expr><name>r</name> <operator>&amp;=</operator> <literal type="number">127</literal></expr>;</expr_stmt>
                            <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>r</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>pix_ptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                                <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <comment type="line">// alpha not yet supported</comment>
                                <expr_stmt><expr><name>pix</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>read</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
                                <expr_stmt><expr><name>pix</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name><name>read</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
                                <expr_stmt><expr><name>pix</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name><name>read</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
                                <expr_stmt><expr><name><name>pixels</name><index>[<expr><name>pix_ptr</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>isLinear</name></expr> ?</condition><then> <expr><name>pix</name></expr> </then><else>: <expr><call><name><name>Color</name><operator>.</operator><name>rgbToLinear</name></name><argument_list>(<argument><expr><name>pix</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
                            </block_content>}</block></for>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block></while>
                    <break>break;</break>
                <case>case <expr><literal type="number">2</literal></expr>:</case>
                    <comment type="line">// Uncompressed RGB</comment>
                    <for>for <control>(<init><expr><name>pix_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pix_ptr</name> <operator>&lt;</operator> <operator>(</operator><name>width</name> <operator>*</operator> <name>height</name><operator>)</operator></expr>;</condition> <incr><expr><name>pix_ptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="line">// the order is bgr reading from the file</comment>
                        <comment type="line">// alpha not yet supported</comment>
                        <expr_stmt><expr><name>pix</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>read</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name>pix</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name><name>read</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name>pix</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name><name>read</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>pixels</name><index>[<expr><name>pix_ptr</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>isLinear</name></expr> ?</condition><then> <expr><name>pix</name></expr> </then><else>: <expr><call><name><name>Color</name><operator>.</operator><name>rgbToLinear</name></name><argument_list>(<argument><expr><name>pix</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
                    </block_content>}</block></for>
                    <break>break;</break>
                <default>default:</default>
                    <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printWarning</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>IMG</name></name></expr></argument>, <argument><expr><literal type="string">"Unsupported TGA datatype: %s"</literal></expr></argument>, <argument><expr><name>datatype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
            </block_content>}</block></switch>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>imgdscr</name> <operator>&amp;</operator> <literal type="number">32</literal><operator>)</operator> <operator>==</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>pix_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <operator>(</operator><name>height</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                        <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name><name>pixels</name><index>[<expr><name>pix_ptr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name><name>pixels</name><index>[<expr><name>pix_ptr</name></expr>]</index></name> <operator>=</operator> <name><name>pixels</name><index>[<expr><operator>(</operator><name>height</name> <operator>-</operator> <name>y</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>width</name> <operator>+</operator> <name>x</name></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>pixels</name><index>[<expr><operator>(</operator><name>height</name> <operator>-</operator> <name>y</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>width</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>pix_ptr</name><operator>++</operator></expr>;</expr_stmt>
                    </block_content>}</block></for></block_content></block></for>

            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="line">// regular image, load using Java api</comment>
            <decl_stmt><decl><type><name>BufferedImage</name></type> <name>bi</name> <init>= <expr><call><name><name>ImageIO</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>width</name> <operator>=</operator> <call><name><name>bi</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>height</name> <operator>=</operator> <call><name><name>bi</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>isHDR</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>pixels</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><name>width</name> <operator>*</operator> <name>height</name></expr>]</index></name></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr><operator>,</operator> <expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>rgb</name> <init>= <expr><call><name><name>bi</name><operator>.</operator><name>getRGB</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name><name>pixels</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>isLinear</name></expr> ?</condition><then> <expr><name>rgb</name></expr> </then><else>: <expr><call><name><name>Color</name><operator>.</operator><name>rgbToLinear</name></name><argument_list>(<argument><expr><name>rgb</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>save</name><parameter_list>(<parameter><decl><type><name>BufferedImage</name></type> <name>image</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Bitmap</name></type> <name>b</name> <init>= <expr><operator>new</operator> <call><name>Bitmap</name><argument_list>(<argument><expr><call><name><name>image</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>image</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>b</name><operator>.</operator><name>pixels</name><index>[<expr><operator>(</operator><operator>(</operator><name><name>b</name><operator>.</operator><name>height</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>y</name><operator>)</operator> <operator>*</operator> <name><name>b</name><operator>.</operator><name>width</name></name><operator>)</operator> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <call><name><name>image</name><operator>.</operator><name>getRGB</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
        <if_stmt><if>if <condition>(<expr><call><name><name>filename</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><literal type="string">".tga"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>saveTGA</name></name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>savePNG</name></name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>readFlatRGBE</name><parameter_list>(<parameter><decl><type><name>FileInputStream</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rasterPos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numPixels</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <while>while <condition>(<expr><name>numPixels</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name><name>f</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><call><name><name>f</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><call><name><name>f</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><call><name><name>f</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>pixels</name><index>[<expr><name>rasterPos</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>r</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>g</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>b</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>e</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>rasterPos</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></function>

    <constructor><specifier>public</specifier> <name>Bitmap</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isHDR</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>width</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>height</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isHDR</name></name> <operator>=</operator> <name>isHDR</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pixels</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><name>w</name> <operator>*</operator> <name>h</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPixel</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>x</name> <operator>&lt;</operator> <name>width</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>y</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>y</name> <operator>&lt;</operator> <name>height</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>pixels</name><index>[<expr><operator>(</operator><name>y</name> <operator>*</operator> <name>width</name><operator>)</operator> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>isHDR</name></expr> ?</condition><then> <expr><call><name><name>c</name><operator>.</operator><name>toRGBE</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>c</name><operator>.</operator><name>copy</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toNonLinear</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toRGB</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Color</name></type> <name>getPixel</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>x</name> <operator>&lt;</operator> <name>width</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>y</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>y</name> <operator>&lt;</operator> <name>height</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><ternary><condition><expr><name>isHDR</name></expr> ?</condition><then> <expr><operator>new</operator> <call><name>Color</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setRGBE</name><argument_list>(<argument><expr><name><name>pixels</name><index>[<expr><operator>(</operator><name>y</name> <operator>*</operator> <name>width</name><operator>)</operator> <operator>+</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>new</operator> <call><name>Color</name><argument_list>(<argument><expr><name><name>pixels</name><index>[<expr><operator>(</operator><name>y</name> <operator>*</operator> <name>width</name><operator>)</operator> <operator>+</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><name><name>Color</name><operator>.</operator><name>BLACK</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getWidth</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>width</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getHeight</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>height</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>save</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>filename</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><literal type="string">".hdr"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>saveHDR</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name><name>filename</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><literal type="string">".png"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>savePNG</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name><name>filename</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><literal type="string">".tga"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>saveTGA</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>saveHDR</name><argument_list>(<argument><expr><name>filename</name> <operator>+</operator> <literal type="string">".hdr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>savePNG</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>BufferedImage</name></type> <name>bi</name> <init>= <expr><operator>new</operator> <call><name>BufferedImage</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>BufferedImage</name><operator>.</operator><name>TYPE_INT_RGB</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>bi</name><operator>.</operator><name>setRGB</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>y</name></expr></argument>, <argument><expr><ternary><condition><expr><name>isHDR</name></expr> ?</condition><then> <expr><call><name>getPixel</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toRGB</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name><name>pixels</name><index>[<expr><operator>(</operator><name>y</name> <operator>*</operator> <name>width</name><operator>)</operator> <operator>+</operator> <name>x</name></expr>]</index></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>ImageIO</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>bi</name></expr></argument>, <argument><expr><literal type="string">"png"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>saveHDR</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>FileOutputStream</name></type> <name>f</name> <init>= <expr><operator>new</operator> <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="string">"#?RGBE\n"</literal><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="string">"FORMAT=32-bit_rle_rgbe\n\n"</literal><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"-Y "</literal> <operator>+</operator> <name>height</name> <operator>+</operator> <literal type="string">" +X "</literal> <operator>+</operator> <name>width</name> <operator>+</operator> <literal type="string">"\n"</literal><operator>)</operator><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>y</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>rgbe</name> <init>= <expr><ternary><condition><expr><name>isHDR</name></expr> ?</condition><then> <expr><name><name>pixels</name><index>[<expr><operator>(</operator><name>y</name> <operator>*</operator> <name>width</name><operator>)</operator> <operator>+</operator> <name>x</name></expr>]</index></name></expr> </then><else>: <expr><operator>new</operator> <call><name>Color</name><argument_list>(<argument><expr><name><name>pixels</name><index>[<expr><operator>(</operator><name>y</name> <operator>*</operator> <name>width</name><operator>)</operator> <operator>+</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toRGBE</name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>rgbe</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>rgbe</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>rgbe</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>rgbe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>FileNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>saveTGA</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>FileOutputStream</name></type> <name>f</name> <init>= <expr><operator>new</operator> <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// no id, no colormap, uncompressed 3bpp RGB</comment>
            <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>tgaHeader</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>tgaHeader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// then the size info</comment>
            <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>width</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>(</operator><name>width</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>height</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>(</operator><name>height</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// bitsperpixel and filler</comment>
            <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// image data</comment>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>pix</name> <init>= <expr><ternary><condition><expr><name>isHDR</name></expr> ?</condition><then> <expr><call><name>getPixel</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toRGB</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name><name>pixels</name><index>[<expr><name>y</name> <operator>*</operator> <name>width</name> <operator>+</operator> <name>x</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>pix</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>(</operator><name>pix</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>(</operator><name>pix</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>
}</block></class></unit>
