<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/sunflow/src/org/sunflow/core/light/SunSkyLight.java"><package>package <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>light</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>SunflowAPI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>IntersectionState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>LightSample</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>LightSource</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>ParameterList</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>PrimitiveList</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>Ray</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>Shader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>ShadingState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>image</name><operator>.</operator><name>ChromaticitySpectrum</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>image</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>image</name><operator>.</operator><name>ConstantSpectralCurve</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>image</name><operator>.</operator><name>IrregularSpectralCurve</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>image</name><operator>.</operator><name>RGBSpace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>image</name><operator>.</operator><name>RegularSpectralCurve</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>image</name><operator>.</operator><name>SpectralCurve</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>image</name><operator>.</operator><name>XYZColor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>BoundingBox</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>MathUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Matrix4</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>OrthoNormalBasis</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Point3</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Vector3</name></name>;</import>

<class><specifier>public</specifier> class <name>SunSkyLight</name> <super_list><implements>implements <super><name>LightSource</name></super>, <super><name>PrimitiveList</name></super>, <super><name>Shader</name></super></implements></super_list> <block>{
    <comment type="line">// sunflow parameters</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>numSkySamples</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>OrthoNormalBasis</name></type> <name>basis</name></decl>;</decl_stmt>
    <comment type="line">// parameters to the model</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Vector3</name></type> <name>sunDirWorld</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>turbidity</name></decl>;</decl_stmt>
    <comment type="line">// derived quantities</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Vector3</name></type> <name>sunDir</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>SpectralCurve</name></type> <name>sunSpectralRadiance</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Color</name></type> <name>sunColor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>sunTheta</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>zenithY</name></decl>, <decl><type ref="prev"/><name>zenithx</name></decl>, <decl><type ref="prev"/><name>zenithy</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>double</name><index>[]</index></name></type> <name>perezY</name> <init>= <expr><operator>new</operator> <name><name>double</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>double</name><index>[]</index></name></type> <name>perezx</name> <init>= <expr><operator>new</operator> <name><name>double</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>double</name><index>[]</index></name></type> <name>perezy</name> <init>= <expr><operator>new</operator> <name><name>double</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>jacobian</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>float</name><index>[]</index></name></type> <name>colHistogram</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>float</name><index>[]</index><index>[]</index></name></type> <name>imageHistogram</name></decl>;</decl_stmt>
    <comment type="line">// constant data</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>float</name><index>[]</index></name></type> <name>solAmplitudes</name> <init>= <expr><block>{ <expr><literal type="number">165.5f</literal></expr>, <expr><literal type="number">162.3f</literal></expr>, <expr><literal type="number">211.2f</literal></expr>,
            <expr><literal type="number">258.8f</literal></expr>, <expr><literal type="number">258.2f</literal></expr>, <expr><literal type="number">242.3f</literal></expr>, <expr><literal type="number">267.6f</literal></expr>, <expr><literal type="number">296.6f</literal></expr>, <expr><literal type="number">305.4f</literal></expr>, <expr><literal type="number">300.6f</literal></expr>, <expr><literal type="number">306.6f</literal></expr>,
            <expr><literal type="number">288.3f</literal></expr>, <expr><literal type="number">287.1f</literal></expr>, <expr><literal type="number">278.2f</literal></expr>, <expr><literal type="number">271.0f</literal></expr>, <expr><literal type="number">272.3f</literal></expr>, <expr><literal type="number">263.6f</literal></expr>, <expr><literal type="number">255.0f</literal></expr>, <expr><literal type="number">250.6f</literal></expr>,
            <expr><literal type="number">253.1f</literal></expr>, <expr><literal type="number">253.5f</literal></expr>, <expr><literal type="number">251.3f</literal></expr>, <expr><literal type="number">246.3f</literal></expr>, <expr><literal type="number">241.7f</literal></expr>, <expr><literal type="number">236.8f</literal></expr>, <expr><literal type="number">232.1f</literal></expr>, <expr><literal type="number">228.2f</literal></expr>,
            <expr><literal type="number">223.4f</literal></expr>, <expr><literal type="number">219.7f</literal></expr>, <expr><literal type="number">215.3f</literal></expr>, <expr><literal type="number">211.0f</literal></expr>, <expr><literal type="number">207.3f</literal></expr>, <expr><literal type="number">202.4f</literal></expr>, <expr><literal type="number">198.7f</literal></expr>, <expr><literal type="number">194.3f</literal></expr>,
            <expr><literal type="number">190.7f</literal></expr>, <expr><literal type="number">186.3f</literal></expr>, <expr><literal type="number">182.6f</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>RegularSpectralCurve</name></type> <name>solCurve</name> <init>= <expr><operator>new</operator> <call><name>RegularSpectralCurve</name><argument_list>(<argument><expr><name>solAmplitudes</name></expr></argument>, <argument><expr><literal type="number">380</literal></expr></argument>, <argument><expr><literal type="number">750</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>float</name><index>[]</index></name></type> <name>k_oWavelengths</name> <init>= <expr><block>{ <expr><literal type="number">300</literal></expr>, <expr><literal type="number">305</literal></expr>, <expr><literal type="number">310</literal></expr>, <expr><literal type="number">315</literal></expr>, <expr><literal type="number">320</literal></expr>,
            <expr><literal type="number">325</literal></expr>, <expr><literal type="number">330</literal></expr>, <expr><literal type="number">335</literal></expr>, <expr><literal type="number">340</literal></expr>, <expr><literal type="number">345</literal></expr>, <expr><literal type="number">350</literal></expr>, <expr><literal type="number">355</literal></expr>, <expr><literal type="number">445</literal></expr>, <expr><literal type="number">450</literal></expr>, <expr><literal type="number">455</literal></expr>, <expr><literal type="number">460</literal></expr>, <expr><literal type="number">465</literal></expr>, <expr><literal type="number">470</literal></expr>,
            <expr><literal type="number">475</literal></expr>, <expr><literal type="number">480</literal></expr>, <expr><literal type="number">485</literal></expr>, <expr><literal type="number">490</literal></expr>, <expr><literal type="number">495</literal></expr>, <expr><literal type="number">500</literal></expr>, <expr><literal type="number">505</literal></expr>, <expr><literal type="number">510</literal></expr>, <expr><literal type="number">515</literal></expr>, <expr><literal type="number">520</literal></expr>, <expr><literal type="number">525</literal></expr>, <expr><literal type="number">530</literal></expr>, <expr><literal type="number">535</literal></expr>,
            <expr><literal type="number">540</literal></expr>, <expr><literal type="number">545</literal></expr>, <expr><literal type="number">550</literal></expr>, <expr><literal type="number">555</literal></expr>, <expr><literal type="number">560</literal></expr>, <expr><literal type="number">565</literal></expr>, <expr><literal type="number">570</literal></expr>, <expr><literal type="number">575</literal></expr>, <expr><literal type="number">580</literal></expr>, <expr><literal type="number">585</literal></expr>, <expr><literal type="number">590</literal></expr>, <expr><literal type="number">595</literal></expr>, <expr><literal type="number">600</literal></expr>,
            <expr><literal type="number">605</literal></expr>, <expr><literal type="number">610</literal></expr>, <expr><literal type="number">620</literal></expr>, <expr><literal type="number">630</literal></expr>, <expr><literal type="number">640</literal></expr>, <expr><literal type="number">650</literal></expr>, <expr><literal type="number">660</literal></expr>, <expr><literal type="number">670</literal></expr>, <expr><literal type="number">680</literal></expr>, <expr><literal type="number">690</literal></expr>, <expr><literal type="number">700</literal></expr>, <expr><literal type="number">710</literal></expr>, <expr><literal type="number">720</literal></expr>,
            <expr><literal type="number">730</literal></expr>, <expr><literal type="number">740</literal></expr>, <expr><literal type="number">750</literal></expr>, <expr><literal type="number">760</literal></expr>, <expr><literal type="number">770</literal></expr>, <expr><literal type="number">780</literal></expr>, <expr><literal type="number">790</literal></expr>, }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>float</name><index>[]</index></name></type> <name>k_oAmplitudes</name> <init>= <expr><block>{ <expr><literal type="number">10.0f</literal></expr>, <expr><literal type="number">4.8f</literal></expr>, <expr><literal type="number">2.7f</literal></expr>, <expr><literal type="number">1.35f</literal></expr>,
            <expr><literal type="number">.8f</literal></expr>, <expr><literal type="number">.380f</literal></expr>, <expr><literal type="number">.160f</literal></expr>, <expr><literal type="number">.075f</literal></expr>, <expr><literal type="number">.04f</literal></expr>, <expr><literal type="number">.019f</literal></expr>, <expr><literal type="number">.007f</literal></expr>, <expr><literal type="number">.0f</literal></expr>, <expr><literal type="number">.003f</literal></expr>, <expr><literal type="number">.003f</literal></expr>,
            <expr><literal type="number">.004f</literal></expr>, <expr><literal type="number">.006f</literal></expr>, <expr><literal type="number">.008f</literal></expr>, <expr><literal type="number">.009f</literal></expr>, <expr><literal type="number">.012f</literal></expr>, <expr><literal type="number">.014f</literal></expr>, <expr><literal type="number">.017f</literal></expr>, <expr><literal type="number">.021f</literal></expr>, <expr><literal type="number">.025f</literal></expr>,
            <expr><literal type="number">.03f</literal></expr>, <expr><literal type="number">.035f</literal></expr>, <expr><literal type="number">.04f</literal></expr>, <expr><literal type="number">.045f</literal></expr>, <expr><literal type="number">.048f</literal></expr>, <expr><literal type="number">.057f</literal></expr>, <expr><literal type="number">.063f</literal></expr>, <expr><literal type="number">.07f</literal></expr>, <expr><literal type="number">.075f</literal></expr>, <expr><literal type="number">.08f</literal></expr>,
            <expr><literal type="number">.085f</literal></expr>, <expr><literal type="number">.095f</literal></expr>, <expr><literal type="number">.103f</literal></expr>, <expr><literal type="number">.110f</literal></expr>, <expr><literal type="number">.12f</literal></expr>, <expr><literal type="number">.122f</literal></expr>, <expr><literal type="number">.12f</literal></expr>, <expr><literal type="number">.118f</literal></expr>, <expr><literal type="number">.115f</literal></expr>, <expr><literal type="number">.12f</literal></expr>,
            <expr><literal type="number">.125f</literal></expr>, <expr><literal type="number">.130f</literal></expr>, <expr><literal type="number">.12f</literal></expr>, <expr><literal type="number">.105f</literal></expr>, <expr><literal type="number">.09f</literal></expr>, <expr><literal type="number">.079f</literal></expr>, <expr><literal type="number">.067f</literal></expr>, <expr><literal type="number">.057f</literal></expr>, <expr><literal type="number">.048f</literal></expr>, <expr><literal type="number">.036f</literal></expr>,
            <expr><literal type="number">.028f</literal></expr>, <expr><literal type="number">.023f</literal></expr>, <expr><literal type="number">.018f</literal></expr>, <expr><literal type="number">.014f</literal></expr>, <expr><literal type="number">.011f</literal></expr>, <expr><literal type="number">.010f</literal></expr>, <expr><literal type="number">.009f</literal></expr>, <expr><literal type="number">.007f</literal></expr>, <expr><literal type="number">.004f</literal></expr>, <expr><literal type="number">.0f</literal></expr>,
            <expr><literal type="number">.0f</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>float</name><index>[]</index></name></type> <name>k_gWavelengths</name> <init>= <expr><block>{ <expr><literal type="number">759</literal></expr>, <expr><literal type="number">760</literal></expr>, <expr><literal type="number">770</literal></expr>, <expr><literal type="number">771</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>float</name><index>[]</index></name></type> <name>k_gAmplitudes</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3.0f</literal></expr>, <expr><literal type="number">0.210f</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>float</name><index>[]</index></name></type> <name>k_waWavelengths</name> <init>= <expr><block>{ <expr><literal type="number">689</literal></expr>, <expr><literal type="number">690</literal></expr>, <expr><literal type="number">700</literal></expr>, <expr><literal type="number">710</literal></expr>, <expr><literal type="number">720</literal></expr>,
            <expr><literal type="number">730</literal></expr>, <expr><literal type="number">740</literal></expr>, <expr><literal type="number">750</literal></expr>, <expr><literal type="number">760</literal></expr>, <expr><literal type="number">770</literal></expr>, <expr><literal type="number">780</literal></expr>, <expr><literal type="number">790</literal></expr>, <expr><literal type="number">800</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>float</name><index>[]</index></name></type> <name>k_waAmplitudes</name> <init>= <expr><block>{ <expr><literal type="number">0f</literal></expr>, <expr><literal type="number">0.160e-1f</literal></expr>, <expr><literal type="number">0.240e-1f</literal></expr>,
            <expr><literal type="number">0.125e-1f</literal></expr>, <expr><literal type="number">0.100e+1f</literal></expr>, <expr><literal type="number">0.870f</literal></expr>, <expr><literal type="number">0.610e-1f</literal></expr>, <expr><literal type="number">0.100e-2f</literal></expr>, <expr><literal type="number">0.100e-4f</literal></expr>,
            <expr><literal type="number">0.100e-4f</literal></expr>, <expr><literal type="number">0.600e-3f</literal></expr>, <expr><literal type="number">0.175e-1f</literal></expr>, <expr><literal type="number">0.360e-1f</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>IrregularSpectralCurve</name></type> <name>k_oCurve</name> <init>= <expr><operator>new</operator> <call><name>IrregularSpectralCurve</name><argument_list>(<argument><expr><name>k_oWavelengths</name></expr></argument>, <argument><expr><name>k_oAmplitudes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>IrregularSpectralCurve</name></type> <name>k_gCurve</name> <init>= <expr><operator>new</operator> <call><name>IrregularSpectralCurve</name><argument_list>(<argument><expr><name>k_gWavelengths</name></expr></argument>, <argument><expr><name>k_gAmplitudes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>IrregularSpectralCurve</name></type> <name>k_waCurve</name> <init>= <expr><operator>new</operator> <call><name>IrregularSpectralCurve</name><argument_list>(<argument><expr><name>k_waWavelengths</name></expr></argument>, <argument><expr><name>k_waAmplitudes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>SunSkyLight</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>numSkySamples</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>sunDirWorld</name> <operator>=</operator> <operator>new</operator> <call><name>Vector3</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>turbidity</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>basis</name> <operator>=</operator> <call><name><name>OrthoNormalBasis</name><operator>.</operator><name>makeFromWV</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Vector3</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Vector3</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>initSunSky</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>private</specifier> <name>SpectralCurve</name></type> <name>computeAttenuatedSunlight</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>theta</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>turbidity</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>data</name> <init>= <expr><operator>new</operator> <name><name>float</name><index>[<expr><literal type="number">91</literal></expr>]</index></name></expr></init></decl>;</decl_stmt> <comment type="line">// holds the sunsky curve data</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>double</name></type> <name>alpha</name> <init>= <expr><literal type="number">1.3</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>double</name></type> <name>lozone</name> <init>= <expr><literal type="number">0.35</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>double</name></type> <name>w</name> <init>= <expr><literal type="number">2.0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>beta</name> <init>= <expr><literal type="number">0.04608365822050</literal> <operator>*</operator> <name>turbidity</name> <operator>-</operator> <literal type="number">0.04586025928522</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">// Relative optical mass</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>m</name> <init>= <expr><literal type="number">1.0</literal> <operator>/</operator> <operator>(</operator><call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">0.000940</literal> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><literal type="number">1.6386</literal> <operator>-</operator> <name>theta</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.253</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>lambda</name> <init>= <expr><literal type="number">350</literal></expr></init></decl>;</init> <condition><expr><name>lambda</name> <operator>&lt;=</operator> <literal type="number">800</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>lambda</name> <operator>+=</operator> <literal type="number">5</literal></expr></incr>)</control> <block>{<block_content>
            <comment type="line">// Rayleigh scattering</comment>
            <decl_stmt><decl><type><name>double</name></type> <name>tauR</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>exp</name></name><argument_list>(<argument><expr><operator>-</operator><name>m</name> <operator>*</operator> <literal type="number">0.008735</literal> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>lambda</name> <operator>/</operator> <literal type="number">1000.0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">4.08</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// Aerosol (water + dust) attenuation</comment>
            <decl_stmt><decl><type><name>double</name></type> <name>tauA</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>exp</name></name><argument_list>(<argument><expr><operator>-</operator><name>m</name> <operator>*</operator> <name>beta</name> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>lambda</name> <operator>/</operator> <literal type="number">1000.0</literal></expr></argument>, <argument><expr><operator>-</operator><name>alpha</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// Attenuation due to ozone absorption</comment>
            <decl_stmt><decl><type><name>double</name></type> <name>tauO</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>exp</name></name><argument_list>(<argument><expr><operator>-</operator><name>m</name> <operator>*</operator> <call><name><name>k_oCurve</name><operator>.</operator><name>sample</name></name><argument_list>(<argument><expr><name>lambda</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>lozone</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// Attenuation due to mixed gases absorption</comment>
            <decl_stmt><decl><type><name>double</name></type> <name>tauG</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>exp</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.41</literal> <operator>*</operator> <call><name><name>k_gCurve</name><operator>.</operator><name>sample</name></name><argument_list>(<argument><expr><name>lambda</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>m</name> <operator>/</operator> <call><name><name>Math</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><literal type="number">1.0</literal> <operator>+</operator> <literal type="number">118.93</literal> <operator>*</operator> <call><name><name>k_gCurve</name><operator>.</operator><name>sample</name></name><argument_list>(<argument><expr><name>lambda</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>m</name></expr></argument>, <argument><expr><literal type="number">0.45</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// Attenuation due to water vapor absorption</comment>
            <decl_stmt><decl><type><name>double</name></type> <name>tauWA</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>exp</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">0.2385</literal> <operator>*</operator> <call><name><name>k_waCurve</name><operator>.</operator><name>sample</name></name><argument_list>(<argument><expr><name>lambda</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>w</name> <operator>*</operator> <name>m</name> <operator>/</operator> <call><name><name>Math</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><literal type="number">1.0</literal> <operator>+</operator> <literal type="number">20.07</literal> <operator>*</operator> <call><name><name>k_waCurve</name><operator>.</operator><name>sample</name></name><argument_list>(<argument><expr><name>lambda</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>w</name> <operator>*</operator> <name>m</name></expr></argument>, <argument><expr><literal type="number">0.45</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// 100.0 comes from solAmplitudes begin in wrong units.</comment>
            <decl_stmt><decl><type><name>double</name></type> <name>amp</name> <init>= <comment type="block">/* 100.0 * */</comment><expr><call><name><name>solCurve</name><operator>.</operator><name>sample</name></name><argument_list>(<argument><expr><name>lambda</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>tauR</name> <operator>*</operator> <name>tauA</name> <operator>*</operator> <name>tauO</name> <operator>*</operator> <name>tauG</name> <operator>*</operator> <name>tauWA</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>amp</name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><operator>new</operator> <call><name>RegularSpectralCurve</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">350</literal></expr></argument>, <argument><expr><literal type="number">800</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>double</name></type> <name>perezFunction</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>double</name><index>[]</index></name></type> <name>lam</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>theta</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>gamma</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>lvz</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>double</name></type> <name>den</name> <init>= <expr><operator>(</operator><operator>(</operator><literal type="number">1.0</literal> <operator>+</operator> <name><name>lam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>exp</name></name><argument_list>(<argument><expr><name><name>lam</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>+</operator> <name><name>lam</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>exp</name></name><argument_list>(<argument><expr><name><name>lam</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>sunTheta</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>lam</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name>sunTheta</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name>sunTheta</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>num</name> <init>= <expr><operator>(</operator><operator>(</operator><literal type="number">1.0</literal> <operator>+</operator> <name><name>lam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>exp</name></name><argument_list>(<argument><expr><name><name>lam</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>+</operator> <name><name>lam</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>exp</name></name><argument_list>(<argument><expr><name><name>lam</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>gamma</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>lam</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name>gamma</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name>gamma</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>lvz</name> <operator>*</operator> <name>num</name> <operator>/</operator> <name>den</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>initSunSky</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// perform all the required initialization of constants</comment>
        <expr_stmt><expr><call><name><name>sunDirWorld</name><operator>.</operator><name>normalize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>sunDir</name> <operator>=</operator> <call><name><name>basis</name><operator>.</operator><name>untransform</name></name><argument_list>(<argument><expr><name>sunDirWorld</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Vector3</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sunDir</name><operator>.</operator><name>normalize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>sunTheta</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>acos</name></name><argument_list>(<argument><expr><call><name><name>MathUtils</name><operator>.</operator><name>clamp</name></name><argument_list>(<argument><expr><name><name>sunDir</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>sunDir</name><operator>.</operator><name>z</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>sunSpectralRadiance</name> <operator>=</operator> <call><name>computeAttenuatedSunlight</name><argument_list>(<argument><expr><name>sunTheta</name></expr></argument>, <argument><expr><name>turbidity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// produce color suitable for rendering</comment>
            <expr_stmt><expr><name>sunColor</name> <operator>=</operator> <call><name><name>RGBSpace</name><operator>.</operator><name>SRGB</name><operator>.</operator><name>convertXYZtoRGB</name></name><argument_list>(<argument><expr><call><name><name>sunSpectralRadiance</name><operator>.</operator><name>toXYZ</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>mul</name><argument_list>(<argument><expr><literal type="number">1e-4f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>constrainRGB</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>sunSpectralRadiance</name> <operator>=</operator> <operator>new</operator> <call><name>ConstantSpectralCurve</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <comment type="line">// sunSolidAngle = (float) (0.25 * Math.PI * 1.39 * 1.39 / (150 * 150));</comment>
        <decl_stmt><decl><type><name>float</name></type> <name>theta2</name> <init>= <expr><name>sunTheta</name> <operator>*</operator> <name>sunTheta</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>theta3</name> <init>= <expr><name>sunTheta</name> <operator>*</operator> <name>theta2</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>T</name> <init>= <expr><name>turbidity</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>T2</name> <init>= <expr><name>turbidity</name> <operator>*</operator> <name>turbidity</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>chi</name> <init>= <expr><operator>(</operator><literal type="number">4.0</literal> <operator>/</operator> <literal type="number">9.0</literal> <operator>-</operator> <name>T</name> <operator>/</operator> <literal type="number">120.0</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>Math</name><operator>.</operator><name>PI</name></name> <operator>-</operator> <literal type="number">2.0</literal> <operator>*</operator> <name>sunTheta</name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>zenithY</name> <operator>=</operator> <operator>(</operator><literal type="number">4.0453</literal> <operator>*</operator> <name>T</name> <operator>-</operator> <literal type="number">4.9710</literal><operator>)</operator> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>tan</name></name><argument_list>(<argument><expr><name>chi</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">0.2155</literal> <operator>*</operator> <name>T</name> <operator>+</operator> <literal type="number">2.4192</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>zenithY</name> <operator>*=</operator> <literal type="number">1000</literal></expr>;</expr_stmt> <comment type="block">/* conversion from kcd/m^2 to cd/m^2 */</comment>
        <expr_stmt><expr><name>zenithx</name> <operator>=</operator> <operator>(</operator><literal type="number">0.00165</literal> <operator>*</operator> <name>theta3</name> <operator>-</operator> <literal type="number">0.00374</literal> <operator>*</operator> <name>theta2</name> <operator>+</operator> <literal type="number">0.00208</literal> <operator>*</operator> <name>sunTheta</name> <operator>+</operator> <literal type="number">0</literal><operator>)</operator> <operator>*</operator> <name>T2</name> <operator>+</operator> <operator>(</operator><operator>-</operator><literal type="number">0.02902</literal> <operator>*</operator> <name>theta3</name> <operator>+</operator> <literal type="number">0.06377</literal> <operator>*</operator> <name>theta2</name> <operator>-</operator> <literal type="number">0.03202</literal> <operator>*</operator> <name>sunTheta</name> <operator>+</operator> <literal type="number">0.00394</literal><operator>)</operator> <operator>*</operator> <name>T</name> <operator>+</operator> <operator>(</operator><literal type="number">0.11693</literal> <operator>*</operator> <name>theta3</name> <operator>-</operator> <literal type="number">0.21196</literal> <operator>*</operator> <name>theta2</name> <operator>+</operator> <literal type="number">0.06052</literal> <operator>*</operator> <name>sunTheta</name> <operator>+</operator> <literal type="number">0.25885</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>zenithy</name> <operator>=</operator> <operator>(</operator><literal type="number">0.00275</literal> <operator>*</operator> <name>theta3</name> <operator>-</operator> <literal type="number">0.00610</literal> <operator>*</operator> <name>theta2</name> <operator>+</operator> <literal type="number">0.00316</literal> <operator>*</operator> <name>sunTheta</name> <operator>+</operator> <literal type="number">0</literal><operator>)</operator> <operator>*</operator> <name>T2</name> <operator>+</operator> <operator>(</operator><operator>-</operator><literal type="number">0.04212</literal> <operator>*</operator> <name>theta3</name> <operator>+</operator> <literal type="number">0.08970</literal> <operator>*</operator> <name>theta2</name> <operator>-</operator> <literal type="number">0.04153</literal> <operator>*</operator> <name>sunTheta</name> <operator>+</operator> <literal type="number">0.00515</literal><operator>)</operator> <operator>*</operator> <name>T</name> <operator>+</operator> <operator>(</operator><literal type="number">0.15346</literal> <operator>*</operator> <name>theta3</name> <operator>-</operator> <literal type="number">0.26756</literal> <operator>*</operator> <name>theta2</name> <operator>+</operator> <literal type="number">0.06669</literal> <operator>*</operator> <name>sunTheta</name> <operator>+</operator> <literal type="number">0.26688</literal><operator>)</operator></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>perezY</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0.17872</literal> <operator>*</operator> <name>T</name> <operator>-</operator> <literal type="number">1.46303</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>perezY</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">0.35540</literal> <operator>*</operator> <name>T</name> <operator>+</operator> <literal type="number">0.42749</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>perezY</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">0.02266</literal> <operator>*</operator> <name>T</name> <operator>+</operator> <literal type="number">5.32505</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>perezY</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0.12064</literal> <operator>*</operator> <name>T</name> <operator>-</operator> <literal type="number">2.57705</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>perezY</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">0.06696</literal> <operator>*</operator> <name>T</name> <operator>+</operator> <literal type="number">0.37027</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>perezx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">0.01925</literal> <operator>*</operator> <name>T</name> <operator>-</operator> <literal type="number">0.25922</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>perezx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">0.06651</literal> <operator>*</operator> <name>T</name> <operator>+</operator> <literal type="number">0.00081</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>perezx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">0.00041</literal> <operator>*</operator> <name>T</name> <operator>+</operator> <literal type="number">0.21247</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>perezx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">0.06409</literal> <operator>*</operator> <name>T</name> <operator>-</operator> <literal type="number">0.89887</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>perezx</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">0.00325</literal> <operator>*</operator> <name>T</name> <operator>+</operator> <literal type="number">0.04517</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>perezy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">0.01669</literal> <operator>*</operator> <name>T</name> <operator>-</operator> <literal type="number">0.26078</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>perezy</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">0.09495</literal> <operator>*</operator> <name>T</name> <operator>+</operator> <literal type="number">0.00921</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>perezy</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">0.00792</literal> <operator>*</operator> <name>T</name> <operator>+</operator> <literal type="number">0.21023</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>perezy</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">0.04405</literal> <operator>*</operator> <name>T</name> <operator>-</operator> <literal type="number">1.65369</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>perezy</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">0.01092</literal> <operator>*</operator> <name>T</name> <operator>+</operator> <literal type="number">0.05291</literal></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>w</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>, <decl><type ref="prev"/><name>h</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>imageHistogram</name> <operator>=</operator> <operator>new</operator> <name><name>float</name><index>[<expr><name>w</name></expr>]</index><index>[<expr><name>h</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>colHistogram</name> <operator>=</operator> <operator>new</operator> <name><name>float</name><index>[<expr><name>w</name></expr>]</index></name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>du</name> <init>= <expr><literal type="number">1.0f</literal> <operator>/</operator> <name>w</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>dv</name> <init>= <expr><literal type="number">1.0f</literal> <operator>/</operator> <name>h</name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>float</name></type> <name>u</name> <init>= <expr><operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">0.5f</literal><operator>)</operator> <operator>*</operator> <name>du</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>float</name></type> <name>v</name> <init>= <expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">0.5f</literal><operator>)</operator> <operator>*</operator> <name>dv</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Color</name></type> <name>c</name> <init>= <expr><call><name>getSkyRGB</name><argument_list>(<argument><expr><call><name>getDirection</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>imageHistogram</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <call><name><name>c</name><operator>.</operator><name>getLuminance</name></name><argument_list>()</argument_list></call> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><name><name>Math</name><operator>.</operator><name>PI</name></name> <operator>*</operator> <name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name><name>imageHistogram</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name> <operator>+=</operator> <name><name>imageHistogram</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name><name>colHistogram</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>imageHistogram</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>h</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>colHistogram</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+=</operator> <name><name>colHistogram</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>imageHistogram</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name> <operator>/=</operator> <name><name>imageHistogram</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>h</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
        </block_content>}</block></for>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>colHistogram</name><index>[<expr><name>x</name></expr>]</index></name> <operator>/=</operator> <name><name>colHistogram</name><index>[<expr><name>w</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt><expr><name>jacobian</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name> <operator>*</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>w</name> <operator>*</operator> <name>h</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>ParameterList</name></type> <name>pl</name></decl></parameter>, <parameter><decl><type><name>SunflowAPI</name></type> <name>api</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Vector3</name></type> <name>up</name> <init>= <expr><call><name><name>pl</name><operator>.</operator><name>getVector</name></name><argument_list>(<argument><expr><literal type="string">"up"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Vector3</name></type> <name>east</name> <init>= <expr><call><name><name>pl</name><operator>.</operator><name>getVector</name></name><argument_list>(<argument><expr><literal type="string">"east"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>up</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>east</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>basis</name> <operator>=</operator> <call><name><name>OrthoNormalBasis</name><operator>.</operator><name>makeFromWV</name></name><argument_list>(<argument><expr><name>up</name></expr></argument>, <argument><expr><name>east</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>up</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>basis</name> <operator>=</operator> <call><name><name>OrthoNormalBasis</name><operator>.</operator><name>makeFromW</name></name><argument_list>(<argument><expr><name>up</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>numSkySamples</name> <operator>=</operator> <call><name><name>pl</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"samples"</literal></expr></argument>, <argument><expr><name>numSkySamples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>sunDirWorld</name> <operator>=</operator> <call><name><name>pl</name><operator>.</operator><name>getVector</name></name><argument_list>(<argument><expr><literal type="string">"sundir"</literal></expr></argument>, <argument><expr><name>sunDirWorld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>turbidity</name> <operator>=</operator> <call><name><name>pl</name><operator>.</operator><name>getFloat</name></name><argument_list>(<argument><expr><literal type="string">"turbidity"</literal></expr></argument>, <argument><expr><name>turbidity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// recompute model</comment>
        <expr_stmt><expr><call><name>initSunSky</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>SunflowAPI</name></type> <name>api</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// register this object with the api properly</comment>
        <expr_stmt><expr><call><name><name>api</name><operator>.</operator><name>geometry</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>api</name><operator>.</operator><name>shader</name></name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <literal type="string">".shader"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>api</name><operator>.</operator><name>parameter</name></name><argument_list>(<argument><expr><literal type="string">"shaders"</literal></expr></argument>, <argument><expr><name>name</name> <operator>+</operator> <literal type="string">".shader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>api</name><operator>.</operator><name>instance</name></name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <literal type="string">".instance"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>api</name><operator>.</operator><name>light</name></name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <literal type="string">".light"</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Color</name></type> <name>getSkyRGB</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>dir</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>dir</name><operator>.</operator><name>z</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name><name>Color</name><operator>.</operator><name>BLACK</name></name></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>dir</name><operator>.</operator><name>z</name></name> <operator>&lt;</operator> <literal type="number">0.001f</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>dir</name><operator>.</operator><name>z</name></name> <operator>=</operator> <literal type="number">0.001f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>dir</name><operator>.</operator><name>normalize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>theta</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>acos</name></name><argument_list>(<argument><expr><call><name><name>MathUtils</name><operator>.</operator><name>clamp</name></name><argument_list>(<argument><expr><name><name>dir</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>gamma</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>acos</name></name><argument_list>(<argument><expr><call><name><name>MathUtils</name><operator>.</operator><name>clamp</name></name><argument_list>(<argument><expr><call><name><name>Vector3</name><operator>.</operator><name>dot</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>sunDir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x</name> <init>= <expr><call><name>perezFunction</name><argument_list>(<argument><expr><name>perezx</name></expr></argument>, <argument><expr><name>theta</name></expr></argument>, <argument><expr><name>gamma</name></expr></argument>, <argument><expr><name>zenithx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y</name> <init>= <expr><call><name>perezFunction</name><argument_list>(<argument><expr><name>perezy</name></expr></argument>, <argument><expr><name>theta</name></expr></argument>, <argument><expr><name>gamma</name></expr></argument>, <argument><expr><name>zenithy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>Y</name> <init>= <expr><call><name>perezFunction</name><argument_list>(<argument><expr><name>perezY</name></expr></argument>, <argument><expr><name>theta</name></expr></argument>, <argument><expr><name>gamma</name></expr></argument>, <argument><expr><name>zenithY</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1e-4</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>XYZColor</name></type> <name>c</name> <init>= <expr><call><name><name>ChromaticitySpectrum</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <name>x</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator> <name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// XYZColor c = new ChromaticitySpectrum((float) x, (float) y).toXYZ();</comment>
        <decl_stmt><decl><type><name>float</name></type> <name>X</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><call><name><name>c</name><operator>.</operator><name>getX</name></name><argument_list>()</argument_list></call> <operator>*</operator> <name>Y</name> <operator>/</operator> <call><name><name>c</name><operator>.</operator><name>getY</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>Z</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><call><name><name>c</name><operator>.</operator><name>getZ</name></name><argument_list>()</argument_list></call> <operator>*</operator> <name>Y</name> <operator>/</operator> <call><name><name>c</name><operator>.</operator><name>getY</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>RGBSpace</name><operator>.</operator><name>SRGB</name><operator>.</operator><name>convertXYZtoRGB</name></name><argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator> <name>Y</name></expr></argument>, <argument><expr><name>Z</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getNumSamples</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="number">1</literal> <operator>+</operator> <name>numSkySamples</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>getPhoton</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>randX1</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>randY1</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>randX2</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>randY2</name></decl></parameter>, <parameter><decl><type><name>Point3</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>power</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// FIXME: not implemented</comment>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>float</name></type> <name>getPower</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>getSamples</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>Vector3</name><operator>.</operator><name>dot</name></name><argument_list>(<argument><expr><name>sunDirWorld</name></expr></argument>, <argument><expr><call><name><name>state</name><operator>.</operator><name>getGeoNormal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>Vector3</name><operator>.</operator><name>dot</name></name><argument_list>(<argument><expr><name>sunDirWorld</name></expr></argument>, <argument><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>LightSample</name></type> <name>dest</name> <init>= <expr><operator>new</operator> <call><name>LightSample</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>setShadowRay</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Ray</name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>sunDirWorld</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>getShadowRay</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setMax</name><argument_list>(<argument><expr><name><name>Float</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>setRadiance</name></name><argument_list>(<argument><expr><name>sunColor</name></expr></argument>, <argument><expr><name>sunColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>traceShadow</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>addSample</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><ternary><condition><expr><call><name><name>state</name><operator>.</operator><name>getDiffuseDepth</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>numSkySamples</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <comment type="line">// random offset on unit square, we use the infinite version of</comment>
            <comment type="line">// getRandom because the light sampling is adaptive</comment>
            <decl_stmt><decl><type><name>double</name></type> <name>randX</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>getRandom</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>randY</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>getRandom</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>randX</name> <operator>&gt;=</operator> <name><name>colHistogram</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;</operator> <name><name>colHistogram</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>x</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
            <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>rowHistogram</name> <init>= <expr><name><name>imageHistogram</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>randY</name> <operator>&gt;=</operator> <name><name>rowHistogram</name><index>[<expr><name>y</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <name><name>rowHistogram</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>y</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
            <comment type="line">// sample from (x, y)</comment>
            <decl_stmt><decl><type><name>float</name></type> <name>u</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>x</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>randX</name> <operator>/</operator> <name><name>colHistogram</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><operator>(</operator><name>randX</name> <operator>-</operator> <name><name>colHistogram</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>colHistogram</name><index>[<expr><name>x</name></expr>]</index></name> <operator>-</operator> <name><name>colHistogram</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>v</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>y</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>randY</name> <operator>/</operator> <name><name>rowHistogram</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><operator>(</operator><name>randY</name> <operator>-</operator> <name><name>rowHistogram</name><index>[<expr><name>y</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>rowHistogram</name><index>[<expr><name>y</name></expr>]</index></name> <operator>-</operator> <name><name>rowHistogram</name><index>[<expr><name>y</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>float</name></type> <name>px</name> <init>= <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>x</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>colHistogram</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><operator>(</operator><name><name>colHistogram</name><index>[<expr><name>x</name></expr>]</index></name> <operator>-</operator> <name><name>colHistogram</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>py</name> <init>= <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>y</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>rowHistogram</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><operator>(</operator><name><name>rowHistogram</name><index>[<expr><name>y</name></expr>]</index></name> <operator>-</operator> <name><name>rowHistogram</name><index>[<expr><name>y</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>float</name></type> <name>su</name> <init>= <expr><operator>(</operator><name>x</name> <operator>+</operator> <name>u</name><operator>)</operator> <operator>/</operator> <name><name>colHistogram</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>sv</name> <init>= <expr><operator>(</operator><name>y</name> <operator>+</operator> <name>v</name><operator>)</operator> <operator>/</operator> <name><name>rowHistogram</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>invP</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><name>sv</name> <operator>*</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>jacobian</name> <operator>/</operator> <operator>(</operator><name>n</name> <operator>*</operator> <name>px</name> <operator>*</operator> <name>py</name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Vector3</name></type> <name>localDir</name> <init>= <expr><call><name>getDirection</name><argument_list>(<argument><expr><name>su</name></expr></argument>, <argument><expr><name>sv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Vector3</name></type> <name>dir</name> <init>= <expr><call><name><name>basis</name><operator>.</operator><name>transform</name></name><argument_list>(<argument><expr><name>localDir</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Vector3</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>Vector3</name><operator>.</operator><name>dot</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><call><name><name>state</name><operator>.</operator><name>getGeoNormal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>Vector3</name><operator>.</operator><name>dot</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>LightSample</name></type> <name>dest</name> <init>= <expr><operator>new</operator> <call><name>LightSample</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>setShadowRay</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Ray</name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>getShadowRay</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setMax</name><argument_list>(<argument><expr><name><name>Float</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>Color</name></type> <name>radiance</name> <init>= <expr><call><name>getSkyRGB</name><argument_list>(<argument><expr><name>localDir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>setRadiance</name></name><argument_list>(<argument><expr><name>radiance</name></expr></argument>, <argument><expr><name>radiance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>getDiffuseRadiance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>mul</name><argument_list>(<argument><expr><name>invP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>getSpecularRadiance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>mul</name><argument_list>(<argument><expr><name>invP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>traceShadow</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>addSample</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>PrimitiveList</name></type> <name>getBakingPrimitives</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getNumPrimitives</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>float</name></type> <name>getPrimitiveBound</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>primID</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>BoundingBox</name></type> <name>getWorldBounds</name><parameter_list>(<parameter><decl><type><name>Matrix4</name></type> <name>o2w</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>intersectPrimitive</name><parameter_list>(<parameter><decl><type><name>Ray</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>primID</name></decl></parameter>, <parameter><decl><type><name>IntersectionState</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>r</name><operator>.</operator><name>getMax</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Float</name><operator>.</operator><name>POSITIVE_INFINITY</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>setIntersection</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>prepareShadingState</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>state</name><operator>.</operator><name>includeLights</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>setShader</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Color</name></type> <name>getRadiance</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getSkyRGB</name><argument_list>(<argument><expr><call><name><name>basis</name><operator>.</operator><name>untransform</name></name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getRay</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDirection</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>constrainRGB</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>scatterPhoton</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>power</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// let photon escape</comment>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Vector3</name></type> <name>getDirection</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Vector3</name></type> <name>dest</name> <init>= <expr><operator>new</operator> <call><name>Vector3</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>phi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>theta</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>theta</name> <operator>=</operator> <name>u</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>phi</name> <operator>=</operator> <name>v</name> <operator>*</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>sin_phi</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><name>phi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><operator>-</operator><name>sin_phi</name> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name>phi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>z</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><name>sin_phi</name> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
        <return>return <expr><name>dest</name></expr>;</return>
    </block_content>}</block></function>
}</block></class></unit>
