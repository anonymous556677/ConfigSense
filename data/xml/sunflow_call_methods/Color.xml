<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/sunflow/src/org/sunflow/image/Color.java"><package>package <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>image</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>MathUtils</name></name>;</import>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>Color</name> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Color</name></type> <name>BLACK</name> <init>= <expr><operator>new</operator> <call><name>Color</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Color</name></type> <name>WHITE</name> <init>= <expr><operator>new</operator> <call><name>Color</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Color</name></type> <name>RED</name> <init>= <expr><operator>new</operator> <call><name>Color</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Color</name></type> <name>GREEN</name> <init>= <expr><operator>new</operator> <call><name>Color</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Color</name></type> <name>BLUE</name> <init>= <expr><operator>new</operator> <call><name>Color</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Color</name></type> <name>YELLOW</name> <init>= <expr><operator>new</operator> <call><name>Color</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Color</name></type> <name>CYAN</name> <init>= <expr><operator>new</operator> <call><name>Color</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Color</name></type> <name>MAGENTA</name> <init>= <expr><operator>new</operator> <call><name>Color</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Color</name></type> <name>GRAY</name> <init>= <expr><operator>new</operator> <call><name>Color</name><argument_list>(<argument><expr><literal type="number">0.5f</literal></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Color</name></type> <name>black</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>Color</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Color</name></type> <name>white</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>Color</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>float</name><index>[]</index></name></type> <name>EXPONENT</name> <init>= <expr><operator>new</operator> <name><name>float</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>SRGB_CURVE</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>SRGB_CURVE_INV</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <static>static <block>{<block_content>
        <expr_stmt><expr><name><name>EXPONENT</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>float</name></type> <name>f</name> <init>= <expr><literal type="number">1.0f</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><name>i</name> <operator>-</operator> <operator>(</operator><literal type="number">128</literal> <operator>+</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>e</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>e</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>f</name> <operator>*=</operator> <literal type="number">2.0f</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>-</operator><name>e</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>f</name> <operator>*=</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></else></if_stmt>
            <expr_stmt><expr><name><name>EXPONENT</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></static>

    <static>static <block>{<block_content>
        <decl_stmt><decl><type><name>float</name></type> <name>inv</name> <init>= <expr><literal type="number">1.0f</literal> <operator>/</operator> <literal type="number">255</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>float</name></type> <name>c</name> <init>= <expr><name>i</name> <operator>*</operator> <name>inv</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>SRGB_CURVE</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>MathUtils</name><operator>.</operator><name>clamp</name></name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><call><name>sRGBCurve</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">255</literal> <operator>+</operator> <literal type="number">0.5f</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>SRGB_CURVE_INV</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>MathUtils</name><operator>.</operator><name>clamp</name></name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><call><name>sRGBCurveInverse</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">255</literal> <operator>+</operator> <literal type="number">0.5f</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></static>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>float</name></type> <name>sRGBCurve</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <literal type="number">0.00304</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">12.92f</literal> <operator>*</operator> <name>c</name></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <return>return <expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><literal type="number">1.055</literal> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">2.4</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">0.055</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>float</name></type> <name>sRGBCurveInverse</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <literal type="number">0.03928</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>c</name> <operator>/</operator> <literal type="number">12.92f</literal></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <return>return <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><operator>(</operator><name>c</name> <operator>+</operator> <literal type="number">0.055</literal><operator>)</operator> <operator>/</operator> <literal type="number">1.055</literal></expr></argument>, <argument><expr><literal type="number">2.4</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></function>

    <constructor><specifier>public</specifier> <name>Color</name><parameter_list>()</parameter_list> <block>{<block_content>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>Color</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>gray</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>r</name> <operator>=</operator> <name>g</name> <operator>=</operator> <name>b</name> <operator>=</operator> <name>gray</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>Color</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>r</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>g</name></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>b</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>Color</name></type> <name>toNonLinear</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>sRGBCurve</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>sRGBCurve</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>sRGBCurve</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Color</name></type> <name>toLinear</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>sRGBCurveInverse</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>sRGBCurveInverse</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>sRGBCurveInverse</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>rgbToLinear</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rgb</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// convert a packed RGB triplet to a linearized one by applying the</comment>
        <comment type="line">// proper LUT</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>rp</name> <init>= <expr><name><name>SRGB_CURVE_INV</name><index>[<expr><operator>(</operator><name>rgb</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>gp</name> <init>= <expr><name><name>SRGB_CURVE_INV</name><index>[<expr><operator>(</operator><name>rgb</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>bp</name> <init>= <expr><name><name>SRGB_CURVE_INV</name><index>[<expr><name>rgb</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>(</operator><name>rp</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>gp</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>bp</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>rgbFromLinear</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rgb</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// convert a packed RGB triple to non-linear one by applying the proper</comment>
        <comment type="line">// LUT</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>rp</name> <init>= <expr><name><name>SRGB_CURVE</name><index>[<expr><operator>(</operator><name>rgb</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>gp</name> <init>= <expr><name><name>SRGB_CURVE</name><index>[<expr><operator>(</operator><name>rgb</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>bp</name> <init>= <expr><name><name>SRGB_CURVE</name><index>[<expr><name>rgb</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>(</operator><name>rp</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>gp</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>bp</name></expr>;</return>
    </block_content>}</block></function>

    <constructor><specifier>public</specifier> <name>Color</name><parameter_list>(<parameter><decl><type><name>Color</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>c</name><operator>.</operator><name>r</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>c</name><operator>.</operator><name>g</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>c</name><operator>.</operator><name>b</name></name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>Color</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rgb</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>rgb</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>/</operator> <literal type="number">255.0f</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>g</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>rgb</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>/</operator> <literal type="number">255.0f</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>rgb</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>/</operator> <literal type="number">255.0f</literal></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>Color</name></type> <name>copy</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>Color</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>Color</name></type> <name>set</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>r</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>g</name></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>b</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>Color</name></type> <name>set</name><parameter_list>(<parameter><decl><type><name>Color</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>c</name><operator>.</operator><name>r</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>c</name><operator>.</operator><name>g</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>c</name><operator>.</operator><name>b</name></name></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>Color</name></type> <name>setRGB</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rgb</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>rgb</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>/</operator> <literal type="number">255.0f</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>g</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>rgb</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>/</operator> <literal type="number">255.0f</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>rgb</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>/</operator> <literal type="number">255.0f</literal></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>Color</name></type> <name>setRGBE</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rgbe</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>float</name></type> <name>f</name> <init>= <expr><name><name>EXPONENT</name><index>[<expr><name>rgbe</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>r</name> <operator>=</operator> <name>f</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>rgbe</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>+</operator> <literal type="number">0.5f</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>g</name> <operator>=</operator> <name>f</name> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>rgbe</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>+</operator> <literal type="number">0.5f</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> <operator>=</operator> <name>f</name> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>rgbe</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>+</operator> <literal type="number">0.5f</literal><operator>)</operator></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>isBlack</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>r</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>g</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>float</name></type> <name>getLuminance</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><literal type="number">0.2989f</literal> <operator>*</operator> <name>r</name><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">0.5866f</literal> <operator>*</operator> <name>g</name><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">0.1145f</literal> <operator>*</operator> <name>b</name><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>float</name></type> <name>getMin</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>MathUtils</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>float</name></type> <name>getMax</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>MathUtils</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>float</name></type> <name>getAverage</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>r</name> <operator>+</operator> <name>g</name> <operator>+</operator> <name>b</name><operator>)</operator> <operator>/</operator> <literal type="number">3.0f</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name><name>float</name><index>[]</index></name></type> <name>getRGB</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <name><name>float</name><index>[]</index></name> <block>{ <expr><name>r</name></expr>, <expr><name>g</name></expr>, <expr><name>b</name></expr> }</block></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>toRGB</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>ir</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>r</name> <operator>*</operator> <literal type="number">255</literal> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>ig</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>g</name> <operator>*</operator> <literal type="number">255</literal> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>ib</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>b</name> <operator>*</operator> <literal type="number">255</literal> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>ir</name> <operator>=</operator> <call><name><name>MathUtils</name><operator>.</operator><name>clamp</name></name><argument_list>(<argument><expr><name>ir</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ig</name> <operator>=</operator> <call><name><name>MathUtils</name><operator>.</operator><name>clamp</name></name><argument_list>(<argument><expr><name>ig</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ib</name> <operator>=</operator> <call><name><name>MathUtils</name><operator>.</operator><name>clamp</name></name><argument_list>(<argument><expr><name>ib</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>(</operator><name>ir</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>ig</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>ib</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>toRGBE</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// encode the color into 32bits while preserving HDR using Ward's RGBE</comment>
        <comment type="line">// technique</comment>
        <decl_stmt><decl><type><name>float</name></type> <name>v</name> <init>= <expr><call><name><name>MathUtils</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">1e-32f</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <comment type="line">// get mantissa and exponent</comment>
        <decl_stmt><decl><type><name>float</name></type> <name>m</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;</operator> <literal type="number">1.0f</literal></expr>)</condition> <block>{<block_content>
            <while>while <condition>(<expr><name>m</name> <operator>&gt;</operator> <literal type="number">1.0f</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>m</name> <operator>*=</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>e</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></while>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>v</name> <operator>&lt;=</operator> <literal type="number">0.5f</literal></expr>)</condition> <block>{<block_content>
            <while>while <condition>(<expr><name>m</name> <operator>&lt;=</operator> <literal type="number">0.5f</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>m</name> <operator>*=</operator> <literal type="number">2.0f</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>e</name><operator>--</operator></expr>;</expr_stmt>
            </block_content>}</block></while>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>m</name> <operator>*</operator> <literal type="number">255.0f</literal><operator>)</operator> <operator>/</operator> <name>v</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>e</name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>c</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>r</name> <operator>*</operator> <name>v</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>c</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>g</name> <operator>*</operator> <name>v</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>c</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>b</name> <operator>*</operator> <name>v</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
        <return>return <expr><name>c</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>Color</name></type> <name>constrainRGB</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// clamp the RGB value to a representable value</comment>
        <decl_stmt><decl><type><name>float</name></type> <name>w</name> <init>= <expr><operator>-</operator><call><name><name>MathUtils</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>w</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>r</name> <operator>+=</operator> <name>w</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>g</name> <operator>+=</operator> <name>w</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>b</name> <operator>+=</operator> <name>w</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>isNan</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>Float</name><operator>.</operator><name>isNaN</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>Float</name><operator>.</operator><name>isNaN</name></name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>Float</name><operator>.</operator><name>isNaN</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>isInf</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>Float</name><operator>.</operator><name>isInfinite</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>Float</name><operator>.</operator><name>isInfinite</name></name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>Float</name><operator>.</operator><name>isInfinite</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>Color</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>Color</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>r</name> <operator>+=</operator> <name><name>c</name><operator>.</operator><name>r</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>g</name> <operator>+=</operator> <name><name>c</name><operator>.</operator><name>g</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>c</name><operator>.</operator><name>b</name></name></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Color</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>Color</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>c2</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>Color</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Color</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Color</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>Color</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>dest</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>r</name></name> <operator>=</operator> <name><name>c1</name><operator>.</operator><name>r</name></name> <operator>+</operator> <name><name>c2</name><operator>.</operator><name>r</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>g</name></name> <operator>=</operator> <name><name>c1</name><operator>.</operator><name>g</name></name> <operator>+</operator> <name><name>c2</name><operator>.</operator><name>g</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>b</name></name> <operator>=</operator> <name><name>c1</name><operator>.</operator><name>b</name></name> <operator>+</operator> <name><name>c2</name><operator>.</operator><name>b</name></name></expr>;</expr_stmt>
        <return>return <expr><name>dest</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>Color</name></type> <name>madd</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>r</name> <operator>+=</operator> <operator>(</operator><name>s</name> <operator>*</operator> <name><name>c</name><operator>.</operator><name>r</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>g</name> <operator>+=</operator> <operator>(</operator><name>s</name> <operator>*</operator> <name><name>c</name><operator>.</operator><name>g</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><name>s</name> <operator>*</operator> <name><name>c</name><operator>.</operator><name>b</name></name><operator>)</operator></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>Color</name></type> <name>madd</name><parameter_list>(<parameter><decl><type><name>Color</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>r</name> <operator>+=</operator> <name><name>s</name><operator>.</operator><name>r</name></name> <operator>*</operator> <name><name>c</name><operator>.</operator><name>r</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>g</name> <operator>+=</operator> <name><name>s</name><operator>.</operator><name>g</name></name> <operator>*</operator> <name><name>c</name><operator>.</operator><name>g</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>s</name><operator>.</operator><name>b</name></name> <operator>*</operator> <name><name>c</name><operator>.</operator><name>b</name></name></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>Color</name></type> <name>sub</name><parameter_list>(<parameter><decl><type><name>Color</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>r</name> <operator>-=</operator> <name><name>c</name><operator>.</operator><name>r</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>g</name> <operator>-=</operator> <name><name>c</name><operator>.</operator><name>g</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> <operator>-=</operator> <name><name>c</name><operator>.</operator><name>b</name></name></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Color</name></type> <name>sub</name><parameter_list>(<parameter><decl><type><name>Color</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>c2</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>Color</name><operator>.</operator><name>sub</name></name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Color</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Color</name></type> <name>sub</name><parameter_list>(<parameter><decl><type><name>Color</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>dest</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>r</name></name> <operator>=</operator> <name><name>c1</name><operator>.</operator><name>r</name></name> <operator>-</operator> <name><name>c2</name><operator>.</operator><name>r</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>g</name></name> <operator>=</operator> <name><name>c1</name><operator>.</operator><name>g</name></name> <operator>-</operator> <name><name>c2</name><operator>.</operator><name>g</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>b</name></name> <operator>=</operator> <name><name>c1</name><operator>.</operator><name>b</name></name> <operator>-</operator> <name><name>c2</name><operator>.</operator><name>b</name></name></expr>;</expr_stmt>
        <return>return <expr><name>dest</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>Color</name></type> <name>mul</name><parameter_list>(<parameter><decl><type><name>Color</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>r</name> <operator>*=</operator> <name><name>c</name><operator>.</operator><name>r</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>g</name> <operator>*=</operator> <name><name>c</name><operator>.</operator><name>g</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> <operator>*=</operator> <name><name>c</name><operator>.</operator><name>b</name></name></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Color</name></type> <name>mul</name><parameter_list>(<parameter><decl><type><name>Color</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>c2</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>Color</name><operator>.</operator><name>mul</name></name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Color</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Color</name></type> <name>mul</name><parameter_list>(<parameter><decl><type><name>Color</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>dest</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>r</name></name> <operator>=</operator> <name><name>c1</name><operator>.</operator><name>r</name></name> <operator>*</operator> <name><name>c2</name><operator>.</operator><name>r</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>g</name></name> <operator>=</operator> <name><name>c1</name><operator>.</operator><name>g</name></name> <operator>*</operator> <name><name>c2</name><operator>.</operator><name>g</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>b</name></name> <operator>=</operator> <name><name>c1</name><operator>.</operator><name>b</name></name> <operator>*</operator> <name><name>c2</name><operator>.</operator><name>b</name></name></expr>;</expr_stmt>
        <return>return <expr><name>dest</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>Color</name></type> <name>mul</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>r</name> <operator>*=</operator> <name>s</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>g</name> <operator>*=</operator> <name>s</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> <operator>*=</operator> <name>s</name></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Color</name></type> <name>mul</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>Color</name><operator>.</operator><name>mul</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Color</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Color</name></type> <name>mul</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>dest</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>r</name></name> <operator>=</operator> <name>s</name> <operator>*</operator> <name><name>c</name><operator>.</operator><name>r</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>g</name></name> <operator>=</operator> <name>s</name> <operator>*</operator> <name><name>c</name><operator>.</operator><name>g</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>b</name></name> <operator>=</operator> <name>s</name> <operator>*</operator> <name><name>c</name><operator>.</operator><name>b</name></name></expr>;</expr_stmt>
        <return>return <expr><name>dest</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>Color</name></type> <name>div</name><parameter_list>(<parameter><decl><type><name>Color</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>r</name> <operator>/=</operator> <name><name>c</name><operator>.</operator><name>r</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>g</name> <operator>/=</operator> <name><name>c</name><operator>.</operator><name>g</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> <operator>/=</operator> <name><name>c</name><operator>.</operator><name>b</name></name></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Color</name></type> <name>div</name><parameter_list>(<parameter><decl><type><name>Color</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>c2</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>Color</name><operator>.</operator><name>div</name></name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Color</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Color</name></type> <name>div</name><parameter_list>(<parameter><decl><type><name>Color</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>dest</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>r</name></name> <operator>=</operator> <name><name>c1</name><operator>.</operator><name>r</name></name> <operator>/</operator> <name><name>c2</name><operator>.</operator><name>r</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>g</name></name> <operator>=</operator> <name><name>c1</name><operator>.</operator><name>g</name></name> <operator>/</operator> <name><name>c2</name><operator>.</operator><name>g</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>b</name></name> <operator>=</operator> <name><name>c1</name><operator>.</operator><name>b</name></name> <operator>/</operator> <name><name>c2</name><operator>.</operator><name>b</name></name></expr>;</expr_stmt>
        <return>return <expr><name>dest</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>Color</name></type> <name>exp</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>exp</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>g</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>exp</name></name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>exp</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>Color</name></type> <name>opposite</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>r</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>g</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>g</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>b</name></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>Color</name></type> <name>clamp</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>max</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name><name>MathUtils</name><operator>.</operator><name>clamp</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>g</name> <operator>=</operator> <call><name><name>MathUtils</name><operator>.</operator><name>clamp</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name><name>MathUtils</name><operator>.</operator><name>clamp</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Color</name></type> <name>blend</name><parameter_list>(<parameter><decl><type><name>Color</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>blend</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Color</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Color</name></type> <name>blend</name><parameter_list>(<parameter><decl><type><name>Color</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>dest</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>r</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <name>b</name><operator>)</operator> <operator>*</operator> <name><name>c1</name><operator>.</operator><name>r</name></name> <operator>+</operator> <name>b</name> <operator>*</operator> <name><name>c2</name><operator>.</operator><name>r</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>g</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <name>b</name><operator>)</operator> <operator>*</operator> <name><name>c1</name><operator>.</operator><name>g</name></name> <operator>+</operator> <name>b</name> <operator>*</operator> <name><name>c2</name><operator>.</operator><name>g</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>b</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <name>b</name><operator>)</operator> <operator>*</operator> <name><name>c1</name><operator>.</operator><name>b</name></name> <operator>+</operator> <name>b</name> <operator>*</operator> <name><name>c2</name><operator>.</operator><name>b</name></name></expr>;</expr_stmt>
        <return>return <expr><name>dest</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Color</name></type> <name>blend</name><parameter_list>(<parameter><decl><type><name>Color</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>blend</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Color</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Color</name></type> <name>blend</name><parameter_list>(<parameter><decl><type><name>Color</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>dest</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>r</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <name><name>b</name><operator>.</operator><name>r</name></name><operator>)</operator> <operator>*</operator> <name><name>c1</name><operator>.</operator><name>r</name></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>r</name></name> <operator>*</operator> <name><name>c2</name><operator>.</operator><name>r</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>g</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <name><name>b</name><operator>.</operator><name>g</name></name><operator>)</operator> <operator>*</operator> <name><name>c1</name><operator>.</operator><name>g</name></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>g</name></name> <operator>*</operator> <name><name>c2</name><operator>.</operator><name>g</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>b</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <name><name>b</name><operator>.</operator><name>b</name></name><operator>)</operator> <operator>*</operator> <name><name>c1</name><operator>.</operator><name>b</name></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>b</name></name> <operator>*</operator> <name><name>c2</name><operator>.</operator><name>b</name></name></expr>;</expr_stmt>
        <return>return <expr><name>dest</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>hasContrast</name><parameter_list>(<parameter><decl><type><name>Color</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>c2</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>thresh</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name><name>c1</name><operator>.</operator><name>r</name></name> <operator>-</operator> <name><name>c2</name><operator>.</operator><name>r</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <operator>(</operator><name><name>c1</name><operator>.</operator><name>r</name></name> <operator>+</operator> <name><name>c2</name><operator>.</operator><name>r</name></name><operator>)</operator> <operator>&gt;</operator> <name>thresh</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name><name>c1</name><operator>.</operator><name>g</name></name> <operator>-</operator> <name><name>c2</name><operator>.</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <operator>(</operator><name><name>c1</name><operator>.</operator><name>g</name></name> <operator>+</operator> <name><name>c2</name><operator>.</operator><name>g</name></name><operator>)</operator> <operator>&gt;</operator> <name>thresh</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name><name>c1</name><operator>.</operator><name>b</name></name> <operator>-</operator> <name><name>c2</name><operator>.</operator><name>b</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <operator>(</operator><name><name>c1</name><operator>.</operator><name>b</name></name> <operator>+</operator> <name><name>c2</name><operator>.</operator><name>b</name></name><operator>)</operator> <operator>&gt;</operator> <name>thresh</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"(%.3f, %.3f, %.3f)"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class></unit>
