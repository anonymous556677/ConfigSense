<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/sunflow/src/org/sunflow/math/OrthoNormalBasis.java"><package>package <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name></name>;</package>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>OrthoNormalBasis</name> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>Vector3</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>OrthoNormalBasis</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>u</name> <operator>=</operator> <operator>new</operator> <call><name>Vector3</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>new</operator> <call><name>Vector3</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>w</name> <operator>=</operator> <operator>new</operator> <call><name>Vector3</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>flipU</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>u</name><operator>.</operator><name>negate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>flipV</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>negate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>flipW</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>negate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>swapUV</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Vector3</name></type> <name>t</name> <init>= <expr><name>u</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>u</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>v</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>swapVW</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Vector3</name></type> <name>t</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>v</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>w</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>swapWU</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Vector3</name></type> <name>t</name> <init>= <expr><name>w</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>w</name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>u</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Vector3</name></type> <name>transform</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>dest</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>x</name></name> <operator>*</operator> <name><name>u</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>y</name></name> <operator>*</operator> <name><name>v</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>z</name></name> <operator>*</operator> <name><name>w</name><operator>.</operator><name>x</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>x</name></name> <operator>*</operator> <name><name>u</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>y</name></name> <operator>*</operator> <name><name>v</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>z</name></name> <operator>*</operator> <name><name>w</name><operator>.</operator><name>y</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>z</name></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>x</name></name> <operator>*</operator> <name><name>u</name><operator>.</operator><name>z</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>y</name></name> <operator>*</operator> <name><name>v</name><operator>.</operator><name>z</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>z</name></name> <operator>*</operator> <name><name>w</name><operator>.</operator><name>z</name></name><operator>)</operator></expr>;</expr_stmt>
        <return>return <expr><name>dest</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Vector3</name></type> <name>transform</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><operator>(</operator><name><name>a</name><operator>.</operator><name>x</name></name> <operator>*</operator> <name><name>u</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>y</name></name> <operator>*</operator> <name><name>v</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>z</name></name> <operator>*</operator> <name><name>w</name><operator>.</operator><name>x</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>y</name> <init>= <expr><operator>(</operator><name><name>a</name><operator>.</operator><name>x</name></name> <operator>*</operator> <name><name>u</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>y</name></name> <operator>*</operator> <name><name>v</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>z</name></name> <operator>*</operator> <name><name>w</name><operator>.</operator><name>y</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>z</name> <init>= <expr><operator>(</operator><name><name>a</name><operator>.</operator><name>x</name></name> <operator>*</operator> <name><name>u</name><operator>.</operator><name>z</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>y</name></name> <operator>*</operator> <name><name>v</name><operator>.</operator><name>z</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>z</name></name> <operator>*</operator> <name><name>w</name><operator>.</operator><name>z</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>a</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Vector3</name></type> <name>untransform</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>dest</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name><name>Vector3</name><operator>.</operator><name>dot</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name><name>Vector3</name><operator>.</operator><name>dot</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>z</name></name> <operator>=</operator> <call><name><name>Vector3</name><operator>.</operator><name>dot</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>dest</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Vector3</name></type> <name>untransform</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><call><name><name>Vector3</name><operator>.</operator><name>dot</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>y</name> <init>= <expr><call><name><name>Vector3</name><operator>.</operator><name>dot</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>z</name> <init>= <expr><call><name><name>Vector3</name><operator>.</operator><name>dot</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>a</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>float</name></type> <name>untransformX</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>Vector3</name><operator>.</operator><name>dot</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>float</name></type> <name>untransformY</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>Vector3</name><operator>.</operator><name>dot</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>float</name></type> <name>untransformZ</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>Vector3</name><operator>.</operator><name>dot</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>OrthoNormalBasis</name></type> <name>makeFromW</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>w</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>OrthoNormalBasis</name></type> <name>onb</name> <init>= <expr><operator>new</operator> <call><name>OrthoNormalBasis</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>normalize</name></name><argument_list>(<argument><expr><name><name>onb</name><operator>.</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name><name>onb</name><operator>.</operator><name>w</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name><name>onb</name><operator>.</operator><name>w</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name><name>onb</name><operator>.</operator><name>w</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name><name>onb</name><operator>.</operator><name>w</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>onb</name><operator>.</operator><name>v</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>onb</name><operator>.</operator><name>v</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>onb</name><operator>.</operator><name>w</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>onb</name><operator>.</operator><name>v</name><operator>.</operator><name>z</name></name> <operator>=</operator> <operator>-</operator><name><name>onb</name><operator>.</operator><name>w</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name><name>onb</name><operator>.</operator><name>w</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name><name>onb</name><operator>.</operator><name>w</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>onb</name><operator>.</operator><name>v</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>onb</name><operator>.</operator><name>w</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>onb</name><operator>.</operator><name>v</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>onb</name><operator>.</operator><name>v</name><operator>.</operator><name>z</name></name> <operator>=</operator> <operator>-</operator><name><name>onb</name><operator>.</operator><name>w</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>onb</name><operator>.</operator><name>v</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>onb</name><operator>.</operator><name>w</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>onb</name><operator>.</operator><name>v</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>-</operator><name><name>onb</name><operator>.</operator><name>w</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>onb</name><operator>.</operator><name>v</name><operator>.</operator><name>z</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name><name>Vector3</name><operator>.</operator><name>cross</name></name><argument_list>(<argument><expr><call><name><name>onb</name><operator>.</operator><name>v</name><operator>.</operator><name>normalize</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>onb</name><operator>.</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>onb</name><operator>.</operator><name>u</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>onb</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>OrthoNormalBasis</name></type> <name>makeFromWV</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>OrthoNormalBasis</name></type> <name>onb</name> <init>= <expr><operator>new</operator> <call><name>OrthoNormalBasis</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>normalize</name></name><argument_list>(<argument><expr><name><name>onb</name><operator>.</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Vector3</name><operator>.</operator><name>cross</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>onb</name><operator>.</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>onb</name><operator>.</operator><name>u</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>normalize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Vector3</name><operator>.</operator><name>cross</name></name><argument_list>(<argument><expr><name><name>onb</name><operator>.</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>onb</name><operator>.</operator><name>u</name></name></expr></argument>, <argument><expr><name><name>onb</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>onb</name></expr>;</return>
    </block_content>}</block></function>
}</block></class></unit>
