<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/sunflow/src/org/sunflow/core/gi/GIEngineFactory.java"><package>package <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>gi</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>GIEngine</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>Options</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>system</name><operator>.</operator><name>UI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>system</name><operator>.</operator><name>UI</name><operator>.</operator><name>Module</name></name>;</import>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>GIEngineFactory</name> <block>{
    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>GIEngine</name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>Options</name></type> <name>options</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>type</name> <init>= <expr><call><name><name>options</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"gi.engine"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>type</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>type</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name><name>type</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"ambocc"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>new</operator> <call><name>AmbientOcclusionGIEngine</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name><name>type</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"fake"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>new</operator> <call><name>FakeGIEngine</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name><name>type</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"igi"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>new</operator> <call><name>InstantGI</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name><name>type</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"irr-cache"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>new</operator> <call><name>IrradianceCacheGIEngine</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name><name>type</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>new</operator> <call><name>PathTracingGIEngine</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
        <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printWarning</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"Unrecognized GI engine type \"%s\" - ignoring"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>
}</block></class></unit>
