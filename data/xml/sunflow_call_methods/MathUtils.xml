<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/sunflow/src/org/sunflow/math/MathUtils.java"><package>package <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name></name>;</package>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>MathUtils</name> <block>{
    <constructor><specifier>private</specifier> <name>MathUtils</name><parameter_list>()</parameter_list> <block>{<block_content>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>clamp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>max</name></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name>min</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>x</name></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><name>min</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>float</name></type> <name>clamp</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>max</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>max</name></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name>min</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>x</name></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><name>min</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>clamp</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>max</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>max</name></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name>min</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>x</name></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><name>min</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>min</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <name>c</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>a</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><name>a</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>float</name></type> <name>min</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <name>c</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>a</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><name>a</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>min</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <name>c</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>a</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><name>a</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>float</name></type> <name>min</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <name>c</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>a</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <name>d</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>a</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><name>a</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>max</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <name>c</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>a</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><name>a</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>float</name></type> <name>max</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <name>c</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>a</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><name>a</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>max</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <name>c</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>a</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><name>a</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>float</name></type> <name>max</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <name>c</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>a</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <name>d</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>a</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><name>a</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>float</name></type> <name>smoothStep</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;=</operator> <name>a</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>t</name> <init>= <expr><call><name>clamp</name><argument_list>(<argument><expr><operator>(</operator><name>x</name> <operator>-</operator> <name>a</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>b</name> <operator>-</operator> <name>a</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>t</name> <operator>*</operator> <name>t</name> <operator>*</operator> <operator>(</operator><literal type="number">3</literal> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>t</name><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Computes a fast approximation to &lt;code&gt;Math.pow(a, b)&lt;/code&gt;. Adapted
     * from &lt;url&gt;http://www.dctsystems.co.uk/Software/power.html&lt;/url&gt;.
     * 
     * @param a a positive number
     * @param b a number
     * @return a^b
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>float</name></type> <name>fastPow</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// adapted from: http://www.dctsystems.co.uk/Software/power.html</comment>
        <decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><call><name><name>Float</name><operator>.</operator><name>floatToRawIntBits</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>x</name> <operator>*=</operator> <literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>-</operator> <literal type="number">127</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>y</name> <init>= <expr><name>x</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>floor</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>b</name> <operator>*=</operator> <name>x</name> <operator>+</operator> <operator>(</operator><name>y</name> <operator>-</operator> <name>y</name> <operator>*</operator> <name>y</name><operator>)</operator> <operator>*</operator> <literal type="number">0.346607f</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <name>b</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>floor</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>-</operator> <name>y</name> <operator>*</operator> <name>y</name><operator>)</operator> <operator>*</operator> <literal type="number">0.33971f</literal></expr>;</expr_stmt>
        <return>return <expr><call><name><name>Float</name><operator>.</operator><name>intBitsToFloat</name></name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>b</name> <operator>+</operator> <literal type="number">127</literal> <operator>-</operator> <name>y</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class></unit>
