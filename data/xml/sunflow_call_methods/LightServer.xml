<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/sunflow/src/org/sunflow/core/LightServer.java"><package>package <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>gi</name><operator>.</operator><name>GIEngineFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>photonmap</name><operator>.</operator><name>CausticPhotonMap</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>image</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Point3</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>QMC</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Vector3</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>system</name><operator>.</operator><name>Timer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>system</name><operator>.</operator><name>UI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>system</name><operator>.</operator><name>UI</name><operator>.</operator><name>Module</name></name>;</import>

<class>class <name>LightServer</name> <block>{
    <comment type="line">// parent</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Scene</name></type> <name>scene</name></decl>;</decl_stmt>

    <comment type="line">// lighting</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>LightSource</name><index>[]</index></name></type> <name>lights</name></decl>;</decl_stmt>

    <comment type="line">// shading override</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Shader</name></type> <name>shaderOverride</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>shaderOverridePhotons</name></decl>;</decl_stmt>

    <comment type="line">// direct illumination</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>maxDiffuseDepth</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>maxReflectionDepth</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>maxRefractionDepth</name></decl>;</decl_stmt>

    <comment type="line">// indirect illumination</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>CausticPhotonMapInterface</name></type> <name>causticPhotonMap</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>GIEngine</name></type> <name>giEngine</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>photonCounter</name></decl>;</decl_stmt>

    <comment type="line">// shading cache</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>CacheEntry</name><index>[]</index></name></type> <name>shadingCache</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>shadingCacheResolution</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>cacheLookups</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>cacheEmptyEntryMisses</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>cacheWrongEntryMisses</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>cacheEntryAdditions</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>cacheHits</name></decl>;</decl_stmt>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>CacheEntry</name> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>cx</name></decl>, <decl><type ref="prev"/><name>cy</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Sample</name></type> <name>first</name></decl>;</decl_stmt>
    }</block></class>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>Sample</name> <block>{
        <decl_stmt><decl><type><name>Instance</name></type> <name>i</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Shader</name></type> <name>s</name></decl>;</decl_stmt>
        <comment type="line">// int prim;</comment>
        <decl_stmt><decl><type><name>float</name></type> <name>nx</name></decl>, <decl><type ref="prev"/><name>ny</name></decl>, <decl><type ref="prev"/><name>nz</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Color</name></type> <name>c</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Sample</name></type> <name>next</name></decl>;</decl_stmt> <comment type="line">// linked list</comment>
    }</block></class>

    <constructor><name>LightServer</name><parameter_list>(<parameter><decl><type><name>Scene</name></type> <name>scene</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>scene</name></name> <operator>=</operator> <name>scene</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>lights</name> <operator>=</operator> <operator>new</operator> <name><name>LightSource</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>causticPhotonMap</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>shaderOverride</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>shaderOverridePhotons</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>maxDiffuseDepth</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>maxReflectionDepth</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>maxRefractionDepth</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>causticPhotonMap</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>giEngine</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>shadingCache</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><name>void</name></type> <name>setLights</name><parameter_list>(<parameter><decl><type><name><name>LightSource</name><index>[]</index></name></type> <name>lights</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lights</name></name> <operator>=</operator> <name>lights</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>shadingCache</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>shadingRate</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>shadingCache</name> <operator>=</operator> <ternary><condition><expr><name>shadingRate</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>new</operator> <name><name>CacheEntry</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name>shadingCacheResolution</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><literal type="number">1</literal> <operator>/</operator> <call><name><name>Math</name><operator>.</operator><name>sqrt</name></name><argument_list>(<argument><expr><name>shadingRate</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>Scene</name></type> <name>getScene</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>scene</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>setShaderOverride</name><parameter_list>(<parameter><decl><type><name>Shader</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>photonOverride</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>shaderOverride</name> <operator>=</operator> <name>shader</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>shaderOverridePhotons</name> <operator>=</operator> <name>photonOverride</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>boolean</name></type> <name>build</name><parameter_list>(<parameter><decl><type><name>Options</name></type> <name>options</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// read options</comment>
        <expr_stmt><expr><name>maxDiffuseDepth</name> <operator>=</operator> <call><name><name>options</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"depths.diffuse"</literal></expr></argument>, <argument><expr><name>maxDiffuseDepth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>maxReflectionDepth</name> <operator>=</operator> <call><name><name>options</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"depths.reflection"</literal></expr></argument>, <argument><expr><name>maxReflectionDepth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>maxRefractionDepth</name> <operator>=</operator> <call><name><name>options</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"depths.refraction"</literal></expr></argument>, <argument><expr><name>maxRefractionDepth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>giEngine</name> <operator>=</operator> <call><name><name>GIEngineFactory</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>caustics</name> <init>= <expr><call><name><name>options</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"caustics"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>caustics</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>caustics</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>causticPhotonMap</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>caustics</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>caustics</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"kd"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>causticPhotonMap</name> <operator>=</operator> <operator>new</operator> <call><name>CausticPhotonMap</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printWarning</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"Unrecognized caustics photon map engine \"%s\" - ignoring"</literal></expr></argument>, <argument><expr><name>caustics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>causticPhotonMap</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// validate options</comment>
        <expr_stmt><expr><name>maxDiffuseDepth</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>maxDiffuseDepth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>maxReflectionDepth</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>maxReflectionDepth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>maxRefractionDepth</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>maxRefractionDepth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Timer</name></type> <name>t</name> <init>= <expr><operator>new</operator> <call><name>Timer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// count total number of light samples</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>numLightSamples</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>lights</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <assert>assert <expr><name><name>lights</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getNumSamples</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</assert>
            <expr_stmt><expr><name>numLightSamples</name> <operator>+=</operator> <name><name>lights</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getNumSamples</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <comment type="line">// initialize gi engine</comment>
        <if_stmt><if>if <condition>(<expr><name>giEngine</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>giEngine</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>calculatePhotons</name><argument_list>(<argument><expr><name>causticPhotonMap</name></expr></argument>, <argument><expr><literal type="string">"caustic"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cacheLookups</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>cacheHits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>cacheEmptyEntryMisses</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>cacheWrongEntryMisses</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>cacheEntryAdditions</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>shadingCache</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// clear shading cache</comment>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>shadingCache</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>shadingCache</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt></block_content></block></for>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"Light Server stats:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Light sources found: %d"</literal></expr></argument>, <argument><expr><name><name>lights</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Light samples:       %d"</literal></expr></argument>, <argument><expr><name>numLightSamples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Max raytrace depth:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"      - Diffuse          %d"</literal></expr></argument>, <argument><expr><name>maxDiffuseDepth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"      - Reflection       %d"</literal></expr></argument>, <argument><expr><name>maxReflectionDepth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"      - Refraction       %d"</literal></expr></argument>, <argument><expr><name>maxRefractionDepth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"  * GI engine            %s"</literal></expr></argument>, <argument><expr><call><name><name>options</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"gi.engine"</literal></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Caustics:            %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>caustics</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">"none"</literal></expr> </then><else>: <expr><name>caustics</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Shader override:     %b"</literal></expr></argument>, <argument><expr><name>shaderOverride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Photon override:     %b"</literal></expr></argument>, <argument><expr><name>shaderOverridePhotons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Shading cache:       %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>shadingCache</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">"off"</literal></expr> </then><else>: <expr><literal type="string">"on"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Build time:          %s"</literal></expr></argument>, <argument><expr><call><name><name>t</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>showStats</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>shadingCache</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>numUsedEntries</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>CacheEntry</name></type> <name>e</name> <range>: <expr><name>shadingCache</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name>numUsedEntries</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name>e</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"Shading cache stats:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Used entries:        %d (%d%%)"</literal></expr></argument>, <argument><expr><name>numUsedEntries</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">100</literal> <operator>*</operator> <name>numUsedEntries</name><operator>)</operator> <operator>/</operator> <name><name>shadingCache</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Lookups:             %d"</literal></expr></argument>, <argument><expr><name>cacheLookups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Hits:                %d"</literal></expr></argument>, <argument><expr><name>cacheHits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Hit rate:            %d%%"</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">100</literal> <operator>*</operator> <name>cacheHits</name><operator>)</operator> <operator>/</operator> <name>cacheLookups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Empty entry misses:  %d"</literal></expr></argument>, <argument><expr><name>cacheEmptyEntryMisses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Wrong entry misses:  %d"</literal></expr></argument>, <argument><expr><name>cacheWrongEntryMisses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Entry adds:          %d"</literal></expr></argument>, <argument><expr><name>cacheEntryAdditions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>boolean</name></type> <name>calculatePhotons</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>PhotonStore</name></type> <name>map</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>seed</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>map</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>lights</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printError</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"Unable to trace %s photons, no lights in scene"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>float</name><index>[]</index></name></type> <name>histogram</name> <init>= <expr><operator>new</operator> <name><name>float</name><index>[<expr><name><name>lights</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>histogram</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>lights</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>getPower</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>lights</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>histogram</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>histogram</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>lights</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getPower</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"Tracing %s photons ..."</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>numEmittedPhotons</name> <init>= <expr><call><name><name>map</name><operator>.</operator><name>numEmit</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>numEmittedPhotons</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>histogram</name><index>[<expr><name><name>histogram</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printError</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"Photon mapping enabled, but no %s photons to emit"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>prepare</name></name><argument_list>(<argument><expr><call><name><name>scene</name><operator>.</operator><name>getBounds</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>taskStart</name></name><argument_list>(<argument><expr><literal type="string">"Tracing "</literal> <operator>+</operator> <name>type</name> <operator>+</operator> <literal type="string">" photons"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>numEmittedPhotons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Thread</name><index>[]</index></name></type> <name>photonThreads</name> <init>= <expr><operator>new</operator> <name><name>Thread</name><index>[<expr><call><name><name>scene</name><operator>.</operator><name>getThreads</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>scale</name> <init>= <expr><literal type="number">1.0f</literal> <operator>/</operator> <name>numEmittedPhotons</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>delta</name> <init>= <expr><name>numEmittedPhotons</name> <operator>/</operator> <name><name>photonThreads</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>photonCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Timer</name></type> <name>photonTimer</name> <init>= <expr><operator>new</operator> <call><name>Timer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>photonTimer</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>photonThreads</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>threadID</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>start</name> <init>= <expr><name>threadID</name> <operator>*</operator> <name>delta</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>end</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>threadID</name> <operator>==</operator> <operator>(</operator><name><name>photonThreads</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><name>numEmittedPhotons</name></expr> </then><else>: <expr><operator>(</operator><name>threadID</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>delta</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>photonThreads</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>Thread</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
                    <decl_stmt><decl><type><name>IntersectionState</name></type> <name>istate</name> <init>= <expr><operator>new</operator> <call><name>IntersectionState</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                        <synchronized>synchronized <init>(<expr><name><name>LightServer</name><operator>.</operator><name>this</name></name></expr>)</init> <block>{<block_content>
                            <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>taskUpdate</name></name><argument_list>(<argument><expr><name>photonCounter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name>photonCounter</name><operator>++</operator></expr>;</expr_stmt>
                            <if_stmt><if>if <condition>(<expr><call><name><name>UI</name><operator>.</operator><name>taskCanceled</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                                <return>return;</return></block_content></block></if></if_stmt>
                        </block_content>}</block></synchronized>

                        <decl_stmt><decl><type><name>int</name></type> <name>qmcI</name> <init>= <expr><name>i</name> <operator>+</operator> <name>seed</name></expr></init></decl>;</decl_stmt>

                        <decl_stmt><decl><type><name>double</name></type> <name>rand</name> <init>= <expr><call><name><name>QMC</name><operator>.</operator><name>halton</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>qmcI</name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>histogram</name><index>[<expr><name><name>histogram</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                        <while>while <condition>(<expr><name>rand</name> <operator>&gt;=</operator> <name><name>histogram</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name><name>histogram</name><operator>.</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
                        <comment type="line">// make sure we didn't pick a zero-probability light</comment>
                        <if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name><name>histogram</name><operator>.</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content>
                            <continue>continue;</continue></block_content></block></if></if_stmt>

                        <decl_stmt><decl><type><name>double</name></type> <name>randX1</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>j</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>rand</name> <operator>/</operator> <name><name>histogram</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><operator>(</operator><name>rand</name> <operator>-</operator> <name><name>histogram</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>histogram</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <name><name>histogram</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>double</name></type> <name>randY1</name> <init>= <expr><call><name><name>QMC</name><operator>.</operator><name>halton</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>qmcI</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>double</name></type> <name>randX2</name> <init>= <expr><call><name><name>QMC</name><operator>.</operator><name>halton</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>qmcI</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>double</name></type> <name>randY2</name> <init>= <expr><call><name><name>QMC</name><operator>.</operator><name>halton</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>qmcI</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Point3</name></type> <name>pt</name> <init>= <expr><operator>new</operator> <call><name>Point3</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Vector3</name></type> <name>dir</name> <init>= <expr><operator>new</operator> <call><name>Vector3</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Color</name></type> <name>power</name> <init>= <expr><operator>new</operator> <call><name>Color</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name><name>lights</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>getPhoton</name><argument_list>(<argument><expr><name>randX1</name></expr></argument>, <argument><expr><name>randY1</name></expr></argument>, <argument><expr><name>randX2</name></expr></argument>, <argument><expr><name>randY2</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>power</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>power</name><operator>.</operator><name>mul</name></name><argument_list>(<argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name>Ray</name></type> <name>r</name> <init>= <expr><operator>new</operator> <call><name>Ray</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>scene</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>istate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><call><name><name>istate</name><operator>.</operator><name>hit</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><call><name>shadePhoton</name><argument_list>(<argument><expr><call><name><name>ShadingState</name><operator>.</operator><name>createPhotonState</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>istate</name></expr></argument>, <argument><expr><name>qmcI</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name><name>LightServer</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>power</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>photonThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>setPriority</name><argument_list>(<argument><expr><call><name><name>scene</name><operator>.</operator><name>getThreadPriority</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>photonThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>photonThreads</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <try>try <block>{<block_content>
                <expr_stmt><expr><name><name>photonThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>join</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printError</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"Photon thread %d of %d was interrupted"</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>photonThreads</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></catch></try>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><call><name><name>UI</name><operator>.</operator><name>taskCanceled</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>taskStop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// shut down task cleanly</comment>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>photonTimer</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>taskStop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"Tracing time for %s photons: %s"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><call><name><name>photonTimer</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>shadePhoton</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>power</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>prepareShadingState</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Shader</name></type> <name>shader</name> <init>= <expr><call><name>getPhotonShader</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// scatter photon</comment>
        <if_stmt><if>if <condition>(<expr><name>shader</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>shader</name><operator>.</operator><name>scatterPhoton</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>power</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>traceDiffusePhoton</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>previous</name></decl></parameter>, <parameter><decl><type><name>Ray</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>power</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>previous</name><operator>.</operator><name>getDiffuseDepth</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>maxDiffuseDepth</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>IntersectionState</name></type> <name>istate</name> <init>= <expr><call><name><name>previous</name><operator>.</operator><name>getIntersectionState</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>scene</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>istate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>previous</name><operator>.</operator><name>getIntersectionState</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>hit</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// create a new shading context</comment>
            <decl_stmt><decl><type><name>ShadingState</name></type> <name>state</name> <init>= <expr><call><name><name>ShadingState</name><operator>.</operator><name>createDiffuseBounceState</name></name><argument_list>(<argument><expr><name>previous</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>shadePhoton</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>power</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>traceReflectionPhoton</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>previous</name></decl></parameter>, <parameter><decl><type><name>Ray</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>power</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>previous</name><operator>.</operator><name>getReflectionDepth</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>maxReflectionDepth</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>IntersectionState</name></type> <name>istate</name> <init>= <expr><call><name><name>previous</name><operator>.</operator><name>getIntersectionState</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>scene</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>istate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>previous</name><operator>.</operator><name>getIntersectionState</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>hit</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// create a new shading context</comment>
            <decl_stmt><decl><type><name>ShadingState</name></type> <name>state</name> <init>= <expr><call><name><name>ShadingState</name><operator>.</operator><name>createReflectionBounceState</name></name><argument_list>(<argument><expr><name>previous</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>shadePhoton</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>power</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>traceRefractionPhoton</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>previous</name></decl></parameter>, <parameter><decl><type><name>Ray</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>power</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>previous</name><operator>.</operator><name>getRefractionDepth</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>maxRefractionDepth</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>IntersectionState</name></type> <name>istate</name> <init>= <expr><call><name><name>previous</name><operator>.</operator><name>getIntersectionState</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>scene</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>istate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>previous</name><operator>.</operator><name>getIntersectionState</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>hit</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// create a new shading context</comment>
            <decl_stmt><decl><type><name>ShadingState</name></type> <name>state</name> <init>= <expr><call><name><name>ShadingState</name><operator>.</operator><name>createRefractionBounceState</name></name><argument_list>(<argument><expr><name>previous</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>shadePhoton</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>power</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Shader</name></type> <name>getShader</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>shaderOverride</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>shaderOverride</name></expr> </then><else>: <expr><call><name><name>state</name><operator>.</operator><name>getShader</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Shader</name></type> <name>getPhotonShader</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><operator>(</operator><name>shaderOverride</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>shaderOverridePhotons</name><operator>)</operator></expr> ?</condition><then> <expr><name>shaderOverride</name></expr> </then><else>: <expr><call><name><name>state</name><operator>.</operator><name>getShader</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>

    </block_content>}</block></function>

    <function><type><name>ShadingState</name></type> <name>getRadiance</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>rx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>ry</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>Ray</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>IntersectionState</name></type> <name>istate</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>scene</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>istate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>istate</name><operator>.</operator><name>hit</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>ShadingState</name></type> <name>state</name> <init>= <expr><call><name><name>ShadingState</name><operator>.</operator><name>createState</name></name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>rx</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>prepareShadingState</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Shader</name></type> <name>shader</name> <init>= <expr><call><name>getShader</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>shader</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>setResult</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>BLACK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>state</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>shadingCache</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Color</name></type> <name>c</name> <init>= <expr><call><name>lookupShadingCache</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>shader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>setResult</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><name>state</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>setResult</name></name><argument_list>(<argument><expr><call><name><name>shader</name><operator>.</operator><name>getRadiance</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>shadingCache</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>addShadingCache</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>shader</name></expr></argument>, <argument><expr><call><name><name>state</name><operator>.</operator><name>getResult</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <return>return <expr><name>state</name></expr>;</return>
        </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>shadeBakeResult</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Shader</name></type> <name>shader</name> <init>= <expr><call><name>getShader</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>shader</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>setResult</name></name><argument_list>(<argument><expr><call><name><name>shader</name><operator>.</operator><name>getRadiance</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>setResult</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>BLACK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><name>Color</name></type> <name>shadeHit</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>prepareShadingState</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Shader</name></type> <name>shader</name> <init>= <expr><call><name>getShader</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><operator>(</operator><name>shader</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name><name>shader</name><operator>.</operator><name>getRadiance</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>Color</name><operator>.</operator><name>BLACK</name></name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>hash</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// long bits = java.lang.Double.doubleToLongBits(x);</comment>
        <comment type="line">// bits ^= java.lang.Double.doubleToLongBits(y) * 31;</comment>
        <comment type="line">// return (((int) bits) ^ ((int) (bits &gt;&gt; 32)));</comment>
        <return>return <expr><name>x</name> <operator>^</operator> <name>y</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>synchronized</specifier> <name>Color</name></type> <name>lookupShadingCache</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>Shader</name></type> <name>shader</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>cacheLookups</name><operator>++</operator></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>cx</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><call><name><name>state</name><operator>.</operator><name>getRasterX</name></name><argument_list>()</argument_list></call> <operator>*</operator> <name>shadingCacheResolution</name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>cy</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><call><name><name>state</name><operator>.</operator><name>getRasterY</name></name><argument_list>()</argument_list></call> <operator>*</operator> <name>shadingCacheResolution</name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>hash</name> <init>= <expr><call><name>hash</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CacheEntry</name></type> <name>e</name> <init>= <expr><name><name>shadingCache</name><index>[<expr><name>hash</name> <operator>&amp;</operator> <operator>(</operator><name><name>shadingCache</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>cacheEmptyEntryMisses</name><operator>++</operator></expr>;</expr_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// entry maps to correct pixel</comment>
        <if_stmt><if>if <condition>(<expr><name><name>e</name><operator>.</operator><name>cx</name></name> <operator>==</operator> <name>cx</name> <operator>&amp;&amp;</operator> <name><name>e</name><operator>.</operator><name>cy</name></name> <operator>==</operator> <name>cy</name></expr>)</condition> <block>{<block_content>
            <comment type="line">// search further</comment>
            <for>for <control>(<init><decl><type><name>Sample</name></type> <name>s</name> <init>= <expr><name><name>e</name><operator>.</operator><name>first</name></name></expr></init></decl>;</init> <condition><expr><name>s</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</condition> <incr><expr><name>s</name> <operator>=</operator> <name><name>s</name><operator>.</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>.</operator><name>i</name></name> <operator>!=</operator> <call><name><name>state</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <continue>continue;</continue></block_content></block></if></if_stmt>
                <comment type="line">// if (s.prim != state.getPrimitiveID())</comment>
                <comment type="line">// continue;</comment>
                <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>.</operator><name>s</name></name> <operator>!=</operator> <name>shader</name></expr>)</condition><block type="pseudo"><block_content>
                    <continue>continue;</continue></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>dot</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>nx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>ny</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>nz</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0.95f</literal></expr>)</condition><block type="pseudo"><block_content>
                    <continue>continue;</continue></block_content></block></if></if_stmt>
                <comment type="line">// we have a match</comment>
                <expr_stmt><expr><name>cacheHits</name><operator>++</operator></expr>;</expr_stmt>
                <return>return <expr><name><name>s</name><operator>.</operator><name>c</name></name></expr>;</return>
            </block_content>}</block></for>
        </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>cacheWrongEntryMisses</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>addShadingCache</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>Shader</name></type> <name>shader</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// don't cache samples with null normals</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>cacheEntryAdditions</name><operator>++</operator></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>cx</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><call><name><name>state</name><operator>.</operator><name>getRasterX</name></name><argument_list>()</argument_list></call> <operator>*</operator> <name>shadingCacheResolution</name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>cy</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><call><name><name>state</name><operator>.</operator><name>getRasterY</name></name><argument_list>()</argument_list></call> <operator>*</operator> <name>shadingCacheResolution</name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><call><name>hash</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><name><name>shadingCache</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CacheEntry</name></type> <name>e</name> <init>= <expr><name><name>shadingCache</name><index>[<expr><name>h</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <comment type="line">// new entry ?</comment>
        <if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>shadingCache</name><index>[<expr><name>h</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>CacheEntry</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>Sample</name></type> <name>s</name> <init>= <expr><operator>new</operator> <call><name>Sample</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>s</name><operator>.</operator><name>i</name></name> <operator>=</operator> <call><name><name>state</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// s.prim = state.getPrimitiveID();</comment>
        <expr_stmt><expr><name><name>s</name><operator>.</operator><name>s</name></name> <operator>=</operator> <name>shader</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>s</name><operator>.</operator><name>c</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>s</name><operator>.</operator><name>nx</name></name> <operator>=</operator> <call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call><operator>.</operator><name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>s</name><operator>.</operator><name>ny</name></name> <operator>=</operator> <call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call><operator>.</operator><name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>s</name><operator>.</operator><name>nz</name></name> <operator>=</operator> <call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call><operator>.</operator><name>z</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>e</name><operator>.</operator><name>cx</name></name> <operator>==</operator> <name>cx</name> <operator>&amp;&amp;</operator> <name><name>e</name><operator>.</operator><name>cy</name></name> <operator>==</operator> <name>cy</name></expr>)</condition> <block>{<block_content>
            <comment type="line">// same pixel - just add to the front of the list</comment>
            <expr_stmt><expr><name><name>s</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name><name>e</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>e</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="line">// different pixel - new list</comment>
            <expr_stmt><expr><name><name>e</name><operator>.</operator><name>cx</name></name> <operator>=</operator> <name>cx</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>e</name><operator>.</operator><name>cy</name></name> <operator>=</operator> <name>cy</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>s</name><operator>.</operator><name>next</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>e</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><name>Color</name></type> <name>traceGlossy</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>previous</name></decl></parameter>, <parameter><decl><type><name>Ray</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// limit path depth and disable caustic paths</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>previous</name><operator>.</operator><name>getReflectionDepth</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>maxReflectionDepth</name> <operator>||</operator> <call><name><name>previous</name><operator>.</operator><name>getDiffuseDepth</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name><name>Color</name><operator>.</operator><name>BLACK</name></name></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>IntersectionState</name></type> <name>istate</name> <init>= <expr><call><name><name>previous</name><operator>.</operator><name>getIntersectionState</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>scene</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>istate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><ternary><condition><expr><call><name><name>istate</name><operator>.</operator><name>hit</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name>shadeHit</name><argument_list>(<argument><expr><call><name><name>ShadingState</name><operator>.</operator><name>createGlossyBounceState</name></name><argument_list>(<argument><expr><name>previous</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>Color</name><operator>.</operator><name>BLACK</name></name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>Color</name></type> <name>traceReflection</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>previous</name></decl></parameter>, <parameter><decl><type><name>Ray</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// limit path depth and disable caustic paths</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>previous</name><operator>.</operator><name>getReflectionDepth</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>maxReflectionDepth</name> <operator>||</operator> <call><name><name>previous</name><operator>.</operator><name>getDiffuseDepth</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name><name>Color</name><operator>.</operator><name>BLACK</name></name></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>IntersectionState</name></type> <name>istate</name> <init>= <expr><call><name><name>previous</name><operator>.</operator><name>getIntersectionState</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>scene</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>istate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><ternary><condition><expr><call><name><name>istate</name><operator>.</operator><name>hit</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name>shadeHit</name><argument_list>(<argument><expr><call><name><name>ShadingState</name><operator>.</operator><name>createReflectionBounceState</name></name><argument_list>(<argument><expr><name>previous</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>Color</name><operator>.</operator><name>BLACK</name></name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>Color</name></type> <name>traceRefraction</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>previous</name></decl></parameter>, <parameter><decl><type><name>Ray</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// limit path depth and disable caustic paths</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>previous</name><operator>.</operator><name>getRefractionDepth</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>maxRefractionDepth</name> <operator>||</operator> <call><name><name>previous</name><operator>.</operator><name>getDiffuseDepth</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name><name>Color</name><operator>.</operator><name>BLACK</name></name></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>IntersectionState</name></type> <name>istate</name> <init>= <expr><call><name><name>previous</name><operator>.</operator><name>getIntersectionState</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>scene</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>istate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><ternary><condition><expr><call><name><name>istate</name><operator>.</operator><name>hit</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name>shadeHit</name><argument_list>(<argument><expr><call><name><name>ShadingState</name><operator>.</operator><name>createRefractionBounceState</name></name><argument_list>(<argument><expr><name>previous</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>Color</name><operator>.</operator><name>BLACK</name></name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>ShadingState</name></type> <name>traceFinalGather</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>previous</name></decl></parameter>, <parameter><decl><type><name>Ray</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>previous</name><operator>.</operator><name>getDiffuseDepth</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>maxDiffuseDepth</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>IntersectionState</name></type> <name>istate</name> <init>= <expr><call><name><name>previous</name><operator>.</operator><name>getIntersectionState</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>scene</name><operator>.</operator><name>trace</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>istate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><ternary><condition><expr><call><name><name>istate</name><operator>.</operator><name>hit</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>ShadingState</name><operator>.</operator><name>createFinalGatherState</name></name><argument_list>(<argument><expr><name>previous</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>Color</name></type> <name>getGlobalRadiance</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>giEngine</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name><name>Color</name><operator>.</operator><name>BLACK</name></name></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><call><name><name>giEngine</name><operator>.</operator><name>getGlobalRadiance</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>Color</name></type> <name>getIrradiance</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>diffuseReflectance</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// no gi engine, or we have already exceeded number of available bounces</comment>
        <if_stmt><if>if <condition>(<expr><name>giEngine</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>state</name><operator>.</operator><name>getDiffuseDepth</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>maxDiffuseDepth</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name><name>Color</name><operator>.</operator><name>BLACK</name></name></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><call><name><name>giEngine</name><operator>.</operator><name>getIrradiance</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>diffuseReflectance</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>initLightSamples</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>LightSource</name></type> <name>l</name> <range>: <expr><name>lights</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>l</name><operator>.</operator><name>getSamples</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>initCausticSamples</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>causticPhotonMap</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>causticPhotonMap</name><operator>.</operator><name>getSamples</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>
}</block></class></unit>
