<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/sunflow/src/org/sunflow/core/Instance.java"><package>package <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>SunflowAPI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>BoundingBox</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Matrix4</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Point3</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Vector3</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>system</name><operator>.</operator><name>UI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>system</name><operator>.</operator><name>UI</name><operator>.</operator><name>Module</name></name>;</import>

<class><specifier>public</specifier> class <name>Instance</name> <super_list><implements>implements <super><name>RenderObject</name></super></implements></super_list> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>Matrix4</name></type> <name>o2w</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Matrix4</name></type> <name>w2o</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>BoundingBox</name></type> <name>bounds</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Geometry</name></type> <name>geometry</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Shader</name><index>[]</index></name></type> <name>shaders</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Modifier</name><index>[]</index></name></type> <name>modifiers</name></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>ParameterList</name></type> <name>pl</name></decl></parameter>, <parameter><decl><type><name>SunflowAPI</name></type> <name>api</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>geometryName</name> <init>= <expr><call><name><name>pl</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"geometry"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>geometry</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>geometryName</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>geometryName</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printError</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>GEOM</name></name></expr></argument>, <argument><expr><literal type="string">"geometry parameter missing - unable to create instance"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>geometry</name> <operator>=</operator> <call><name><name>api</name><operator>.</operator><name>lookupGeometry</name></name><argument_list>(<argument><expr><name>geometryName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>geometry</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printError</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>GEOM</name></name></expr></argument>, <argument><expr><literal type="string">"Geometry \"%s\" was not declared yet - instance is invalid"</literal></expr></argument>, <argument><expr><name>geometryName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>shaderNames</name> <init>= <expr><call><name><name>pl</name><operator>.</operator><name>getStringArray</name></name><argument_list>(<argument><expr><literal type="string">"shaders"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>shaderNames</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// new shader names have been provided</comment>
            <expr_stmt><expr><name>shaders</name> <operator>=</operator> <operator>new</operator> <name><name>Shader</name><index>[<expr><name><name>shaderNames</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>shaders</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name><name>shaders</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>api</name><operator>.</operator><name>lookupShader</name></name><argument_list>(<argument><expr><name><name>shaderNames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>shaders</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printWarning</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>GEOM</name></name></expr></argument>, <argument><expr><literal type="string">"Shader \"%s\" was not declared yet - ignoring"</literal></expr></argument>, <argument><expr><name><name>shaderNames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="line">// re-use existing shader array</comment>
        </block_content>}</block></else></if_stmt>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>modifierNames</name> <init>= <expr><call><name><name>pl</name><operator>.</operator><name>getStringArray</name></name><argument_list>(<argument><expr><literal type="string">"modifiers"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>modifierNames</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// new modifier names have been provided</comment>
            <expr_stmt><expr><name>modifiers</name> <operator>=</operator> <operator>new</operator> <name><name>Modifier</name><index>[<expr><name><name>modifierNames</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>modifiers</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name><name>modifiers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>api</name><operator>.</operator><name>lookupModifier</name></name><argument_list>(<argument><expr><name><name>modifierNames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>modifiers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printWarning</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>GEOM</name></name></expr></argument>, <argument><expr><literal type="string">"Modifier \"%s\" was not declared yet - ignoring"</literal></expr></argument>, <argument><expr><name><name>modifierNames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Matrix4</name></type> <name>transform</name> <init>= <expr><call><name><name>pl</name><operator>.</operator><name>getMatrix</name></name><argument_list>(<argument><expr><literal type="string">"transform"</literal></expr></argument>, <argument><expr><name>o2w</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>transform</name> <operator>!=</operator> <name>o2w</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>o2w</name> <operator>=</operator> <name>transform</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>o2w</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>w2o</name> <operator>=</operator> <call><name><name>o2w</name><operator>.</operator><name>inverse</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>w2o</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printError</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>GEOM</name></name></expr></argument>, <argument><expr><literal type="string">"Unable to compute transform inverse - determinant is: %g"</literal></expr></argument>, <argument><expr><call><name><name>o2w</name><operator>.</operator><name>determinant</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>o2w</name> <operator>=</operator> <name>w2o</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>updateBounds</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>bounds</name> <operator>=</operator> <call><name><name>geometry</name><operator>.</operator><name>getWorldBounds</name></name><argument_list>(<argument><expr><name>o2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasGeometry</name><parameter_list>(<parameter><decl><type><name>Geometry</name></type> <name>g</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name>geometry</name> <operator>==</operator> <name>g</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeShader</name><parameter_list>(<parameter><decl><type><name>Shader</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>shaders</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>shaders</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                <if_stmt><if>if <condition>(<expr><name><name>shaders</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>s</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name><name>shaders</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeModifier</name><parameter_list>(<parameter><decl><type><name>Modifier</name></type> <name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>modifiers</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>modifiers</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                <if_stmt><if>if <condition>(<expr><name><name>modifiers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>m</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name><name>modifiers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>BoundingBox</name></type> <name>getBounds</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>bounds</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getNumPrimitives</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>geometry</name><operator>.</operator><name>getNumPrimitives</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>intersect</name><parameter_list>(<parameter><decl><type><name>Ray</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>IntersectionState</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Ray</name></type> <name>localRay</name> <init>= <expr><call><name><name>r</name><operator>.</operator><name>transform</name></name><argument_list>(<argument><expr><name>w2o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>state</name><operator>.</operator><name>current</name></name> <operator>=</operator> <name>this</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>geometry</name><operator>.</operator><name>intersect</name></name><argument_list>(<argument><expr><name>localRay</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// FIXME: transfer max distance to current ray</comment>
        <expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>setMax</name></name><argument_list>(<argument><expr><call><name><name>localRay</name><operator>.</operator><name>getMax</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>prepareShadingState</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>geometry</name><operator>.</operator><name>prepareShadingState</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>state</name><operator>.</operator><name>getGeoNormal</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>correctShadingNormal</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <comment type="line">// run modifier if it was provided</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>state</name><operator>.</operator><name>getModifier</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getModifier</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>modify</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Shader</name></type> <name>getShader</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>shaders</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>i</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>i</name> <operator>&gt;=</operator> <name><name>shaders</name><operator>.</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><name><name>shaders</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Modifier</name></type> <name>getModifier</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>modifiers</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>i</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>i</name> <operator>&gt;=</operator> <name><name>modifiers</name><operator>.</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><name><name>modifiers</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Point3</name></type> <name>transformObjectToWorld</name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>o2w</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><operator>new</operator> <call><name>Point3</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>o2w</name><operator>.</operator><name>transformP</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Point3</name></type> <name>transformWorldToObject</name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>o2w</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><operator>new</operator> <call><name>Point3</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>w2o</name><operator>.</operator><name>transformP</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Vector3</name></type> <name>transformNormalObjectToWorld</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>o2w</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><operator>new</operator> <call><name>Vector3</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>w2o</name><operator>.</operator><name>transformTransposeV</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Vector3</name></type> <name>transformNormalWorldToObject</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>o2w</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><operator>new</operator> <call><name>Vector3</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>o2w</name><operator>.</operator><name>transformTransposeV</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Vector3</name></type> <name>transformVectorObjectToWorld</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>o2w</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><operator>new</operator> <call><name>Vector3</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>o2w</name><operator>.</operator><name>transformV</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Vector3</name></type> <name>transformVectorWorldToObject</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>o2w</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><operator>new</operator> <call><name>Vector3</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>w2o</name><operator>.</operator><name>transformV</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>PrimitiveList</name></type> <name>getBakingPrimitives</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>geometry</name><operator>.</operator><name>getBakingPrimitives</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>Geometry</name></type> <name>getGeometry</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>geometry</name></expr>;</return>
    </block_content>}</block></function>
}</block></class></unit>
