<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/sunflow/src/org/sunflow/core/ParameterList.java"><package>package <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>image</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Matrix4</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Point2</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Point3</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Vector3</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>system</name><operator>.</operator><name>UI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>system</name><operator>.</operator><name>UI</name><operator>.</operator><name>Module</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>util</name><operator>.</operator><name>FastHashMap</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class holds a list of "parameters". These are defined and then passed
 * onto rendering objects through the API. They can hold arbitrary typed and
 * named variables as a unified way of getting data into user objects.
 */</comment>
<class><specifier>public</specifier> class <name>ParameterList</name> <block>{
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name><name>FastHashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Parameter</name></argument>&gt;</argument_list></name></type> <name>list</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>numVerts</name></decl>, <decl><type ref="prev"/><name>numFaces</name></decl>, <decl><type ref="prev"/><name>numFaceVerts</name></decl>;</decl_stmt>

    <enum><specifier>private</specifier> enum <name>ParameterType</name> <block>{
        <decl><name>STRING</name></decl>, <decl><name>INT</name></decl>, <decl><name>BOOL</name></decl>, <decl><name>FLOAT</name></decl>, <decl><name>POINT</name></decl>, <decl><name>VECTOR</name></decl>, <decl><name>TEXCOORD</name></decl>, <decl><name>MATRIX</name></decl>, <decl><name>COLOR</name></decl>
    }</block></enum>

    <enum><specifier>public</specifier> enum <name>InterpolationType</name> <block>{
        <decl><name>NONE</name></decl>, <decl><name>FACE</name></decl>, <decl><name>VERTEX</name></decl>, <decl><name>FACEVARYING</name></decl>
    }</block></enum>

    <comment type="block" format="javadoc">/**
     * Creates an empty ParameterList.
     */</comment>
    <constructor><specifier>public</specifier> <name>ParameterList</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>list</name> <operator>=</operator> <operator>new</operator> <call><name><name>FastHashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Parameter</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>numVerts</name> <operator>=</operator> <name>numFaces</name> <operator>=</operator> <name>numFaceVerts</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Clears the list of all its members. If some members were never used, a
     * warning will be printed to remind the user something may be wrong.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>showUnused</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>showUnused</name></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name><name>FastHashMap</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Parameter</name></argument>&gt;</argument_list></name></name></type> <name>e</name> <range>: <expr><name>list</name></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>e</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><name>checked</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printWarning</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>API</name></name></expr></argument>, <argument><expr><literal type="string">"Unused parameter: %s - %s"</literal></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>numVerts</name> <operator>=</operator> <name>numFaces</name> <operator>=</operator> <name>numFaceVerts</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Setup how many faces should be used to check member count on "face"
     * interpolated parameters.
     * 
     * @param numFaces number of faces
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFaceCount</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>numFaces</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>numFaces</name></name> <operator>=</operator> <name>numFaces</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Setup how many vertices should be used to check member count of "vertex"
     * interpolated parameters.
     * 
     * @param numVerts number of vertices
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setVertexCount</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>numVerts</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>numVerts</name></name> <operator>=</operator> <name>numVerts</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Setup how many "face-vertices" should be used to check member count of
     * "facevarying" interpolated parameters. This should be equal to the sum of
     * the number of vertices on each face.
     * 
     * @param numFaceVerts number of "face-vertices"
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFaceVertexCount</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>numFaceVerts</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>numFaceVerts</name></name> <operator>=</operator> <name>numFaceVerts</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Add the specified string as a parameter. &lt;code&gt;null&lt;/code&gt; values are
     * not permitted.
     * 
     * @param name parameter name
     * @param value parameter value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addString</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Parameter</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Add the specified integer as a parameter. &lt;code&gt;null&lt;/code&gt; values are
     * not permitted.
     * 
     * @param name parameter name
     * @param value parameter value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addInteger</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Parameter</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Add the specified boolean as a parameter. &lt;code&gt;null&lt;/code&gt; values are
     * not permitted.
     * 
     * @param name parameter name
     * @param value parameter value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addBoolean</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Parameter</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Add the specified float as a parameter. &lt;code&gt;null&lt;/code&gt; values are
     * not permitted.
     * 
     * @param name parameter name
     * @param value parameter value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addFloat</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Parameter</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Add the specified color as a parameter. &lt;code&gt;null&lt;/code&gt; values are
     * not permitted.
     * 
     * @param name parameter name
     * @param value parameter value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addColor</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Parameter</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Add the specified array of integers as a parameter. &lt;code&gt;null&lt;/code&gt;
     * values are not permitted.
     * 
     * @param name parameter name
     * @param value parameter value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addIntegerArray</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>array</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>array</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Parameter</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Add the specified array of integers as a parameter. &lt;code&gt;null&lt;/code&gt;
     * values are not permitted.
     * 
     * @param name parameter name
     * @param value parameter value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addStringArray</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>array</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>array</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Parameter</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Add the specified floats as a parameter. &lt;code&gt;null&lt;/code&gt; values are
     * not permitted.
     * 
     * @param name parameter name
     * @param interp interpolation type
     * @param value parameter value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addFloats</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>InterpolationType</name></type> <name>interp</name></decl></parameter>, <parameter><decl><type><name><name>float</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printError</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>API</name></name></expr></argument>, <argument><expr><literal type="string">"Cannot create float parameter %s -- invalid data length"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Parameter</name><argument_list>(<argument><expr><name><name>ParameterType</name><operator>.</operator><name>FLOAT</name></name></expr></argument>, <argument><expr><name>interp</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Add the specified points as a parameter. &lt;code&gt;null&lt;/code&gt; values are
     * not permitted.
     * 
     * @param name parameter name
     * @param interp interpolation type
     * @param value parameter value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addPoints</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>InterpolationType</name></type> <name>interp</name></decl></parameter>, <parameter><decl><type><name><name>float</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>data</name><operator>.</operator><name>length</name></name> <operator>%</operator> <literal type="number">3</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printError</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>API</name></name></expr></argument>, <argument><expr><literal type="string">"Cannot create point parameter %s -- invalid data length"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Parameter</name><argument_list>(<argument><expr><name><name>ParameterType</name><operator>.</operator><name>POINT</name></name></expr></argument>, <argument><expr><name>interp</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Add the specified vectors as a parameter. &lt;code&gt;null&lt;/code&gt; values are
     * not permitted.
     * 
     * @param name parameter name
     * @param interp interpolation type
     * @param value parameter value
     */</comment>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addVectors</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>InterpolationType</name></type> <name>interp</name></decl></parameter>, <parameter><decl><type><name><name>float</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>data</name><operator>.</operator><name>length</name></name> <operator>%</operator> <literal type="number">3</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printError</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>API</name></name></expr></argument>, <argument><expr><literal type="string">"Cannot create vector parameter %s -- invalid data length"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Parameter</name><argument_list>(<argument><expr><name><name>ParameterType</name><operator>.</operator><name>VECTOR</name></name></expr></argument>, <argument><expr><name>interp</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Add the specified texture coordinates as a parameter. &lt;code&gt;null&lt;/code&gt;
     * values are not permitted.
     * 
     * @param name parameter name
     * @param interp interpolation type
     * @param value parameter value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addTexCoords</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>InterpolationType</name></type> <name>interp</name></decl></parameter>, <parameter><decl><type><name><name>float</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>data</name><operator>.</operator><name>length</name></name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printError</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>API</name></name></expr></argument>, <argument><expr><literal type="string">"Cannot create texcoord parameter %s -- invalid data length"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Parameter</name><argument_list>(<argument><expr><name><name>ParameterType</name><operator>.</operator><name>TEXCOORD</name></name></expr></argument>, <argument><expr><name>interp</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Add the specified matrices as a parameter. &lt;code&gt;null&lt;/code&gt; values are
     * not permitted.
     * 
     * @param name parameter name
     * @param interp interpolation type
     * @param value parameter value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addMatrices</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>InterpolationType</name></type> <name>interp</name></decl></parameter>, <parameter><decl><type><name><name>float</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>data</name><operator>.</operator><name>length</name></name> <operator>%</operator> <literal type="number">16</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printError</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>API</name></name></expr></argument>, <argument><expr><literal type="string">"Cannot create matrix parameter %s -- invalid data length"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Parameter</name><argument_list>(<argument><expr><name><name>ParameterType</name><operator>.</operator><name>MATRIX</name></name></expr></argument>, <argument><expr><name>interp</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Parameter</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printError</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>API</name></name></expr></argument>, <argument><expr><literal type="string">"Cannot declare parameter with null name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name><name>list</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printWarning</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>API</name></name></expr></argument>, <argument><expr><literal type="string">"Parameter %s was already defined -- overwriting"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getString</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Parameter</name></type> <name>p</name> <init>= <expr><call><name><name>list</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isValidParameter</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>ParameterType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>InterpolationType</name><operator>.</operator><name>NONE</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>p</name><operator>.</operator><name>getStringValue</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><name>defaultValue</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>String</name><index>[]</index></name></type> <name>getStringArray</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Parameter</name></type> <name>p</name> <init>= <expr><call><name><name>list</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isValidParameter</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>ParameterType</name><operator>.</operator><name>STRING</name></name></expr></argument>, <argument><expr><name><name>InterpolationType</name><operator>.</operator><name>NONE</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>p</name><operator>.</operator><name>getStrings</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><name>defaultValue</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getInt</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Parameter</name></type> <name>p</name> <init>= <expr><call><name><name>list</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isValidParameter</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>ParameterType</name><operator>.</operator><name>INT</name></name></expr></argument>, <argument><expr><name><name>InterpolationType</name><operator>.</operator><name>NONE</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>p</name><operator>.</operator><name>getIntValue</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><name>defaultValue</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>int</name><index>[]</index></name></type> <name>getIntArray</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Parameter</name></type> <name>p</name> <init>= <expr><call><name><name>list</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isValidParameter</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>ParameterType</name><operator>.</operator><name>INT</name></name></expr></argument>, <argument><expr><name><name>InterpolationType</name><operator>.</operator><name>NONE</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>p</name><operator>.</operator><name>getInts</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getBoolean</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Parameter</name></type> <name>p</name> <init>= <expr><call><name><name>list</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isValidParameter</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>ParameterType</name><operator>.</operator><name>BOOL</name></name></expr></argument>, <argument><expr><name><name>InterpolationType</name><operator>.</operator><name>NONE</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>p</name><operator>.</operator><name>getBoolValue</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><name>defaultValue</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>float</name></type> <name>getFloat</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Parameter</name></type> <name>p</name> <init>= <expr><call><name><name>list</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isValidParameter</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>ParameterType</name><operator>.</operator><name>FLOAT</name></name></expr></argument>, <argument><expr><name><name>InterpolationType</name><operator>.</operator><name>NONE</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>p</name><operator>.</operator><name>getFloatValue</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><name>defaultValue</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Color</name></type> <name>getColor</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Parameter</name></type> <name>p</name> <init>= <expr><call><name><name>list</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isValidParameter</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>ParameterType</name><operator>.</operator><name>COLOR</name></name></expr></argument>, <argument><expr><name><name>InterpolationType</name><operator>.</operator><name>NONE</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>p</name><operator>.</operator><name>getColor</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><name>defaultValue</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Point3</name></type> <name>getPoint</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Point3</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Parameter</name></type> <name>p</name> <init>= <expr><call><name><name>list</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isValidParameter</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>ParameterType</name><operator>.</operator><name>POINT</name></name></expr></argument>, <argument><expr><name><name>InterpolationType</name><operator>.</operator><name>NONE</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>p</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><name>defaultValue</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Vector3</name></type> <name>getVector</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Parameter</name></type> <name>p</name> <init>= <expr><call><name><name>list</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isValidParameter</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>ParameterType</name><operator>.</operator><name>VECTOR</name></name></expr></argument>, <argument><expr><name><name>InterpolationType</name><operator>.</operator><name>NONE</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>p</name><operator>.</operator><name>getVector</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><name>defaultValue</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Point2</name></type> <name>getTexCoord</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Point2</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Parameter</name></type> <name>p</name> <init>= <expr><call><name><name>list</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isValidParameter</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>ParameterType</name><operator>.</operator><name>TEXCOORD</name></name></expr></argument>, <argument><expr><name><name>InterpolationType</name><operator>.</operator><name>NONE</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>p</name><operator>.</operator><name>getTexCoord</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><name>defaultValue</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Matrix4</name></type> <name>getMatrix</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Matrix4</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Parameter</name></type> <name>p</name> <init>= <expr><call><name><name>list</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isValidParameter</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>ParameterType</name><operator>.</operator><name>MATRIX</name></name></expr></argument>, <argument><expr><name><name>InterpolationType</name><operator>.</operator><name>NONE</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>p</name><operator>.</operator><name>getMatrix</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><name>defaultValue</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>FloatParameter</name></type> <name>getFloatArray</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getFloatParameter</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>ParameterType</name><operator>.</operator><name>FLOAT</name></name></expr></argument>, <argument><expr><call><name><name>list</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>FloatParameter</name></type> <name>getPointArray</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getFloatParameter</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>ParameterType</name><operator>.</operator><name>POINT</name></name></expr></argument>, <argument><expr><call><name><name>list</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>FloatParameter</name></type> <name>getVectorArray</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getFloatParameter</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>ParameterType</name><operator>.</operator><name>VECTOR</name></name></expr></argument>, <argument><expr><call><name><name>list</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>FloatParameter</name></type> <name>getTexCoordArray</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getFloatParameter</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>ParameterType</name><operator>.</operator><name>TEXCOORD</name></name></expr></argument>, <argument><expr><call><name><name>list</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>FloatParameter</name></type> <name>getMatrixArray</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getFloatParameter</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>ParameterType</name><operator>.</operator><name>MATRIX</name></name></expr></argument>, <argument><expr><call><name><name>list</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isValidParameter</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>ParameterType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>InterpolationType</name></type> <name>interp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>requestedSize</name></decl></parameter>, <parameter><decl><type><name>Parameter</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>type</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printWarning</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>API</name></name></expr></argument>, <argument><expr><literal type="string">"Parameter %s requested as a %s - declared as %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>type</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>p</name><operator>.</operator><name>type</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>.</operator><name>interp</name></name> <operator>!=</operator> <name>interp</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printWarning</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>API</name></name></expr></argument>, <argument><expr><literal type="string">"Parameter %s requested as a %s - declared as %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>interp</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>p</name><operator>.</operator><name>interp</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>requestedSize</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>p</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>requestedSize</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printWarning</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>API</name></name></expr></argument>, <argument><expr><literal type="string">"Parameter %s requires %d %s - declared with %d"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>requestedSize</name></expr></argument>, <argument><expr><ternary><condition><expr><name>requestedSize</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">"value"</literal></expr> </then><else>: <expr><literal type="string">"values"</literal></expr></else></ternary></expr></argument>, <argument><expr><call><name><name>p</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>p</name><operator>.</operator><name>checked</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>FloatParameter</name></type> <name>getFloatParameter</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>ParameterType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>Parameter</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
        <switch>switch <condition>(<expr><name><name>p</name><operator>.</operator><name>interp</name></name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>NONE</name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isValidParameter</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>interp</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
                <break>break;</break>
            <case>case <expr><name>VERTEX</name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isValidParameter</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>interp</name></name></expr></argument>, <argument><expr><name>numVerts</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
                <break>break;</break>
            <case>case <expr><name>FACE</name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isValidParameter</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>interp</name></name></expr></argument>, <argument><expr><name>numFaces</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
                <break>break;</break>
            <case>case <expr><name>FACEVARYING</name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isValidParameter</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>interp</name></name></expr></argument>, <argument><expr><name>numFaceVerts</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
                <break>break;</break>
            <default>default:</default>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></switch>
        <return>return <expr><call><name><name>p</name><operator>.</operator><name>getFloats</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>FloatParameter</name> <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>InterpolationType</name></type> <name>interp</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>float</name><index>[]</index></name></type> <name>data</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>FloatParameter</name><parameter_list>()</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name><name>InterpolationType</name><operator>.</operator><name>NONE</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <constructor><specifier>public</specifier> <name>FloatParameter</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name><name>InterpolationType</name><operator>.</operator><name>NONE</name></name></expr></argument>, <argument><expr><operator>new</operator> <name><name>float</name><index>[]</index></name> <block>{ <expr><name>f</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <constructor><specifier>private</specifier> <name>FloatParameter</name><parameter_list>(<parameter><decl><type><name>InterpolationType</name></type> <name>interp</name></decl></parameter>, <parameter><decl><type><name><name>float</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>interp</name></name> <operator>=</operator> <name>interp</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>
    }</block></class>

    <class><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>Parameter</name> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>ParameterType</name></type> <name>type</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>InterpolationType</name></type> <name>interp</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>Object</name></type> <name>obj</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>checked</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>Parameter</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>ParameterType</name><operator>.</operator><name>STRING</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>interp</name> <operator>=</operator> <name><name>InterpolationType</name><operator>.</operator><name>NONE</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>obj</name> <operator>=</operator> <operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><name>value</name></expr> }</block></expr>;</expr_stmt>
            <expr_stmt><expr><name>checked</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <constructor><specifier>private</specifier> <name>Parameter</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>ParameterType</name><operator>.</operator><name>INT</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>interp</name> <operator>=</operator> <name><name>InterpolationType</name><operator>.</operator><name>NONE</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>obj</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{ <expr><name>value</name></expr> }</block></expr>;</expr_stmt>
            <expr_stmt><expr><name>checked</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <constructor><specifier>private</specifier> <name>Parameter</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>ParameterType</name><operator>.</operator><name>BOOL</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>interp</name> <operator>=</operator> <name><name>InterpolationType</name><operator>.</operator><name>NONE</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>obj</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>checked</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <constructor><specifier>private</specifier> <name>Parameter</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>ParameterType</name><operator>.</operator><name>FLOAT</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>interp</name> <operator>=</operator> <name><name>InterpolationType</name><operator>.</operator><name>NONE</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>obj</name> <operator>=</operator> <operator>new</operator> <name><name>float</name><index>[]</index></name> <block>{ <expr><name>value</name></expr> }</block></expr>;</expr_stmt>
            <expr_stmt><expr><name>checked</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <constructor><specifier>private</specifier> <name>Parameter</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>array</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>ParameterType</name><operator>.</operator><name>INT</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>interp</name> <operator>=</operator> <name><name>InterpolationType</name><operator>.</operator><name>NONE</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>obj</name> <operator>=</operator> <name>array</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>checked</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <constructor><specifier>private</specifier> <name>Parameter</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>array</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>ParameterType</name><operator>.</operator><name>STRING</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>interp</name> <operator>=</operator> <name><name>InterpolationType</name><operator>.</operator><name>NONE</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>obj</name> <operator>=</operator> <name>array</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>checked</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <constructor><specifier>private</specifier> <name>Parameter</name><parameter_list>(<parameter><decl><type><name>Color</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>ParameterType</name><operator>.</operator><name>COLOR</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>interp</name> <operator>=</operator> <name><name>InterpolationType</name><operator>.</operator><name>NONE</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>obj</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>checked</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <constructor><specifier>private</specifier> <name>Parameter</name><parameter_list>(<parameter><decl><type><name>ParameterType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>InterpolationType</name></type> <name>interp</name></decl></parameter>, <parameter><decl><type><name><name>float</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>interp</name></name> <operator>=</operator> <name>interp</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>obj</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>checked</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>private</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list> <block>{<block_content>
            <comment type="line">// number of elements</comment>
            <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
                <case>case <expr><name>STRING</name></expr>:</case>
                    <return>return <expr><operator>(</operator><operator>(</operator><name><name>String</name><index>[]</index></name><operator>)</operator> <name>obj</name><operator>)</operator><operator>.</operator><name>length</name></expr>;</return>
                <case>case <expr><name>INT</name></expr>:</case>
                    <return>return <expr><operator>(</operator><operator>(</operator><name><name>int</name><index>[]</index></name><operator>)</operator> <name>obj</name><operator>)</operator><operator>.</operator><name>length</name></expr>;</return>
                <case>case <expr><name>BOOL</name></expr>:</case>
                    <return>return <expr><literal type="number">1</literal></expr>;</return>
                <case>case <expr><name>FLOAT</name></expr>:</case>
                    <return>return <expr><operator>(</operator><operator>(</operator><name><name>float</name><index>[]</index></name><operator>)</operator> <name>obj</name><operator>)</operator><operator>.</operator><name>length</name></expr>;</return>
                <case>case <expr><name>POINT</name></expr>:</case>
                    <return>return <expr><operator>(</operator><operator>(</operator><name><name>float</name><index>[]</index></name><operator>)</operator> <name>obj</name><operator>)</operator><operator>.</operator><name>length</name> <operator>/</operator> <literal type="number">3</literal></expr>;</return>
                <case>case <expr><name>VECTOR</name></expr>:</case>
                    <return>return <expr><operator>(</operator><operator>(</operator><name><name>float</name><index>[]</index></name><operator>)</operator> <name>obj</name><operator>)</operator><operator>.</operator><name>length</name> <operator>/</operator> <literal type="number">3</literal></expr>;</return>
                <case>case <expr><name>TEXCOORD</name></expr>:</case>
                    <return>return <expr><operator>(</operator><operator>(</operator><name><name>float</name><index>[]</index></name><operator>)</operator> <name>obj</name><operator>)</operator><operator>.</operator><name>length</name> <operator>/</operator> <literal type="number">2</literal></expr>;</return>
                <case>case <expr><name>MATRIX</name></expr>:</case>
                    <return>return <expr><operator>(</operator><operator>(</operator><name><name>float</name><index>[]</index></name><operator>)</operator> <name>obj</name><operator>)</operator><operator>.</operator><name>length</name> <operator>/</operator> <literal type="number">16</literal></expr>;</return>
                <case>case <expr><name>COLOR</name></expr>:</case>
                    <return>return <expr><literal type="number">1</literal></expr>;</return>
                <default>default:</default>
                    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
            </block_content>}</block></switch>
        </block_content>}</block></function>

        <function><type><specifier>protected</specifier> <name>void</name></type> <name>check</name><parameter_list>()</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>checked</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s%s[%d]"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>interp</name> <operator>==</operator> <name><name>InterpolationType</name><operator>.</operator><name>NONE</name></name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><call><name><name>interp</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" "</literal></expr></else></ternary></expr></argument>, <argument><expr><call><name><name>type</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>String</name></type> <name>getStringValue</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><operator>(</operator><operator>(</operator><name><name>String</name><index>[]</index></name><operator>)</operator> <name>obj</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>boolean</name></type> <name>getBoolValue</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>Boolean</name><operator>)</operator> <name>obj</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>int</name></type> <name>getIntValue</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><operator>(</operator><operator>(</operator><name><name>int</name><index>[]</index></name><operator>)</operator> <name>obj</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name><name>int</name><index>[]</index></name></type> <name>getInts</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><operator>(</operator><name><name>int</name><index>[]</index></name><operator>)</operator> <name>obj</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name><name>String</name><index>[]</index></name></type> <name>getStrings</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><operator>(</operator><name><name>String</name><index>[]</index></name><operator>)</operator> <name>obj</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>float</name></type> <name>getFloatValue</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><operator>(</operator><operator>(</operator><name><name>float</name><index>[]</index></name><operator>)</operator> <name>obj</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>FloatParameter</name></type> <name>getFloats</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>FloatParameter</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><operator>(</operator><name><name>float</name><index>[]</index></name><operator>)</operator> <name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>Point3</name></type> <name>getPoint</name><parameter_list>()</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>floats</name> <init>= <expr><operator>(</operator><name><name>float</name><index>[]</index></name><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>
            <return>return <expr><operator>new</operator> <call><name>Point3</name><argument_list>(<argument><expr><name><name>floats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>floats</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>floats</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>Vector3</name></type> <name>getVector</name><parameter_list>()</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>floats</name> <init>= <expr><operator>(</operator><name><name>float</name><index>[]</index></name><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>
            <return>return <expr><operator>new</operator> <call><name>Vector3</name><argument_list>(<argument><expr><name><name>floats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>floats</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>floats</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>Point2</name></type> <name>getTexCoord</name><parameter_list>()</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>floats</name> <init>= <expr><operator>(</operator><name><name>float</name><index>[]</index></name><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>
            <return>return <expr><operator>new</operator> <call><name>Point2</name><argument_list>(<argument><expr><name><name>floats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>floats</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>Matrix4</name></type> <name>getMatrix</name><parameter_list>()</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>floats</name> <init>= <expr><operator>(</operator><name><name>float</name><index>[]</index></name><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>
            <return>return <expr><operator>new</operator> <call><name>Matrix4</name><argument_list>(<argument><expr><name>floats</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>Color</name></type> <name>getColor</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>Color</name><operator>)</operator> <name>obj</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class></unit>
