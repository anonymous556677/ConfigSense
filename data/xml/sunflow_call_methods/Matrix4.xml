<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/sunflow/src/org/sunflow/math/Matrix4.java"><package>package <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name></name>;</package>

<comment type="block" format="javadoc">/**
 * This class is used to represent general geometric transformations in 3D. Note
 * that the rotation matrices assume a right-handed convention.
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>Matrix4</name> <block>{
    <comment type="line">// matrix elements, m(row,col)</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>m00</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>m01</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>m02</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>m03</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>m10</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>m11</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>m12</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>m13</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>m20</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>m21</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>m22</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>m23</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>m30</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>m31</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>m32</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>m33</name></decl>;</decl_stmt>

    <comment type="line">// usefull constant matrices</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Matrix4</name></type> <name>ZERO</name> <init>= <expr><operator>new</operator> <call><name>Matrix4</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Matrix4</name></type> <name>IDENTITY</name> <init>= <expr><call><name><name>Matrix4</name><operator>.</operator><name>scale</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Creates an empty matrix. All elements are 0.
     */</comment>
    <constructor><specifier>public</specifier> <name>Matrix4</name><parameter_list>()</parameter_list> <block>{<block_content>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Creates a matrix with the specified elements
     * 
     * @param m00 value at row 0, col 0
     * @param m01 value at row 0, col 1
     * @param m02 value at row 0, col 2
     * @param m03 value at row 0, col 3
     * @param m10 value at row 1, col 0
     * @param m11 value at row 1, col 1
     * @param m12 value at row 1, col 2
     * @param m13 value at row 1, col 3
     * @param m20 value at row 2, col 0
     * @param m21 value at row 2, col 1
     * @param m22 value at row 2, col 2
     * @param m23 value at row 2, col 3
     * @param m30 value at row 3, col 0
     * @param m31 value at row 3, col 1
     * @param m32 value at row 3, col 2
     * @param m33 value at row 3, col 3
     */</comment>
    <constructor><specifier>public</specifier> <name>Matrix4</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>m00</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>m01</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>m02</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>m03</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>m10</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>m11</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>m12</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>m13</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>m20</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>m21</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>m22</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>m23</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>m30</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>m31</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>m32</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>m33</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>m00</name></name> <operator>=</operator> <name>m00</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>m01</name></name> <operator>=</operator> <name>m01</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>m02</name></name> <operator>=</operator> <name>m02</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>m03</name></name> <operator>=</operator> <name>m03</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>m10</name></name> <operator>=</operator> <name>m10</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>m11</name></name> <operator>=</operator> <name>m11</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>m12</name></name> <operator>=</operator> <name>m12</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>m13</name></name> <operator>=</operator> <name>m13</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>m20</name></name> <operator>=</operator> <name>m20</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>m21</name></name> <operator>=</operator> <name>m21</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>m22</name></name> <operator>=</operator> <name>m22</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>m23</name></name> <operator>=</operator> <name>m23</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>m30</name></name> <operator>=</operator> <name>m30</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>m31</name></name> <operator>=</operator> <name>m31</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>m32</name></name> <operator>=</operator> <name>m32</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>m33</name></name> <operator>=</operator> <name>m33</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Initialize a matrix from the specified 16 element array. The matrix may
     * be given in row or column major form.
     * 
     * @param m a 16 element array in row or column major form
     * @param rowMajor &lt;code&gt;true&lt;/code&gt; if the array is in row major form,
     *            &lt;code&gt;false&lt;/code&gt;if it is in column major form
     */</comment>
    <constructor><specifier>public</specifier> <name>Matrix4</name><parameter_list>(<parameter><decl><type><name><name>float</name><index>[]</index></name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>rowMajor</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>rowMajor</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>m00</name> <operator>=</operator> <name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>m01</name> <operator>=</operator> <name><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>m02</name> <operator>=</operator> <name><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>m03</name> <operator>=</operator> <name><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>m10</name> <operator>=</operator> <name><name>m</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>m11</name> <operator>=</operator> <name><name>m</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>m12</name> <operator>=</operator> <name><name>m</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>m13</name> <operator>=</operator> <name><name>m</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>m20</name> <operator>=</operator> <name><name>m</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>m21</name> <operator>=</operator> <name><name>m</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>m22</name> <operator>=</operator> <name><name>m</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>m23</name> <operator>=</operator> <name><name>m</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>m30</name> <operator>=</operator> <name><name>m</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>m31</name> <operator>=</operator> <name><name>m</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>m32</name> <operator>=</operator> <name><name>m</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>m33</name> <operator>=</operator> <name><name>m</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>m00</name> <operator>=</operator> <name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>m01</name> <operator>=</operator> <name><name>m</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>m02</name> <operator>=</operator> <name><name>m</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>m03</name> <operator>=</operator> <name><name>m</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>m10</name> <operator>=</operator> <name><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>m11</name> <operator>=</operator> <name><name>m</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>m12</name> <operator>=</operator> <name><name>m</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>m13</name> <operator>=</operator> <name><name>m</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>m20</name> <operator>=</operator> <name><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>m21</name> <operator>=</operator> <name><name>m</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>m22</name> <operator>=</operator> <name><name>m</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>m23</name> <operator>=</operator> <name><name>m</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>m30</name> <operator>=</operator> <name><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>m31</name> <operator>=</operator> <name><name>m</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>m32</name> <operator>=</operator> <name><name>m</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>m33</name> <operator>=</operator> <name><name>m</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name><name>float</name><index>[]</index></name></type> <name>asRowMajor</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <name><name>float</name><index>[]</index></name> <block>{ <expr><name>m00</name></expr>, <expr><name>m01</name></expr>, <expr><name>m02</name></expr>, <expr><name>m03</name></expr>, <expr><name>m10</name></expr>, <expr><name>m11</name></expr>, <expr><name>m12</name></expr>, <expr><name>m13</name></expr>, <expr><name>m20</name></expr>, <expr><name>m21</name></expr>,
                <expr><name>m22</name></expr>, <expr><name>m23</name></expr>, <expr><name>m30</name></expr>, <expr><name>m31</name></expr>, <expr><name>m32</name></expr>, <expr><name>m33</name></expr> }</block></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name><name>float</name><index>[]</index></name></type> <name>asColMajor</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <name><name>float</name><index>[]</index></name> <block>{ <expr><name>m00</name></expr>, <expr><name>m10</name></expr>, <expr><name>m20</name></expr>, <expr><name>m30</name></expr>, <expr><name>m01</name></expr>, <expr><name>m11</name></expr>, <expr><name>m21</name></expr>, <expr><name>m31</name></expr>, <expr><name>m02</name></expr>, <expr><name>m12</name></expr>,
                <expr><name>m22</name></expr>, <expr><name>m32</name></expr>, <expr><name>m03</name></expr>, <expr><name>m13</name></expr>, <expr><name>m23</name></expr>, <expr><name>m33</name></expr> }</block></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Compute the matrix determinant.
     * 
     * @return determinant of this matrix
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>float</name></type> <name>determinant</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>float</name></type> <name>A0</name> <init>= <expr><name>m00</name> <operator>*</operator> <name>m11</name> <operator>-</operator> <name>m01</name> <operator>*</operator> <name>m10</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>A1</name> <init>= <expr><name>m00</name> <operator>*</operator> <name>m12</name> <operator>-</operator> <name>m02</name> <operator>*</operator> <name>m10</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>A2</name> <init>= <expr><name>m00</name> <operator>*</operator> <name>m13</name> <operator>-</operator> <name>m03</name> <operator>*</operator> <name>m10</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>A3</name> <init>= <expr><name>m01</name> <operator>*</operator> <name>m12</name> <operator>-</operator> <name>m02</name> <operator>*</operator> <name>m11</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>A4</name> <init>= <expr><name>m01</name> <operator>*</operator> <name>m13</name> <operator>-</operator> <name>m03</name> <operator>*</operator> <name>m11</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>A5</name> <init>= <expr><name>m02</name> <operator>*</operator> <name>m13</name> <operator>-</operator> <name>m03</name> <operator>*</operator> <name>m12</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>float</name></type> <name>B0</name> <init>= <expr><name>m20</name> <operator>*</operator> <name>m31</name> <operator>-</operator> <name>m21</name> <operator>*</operator> <name>m30</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>B1</name> <init>= <expr><name>m20</name> <operator>*</operator> <name>m32</name> <operator>-</operator> <name>m22</name> <operator>*</operator> <name>m30</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>B2</name> <init>= <expr><name>m20</name> <operator>*</operator> <name>m33</name> <operator>-</operator> <name>m23</name> <operator>*</operator> <name>m30</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>B3</name> <init>= <expr><name>m21</name> <operator>*</operator> <name>m32</name> <operator>-</operator> <name>m22</name> <operator>*</operator> <name>m31</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>B4</name> <init>= <expr><name>m21</name> <operator>*</operator> <name>m33</name> <operator>-</operator> <name>m23</name> <operator>*</operator> <name>m31</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>B5</name> <init>= <expr><name>m22</name> <operator>*</operator> <name>m33</name> <operator>-</operator> <name>m23</name> <operator>*</operator> <name>m32</name></expr></init></decl>;</decl_stmt>

        <return>return <expr><name>A0</name> <operator>*</operator> <name>B5</name> <operator>-</operator> <name>A1</name> <operator>*</operator> <name>B4</name> <operator>+</operator> <name>A2</name> <operator>*</operator> <name>B3</name> <operator>+</operator> <name>A3</name> <operator>*</operator> <name>B2</name> <operator>-</operator> <name>A4</name> <operator>*</operator> <name>B1</name> <operator>+</operator> <name>A5</name> <operator>*</operator> <name>B0</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Compute the inverse of this matrix and return it as a new object. If the
     * matrix is not invertible, &lt;code&gt;null&lt;/code&gt; is returned.
     * 
     * @return the inverse of this matrix, or &lt;code&gt;null&lt;/code&gt; if not
     *         invertible
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>Matrix4</name></type> <name>inverse</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>float</name></type> <name>A0</name> <init>= <expr><name>m00</name> <operator>*</operator> <name>m11</name> <operator>-</operator> <name>m01</name> <operator>*</operator> <name>m10</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>A1</name> <init>= <expr><name>m00</name> <operator>*</operator> <name>m12</name> <operator>-</operator> <name>m02</name> <operator>*</operator> <name>m10</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>A2</name> <init>= <expr><name>m00</name> <operator>*</operator> <name>m13</name> <operator>-</operator> <name>m03</name> <operator>*</operator> <name>m10</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>A3</name> <init>= <expr><name>m01</name> <operator>*</operator> <name>m12</name> <operator>-</operator> <name>m02</name> <operator>*</operator> <name>m11</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>A4</name> <init>= <expr><name>m01</name> <operator>*</operator> <name>m13</name> <operator>-</operator> <name>m03</name> <operator>*</operator> <name>m11</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>A5</name> <init>= <expr><name>m02</name> <operator>*</operator> <name>m13</name> <operator>-</operator> <name>m03</name> <operator>*</operator> <name>m12</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>float</name></type> <name>B0</name> <init>= <expr><name>m20</name> <operator>*</operator> <name>m31</name> <operator>-</operator> <name>m21</name> <operator>*</operator> <name>m30</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>B1</name> <init>= <expr><name>m20</name> <operator>*</operator> <name>m32</name> <operator>-</operator> <name>m22</name> <operator>*</operator> <name>m30</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>B2</name> <init>= <expr><name>m20</name> <operator>*</operator> <name>m33</name> <operator>-</operator> <name>m23</name> <operator>*</operator> <name>m30</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>B3</name> <init>= <expr><name>m21</name> <operator>*</operator> <name>m32</name> <operator>-</operator> <name>m22</name> <operator>*</operator> <name>m31</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>B4</name> <init>= <expr><name>m21</name> <operator>*</operator> <name>m33</name> <operator>-</operator> <name>m23</name> <operator>*</operator> <name>m31</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>B5</name> <init>= <expr><name>m22</name> <operator>*</operator> <name>m33</name> <operator>-</operator> <name>m23</name> <operator>*</operator> <name>m32</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>float</name></type> <name>det</name> <init>= <expr><name>A0</name> <operator>*</operator> <name>B5</name> <operator>-</operator> <name>A1</name> <operator>*</operator> <name>B4</name> <operator>+</operator> <name>A2</name> <operator>*</operator> <name>B3</name> <operator>+</operator> <name>A3</name> <operator>*</operator> <name>B2</name> <operator>-</operator> <name>A4</name> <operator>*</operator> <name>B1</name> <operator>+</operator> <name>A5</name> <operator>*</operator> <name>B0</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name>det</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1e-12f</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="line">// matrix is not invertible</comment>
        <decl_stmt><decl><type><name>float</name></type> <name>invDet</name> <init>= <expr><literal type="number">1</literal> <operator>/</operator> <name>det</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Matrix4</name></type> <name>inv</name> <init>= <expr><operator>new</operator> <call><name>Matrix4</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>inv</name><operator>.</operator><name>m00</name></name> <operator>=</operator> <operator>(</operator><operator>+</operator><name>m11</name> <operator>*</operator> <name>B5</name> <operator>-</operator> <name>m12</name> <operator>*</operator> <name>B4</name> <operator>+</operator> <name>m13</name> <operator>*</operator> <name>B3</name><operator>)</operator> <operator>*</operator> <name>invDet</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>inv</name><operator>.</operator><name>m10</name></name> <operator>=</operator> <operator>(</operator><operator>-</operator><name>m10</name> <operator>*</operator> <name>B5</name> <operator>+</operator> <name>m12</name> <operator>*</operator> <name>B2</name> <operator>-</operator> <name>m13</name> <operator>*</operator> <name>B1</name><operator>)</operator> <operator>*</operator> <name>invDet</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>inv</name><operator>.</operator><name>m20</name></name> <operator>=</operator> <operator>(</operator><operator>+</operator><name>m10</name> <operator>*</operator> <name>B4</name> <operator>-</operator> <name>m11</name> <operator>*</operator> <name>B2</name> <operator>+</operator> <name>m13</name> <operator>*</operator> <name>B0</name><operator>)</operator> <operator>*</operator> <name>invDet</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>inv</name><operator>.</operator><name>m30</name></name> <operator>=</operator> <operator>(</operator><operator>-</operator><name>m10</name> <operator>*</operator> <name>B3</name> <operator>+</operator> <name>m11</name> <operator>*</operator> <name>B1</name> <operator>-</operator> <name>m12</name> <operator>*</operator> <name>B0</name><operator>)</operator> <operator>*</operator> <name>invDet</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>inv</name><operator>.</operator><name>m01</name></name> <operator>=</operator> <operator>(</operator><operator>-</operator><name>m01</name> <operator>*</operator> <name>B5</name> <operator>+</operator> <name>m02</name> <operator>*</operator> <name>B4</name> <operator>-</operator> <name>m03</name> <operator>*</operator> <name>B3</name><operator>)</operator> <operator>*</operator> <name>invDet</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>inv</name><operator>.</operator><name>m11</name></name> <operator>=</operator> <operator>(</operator><operator>+</operator><name>m00</name> <operator>*</operator> <name>B5</name> <operator>-</operator> <name>m02</name> <operator>*</operator> <name>B2</name> <operator>+</operator> <name>m03</name> <operator>*</operator> <name>B1</name><operator>)</operator> <operator>*</operator> <name>invDet</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>inv</name><operator>.</operator><name>m21</name></name> <operator>=</operator> <operator>(</operator><operator>-</operator><name>m00</name> <operator>*</operator> <name>B4</name> <operator>+</operator> <name>m01</name> <operator>*</operator> <name>B2</name> <operator>-</operator> <name>m03</name> <operator>*</operator> <name>B0</name><operator>)</operator> <operator>*</operator> <name>invDet</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>inv</name><operator>.</operator><name>m31</name></name> <operator>=</operator> <operator>(</operator><operator>+</operator><name>m00</name> <operator>*</operator> <name>B3</name> <operator>-</operator> <name>m01</name> <operator>*</operator> <name>B1</name> <operator>+</operator> <name>m02</name> <operator>*</operator> <name>B0</name><operator>)</operator> <operator>*</operator> <name>invDet</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>inv</name><operator>.</operator><name>m02</name></name> <operator>=</operator> <operator>(</operator><operator>+</operator><name>m31</name> <operator>*</operator> <name>A5</name> <operator>-</operator> <name>m32</name> <operator>*</operator> <name>A4</name> <operator>+</operator> <name>m33</name> <operator>*</operator> <name>A3</name><operator>)</operator> <operator>*</operator> <name>invDet</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>inv</name><operator>.</operator><name>m12</name></name> <operator>=</operator> <operator>(</operator><operator>-</operator><name>m30</name> <operator>*</operator> <name>A5</name> <operator>+</operator> <name>m32</name> <operator>*</operator> <name>A2</name> <operator>-</operator> <name>m33</name> <operator>*</operator> <name>A1</name><operator>)</operator> <operator>*</operator> <name>invDet</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>inv</name><operator>.</operator><name>m22</name></name> <operator>=</operator> <operator>(</operator><operator>+</operator><name>m30</name> <operator>*</operator> <name>A4</name> <operator>-</operator> <name>m31</name> <operator>*</operator> <name>A2</name> <operator>+</operator> <name>m33</name> <operator>*</operator> <name>A0</name><operator>)</operator> <operator>*</operator> <name>invDet</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>inv</name><operator>.</operator><name>m32</name></name> <operator>=</operator> <operator>(</operator><operator>-</operator><name>m30</name> <operator>*</operator> <name>A3</name> <operator>+</operator> <name>m31</name> <operator>*</operator> <name>A1</name> <operator>-</operator> <name>m32</name> <operator>*</operator> <name>A0</name><operator>)</operator> <operator>*</operator> <name>invDet</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>inv</name><operator>.</operator><name>m03</name></name> <operator>=</operator> <operator>(</operator><operator>-</operator><name>m21</name> <operator>*</operator> <name>A5</name> <operator>+</operator> <name>m22</name> <operator>*</operator> <name>A4</name> <operator>-</operator> <name>m23</name> <operator>*</operator> <name>A3</name><operator>)</operator> <operator>*</operator> <name>invDet</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>inv</name><operator>.</operator><name>m13</name></name> <operator>=</operator> <operator>(</operator><operator>+</operator><name>m20</name> <operator>*</operator> <name>A5</name> <operator>-</operator> <name>m22</name> <operator>*</operator> <name>A2</name> <operator>+</operator> <name>m23</name> <operator>*</operator> <name>A1</name><operator>)</operator> <operator>*</operator> <name>invDet</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>inv</name><operator>.</operator><name>m23</name></name> <operator>=</operator> <operator>(</operator><operator>-</operator><name>m20</name> <operator>*</operator> <name>A4</name> <operator>+</operator> <name>m21</name> <operator>*</operator> <name>A2</name> <operator>-</operator> <name>m23</name> <operator>*</operator> <name>A0</name><operator>)</operator> <operator>*</operator> <name>invDet</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>inv</name><operator>.</operator><name>m33</name></name> <operator>=</operator> <operator>(</operator><operator>+</operator><name>m20</name> <operator>*</operator> <name>A3</name> <operator>-</operator> <name>m21</name> <operator>*</operator> <name>A1</name> <operator>+</operator> <name>m22</name> <operator>*</operator> <name>A0</name><operator>)</operator> <operator>*</operator> <name>invDet</name></expr>;</expr_stmt>
        <return>return <expr><name>inv</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Computes this*m and return the result as a new Matrix4
     * 
     * @param m right hand side of the multiplication
     * @return a new Matrix4 object equal to &lt;code&gt;this*m&lt;/code&gt;
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>Matrix4</name></type> <name>multiply</name><parameter_list>(<parameter><decl><type><name>Matrix4</name></type> <name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// matrix multiplication is m[r][c] = (row[r]).(col[c])</comment>
        <decl_stmt><decl><type><name>float</name></type> <name>rm00</name> <init>= <expr><name>m00</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m00</name></name> <operator>+</operator> <name>m01</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m10</name></name> <operator>+</operator> <name>m02</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m20</name></name> <operator>+</operator> <name>m03</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m30</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>rm01</name> <init>= <expr><name>m00</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m01</name></name> <operator>+</operator> <name>m01</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m11</name></name> <operator>+</operator> <name>m02</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m21</name></name> <operator>+</operator> <name>m03</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m31</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>rm02</name> <init>= <expr><name>m00</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m02</name></name> <operator>+</operator> <name>m01</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m12</name></name> <operator>+</operator> <name>m02</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m22</name></name> <operator>+</operator> <name>m03</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m32</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>rm03</name> <init>= <expr><name>m00</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m03</name></name> <operator>+</operator> <name>m01</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m13</name></name> <operator>+</operator> <name>m02</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m23</name></name> <operator>+</operator> <name>m03</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m33</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>float</name></type> <name>rm10</name> <init>= <expr><name>m10</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m00</name></name> <operator>+</operator> <name>m11</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m10</name></name> <operator>+</operator> <name>m12</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m20</name></name> <operator>+</operator> <name>m13</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m30</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>rm11</name> <init>= <expr><name>m10</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m01</name></name> <operator>+</operator> <name>m11</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m11</name></name> <operator>+</operator> <name>m12</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m21</name></name> <operator>+</operator> <name>m13</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m31</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>rm12</name> <init>= <expr><name>m10</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m02</name></name> <operator>+</operator> <name>m11</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m12</name></name> <operator>+</operator> <name>m12</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m22</name></name> <operator>+</operator> <name>m13</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m32</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>rm13</name> <init>= <expr><name>m10</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m03</name></name> <operator>+</operator> <name>m11</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m13</name></name> <operator>+</operator> <name>m12</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m23</name></name> <operator>+</operator> <name>m13</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m33</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>float</name></type> <name>rm20</name> <init>= <expr><name>m20</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m00</name></name> <operator>+</operator> <name>m21</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m10</name></name> <operator>+</operator> <name>m22</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m20</name></name> <operator>+</operator> <name>m23</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m30</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>rm21</name> <init>= <expr><name>m20</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m01</name></name> <operator>+</operator> <name>m21</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m11</name></name> <operator>+</operator> <name>m22</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m21</name></name> <operator>+</operator> <name>m23</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m31</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>rm22</name> <init>= <expr><name>m20</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m02</name></name> <operator>+</operator> <name>m21</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m12</name></name> <operator>+</operator> <name>m22</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m22</name></name> <operator>+</operator> <name>m23</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m32</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>rm23</name> <init>= <expr><name>m20</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m03</name></name> <operator>+</operator> <name>m21</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m13</name></name> <operator>+</operator> <name>m22</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m23</name></name> <operator>+</operator> <name>m23</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m33</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>float</name></type> <name>rm30</name> <init>= <expr><name>m30</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m00</name></name> <operator>+</operator> <name>m31</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m10</name></name> <operator>+</operator> <name>m32</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m20</name></name> <operator>+</operator> <name>m33</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m30</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>rm31</name> <init>= <expr><name>m30</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m01</name></name> <operator>+</operator> <name>m31</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m11</name></name> <operator>+</operator> <name>m32</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m21</name></name> <operator>+</operator> <name>m33</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m31</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>rm32</name> <init>= <expr><name>m30</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m02</name></name> <operator>+</operator> <name>m31</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m12</name></name> <operator>+</operator> <name>m32</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m22</name></name> <operator>+</operator> <name>m33</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m32</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>rm33</name> <init>= <expr><name>m30</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m03</name></name> <operator>+</operator> <name>m31</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m13</name></name> <operator>+</operator> <name>m32</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m23</name></name> <operator>+</operator> <name>m33</name> <operator>*</operator> <name><name>m</name><operator>.</operator><name>m33</name></name></expr></init></decl>;</decl_stmt>

        <return>return <expr><operator>new</operator> <call><name>Matrix4</name><argument_list>(<argument><expr><name>rm00</name></expr></argument>, <argument><expr><name>rm01</name></expr></argument>, <argument><expr><name>rm02</name></expr></argument>, <argument><expr><name>rm03</name></expr></argument>, <argument><expr><name>rm10</name></expr></argument>, <argument><expr><name>rm11</name></expr></argument>, <argument><expr><name>rm12</name></expr></argument>, <argument><expr><name>rm13</name></expr></argument>, <argument><expr><name>rm20</name></expr></argument>, <argument><expr><name>rm21</name></expr></argument>, <argument><expr><name>rm22</name></expr></argument>, <argument><expr><name>rm23</name></expr></argument>, <argument><expr><name>rm30</name></expr></argument>, <argument><expr><name>rm31</name></expr></argument>, <argument><expr><name>rm32</name></expr></argument>, <argument><expr><name>rm33</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Transforms each corner of the specified axis-aligned bounding box and
     * returns a new bounding box which incloses the transformed corners.
     * 
     * @param b original bounding box
     * @return a new BoundingBox object which encloses the transform version of
     *         b
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>BoundingBox</name></type> <name>transform</name><parameter_list>(<parameter><decl><type><name>BoundingBox</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>b</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>new</operator> <call><name>BoundingBox</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <comment type="line">// special case extreme corners</comment>
        <decl_stmt><decl><type><name>BoundingBox</name></type> <name>rb</name> <init>= <expr><operator>new</operator> <call><name>BoundingBox</name><argument_list>(<argument><expr><call><name>transformP</name><argument_list>(<argument><expr><call><name><name>b</name><operator>.</operator><name>getMinimum</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rb</name><operator>.</operator><name>include</name></name><argument_list>(<argument><expr><call><name>transformP</name><argument_list>(<argument><expr><call><name><name>b</name><operator>.</operator><name>getMaximum</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// do internal corners</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>rb</name><operator>.</operator><name>include</name></name><argument_list>(<argument><expr><call><name>transformP</name><argument_list>(<argument><expr><call><name><name>b</name><operator>.</operator><name>getCorner</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <return>return <expr><name>rb</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Computes this*v and returns the result as a new Vector3 object. This
     * method assumes the bottom row of the matrix is &lt;code&gt;[0,0,0,1]&lt;/code&gt;.
     * 
     * @param v vector to multiply
     * @return a new Vector3 object equal to &lt;code&gt;this*v&lt;/code&gt;
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>Vector3</name></type> <name>transformV</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Vector3</name></type> <name>rv</name> <init>= <expr><operator>new</operator> <call><name>Vector3</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>rv</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>m00</name> <operator>*</operator> <name><name>v</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>m01</name> <operator>*</operator> <name><name>v</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>m02</name> <operator>*</operator> <name><name>v</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>rv</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>m10</name> <operator>*</operator> <name><name>v</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>m11</name> <operator>*</operator> <name><name>v</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>m12</name> <operator>*</operator> <name><name>v</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>rv</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name>m20</name> <operator>*</operator> <name><name>v</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>m21</name> <operator>*</operator> <name><name>v</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>m22</name> <operator>*</operator> <name><name>v</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
        <return>return <expr><name>rv</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Computes (this^T)*v and returns the result as a new Vector3 object. This
     * method assumes the bottom row of the matrix is &lt;code&gt;[0,0,0,1]&lt;/code&gt;.
     * 
     * @param v vector to multiply
     * @return a new Vector3 object equal to &lt;code&gt;(this^T)*v&lt;/code&gt;
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>Vector3</name></type> <name>transformTransposeV</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Vector3</name></type> <name>rv</name> <init>= <expr><operator>new</operator> <call><name>Vector3</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>rv</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>m00</name> <operator>*</operator> <name><name>v</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>m10</name> <operator>*</operator> <name><name>v</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>m20</name> <operator>*</operator> <name><name>v</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>rv</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>m01</name> <operator>*</operator> <name><name>v</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>m11</name> <operator>*</operator> <name><name>v</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>m21</name> <operator>*</operator> <name><name>v</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>rv</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name>m02</name> <operator>*</operator> <name><name>v</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>m12</name> <operator>*</operator> <name><name>v</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>m22</name> <operator>*</operator> <name><name>v</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
        <return>return <expr><name>rv</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Computes this*p and returns the result as a new Point3 object. This
     * method assumes the bottom row of the matrix is &lt;code&gt;[0,0,0,1]&lt;/code&gt;.
     * 
     * @param p point to multiply
     * @return a new Point3 object equal to &lt;code&gt;this*v&lt;/code&gt;
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>Point3</name></type> <name>transformP</name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Point3</name></type> <name>rp</name> <init>= <expr><operator>new</operator> <call><name>Point3</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>rp</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>m00</name> <operator>*</operator> <name><name>p</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>m01</name> <operator>*</operator> <name><name>p</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>m02</name> <operator>*</operator> <name><name>p</name><operator>.</operator><name>z</name></name> <operator>+</operator> <name>m03</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>rp</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>m10</name> <operator>*</operator> <name><name>p</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>m11</name> <operator>*</operator> <name><name>p</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>m12</name> <operator>*</operator> <name><name>p</name><operator>.</operator><name>z</name></name> <operator>+</operator> <name>m13</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>rp</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name>m20</name> <operator>*</operator> <name><name>p</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>m21</name> <operator>*</operator> <name><name>p</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>m22</name> <operator>*</operator> <name><name>p</name><operator>.</operator><name>z</name></name> <operator>+</operator> <name>m23</name></expr>;</expr_stmt>
        <return>return <expr><name>rp</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Computes the x component of this*(x,y,z,0).
     * 
     * @param x x coordinate of the vector to multiply
     * @param y y coordinate of the vector to multiply
     * @param z z coordinate of the vector to multiply
     * @return
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>float</name></type> <name>transformVX</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name>m00</name> <operator>*</operator> <name>x</name> <operator>+</operator> <name>m01</name> <operator>*</operator> <name>y</name> <operator>+</operator> <name>m02</name> <operator>*</operator> <name>z</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Computes the y component of this*(x,y,z,0).
     * 
     * @param x x coordinate of the vector to multiply
     * @param y y coordinate of the vector to multiply
     * @param z z coordinate of the vector to multiply
     * @return
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>float</name></type> <name>transformVY</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name>m10</name> <operator>*</operator> <name>x</name> <operator>+</operator> <name>m11</name> <operator>*</operator> <name>y</name> <operator>+</operator> <name>m12</name> <operator>*</operator> <name>z</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Computes the z component of this*(x,y,z,0).
     * 
     * @param x x coordinate of the vector to multiply
     * @param y y coordinate of the vector to multiply
     * @param z z coordinate of the vector to multiply
     * @return
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>float</name></type> <name>transformVZ</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name>m20</name> <operator>*</operator> <name>x</name> <operator>+</operator> <name>m21</name> <operator>*</operator> <name>y</name> <operator>+</operator> <name>m22</name> <operator>*</operator> <name>z</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Computes the x component of (this^T)*(x,y,z,0).
     * 
     * @param x x coordinate of the vector to multiply
     * @param y y coordinate of the vector to multiply
     * @param z z coordinate of the vector to multiply
     * @return
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>float</name></type> <name>transformTransposeVX</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name>m00</name> <operator>*</operator> <name>x</name> <operator>+</operator> <name>m10</name> <operator>*</operator> <name>y</name> <operator>+</operator> <name>m20</name> <operator>*</operator> <name>z</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Computes the y component of (this^T)*(x,y,z,0).
     * 
     * @param x x coordinate of the vector to multiply
     * @param y y coordinate of the vector to multiply
     * @param z z coordinate of the vector to multiply
     * @return
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>float</name></type> <name>transformTransposeVY</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name>m01</name> <operator>*</operator> <name>x</name> <operator>+</operator> <name>m11</name> <operator>*</operator> <name>y</name> <operator>+</operator> <name>m21</name> <operator>*</operator> <name>z</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Computes the z component of (this^T)*(x,y,z,0).
     * 
     * @param x x coordinate of the vector to multiply
     * @param y y coordinate of the vector to multiply
     * @param z z coordinate of the vector to multiply
     * @return
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>float</name></type> <name>transformTransposeVZ</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name>m02</name> <operator>*</operator> <name>x</name> <operator>+</operator> <name>m12</name> <operator>*</operator> <name>y</name> <operator>+</operator> <name>m22</name> <operator>*</operator> <name>z</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Computes the x component of this*(x,y,z,1).
     * 
     * @param x x coordinate of the vector to multiply
     * @param y y coordinate of the vector to multiply
     * @param z z coordinate of the vector to multiply
     * @return
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>float</name></type> <name>transformPX</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name>m00</name> <operator>*</operator> <name>x</name> <operator>+</operator> <name>m01</name> <operator>*</operator> <name>y</name> <operator>+</operator> <name>m02</name> <operator>*</operator> <name>z</name> <operator>+</operator> <name>m03</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Computes the y component of this*(x,y,z,1).
     * 
     * @param x x coordinate of the vector to multiply
     * @param y y coordinate of the vector to multiply
     * @param z z coordinate of the vector to multiply
     * @return
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>float</name></type> <name>transformPY</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name>m10</name> <operator>*</operator> <name>x</name> <operator>+</operator> <name>m11</name> <operator>*</operator> <name>y</name> <operator>+</operator> <name>m12</name> <operator>*</operator> <name>z</name> <operator>+</operator> <name>m13</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Computes the z component of this*(x,y,z,1).
     * 
     * @param x x coordinate of the vector to multiply
     * @param y y coordinate of the vector to multiply
     * @param z z coordinate of the vector to multiply
     * @return
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>float</name></type> <name>transformPZ</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name>m20</name> <operator>*</operator> <name>x</name> <operator>+</operator> <name>m21</name> <operator>*</operator> <name>y</name> <operator>+</operator> <name>m22</name> <operator>*</operator> <name>z</name> <operator>+</operator> <name>m23</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create a translation matrix for the specified vector.
     * 
     * @param x x component of translation
     * @param y y component of translation
     * @param z z component of translation
     * @return a new Matrix4 object representing the translation
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>Matrix4</name></type> <name>translation</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Matrix4</name></type> <name>m</name> <init>= <expr><operator>new</operator> <call><name>Matrix4</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m00</name></name> <operator>=</operator> <name><name>m</name><operator>.</operator><name>m11</name></name> <operator>=</operator> <name><name>m</name><operator>.</operator><name>m22</name></name> <operator>=</operator> <name><name>m</name><operator>.</operator><name>m33</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m03</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m13</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m23</name></name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
        <return>return <expr><name>m</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a rotation matrix about the X axis.
     * 
     * @param theta angle to rotate about the X axis in radians
     * @return a new Matrix4 object representing the rotation
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>Matrix4</name></type> <name>rotateX</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>theta</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Matrix4</name></type> <name>m</name> <init>= <expr><operator>new</operator> <call><name>Matrix4</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>s</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m00</name></name> <operator>=</operator> <name><name>m</name><operator>.</operator><name>m33</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m11</name></name> <operator>=</operator> <name><name>m</name><operator>.</operator><name>m22</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m12</name></name> <operator>=</operator> <operator>-</operator><name>s</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m21</name></name> <operator>=</operator> <operator>+</operator><name>s</name></expr>;</expr_stmt>
        <return>return <expr><name>m</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a rotation matrix about the Y axis.
     * 
     * @param theta angle to rotate about the Y axis in radians
     * @return a new Matrix4 object representing the rotation
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>Matrix4</name></type> <name>rotateY</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>theta</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Matrix4</name></type> <name>m</name> <init>= <expr><operator>new</operator> <call><name>Matrix4</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>s</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m11</name></name> <operator>=</operator> <name><name>m</name><operator>.</operator><name>m33</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m00</name></name> <operator>=</operator> <name><name>m</name><operator>.</operator><name>m22</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m02</name></name> <operator>=</operator> <operator>+</operator><name>s</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m20</name></name> <operator>=</operator> <operator>-</operator><name>s</name></expr>;</expr_stmt>
        <return>return <expr><name>m</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a rotation matrix about the Z axis.
     * 
     * @param theta angle to rotate about the Z axis in radians
     * @return a new Matrix4 object representing the rotation
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>Matrix4</name></type> <name>rotateZ</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>theta</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Matrix4</name></type> <name>m</name> <init>= <expr><operator>new</operator> <call><name>Matrix4</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>s</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m22</name></name> <operator>=</operator> <name><name>m</name><operator>.</operator><name>m33</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m00</name></name> <operator>=</operator> <name><name>m</name><operator>.</operator><name>m11</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m01</name></name> <operator>=</operator> <operator>-</operator><name>s</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m10</name></name> <operator>=</operator> <operator>+</operator><name>s</name></expr>;</expr_stmt>
        <return>return <expr><name>m</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a rotation matrix about the specified axis. The axis vector need
     * not be normalized.
     * 
     * @param x x component of the axis vector
     * @param y y component of the axis vector
     * @param z z component of the axis vector
     * @param theta angle to rotate about the axis in radians
     * @return a new Matrix4 object representing the rotation
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>Matrix4</name></type> <name>rotate</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>theta</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Matrix4</name></type> <name>m</name> <init>= <expr><operator>new</operator> <call><name>Matrix4</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>invLen</name> <init>= <expr><literal type="number">1</literal> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>sqrt</name></name><argument_list>(<argument><expr><name>x</name> <operator>*</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>y</name> <operator>+</operator> <name>z</name> <operator>*</operator> <name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>x</name> <operator>*=</operator> <name>invLen</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>*=</operator> <name>invLen</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>z</name> <operator>*=</operator> <name>invLen</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>s</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>t</name> <init>= <expr><literal type="number">1</literal> <operator>-</operator> <name>c</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m00</name></name> <operator>=</operator> <name>t</name> <operator>*</operator> <name>x</name> <operator>*</operator> <name>x</name> <operator>+</operator> <name>c</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m11</name></name> <operator>=</operator> <name>t</name> <operator>*</operator> <name>y</name> <operator>*</operator> <name>y</name> <operator>+</operator> <name>c</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m22</name></name> <operator>=</operator> <name>t</name> <operator>*</operator> <name>z</name> <operator>*</operator> <name>z</name> <operator>+</operator> <name>c</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>txy</name> <init>= <expr><name>t</name> <operator>*</operator> <name>x</name> <operator>*</operator> <name>y</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>sz</name> <init>= <expr><name>s</name> <operator>*</operator> <name>z</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m01</name></name> <operator>=</operator> <name>txy</name> <operator>-</operator> <name>sz</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m10</name></name> <operator>=</operator> <name>txy</name> <operator>+</operator> <name>sz</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>txz</name> <init>= <expr><name>t</name> <operator>*</operator> <name>x</name> <operator>*</operator> <name>z</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>sy</name> <init>= <expr><name>s</name> <operator>*</operator> <name>y</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m02</name></name> <operator>=</operator> <name>txz</name> <operator>+</operator> <name>sy</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m20</name></name> <operator>=</operator> <name>txz</name> <operator>-</operator> <name>sy</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>tyz</name> <init>= <expr><name>t</name> <operator>*</operator> <name>y</name> <operator>*</operator> <name>z</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>sx</name> <init>= <expr><name>s</name> <operator>*</operator> <name>x</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m12</name></name> <operator>=</operator> <name>tyz</name> <operator>-</operator> <name>sx</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m21</name></name> <operator>=</operator> <name>tyz</name> <operator>+</operator> <name>sx</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m33</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><name>m</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create a uniform scaling matrix.
     * 
     * @param s scale factor for all three axes
     * @return a new Matrix4 object representing the uniform scale
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>Matrix4</name></type> <name>scale</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Matrix4</name></type> <name>m</name> <init>= <expr><operator>new</operator> <call><name>Matrix4</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m00</name></name> <operator>=</operator> <name><name>m</name><operator>.</operator><name>m11</name></name> <operator>=</operator> <name><name>m</name><operator>.</operator><name>m22</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m33</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><name>m</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a non-uniform scaling matrix.
     * 
     * @param sx scale factor in the x dimension
     * @param sy scale factor in the y dimension
     * @param sz scale factor in the z dimension
     * @return a new Matrix4 object representing the non-uniform scale
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>Matrix4</name></type> <name>scale</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Matrix4</name></type> <name>m</name> <init>= <expr><operator>new</operator> <call><name>Matrix4</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m00</name></name> <operator>=</operator> <name>sx</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m11</name></name> <operator>=</operator> <name>sy</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m22</name></name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m33</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><name>m</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a rotation matrix from an OrthonormalBasis.
     * 
     * @param basis
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>Matrix4</name></type> <name>fromBasis</name><parameter_list>(<parameter><decl><type><name>OrthoNormalBasis</name></type> <name>basis</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Matrix4</name></type> <name>m</name> <init>= <expr><operator>new</operator> <call><name>Matrix4</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Vector3</name></type> <name>u</name> <init>= <expr><call><name><name>basis</name><operator>.</operator><name>transform</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Vector3</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Vector3</name></type> <name>v</name> <init>= <expr><call><name><name>basis</name><operator>.</operator><name>transform</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Vector3</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Vector3</name></type> <name>w</name> <init>= <expr><call><name><name>basis</name><operator>.</operator><name>transform</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Vector3</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m00</name></name> <operator>=</operator> <name><name>u</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m01</name></name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m02</name></name> <operator>=</operator> <name><name>w</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m10</name></name> <operator>=</operator> <name><name>u</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m11</name></name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m12</name></name> <operator>=</operator> <name><name>w</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m20</name></name> <operator>=</operator> <name><name>u</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m21</name></name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m22</name></name> <operator>=</operator> <name><name>w</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>m</name><operator>.</operator><name>m33</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><name>m</name></expr>;</return>
    </block_content>}</block></function>
}</block></class></unit>
