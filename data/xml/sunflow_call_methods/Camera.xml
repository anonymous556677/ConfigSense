<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/sunflow/src/org/sunflow/core/Camera.java"><package>package <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>SunflowAPI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Matrix4</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>OrthoNormalBasis</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Point3</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Vector3</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>system</name><operator>.</operator><name>UI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>system</name><operator>.</operator><name>UI</name><operator>.</operator><name>Module</name></name>;</import>

<class><specifier>public</specifier> class <name>Camera</name> <super_list><implements>implements <super><name>RenderObject</name></super></implements></super_list> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>CameraLens</name></type> <name>lens</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Matrix4</name></type> <name>c2w</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Matrix4</name></type> <name>w2c</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>Camera</name><parameter_list>(<parameter><decl><type><name>CameraLens</name></type> <name>lens</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lens</name></name> <operator>=</operator> <name>lens</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>c2w</name> <operator>=</operator> <name>w2c</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>ParameterList</name></type> <name>pl</name></decl></parameter>, <parameter><decl><type><name>SunflowAPI</name></type> <name>api</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Matrix4</name></type> <name>transform</name> <init>= <expr><call><name><name>pl</name><operator>.</operator><name>getMatrix</name></name><argument_list>(<argument><expr><literal type="string">"transform"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>transform</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// no transform was specified, check eye/target/up</comment>
            <decl_stmt><decl><type><name>Point3</name></type> <name>eye</name> <init>= <expr><call><name><name>pl</name><operator>.</operator><name>getPoint</name></name><argument_list>(<argument><expr><literal type="string">"eye"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Point3</name></type> <name>target</name> <init>= <expr><call><name><name>pl</name><operator>.</operator><name>getPoint</name></name><argument_list>(<argument><expr><literal type="string">"target"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Vector3</name></type> <name>up</name> <init>= <expr><call><name><name>pl</name><operator>.</operator><name>getVector</name></name><argument_list>(<argument><expr><literal type="string">"up"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>eye</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>target</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>up</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>c2w</name> <operator>=</operator> <call><name><name>Matrix4</name><operator>.</operator><name>fromBasis</name></name><argument_list>(<argument><expr><call><name><name>OrthoNormalBasis</name><operator>.</operator><name>makeFromWV</name></name><argument_list>(<argument><expr><call><name><name>Point3</name><operator>.</operator><name>sub</name></name><argument_list>(<argument><expr><name>eye</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Vector3</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>up</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>c2w</name> <operator>=</operator> <call><name><name>Matrix4</name><operator>.</operator><name>translation</name></name><argument_list>(<argument><expr><name><name>eye</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>eye</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>eye</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>multiply</name><argument_list>(<argument><expr><name>c2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>c2w</name> <operator>=</operator> <name>transform</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>c2w</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>w2c</name> <operator>=</operator> <call><name><name>c2w</name><operator>.</operator><name>inverse</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>w2c</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printError</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>CAM</name></name></expr></argument>, <argument><expr><literal type="string">"Camera matrix is not invertible"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>w2c</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <return>return <expr><call><name><name>lens</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>pl</name></expr></argument>, <argument><expr><name>api</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Ray</name></type> <name>getRay</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>imageWidth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>imageHeight</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>lensX</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>lensY</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>time</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Ray</name></type> <name>r</name> <init>= <expr><call><name><name>lens</name><operator>.</operator><name>getRay</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>imageWidth</name></expr></argument>, <argument><expr><name>imageHeight</name></expr></argument>, <argument><expr><name>lensX</name></expr></argument>, <argument><expr><name>lensY</name></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>c2w</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name><name>r</name><operator>.</operator><name>transform</name></name><argument_list>(<argument><expr><name>c2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// renormalize to account for scale factors embeded in the transform</comment>
            <expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>normalize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>r</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Generate a ray from the origin of camera space toward the specified point
     * 
     * @param p point in world space
     * @return ray from the origin of camera space to the specified point
     */</comment>
    <function><type><name>Ray</name></type> <name>getRay</name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>Ray</name><argument_list>(<argument><expr><call><name><name>c2w</name><operator>.</operator><name>transformP</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Point3</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>Matrix4</name></type> <name>getCameraToWorld</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>c2w</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>Matrix4</name><operator>.</operator><name>IDENTITY</name></name></expr> </then><else>: <expr><name>c2w</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>Matrix4</name></type> <name>getWorldToCamera</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>w2c</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>Matrix4</name><operator>.</operator><name>IDENTITY</name></name></expr> </then><else>: <expr><name>w2c</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>
}</block></class></unit>
