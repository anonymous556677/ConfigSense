<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/sunflow/src/org/sunflow/math/Vector3.java"><package>package <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name></name>;</package>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>Vector3</name> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>float</name><index>[]</index></name></type> <name>COS_THETA</name> <init>= <expr><operator>new</operator> <name><name>float</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>float</name><index>[]</index></name></type> <name>SIN_THETA</name> <init>= <expr><operator>new</operator> <name><name>float</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>float</name><index>[]</index></name></type> <name>COS_PHI</name> <init>= <expr><operator>new</operator> <name><name>float</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>float</name><index>[]</index></name></type> <name>SIN_PHI</name> <init>= <expr><operator>new</operator> <name><name>float</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <name>float</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>

    <static>static <block>{<block_content>
        <comment type="line">// precompute tables to compress unit vectors</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>double</name></type> <name>angle</name> <init>= <expr><operator>(</operator><name>i</name> <operator>*</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name><operator>)</operator> <operator>/</operator> <literal type="number">256.0</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>COS_THETA</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>SIN_THETA</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>COS_PHI</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>angle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>SIN_PHI</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>angle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></static>

    <constructor><specifier>public</specifier> <name>Vector3</name><parameter_list>()</parameter_list> <block>{<block_content>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>Vector3</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>Vector3</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>z</name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Vector3</name></type> <name>decode</name><parameter_list>(<parameter><decl><type><name>short</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>dest</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">0xFF00</literal><operator>)</operator> <operator>&gt;&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><name>n</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>SIN_THETA</name><index>[<expr><name>t</name></expr>]</index></name> <operator>*</operator> <name><name>COS_PHI</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>SIN_THETA</name><index>[<expr><name>t</name></expr>]</index></name> <operator>*</operator> <name><name>SIN_PHI</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>COS_THETA</name><index>[<expr><name>t</name></expr>]</index></name></expr>;</expr_stmt>
        <return>return <expr><name>dest</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Vector3</name></type> <name>decode</name><parameter_list>(<parameter><decl><type><name>short</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>decode</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Vector3</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>short</name></type> <name>encode</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>theta</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><call><name><name>Math</name><operator>.</operator><name>acos</name></name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><literal type="number">256.0</literal> <operator>/</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>theta</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>theta</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>phi</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><call><name><name>Math</name><operator>.</operator><name>atan2</name></name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><literal type="number">128.0</literal> <operator>/</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>phi</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>phi</name> <operator>+=</operator> <literal type="number">256</literal></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>phi</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>phi</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><operator>(</operator><name>short</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>theta</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>phi</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>float</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><literal type="number">0</literal></expr>:</case>
                <return>return <expr><name>x</name></expr>;</return>
            <case>case <expr><literal type="number">1</literal></expr>:</case>
                <return>return <expr><name>y</name></expr>;</return>
            <default>default:</default>
                <return>return <expr><name>z</name></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>float</name></type> <name>length</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>sqrt</name></name><argument_list>(<argument><expr><operator>(</operator><name>x</name> <operator>*</operator> <name>x</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name> <operator>*</operator> <name>y</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>z</name> <operator>*</operator> <name>z</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>float</name></type> <name>lengthSquared</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>x</name> <operator>*</operator> <name>x</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name> <operator>*</operator> <name>y</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>z</name> <operator>*</operator> <name>z</name><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>Vector3</name></type> <name>negate</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>-</operator><name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>-</operator><name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>z</name> <operator>=</operator> <operator>-</operator><name>z</name></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>Vector3</name></type> <name>negate</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>dest</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>-</operator><name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>-</operator><name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>z</name></name> <operator>=</operator> <operator>-</operator><name>z</name></expr>;</expr_stmt>
        <return>return <expr><name>dest</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>Vector3</name></type> <name>mul</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>x</name> <operator>*=</operator> <name>s</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>*=</operator> <name>s</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>z</name> <operator>*=</operator> <name>s</name></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>Vector3</name></type> <name>mul</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>dest</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>x</name> <operator>*</operator> <name>s</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>y</name> <operator>*</operator> <name>s</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name>z</name> <operator>*</operator> <name>s</name></expr>;</expr_stmt>
        <return>return <expr><name>dest</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>Vector3</name></type> <name>div</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>x</name> <operator>/=</operator> <name>d</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>/=</operator> <name>d</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>z</name> <operator>/=</operator> <name>d</name></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>Vector3</name></type> <name>div</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>dest</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>x</name> <operator>/</operator> <name>d</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>y</name> <operator>/</operator> <name>d</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name>z</name> <operator>/</operator> <name>d</name></expr>;</expr_stmt>
        <return>return <expr><name>dest</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>float</name></type> <name>normalizeLength</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>float</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>sqrt</name></name><argument_list>(<argument><expr><name>x</name> <operator>*</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>y</name> <operator>+</operator> <name>z</name> <operator>*</operator> <name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>in</name> <init>= <expr><literal type="number">1.0f</literal> <operator>/</operator> <name>n</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>x</name> <operator>*=</operator> <name>in</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>*=</operator> <name>in</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>z</name> <operator>*=</operator> <name>in</name></expr>;</expr_stmt>
        <return>return <expr><name>n</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>Vector3</name></type> <name>normalize</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>float</name></type> <name>in</name> <init>= <expr><literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>sqrt</name></name><argument_list>(<argument><expr><operator>(</operator><name>x</name> <operator>*</operator> <name>x</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name> <operator>*</operator> <name>y</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>z</name> <operator>*</operator> <name>z</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>x</name> <operator>*=</operator> <name>in</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>*=</operator> <name>in</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>z</name> <operator>*=</operator> <name>in</name></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>Vector3</name></type> <name>normalize</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>dest</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>float</name></type> <name>in</name> <init>= <expr><literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>sqrt</name></name><argument_list>(<argument><expr><operator>(</operator><name>x</name> <operator>*</operator> <name>x</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name> <operator>*</operator> <name>y</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>z</name> <operator>*</operator> <name>z</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>x</name> <operator>*</operator> <name>in</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>y</name> <operator>*</operator> <name>in</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name>z</name> <operator>*</operator> <name>in</name></expr>;</expr_stmt>
        <return>return <expr><name>dest</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>Vector3</name></type> <name>set</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>Vector3</name></type> <name>set</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>z</name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>float</name></type> <name>dot</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>vx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>vy</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>vz</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name>vx</name> <operator>*</operator> <name>x</name> <operator>+</operator> <name>vy</name> <operator>*</operator> <name>y</name> <operator>+</operator> <name>vz</name> <operator>*</operator> <name>z</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>float</name></type> <name>dot</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>v2</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><name><name>v1</name><operator>.</operator><name>x</name></name> <operator>*</operator> <name><name>v2</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>v1</name><operator>.</operator><name>y</name></name> <operator>*</operator> <name><name>v2</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>v1</name><operator>.</operator><name>z</name></name> <operator>*</operator> <name><name>v2</name><operator>.</operator><name>z</name></name><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Vector3</name></type> <name>cross</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>v2</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>dest</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name><name>v1</name><operator>.</operator><name>y</name></name> <operator>*</operator> <name><name>v2</name><operator>.</operator><name>z</name></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>v1</name><operator>.</operator><name>z</name></name> <operator>*</operator> <name><name>v2</name><operator>.</operator><name>y</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><name><name>v1</name><operator>.</operator><name>z</name></name> <operator>*</operator> <name><name>v2</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>v1</name><operator>.</operator><name>x</name></name> <operator>*</operator> <name><name>v2</name><operator>.</operator><name>z</name></name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>z</name></name> <operator>=</operator> <operator>(</operator><name><name>v1</name><operator>.</operator><name>x</name></name> <operator>*</operator> <name><name>v2</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>v1</name><operator>.</operator><name>y</name></name> <operator>*</operator> <name><name>v2</name><operator>.</operator><name>x</name></name><operator>)</operator></expr>;</expr_stmt>
        <return>return <expr><name>dest</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Vector3</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>v2</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>dest</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>v1</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>v2</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>v1</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>v2</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>v1</name><operator>.</operator><name>z</name></name> <operator>+</operator> <name><name>v2</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
        <return>return <expr><name>dest</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Vector3</name></type> <name>sub</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>v2</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>dest</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>v1</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>v2</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>v1</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>v2</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dest</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>v1</name><operator>.</operator><name>z</name></name> <operator>-</operator> <name><name>v2</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
        <return>return <expr><name>dest</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"(%.2f, %.2f, %.2f)"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class></unit>
