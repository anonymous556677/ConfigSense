<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/sunflow/src/org/sunflow/core/primitive/TriangleMesh.java"><package>package <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>primitive</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileWriter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>SunflowAPI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>Instance</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>IntersectionState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>ParameterList</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>PrimitiveList</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>Ray</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>ShadingState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>ParameterList</name><operator>.</operator><name>FloatParameter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>ParameterList</name><operator>.</operator><name>InterpolationType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>BoundingBox</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>MathUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Matrix4</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>OrthoNormalBasis</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Point3</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Vector3</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>system</name><operator>.</operator><name>UI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>system</name><operator>.</operator><name>UI</name><operator>.</operator><name>Module</name></name>;</import>

<class><specifier>public</specifier> class <name>TriangleMesh</name> <super_list><implements>implements <super><name>PrimitiveList</name></super></implements></super_list> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>smallTriangles</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>float</name><index>[]</index></name></type> <name>points</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>int</name><index>[]</index></name></type> <name>triangles</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>WaldTriangle</name><index>[]</index></name></type> <name>triaccel</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>FloatParameter</name></type> <name>normals</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>FloatParameter</name></type> <name>uvs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>byte</name><index>[]</index></name></type> <name>faceShaders</name></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setSmallTriangles</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>smallTriangles</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>smallTriangles</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>GEOM</name></name></expr></argument>, <argument><expr><literal type="string">"Small trimesh mode: enabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>GEOM</name></name></expr></argument>, <argument><expr><literal type="string">"Small trimesh mode: disabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt><expr><name><name>TriangleMesh</name><operator>.</operator><name>smallTriangles</name></name> <operator>=</operator> <name>smallTriangles</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <constructor><specifier>public</specifier> <name>TriangleMesh</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>triangles</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>points</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>normals</name> <operator>=</operator> <name>uvs</name> <operator>=</operator> <operator>new</operator> <call><name>FloatParameter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>faceShaders</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>writeObj</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>FileWriter</name></type> <name>file</name> <init>= <expr><operator>new</operator> <call><name>FileWriter</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>file</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"o object\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>points</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>file</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"v %g %g %g\n"</literal></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><call><name><name>file</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="string">"s off\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>triangles</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>file</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"f %d %d %d\n"</literal></expr></argument>, <argument><expr><name><name>triangles</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>triangles</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>triangles</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            <expr_stmt><expr><call><name><name>file</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>ParameterList</name></type> <name>pl</name></decl></parameter>, <parameter><decl><type><name>SunflowAPI</name></type> <name>api</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>updatedTopology</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>triangles</name> <init>= <expr><call><name><name>pl</name><operator>.</operator><name>getIntArray</name></name><argument_list>(<argument><expr><literal type="string">"triangles"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>triangles</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>triangles</name></name> <operator>=</operator> <name>triangles</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>updatedTopology</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>
        <if_stmt><if>if <condition>(<expr><name>triangles</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printError</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>GEOM</name></name></expr></argument>, <argument><expr><literal type="string">"Unable to update mesh - triangle indices are missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>triangles</name><operator>.</operator><name>length</name></name> <operator>%</operator> <literal type="number">3</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printWarning</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>GEOM</name></name></expr></argument>, <argument><expr><literal type="string">"Triangle index data is not a multiple of 3 - triangles may be missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>pl</name><operator>.</operator><name>setFaceCount</name></name><argument_list>(<argument><expr><name><name>triangles</name><operator>.</operator><name>length</name></name> <operator>/</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <block>{<block_content>
            <decl_stmt><decl><type><name>FloatParameter</name></type> <name>pointsP</name> <init>= <expr><call><name><name>pl</name><operator>.</operator><name>getPointArray</name></name><argument_list>(<argument><expr><literal type="string">"points"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>pointsP</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <if_stmt><if>if <condition>(<expr><name><name>pointsP</name><operator>.</operator><name>interp</name></name> <operator>!=</operator> <name><name>InterpolationType</name><operator>.</operator><name>VERTEX</name></name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printError</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>GEOM</name></name></expr></argument>, <argument><expr><literal type="string">"Point interpolation type must be set to \"vertex\" - was \"%s\""</literal></expr></argument>, <argument><expr><call><name><name>pointsP</name><operator>.</operator><name>interp</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else <block>{<block_content>
                    <expr_stmt><expr><name>points</name> <operator>=</operator> <name><name>pointsP</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>updatedTopology</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt></block_content></block></if></if_stmt>
        </block_content>}</block>
        <if_stmt><if>if <condition>(<expr><name>points</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printError</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>GEOM</name></name></expr></argument>, <argument><expr><literal type="string">"Unable to update mesh - vertices are missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>pl</name><operator>.</operator><name>setVertexCount</name></name><argument_list>(<argument><expr><name><name>points</name><operator>.</operator><name>length</name></name> <operator>/</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pl</name><operator>.</operator><name>setFaceVertexCount</name></name><argument_list>(<argument><expr><literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name><name>triangles</name><operator>.</operator><name>length</name></name> <operator>/</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>FloatParameter</name></type> <name>normals</name> <init>= <expr><call><name><name>pl</name><operator>.</operator><name>getVectorArray</name></name><argument_list>(<argument><expr><literal type="string">"normals"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>normals</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>normals</name></name> <operator>=</operator> <name>normals</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>FloatParameter</name></type> <name>uvs</name> <init>= <expr><call><name><name>pl</name><operator>.</operator><name>getTexCoordArray</name></name><argument_list>(<argument><expr><literal type="string">"uvs"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>uvs</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>uvs</name></name> <operator>=</operator> <name>uvs</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>faceShaders</name> <init>= <expr><call><name><name>pl</name><operator>.</operator><name>getIntArray</name></name><argument_list>(<argument><expr><literal type="string">"faceshaders"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>faceShaders</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>faceShaders</name><operator>.</operator><name>length</name></name> <operator>==</operator> <name><name>triangles</name><operator>.</operator><name>length</name></name> <operator>/</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>faceShaders</name></name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><name><name>faceShaders</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>faceShaders</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>faceShaders</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printWarning</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>GEOM</name></name></expr></argument>, <argument><expr><literal type="string">"Shader index too large on triangle %d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>faceShaders</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><name>v</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>updatedTopology</name></expr>)</condition> <block>{<block_content>
            <comment type="line">// create triangle acceleration structure</comment>
            <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>float</name></type> <name>getPrimitiveBound</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>primID</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>tri</name> <init>= <expr><literal type="number">3</literal> <operator>*</operator> <name>primID</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">3</literal> <operator>*</operator> <name><name>triangles</name><index>[<expr><name>tri</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><literal type="number">3</literal> <operator>*</operator> <name><name>triangles</name><index>[<expr><name>tri</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">3</literal> <operator>*</operator> <name><name>triangles</name><index>[<expr><name>tri</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>axis</name> <init>= <expr><name>i</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>MathUtils</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name><name>points</name><index>[<expr><name>a</name> <operator>+</operator> <name>axis</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><name>b</name> <operator>+</operator> <name>axis</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><name>c</name> <operator>+</operator> <name>axis</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <return>return <expr><call><name><name>MathUtils</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name><name>points</name><index>[<expr><name>a</name> <operator>+</operator> <name>axis</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><name>b</name> <operator>+</operator> <name>axis</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><name>c</name> <operator>+</operator> <name>axis</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>BoundingBox</name></type> <name>getWorldBounds</name><parameter_list>(<parameter><decl><type><name>Matrix4</name></type> <name>o2w</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>BoundingBox</name></type> <name>bounds</name> <init>= <expr><operator>new</operator> <call><name>BoundingBox</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>o2w</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>points</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>bounds</name><operator>.</operator><name>include</name></name><argument_list>(<argument><expr><name><name>points</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="line">// transform vertices first</comment>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>points</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><name><name>points</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>float</name></type> <name>y</name> <init>= <expr><name><name>points</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>float</name></type> <name>z</name> <init>= <expr><name><name>points</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>float</name></type> <name>wx</name> <init>= <expr><call><name><name>o2w</name><operator>.</operator><name>transformPX</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>float</name></type> <name>wy</name> <init>= <expr><call><name><name>o2w</name><operator>.</operator><name>transformPY</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>float</name></type> <name>wz</name> <init>= <expr><call><name><name>o2w</name><operator>.</operator><name>transformPZ</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>bounds</name><operator>.</operator><name>include</name></name><argument_list>(<argument><expr><name>wx</name></expr></argument>, <argument><expr><name>wy</name></expr></argument>, <argument><expr><name>wz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><name>bounds</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>intersectPrimitiveRobust</name><parameter_list>(<parameter><decl><type><name>Ray</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>primID</name></decl></parameter>, <parameter><decl><type><name>IntersectionState</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// ray-triangle intersection here</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>tri</name> <init>= <expr><literal type="number">3</literal> <operator>*</operator> <name>primID</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">3</literal> <operator>*</operator> <name><name>triangles</name><index>[<expr><name>tri</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><literal type="number">3</literal> <operator>*</operator> <name><name>triangles</name><index>[<expr><name>tri</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">3</literal> <operator>*</operator> <name><name>triangles</name><index>[<expr><name>tri</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>float</name><index>[]</index></name></type> <name>stack</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>getRobustStack</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i3</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>i3</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>stack</name><index>[<expr><name>i3</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>points</name><index>[<expr><name>a</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>stack</name><index>[<expr><name>i3</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>points</name><index>[<expr><name>b</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>stack</name><index>[<expr><name>i3</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>points</name><index>[<expr><name>c</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name><name>stack</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>Float</name><operator>.</operator><name>POSITIVE_INFINITY</name></name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>stackpos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>orgX</name> <init>= <expr><name><name>r</name><operator>.</operator><name>ox</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>dirX</name> <init>= <expr><name><name>r</name><operator>.</operator><name>dx</name></name></expr></init></decl>, <decl><type ref="prev"/><name>invDirX</name> <init>= <expr><literal type="number">1</literal> <operator>/</operator> <name>dirX</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>orgY</name> <init>= <expr><name><name>r</name><operator>.</operator><name>oy</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>dirY</name> <init>= <expr><name><name>r</name><operator>.</operator><name>dy</name></name></expr></init></decl>, <decl><type ref="prev"/><name>invDirY</name> <init>= <expr><literal type="number">1</literal> <operator>/</operator> <name>dirY</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>orgZ</name> <init>= <expr><name><name>r</name><operator>.</operator><name>oz</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>dirZ</name> <init>= <expr><name><name>r</name><operator>.</operator><name>dz</name></name></expr></init></decl>, <decl><type ref="prev"/><name>invDirZ</name> <init>= <expr><literal type="number">1</literal> <operator>/</operator> <name>dirZ</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>minx</name></decl>, <decl><type ref="prev"/><name>maxx</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>miny</name></decl>, <decl><type ref="prev"/><name>maxy</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>minz</name></decl>, <decl><type ref="prev"/><name>maxz</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>mint</name> <init>= <expr><call><name><name>r</name><operator>.</operator><name>getMin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>maxt</name> <init>= <expr><call><name><name>r</name><operator>.</operator><name>getMax</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>stackpos</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>float</name></type> <name>intervalMin</name> <init>= <expr><name>mint</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>intervalMax</name> <init>= <expr><name>maxt</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>p0x</name> <init>= <expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>p1x</name> <init>= <expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>p2x</name> <init>= <expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>t1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>minx</name> <operator>=</operator> <call><name><name>MathUtils</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>p0x</name></expr></argument>, <argument><expr><name>p1x</name></expr></argument>, <argument><expr><name>p2x</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>-</operator> <name>orgX</name><operator>)</operator> <operator>*</operator> <name>invDirX</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>maxx</name> <operator>=</operator> <call><name><name>MathUtils</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>p0x</name></expr></argument>, <argument><expr><name>p1x</name></expr></argument>, <argument><expr><name>p2x</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>-</operator> <name>orgX</name><operator>)</operator> <operator>*</operator> <name>invDirX</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>invDirX</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>t1</name> <operator>&gt;</operator> <name>intervalMin</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>intervalMin</name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>t2</name> <operator>&lt;</operator> <name>intervalMax</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>intervalMax</name> <operator>=</operator> <name>t2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>t2</name> <operator>&gt;</operator> <name>intervalMin</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>intervalMin</name> <operator>=</operator> <name>t2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>t1</name> <operator>&lt;</operator> <name>intervalMax</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>intervalMax</name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>intervalMin</name> <operator>&gt;</operator> <name>intervalMax</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>stackpos</name> <operator>-=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>p0y</name> <init>= <expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>p1y</name> <init>= <expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>p2y</name> <init>= <expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>t1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>miny</name> <operator>=</operator> <call><name><name>MathUtils</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>p0y</name></expr></argument>, <argument><expr><name>p1y</name></expr></argument>, <argument><expr><name>p2y</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>-</operator> <name>orgY</name><operator>)</operator> <operator>*</operator> <name>invDirY</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>maxy</name> <operator>=</operator> <call><name><name>MathUtils</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>p0y</name></expr></argument>, <argument><expr><name>p1y</name></expr></argument>, <argument><expr><name>p2y</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>-</operator> <name>orgY</name><operator>)</operator> <operator>*</operator> <name>invDirY</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>invDirY</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>t1</name> <operator>&gt;</operator> <name>intervalMin</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>intervalMin</name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>t2</name> <operator>&lt;</operator> <name>intervalMax</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>intervalMax</name> <operator>=</operator> <name>t2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>t2</name> <operator>&gt;</operator> <name>intervalMin</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>intervalMin</name> <operator>=</operator> <name>t2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>t1</name> <operator>&lt;</operator> <name>intervalMax</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>intervalMax</name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>intervalMin</name> <operator>&gt;</operator> <name>intervalMax</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>stackpos</name> <operator>-=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>p0z</name> <init>= <expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>p1z</name> <init>= <expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>p2z</name> <init>= <expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>t1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>minz</name> <operator>=</operator> <call><name><name>MathUtils</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>p0z</name></expr></argument>, <argument><expr><name>p1z</name></expr></argument>, <argument><expr><name>p2z</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>-</operator> <name>orgZ</name><operator>)</operator> <operator>*</operator> <name>invDirZ</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>maxz</name> <operator>=</operator> <call><name><name>MathUtils</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>p0z</name></expr></argument>, <argument><expr><name>p1z</name></expr></argument>, <argument><expr><name>p2z</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>-</operator> <name>orgZ</name><operator>)</operator> <operator>*</operator> <name>invDirZ</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>invDirZ</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>t1</name> <operator>&gt;</operator> <name>intervalMin</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>intervalMin</name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>t2</name> <operator>&lt;</operator> <name>intervalMax</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>intervalMax</name> <operator>=</operator> <name>t2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>t2</name> <operator>&gt;</operator> <name>intervalMin</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>intervalMin</name> <operator>=</operator> <name>t2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>t1</name> <operator>&lt;</operator> <name>intervalMax</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>intervalMax</name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>intervalMin</name> <operator>&gt;</operator> <name>intervalMax</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>stackpos</name> <operator>-=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <comment type="line">// intersection was found - keep going</comment>
            <decl_stmt><decl><type><name>float</name></type> <name>size</name> <init>= <expr><operator>(</operator><name>maxx</name> <operator>-</operator> <name>minx</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>maxy</name> <operator>-</operator> <name>miny</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>maxz</name> <operator>-</operator> <name>minz</name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>Float</name><operator>.</operator><name>floatToRawIntBits</name></name><argument_list>(<argument><expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>Float</name><operator>.</operator><name>floatToRawIntBits</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <comment type="line">// L1 norm is 0, we are done</comment>
                <expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>setMax</name></name><argument_list>(<argument><expr><name>intervalMin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>triaccel</name><index>[<expr><name>primID</name></expr>]</index></name><operator>.</operator><call><name>intersectBox</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>p0x</name></expr></argument>, <argument><expr><name>p0y</name></expr></argument>, <argument><expr><name>p0z</name></expr></argument>, <argument><expr><name>primID</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return> <comment type="line">// safe to return, only one intersection per primitive</comment>
            </block_content>}</block></if></if_stmt>
            <comment type="line">// not small enough yet - subdivide</comment>
            <decl_stmt><decl><type><name>float</name></type> <name>p01x</name> <init>= <expr><operator>(</operator><name>p0x</name> <operator>+</operator> <name>p1x</name><operator>)</operator> <operator>*</operator> <literal type="number">0.5f</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>p01y</name> <init>= <expr><operator>(</operator><name>p0y</name> <operator>+</operator> <name>p1y</name><operator>)</operator> <operator>*</operator> <literal type="number">0.5f</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>p01z</name> <init>= <expr><operator>(</operator><name>p0z</name> <operator>+</operator> <name>p1z</name><operator>)</operator> <operator>*</operator> <literal type="number">0.5f</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>float</name></type> <name>p12x</name> <init>= <expr><operator>(</operator><name>p1x</name> <operator>+</operator> <name>p2x</name><operator>)</operator> <operator>*</operator> <literal type="number">0.5f</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>p12y</name> <init>= <expr><operator>(</operator><name>p1y</name> <operator>+</operator> <name>p2y</name><operator>)</operator> <operator>*</operator> <literal type="number">0.5f</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>p12z</name> <init>= <expr><operator>(</operator><name>p1z</name> <operator>+</operator> <name>p2z</name><operator>)</operator> <operator>*</operator> <literal type="number">0.5f</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>float</name></type> <name>p20x</name> <init>= <expr><operator>(</operator><name>p2x</name> <operator>+</operator> <name>p0x</name><operator>)</operator> <operator>*</operator> <literal type="number">0.5f</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>p20y</name> <init>= <expr><operator>(</operator><name>p2y</name> <operator>+</operator> <name>p0y</name><operator>)</operator> <operator>*</operator> <literal type="number">0.5f</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>p20z</name> <init>= <expr><operator>(</operator><name>p2z</name> <operator>+</operator> <name>p0z</name><operator>)</operator> <operator>*</operator> <literal type="number">0.5f</literal></expr></init></decl>;</decl_stmt>

            <comment type="line">// triangle 0</comment>
            <expr_stmt><expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>p0x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>p01x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>p20x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>p0y</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>p01y</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>p20y</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>p0z</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>p01z</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>p20z</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>stackpos</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
            <comment type="line">// triangle 1</comment>
            <expr_stmt><expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>p1x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>p12x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>p01x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>p1y</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>p12y</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>p01y</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>p1z</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>p12z</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>p01z</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>stackpos</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
            <comment type="line">// triangle 2</comment>
            <expr_stmt><expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>p2x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>p20x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>p12x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>p2y</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>p20y</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>p12y</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>p2z</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>p20z</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>p12z</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>stackpos</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
            <comment type="line">// triangle 4</comment>
            <expr_stmt><expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>p20x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>p12x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>p01x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>p20y</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>p12y</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>p01y</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>p20z</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>p12z</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>p01z</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>stack</name><index>[<expr><name>stackpos</name> <operator>+</operator> <literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>final</specifier> <name>void</name></type> <name>intersectTriangleKensler</name><parameter_list>(<parameter><decl><type><name>Ray</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>primID</name></decl></parameter>, <parameter><decl><type><name>IntersectionState</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>tri</name> <init>= <expr><literal type="number">3</literal> <operator>*</operator> <name>primID</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">3</literal> <operator>*</operator> <name><name>triangles</name><index>[<expr><name>tri</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><literal type="number">3</literal> <operator>*</operator> <name><name>triangles</name><index>[<expr><name>tri</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">3</literal> <operator>*</operator> <name><name>triangles</name><index>[<expr><name>tri</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>edge0x</name> <init>= <expr><name><name>points</name><index>[<expr><name>b</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>points</name><index>[<expr><name>a</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>edge0y</name> <init>= <expr><name><name>points</name><index>[<expr><name>b</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>points</name><index>[<expr><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>edge0z</name> <init>= <expr><name><name>points</name><index>[<expr><name>b</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>points</name><index>[<expr><name>a</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>edge1x</name> <init>= <expr><name><name>points</name><index>[<expr><name>a</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>points</name><index>[<expr><name>c</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>edge1y</name> <init>= <expr><name><name>points</name><index>[<expr><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>points</name><index>[<expr><name>c</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>edge1z</name> <init>= <expr><name><name>points</name><index>[<expr><name>a</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>points</name><index>[<expr><name>c</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>nx</name> <init>= <expr><name>edge0y</name> <operator>*</operator> <name>edge1z</name> <operator>-</operator> <name>edge0z</name> <operator>*</operator> <name>edge1y</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>ny</name> <init>= <expr><name>edge0z</name> <operator>*</operator> <name>edge1x</name> <operator>-</operator> <name>edge0x</name> <operator>*</operator> <name>edge1z</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>nz</name> <init>= <expr><name>edge0x</name> <operator>*</operator> <name>edge1y</name> <operator>-</operator> <name>edge0y</name> <operator>*</operator> <name>edge1x</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>v</name> <init>= <expr><call><name><name>r</name><operator>.</operator><name>dot</name></name><argument_list>(<argument><expr><name>nx</name></expr></argument>, <argument><expr><name>ny</name></expr></argument>, <argument><expr><name>nz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>iv</name> <init>= <expr><literal type="number">1</literal> <operator>/</operator> <name>v</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>edge2x</name> <init>= <expr><name><name>points</name><index>[<expr><name>a</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>r</name><operator>.</operator><name>ox</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>edge2y</name> <init>= <expr><name><name>points</name><index>[<expr><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>r</name><operator>.</operator><name>oy</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>edge2z</name> <init>= <expr><name><name>points</name><index>[<expr><name>a</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>r</name><operator>.</operator><name>oz</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>va</name> <init>= <expr><name>nx</name> <operator>*</operator> <name>edge2x</name> <operator>+</operator> <name>ny</name> <operator>*</operator> <name>edge2y</name> <operator>+</operator> <name>nz</name> <operator>*</operator> <name>edge2z</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>t</name> <init>= <expr><name>iv</name> <operator>*</operator> <name>va</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>r</name><operator>.</operator><name>isInside</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>ix</name> <init>= <expr><name>edge2y</name> <operator>*</operator> <name><name>r</name><operator>.</operator><name>dz</name></name> <operator>-</operator> <name>edge2z</name> <operator>*</operator> <name><name>r</name><operator>.</operator><name>dy</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>iy</name> <init>= <expr><name>edge2z</name> <operator>*</operator> <name><name>r</name><operator>.</operator><name>dx</name></name> <operator>-</operator> <name>edge2x</name> <operator>*</operator> <name><name>r</name><operator>.</operator><name>dz</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>iz</name> <init>= <expr><name>edge2x</name> <operator>*</operator> <name><name>r</name><operator>.</operator><name>dy</name></name> <operator>-</operator> <name>edge2y</name> <operator>*</operator> <name><name>r</name><operator>.</operator><name>dx</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>v1</name> <init>= <expr><name>ix</name> <operator>*</operator> <name>edge1x</name> <operator>+</operator> <name>iy</name> <operator>*</operator> <name>edge1y</name> <operator>+</operator> <name>iz</name> <operator>*</operator> <name>edge1z</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>beta</name> <init>= <expr><name>iv</name> <operator>*</operator> <name>v1</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>beta</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>v2</name> <init>= <expr><name>ix</name> <operator>*</operator> <name>edge0x</name> <operator>+</operator> <name>iy</name> <operator>*</operator> <name>edge0y</name> <operator>+</operator> <name>iz</name> <operator>*</operator> <name>edge0z</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>v1</name> <operator>+</operator> <name>v2</name><operator>)</operator> <operator>*</operator> <name>v</name> <operator>&gt;</operator> <name>v</name> <operator>*</operator> <name>v</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>gamma</name> <init>= <expr><name>iv</name> <operator>*</operator> <name>v2</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>gamma</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>setMax</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>setIntersection</name></name><argument_list>(<argument><expr><name>primID</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>gamma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>intersectPrimitive</name><parameter_list>(<parameter><decl><type><name>Ray</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>primID</name></decl></parameter>, <parameter><decl><type><name>IntersectionState</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// alternative test -- disabled for now</comment>
        <comment type="line">// intersectPrimitiveRobust(r, primID, state);</comment>

        <if_stmt><if>if <condition>(<expr><name>triaccel</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// optional fast intersection method</comment>
            <expr_stmt><expr><name><name>triaccel</name><index>[<expr><name>primID</name></expr>]</index></name><operator>.</operator><call><name>intersect</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>primID</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>intersectTriangleKensler</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>primID</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getNumPrimitives</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>triangles</name><operator>.</operator><name>length</name></name> <operator>/</operator> <literal type="number">3</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>prepareShadingState</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Instance</name></type> <name>parent</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>primID</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>getPrimitiveID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>u</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>getU</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>v</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>getV</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>w</name> <init>= <expr><literal type="number">1</literal> <operator>-</operator> <name>u</name> <operator>-</operator> <name>v</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getRay</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPoint</name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>tri</name> <init>= <expr><literal type="number">3</literal> <operator>*</operator> <name>primID</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>index0</name> <init>= <expr><name><name>triangles</name><index>[<expr><name>tri</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>index1</name> <init>= <expr><name><name>triangles</name><index>[<expr><name>tri</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>index2</name> <init>= <expr><name><name>triangles</name><index>[<expr><name>tri</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Point3</name></type> <name>v0p</name> <init>= <expr><call><name>getPoint</name><argument_list>(<argument><expr><name>index0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Point3</name></type> <name>v1p</name> <init>= <expr><call><name>getPoint</name><argument_list>(<argument><expr><name>index1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Point3</name></type> <name>v2p</name> <init>= <expr><call><name>getPoint</name><argument_list>(<argument><expr><name>index2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Vector3</name></type> <name>ng</name> <init>= <expr><call><name><name>Point3</name><operator>.</operator><name>normal</name></name><argument_list>(<argument><expr><name>v0p</name></expr></argument>, <argument><expr><name>v1p</name></expr></argument>, <argument><expr><name>v2p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>ng</name> <operator>=</operator> <call><name><name>parent</name><operator>.</operator><name>transformNormalObjectToWorld</name></name><argument_list>(<argument><expr><name>ng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ng</name><operator>.</operator><name>normalize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getGeoNormal</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>set</name><argument_list>(<argument><expr><name>ng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <switch>switch <condition>(<expr><name><name>normals</name><operator>.</operator><name>interp</name></name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>NONE</name></expr>:</case>
            <case>case <expr><name>FACE</name></expr>:</case> <block>{<block_content>
                <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>set</name><argument_list>(<argument><expr><name>ng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block>
            <case>case <expr><name>VERTEX</name></expr>:</case> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>i30</name> <init>= <expr><literal type="number">3</literal> <operator>*</operator> <name>index0</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>i31</name> <init>= <expr><literal type="number">3</literal> <operator>*</operator> <name>index1</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>i32</name> <init>= <expr><literal type="number">3</literal> <operator>*</operator> <name>index2</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>normals</name> <init>= <expr><name><name>this</name><operator>.</operator><name>normals</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>=</operator> <name>w</name> <operator>*</operator> <name><name>normals</name><index>[<expr><name>i30</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>u</name> <operator>*</operator> <name><name>normals</name><index>[<expr><name>i31</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>v</name> <operator>*</operator> <name><name>normals</name><index>[<expr><name>i32</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>=</operator> <name>w</name> <operator>*</operator> <name><name>normals</name><index>[<expr><name>i30</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>u</name> <operator>*</operator> <name><name>normals</name><index>[<expr><name>i31</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>v</name> <operator>*</operator> <name><name>normals</name><index>[<expr><name>i32</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call><operator>.</operator><name>z</name> <operator>=</operator> <name>w</name> <operator>*</operator> <name><name>normals</name><index>[<expr><name>i30</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>u</name> <operator>*</operator> <name><name>normals</name><index>[<expr><name>i31</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>v</name> <operator>*</operator> <name><name>normals</name><index>[<expr><name>i32</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>set</name><argument_list>(<argument><expr><call><name><name>parent</name><operator>.</operator><name>transformNormalObjectToWorld</name></name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>normalize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block>
            <case>case <expr><name>FACEVARYING</name></expr>:</case> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">3</literal> <operator>*</operator> <name>tri</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>normals</name> <init>= <expr><name><name>this</name><operator>.</operator><name>normals</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>=</operator> <name>w</name> <operator>*</operator> <name><name>normals</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>u</name> <operator>*</operator> <name><name>normals</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>v</name> <operator>*</operator> <name><name>normals</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>=</operator> <name>w</name> <operator>*</operator> <name><name>normals</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>u</name> <operator>*</operator> <name><name>normals</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name>v</name> <operator>*</operator> <name><name>normals</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call><operator>.</operator><name>z</name> <operator>=</operator> <name>w</name> <operator>*</operator> <name><name>normals</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>u</name> <operator>*</operator> <name><name>normals</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name>v</name> <operator>*</operator> <name><name>normals</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>set</name><argument_list>(<argument><expr><call><name><name>parent</name><operator>.</operator><name>transformNormalObjectToWorld</name></name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>normalize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block>
        </block_content>}</block></switch>
        <decl_stmt><decl><type><name>float</name></type> <name>uv00</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>uv01</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>uv10</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>uv11</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>uv20</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>uv21</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name><name>uvs</name><operator>.</operator><name>interp</name></name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>NONE</name></expr>:</case>
            <case>case <expr><name>FACE</name></expr>:</case> <block>{<block_content>
                <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getUV</name></name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getUV</name></name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block>
            <case>case <expr><name>VERTEX</name></expr>:</case> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>i20</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>index0</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>i21</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>index1</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>i22</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>index2</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>uvs</name> <init>= <expr><name><name>this</name><operator>.</operator><name>uvs</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>uv00</name> <operator>=</operator> <name><name>uvs</name><index>[<expr><name>i20</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>uv01</name> <operator>=</operator> <name><name>uvs</name><index>[<expr><name>i20</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>uv10</name> <operator>=</operator> <name><name>uvs</name><index>[<expr><name>i21</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>uv11</name> <operator>=</operator> <name><name>uvs</name><index>[<expr><name>i21</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>uv20</name> <operator>=</operator> <name><name>uvs</name><index>[<expr><name>i22</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>uv21</name> <operator>=</operator> <name><name>uvs</name><index>[<expr><name>i22</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block>
            <case>case <expr><name>FACEVARYING</name></expr>:</case> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name>tri</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>uvs</name> <init>= <expr><name><name>this</name><operator>.</operator><name>uvs</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>uv00</name> <operator>=</operator> <name><name>uvs</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>uv01</name> <operator>=</operator> <name><name>uvs</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>uv10</name> <operator>=</operator> <name><name>uvs</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>uv11</name> <operator>=</operator> <name><name>uvs</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>uv20</name> <operator>=</operator> <name><name>uvs</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>uv21</name> <operator>=</operator> <name><name>uvs</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block>
        </block_content>}</block></switch>
        <if_stmt><if>if <condition>(<expr><name><name>uvs</name><operator>.</operator><name>interp</name></name> <operator>!=</operator> <name><name>InterpolationType</name><operator>.</operator><name>NONE</name></name></expr>)</condition> <block>{<block_content>
            <comment type="line">// get exact uv coords and compute tangent vectors</comment>
            <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getUV</name></name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>=</operator> <name>w</name> <operator>*</operator> <name>uv00</name> <operator>+</operator> <name>u</name> <operator>*</operator> <name>uv10</name> <operator>+</operator> <name>v</name> <operator>*</operator> <name>uv20</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getUV</name></name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>=</operator> <name>w</name> <operator>*</operator> <name>uv01</name> <operator>+</operator> <name>u</name> <operator>*</operator> <name>uv11</name> <operator>+</operator> <name>v</name> <operator>*</operator> <name>uv21</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>du1</name> <init>= <expr><name>uv00</name> <operator>-</operator> <name>uv20</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>du2</name> <init>= <expr><name>uv10</name> <operator>-</operator> <name>uv20</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>dv1</name> <init>= <expr><name>uv01</name> <operator>-</operator> <name>uv21</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>dv2</name> <init>= <expr><name>uv11</name> <operator>-</operator> <name>uv21</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Vector3</name></type> <name>dp1</name> <init>= <expr><call><name><name>Point3</name><operator>.</operator><name>sub</name></name><argument_list>(<argument><expr><name>v0p</name></expr></argument>, <argument><expr><name>v2p</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Vector3</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>dp2</name> <init>= <expr><call><name><name>Point3</name><operator>.</operator><name>sub</name></name><argument_list>(<argument><expr><name>v1p</name></expr></argument>, <argument><expr><name>v2p</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Vector3</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>determinant</name> <init>= <expr><name>du1</name> <operator>*</operator> <name>dv2</name> <operator>-</operator> <name>dv1</name> <operator>*</operator> <name>du2</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>determinant</name> <operator>==</operator> <literal type="number">0.0f</literal></expr>)</condition> <block>{<block_content>
                <comment type="line">// create basis in world space</comment>
                <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>setBasis</name></name><argument_list>(<argument><expr><call><name><name>OrthoNormalBasis</name><operator>.</operator><name>makeFromW</name></name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name>float</name></type> <name>invdet</name> <init>= <expr><literal type="number">1.f</literal> <operator>/</operator> <name>determinant</name></expr></init></decl>;</decl_stmt>
                <comment type="line">// Vector3 dpdu = new Vector3();</comment>
                <comment type="line">// dpdu.x = (dv2 * dp1.x - dv1 * dp2.x) * invdet;</comment>
                <comment type="line">// dpdu.y = (dv2 * dp1.y - dv1 * dp2.y) * invdet;</comment>
                <comment type="line">// dpdu.z = (dv2 * dp1.z - dv1 * dp2.z) * invdet;</comment>
                <decl_stmt><decl><type><name>Vector3</name></type> <name>dpdv</name> <init>= <expr><operator>new</operator> <call><name>Vector3</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>dpdv</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><operator>-</operator><name>du2</name> <operator>*</operator> <name><name>dp1</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>du1</name> <operator>*</operator> <name><name>dp2</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>*</operator> <name>invdet</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>dpdv</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><operator>-</operator><name>du2</name> <operator>*</operator> <name><name>dp1</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>du1</name> <operator>*</operator> <name><name>dp2</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>*</operator> <name>invdet</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>dpdv</name><operator>.</operator><name>z</name></name> <operator>=</operator> <operator>(</operator><operator>-</operator><name>du2</name> <operator>*</operator> <name><name>dp1</name><operator>.</operator><name>z</name></name> <operator>+</operator> <name>du1</name> <operator>*</operator> <name><name>dp2</name><operator>.</operator><name>z</name></name><operator>)</operator> <operator>*</operator> <name>invdet</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>dpdv</name> <operator>=</operator> <call><name><name>parent</name><operator>.</operator><name>transformVectorObjectToWorld</name></name><argument_list>(<argument><expr><name>dpdv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// create basis in world space</comment>
                <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>setBasis</name></name><argument_list>(<argument><expr><call><name><name>OrthoNormalBasis</name><operator>.</operator><name>makeFromWV</name></name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dpdv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>setBasis</name></name><argument_list>(<argument><expr><call><name><name>OrthoNormalBasis</name><operator>.</operator><name>makeFromW</name></name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>shaderIndex</name> <init>= <expr><ternary><condition><expr><name>faceShaders</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name><name>faceShaders</name><index>[<expr><name>primID</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>setShader</name></name><argument_list>(<argument><expr><call><name><name>parent</name><operator>.</operator><name>getShader</name></name><argument_list>(<argument><expr><name>shaderIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>setModifier</name></name><argument_list>(<argument><expr><call><name><name>parent</name><operator>.</operator><name>getModifier</name></name><argument_list>(<argument><expr><name>shaderIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>triaccel</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nt</name> <init>= <expr><call><name>getNumPrimitives</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>smallTriangles</name></expr>)</condition> <block>{<block_content>
            <comment type="line">// too many triangles? -- don't generate triaccel to save memory</comment>
            <if_stmt><if>if <condition>(<expr><name>nt</name> <operator>&gt;</operator> <literal type="number">2000000</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printWarning</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>GEOM</name></name></expr></argument>, <argument><expr><literal type="string">"TRI - Too many triangles -- triaccel generation skipped"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>triaccel</name> <operator>=</operator> <operator>new</operator> <name><name>WaldTriangle</name><index>[<expr><name>nt</name></expr>]</index></name></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>triaccel</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>WaldTriangle</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>Point3</name></type> <name>getPoint</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>i</name> <operator>*=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        <return>return <expr><operator>new</operator> <call><name>Point3</name><argument_list>(<argument><expr><name><name>points</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>getPoint</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>tri</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>Point3</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">3</literal> <operator>*</operator> <name><name>triangles</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>tri</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>points</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>points</name><index>[<expr><name>index</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <class><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>WaldTriangle</name> <block>{
        <comment type="line">// private data for fast triangle intersection testing</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>k</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>nu</name></decl>, <decl><type ref="prev"/><name>nv</name></decl>, <decl><type ref="prev"/><name>nd</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>bnu</name></decl>, <decl><type ref="prev"/><name>bnv</name></decl>, <decl><type ref="prev"/><name>bnd</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>cnu</name></decl>, <decl><type ref="prev"/><name>cnv</name></decl>, <decl><type ref="prev"/><name>cnd</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>WaldTriangle</name><parameter_list>(<parameter><decl><type><name>TriangleMesh</name></type> <name>mesh</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tri</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>tri</name> <operator>*=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>index0</name> <init>= <expr><name><name>mesh</name><operator>.</operator><name>triangles</name><index>[<expr><name>tri</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>index1</name> <init>= <expr><name><name>mesh</name><operator>.</operator><name>triangles</name><index>[<expr><name>tri</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>index2</name> <init>= <expr><name><name>mesh</name><operator>.</operator><name>triangles</name><index>[<expr><name>tri</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Point3</name></type> <name>v0p</name> <init>= <expr><call><name><name>mesh</name><operator>.</operator><name>getPoint</name></name><argument_list>(<argument><expr><name>index0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Point3</name></type> <name>v1p</name> <init>= <expr><call><name><name>mesh</name><operator>.</operator><name>getPoint</name></name><argument_list>(<argument><expr><name>index1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Point3</name></type> <name>v2p</name> <init>= <expr><call><name><name>mesh</name><operator>.</operator><name>getPoint</name></name><argument_list>(<argument><expr><name>index2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Vector3</name></type> <name>ng</name> <init>= <expr><call><name><name>Point3</name><operator>.</operator><name>normal</name></name><argument_list>(<argument><expr><name>v0p</name></expr></argument>, <argument><expr><name>v1p</name></expr></argument>, <argument><expr><name>v2p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name><name>ng</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name><name>ng</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name><name>ng</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name><name>ng</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name><name>ng</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name><name>ng</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>ax</name></decl>, <decl><type ref="prev"/><name>ay</name></decl>, <decl><type ref="prev"/><name>bx</name></decl>, <decl><type ref="prev"/><name>by</name></decl>, <decl><type ref="prev"/><name>cx</name></decl>, <decl><type ref="prev"/><name>cy</name></decl>;</decl_stmt>
            <switch>switch <condition>(<expr><name>k</name></expr>)</condition> <block>{<block_content>
                <case>case <expr><literal type="number">0</literal></expr>:</case> <block>{<block_content>
                    <expr_stmt><expr><name>nu</name> <operator>=</operator> <name><name>ng</name><operator>.</operator><name>y</name></name> <operator>/</operator> <name><name>ng</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>nv</name> <operator>=</operator> <name><name>ng</name><operator>.</operator><name>z</name></name> <operator>/</operator> <name><name>ng</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>nd</name> <operator>=</operator> <name><name>v0p</name><operator>.</operator><name>x</name></name> <operator>+</operator> <operator>(</operator><name>nu</name> <operator>*</operator> <name><name>v0p</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>nv</name> <operator>*</operator> <name><name>v0p</name><operator>.</operator><name>z</name></name><operator>)</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ax</name> <operator>=</operator> <name><name>v0p</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ay</name> <operator>=</operator> <name><name>v0p</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>bx</name> <operator>=</operator> <name><name>v2p</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name>ax</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>by</name> <operator>=</operator> <name><name>v2p</name><operator>.</operator><name>z</name></name> <operator>-</operator> <name>ay</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>cx</name> <operator>=</operator> <name><name>v1p</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name>ax</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>cy</name> <operator>=</operator> <name><name>v1p</name><operator>.</operator><name>z</name></name> <operator>-</operator> <name>ay</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block>
                <case>case <expr><literal type="number">1</literal></expr>:</case> <block>{<block_content>
                    <expr_stmt><expr><name>nu</name> <operator>=</operator> <name><name>ng</name><operator>.</operator><name>z</name></name> <operator>/</operator> <name><name>ng</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>nv</name> <operator>=</operator> <name><name>ng</name><operator>.</operator><name>x</name></name> <operator>/</operator> <name><name>ng</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>nd</name> <operator>=</operator> <operator>(</operator><name>nv</name> <operator>*</operator> <name><name>v0p</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>+</operator> <name><name>v0p</name><operator>.</operator><name>y</name></name> <operator>+</operator> <operator>(</operator><name>nu</name> <operator>*</operator> <name><name>v0p</name><operator>.</operator><name>z</name></name><operator>)</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ax</name> <operator>=</operator> <name><name>v0p</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ay</name> <operator>=</operator> <name><name>v0p</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>bx</name> <operator>=</operator> <name><name>v2p</name><operator>.</operator><name>z</name></name> <operator>-</operator> <name>ax</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>by</name> <operator>=</operator> <name><name>v2p</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name>ay</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>cx</name> <operator>=</operator> <name><name>v1p</name><operator>.</operator><name>z</name></name> <operator>-</operator> <name>ax</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>cy</name> <operator>=</operator> <name><name>v1p</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name>ay</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block>
                <case>case <expr><literal type="number">2</literal></expr>:</case>
                <default>default:</default> <block>{<block_content>
                    <expr_stmt><expr><name>nu</name> <operator>=</operator> <name><name>ng</name><operator>.</operator><name>x</name></name> <operator>/</operator> <name><name>ng</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>nv</name> <operator>=</operator> <name><name>ng</name><operator>.</operator><name>y</name></name> <operator>/</operator> <name><name>ng</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>nd</name> <operator>=</operator> <operator>(</operator><name>nu</name> <operator>*</operator> <name><name>v0p</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>nv</name> <operator>*</operator> <name><name>v0p</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>+</operator> <name><name>v0p</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ax</name> <operator>=</operator> <name><name>v0p</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ay</name> <operator>=</operator> <name><name>v0p</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>bx</name> <operator>=</operator> <name><name>v2p</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name>ax</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>by</name> <operator>=</operator> <name><name>v2p</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name>ay</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>cx</name> <operator>=</operator> <name><name>v1p</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name>ax</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>cy</name> <operator>=</operator> <name><name>v1p</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name>ay</name></expr>;</expr_stmt>
                </block_content>}</block>
            </block_content>}</block></switch>
            <decl_stmt><decl><type><name>float</name></type> <name>det</name> <init>= <expr><name>bx</name> <operator>*</operator> <name>cy</name> <operator>-</operator> <name>by</name> <operator>*</operator> <name>cx</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>bnu</name> <operator>=</operator> <operator>-</operator><name>by</name> <operator>/</operator> <name>det</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>bnv</name> <operator>=</operator> <name>bx</name> <operator>/</operator> <name>det</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>bnd</name> <operator>=</operator> <operator>(</operator><name>by</name> <operator>*</operator> <name>ax</name> <operator>-</operator> <name>bx</name> <operator>*</operator> <name>ay</name><operator>)</operator> <operator>/</operator> <name>det</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>cnu</name> <operator>=</operator> <name>cy</name> <operator>/</operator> <name>det</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>cnv</name> <operator>=</operator> <operator>-</operator><name>cx</name> <operator>/</operator> <name>det</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>cnd</name> <operator>=</operator> <operator>(</operator><name>cx</name> <operator>*</operator> <name>ay</name> <operator>-</operator> <name>cy</name> <operator>*</operator> <name>ax</name><operator>)</operator> <operator>/</operator> <name>det</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><name>void</name></type> <name>intersectBox</name><parameter_list>(<parameter><decl><type><name>Ray</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>hx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>hy</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>hz</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>primID</name></decl></parameter>, <parameter><decl><type><name>IntersectionState</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <switch>switch <condition>(<expr><name>k</name></expr>)</condition> <block>{<block_content>
                <case>case <expr><literal type="number">0</literal></expr>:</case> <block>{<block_content>
                    <decl_stmt><decl><type><name>float</name></type> <name>hu</name> <init>= <expr><name>hy</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>float</name></type> <name>hv</name> <init>= <expr><name>hz</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>float</name></type> <name>u</name> <init>= <expr><name>hu</name> <operator>*</operator> <name>bnu</name> <operator>+</operator> <name>hv</name> <operator>*</operator> <name>bnv</name> <operator>+</operator> <name>bnd</name></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>u</name> <operator>&lt;</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <decl_stmt><decl><type><name>float</name></type> <name>v</name> <init>= <expr><name>hu</name> <operator>*</operator> <name>cnu</name> <operator>+</operator> <name>hv</name> <operator>*</operator> <name>cnv</name> <operator>+</operator> <name>cnd</name></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>setIntersection</name></name><argument_list>(<argument><expr><name>primID</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return;</return>
                </block_content>}</block>
                <case>case <expr><literal type="number">1</literal></expr>:</case> <block>{<block_content>
                    <decl_stmt><decl><type><name>float</name></type> <name>hu</name> <init>= <expr><name>hz</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>float</name></type> <name>hv</name> <init>= <expr><name>hx</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>float</name></type> <name>u</name> <init>= <expr><name>hu</name> <operator>*</operator> <name>bnu</name> <operator>+</operator> <name>hv</name> <operator>*</operator> <name>bnv</name> <operator>+</operator> <name>bnd</name></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>u</name> <operator>&lt;</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <decl_stmt><decl><type><name>float</name></type> <name>v</name> <init>= <expr><name>hu</name> <operator>*</operator> <name>cnu</name> <operator>+</operator> <name>hv</name> <operator>*</operator> <name>cnv</name> <operator>+</operator> <name>cnd</name></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>setIntersection</name></name><argument_list>(<argument><expr><name>primID</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return;</return>
                </block_content>}</block>
                <case>case <expr><literal type="number">2</literal></expr>:</case> <block>{<block_content>
                    <decl_stmt><decl><type><name>float</name></type> <name>hu</name> <init>= <expr><name>hx</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>float</name></type> <name>hv</name> <init>= <expr><name>hy</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>float</name></type> <name>u</name> <init>= <expr><name>hu</name> <operator>*</operator> <name>bnu</name> <operator>+</operator> <name>hv</name> <operator>*</operator> <name>bnv</name> <operator>+</operator> <name>bnd</name></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>u</name> <operator>&lt;</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <decl_stmt><decl><type><name>float</name></type> <name>v</name> <init>= <expr><name>hu</name> <operator>*</operator> <name>cnu</name> <operator>+</operator> <name>hv</name> <operator>*</operator> <name>cnv</name> <operator>+</operator> <name>cnd</name></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>setIntersection</name></name><argument_list>(<argument><expr><name>primID</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return;</return>
                </block_content>}</block>
            </block_content>}</block></switch>
        </block_content>}</block></function>

        <function><type><name>void</name></type> <name>intersect</name><parameter_list>(<parameter><decl><type><name>Ray</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>primID</name></decl></parameter>, <parameter><decl><type><name>IntersectionState</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <switch>switch <condition>(<expr><name>k</name></expr>)</condition> <block>{<block_content>
                <case>case <expr><literal type="number">0</literal></expr>:</case> <block>{<block_content>
                    <decl_stmt><decl><type><name>float</name></type> <name>det</name> <init>= <expr><literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><name><name>r</name><operator>.</operator><name>dx</name></name> <operator>+</operator> <name>nu</name> <operator>*</operator> <name><name>r</name><operator>.</operator><name>dy</name></name> <operator>+</operator> <name>nv</name> <operator>*</operator> <name><name>r</name><operator>.</operator><name>dz</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>float</name></type> <name>t</name> <init>= <expr><operator>(</operator><name>nd</name> <operator>-</operator> <name><name>r</name><operator>.</operator><name>ox</name></name> <operator>-</operator> <name>nu</name> <operator>*</operator> <name><name>r</name><operator>.</operator><name>oy</name></name> <operator>-</operator> <name>nv</name> <operator>*</operator> <name><name>r</name><operator>.</operator><name>oz</name></name><operator>)</operator> <operator>*</operator> <name>det</name></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>r</name><operator>.</operator><name>isInside</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <return>return;</return></block_content></block></if></if_stmt>
                    <decl_stmt><decl><type><name>float</name></type> <name>hu</name> <init>= <expr><name><name>r</name><operator>.</operator><name>oy</name></name> <operator>+</operator> <name>t</name> <operator>*</operator> <name><name>r</name><operator>.</operator><name>dy</name></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>float</name></type> <name>hv</name> <init>= <expr><name><name>r</name><operator>.</operator><name>oz</name></name> <operator>+</operator> <name>t</name> <operator>*</operator> <name><name>r</name><operator>.</operator><name>dz</name></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>float</name></type> <name>u</name> <init>= <expr><name>hu</name> <operator>*</operator> <name>bnu</name> <operator>+</operator> <name>hv</name> <operator>*</operator> <name>bnv</name> <operator>+</operator> <name>bnd</name></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>u</name> <operator>&lt;</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content>
                        <return>return;</return></block_content></block></if></if_stmt>
                    <decl_stmt><decl><type><name>float</name></type> <name>v</name> <init>= <expr><name>hu</name> <operator>*</operator> <name>cnu</name> <operator>+</operator> <name>hv</name> <operator>*</operator> <name>cnv</name> <operator>+</operator> <name>cnd</name></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content>
                        <return>return;</return></block_content></block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>u</name> <operator>+</operator> <name>v</name> <operator>&gt;</operator> <literal type="number">1.0f</literal></expr>)</condition><block type="pseudo"><block_content>
                        <return>return;</return></block_content></block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>setMax</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>setIntersection</name></name><argument_list>(<argument><expr><name>primID</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return;</return>
                </block_content>}</block>
                <case>case <expr><literal type="number">1</literal></expr>:</case> <block>{<block_content>
                    <decl_stmt><decl><type><name>float</name></type> <name>det</name> <init>= <expr><literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><name><name>r</name><operator>.</operator><name>dy</name></name> <operator>+</operator> <name>nu</name> <operator>*</operator> <name><name>r</name><operator>.</operator><name>dz</name></name> <operator>+</operator> <name>nv</name> <operator>*</operator> <name><name>r</name><operator>.</operator><name>dx</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>float</name></type> <name>t</name> <init>= <expr><operator>(</operator><name>nd</name> <operator>-</operator> <name><name>r</name><operator>.</operator><name>oy</name></name> <operator>-</operator> <name>nu</name> <operator>*</operator> <name><name>r</name><operator>.</operator><name>oz</name></name> <operator>-</operator> <name>nv</name> <operator>*</operator> <name><name>r</name><operator>.</operator><name>ox</name></name><operator>)</operator> <operator>*</operator> <name>det</name></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>r</name><operator>.</operator><name>isInside</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <return>return;</return></block_content></block></if></if_stmt>
                    <decl_stmt><decl><type><name>float</name></type> <name>hu</name> <init>= <expr><name><name>r</name><operator>.</operator><name>oz</name></name> <operator>+</operator> <name>t</name> <operator>*</operator> <name><name>r</name><operator>.</operator><name>dz</name></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>float</name></type> <name>hv</name> <init>= <expr><name><name>r</name><operator>.</operator><name>ox</name></name> <operator>+</operator> <name>t</name> <operator>*</operator> <name><name>r</name><operator>.</operator><name>dx</name></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>float</name></type> <name>u</name> <init>= <expr><name>hu</name> <operator>*</operator> <name>bnu</name> <operator>+</operator> <name>hv</name> <operator>*</operator> <name>bnv</name> <operator>+</operator> <name>bnd</name></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>u</name> <operator>&lt;</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content>
                        <return>return;</return></block_content></block></if></if_stmt>
                    <decl_stmt><decl><type><name>float</name></type> <name>v</name> <init>= <expr><name>hu</name> <operator>*</operator> <name>cnu</name> <operator>+</operator> <name>hv</name> <operator>*</operator> <name>cnv</name> <operator>+</operator> <name>cnd</name></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content>
                        <return>return;</return></block_content></block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>u</name> <operator>+</operator> <name>v</name> <operator>&gt;</operator> <literal type="number">1.0f</literal></expr>)</condition><block type="pseudo"><block_content>
                        <return>return;</return></block_content></block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>setMax</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>setIntersection</name></name><argument_list>(<argument><expr><name>primID</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return;</return>
                </block_content>}</block>
                <case>case <expr><literal type="number">2</literal></expr>:</case> <block>{<block_content>
                    <decl_stmt><decl><type><name>float</name></type> <name>det</name> <init>= <expr><literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><name><name>r</name><operator>.</operator><name>dz</name></name> <operator>+</operator> <name>nu</name> <operator>*</operator> <name><name>r</name><operator>.</operator><name>dx</name></name> <operator>+</operator> <name>nv</name> <operator>*</operator> <name><name>r</name><operator>.</operator><name>dy</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>float</name></type> <name>t</name> <init>= <expr><operator>(</operator><name>nd</name> <operator>-</operator> <name><name>r</name><operator>.</operator><name>oz</name></name> <operator>-</operator> <name>nu</name> <operator>*</operator> <name><name>r</name><operator>.</operator><name>ox</name></name> <operator>-</operator> <name>nv</name> <operator>*</operator> <name><name>r</name><operator>.</operator><name>oy</name></name><operator>)</operator> <operator>*</operator> <name>det</name></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>r</name><operator>.</operator><name>isInside</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <return>return;</return></block_content></block></if></if_stmt>
                    <decl_stmt><decl><type><name>float</name></type> <name>hu</name> <init>= <expr><name><name>r</name><operator>.</operator><name>ox</name></name> <operator>+</operator> <name>t</name> <operator>*</operator> <name><name>r</name><operator>.</operator><name>dx</name></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>float</name></type> <name>hv</name> <init>= <expr><name><name>r</name><operator>.</operator><name>oy</name></name> <operator>+</operator> <name>t</name> <operator>*</operator> <name><name>r</name><operator>.</operator><name>dy</name></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>float</name></type> <name>u</name> <init>= <expr><name>hu</name> <operator>*</operator> <name>bnu</name> <operator>+</operator> <name>hv</name> <operator>*</operator> <name>bnv</name> <operator>+</operator> <name>bnd</name></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>u</name> <operator>&lt;</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content>
                        <return>return;</return></block_content></block></if></if_stmt>
                    <decl_stmt><decl><type><name>float</name></type> <name>v</name> <init>= <expr><name>hu</name> <operator>*</operator> <name>cnu</name> <operator>+</operator> <name>hv</name> <operator>*</operator> <name>cnv</name> <operator>+</operator> <name>cnd</name></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content>
                        <return>return;</return></block_content></block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>u</name> <operator>+</operator> <name>v</name> <operator>&gt;</operator> <literal type="number">1.0f</literal></expr>)</condition><block type="pseudo"><block_content>
                        <return>return;</return></block_content></block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>setMax</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>setIntersection</name></name><argument_list>(<argument><expr><name>primID</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return;</return>
                </block_content>}</block>
            </block_content>}</block></switch>
        </block_content>}</block></function>
    }</block></class>

    <function><type><specifier>public</specifier> <name>PrimitiveList</name></type> <name>getBakingPrimitives</name><parameter_list>()</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name><name>uvs</name><operator>.</operator><name>interp</name></name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>NONE</name></expr>:</case>
            <case>case <expr><name>FACE</name></expr>:</case>
                <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printError</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>GEOM</name></name></expr></argument>, <argument><expr><literal type="string">"Cannot generate baking surface without texture coordinate data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            <default>default:</default>
                <return>return <expr><operator>new</operator> <call><name>BakingSurface</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <class><specifier>private</specifier> class <name>BakingSurface</name> <super_list><implements>implements <super><name>PrimitiveList</name></super></implements></super_list> <block>{
        <function><type><specifier>public</specifier> <name>PrimitiveList</name></type> <name>getBakingPrimitives</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>getNumPrimitives</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><call><name><name>TriangleMesh</name><operator>.</operator><name>this</name><operator>.</operator><name>getNumPrimitives</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>float</name></type> <name>getPrimitiveBound</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>primID</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
            <switch>switch <condition>(<expr><name><name>uvs</name><operator>.</operator><name>interp</name></name></expr>)</condition> <block>{<block_content>
                <case>case <expr><name>NONE</name></expr>:</case>
                <case>case <expr><name>FACE</name></expr>:</case>
                <default>default:</default> <block>{<block_content>
                    <return>return <expr><literal type="number">0</literal></expr>;</return>
                </block_content>}</block>
                <case>case <expr><name>VERTEX</name></expr>:</case> <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>tri</name> <init>= <expr><literal type="number">3</literal> <operator>*</operator> <name>primID</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>index0</name> <init>= <expr><name><name>triangles</name><index>[<expr><name>tri</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>index1</name> <init>= <expr><name><name>triangles</name><index>[<expr><name>tri</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>index2</name> <init>= <expr><name><name>triangles</name><index>[<expr><name>tri</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>i20</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>index0</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>i21</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>index1</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>i22</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>index2</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>uvs</name> <init>= <expr><name><name>TriangleMesh</name><operator>.</operator><name>this</name><operator>.</operator><name>uvs</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
                    <switch>switch <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
                        <case>case <expr><literal type="number">0</literal></expr>:</case>
                            <return>return <expr><call><name><name>MathUtils</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name><name>uvs</name><index>[<expr><name>i20</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>uvs</name><index>[<expr><name>i21</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>uvs</name><index>[<expr><name>i22</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
                        <case>case <expr><literal type="number">1</literal></expr>:</case>
                            <return>return <expr><call><name><name>MathUtils</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name><name>uvs</name><index>[<expr><name>i20</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>uvs</name><index>[<expr><name>i21</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>uvs</name><index>[<expr><name>i22</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
                        <case>case <expr><literal type="number">2</literal></expr>:</case>
                            <return>return <expr><call><name><name>MathUtils</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name><name>uvs</name><index>[<expr><name>i20</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>uvs</name><index>[<expr><name>i21</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>uvs</name><index>[<expr><name>i22</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
                        <case>case <expr><literal type="number">3</literal></expr>:</case>
                            <return>return <expr><call><name><name>MathUtils</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name><name>uvs</name><index>[<expr><name>i20</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>uvs</name><index>[<expr><name>i21</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>uvs</name><index>[<expr><name>i22</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
                        <default>default:</default>
                            <return>return <expr><literal type="number">0</literal></expr>;</return>
                    </block_content>}</block></switch>
                </block_content>}</block>
                <case>case <expr><name>FACEVARYING</name></expr>:</case> <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">6</literal> <operator>*</operator> <name>primID</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>uvs</name> <init>= <expr><name><name>TriangleMesh</name><operator>.</operator><name>this</name><operator>.</operator><name>uvs</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
                    <switch>switch <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
                        <case>case <expr><literal type="number">0</literal></expr>:</case>
                            <return>return <expr><call><name><name>MathUtils</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name><name>uvs</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>uvs</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>uvs</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
                        <case>case <expr><literal type="number">1</literal></expr>:</case>
                            <return>return <expr><call><name><name>MathUtils</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name><name>uvs</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>uvs</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>uvs</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
                        <case>case <expr><literal type="number">2</literal></expr>:</case>
                            <return>return <expr><call><name><name>MathUtils</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name><name>uvs</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>uvs</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>uvs</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
                        <case>case <expr><literal type="number">3</literal></expr>:</case>
                            <return>return <expr><call><name><name>MathUtils</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name><name>uvs</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>uvs</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>uvs</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
                        <default>default:</default>
                            <return>return <expr><literal type="number">0</literal></expr>;</return>
                    </block_content>}</block></switch>
                </block_content>}</block>
            </block_content>}</block></switch>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>BoundingBox</name></type> <name>getWorldBounds</name><parameter_list>(<parameter><decl><type><name>Matrix4</name></type> <name>o2w</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>BoundingBox</name></type> <name>bounds</name> <init>= <expr><operator>new</operator> <call><name>BoundingBox</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>o2w</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>uvs</name><operator>.</operator><name>data</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>bounds</name><operator>.</operator><name>include</name></name><argument_list>(<argument><expr><name><name>uvs</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>uvs</name><operator>.</operator><name>data</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <comment type="line">// transform vertices first</comment>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>uvs</name><operator>.</operator><name>data</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><name><name>uvs</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>float</name></type> <name>y</name> <init>= <expr><name><name>uvs</name><operator>.</operator><name>data</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>float</name></type> <name>wx</name> <init>= <expr><call><name><name>o2w</name><operator>.</operator><name>transformPX</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>float</name></type> <name>wy</name> <init>= <expr><call><name><name>o2w</name><operator>.</operator><name>transformPY</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>float</name></type> <name>wz</name> <init>= <expr><call><name><name>o2w</name><operator>.</operator><name>transformPZ</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>bounds</name><operator>.</operator><name>include</name></name><argument_list>(<argument><expr><name>wx</name></expr></argument>, <argument><expr><name>wy</name></expr></argument>, <argument><expr><name>wz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></else></if_stmt>
            <return>return <expr><name>bounds</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>intersectPrimitive</name><parameter_list>(<parameter><decl><type><name>Ray</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>primID</name></decl></parameter>, <parameter><decl><type><name>IntersectionState</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>float</name></type> <name>uv00</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>uv01</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>uv10</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>uv11</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>uv20</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>uv21</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <switch>switch <condition>(<expr><name><name>uvs</name><operator>.</operator><name>interp</name></name></expr>)</condition> <block>{<block_content>
                <case>case <expr><name>NONE</name></expr>:</case>
                <case>case <expr><name>FACE</name></expr>:</case>
                <default>default:</default>
                    <return>return;</return>
                <case>case <expr><name>VERTEX</name></expr>:</case> <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>tri</name> <init>= <expr><literal type="number">3</literal> <operator>*</operator> <name>primID</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>index0</name> <init>= <expr><name><name>triangles</name><index>[<expr><name>tri</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>index1</name> <init>= <expr><name><name>triangles</name><index>[<expr><name>tri</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>index2</name> <init>= <expr><name><name>triangles</name><index>[<expr><name>tri</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>i20</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>index0</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>i21</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>index1</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>i22</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>index2</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>uvs</name> <init>= <expr><name><name>TriangleMesh</name><operator>.</operator><name>this</name><operator>.</operator><name>uvs</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>uv00</name> <operator>=</operator> <name><name>uvs</name><index>[<expr><name>i20</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>uv01</name> <operator>=</operator> <name><name>uvs</name><index>[<expr><name>i20</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>uv10</name> <operator>=</operator> <name><name>uvs</name><index>[<expr><name>i21</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>uv11</name> <operator>=</operator> <name><name>uvs</name><index>[<expr><name>i21</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>uv20</name> <operator>=</operator> <name><name>uvs</name><index>[<expr><name>i22</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>uv21</name> <operator>=</operator> <name><name>uvs</name><index>[<expr><name>i22</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                    <break>break;</break>

                </block_content>}</block>
                <case>case <expr><name>FACEVARYING</name></expr>:</case> <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><operator>(</operator><literal type="number">3</literal> <operator>*</operator> <name>primID</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>uvs</name> <init>= <expr><name><name>TriangleMesh</name><operator>.</operator><name>this</name><operator>.</operator><name>uvs</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>uv00</name> <operator>=</operator> <name><name>uvs</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>uv01</name> <operator>=</operator> <name><name>uvs</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>uv10</name> <operator>=</operator> <name><name>uvs</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>uv11</name> <operator>=</operator> <name><name>uvs</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>uv20</name> <operator>=</operator> <name><name>uvs</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>uv21</name> <operator>=</operator> <name><name>uvs</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block>
            </block_content>}</block></switch>

            <decl_stmt><decl><type><name>double</name></type> <name>edge1x</name> <init>= <expr><name>uv10</name> <operator>-</operator> <name>uv00</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>edge1y</name> <init>= <expr><name>uv11</name> <operator>-</operator> <name>uv01</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>edge2x</name> <init>= <expr><name>uv20</name> <operator>-</operator> <name>uv00</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>edge2y</name> <init>= <expr><name>uv21</name> <operator>-</operator> <name>uv01</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>pvecx</name> <init>= <expr><name><name>r</name><operator>.</operator><name>dy</name></name> <operator>*</operator> <literal type="number">0</literal> <operator>-</operator> <name><name>r</name><operator>.</operator><name>dz</name></name> <operator>*</operator> <name>edge2y</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>pvecy</name> <init>= <expr><name><name>r</name><operator>.</operator><name>dz</name></name> <operator>*</operator> <name>edge2x</name> <operator>-</operator> <name><name>r</name><operator>.</operator><name>dx</name></name> <operator>*</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>pvecz</name> <init>= <expr><name><name>r</name><operator>.</operator><name>dx</name></name> <operator>*</operator> <name>edge2y</name> <operator>-</operator> <name><name>r</name><operator>.</operator><name>dy</name></name> <operator>*</operator> <name>edge2x</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>qvecx</name></decl>, <decl><type ref="prev"/><name>qvecy</name></decl>, <decl><type ref="prev"/><name>qvecz</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>det</name> <init>= <expr><name>edge1x</name> <operator>*</operator> <name>pvecx</name> <operator>+</operator> <name>edge1y</name> <operator>*</operator> <name>pvecy</name> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <name>pvecz</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>det</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>double</name></type> <name>tvecx</name> <init>= <expr><name><name>r</name><operator>.</operator><name>ox</name></name> <operator>-</operator> <name>uv00</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>tvecy</name> <init>= <expr><name><name>r</name><operator>.</operator><name>oy</name></name> <operator>-</operator> <name>uv01</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>tvecz</name> <init>= <expr><name><name>r</name><operator>.</operator><name>oz</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>u</name> <operator>=</operator> <operator>(</operator><name>tvecx</name> <operator>*</operator> <name>pvecx</name> <operator>+</operator> <name>tvecy</name> <operator>*</operator> <name>pvecy</name> <operator>+</operator> <name>tvecz</name> <operator>*</operator> <name>pvecz</name><operator>)</operator></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>u</name> <operator>&lt;</operator> <literal type="number">0.0</literal> <operator>||</operator> <name>u</name> <operator>&gt;</operator> <name>det</name></expr>)</condition><block type="pseudo"><block_content>
                    <return>return;</return></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>qvecx</name> <operator>=</operator> <name>tvecy</name> <operator>*</operator> <literal type="number">0</literal> <operator>-</operator> <name>tvecz</name> <operator>*</operator> <name>edge1y</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>qvecy</name> <operator>=</operator> <name>tvecz</name> <operator>*</operator> <name>edge1x</name> <operator>-</operator> <name>tvecx</name> <operator>*</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>qvecz</name> <operator>=</operator> <name>tvecx</name> <operator>*</operator> <name>edge1y</name> <operator>-</operator> <name>tvecy</name> <operator>*</operator> <name>edge1x</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name><name>r</name><operator>.</operator><name>dx</name></name> <operator>*</operator> <name>qvecx</name> <operator>+</operator> <name><name>r</name><operator>.</operator><name>dy</name></name> <operator>*</operator> <name>qvecy</name> <operator>+</operator> <name><name>r</name><operator>.</operator><name>dz</name></name> <operator>*</operator> <name>qvecz</name><operator>)</operator></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">0.0</literal> <operator>||</operator> <name>u</name> <operator>+</operator> <name>v</name> <operator>&gt;</operator> <name>det</name></expr>)</condition><block type="pseudo"><block_content>
                    <return>return;</return></block_content></block></if></if_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>det</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>double</name></type> <name>tvecx</name> <init>= <expr><name><name>r</name><operator>.</operator><name>ox</name></name> <operator>-</operator> <name>uv00</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>tvecy</name> <init>= <expr><name><name>r</name><operator>.</operator><name>oy</name></name> <operator>-</operator> <name>uv01</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>tvecz</name> <init>= <expr><name><name>r</name><operator>.</operator><name>oz</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>u</name> <operator>=</operator> <operator>(</operator><name>tvecx</name> <operator>*</operator> <name>pvecx</name> <operator>+</operator> <name>tvecy</name> <operator>*</operator> <name>pvecy</name> <operator>+</operator> <name>tvecz</name> <operator>*</operator> <name>pvecz</name><operator>)</operator></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>u</name> <operator>&gt;</operator> <literal type="number">0.0</literal> <operator>||</operator> <name>u</name> <operator>&lt;</operator> <name>det</name></expr>)</condition><block type="pseudo"><block_content>
                    <return>return;</return></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>qvecx</name> <operator>=</operator> <name>tvecy</name> <operator>*</operator> <literal type="number">0</literal> <operator>-</operator> <name>tvecz</name> <operator>*</operator> <name>edge1y</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>qvecy</name> <operator>=</operator> <name>tvecz</name> <operator>*</operator> <name>edge1x</name> <operator>-</operator> <name>tvecx</name> <operator>*</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>qvecz</name> <operator>=</operator> <name>tvecx</name> <operator>*</operator> <name>edge1y</name> <operator>-</operator> <name>tvecy</name> <operator>*</operator> <name>edge1x</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name><name>r</name><operator>.</operator><name>dx</name></name> <operator>*</operator> <name>qvecx</name> <operator>+</operator> <name><name>r</name><operator>.</operator><name>dy</name></name> <operator>*</operator> <name>qvecy</name> <operator>+</operator> <name><name>r</name><operator>.</operator><name>dz</name></name> <operator>*</operator> <name>qvecz</name><operator>)</operator></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;</operator> <literal type="number">0.0</literal> <operator>||</operator> <name>u</name> <operator>+</operator> <name>v</name> <operator>&lt;</operator> <name>det</name></expr>)</condition><block type="pseudo"><block_content>
                    <return>return;</return></block_content></block></if></if_stmt>
            </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
                <return>return;</return></block_content></block></else></if_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>inv_det</name> <init>= <expr><literal type="number">1.0</literal> <operator>/</operator> <name>det</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>t</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>edge2x</name> <operator>*</operator> <name>qvecx</name> <operator>+</operator> <name>edge2y</name> <operator>*</operator> <name>qvecy</name> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <name>qvecz</name><operator>)</operator> <operator>*</operator> <name>inv_det</name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>r</name><operator>.</operator><name>isInside</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>setMax</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>setIntersection</name></name><argument_list>(<argument><expr><name>primID</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><name>u</name> <operator>*</operator> <name>inv_det</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><name>v</name> <operator>*</operator> <name>inv_det</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>prepareShadingState</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Instance</name></type> <name>parent</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>primID</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>getPrimitiveID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>u</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>getU</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>v</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>getV</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>w</name> <init>= <expr><literal type="number">1</literal> <operator>-</operator> <name>u</name> <operator>-</operator> <name>v</name></expr></init></decl>;</decl_stmt>
            <comment type="line">// state.getRay().getPoint(state.getPoint());</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>tri</name> <init>= <expr><literal type="number">3</literal> <operator>*</operator> <name>primID</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>index0</name> <init>= <expr><name><name>triangles</name><index>[<expr><name>tri</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>index1</name> <init>= <expr><name><name>triangles</name><index>[<expr><name>tri</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>index2</name> <init>= <expr><name><name>triangles</name><index>[<expr><name>tri</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Point3</name></type> <name>v0p</name> <init>= <expr><call><name>getPoint</name><argument_list>(<argument><expr><name>index0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Point3</name></type> <name>v1p</name> <init>= <expr><call><name>getPoint</name><argument_list>(<argument><expr><name>index1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Point3</name></type> <name>v2p</name> <init>= <expr><call><name>getPoint</name><argument_list>(<argument><expr><name>index2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// get object space point from barycentric coordinates</comment>
            <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>=</operator> <name>w</name> <operator>*</operator> <name><name>v0p</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>u</name> <operator>*</operator> <name><name>v1p</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>v</name> <operator>*</operator> <name><name>v2p</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>=</operator> <name>w</name> <operator>*</operator> <name><name>v0p</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>u</name> <operator>*</operator> <name><name>v1p</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>v</name> <operator>*</operator> <name><name>v2p</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call><operator>.</operator><name>z</name> <operator>=</operator> <name>w</name> <operator>*</operator> <name><name>v0p</name><operator>.</operator><name>z</name></name> <operator>+</operator> <name>u</name> <operator>*</operator> <name><name>v1p</name><operator>.</operator><name>z</name></name> <operator>+</operator> <name>v</name> <operator>*</operator> <name><name>v2p</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
            <comment type="line">// move into world space</comment>
            <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>set</name><argument_list>(<argument><expr><call><name><name>parent</name><operator>.</operator><name>transformObjectToWorld</name></name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>Vector3</name></type> <name>ng</name> <init>= <expr><call><name><name>Point3</name><operator>.</operator><name>normal</name></name><argument_list>(<argument><expr><name>v0p</name></expr></argument>, <argument><expr><name>v1p</name></expr></argument>, <argument><expr><name>v2p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>parent</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>ng</name> <operator>=</operator> <call><name><name>parent</name><operator>.</operator><name>transformNormalObjectToWorld</name></name><argument_list>(<argument><expr><name>ng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name><name>ng</name><operator>.</operator><name>normalize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getGeoNormal</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>set</name><argument_list>(<argument><expr><name>ng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <switch>switch <condition>(<expr><name><name>normals</name><operator>.</operator><name>interp</name></name></expr>)</condition> <block>{<block_content>
                <case>case <expr><name>NONE</name></expr>:</case>
                <case>case <expr><name>FACE</name></expr>:</case> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>set</name><argument_list>(<argument><expr><name>ng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block>
                <case>case <expr><name>VERTEX</name></expr>:</case> <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>i30</name> <init>= <expr><literal type="number">3</literal> <operator>*</operator> <name>index0</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>i31</name> <init>= <expr><literal type="number">3</literal> <operator>*</operator> <name>index1</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>i32</name> <init>= <expr><literal type="number">3</literal> <operator>*</operator> <name>index2</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>normals</name> <init>= <expr><name><name>TriangleMesh</name><operator>.</operator><name>this</name><operator>.</operator><name>normals</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>=</operator> <name>w</name> <operator>*</operator> <name><name>normals</name><index>[<expr><name>i30</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>u</name> <operator>*</operator> <name><name>normals</name><index>[<expr><name>i31</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>v</name> <operator>*</operator> <name><name>normals</name><index>[<expr><name>i32</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>=</operator> <name>w</name> <operator>*</operator> <name><name>normals</name><index>[<expr><name>i30</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>u</name> <operator>*</operator> <name><name>normals</name><index>[<expr><name>i31</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>v</name> <operator>*</operator> <name><name>normals</name><index>[<expr><name>i32</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call><operator>.</operator><name>z</name> <operator>=</operator> <name>w</name> <operator>*</operator> <name><name>normals</name><index>[<expr><name>i30</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>u</name> <operator>*</operator> <name><name>normals</name><index>[<expr><name>i31</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>v</name> <operator>*</operator> <name><name>normals</name><index>[<expr><name>i32</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>parent</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>set</name><argument_list>(<argument><expr><call><name><name>parent</name><operator>.</operator><name>transformNormalObjectToWorld</name></name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>normalize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block>
                <case>case <expr><name>FACEVARYING</name></expr>:</case> <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">3</literal> <operator>*</operator> <name>tri</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>normals</name> <init>= <expr><name><name>TriangleMesh</name><operator>.</operator><name>this</name><operator>.</operator><name>normals</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>=</operator> <name>w</name> <operator>*</operator> <name><name>normals</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>u</name> <operator>*</operator> <name><name>normals</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>v</name> <operator>*</operator> <name><name>normals</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>=</operator> <name>w</name> <operator>*</operator> <name><name>normals</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>u</name> <operator>*</operator> <name><name>normals</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name>v</name> <operator>*</operator> <name><name>normals</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call><operator>.</operator><name>z</name> <operator>=</operator> <name>w</name> <operator>*</operator> <name><name>normals</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>u</name> <operator>*</operator> <name><name>normals</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name>v</name> <operator>*</operator> <name><name>normals</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>parent</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>set</name><argument_list>(<argument><expr><call><name><name>parent</name><operator>.</operator><name>transformNormalObjectToWorld</name></name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>normalize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block>
            </block_content>}</block></switch>
            <decl_stmt><decl><type><name>float</name></type> <name>uv00</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>uv01</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>uv10</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>uv11</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>uv20</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>uv21</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <switch>switch <condition>(<expr><name><name>uvs</name><operator>.</operator><name>interp</name></name></expr>)</condition> <block>{<block_content>
                <case>case <expr><name>NONE</name></expr>:</case>
                <case>case <expr><name>FACE</name></expr>:</case> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getUV</name></name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getUV</name></name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block>
                <case>case <expr><name>VERTEX</name></expr>:</case> <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>i20</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>index0</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>i21</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>index1</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>i22</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>index2</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>uvs</name> <init>= <expr><name><name>TriangleMesh</name><operator>.</operator><name>this</name><operator>.</operator><name>uvs</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>uv00</name> <operator>=</operator> <name><name>uvs</name><index>[<expr><name>i20</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>uv01</name> <operator>=</operator> <name><name>uvs</name><index>[<expr><name>i20</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>uv10</name> <operator>=</operator> <name><name>uvs</name><index>[<expr><name>i21</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>uv11</name> <operator>=</operator> <name><name>uvs</name><index>[<expr><name>i21</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>uv20</name> <operator>=</operator> <name><name>uvs</name><index>[<expr><name>i22</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>uv21</name> <operator>=</operator> <name><name>uvs</name><index>[<expr><name>i22</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block>
                <case>case <expr><name>FACEVARYING</name></expr>:</case> <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name>tri</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>uvs</name> <init>= <expr><name><name>TriangleMesh</name><operator>.</operator><name>this</name><operator>.</operator><name>uvs</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>uv00</name> <operator>=</operator> <name><name>uvs</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>uv01</name> <operator>=</operator> <name><name>uvs</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>uv10</name> <operator>=</operator> <name><name>uvs</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>uv11</name> <operator>=</operator> <name><name>uvs</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>uv20</name> <operator>=</operator> <name><name>uvs</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>uv21</name> <operator>=</operator> <name><name>uvs</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block>
            </block_content>}</block></switch>
            <if_stmt><if>if <condition>(<expr><name><name>uvs</name><operator>.</operator><name>interp</name></name> <operator>!=</operator> <name><name>InterpolationType</name><operator>.</operator><name>NONE</name></name></expr>)</condition> <block>{<block_content>
                <comment type="line">// get exact uv coords and compute tangent vectors</comment>
                <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getUV</name></name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>=</operator> <name>w</name> <operator>*</operator> <name>uv00</name> <operator>+</operator> <name>u</name> <operator>*</operator> <name>uv10</name> <operator>+</operator> <name>v</name> <operator>*</operator> <name>uv20</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>getUV</name></name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>=</operator> <name>w</name> <operator>*</operator> <name>uv01</name> <operator>+</operator> <name>u</name> <operator>*</operator> <name>uv11</name> <operator>+</operator> <name>v</name> <operator>*</operator> <name>uv21</name></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>float</name></type> <name>du1</name> <init>= <expr><name>uv00</name> <operator>-</operator> <name>uv20</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>float</name></type> <name>du2</name> <init>= <expr><name>uv10</name> <operator>-</operator> <name>uv20</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>float</name></type> <name>dv1</name> <init>= <expr><name>uv01</name> <operator>-</operator> <name>uv21</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>float</name></type> <name>dv2</name> <init>= <expr><name>uv11</name> <operator>-</operator> <name>uv21</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Vector3</name></type> <name>dp1</name> <init>= <expr><call><name><name>Point3</name><operator>.</operator><name>sub</name></name><argument_list>(<argument><expr><name>v0p</name></expr></argument>, <argument><expr><name>v2p</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Vector3</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>dp2</name> <init>= <expr><call><name><name>Point3</name><operator>.</operator><name>sub</name></name><argument_list>(<argument><expr><name>v1p</name></expr></argument>, <argument><expr><name>v2p</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Vector3</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>float</name></type> <name>determinant</name> <init>= <expr><name>du1</name> <operator>*</operator> <name>dv2</name> <operator>-</operator> <name>dv1</name> <operator>*</operator> <name>du2</name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>determinant</name> <operator>==</operator> <literal type="number">0.0f</literal></expr>)</condition> <block>{<block_content>
                    <comment type="line">// create basis in world space</comment>
                    <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>setBasis</name></name><argument_list>(<argument><expr><call><name><name>OrthoNormalBasis</name><operator>.</operator><name>makeFromW</name></name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <decl_stmt><decl><type><name>float</name></type> <name>invdet</name> <init>= <expr><literal type="number">1.f</literal> <operator>/</operator> <name>determinant</name></expr></init></decl>;</decl_stmt>
                    <comment type="line">// Vector3 dpdu = new Vector3();</comment>
                    <comment type="line">// dpdu.x = (dv2 * dp1.x - dv1 * dp2.x) * invdet;</comment>
                    <comment type="line">// dpdu.y = (dv2 * dp1.y - dv1 * dp2.y) * invdet;</comment>
                    <comment type="line">// dpdu.z = (dv2 * dp1.z - dv1 * dp2.z) * invdet;</comment>
                    <decl_stmt><decl><type><name>Vector3</name></type> <name>dpdv</name> <init>= <expr><operator>new</operator> <call><name>Vector3</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name><name>dpdv</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><operator>-</operator><name>du2</name> <operator>*</operator> <name><name>dp1</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>du1</name> <operator>*</operator> <name><name>dp2</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>*</operator> <name>invdet</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>dpdv</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>(</operator><operator>-</operator><name>du2</name> <operator>*</operator> <name><name>dp1</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>du1</name> <operator>*</operator> <name><name>dp2</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>*</operator> <name>invdet</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>dpdv</name><operator>.</operator><name>z</name></name> <operator>=</operator> <operator>(</operator><operator>-</operator><name>du2</name> <operator>*</operator> <name><name>dp1</name><operator>.</operator><name>z</name></name> <operator>+</operator> <name>du1</name> <operator>*</operator> <name><name>dp2</name><operator>.</operator><name>z</name></name><operator>)</operator> <operator>*</operator> <name>invdet</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>parent</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>dpdv</name> <operator>=</operator> <call><name><name>parent</name><operator>.</operator><name>transformVectorObjectToWorld</name></name><argument_list>(<argument><expr><name>dpdv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <comment type="line">// create basis in world space</comment>
                    <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>setBasis</name></name><argument_list>(<argument><expr><call><name><name>OrthoNormalBasis</name><operator>.</operator><name>makeFromWV</name></name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dpdv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>setBasis</name></name><argument_list>(<argument><expr><call><name><name>OrthoNormalBasis</name><operator>.</operator><name>makeFromW</name></name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>shaderIndex</name> <init>= <expr><ternary><condition><expr><name>faceShaders</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name><name>faceShaders</name><index>[<expr><name>primID</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>state</name><operator>.</operator><name>setShader</name></name><argument_list>(<argument><expr><call><name><name>parent</name><operator>.</operator><name>getShader</name></name><argument_list>(<argument><expr><name>shaderIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>ParameterList</name></type> <name>pl</name></decl></parameter>, <parameter><decl><type><name>SunflowAPI</name></type> <name>api</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class></unit>
