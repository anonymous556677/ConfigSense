<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/sunflow/src/org/sunflow/math/BoundingBox.java"><package>package <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name></name>;</package>

<comment type="block" format="javadoc">/**
 * 3D axis-aligned bounding box. Stores only the minimum and maximum corner
 * points.
 */</comment>
<class><specifier>public</specifier> class <name>BoundingBox</name> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>Point3</name></type> <name>minimum</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Point3</name></type> <name>maximum</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Creates an empty box. The minimum point will have all components set to
     * positive infinity, and the maximum will have all components set to
     * negative infinity.
     */</comment>
    <constructor><specifier>public</specifier> <name>BoundingBox</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>minimum</name> <operator>=</operator> <operator>new</operator> <call><name>Point3</name><argument_list>(<argument><expr><name><name>Float</name><operator>.</operator><name>POSITIVE_INFINITY</name></name></expr></argument>, <argument><expr><name><name>Float</name><operator>.</operator><name>POSITIVE_INFINITY</name></name></expr></argument>, <argument><expr><name><name>Float</name><operator>.</operator><name>POSITIVE_INFINITY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>maximum</name> <operator>=</operator> <operator>new</operator> <call><name>Point3</name><argument_list>(<argument><expr><name><name>Float</name><operator>.</operator><name>NEGATIVE_INFINITY</name></name></expr></argument>, <argument><expr><name><name>Float</name><operator>.</operator><name>NEGATIVE_INFINITY</name></name></expr></argument>, <argument><expr><name><name>Float</name><operator>.</operator><name>NEGATIVE_INFINITY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Creates a copy of the given box.
     * 
     * @param b bounding box to copy
     */</comment>
    <constructor><specifier>public</specifier> <name>BoundingBox</name><parameter_list>(<parameter><decl><type><name>BoundingBox</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>minimum</name> <operator>=</operator> <operator>new</operator> <call><name>Point3</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>minimum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>maximum</name> <operator>=</operator> <operator>new</operator> <call><name>Point3</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>maximum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Creates a bounding box containing only the specified point.
     * 
     * @param p point to include
     */</comment>
    <constructor><specifier>public</specifier> <name>BoundingBox</name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Creates a bounding box containing only the specified point.
     * 
     * @param x x coordinate of the point to include
     * @param y y coordinate of the point to include
     * @param z z coordinate of the point to include
     */</comment>
    <constructor><specifier>public</specifier> <name>BoundingBox</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>minimum</name> <operator>=</operator> <operator>new</operator> <call><name>Point3</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>maximum</name> <operator>=</operator> <operator>new</operator> <call><name>Point3</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Creates a bounding box centered around the origin.
     * 
     * @param size half edge length of the bounding box
     */</comment>
    <constructor><specifier>public</specifier> <name>BoundingBox</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>minimum</name> <operator>=</operator> <operator>new</operator> <call><name>Point3</name><argument_list>(<argument><expr><operator>-</operator><name>size</name></expr></argument>, <argument><expr><operator>-</operator><name>size</name></expr></argument>, <argument><expr><operator>-</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>maximum</name> <operator>=</operator> <operator>new</operator> <call><name>Point3</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Gets the minimum corner of the box. That is the corner of smallest
     * coordinates on each axis. Note that the returned reference is not cloned
     * for efficiency purposes so care must be taken not to change the
     * coordinates of the point.
     * 
     * @return a reference to the minimum corner
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>Point3</name></type> <name>getMinimum</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>minimum</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets the maximum corner of the box. That is the corner of largest
     * coordinates on each axis. Note that the returned reference is not cloned
     * for efficiency purposes so care must be taken not to change the
     * coordinates of the point.
     * 
     * @return a reference to the maximum corner
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>Point3</name></type> <name>getMaximum</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>maximum</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets the center of the box, computed as (min + max) / 2.
     * 
     * @return a reference to the center of the box
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>Point3</name></type> <name>getCenter</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>Point3</name><operator>.</operator><name>mid</name></name><argument_list>(<argument><expr><name>minimum</name></expr></argument>, <argument><expr><name>maximum</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Point3</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets a corner of the bounding box. The index scheme uses the binary
     * representation of the index to decide which corner to return. Corner 0 is
     * equivalent to the minimum and corner 7 is equivalent to the maximum.
     * 
     * @param i a corner index, from 0 to 7
     * @return the corresponding corner
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>Point3</name></type> <name>getCorner</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>minimum</name><operator>.</operator><name>x</name></name></expr> </then><else>: <expr><name><name>maximum</name><operator>.</operator><name>x</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>y</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>minimum</name><operator>.</operator><name>y</name></name></expr> </then><else>: <expr><name><name>maximum</name><operator>.</operator><name>y</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>z</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">4</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>minimum</name><operator>.</operator><name>z</name></name></expr> </then><else>: <expr><name><name>maximum</name><operator>.</operator><name>z</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>new</operator> <call><name>Point3</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets a specific coordinate of the surface's bounding box.
     * 
     * @param i index of a side from 0 to 5
     * @return value of the request bounding box side
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>float</name></type> <name>getBound</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><literal type="number">0</literal></expr>:</case>
                <return>return <expr><name><name>minimum</name><operator>.</operator><name>x</name></name></expr>;</return>
            <case>case <expr><literal type="number">1</literal></expr>:</case>
                <return>return <expr><name><name>maximum</name><operator>.</operator><name>x</name></name></expr>;</return>
            <case>case <expr><literal type="number">2</literal></expr>:</case>
                <return>return <expr><name><name>minimum</name><operator>.</operator><name>y</name></name></expr>;</return>
            <case>case <expr><literal type="number">3</literal></expr>:</case>
                <return>return <expr><name><name>maximum</name><operator>.</operator><name>y</name></name></expr>;</return>
            <case>case <expr><literal type="number">4</literal></expr>:</case>
                <return>return <expr><name><name>minimum</name><operator>.</operator><name>z</name></name></expr>;</return>
            <case>case <expr><literal type="number">5</literal></expr>:</case>
                <return>return <expr><name><name>maximum</name><operator>.</operator><name>z</name></name></expr>;</return>
            <default>default:</default>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets the extents vector for the box. This vector is computed as (max -
     * min). Its coordinates are always positive and represent the dimensions of
     * the box along the three axes.
     * 
     * @return a refreence to the extent vector
     * @see org.sunflow.math.Vector3#length()
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>Vector3</name></type> <name>getExtents</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>Point3</name><operator>.</operator><name>sub</name></name><argument_list>(<argument><expr><name>maximum</name></expr></argument>, <argument><expr><name>minimum</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Vector3</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets the surface area of the box.
     * 
     * @return surface area
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>float</name></type> <name>getArea</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Vector3</name></type> <name>w</name> <init>= <expr><call><name>getExtents</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>ax</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name><name>w</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>ay</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name><name>w</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>az</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name><name>w</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>ax</name> <operator>*</operator> <name>ay</name> <operator>+</operator> <name>ay</name> <operator>*</operator> <name>az</name> <operator>+</operator> <name>az</name> <operator>*</operator> <name>ax</name><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets the box's volume
     * 
     * @return volume
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>float</name></type> <name>getVolume</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Vector3</name></type> <name>w</name> <init>= <expr><call><name>getExtents</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>ax</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name><name>w</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>ay</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name><name>w</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>az</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name><name>w</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>ax</name> <operator>*</operator> <name>ay</name> <operator>*</operator> <name>az</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Enlarge the bounding box by the minimum possible amount to avoid numeric
     * precision related problems.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>enlargeUlps</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>eps</name> <init>= <expr><literal type="number">0.0001f</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>minimum</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>eps</name></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>ulp</name></name><argument_list>(<argument><expr><name><name>minimum</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>minimum</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>eps</name></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>ulp</name></name><argument_list>(<argument><expr><name><name>minimum</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>minimum</name><operator>.</operator><name>z</name></name> <operator>-=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>eps</name></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>ulp</name></name><argument_list>(<argument><expr><name><name>minimum</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>maximum</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>eps</name></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>ulp</name></name><argument_list>(<argument><expr><name><name>maximum</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>maximum</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>eps</name></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>ulp</name></name><argument_list>(<argument><expr><name><name>maximum</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>maximum</name><operator>.</operator><name>z</name></name> <operator>+=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>eps</name></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>ulp</name></name><argument_list>(<argument><expr><name><name>maximum</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; when the box has just been initialized, and
     * is still empty. This method might also return true if the state of the
     * box becomes inconsistent and some component of the minimum corner is
     * larger than the corresponding coordinate of the maximum corner.
     * 
     * @return &lt;code&gt;true&lt;/code&gt; if the box is empty, &lt;code&gt;false&lt;/code&gt;
     *         otherwise
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>isEmpty</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><name><name>maximum</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <name><name>minimum</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>maximum</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <name><name>minimum</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>maximum</name><operator>.</operator><name>z</name></name> <operator>&lt;</operator> <name><name>minimum</name><operator>.</operator><name>z</name></name><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if the specified bounding box intersects this
     * one. The boxes are treated as volumes, so a box inside another will
     * return true. Returns &lt;code&gt;false&lt;/code&gt; if the parameter is
     * &lt;code&gt;null&lt;/code&gt;.
     * 
     * @param b box to be tested for intersection
     * @return &lt;code&gt;true&lt;/code&gt; if the boxes overlap, &lt;code&gt;false&lt;/code&gt;
     *         otherwise
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>intersects</name><parameter_list>(<parameter><decl><type><name>BoundingBox</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><operator>(</operator><name>b</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>minimum</name><operator>.</operator><name>x</name></name> <operator>&lt;=</operator> <name><name>b</name><operator>.</operator><name>maximum</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>maximum</name><operator>.</operator><name>x</name></name> <operator>&gt;=</operator> <name><name>b</name><operator>.</operator><name>minimum</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>minimum</name><operator>.</operator><name>y</name></name> <operator>&lt;=</operator> <name><name>b</name><operator>.</operator><name>maximum</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>maximum</name><operator>.</operator><name>y</name></name> <operator>&gt;=</operator> <name><name>b</name><operator>.</operator><name>minimum</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>minimum</name><operator>.</operator><name>z</name></name> <operator>&lt;=</operator> <name><name>b</name><operator>.</operator><name>maximum</name><operator>.</operator><name>z</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>maximum</name><operator>.</operator><name>z</name></name> <operator>&gt;=</operator> <name><name>b</name><operator>.</operator><name>minimum</name><operator>.</operator><name>z</name></name><operator>)</operator><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Checks to see if the specified {@link org.sunflow.math.Point3 point}is
     * inside the volume defined by this box. Returns &lt;code&gt;false&lt;/code&gt; if
     * the parameter is &lt;code&gt;null&lt;/code&gt;.
     * 
     * @param p point to be tested for containment
     * @return &lt;code&gt;true&lt;/code&gt; if the point is inside the box,
     *         &lt;code&gt;false&lt;/code&gt; otherwise
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>contains</name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><operator>(</operator><name>p</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><operator>.</operator><name>x</name></name> <operator>&gt;=</operator> <name><name>minimum</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><operator>.</operator><name>x</name></name> <operator>&lt;=</operator> <name><name>maximum</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><operator>.</operator><name>y</name></name> <operator>&gt;=</operator> <name><name>minimum</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><operator>.</operator><name>y</name></name> <operator>&lt;=</operator> <name><name>maximum</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><operator>.</operator><name>z</name></name> <operator>&gt;=</operator> <name><name>minimum</name><operator>.</operator><name>z</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><operator>.</operator><name>z</name></name> <operator>&lt;=</operator> <name><name>maximum</name><operator>.</operator><name>z</name></name><operator>)</operator><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check to see if the specified point is inside the volume defined by this
     * box.
     * 
     * @param x x coordinate of the point to be tested
     * @param y y coordinate of the point to be tested
     * @param z z coordinate of the point to be tested
     * @return &lt;code&gt;true&lt;/code&gt; if the point is inside the box,
     *         &lt;code&gt;false&lt;/code&gt; otherwise
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>contains</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><operator>(</operator><name>x</name> <operator>&gt;=</operator> <name><name>minimum</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>x</name> <operator>&lt;=</operator> <name><name>maximum</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>y</name> <operator>&gt;=</operator> <name><name>minimum</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>y</name> <operator>&lt;=</operator> <name><name>maximum</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>z</name> <operator>&gt;=</operator> <name><name>minimum</name><operator>.</operator><name>z</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>z</name> <operator>&lt;=</operator> <name><name>maximum</name><operator>.</operator><name>z</name></name><operator>)</operator><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Changes the extents of the box as needed to include the given
     * {@link org.sunflow.math.Point3 point}into this box. Does nothing if the
     * parameter is &lt;code&gt;null&lt;/code&gt;.
     * 
     * @param p point to be included
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>include</name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <name><name>minimum</name><operator>.</operator><name>x</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>minimum</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <name><name>maximum</name><operator>.</operator><name>x</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>maximum</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <name><name>minimum</name><operator>.</operator><name>y</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>minimum</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>.</operator><name>y</name></name> <operator>&gt;</operator> <name><name>maximum</name><operator>.</operator><name>y</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>maximum</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>.</operator><name>z</name></name> <operator>&lt;</operator> <name><name>minimum</name><operator>.</operator><name>z</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>minimum</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>.</operator><name>z</name></name> <operator>&gt;</operator> <name><name>maximum</name><operator>.</operator><name>z</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>maximum</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Changes the extents of the box as needed to include the given point into
     * this box.
     * 
     * @param x x coordinate of the point
     * @param y y coordinate of the point
     * @param z z coordinate of the point
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>include</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <name><name>minimum</name><operator>.</operator><name>x</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>minimum</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name><name>maximum</name><operator>.</operator><name>x</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>maximum</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <name><name>minimum</name><operator>.</operator><name>y</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>minimum</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;</operator> <name><name>maximum</name><operator>.</operator><name>y</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>maximum</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>z</name> <operator>&lt;</operator> <name><name>minimum</name><operator>.</operator><name>z</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>minimum</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name>z</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>z</name> <operator>&gt;</operator> <name><name>maximum</name><operator>.</operator><name>z</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>maximum</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name>z</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Changes the extents of the box as needed to include the given box into
     * this box. Does nothing if the parameter is &lt;code&gt;null&lt;/code&gt;.
     * 
     * @param b box to be included
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>include</name><parameter_list>(<parameter><decl><type><name>BoundingBox</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>b</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>b</name><operator>.</operator><name>minimum</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <name><name>minimum</name><operator>.</operator><name>x</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>minimum</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>minimum</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>b</name><operator>.</operator><name>maximum</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <name><name>maximum</name><operator>.</operator><name>x</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>maximum</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>maximum</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>b</name><operator>.</operator><name>minimum</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <name><name>minimum</name><operator>.</operator><name>y</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>minimum</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>minimum</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>b</name><operator>.</operator><name>maximum</name><operator>.</operator><name>y</name></name> <operator>&gt;</operator> <name><name>maximum</name><operator>.</operator><name>y</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>maximum</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>maximum</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>b</name><operator>.</operator><name>minimum</name><operator>.</operator><name>z</name></name> <operator>&lt;</operator> <name><name>minimum</name><operator>.</operator><name>z</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>minimum</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>minimum</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>b</name><operator>.</operator><name>maximum</name><operator>.</operator><name>z</name></name> <operator>&gt;</operator> <name><name>maximum</name><operator>.</operator><name>z</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>maximum</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>maximum</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"(%.2f, %.2f, %.2f) to (%.2f, %.2f, %.2f)"</literal></expr></argument>, <argument><expr><name><name>minimum</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>minimum</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>minimum</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>maximum</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>maximum</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>maximum</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class></unit>
