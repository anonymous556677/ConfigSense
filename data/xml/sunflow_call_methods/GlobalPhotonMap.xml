<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/sunflow/src/org/sunflow/core/photonmap/GlobalPhotonMap.java"><package>package <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>photonmap</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>GlobalPhotonMapInterface</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name><operator>.</operator><name>ShadingState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>image</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>BoundingBox</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Point3</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Vector3</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>system</name><operator>.</operator><name>Timer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>system</name><operator>.</operator><name>UI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>system</name><operator>.</operator><name>UI</name><operator>.</operator><name>Module</name></name>;</import>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>GlobalPhotonMap</name> <super_list><implements>implements <super><name>GlobalPhotonMapInterface</name></super></implements></super_list> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Photon</name></argument>&gt;</argument_list></name></type> <name>photonList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Photon</name><index>[]</index></name></type> <name>photons</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>storedPhotons</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>halfStoredPhotons</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>log2n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>numGather</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>gatherRadius</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>BoundingBox</name></type> <name>bounds</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>hasRadiance</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>maxPower</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>maxRadius</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>numEmit</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>GlobalPhotonMap</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>numEmit</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numGather</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>gatherRadius</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>numEmit</name></name> <operator>=</operator> <name>numEmit</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>numGather</name></name> <operator>=</operator> <name>numGather</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>gatherRadius</name></name> <operator>=</operator> <name>gatherRadius</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>bounds</name> <operator>=</operator> <operator>new</operator> <call><name>BoundingBox</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>hasRadiance</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>maxPower</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>maxRadius</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>prepare</name><parameter_list>(<parameter><decl><type><name>BoundingBox</name></type> <name>sceneBounds</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>photonList</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Photon</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>photonList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>photons</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>storedPhotons</name> <operator>=</operator> <name>halfStoredPhotons</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>store</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>power</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>diffuse</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Photon</name></type> <name>p</name> <init>= <expr><operator>new</operator> <call><name>Photon</name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getPoint</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>state</name><operator>.</operator><name>getNormal</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>power</name></expr></argument>, <argument><expr><name>diffuse</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <synchronized>synchronized <init>(<expr><name>this</name></expr>)</init> <block>{<block_content>
            <expr_stmt><expr><name>storedPhotons</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>photonList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bounds</name><operator>.</operator><name>include</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Point3</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>maxPower</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>maxPower</name></expr></argument>, <argument><expr><call><name><name>power</name><operator>.</operator><name>getMax</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></synchronized>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>locatePhotons</name><parameter_list>(<parameter><decl><type><name>NearestPhotons</name></type> <name>np</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>dist1d2</name> <init>= <expr><operator>new</operator> <name><name>float</name><index>[<expr><name>log2n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>chosen</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>log2n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>cameFrom</name></decl>;</decl_stmt>
        <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
            <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>halfStoredPhotons</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>float</name></type> <name>dist1d</name> <init>= <expr><name><name>photons</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getDist1</name><argument_list>(<argument><expr><name><name>np</name><operator>.</operator><name>px</name></name></expr></argument>, <argument><expr><name><name>np</name><operator>.</operator><name>py</name></name></expr></argument>, <argument><expr><name><name>np</name><operator>.</operator><name>pz</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>dist1d2</name><index>[<expr><name>level</name></expr>]</index></name> <operator>=</operator> <name>dist1d</name> <operator>*</operator> <name>dist1d</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>i</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>dist1d</name> <operator>&gt;</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>chosen</name><index>[<expr><name>level</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
            </block_content>}</block></while>
            <expr_stmt><expr><call><name><name>np</name><operator>.</operator><name>checkAddNearest</name></name><argument_list>(<argument><expr><name><name>photons</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <do>do <block>{<block_content>
                <expr_stmt><expr><name>cameFrom</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>i</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>level</name><operator>--</operator></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <return>return;</return></block_content></block></if></if_stmt>
            </block_content>}</block> while <condition>(<expr><operator>(</operator><name><name>dist1d2</name><index>[<expr><name>level</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>np</name><operator>.</operator><name>dist2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>cameFrom</name> <operator>!=</operator> <name><name>chosen</name><index>[<expr><name>level</name></expr>]</index></name><operator>)</operator></expr>)</condition>;</do>
            <expr_stmt><expr><call><name><name>np</name><operator>.</operator><name>checkAddNearest</name></name><argument_list>(<argument><expr><name><name>photons</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>chosen</name><index>[<expr><name>level</name><operator>++</operator></expr>]</index></name> <operator>^</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>balance</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>storedPhotons</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>photons</name> <operator>=</operator> <call><name><name>photonList</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Photon</name><index>[<expr><call><name><name>photonList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>photonList</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Photon</name><index>[]</index></name></type> <name>temp</name> <init>= <expr><operator>new</operator> <name><name>Photon</name><index>[<expr><name>storedPhotons</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>balanceSegment</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>storedPhotons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>photons</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>halfStoredPhotons</name> <operator>=</operator> <name>storedPhotons</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>log2n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>ceil</name></name><argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name>storedPhotons</name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name><name>Math</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>balanceSegment</name><parameter_list>(<parameter><decl><type><name><name>Photon</name><index>[]</index></name></type> <name>temp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>median</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>median</name><operator>)</operator> <operator>&lt;=</operator> <operator>(</operator><name>end</name> <operator>-</operator> <name>start</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>median</name> <operator>+=</operator> <name>median</name></expr>;</expr_stmt></block_content></block></while>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">3</literal> <operator>*</operator> <name>median</name><operator>)</operator> <operator>&lt;=</operator> <operator>(</operator><name>end</name> <operator>-</operator> <name>start</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>median</name> <operator>+=</operator> <name>median</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>median</name> <operator>+=</operator> <operator>(</operator><name>start</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>median</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>median</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>axis</name> <init>= <expr><name><name>Photon</name><operator>.</operator><name>SPLIT_Z</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Vector3</name></type> <name>extents</name> <init>= <expr><call><name><name>bounds</name><operator>.</operator><name>getExtents</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>extents</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <name><name>extents</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>extents</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <name><name>extents</name><operator>.</operator><name>z</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>axis</name> <operator>=</operator> <name><name>Photon</name><operator>.</operator><name>SPLIT_X</name></name></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name><name>extents</name><operator>.</operator><name>y</name></name> <operator>&gt;</operator> <name><name>extents</name><operator>.</operator><name>z</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>axis</name> <operator>=</operator> <name><name>Photon</name><operator>.</operator><name>SPLIT_Y</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>right</name> <init>= <expr><name>end</name></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>right</name> <operator>&gt;</operator> <name>left</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>double</name></type> <name>v</name> <init>= <expr><name><name>photons</name><index>[<expr><name>right</name></expr>]</index></name><operator>.</operator><call><name>getCoord</name><argument_list>(<argument><expr><name>axis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>left</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>right</name></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
                <while>while <condition>(<expr><name><name>photons</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name><operator>.</operator><call><name>getCoord</name><argument_list>(<argument><expr><name>axis</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>v</name></expr>)</condition> <block>{<block_content>
                </block_content>}</block></while>
                <while>while <condition>(<expr><operator>(</operator><name><name>photons</name><index>[<expr><operator>--</operator><name>j</name></expr>]</index></name><operator>.</operator><call><name>getCoord</name><argument_list>(<argument><expr><name>axis</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>v</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>j</name> <operator>&gt;</operator> <name>left</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                </block_content>}</block></while>
                <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>j</name></expr>)</condition><block type="pseudo"><block_content>
                    <break>break;</break></block_content></block></if></if_stmt>
                <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>median</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>right</name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <name>median</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>left</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><name><name>temp</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name><name>photons</name><index>[<expr><name>median</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>temp</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><call><name>setSplitAxis</name><argument_list>(<argument><expr><name>axis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>median</name> <operator>&gt;</operator> <name>start</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>start</name> <operator>&lt;</operator> <operator>(</operator><name>median</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>float</name></type> <name>tmp</name></decl>;</decl_stmt>
                <switch>switch <condition>(<expr><name>axis</name></expr>)</condition> <block>{<block_content>
                    <case>case <expr><name><name>Photon</name><operator>.</operator><name>SPLIT_X</name></name></expr>:</case>
                        <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name><name>bounds</name><operator>.</operator><name>getMaximum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>x</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>bounds</name><operator>.</operator><name>getMaximum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>=</operator> <name><name>temp</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>balanceSegment</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>index</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>median</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>bounds</name><operator>.</operator><name>getMaximum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
                        <break>break;</break>
                    <case>case <expr><name><name>Photon</name><operator>.</operator><name>SPLIT_Y</name></name></expr>:</case>
                        <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name><name>bounds</name><operator>.</operator><name>getMaximum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>y</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>bounds</name><operator>.</operator><name>getMaximum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>=</operator> <name><name>temp</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>balanceSegment</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>index</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>median</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>bounds</name><operator>.</operator><name>getMaximum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
                        <break>break;</break>
                    <default>default:</default>
                        <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name><name>bounds</name><operator>.</operator><name>getMaximum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>z</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>bounds</name><operator>.</operator><name>getMaximum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>z</name> <operator>=</operator> <name><name>temp</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>z</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>balanceSegment</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>index</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>median</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>bounds</name><operator>.</operator><name>getMaximum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>z</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
                </block_content>}</block></switch>
            </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>index</name></expr>]</index></name> <operator>=</operator> <name><name>photons</name><index>[<expr><name>start</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>median</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>median</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>float</name></type> <name>tmp</name></decl>;</decl_stmt>
                <switch>switch <condition>(<expr><name>axis</name></expr>)</condition> <block>{<block_content>
                    <case>case <expr><name><name>Photon</name><operator>.</operator><name>SPLIT_X</name></name></expr>:</case>
                        <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name><name>bounds</name><operator>.</operator><name>getMinimum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>x</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>bounds</name><operator>.</operator><name>getMinimum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>=</operator> <name><name>temp</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>balanceSegment</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>index</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>median</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>bounds</name><operator>.</operator><name>getMinimum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>x</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
                        <break>break;</break>
                    <case>case <expr><name><name>Photon</name><operator>.</operator><name>SPLIT_Y</name></name></expr>:</case>
                        <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name><name>bounds</name><operator>.</operator><name>getMinimum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>y</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>bounds</name><operator>.</operator><name>getMinimum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>=</operator> <name><name>temp</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>balanceSegment</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>index</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>median</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>bounds</name><operator>.</operator><name>getMinimum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>y</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
                        <break>break;</break>
                    <default>default:</default>
                        <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name><name>bounds</name><operator>.</operator><name>getMinimum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>z</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>bounds</name><operator>.</operator><name>getMinimum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>z</name> <operator>=</operator> <name><name>temp</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>z</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>balanceSegment</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>index</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>median</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>bounds</name><operator>.</operator><name>getMinimum</name></name><argument_list>()</argument_list></call><operator>.</operator><name>z</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
                </block_content>}</block></switch>
            </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>temp</name><index>[<expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>index</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>photons</name><index>[<expr><name>end</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>swap</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Photon</name></type> <name>tmp</name> <init>= <expr><name><name>photons</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>photons</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>photons</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>photons</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <class><specifier>static</specifier> class <name>Photon</name> <block>{
        <decl_stmt><decl><type><name>float</name></type> <name>x</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>y</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>z</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>short</name></type> <name>dir</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>short</name></type> <name>normal</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>data</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>power</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SPLIT_X</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SPLIT_Y</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SPLIT_Z</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SPLIT_MASK</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

        <constructor><name>Photon</name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>power</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>diffuse</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>z</name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dir</name></name> <operator>=</operator> <call><name><name>dir</name><operator>.</operator><name>encode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>power</name></name> <operator>=</operator> <call><name><name>power</name><operator>.</operator><name>toRGBE</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>normal</name> <operator>=</operator> <call><name><name>n</name><operator>.</operator><name>encode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name><name>diffuse</name><operator>.</operator><name>toRGB</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><name>void</name></type> <name>setSplitAxis</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>axis</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>SPLIT_MASK</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>axis</name></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><name>float</name></type> <name>getCoord</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>axis</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <switch>switch <condition>(<expr><name>axis</name></expr>)</condition> <block>{<block_content>
                <case>case <expr><name>SPLIT_X</name></expr>:</case>
                    <return>return <expr><name>x</name></expr>;</return>
                <case>case <expr><name>SPLIT_Y</name></expr>:</case>
                    <return>return <expr><name>y</name></expr>;</return>
                <default>default:</default>
                    <return>return <expr><name>z</name></expr>;</return>
            </block_content>}</block></switch>
        </block_content>}</block></function>

        <function><type><name>float</name></type> <name>getDist1</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>px</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>py</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>pz</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <switch>switch <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SPLIT_MASK</name></expr>)</condition> <block>{<block_content>
                <case>case <expr><name>SPLIT_X</name></expr>:</case>
                    <return>return <expr><name>px</name> <operator>-</operator> <name>x</name></expr>;</return>
                <case>case <expr><name>SPLIT_Y</name></expr>:</case>
                    <return>return <expr><name>py</name> <operator>-</operator> <name>y</name></expr>;</return>
                <default>default:</default>
                    <return>return <expr><name>pz</name> <operator>-</operator> <name>z</name></expr>;</return>
            </block_content>}</block></switch>
        </block_content>}</block></function>

        <function><type><name>float</name></type> <name>getDist2</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>px</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>py</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>pz</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>float</name></type> <name>dx</name> <init>= <expr><name>x</name> <operator>-</operator> <name>px</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>dy</name> <init>= <expr><name>y</name> <operator>-</operator> <name>py</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>dz</name> <init>= <expr><name>z</name> <operator>-</operator> <name>pz</name></expr></init></decl>;</decl_stmt>
            <return>return <expr><operator>(</operator><name>dx</name> <operator>*</operator> <name>dx</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>dy</name> <operator>*</operator> <name>dy</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>dz</name> <operator>*</operator> <name>dz</name><operator>)</operator></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"Balancing global photon map ..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>taskStart</name></name><argument_list>(<argument><expr><literal type="string">"Balancing global photon map"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Timer</name></type> <name>t</name> <init>= <expr><operator>new</operator> <call><name>Timer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>balance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>taskStop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"Global photon map:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Photons stored:   %d"</literal></expr></argument>, <argument><expr><name>storedPhotons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Photons/estimate: %d"</literal></expr></argument>, <argument><expr><name>numGather</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Estimate radius:  %.3f"</literal></expr></argument>, <argument><expr><name>gatherRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>maxRadius</name> <operator>=</operator> <literal type="number">1.4f</literal> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>sqrt</name></name><argument_list>(<argument><expr><name>maxPower</name> <operator>*</operator> <name>numGather</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Maximum radius:   %.3f"</literal></expr></argument>, <argument><expr><name>maxRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Balancing time:   %s"</literal></expr></argument>, <argument><expr><call><name><name>t</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>gatherRadius</name> <operator>&gt;</operator> <name>maxRadius</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>gatherRadius</name> <operator>=</operator> <name>maxRadius</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>precomputeRadiance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Precompute time:  %s"</literal></expr></argument>, <argument><expr><call><name><name>t</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Radiance photons: %d"</literal></expr></argument>, <argument><expr><name>storedPhotons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>LIGHT</name></name></expr></argument>, <argument><expr><literal type="string">"  * Search radius:    %.3f"</literal></expr></argument>, <argument><expr><name>gatherRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>precomputeRadiance</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>storedPhotons</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
        <comment type="line">// precompute the radiance for all photons that are neither</comment>
        <comment type="line">// leaves nor parents of leaves in the tree.</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>quadStoredPhotons</name> <init>= <expr><name>halfStoredPhotons</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Point3</name></type> <name>p</name> <init>= <expr><operator>new</operator> <call><name>Point3</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Vector3</name></type> <name>n</name> <init>= <expr><operator>new</operator> <call><name>Vector3</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Point3</name></type> <name>ppos</name> <init>= <expr><operator>new</operator> <call><name>Point3</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Vector3</name></type> <name>pdir</name> <init>= <expr><operator>new</operator> <call><name>Vector3</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Vector3</name></type> <name>pvec</name> <init>= <expr><operator>new</operator> <call><name>Vector3</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Color</name></type> <name>irr</name> <init>= <expr><operator>new</operator> <call><name>Color</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Color</name></type> <name>pow</name> <init>= <expr><operator>new</operator> <call><name>Color</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>maxDist2</name> <init>= <expr><name>gatherRadius</name> <operator>*</operator> <name>gatherRadius</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>NearestPhotons</name></type> <name>np</name> <init>= <expr><operator>new</operator> <call><name>NearestPhotons</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>numGather</name></expr></argument>, <argument><expr><name>maxDist2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Photon</name><index>[]</index></name></type> <name>temp</name> <init>= <expr><operator>new</operator> <name><name>Photon</name><index>[<expr><name>quadStoredPhotons</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>taskStart</name></name><argument_list>(<argument><expr><literal type="string">"Precomputing radiance"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>quadStoredPhotons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>quadStoredPhotons</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>taskUpdate</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Photon</name></type> <name>curr</name> <init>= <expr><name><name>photons</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>curr</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>curr</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>curr</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Vector3</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><name><name>curr</name><operator>.</operator><name>normal</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>irr</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>BLACK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>np</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>maxDist2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>locatePhotons</name><argument_list>(<argument><expr><name>np</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>np</name><operator>.</operator><name>found</name></name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>curr</name><operator>.</operator><name>data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>curr</name></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>invArea</name> <init>= <expr><literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name> <operator>*</operator> <name><name>np</name><operator>.</operator><name>dist2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>maxNDist</name> <init>= <expr><name><name>np</name><operator>.</operator><name>dist2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <literal type="number">0.05f</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name><name>np</name><operator>.</operator><name>found</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Photon</name></type> <name>phot</name> <init>= <expr><name><name>np</name><operator>.</operator><name>index</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>Vector3</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><name><name>phot</name><operator>.</operator><name>dir</name></name></expr></argument>, <argument><expr><name>pdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>float</name></type> <name>cos</name> <init>= <expr><operator>-</operator><call><name><name>Vector3</name><operator>.</operator><name>dot</name></name><argument_list>(<argument><expr><name>pdir</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>cos</name> <operator>&gt;</operator> <literal type="number">0.01f</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>ppos</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>phot</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>phot</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>phot</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>Point3</name><operator>.</operator><name>sub</name></name><argument_list>(<argument><expr><name>ppos</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>pvec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>float</name></type> <name>pcos</name> <init>= <expr><call><name><name>Vector3</name><operator>.</operator><name>dot</name></name><argument_list>(<argument><expr><name>pvec</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pcos</name> <operator>&lt;</operator> <name>maxNDist</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>pcos</name> <operator>&gt;</operator> <operator>-</operator><name>maxNDist</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name><name>irr</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>pow</name><operator>.</operator><name>setRGBE</name></name><argument_list>(<argument><expr><name><name>phot</name><operator>.</operator><name>power</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name><name>irr</name><operator>.</operator><name>mul</name></name><argument_list>(<argument><expr><name>invArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// compute radiance</comment>
            <expr_stmt><expr><call><name><name>irr</name><operator>.</operator><name>mul</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Color</name><argument_list>(<argument><expr><name><name>curr</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>mul</name><argument_list>(<argument><expr><literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>curr</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name><name>irr</name><operator>.</operator><name>toRGBE</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>curr</name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>taskStop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// resize photon map to only include irradiance photons</comment>
        <expr_stmt><expr><name>numGather</name> <operator>/=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>maxRadius</name> <operator>=</operator> <literal type="number">1.4f</literal> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>sqrt</name></name><argument_list>(<argument><expr><name>maxPower</name> <operator>*</operator> <name>numGather</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>gatherRadius</name> <operator>&gt;</operator> <name>maxRadius</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>gatherRadius</name> <operator>=</operator> <name>maxRadius</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>storedPhotons</name> <operator>=</operator> <name>quadStoredPhotons</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>halfStoredPhotons</name> <operator>=</operator> <name>storedPhotons</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>log2n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>ceil</name></name><argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name>storedPhotons</name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name><name>Math</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>photons</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>hasRadiance</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Color</name></type> <name>getRadiance</name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasRadiance</name> <operator>||</operator> <operator>(</operator><name>storedPhotons</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name><name>Color</name><operator>.</operator><name>BLACK</name></name></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>px</name> <init>= <expr><name><name>p</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>py</name> <init>= <expr><name><name>p</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>pz</name> <init>= <expr><name><name>p</name><operator>.</operator><name>z</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>cameFrom</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>dist2</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>maxDist2</name> <init>= <expr><name>gatherRadius</name> <operator>*</operator> <name>gatherRadius</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Photon</name></type> <name>nearest</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Photon</name></type> <name>curr</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Vector3</name></type> <name>photN</name> <init>= <expr><operator>new</operator> <call><name>Vector3</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>dist1d2</name> <init>= <expr><operator>new</operator> <name><name>float</name><index>[<expr><name>log2n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>chosen</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>log2n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
            <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>halfStoredPhotons</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>float</name></type> <name>dist1d</name> <init>= <expr><name><name>photons</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getDist1</name><argument_list>(<argument><expr><name>px</name></expr></argument>, <argument><expr><name>py</name></expr></argument>, <argument><expr><name>pz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>dist1d2</name><index>[<expr><name>level</name></expr>]</index></name> <operator>=</operator> <name>dist1d</name> <operator>*</operator> <name>dist1d</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>i</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>dist1d</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>chosen</name><index>[<expr><name>level</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
            </block_content>}</block></while>
            <expr_stmt><expr><name>curr</name> <operator>=</operator> <name><name>photons</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>dist2</name> <operator>=</operator> <call><name><name>curr</name><operator>.</operator><name>getDist2</name></name><argument_list>(<argument><expr><name>px</name></expr></argument>, <argument><expr><name>py</name></expr></argument>, <argument><expr><name>pz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>dist2</name> <operator>&lt;</operator> <name>maxDist2</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>Vector3</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><name><name>curr</name><operator>.</operator><name>normal</name></name></expr></argument>, <argument><expr><name>photN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>float</name></type> <name>currentDotN</name> <init>= <expr><call><name><name>Vector3</name><operator>.</operator><name>dot</name></name><argument_list>(<argument><expr><name>photN</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>currentDotN</name> <operator>&gt;</operator> <literal type="number">0.9f</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>nearest</name> <operator>=</operator> <name>curr</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>maxDist2</name> <operator>=</operator> <name>dist2</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <do>do <block>{<block_content>
                <expr_stmt><expr><name>cameFrom</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>i</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>level</name><operator>--</operator></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><ternary><condition><expr><operator>(</operator><name>nearest</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>Color</name><operator>.</operator><name>BLACK</name></name></expr> </then><else>: <expr><operator>new</operator> <call><name>Color</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setRGBE</name><argument_list>(<argument><expr><name><name>nearest</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block> while <condition>(<expr><operator>(</operator><name><name>dist1d2</name><index>[<expr><name>level</name></expr>]</index></name> <operator>&gt;=</operator> <name>maxDist2</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>cameFrom</name> <operator>!=</operator> <name><name>chosen</name><index>[<expr><name>level</name></expr>]</index></name><operator>)</operator></expr>)</condition>;</do>
            <expr_stmt><expr><name>curr</name> <operator>=</operator> <name><name>photons</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>dist2</name> <operator>=</operator> <call><name><name>curr</name><operator>.</operator><name>getDist2</name></name><argument_list>(<argument><expr><name>px</name></expr></argument>, <argument><expr><name>py</name></expr></argument>, <argument><expr><name>pz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>dist2</name> <operator>&lt;</operator> <name>maxDist2</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>Vector3</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><name><name>curr</name><operator>.</operator><name>normal</name></name></expr></argument>, <argument><expr><name>photN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>float</name></type> <name>currentDotN</name> <init>= <expr><call><name><name>Vector3</name><operator>.</operator><name>dot</name></name><argument_list>(<argument><expr><name>photN</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>currentDotN</name> <operator>&gt;</operator> <literal type="number">0.9f</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>nearest</name> <operator>=</operator> <name>curr</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>maxDist2</name> <operator>=</operator> <name>dist2</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>chosen</name><index>[<expr><name>level</name><operator>++</operator></expr>]</index></name> <operator>^</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></function>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>NearestPhotons</name> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>found</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>px</name></decl>, <decl><type ref="prev"/><name>py</name></decl>, <decl><type ref="prev"/><name>pz</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>max</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>gotHeap</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>protected</specifier> <name><name>float</name><index>[]</index></name></type> <name>dist2</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Photon</name><index>[]</index></name></type> <name>index</name></decl>;</decl_stmt>

        <constructor><name>NearestPhotons</name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>maxDist2</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>max</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>gotHeap</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>px</name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>py</name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>pz</name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>dist2</name> <operator>=</operator> <operator>new</operator> <name><name>float</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>index</name> <operator>=</operator> <operator>new</operator> <name><name>Photon</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>dist2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>maxDist2</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><name>void</name></type> <name>reset</name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>maxDist2</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>gotHeap</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>px</name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>py</name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>pz</name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>z</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>dist2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>maxDist2</name></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><name>void</name></type> <name>checkAddNearest</name><parameter_list>(<parameter><decl><type><name>Photon</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>float</name></type> <name>fdist2</name> <init>= <expr><call><name><name>p</name><operator>.</operator><name>getDist2</name></name><argument_list>(<argument><expr><name>px</name></expr></argument>, <argument><expr><name>py</name></expr></argument>, <argument><expr><name>pz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>fdist2</name> <operator>&lt;</operator> <name><name>dist2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>found</name> <operator>&lt;</operator> <name>max</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>found</name><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>dist2</name><index>[<expr><name>found</name></expr>]</index></name> <operator>=</operator> <name>fdist2</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>index</name><index>[<expr><name>found</name></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>parent</name></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>gotHeap</name></expr>)</condition> <block>{<block_content>
                        <decl_stmt><decl><type><name>float</name></type> <name>dst2</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Photon</name></type> <name>phot</name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>halfFound</name> <init>= <expr><name>found</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                        <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name>halfFound</name></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>k</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
                            <expr_stmt><expr><name>parent</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name>phot</name> <operator>=</operator> <name><name>index</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
                            <expr_stmt><expr><name>dst2</name> <operator>=</operator> <name><name>dist2</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
                            <while>while <condition>(<expr><name>parent</name> <operator>&lt;=</operator> <name>halfFound</name></expr>)</condition> <block>{<block_content>
                                <expr_stmt><expr><name>j</name> <operator>=</operator> <name>parent</name> <operator>+</operator> <name>parent</name></expr>;</expr_stmt>
                                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>j</name> <operator>&lt;</operator> <name>found</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>dist2</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;</operator> <name><name>dist2</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                                    <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
                                <if_stmt><if>if <condition>(<expr><name>dst2</name> <operator>&gt;=</operator> <name><name>dist2</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
                                    <break>break;</break></block_content></block></if></if_stmt>
                                <expr_stmt><expr><name><name>dist2</name><index>[<expr><name>parent</name></expr>]</index></name> <operator>=</operator> <name><name>dist2</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
                                <expr_stmt><expr><name><name>index</name><index>[<expr><name>parent</name></expr>]</index></name> <operator>=</operator> <name><name>index</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
                                <expr_stmt><expr><name>parent</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
                            </block_content>}</block></while>
                            <expr_stmt><expr><name><name>dist2</name><index>[<expr><name>parent</name></expr>]</index></name> <operator>=</operator> <name>dst2</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>index</name><index>[<expr><name>parent</name></expr>]</index></name> <operator>=</operator> <name>phot</name></expr>;</expr_stmt>
                        </block_content>}</block></for>
                        <expr_stmt><expr><name>gotHeap</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>parent</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
                    <while>while <condition>(<expr><name>j</name> <operator>&lt;=</operator> <name>found</name></expr>)</condition> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>j</name> <operator>&lt;</operator> <name>found</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>dist2</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;</operator> <name><name>dist2</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
                        <if_stmt><if>if <condition>(<expr><name>fdist2</name> <operator>&gt;</operator> <name><name>dist2</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
                            <break>break;</break></block_content></block></if></if_stmt>
                        <expr_stmt><expr><name><name>dist2</name><index>[<expr><name>parent</name></expr>]</index></name> <operator>=</operator> <name><name>dist2</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>index</name><index>[<expr><name>parent</name></expr>]</index></name> <operator>=</operator> <name><name>index</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>parent</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>j</name> <operator>+=</operator> <name>j</name></expr>;</expr_stmt>
                    </block_content>}</block></while>
                    <expr_stmt><expr><name><name>dist2</name><index>[<expr><name>parent</name></expr>]</index></name> <operator>=</operator> <name>fdist2</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>index</name><index>[<expr><name>parent</name></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>dist2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>dist2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></function>
    }</block></class>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>allowDiffuseBounced</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>allowReflectionBounced</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>allowRefractionBounced</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>numEmit</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>numEmit</name></expr>;</return>
    </block_content>}</block></function>
}</block></class></unit>
