<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/sunflow/src/org/sunflow/core/Texture.java"><package>package <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>image</name><operator>.</operator><name>Bitmap</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>image</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>OrthoNormalBasis</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Vector3</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>system</name><operator>.</operator><name>UI</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>system</name><operator>.</operator><name>UI</name><operator>.</operator><name>Module</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Represents a 2D texture, typically used by {@link Shader shaders}.
 */</comment>
<class><specifier>public</specifier> class <name>Texture</name> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>filename</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>isLinear</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Bitmap</name></type> <name>bitmap</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>loaded</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Creates a new texture from the specfied file.
     * 
     * @param filename image file to load
     */</comment>
    <constructor><name>Texture</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isLinear</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>filename</name></name> <operator>=</operator> <name>filename</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isLinear</name></name> <operator>=</operator> <name>isLinear</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>loaded</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>private</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>load</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>loaded</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printInfo</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>TEX</name></name></expr></argument>, <argument><expr><literal type="string">"Reading texture bitmap from: \"%s\" ..."</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>bitmap</name> <operator>=</operator> <operator>new</operator> <call><name>Bitmap</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>isLinear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>bitmap</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name><name>bitmap</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>bitmap</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>UI</name><operator>.</operator><name>printError</name></name><argument_list>(<argument><expr><name><name>Module</name><operator>.</operator><name>TEX</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
        <expr_stmt><expr><name>loaded</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Bitmap</name></type> <name>getBitmap</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>loaded</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>load</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><name>bitmap</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets the color at location (x,y) in the texture. The lookup is performed
     * using the fractional component of the coordinates, treating the texture
     * as a unit square tiled in both directions. Bicubic filtering is performed
     * on the four nearest pixels to the lookup point.
     * 
     * @param x x coordinate into the texture
     * @param y y coordinate into the texture
     * @return filtered color at location (x,y)
     */</comment>
    <function><type><specifier>public</specifier> <name>Color</name></type> <name>getPixel</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Bitmap</name></type> <name>bitmap</name> <init>= <expr><call><name>getBitmap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>bitmap</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name><name>Color</name><operator>.</operator><name>BLACK</name></name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <name>y</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>y</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>x</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>y</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>dx</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <name>x</name> <operator>*</operator> <operator>(</operator><call><name><name>bitmap</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>dy</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <name>y</name> <operator>*</operator> <operator>(</operator><call><name><name>bitmap</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>ix0</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name>dx</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>iy0</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name>dy</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>ix1</name> <init>= <expr><operator>(</operator><name>ix0</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <call><name><name>bitmap</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>iy1</name> <init>= <expr><operator>(</operator><name>iy0</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <call><name><name>bitmap</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>u</name> <init>= <expr><name>dx</name> <operator>-</operator> <name>ix0</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>v</name> <init>= <expr><name>dy</name> <operator>-</operator> <name>iy0</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>u</name> <operator>=</operator> <name>u</name> <operator>*</operator> <name>u</name> <operator>*</operator> <operator>(</operator><literal type="number">3.0f</literal> <operator>-</operator> <operator>(</operator><literal type="number">2.0f</literal> <operator>*</operator> <name>u</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>v</name> <operator>=</operator> <name>v</name> <operator>*</operator> <name>v</name> <operator>*</operator> <operator>(</operator><literal type="number">3.0f</literal> <operator>-</operator> <operator>(</operator><literal type="number">2.0f</literal> <operator>*</operator> <name>v</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>k00</name> <init>= <expr><operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <name>u</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <name>v</name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Color</name></type> <name>c00</name> <init>= <expr><call><name><name>bitmap</name><operator>.</operator><name>getPixel</name></name><argument_list>(<argument><expr><name>ix0</name></expr></argument>, <argument><expr><name>iy0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>k01</name> <init>= <expr><operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <name>u</name><operator>)</operator> <operator>*</operator> <name>v</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Color</name></type> <name>c01</name> <init>= <expr><call><name><name>bitmap</name><operator>.</operator><name>getPixel</name></name><argument_list>(<argument><expr><name>ix0</name></expr></argument>, <argument><expr><name>iy1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>k10</name> <init>= <expr><name>u</name> <operator>*</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <name>v</name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Color</name></type> <name>c10</name> <init>= <expr><call><name><name>bitmap</name><operator>.</operator><name>getPixel</name></name><argument_list>(<argument><expr><name>ix1</name></expr></argument>, <argument><expr><name>iy0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>k11</name> <init>= <expr><name>u</name> <operator>*</operator> <name>v</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Color</name></type> <name>c11</name> <init>= <expr><call><name><name>bitmap</name><operator>.</operator><name>getPixel</name></name><argument_list>(<argument><expr><name>ix1</name></expr></argument>, <argument><expr><name>iy1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Color</name></type> <name>c</name> <init>= <expr><call><name><name>Color</name><operator>.</operator><name>mul</name></name><argument_list>(<argument><expr><name>k00</name></expr></argument>, <argument><expr><name>c00</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>madd</name></name><argument_list>(<argument><expr><name>k01</name></expr></argument>, <argument><expr><name>c01</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>madd</name></name><argument_list>(<argument><expr><name>k10</name></expr></argument>, <argument><expr><name>c10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>madd</name></name><argument_list>(<argument><expr><name>k11</name></expr></argument>, <argument><expr><name>c11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>c</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Vector3</name></type> <name>getNormal</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>OrthoNormalBasis</name></type> <name>basis</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>rgb</name> <init>= <expr><call><name>getPixel</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getRGB</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>basis</name><operator>.</operator><name>transform</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Vector3</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>rgb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>rgb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>rgb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>normalize</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Vector3</name></type> <name>getBump</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>OrthoNormalBasis</name></type> <name>basis</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Bitmap</name></type> <name>bitmap</name> <init>= <expr><call><name>getBitmap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>bitmap</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>basis</name><operator>.</operator><name>transform</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Vector3</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>dx</name> <init>= <expr><literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><call><name><name>bitmap</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>dy</name> <init>= <expr><literal type="number">1.0f</literal> <operator>/</operator> <operator>(</operator><call><name><name>bitmap</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>b0</name> <init>= <expr><call><name>getPixel</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getLuminance</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>bx</name> <init>= <expr><call><name>getPixel</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>dx</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getLuminance</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>by</name> <init>= <expr><call><name>getPixel</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>dy</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getLuminance</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>basis</name><operator>.</operator><name>transform</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Vector3</name><argument_list>(<argument><expr><name>scale</name> <operator>*</operator> <operator>(</operator><name>bx</name> <operator>-</operator> <name>b0</name><operator>)</operator> <operator>/</operator> <name>dx</name></expr></argument>, <argument><expr><name>scale</name> <operator>*</operator> <operator>(</operator><name>by</name> <operator>-</operator> <name>b0</name><operator>)</operator> <operator>/</operator> <name>dy</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>normalize</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class></unit>
