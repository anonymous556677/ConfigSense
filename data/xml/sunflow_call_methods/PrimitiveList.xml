<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/sunflow/src/org/sunflow/core/PrimitiveList.java"><package>package <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>BoundingBox</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>math</name><operator>.</operator><name>Matrix4</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class represents an object made up of many primitives.
 */</comment>
<interface><specifier>public</specifier> interface <name>PrimitiveList</name> <super_list><extends>extends <super><name>RenderObject</name></super></extends></super_list> <block>{
    <comment type="block" format="javadoc">/**
     * Compute a bounding box of this object in world space, using the specified
     * object-to-world transformation matrix. The bounds should be as exact as
     * possible, if they are difficult or expensive to compute exactly, you may
     * use {@link Matrix4#transform(BoundingBox)}. If the matrix is
     * &lt;code&gt;null&lt;/code&gt; no transformation is needed, and object space is
     * equivalent to world space.
     * 
     * @param o2w object to world transformation matrix
     * @return object bounding box in world space
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>BoundingBox</name></type> <name>getWorldBounds</name><parameter_list>(<parameter><decl><type><name>Matrix4</name></type> <name>o2w</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns the number of individual primtives in this aggregate object.
     * 
     * @return number of primitives
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>int</name></type> <name>getNumPrimitives</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Retrieve the bounding box component of a particular primitive in object
     * space.
     * 
     * @param primID primitive index
     * @param i bounding box side index
     * @return value of the request bound
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>float</name></type> <name>getPrimitiveBound</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>primID</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Intersect the specified primitive in local space.
     * 
     * @param r ray in the object's local space
     * @param parent instance currently being intersected
     * @param primID primitive index to intersect
     * @param state intersection state
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>intersectPrimitive</name><parameter_list>(<parameter><decl><type><name>Ray</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>primID</name></decl></parameter>, <parameter><decl><type><name>IntersectionState</name></type> <name>state</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Prepare the specified {@link ShadingState} by setting all of its internal
     * parameters. The provided instance can be used to transform between object
     * and world space.
     * 
     * @param parent instance which was hit
     * @param primID primitive index which was hit
     * @param state shading state to fill in
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>prepareShadingState</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>state</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Create a new {@link PrimitiveList} object suitable for baking lightmaps.
     * This usually means a set of primitives laid out in the unit square UV
     * space. This method is optional, object which do not support it should
     * simply return &lt;code&gt;null&lt;/code&gt;.
     * 
     * @return a baking {@link PrimitiveList}
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>PrimitiveList</name></type> <name>getBakingPrimitives</name><parameter_list>()</parameter_list>;</function_decl>
}</block></interface></unit>
