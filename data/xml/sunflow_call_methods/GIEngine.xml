<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/sunflow/src/org/sunflow/core/GIEngine.java"><package>package <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>core</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>image</name><operator>.</operator><name>Color</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This represents a global illumination algorithm. It provides an interface to
 * compute indirect diffuse bounces of light and make those results available to
 * shaders.
 */</comment>
<interface><specifier>public</specifier> interface <name>GIEngine</name> <block>{
    <comment type="block" format="javadoc">/**
     * This is an optional method for engines that contain a secondary
     * illumination engine which can return an approximation of the global
     * radiance in the scene (like a photon map). Engines can safely return
     * &lt;code&gt;Color.BLACK&lt;/code&gt; if they can't or don't wish to support this.
     * 
     * @param state shading state
     * @return color approximating global radiance
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>Color</name></type> <name>getGlobalRadiance</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>state</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Initialize the engine. This is called before rendering begins.
     * 
     * @return &lt;code&gt;true&lt;/code&gt; if the init phase succeeded,
     *         &lt;code&gt;false&lt;/code&gt; otherwise
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>boolean</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>Scene</name></type> <name>scene</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Return the incomming irradiance due to indirect diffuse illumination at
     * the specified surface point.
     * 
     * @param state current render state describing the point to be computed
     * @return irradiance from indirect diffuse illumination at the specified
     *         point
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>Color</name></type> <name>getIrradiance</name><parameter_list>(<parameter><decl><type><name>ShadingState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>diffuseReflectance</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></interface></unit>
