<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/sunflow/src/org/sunflow/system/Timer.java"><package>package <name><name>org</name><operator>.</operator><name>sunflow</name><operator>.</operator><name>system</name></name>;</package>

<class><specifier>public</specifier> class <name>Timer</name> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>startTime</name></decl>, <decl><type ref="prev"/><name>endTime</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>Timer</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>startTime</name> <operator>=</operator> <name>endTime</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>start</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>startTime</name> <operator>=</operator> <name>endTime</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>end</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>endTime</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>nanos</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>endTime</name> <operator>-</operator> <name>startTime</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>double</name></type> <name>seconds</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>endTime</name> <operator>-</operator> <name>startTime</name><operator>)</operator> <operator>*</operator> <literal type="number">1e-9</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>toString</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>nanos</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Timer</name></type> <name>t</name> <init>= <expr><operator>new</operator> <call><name>Timer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>t</name><operator>.</operator><name>endTime</name></name> <operator>=</operator> <name>nanos</name></expr>;</expr_stmt>
        <return>return <expr><call><name><name>t</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>toString</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>seconds</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Timer</name></type> <name>t</name> <init>= <expr><operator>new</operator> <call><name>Timer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>t</name><operator>.</operator><name>endTime</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><name>seconds</name> <operator>*</operator> <literal type="number">1e9</literal><operator>)</operator></expr>;</expr_stmt>
        <return>return <expr><call><name><name>t</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>millis</name> <init>= <expr><call><name>nanos</name><argument_list>()</argument_list></call> <operator>/</operator> <operator>(</operator><literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>millis</name> <operator>&lt;</operator> <literal type="number">10000</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%dms"</literal></expr></argument>, <argument><expr><name>millis</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>hours</name> <init>= <expr><name>millis</name> <operator>/</operator> <operator>(</operator><literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>millis</name> <operator>-=</operator> <name>hours</name> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>minutes</name> <init>= <expr><name>millis</name> <operator>/</operator> <operator>(</operator><literal type="number">60</literal> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>millis</name> <operator>-=</operator> <name>minutes</name> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>seconds</name> <init>= <expr><name>millis</name> <operator>/</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>millis</name> <operator>-=</operator> <name>seconds</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
        <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%d:%02d:%02d.%1d"</literal></expr></argument>, <argument><expr><name>hours</name></expr></argument>, <argument><expr><name>minutes</name></expr></argument>, <argument><expr><name>seconds</name></expr></argument>, <argument><expr><name>millis</name> <operator>/</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class></unit>
