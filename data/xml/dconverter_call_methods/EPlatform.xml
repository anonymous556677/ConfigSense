<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/density-converter/src/main/java/at/favre/tools/dconvert/arg/EPlatform.java"><comment type="block">/*
 *  Copyright 2016 Patrick Favre-Bulle
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>arg</name></name>;</package>

<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>converters</name><operator>.</operator><name>*</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Collectors</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Defines platforms to convert to
 */</comment>
<enum><specifier>public</specifier> enum <name>EPlatform</name> <block>{
    <decl><name>ANDROID</name><argument_list>(<argument><expr><operator>new</operator> <call><name>AndroidConverter</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>,
    <decl><name>IOS</name><argument_list>(<argument><expr><operator>new</operator> <call><name>IOSConverter</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>,
    <decl><name>WINDOWS</name><argument_list>(<argument><expr><operator>new</operator> <call><name>WindowsConverter</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>,
    <decl><name>WEB</name><argument_list>(<argument><expr><operator>new</operator> <call><name>WebConverter</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>IPlatformConverter</name></type> <name>converter</name></decl>;</decl_stmt>

    <constructor><name>EPlatform</name><parameter_list>(<parameter><decl><type><name>IPlatformConverter</name></type> <name>converter</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>converter</name></name> <operator>=</operator> <name>converter</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>IPlatformConverter</name></type> <name>getConverter</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>converter</name></expr>;</return>
    </block_content>}</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>EPlatform</name></argument>&gt;</argument_list></name></type> <name>ALL</name></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>EPlatform</name></argument>&gt;</argument_list></name></type> <name>getAll</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>ALL</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>EPlatform</name></argument>&gt;</argument_list></name></type> <name>temp</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>EPlatform</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>EPlatform</name></type> <name>ePlatform</name> <range>: <expr><call><name><name>EPlatform</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>temp</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>ePlatform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name>ALL</name> <operator>=</operator> <call><name><name>Collections</name><operator>.</operator><name>unmodifiableSet</name></name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>ALL</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>IPlatformConverter</name></argument>&gt;</argument_list></name></type> <name>getAllConverters</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getAll</name><argument_list>()</argument_list></call><operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>EPlatform</name><operator>::</operator><name>getConverter</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></enum>
</unit>
