<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/density-converter/src/main/java/at/favre/tools/dconvert/converters/scaling/ImageHandler.java"><comment type="block">/*
 *  Copyright 2016 Patrick Favre-Bulle
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>converters</name><operator>.</operator><name>scaling</name></name>;</package>

<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>arg</name><operator>.</operator><name>Arguments</name></name>;</import>
<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>arg</name><operator>.</operator><name>EScalingAlgorithm</name></name>;</import>
<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>arg</name><operator>.</operator><name>ImageType</name></name>;</import>
<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>util</name><operator>.</operator><name>LoadedImage</name></name>;</import>
<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>util</name><operator>.</operator><name>MiscUtil</name></name>;</import>
<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>util</name><operator>.</operator><name>NinePatchScaler</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>twelvemonkeys</name><operator>.</operator><name>imageio</name><operator>.</operator><name>metadata</name><operator>.</operator><name>CompoundDirectory</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>imageio</name><operator>.</operator><name>IIOImage</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>imageio</name><operator>.</operator><name>ImageIO</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>imageio</name><operator>.</operator><name>ImageWriteParam</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>imageio</name><operator>.</operator><name>ImageWriter</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>imageio</name><operator>.</operator><name>stream</name><operator>.</operator><name>FileImageOutputStream</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>imageio</name><operator>.</operator><name>stream</name><operator>.</operator><name>ImageOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>BufferedImage</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>ConvolveOp</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>Kernel</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Collectors</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Handles scaling and writing/compression images to disk
 */</comment>
<class><specifier>public</specifier> class <name>ImageHandler</name> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Color</name></type> <name>DEFAULT_COLOR</name> <init>= <expr><name><name>Color</name><operator>.</operator><name>white</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>TEST_MODE</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ConvolveOp</name></type> <name>OP_ANTIALIAS</name> <init>= <expr><operator>new</operator> <call><name>ConvolveOp</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Kernel</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>float</name><index>[]</index></name><block>{<expr><literal type="number">.0f</literal></expr>, <expr><literal type="number">.08f</literal></expr>, <expr><literal type="number">.0f</literal></expr>, <expr><literal type="number">.08f</literal></expr>, <expr><literal type="number">.68f</literal></expr>, <expr><literal type="number">.08f</literal></expr>, <expr><literal type="number">.0f</literal></expr>, <expr><literal type="number">.08f</literal></expr>, <expr><literal type="number">.0f</literal></expr>}</block></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ConvolveOp</name><operator>.</operator><name>EDGE_NO_OP</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>ScaleAlgorithm</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>traceMap</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Arguments</name></type> <name>args</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ImageHandler</name><parameter_list>(<parameter><decl><type><name>Arguments</name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>args</name></name> <operator>=</operator> <name>args</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>saveToFile</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>targetFile</name></decl></parameter>, <parameter><decl><type><name>LoadedImage</name></type> <name>imageData</name></decl></parameter>, <parameter><decl><type><name>Dimension</name></type> <name>targetDimension</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isNinePatch</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>files</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>ImageType</name><operator>.</operator><name>ECompression</name></name></argument>&gt;</argument_list></name></type> <name>compressionList</name> <init>= <expr><call><name><name>Arguments</name><operator>.</operator><name>getOutCompressionForType</name></name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>outputCompressionMode</name></name></expr></argument>, <argument><expr><call><name><name>Arguments</name><operator>.</operator><name>getImageType</name></name><argument_list>(<argument><expr><call><name><name>imageData</name><operator>.</operator><name>getSourceFile</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>ImageType</name><operator>.</operator><name>ECompression</name></name></type> <name>compression</name> <range>: <expr><name>compressionList</name></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>File</name></type> <name>imageFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>targetFile</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"."</literal> <operator>+</operator> <name><name>compression</name><operator>.</operator><name>extension</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>imageFile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>args</name><operator>.</operator><name>skipExistingFiles</name></name></expr>)</condition> <block>{<block_content>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ScaleAlgorithm</name></argument>&gt;</argument_list></name></type> <name>algorithms</name> <init>= <expr><call><name>getScaleAlgorithm</name><argument_list>(<argument><expr><call><name>getScalingAlgorithm</name><argument_list>(<argument><expr><call><name>getScalingType</name><argument_list>(<argument><expr><name>imageData</name></expr></argument>, <argument><expr><name>targetDimension</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getScalingType</name><argument_list>(<argument><expr><name>imageData</name></expr></argument>, <argument><expr><name>targetDimension</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name>ScaleAlgorithm</name></type> <name>scaleAlgorithm</name> <range>: <expr><name>algorithms</name></expr></range></decl></init>)</control> <block>{<block_content>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>traceMap</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>scaleAlgorithm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>traceMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>scaleAlgorithm</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <decl_stmt><decl><type><name>BufferedImage</name></type> <name>scaledImage</name></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>isNinePatch</name> <operator>&amp;&amp;</operator> <name>compression</name> <operator>==</operator> <name><name>ImageType</name><operator>.</operator><name>ECompression</name><operator>.</operator><name>PNG</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>scaledImage</name> <operator>=</operator> <operator>new</operator> <call><name>NinePatchScaler</name><argument_list>()</argument_list></call><operator>.</operator><call><name>scale</name><argument_list>(<argument><expr><call><name><name>imageData</name><operator>.</operator><name>getImage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>targetDimension</name></expr></argument>, <argument><expr><call><name>getAsScalingAlgorithm</name><argument_list>(<argument><expr><name>scaleAlgorithm</name></expr></argument>, <argument><expr><name>compression</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <decl_stmt><decl><type><name>long</name></type> <name>startNanos</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>scaledImage</name> <operator>=</operator> <call><name>scale</name><argument_list>(<argument><expr><name>scaleAlgorithm</name></expr></argument>, <argument><expr><call><name><name>imageData</name><operator>.</operator><name>getImage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>targetDimension</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>targetDimension</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name>compression</name></expr></argument>, <argument><expr><name>DEFAULT_COLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>traceMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>scaleAlgorithm</name></expr></argument>, <argument><expr><call><name><name>traceMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>scaleAlgorithm</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>startNanos</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>

                <decl_stmt><decl><type><name>File</name></type> <name>fileToSave</name> <init>= <expr><name>imageFile</name></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><call><name><name>algorithms</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>fileToSave</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>imageFile</name><operator>.</operator><name>getParentFile</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>MiscUtil</name><operator>.</operator><name>getFileNameWithoutExtension</name></name><argument_list>(<argument><expr><name>imageFile</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"."</literal> <operator>+</operator> <call><name><name>scaleAlgorithm</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"."</literal> <operator>+</operator> <call><name><name>MiscUtil</name><operator>.</operator><name>getFileExtension</name></name><argument_list>(<argument><expr><name>imageFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><name>compression</name> <operator>==</operator> <name><name>ImageType</name><operator>.</operator><name>ECompression</name><operator>.</operator><name>JPG</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>compressJpeg</name><argument_list>(<argument><expr><name>scaledImage</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>compressionQuality</name></name></expr></argument>, <argument><expr><name>fileToSave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name><name>ImageIO</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>scaledImage</name></expr></argument>, <argument><expr><call><name><name>compression</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>fileToSave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><call><name><name>scaledImage</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>files</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>imageFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <return>return <expr><name>files</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>compressJpeg</name><parameter_list>(<parameter><decl><type><name>BufferedImage</name></type> <name>bufferedImage</name></decl></parameter>, <parameter><decl><type><name>CompoundDirectory</name></type> <name>exif</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>quality</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>targetFile</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>ImageWriter</name></type> <name>jpgWriter</name> <init>= <expr><call><name><name>ImageIO</name><operator>.</operator><name>getImageWritersByFormatName</name></name><argument_list>(<argument><expr><literal type="string">"jpg"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>next</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ImageWriteParam</name></type> <name>jpgWriteParam</name> <init>= <expr><call><name><name>jpgWriter</name><operator>.</operator><name>getDefaultWriteParam</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>jpgWriteParam</name><operator>.</operator><name>setCompressionMode</name></name><argument_list>(<argument><expr><name><name>ImageWriteParam</name><operator>.</operator><name>MODE_EXPLICIT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>jpgWriteParam</name><operator>.</operator><name>setCompressionQuality</name></name><argument_list>(<argument><expr><name>quality</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ImageWriter</name></type> <name>writer</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <init>(<decl><type><name>ImageOutputStream</name></type> <name>outputStream</name> <init>= <expr><operator>new</operator> <call><name>FileImageOutputStream</name><argument_list>(<argument><expr><name>targetFile</name></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{<block_content>
            <expr_stmt><expr><name>writer</name> <operator>=</operator> <call><name><name>ImageIO</name><operator>.</operator><name>getImageWritersByFormatName</name></name><argument_list>(<argument><expr><literal type="string">"jpg"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>next</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>setOutput</name></name><argument_list>(<argument><expr><name>outputStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>IIOImage</name><argument_list>(<argument><expr><name>bufferedImage</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>jpgWriteParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <finally>finally <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>writer</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>EScalingAlgorithm</name></type> <name>getScalingAlgorithm</name><parameter_list>(<parameter><decl><type><name><name>EScalingAlgorithm</name><operator>.</operator><name>Type</name></name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>type</name> <operator>==</operator> <name><name>EScalingAlgorithm</name><operator>.</operator><name>Type</name><operator>.</operator><name>UPSCALING</name></name></expr> ?</condition><then> <expr><name><name>args</name><operator>.</operator><name>upScalingAlgorithm</name></name></expr> </then><else>: <expr><name><name>args</name><operator>.</operator><name>downScalingAlgorithm</name></name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>EScalingAlgorithm</name><operator>.</operator><name>Type</name></name></type> <name>getScalingType</name><parameter_list>(<parameter><decl><type><name>LoadedImage</name></type> <name>imageData</name></decl></parameter>, <parameter><decl><type><name>Dimension</name></type> <name>targetDimension</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>targetSize</name> <init>= <expr><name><name>targetDimension</name><operator>.</operator><name>height</name></name> <operator>*</operator> <name><name>targetDimension</name><operator>.</operator><name>width</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>sourceSize</name> <init>= <expr><call><name><name>imageData</name><operator>.</operator><name>getImage</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getHeight</name><argument_list>()</argument_list></call> <operator>*</operator> <call><name><name>imageData</name><operator>.</operator><name>getImage</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWidth</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name>targetSize</name> <operator>&gt;=</operator> <name>sourceSize</name></expr> ?</condition><then> <expr><name><name>EScalingAlgorithm</name><operator>.</operator><name>Type</name><operator>.</operator><name>UPSCALING</name></name></expr> </then><else>: <expr><name><name>EScalingAlgorithm</name><operator>.</operator><name>Type</name><operator>.</operator><name>DOWNSCALING</name></name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ScaleAlgorithm</name></argument>&gt;</argument_list></name></type> <name>getScaleAlgorithm</name><parameter_list>(<parameter><decl><type><name>EScalingAlgorithm</name></type> <name>algorithm</name></decl></parameter>, <parameter><decl><type><name><name>EScalingAlgorithm</name><operator>.</operator><name>Type</name></name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>TEST_MODE</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>EScalingAlgorithm</name><operator>.</operator><name>getAllEnabled</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call><operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>eScalingAlgorithm</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>eScalingAlgorithm</name><operator>.</operator><name>getSupportedForType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>EScalingAlgorithm</name><operator>::</operator><name>getImplementation</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>singletonList</name></name><argument_list>(<argument><expr><call><name><name>algorithm</name><operator>.</operator><name>getImplementation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>BufferedImage</name></type> <name>scale</name><parameter_list>(<parameter><decl><type><name>ScaleAlgorithm</name></type> <name>scaleAlgorithm</name></decl></parameter>, <parameter><decl><type><name>BufferedImage</name></type> <name>imageToScale</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dWidth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dHeight</name></decl></parameter>, <parameter><decl><type><name><name>ImageType</name><operator>.</operator><name>ECompression</name></name></type> <name>compression</name></decl></parameter>, <parameter><decl><type><name>Color</name></type> <name>background</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <decl_stmt><decl><type><name>BufferedImage</name></type> <name>scaledImage</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>dWidth</name> <operator>==</operator> <call><name><name>imageToScale</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>dHeight</name> <operator>==</operator> <call><name><name>imageToScale</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>scaledImage</name> <operator>=</operator> <name>imageToScale</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>scaledImage</name> <operator>=</operator> <call><name><name>scaleAlgorithm</name><operator>.</operator><name>scale</name></name><argument_list>(<argument><expr><name>imageToScale</name></expr></argument>, <argument><expr><name>dWidth</name></expr></argument>, <argument><expr><name>dHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>compression</name><operator>.</operator><name>hasTransparency</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>BufferedImage</name></type> <name>convertedImg</name> <init>= <expr><operator>new</operator> <call><name>BufferedImage</name><argument_list>(<argument><expr><call><name><name>scaledImage</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>scaledImage</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>BufferedImage</name><operator>.</operator><name>TYPE_INT_RGB</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>convertedImg</name><operator>.</operator><name>getGraphics</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>drawImage</name><argument_list>(<argument><expr><name>scaledImage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>background</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>scaledImage</name> <operator>=</operator> <name>convertedImg</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>enableAntiAliasing</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>scaledImage</name> <operator>=</operator> <call><name><name>OP_ANTIALIAS</name><operator>.</operator><name>filter</name></name><argument_list>(<argument><expr><name>scaledImage</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><name>scaledImage</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>ScaleAlgorithm</name></type> <name>getAsScalingAlgorithm</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ScaleAlgorithm</name></type> <name>algorithm</name></decl></parameter>, <parameter><decl><type><name><name>ImageType</name><operator>.</operator><name>ECompression</name></name></type> <name>compression</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><lambda><parameter_list>(<parameter><decl><name>imageToScale</name></decl></parameter>, <parameter><decl><name>dWidth</name></decl></parameter>, <parameter><decl><name>dHeight</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>ImageHandler</name><operator>.</operator><name>this</name><operator>.</operator><name>scale</name></name><argument_list>(<argument><expr><name>algorithm</name></expr></argument>, <argument><expr><name>imageToScale</name></expr></argument>, <argument><expr><name>dWidth</name></expr></argument>, <argument><expr><name>dHeight</name></expr></argument>, <argument><expr><name>compression</name></expr></argument>, <argument><expr><name>DEFAULT_COLOR</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
