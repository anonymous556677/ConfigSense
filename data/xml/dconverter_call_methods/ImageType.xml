<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/density-converter/src/main/java/at/favre/tools/dconvert/arg/ImageType.java"><comment type="block">/*
 *  Copyright 2016 Patrick Favre-Bulle
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>arg</name></name>;</package>

<comment type="block" format="javadoc">/**
 * Supported image types
 */</comment>
<enum><specifier>public</specifier> enum <name>ImageType</name> <block>{

    <decl><name>JPG</name><argument_list>(<argument><expr><name><name>ECompression</name><operator>.</operator><name>JPG</name></name></expr></argument>, <argument><expr><name><name>ECompression</name><operator>.</operator><name>JPG</name></name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"jpeg"</literal></expr>, <expr><literal type="string">"jpg"</literal></expr>}</block></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></decl>,
    <decl><name>PNG</name><argument_list>(<argument><expr><name><name>ECompression</name><operator>.</operator><name>PNG</name></name></expr></argument>, <argument><expr><name><name>ECompression</name><operator>.</operator><name>PNG</name></name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"png"</literal></expr>}</block></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></decl>,
    <decl><name>GIF</name><argument_list>(<argument><expr><name><name>ECompression</name><operator>.</operator><name>GIF</name></name></expr></argument>, <argument><expr><name><name>ECompression</name><operator>.</operator><name>PNG</name></name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"gif"</literal></expr>}</block></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></decl>,
    <decl><name>SVG</name><argument_list>(<argument><expr><name><name>ECompression</name><operator>.</operator><name>PNG</name></name></expr></argument>, <argument><expr><name><name>ECompression</name><operator>.</operator><name>PNG</name></name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"svg"</literal></expr>}</block></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></decl>,
    <decl><name>PSD</name><argument_list>(<argument><expr><name><name>ECompression</name><operator>.</operator><name>PNG</name></name></expr></argument>, <argument><expr><name><name>ECompression</name><operator>.</operator><name>PNG</name></name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"psd"</literal></expr>}</block></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></decl>, <comment type="line">//adobe photoshop</comment>
    <decl><name>TIFF</name><argument_list>(<argument><expr><name><name>ECompression</name><operator>.</operator><name>TIFF</name></name></expr></argument>, <argument><expr><name><name>ECompression</name><operator>.</operator><name>PNG</name></name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"tif"</literal></expr>, <expr><literal type="string">"tiff"</literal></expr>}</block></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></decl>, <comment type="line">//Tagged Image File Format</comment>
    <decl><name>BMP</name><argument_list>(<argument><expr><name><name>ECompression</name><operator>.</operator><name>BMP</name></name></expr></argument>, <argument><expr><name><name>ECompression</name><operator>.</operator><name>PNG</name></name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"bmp"</literal></expr>}</block></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></decl>; <comment type="line">// bitmap image file or device independent bitmap (DIB)</comment>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>ECompression</name></type> <name>outCompressionStrict</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>ECompression</name></type> <name>outCompressionCompat</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>extensions</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>supportRead</name></decl>;</decl_stmt>

    <constructor><name>ImageType</name><parameter_list>(<parameter><decl><type><name>ECompression</name></type> <name>outCompressionStrict</name></decl></parameter>, <parameter><decl><type><name>ECompression</name></type> <name>outCompressionCompat</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>extensions</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>supportRead</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>outCompressionStrict</name></name> <operator>=</operator> <name>outCompressionStrict</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>outCompressionCompat</name></name> <operator>=</operator> <name>outCompressionCompat</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>extensions</name></name> <operator>=</operator> <name>extensions</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>supportRead</name></name> <operator>=</operator> <name>supportRead</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Supported image compression types
     */</comment>
    <enum><specifier>public</specifier> enum <name>ECompression</name> <block>{
        <decl><name>JPG</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="string">"jpg"</literal></expr></argument>)</argument_list></decl>, <decl><name>PNG</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"png"</literal></expr></argument>)</argument_list></decl>, <decl><name>GIF</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"gif"</literal></expr></argument>)</argument_list></decl>, <decl><name>TIFF</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="string">"tif"</literal></expr></argument>)</argument_list></decl>, <decl><name>BMP</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="string">"bmp"</literal></expr></argument>)</argument_list></decl>;

        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>hasTransparency</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>extension</name></decl>;</decl_stmt>

        <constructor><name>ECompression</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>hasTransparency</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>extension</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>hasTransparency</name></name> <operator>=</operator> <name>hasTransparency</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>extension</name></name> <operator>=</operator> <name>extension</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>
    }</block></enum>
}</block></enum>
</unit>
