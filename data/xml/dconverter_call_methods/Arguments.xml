<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/density-converter/src/main/java/at/favre/tools/dconvert/arg/Arguments.java"><comment type="block">/*
 *  Copyright 2016 Patrick Favre-Bulle
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>arg</name></name>;</package>

<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>InvalidArgumentException</name></name>;</import>
<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>util</name><operator>.</operator><name>MiscUtil</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Serializable</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>MessageFormat</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Handles all the arguments that can be set in the dconvert
 */</comment>
<class><specifier>public</specifier> class <name>Arguments</name> <super_list><implements>implements <super><name>Serializable</name></super></implements></super_list> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>float</name></type> <name>DEFAULT_SCALE</name> <init>= <expr><literal type="number">3f</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>float</name></type> <name>DEFAULT_COMPRESSION_QUALITY</name> <init>= <expr><literal type="number">0.9f</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_THREAD_COUNT</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MAX_THREAD_COUNT</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>RoundingHandler</name><operator>.</operator><name>Strategy</name></name></type> <name>DEFAULT_ROUNDING_STRATEGY</name> <init>= <expr><name><name>RoundingHandler</name><operator>.</operator><name>Strategy</name><operator>.</operator><name>ROUND_HALF_UP</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>EPlatform</name></argument>&gt;</argument_list></name></type> <name>DEFAULT_PLATFORM</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name><name>EPlatform</name><operator>.</operator><name>ANDROID</name></name></expr></argument>, <argument><expr><name><name>EPlatform</name><operator>.</operator><name>IOS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>EOutputCompressionMode</name></type> <name>DEFAULT_OUT_COMPRESSION</name> <init>= <expr><name><name>EOutputCompressionMode</name><operator>.</operator><name>SAME_AS_INPUT_PREF_PNG</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>EScaleMode</name></type> <name>DEFAULT_SCALE_TYPE</name> <init>= <expr><name><name>EScaleMode</name><operator>.</operator><name>FACTOR</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>EScalingAlgorithm</name></type> <name>DEFAULT_UPSCALING_QUALITY</name> <init>= <expr><name><name>EScalingAlgorithm</name><operator>.</operator><name>LANCZOS3</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>EScalingAlgorithm</name></type> <name>DEFAULT_DOWNSCALING_QUALITY</name> <init>= <expr><name><name>EScalingAlgorithm</name><operator>.</operator><name>LANCZOS3</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Arguments</name></type> <name>START_GUI</name> <init>= <expr><operator>new</operator> <call><name>Arguments</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">0.27346f</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">0.9362f</literal></expr></argument>, <argument><expr><literal type="number">996254</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>,
            <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>File</name></type> <name>src</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>File</name></type> <name>dst</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>float</name></type> <name>scale</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>EPlatform</name></argument>&gt;</argument_list></name></type> <name>platform</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>EOutputCompressionMode</name></type> <name>outputCompressionMode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>EScaleMode</name></type> <name>scaleMode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>EScalingAlgorithm</name></type> <name>downScalingAlgorithm</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>EScalingAlgorithm</name></type> <name>upScalingAlgorithm</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>float</name></type> <name>compressionQuality</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>threadCount</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>skipExistingFiles</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>skipUpscaling</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>verboseLog</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>includeAndroidLdpiTvdpi</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>haltOnError</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>createMipMapInsteadOfDrawableDir</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>enablePngCrush</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>enableMozJpeg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>postConvertWebp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>enableAntiAliasing</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>dryRun</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>keepUnoptimizedFilesPostProcessor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name><name>RoundingHandler</name><operator>.</operator><name>Strategy</name></name></type> <name>roundingHandler</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>iosCreateImagesetFolders</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>guiAdvancedOptions</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>clearDirBeforeConvert</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>transient</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>filesToProcess</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>Arguments</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>, <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>EPlatform</name></argument>&gt;</argument_list></name></type> <name>platform</name></decl></parameter>, <parameter><decl><type><name>EOutputCompressionMode</name></type> <name>outputCompressionMode</name></decl></parameter>,
                     <parameter><decl><type><name>EScaleMode</name></type> <name>scaleMode</name></decl></parameter>, <parameter><decl><type><name>EScalingAlgorithm</name></type> <name>downScalingAlgorithm</name></decl></parameter>, <parameter><decl><type><name>EScalingAlgorithm</name></type> <name>upScalingAlgorithm</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>compressionQuality</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>threadCount</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>skipExistingFiles</name></decl></parameter>,
                     <parameter><decl><type><name>boolean</name></type> <name>skipUpscaling</name></decl></parameter>,
                     <parameter><decl><type><name>boolean</name></type> <name>verboseLog</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>includeAndroidLdpiTvdpi</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>haltOnError</name></decl></parameter>,
                     <parameter><decl><type><name>boolean</name></type> <name>createMipMapInsteadOfDrawableDir</name></decl></parameter>,
                     <parameter><decl><type><name>boolean</name></type> <name>iosCreateImagesetFolders</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>enablePngCrush</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>enableMozJpeg</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>postConvertWebp</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>enableAntiAliasing</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>dryRun</name></decl></parameter>,
                     <parameter><decl><type><name>boolean</name></type> <name>keepUnoptimizedFilesPostProcessor</name></decl></parameter>, <parameter><decl><type><name><name>RoundingHandler</name><operator>.</operator><name>Strategy</name></name></type> <name>roundingHandler</name></decl></parameter>,
                     <parameter><decl><type><name>boolean</name></type> <name>guiAdvancedOptions</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>clearDirBeforeConvert</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dst</name></name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>src</name></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>scale</name></name> <operator>=</operator> <name>scale</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>platform</name></name> <operator>=</operator> <name>platform</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>outputCompressionMode</name></name> <operator>=</operator> <name>outputCompressionMode</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>scaleMode</name></name> <operator>=</operator> <name>scaleMode</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>downScalingAlgorithm</name></name> <operator>=</operator> <name>downScalingAlgorithm</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>upScalingAlgorithm</name></name> <operator>=</operator> <name>upScalingAlgorithm</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>compressionQuality</name></name> <operator>=</operator> <name>compressionQuality</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>threadCount</name></name> <operator>=</operator> <name>threadCount</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>skipExistingFiles</name></name> <operator>=</operator> <name>skipExistingFiles</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>skipUpscaling</name></name> <operator>=</operator> <name>skipUpscaling</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>verboseLog</name></name> <operator>=</operator> <name>verboseLog</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>includeAndroidLdpiTvdpi</name></name> <operator>=</operator> <name>includeAndroidLdpiTvdpi</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>haltOnError</name></name> <operator>=</operator> <name>haltOnError</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>createMipMapInsteadOfDrawableDir</name></name> <operator>=</operator> <name>createMipMapInsteadOfDrawableDir</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>iosCreateImagesetFolders</name></name> <operator>=</operator> <name>iosCreateImagesetFolders</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>enablePngCrush</name></name> <operator>=</operator> <name>enablePngCrush</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>enableMozJpeg</name></name> <operator>=</operator> <name>enableMozJpeg</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>postConvertWebp</name></name> <operator>=</operator> <name>postConvertWebp</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>enableAntiAliasing</name></name> <operator>=</operator> <name>enableAntiAliasing</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dryRun</name></name> <operator>=</operator> <name>dryRun</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>keepUnoptimizedFilesPostProcessor</name></name> <operator>=</operator> <name>keepUnoptimizedFilesPostProcessor</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>roundingHandler</name></name> <operator>=</operator> <name>roundingHandler</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>guiAdvancedOptions</name></name> <operator>=</operator> <name>guiAdvancedOptions</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>clearDirBeforeConvert</name></name> <operator>=</operator> <name>clearDirBeforeConvert</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>filesToProcess</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>supportedFileTypes</name> <init>= <expr><call><name>getSupportedFileTypes</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>src</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>src</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>File</name></type> <name>file</name> <range>: <expr><call><name><name>src</name><operator>.</operator><name>listFiles</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>extension</name> <init>= <expr><call><name><name>MiscUtil</name><operator>.</operator><name>getFileExtensionLowerCase</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>supportedFileTypes</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>extension</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>filesToProcess</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>supportedFileTypes</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>MiscUtil</name><operator>.</operator><name>getFileExtensionLowerCase</name></name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>filesToProcess</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>Arguments</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>DEFAULT_SCALE</name></expr></argument>, <argument><expr><name>DEFAULT_PLATFORM</name></expr></argument>, <argument><expr><name>DEFAULT_OUT_COMPRESSION</name></expr></argument>, <argument><expr><name>DEFAULT_SCALE_TYPE</name></expr></argument>, <argument><expr><name>DEFAULT_DOWNSCALING_QUALITY</name></expr></argument>, <argument><expr><name>DEFAULT_UPSCALING_QUALITY</name></expr></argument>, <argument><expr><name>DEFAULT_COMPRESSION_QUALITY</name></expr></argument>, <argument><expr><name>DEFAULT_THREAD_COUNT</name></expr></argument>,
                <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>DEFAULT_ROUNDING_STRATEGY</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>double</name></type> <name>round</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>raw</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>RoundingHandler</name><argument_list>(<argument><expr><name>roundingHandler</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>round</name><argument_list>(<argument><expr><name>raw</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="string">"Arguments{"</literal> <operator>+</operator>
                <literal type="string">"src="</literal> <operator>+</operator> <name>src</name> <operator>+</operator>
                <literal type="string">", dst="</literal> <operator>+</operator> <name>dst</name> <operator>+</operator>
                <literal type="string">", scale="</literal> <operator>+</operator> <name>scale</name> <operator>+</operator>
                <literal type="string">", platform="</literal> <operator>+</operator> <name>platform</name> <operator>+</operator>
                <literal type="string">", outputCompressionMode="</literal> <operator>+</operator> <name>outputCompressionMode</name> <operator>+</operator>
                <literal type="string">", scaleMode="</literal> <operator>+</operator> <name>scaleMode</name> <operator>+</operator>
                <literal type="string">", downScalingAlgorithm="</literal> <operator>+</operator> <name>downScalingAlgorithm</name> <operator>+</operator>
                <literal type="string">", upScalingAlgorithm="</literal> <operator>+</operator> <name>upScalingAlgorithm</name> <operator>+</operator>
                <literal type="string">", compressionQuality="</literal> <operator>+</operator> <name>compressionQuality</name> <operator>+</operator>
                <literal type="string">", threadCount="</literal> <operator>+</operator> <name>threadCount</name> <operator>+</operator>
                <literal type="string">", skipExistingFiles="</literal> <operator>+</operator> <name>skipExistingFiles</name> <operator>+</operator>
                <literal type="string">", skipUpscaling="</literal> <operator>+</operator> <name>skipUpscaling</name> <operator>+</operator>
                <literal type="string">", verboseLog="</literal> <operator>+</operator> <name>verboseLog</name> <operator>+</operator>
                <literal type="string">", includeAndroidLdpiTvdpi="</literal> <operator>+</operator> <name>includeAndroidLdpiTvdpi</name> <operator>+</operator>
                <literal type="string">", haltOnError="</literal> <operator>+</operator> <name>haltOnError</name> <operator>+</operator>
                <literal type="string">", createMipMapInsteadOfDrawableDir="</literal> <operator>+</operator> <name>createMipMapInsteadOfDrawableDir</name> <operator>+</operator>
                <literal type="string">", enablePngCrush="</literal> <operator>+</operator> <name>enablePngCrush</name> <operator>+</operator>
                <literal type="string">", enableMozJpeg="</literal> <operator>+</operator> <name>enableMozJpeg</name> <operator>+</operator>
                <literal type="string">", postConvertWebp="</literal> <operator>+</operator> <name>postConvertWebp</name> <operator>+</operator>
                <literal type="string">", enableAntiAliasing="</literal> <operator>+</operator> <name>enableAntiAliasing</name> <operator>+</operator>
                <literal type="string">", dryRun="</literal> <operator>+</operator> <name>dryRun</name> <operator>+</operator>
                <literal type="string">", keepUnoptimizedFilesPostProcessor="</literal> <operator>+</operator> <name>keepUnoptimizedFilesPostProcessor</name> <operator>+</operator>
                <literal type="string">", roundingHandler="</literal> <operator>+</operator> <name>roundingHandler</name> <operator>+</operator>
                <literal type="string">", iosCreateImagesetFolders="</literal> <operator>+</operator> <name>iosCreateImagesetFolders</name> <operator>+</operator>
                <literal type="string">", guiAdvancedOptions="</literal> <operator>+</operator> <name>guiAdvancedOptions</name> <operator>+</operator>
                <literal type="string">", clearDirBeforeConvert="</literal> <operator>+</operator> <name>clearDirBeforeConvert</name> <operator>+</operator>
                <literal type="string">", filesToProcess="</literal> <operator>+</operator> <name>filesToProcess</name> <operator>+</operator>
                <literal type="char">'}'</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>o</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name>getClass</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>o</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>Arguments</name></type> <name>arguments</name> <init>= <expr><operator>(</operator><name>Arguments</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>Float</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name><name>arguments</name><operator>.</operator><name>scale</name></name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>Float</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name><name>arguments</name><operator>.</operator><name>compressionQuality</name></name></expr></argument>, <argument><expr><name>compressionQuality</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>threadCount</name> <operator>!=</operator> <name><name>arguments</name><operator>.</operator><name>threadCount</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>skipExistingFiles</name> <operator>!=</operator> <name><name>arguments</name><operator>.</operator><name>skipExistingFiles</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>skipUpscaling</name> <operator>!=</operator> <name><name>arguments</name><operator>.</operator><name>skipUpscaling</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>verboseLog</name> <operator>!=</operator> <name><name>arguments</name><operator>.</operator><name>verboseLog</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>includeAndroidLdpiTvdpi</name> <operator>!=</operator> <name><name>arguments</name><operator>.</operator><name>includeAndroidLdpiTvdpi</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>haltOnError</name> <operator>!=</operator> <name><name>arguments</name><operator>.</operator><name>haltOnError</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>createMipMapInsteadOfDrawableDir</name> <operator>!=</operator> <name><name>arguments</name><operator>.</operator><name>createMipMapInsteadOfDrawableDir</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>enablePngCrush</name> <operator>!=</operator> <name><name>arguments</name><operator>.</operator><name>enablePngCrush</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>enableMozJpeg</name> <operator>!=</operator> <name><name>arguments</name><operator>.</operator><name>enableMozJpeg</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>postConvertWebp</name> <operator>!=</operator> <name><name>arguments</name><operator>.</operator><name>postConvertWebp</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>enableAntiAliasing</name> <operator>!=</operator> <name><name>arguments</name><operator>.</operator><name>enableAntiAliasing</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>dryRun</name> <operator>!=</operator> <name><name>arguments</name><operator>.</operator><name>dryRun</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>keepUnoptimizedFilesPostProcessor</name> <operator>!=</operator> <name><name>arguments</name><operator>.</operator><name>keepUnoptimizedFilesPostProcessor</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>iosCreateImagesetFolders</name> <operator>!=</operator> <name><name>arguments</name><operator>.</operator><name>iosCreateImagesetFolders</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>guiAdvancedOptions</name> <operator>!=</operator> <name><name>arguments</name><operator>.</operator><name>guiAdvancedOptions</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>clearDirBeforeConvert</name> <operator>!=</operator> <name><name>arguments</name><operator>.</operator><name>clearDirBeforeConvert</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>src</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><operator>!</operator><call><name><name>src</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>arguments</name><operator>.</operator><name>src</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>arguments</name><operator>.</operator><name>src</name></name> <operator>!=</operator> <literal type="null">null</literal></expr></else></ternary></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>dst</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><operator>!</operator><call><name><name>dst</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>arguments</name><operator>.</operator><name>dst</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>arguments</name><operator>.</operator><name>dst</name></name> <operator>!=</operator> <literal type="null">null</literal></expr></else></ternary></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>platform</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><operator>!</operator><call><name><name>platform</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>arguments</name><operator>.</operator><name>platform</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>arguments</name><operator>.</operator><name>platform</name></name> <operator>!=</operator> <literal type="null">null</literal></expr></else></ternary></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>outputCompressionMode</name> <operator>!=</operator> <name><name>arguments</name><operator>.</operator><name>outputCompressionMode</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>scaleMode</name> <operator>!=</operator> <name><name>arguments</name><operator>.</operator><name>scaleMode</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>downScalingAlgorithm</name> <operator>!=</operator> <name><name>arguments</name><operator>.</operator><name>downScalingAlgorithm</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>upScalingAlgorithm</name> <operator>!=</operator> <name><name>arguments</name><operator>.</operator><name>upScalingAlgorithm</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>roundingHandler</name> <operator>!=</operator> <name><name>arguments</name><operator>.</operator><name>roundingHandler</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><ternary><condition><expr><name>filesToProcess</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>filesToProcess</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>arguments</name><operator>.</operator><name>filesToProcess</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>arguments</name><operator>.</operator><name>filesToProcess</name></name> <operator>==</operator> <literal type="null">null</literal></expr></else></ternary></expr>;</return>

    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><ternary><condition><expr><name>src</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>src</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>dst</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>dst</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>scale</name> <operator>!=</operator> <operator>+</operator><literal type="number">0.0f</literal></expr> ?</condition><then> <expr><call><name><name>Float</name><operator>.</operator><name>floatToIntBits</name></name><argument_list>(<argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>platform</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>platform</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>outputCompressionMode</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>outputCompressionMode</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>scaleMode</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>scaleMode</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>downScalingAlgorithm</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>downScalingAlgorithm</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>upScalingAlgorithm</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>upScalingAlgorithm</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>compressionQuality</name> <operator>!=</operator> <operator>+</operator><literal type="number">0.0f</literal></expr> ?</condition><then> <expr><call><name><name>Float</name><operator>.</operator><name>floatToIntBits</name></name><argument_list>(<argument><expr><name>compressionQuality</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <name>threadCount</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>skipExistingFiles</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>skipUpscaling</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>verboseLog</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>includeAndroidLdpiTvdpi</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>haltOnError</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>createMipMapInsteadOfDrawableDir</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>enablePngCrush</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>enableMozJpeg</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>postConvertWebp</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>enableAntiAliasing</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>dryRun</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>keepUnoptimizedFilesPostProcessor</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>roundingHandler</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>roundingHandler</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>iosCreateImagesetFolders</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>guiAdvancedOptions</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>clearDirBeforeConvert</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>filesToProcess</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>filesToProcess</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getSupportedFileTypes</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>set</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>ImageType</name></type> <name>imageType</name> <range>: <expr><call><name><name>ImageType</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>imageType</name><operator>.</operator><name>supportRead</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>set</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name><name>imageType</name><operator>.</operator><name>extensions</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <return>return <expr><name>set</name></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Builder</name> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>dst</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>srcScale</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>src</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>EScaleMode</name></type> <name>scaleType</name> <init>= <expr><name>DEFAULT_SCALE_TYPE</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>EPlatform</name></argument>&gt;</argument_list></name></type> <name>platform</name> <init>= <expr><name>DEFAULT_PLATFORM</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>EOutputCompressionMode</name></type> <name>outputCompressionMode</name> <init>= <expr><name>DEFAULT_OUT_COMPRESSION</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>compressionQuality</name> <init>= <expr><name>DEFAULT_COMPRESSION_QUALITY</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>threadCount</name> <init>= <expr><name>DEFAULT_THREAD_COUNT</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name><name>RoundingHandler</name><operator>.</operator><name>Strategy</name></name></type> <name>roundingStrategy</name> <init>= <expr><name>DEFAULT_ROUNDING_STRATEGY</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>EScalingAlgorithm</name></type> <name>downScalingAlgorithm</name> <init>= <expr><name>DEFAULT_DOWNSCALING_QUALITY</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>EScalingAlgorithm</name></type> <name>upScalingAlgorithm</name> <init>= <expr><name>DEFAULT_UPSCALING_QUALITY</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>skipExistingFiles</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>skipUpscaling</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>verboseLog</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>includeAndroidLdpiTvdpi</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>haltOnError</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>createMipMapInsteadOfDrawableDir</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>enableAntiAliasing</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>enablePngCrush</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>postConvertWebp</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>dryRun</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>enableMozJpeg</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>internalSkipParamValidation</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>keepUnoptimizedFilesPostProcessor</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>iosCreateImagesetFolders</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>guiAdvancedOptions</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>clearDirBeforeConvert</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>Builder</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>srcScale</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>src</name></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>srcScale</name></name> <operator>=</operator> <name>srcScale</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>scaleMode</name><parameter_list>(<parameter><decl><type><name>EScaleMode</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>scaleType</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>upScaleAlgorithm</name><parameter_list>(<parameter><decl><type><name>EScalingAlgorithm</name></type> <name>scalingAlgorithm</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>upScalingAlgorithm</name></name> <operator>=</operator> <name>scalingAlgorithm</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>downScaleAlgorithm</name><parameter_list>(<parameter><decl><type><name>EScalingAlgorithm</name></type> <name>scalingAlgorithm</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>downScalingAlgorithm</name></name> <operator>=</operator> <name>scalingAlgorithm</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>dstFolder</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>dst</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dst</name></name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>platform</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>EPlatform</name></argument>&gt;</argument_list></name></type> <name>platform</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>platform</name></name> <operator>=</operator> <name>platform</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>compression</name><parameter_list>(<parameter><decl><type><name>EOutputCompressionMode</name></type> <name>outputCompressionMode</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>outputCompressionMode</name></name> <operator>=</operator> <name>outputCompressionMode</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>compression</name><parameter_list>(<parameter><decl><type><name>EOutputCompressionMode</name></type> <name>outputCompressionMode</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>compressionQuality</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>outputCompressionMode</name></name> <operator>=</operator> <name>outputCompressionMode</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>compressionQuality</name></name> <operator>=</operator> <name>compressionQuality</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>threadCount</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>threadCount</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>threadCount</name></name> <operator>=</operator> <name>threadCount</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>skipExistingFiles</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>skipExistingFiles</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>skipUpscaling</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>skipUpscaling</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>verboseLog</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>verboseLog</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>includeAndroidLdpiTvdpi</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>includeAndroidLdpiTvdpi</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>haltOnError</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>haltOnError</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>createMipMapInsteadOfDrawableDir</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>createMipMapInsteadOfDrawableDir</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>antiAliasing</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>enableAntiAliasing</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>enablePngCrush</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>enablePngCrush</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>enableMozJpeg</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>enableMozJpeg</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>postConvertWebp</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>postConvertWebp</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>dryRun</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dryRun</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>scaleRoundingStragy</name><parameter_list>(<parameter><decl><type><name><name>RoundingHandler</name><operator>.</operator><name>Strategy</name></name></type> <name>strategy</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>roundingStrategy</name></name> <operator>=</operator> <name>strategy</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>skipParamValidation</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>internalSkipParamValidation</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>keepUnoptimizedFilesPostProcessor</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>keepUnoptimizedFilesPostProcessor</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>iosCreateImagesetFolders</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>iosCreateImagesetFolders</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>guiAdvancedOptions</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>guiAdvancedOptions</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Builder</name></type> <name>clearDirBeforeConvert</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>clearDirBeforeConvert</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Arguments</name></type> <name>build</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>InvalidArgumentException</name></expr></argument></throws> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>internalSkipParamValidation</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>ResourceBundle</name></type> <name>bundle</name> <init>= <expr><call><name><name>ResourceBundle</name><operator>.</operator><name>getBundle</name></name><argument_list>(<argument><expr><literal type="string">"bundles.strings"</literal></expr></argument>, <argument><expr><call><name><name>Locale</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><call><name><name>platform</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>InvalidArgumentException</name><argument_list>(<argument><expr><call><name><name>bundle</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"error.missing.platforms"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><name>src</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><call><name><name>src</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>InvalidArgumentException</name><argument_list>(<argument><expr><call><name><name>MessageFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name><name>bundle</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"error.missing.src"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>src</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>dst</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name><name>src</name><operator>.</operator><name>getParentFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><name>compressionQuality</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>compressionQuality</name> <operator>&gt;</operator> <literal type="number">1.0</literal></expr>)</condition> <block>{<block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>InvalidArgumentException</name><argument_list>(<argument><expr><call><name><name>MessageFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name><name>bundle</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"error.invalid.compressionQ"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>compressionQuality</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><name>threadCount</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>threadCount</name> <operator>&gt;</operator> <name>MAX_THREAD_COUNT</name></expr>)</condition> <block>{<block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>InvalidArgumentException</name><argument_list>(<argument><expr><call><name><name>MessageFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name><name>bundle</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"error.invalid.thread"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>threadCount</name></expr></argument>, <argument><expr><name>MAX_THREAD_COUNT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>

                <switch>switch <condition>(<expr><name>scaleType</name></expr>)</condition> <block>{<block_content>
                    <case>case <expr><name>FACTOR</name></expr>:</case>
                        <if_stmt><if>if <condition>(<expr><name>srcScale</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>srcScale</name> <operator>&gt;=</operator> <literal type="number">100</literal></expr>)</condition> <block>{<block_content>
                            <throw>throw <expr><operator>new</operator> <call><name>InvalidArgumentException</name><argument_list>(<argument><expr><call><name><name>MessageFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name><name>bundle</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"error.invalid.factorscale"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>srcScale</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                        </block_content>}</block></if></if_stmt>
                        <break>break;</break>
                    <case>case <expr><name>DP_WIDTH</name></expr>:</case>
                    <case>case <expr><name>DP_HEIGHT</name></expr>:</case>
                        <if_stmt><if>if <condition>(<expr><name>srcScale</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>srcScale</name> <operator>&gt;=</operator> <literal type="number">9999</literal></expr>)</condition> <block>{<block_content>
                            <throw>throw <expr><operator>new</operator> <call><name>InvalidArgumentException</name><argument_list>(<argument><expr><call><name><name>MessageFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name><name>bundle</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"error.invalid.dp"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>srcScale</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                        </block_content>}</block></if></if_stmt>
                        <break>break;</break>
                </block_content>}</block></switch>

                <if_stmt><if>if <condition>(<expr><name>downScalingAlgorithm</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>upScalingAlgorithm</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>InvalidArgumentException</name><argument_list>(<argument><expr><call><name><name>bundle</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"error.missing.scalealgorithm"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><operator>new</operator> <call><name>Arguments</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>srcScale</name></expr></argument>, <argument><expr><name>platform</name></expr></argument>, <argument><expr><name>outputCompressionMode</name></expr></argument>, <argument><expr><name>scaleType</name></expr></argument>, <argument><expr><name>downScalingAlgorithm</name></expr></argument>, <argument><expr><name>upScalingAlgorithm</name></expr></argument>, <argument><expr><name>compressionQuality</name></expr></argument>, <argument><expr><name>threadCount</name></expr></argument>,
                    <argument><expr><name>skipExistingFiles</name></expr></argument>, <argument><expr><name>skipUpscaling</name></expr></argument>, <argument><expr><name>verboseLog</name></expr></argument>, <argument><expr><name>includeAndroidLdpiTvdpi</name></expr></argument>, <argument><expr><name>haltOnError</name></expr></argument>, <argument><expr><name>createMipMapInsteadOfDrawableDir</name></expr></argument>,
                    <argument><expr><name>iosCreateImagesetFolders</name></expr></argument>, <argument><expr><name>enablePngCrush</name></expr></argument>, <argument><expr><name>enableMozJpeg</name></expr></argument>, <argument><expr><name>postConvertWebp</name></expr></argument>, <argument><expr><name>enableAntiAliasing</name></expr></argument>, <argument><expr><name>dryRun</name></expr></argument>, <argument><expr><name>keepUnoptimizedFilesPostProcessor</name></expr></argument>, <argument><expr><name>roundingStrategy</name></expr></argument>, <argument><expr><name>guiAdvancedOptions</name></expr></argument>, <argument><expr><name>clearDirBeforeConvert</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ImageType</name></type> <name>getImageType</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>srcFile</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>extension</name> <init>= <expr><call><name><name>MiscUtil</name><operator>.</operator><name>getFileExtensionLowerCase</name></name><argument_list>(<argument><expr><name>srcFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>extension</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><literal type="string">"jpg"</literal></expr>:</case>
            <case>case <expr><literal type="string">"jpeg"</literal></expr>:</case>
                <return>return <expr><name><name>ImageType</name><operator>.</operator><name>JPG</name></name></expr>;</return>
            <case>case <expr><literal type="string">"png"</literal></expr>:</case>
                <return>return <expr><name><name>ImageType</name><operator>.</operator><name>PNG</name></name></expr>;</return>
            <case>case <expr><literal type="string">"svg"</literal></expr>:</case>
                <return>return <expr><name><name>ImageType</name><operator>.</operator><name>SVG</name></name></expr>;</return>
            <case>case <expr><literal type="string">"tif"</literal></expr>:</case>
            <case>case <expr><literal type="string">"tiff"</literal></expr>:</case>
                <return>return <expr><name><name>ImageType</name><operator>.</operator><name>TIFF</name></name></expr>;</return>
            <case>case <expr><literal type="string">"psd"</literal></expr>:</case>
                <return>return <expr><name><name>ImageType</name><operator>.</operator><name>PSD</name></name></expr>;</return>
            <case>case <expr><literal type="string">"gif"</literal></expr>:</case>
                <return>return <expr><name><name>ImageType</name><operator>.</operator><name>GIF</name></name></expr>;</return>
            <case>case <expr><literal type="string">"bmp"</literal></expr>:</case>
                <return>return <expr><name><name>ImageType</name><operator>.</operator><name>BMP</name></name></expr>;</return>
            <default>default:</default>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"unknown file extension "</literal> <operator>+</operator> <name>extension</name> <operator>+</operator> <literal type="string">" in srcFile "</literal> <operator>+</operator> <name>srcFile</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>ImageType</name><operator>.</operator><name>ECompression</name></name></argument>&gt;</argument_list></name></type> <name>getOutCompressionForType</name><parameter_list>(<parameter><decl><type><name>EOutputCompressionMode</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>ImageType</name></type> <name>imageType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>ImageType</name><operator>.</operator><name>ECompression</name></name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>AS_GIF</name></expr>:</case>
                <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>ImageType</name><operator>.</operator><name>ECompression</name><operator>.</operator><name>GIF</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AS_PNG</name></expr>:</case>
                <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>ImageType</name><operator>.</operator><name>ECompression</name><operator>.</operator><name>PNG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AS_JPG</name></expr>:</case>
                <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>ImageType</name><operator>.</operator><name>ECompression</name><operator>.</operator><name>JPG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AS_JPG_AND_PNG</name></expr>:</case>
                <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>ImageType</name><operator>.</operator><name>ECompression</name><operator>.</operator><name>JPG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>ImageType</name><operator>.</operator><name>ECompression</name><operator>.</operator><name>PNG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>AS_BMP</name></expr>:</case>
                <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>ImageType</name><operator>.</operator><name>ECompression</name><operator>.</operator><name>BMP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>SAME_AS_INPUT_PREF_PNG</name></expr>:</case>
                <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>imageType</name><operator>.</operator><name>outCompressionCompat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
            <case>case <expr><name>SAME_AS_INPUT_STRICT</name></expr>:</case>
                <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>imageType</name><operator>.</operator><name>outCompressionStrict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </block_content>}</block></switch>
        <return>return <expr><name>list</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
