<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/density-converter/src/main/java/at/favre/tools/dconvert/converters/APlatformConverter.java"><comment type="block">/*
 *  Copyright 2016 Patrick Favre-Bulle
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>converters</name></name>;</package>

<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>arg</name><operator>.</operator><name>Arguments</name></name>;</import>
<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>arg</name><operator>.</operator><name>EScaleMode</name></name>;</import>
<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>arg</name><operator>.</operator><name>ImageType</name></name>;</import>
<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>converters</name><operator>.</operator><name>descriptors</name><operator>.</operator><name>DensityDescriptor</name></name>;</import>
<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>converters</name><operator>.</operator><name>scaling</name><operator>.</operator><name>ImageHandler</name></name>;</import>
<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>util</name><operator>.</operator><name>DensityBucketUtil</name></name>;</import>
<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>util</name><operator>.</operator><name>ImageUtil</name></name>;</import>
<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>util</name><operator>.</operator><name>LoadedImage</name></name>;</import>
<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>util</name><operator>.</operator><name>MiscUtil</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<comment type="block" format="javadoc">/**
 * The main logic of all platform converters
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name><name>APlatformConverter</name><parameter_list>&lt;<parameter><name>T</name> <extends>extends <name>DensityDescriptor</name></extends></parameter>&gt;</parameter_list></name> <super_list><implements>implements <super><name>IPlatformConverter</name></super></implements></super_list> <block>{

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Result</name></type> <name>convert</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>srcImage</name></decl></parameter>, <parameter><decl><type><name>Arguments</name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>File</name></type> <name>destinationFolder</name> <init>= <expr><name><name>args</name><operator>.</operator><name>dst</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>LoadedImage</name></type> <name>imageData</name> <init>= <expr><call><name><name>ImageUtil</name><operator>.</operator><name>loadImage</name></name><argument_list>(<argument><expr><name>srcImage</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>targetImageFileName</name> <init>= <expr><call><name><name>MiscUtil</name><operator>.</operator><name>getFileNameWithoutExtension</name></name><argument_list>(<argument><expr><name>srcImage</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ImageType</name></type> <name>imageType</name> <init>= <expr><call><name><name>Arguments</name><operator>.</operator><name>getImageType</name></name><argument_list>(<argument><expr><name>srcImage</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>isNinePatch</name> <init>= <expr><call><name><name>AndroidConverter</name><operator>.</operator><name>isNinePatch</name></name><argument_list>(<argument><expr><name>srcImage</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>getClass</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>AndroidConverter</name><operator>.</operator><name>class</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>StringBuilder</name></type> <name>log</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>getConverterName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">": "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>targetImageFileName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>imageData</name><operator>.</operator><name>getImage</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWidth</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>imageData</name><operator>.</operator><name>getImage</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getHeight</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" ("</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>scale</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>args</name><operator>.</operator><name>scaleMode</name></name> <operator>==</operator> <name><name>EScaleMode</name><operator>.</operator><name>FACTOR</name></name></expr> ?</condition><then> <expr><literal type="string">"x"</literal></expr> </then><else>: <expr><literal type="string">"dp"</literal></expr></else></ternary></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">")\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>T</name></argument>, <argument><name>Dimension</name></argument>&gt;</argument_list></name></type> <name>densityMap</name> <init>= <expr><call><name><name>DensityBucketUtil</name><operator>.</operator><name>getDensityBuckets</name></name><argument_list>(<argument><expr><call><name>usedOutputDensities</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Dimension</name><argument_list>(<argument><expr><call><name><name>imageData</name><operator>.</operator><name>getImage</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWidth</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>imageData</name><operator>.</operator><name>getImage</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getHeight</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>scale</name></name></expr></argument>, <argument><expr><name>isNinePatch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>File</name></type> <name>mainSubFolder</name> <init>= <expr><call><name>createMainSubFolder</name><argument_list>(<argument><expr><name>destinationFolder</name></expr></argument>, <argument><expr><name>targetImageFileName</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>onPreExecute</name><argument_list>(<argument><expr><name>mainSubFolder</name></expr></argument>, <argument><expr><name>targetImageFileName</name></expr></argument>, <argument><expr><call><name>usedOutputDensities</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>imageType</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>allResultingFiles</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>T</name></argument>, <argument><name>Dimension</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>densityMap</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>File</name></type> <name>dstFolder</name> <init>= <expr><call><name>createFolderForOutputFile</name><argument_list>(<argument><expr><name>mainSubFolder</name></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>targetImageFileName</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name><name>dstFolder</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>dstFolder</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>||</operator> <name><name>args</name><operator>.</operator><name>dryRun</name></name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>File</name></type> <name>imageFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>dstFolder</name></expr></argument>, <argument><expr><call><name>createDestinationFileNameWithoutExtension</name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>targetImageFileName</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"process "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>imageFile</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" with "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" (x"</literal></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><name>scale</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">") "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><ternary><condition><expr><name>isNinePatch</name></expr> ?</condition><then> <expr><literal type="string">"(9-patch)"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>args</name><operator>.</operator><name>dryRun</name></name></expr>)</condition> <block>{<block_content>
                        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>files</name> <init>= <expr><operator>new</operator> <call><name>ImageHandler</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>saveToFile</name><argument_list>(<argument><expr><name>imageFile</name></expr></argument>, <argument><expr><name>imageData</name></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>isNinePatch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <expr_stmt><expr><call><name><name>allResultingFiles</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <for>for <control>(<init><decl><type><name>File</name></type> <name>file</name> <range>: <expr><name>files</name></expr></range></decl></init>)</control> <block>{<block_content>
                            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"compressed to disk: "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" ("</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>US</name></name></expr></argument>, <argument><expr><literal type="string">"%.2f"</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator> <call><name><name>file</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1024f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"kB)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></for>

                        <if_stmt><if>if <condition>(<expr><call><name><name>files</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"files skipped\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"could not create "</literal> <operator>+</operator> <name>dstFolder</name></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>

            <expr_stmt><expr><call><name>onPostExecute</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>imageData</name><operator>.</operator><name>getImage</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><operator>new</operator> <call><name>Result</name><argument_list>(<argument><expr><call><name><name>log</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>allResultingFiles</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>new</operator> <call><name>Result</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>usedOutputDensities</name><parameter_list>(<parameter><decl><type><name>Arguments</name></type> <name>arguments</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>String</name></type> <name>getConverterName</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>File</name></type> <name>createMainSubFolder</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>destinationFolder</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>targetImageFileName</name></decl></parameter>, <parameter><decl><type><name>Arguments</name></type> <name>arguments</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>File</name></type> <name>createFolderForOutputFile</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>mainSubFolder</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>density</name></decl></parameter>, <parameter><decl><type><name>Dimension</name></type> <name>dimension</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>targetFileName</name></decl></parameter>, <parameter><decl><type><name>Arguments</name></type> <name>arguments</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>String</name></type> <name>createDestinationFileNameWithoutExtension</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>density</name></decl></parameter>, <parameter><decl><type><name>Dimension</name></type> <name>dimension</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>targetFileName</name></decl></parameter>, <parameter><decl><type><name>Arguments</name></type> <name>arguments</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>onPreExecute</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>dstFolder</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>targetFileName</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>densityDescriptions</name></decl></parameter>, <parameter><decl><type><name>ImageType</name></type> <name>imageType</name></decl></parameter>, <parameter><decl><type><name>Arguments</name></type> <name>arguments</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws>;</function_decl>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>onPostExecute</name><parameter_list>(<parameter><decl><type><name>Arguments</name></type> <name>arguments</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></class>
</unit>
