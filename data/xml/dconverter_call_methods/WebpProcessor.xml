<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/density-converter/src/main/java/at/favre/tools/dconvert/converters/postprocessing/WebpProcessor.java"><comment type="block">/*
 *  Copyright 2016 Patrick Favre-Bulle
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>converters</name><operator>.</operator><name>postprocessing</name></name>;</package>

<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>arg</name><operator>.</operator><name>Arguments</name></name>;</import>
<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>arg</name><operator>.</operator><name>ImageType</name></name>;</import>
<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>converters</name><operator>.</operator><name>Result</name></name>;</import>
<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>util</name><operator>.</operator><name>MiscUtil</name></name>;</import>
<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>util</name><operator>.</operator><name>PostProcessorUtil</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Converts pngs/jpegs to lossless/lossy webp
 */</comment>
<class><specifier>public</specifier> class <name>WebpProcessor</name> <super_list><extends>extends <super><name>APostProcessor</name></super></extends></super_list> <block>{

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Result</name></type> <name>synchronizedProcess</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>rawFile</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>keepOriginal</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>ImageType</name></type> <name>compression</name> <init>= <expr><call><name><name>Arguments</name><operator>.</operator><name>getImageType</name></name><argument_list>(<argument><expr><name>rawFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>additionalArgs</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>compression</name> <operator>==</operator> <name><name>ImageType</name><operator>.</operator><name>PNG</name></name> <operator>||</operator> <name>compression</name> <operator>==</operator> <name><name>ImageType</name><operator>.</operator><name>GIF</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>additionalArgs</name> <operator>=</operator> <operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"-lossless"</literal></expr>, <expr><literal type="string">"-alpha_filter"</literal></expr>, <expr><literal type="string">"best"</literal></expr>, <expr><literal type="string">"-m"</literal></expr>, <expr><literal type="string">"6"</literal></expr>}</block></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>compression</name> <operator>==</operator> <name><name>ImageType</name><operator>.</operator><name>JPG</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>additionalArgs</name> <operator>=</operator> <operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"-m"</literal></expr>, <expr><literal type="string">"6"</literal></expr>, <expr><literal type="string">"-q"</literal></expr>, <expr><literal type="string">"90"</literal></expr>}</block></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            </block_content>}</block></else></if_stmt>

            <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>finalArg</name> <init>= <expr><call><name><name>MiscUtil</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><call><name><name>MiscUtil</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"cwebp"</literal></expr>}</block></expr></argument>, <argument><expr><name>additionalArgs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"%%sourceFilePath%%"</literal></expr>, <expr><literal type="string">"-o"</literal></expr>, <expr><literal type="string">"%%outFilePath%%"</literal></expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <return>return <expr><call><name><name>PostProcessorUtil</name><operator>.</operator><name>runImageOptimizer</name></name><argument_list>(<argument><expr><name>rawFile</name></expr></argument>, <argument><expr><name>compression</name></expr></argument>, <argument><expr><name>finalArg</name></expr></argument>, <argument><expr><name>keepOriginal</name></expr></argument>, <argument><expr><literal type="string">"webp"</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>Result</name><argument_list>(<argument><expr><literal type="string">"could not execute post processor "</literal> <operator>+</operator> <call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><call><name><name>Collections</name><operator>.</operator><name>singletonList</name></name><argument_list>(<argument><expr><name>rawFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isSupported</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>PostProcessorUtil</name><operator>.</operator><name>canRunCmd</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"cwebp"</literal></expr>, <expr><literal type="string">"-h"</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
