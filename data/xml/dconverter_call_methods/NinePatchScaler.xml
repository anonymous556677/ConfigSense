<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/density-converter/src/main/java/at/favre/tools/dconvert/util/NinePatchScaler.java"><comment type="block">/*
 *  Copyright 2016 Patrick Favre-Bulle
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>converters</name><operator>.</operator><name>scaling</name><operator>.</operator><name>ScaleAlgorithm</name></name>;</import>
<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>converters</name><operator>.</operator><name>scaling</name><operator>.</operator><name>ThumbnailnatorProgressiveAlgorithm</name></name>;</import>
<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>NinePatchException</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>BufferedImage</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Scales 9-patches correctly, keeping the 1px border intact.
 * &lt;p&gt;
 * Adapted from &lt;a href="https://github.com/redwarp/9-Patch-Resizer/blob/develop/src/net/redwarp/tool/resizer/worker/ImageScaler.java"&gt;Github&lt;/a&gt;
 *
 * @author Redwarp, pfavre
 */</comment>
<class><specifier>public</specifier> class <name>NinePatchScaler</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>ScaleAlgorithm</name></type> <name>algorithm</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ScaleAlgorithm</name></type> <name>borderScalerAlgorithm</name> <init>= <expr><operator>new</operator> <call><name>ThumbnailnatorProgressiveAlgorithm</name><argument_list>(<argument><expr><name><name>RenderingHints</name><operator>.</operator><name>VALUE_INTERPOLATION_BILINEAR</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name>BufferedImage</name></type> <name>scale</name><parameter_list>(<parameter><decl><type><name>BufferedImage</name></type> <name>inputImage</name></decl></parameter>, <parameter><decl><type><name>Dimension</name></type> <name>dimensions</name></decl></parameter>, <parameter><decl><type><name>ScaleAlgorithm</name></type> <name>algorithm</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>NinePatchException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>algorithm</name></name> <operator>=</operator> <name>algorithm</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>BufferedImage</name></type> <name>trimmedImage</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>trim9PBorder</name></name><argument_list>(<argument><expr><name>inputImage</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>trimmedImage</name> <operator>=</operator> <call><name><name>algorithm</name><operator>.</operator><name>scale</name></name><argument_list>(<argument><expr><name>trimmedImage</name></expr></argument>, <argument><expr><name><name>dimensions</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>dimensions</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>BufferedImage</name></type> <name>borderImage</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><call><name><name>trimmedImage</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><call><name><name>trimmedImage</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>borderImage</name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>generateBordersImage</name></name><argument_list>(<argument><expr><name>inputImage</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>rgbArray</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>w</name> <operator>*</operator> <name>h</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>trimmedImage</name><operator>.</operator><name>getRGB</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>rgbArray</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>borderImage</name><operator>.</operator><name>setRGB</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>rgbArray</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rgbArray</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>

        <return>return <expr><name>borderImage</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>BufferedImage</name></type> <name>trim9PBorder</name><parameter_list>(<parameter><decl><type><name>BufferedImage</name></type> <name>inputImage</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>BufferedImage</name></type> <name>trimedImage</name> <init>= <expr><operator>new</operator> <call><name>BufferedImage</name><argument_list>(<argument><expr><call><name><name>inputImage</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>inputImage</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>BufferedImage</name><operator>.</operator><name>TYPE_INT_ARGB</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Graphics2D</name></type> <name>g</name> <init>= <expr><call><name><name>trimedImage</name><operator>.</operator><name>createGraphics</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>drawImage</name></name><argument_list>(<argument><expr><name>inputImage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>trimedImage</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>trimedImage</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>inputImage</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>inputImage</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>trimedImage</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>enforceBorderColors</name><parameter_list>(<parameter><decl><type><name>BufferedImage</name></type> <name>inputImage</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Graphics2D</name></type> <name>g</name> <init>= <expr><call><name><name>inputImage</name><operator>.</operator><name>createGraphics</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>setBackground</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Color</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>clearRect</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>inputImage</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>inputImage</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><call><name><name>inputImage</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><call><name><name>inputImage</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>rgb</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>w</name> <operator>*</operator> <name>h</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>inputImage</name><operator>.</operator><name>getRGB</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>rgb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rgb</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0xff000000</literal> <operator>&amp;</operator> <name><name>rgb</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>rgb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xff000000</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>inputImage</name><operator>.</operator><name>setRGB</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>rgb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>inputImage</name><operator>.</operator><name>setRGB</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>inputImage</name><operator>.</operator><name>setRGB</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>inputImage</name><operator>.</operator><name>setRGB</name></name><argument_list>(<argument><expr><name>w</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>inputImage</name><operator>.</operator><name>setRGB</name></name><argument_list>(<argument><expr><name>w</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>BufferedImage</name></type> <name>generateBordersImage</name><parameter_list>(<parameter><decl><type><name>BufferedImage</name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>trimedWidth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>trimedHeight</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>NinePatchException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>BufferedImage</name></type> <name>finalBorder</name> <init>= <expr><operator>new</operator> <call><name>BufferedImage</name><argument_list>(<argument><expr><name>trimedWidth</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>trimedHeight</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>BufferedImage</name><operator>.</operator><name>TYPE_INT_ARGB</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>cutW</name> <init>= <expr><call><name><name>source</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>cutH</name> <init>= <expr><call><name><name>source</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">// left border</comment>
        <decl_stmt><decl><type><name>BufferedImage</name></type> <name>leftBorder</name> <init>= <expr><operator>new</operator> <call><name>BufferedImage</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cutH</name></expr></argument>, <argument><expr><name><name>BufferedImage</name><operator>.</operator><name>TYPE_INT_ARGB</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>leftBorder</name><operator>.</operator><name>setRGB</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cutH</name></expr></argument>, <argument><expr><call><name><name>source</name><operator>.</operator><name>getRGB</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cutH</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>verifyBorderImage</name></name><argument_list>(<argument><expr><name>leftBorder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>leftBorder</name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>resizeBorder</name></name><argument_list>(<argument><expr><name>leftBorder</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>trimedHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>finalBorder</name><operator>.</operator><name>setRGB</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>trimedHeight</name></expr></argument>, <argument><expr><call><name><name>leftBorder</name><operator>.</operator><name>getRGB</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>trimedHeight</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// right border</comment>
        <decl_stmt><decl><type><name>BufferedImage</name></type> <name>rightBorder</name> <init>= <expr><operator>new</operator> <call><name>BufferedImage</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cutH</name></expr></argument>, <argument><expr><name><name>BufferedImage</name><operator>.</operator><name>TYPE_INT_ARGB</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rightBorder</name><operator>.</operator><name>setRGB</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cutH</name></expr></argument>, <argument><expr><call><name><name>source</name><operator>.</operator><name>getRGB</name></name><argument_list>(<argument><expr><name>cutW</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cutH</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>verifyBorderImage</name></name><argument_list>(<argument><expr><name>rightBorder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rightBorder</name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>resizeBorder</name></name><argument_list>(<argument><expr><name>rightBorder</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>trimedHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>finalBorder</name><operator>.</operator><name>setRGB</name></name><argument_list>(<argument><expr><name>trimedWidth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>trimedHeight</name></expr></argument>, <argument><expr><call><name><name>rightBorder</name><operator>.</operator><name>getRGB</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>trimedHeight</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// top border</comment>
        <decl_stmt><decl><type><name>BufferedImage</name></type> <name>topBorder</name> <init>= <expr><operator>new</operator> <call><name>BufferedImage</name><argument_list>(<argument><expr><name>cutW</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>BufferedImage</name><operator>.</operator><name>TYPE_INT_ARGB</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>topBorder</name><operator>.</operator><name>setRGB</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cutW</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>source</name><operator>.</operator><name>getRGB</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cutW</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cutW</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cutW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>verifyBorderImage</name></name><argument_list>(<argument><expr><name>topBorder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>topBorder</name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>resizeBorder</name></name><argument_list>(<argument><expr><name>topBorder</name></expr></argument>, <argument><expr><name>trimedWidth</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>finalBorder</name><operator>.</operator><name>setRGB</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>trimedWidth</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>topBorder</name><operator>.</operator><name>getRGB</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>trimedWidth</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>trimedWidth</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>trimedWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// bottom border</comment>
        <decl_stmt><decl><type><name>BufferedImage</name></type> <name>bottomBorder</name> <init>= <expr><operator>new</operator> <call><name>BufferedImage</name><argument_list>(<argument><expr><name>cutW</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>BufferedImage</name><operator>.</operator><name>TYPE_INT_ARGB</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>bottomBorder</name><operator>.</operator><name>setRGB</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cutW</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>source</name><operator>.</operator><name>getRGB</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cutH</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>cutW</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cutW</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cutW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>verifyBorderImage</name></name><argument_list>(<argument><expr><name>bottomBorder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bottomBorder</name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>resizeBorder</name></name><argument_list>(<argument><expr><name>bottomBorder</name></expr></argument>, <argument><expr><name>trimedWidth</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>finalBorder</name><operator>.</operator><name>setRGB</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>trimedHeight</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>trimedWidth</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>bottomBorder</name><operator>.</operator><name>getRGB</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>trimedWidth</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>trimedWidth</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>trimedWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>finalBorder</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>BufferedImage</name></type> <name>resizeBorder</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>BufferedImage</name></type> <name>border</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>targetWidth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>targetHeight</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>targetWidth</name> <operator>&gt;</operator> <call><name><name>border</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call>
                <operator>||</operator> <name>targetHeight</name> <operator>&gt;</operator> <call><name><name>border</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>BufferedImage</name></type> <name>endImage</name> <init>= <expr><call><name><name>borderScalerAlgorithm</name><operator>.</operator><name>scale</name></name><argument_list>(<argument><expr><name>border</name></expr></argument>, <argument><expr><name>targetWidth</name></expr></argument>, <argument><expr><name>targetHeight</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>enforceBorderColors</name></name><argument_list>(<argument><expr><name>endImage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>endImage</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><call><name><name>border</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><call><name><name>border</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>data</name> <init>= <expr><call><name><name>border</name><operator>.</operator><name>getRGB</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>newData</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>targetWidth</name> <operator>*</operator> <name>targetHeight</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>float</name></type> <name>widthRatio</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>targetWidth</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call>
                <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>w</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>heightRatio</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>targetHeight</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call>
                <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>h</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0xff000000</literal> <operator>&amp;</operator> <name><name>data</name><index>[<expr><name>y</name> <operator>*</operator> <name>w</name> <operator>+</operator> <name>x</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>newX</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><name>x</name> <operator>*</operator> <name>widthRatio</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>targetWidth</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>newY</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><name>y</name> <operator>*</operator> <name>heightRatio</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>targetHeight</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><name><name>newData</name><index>[<expr><name>newY</name> <operator>*</operator> <name>targetWidth</name> <operator>+</operator> <name>newX</name></expr>]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><name>y</name> <operator>*</operator> <name>w</name> <operator>+</operator> <name>x</name></expr>]</index></name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>

        <decl_stmt><decl><type><name>BufferedImage</name></type> <name>img</name> <init>= <expr><operator>new</operator> <call><name>BufferedImage</name><argument_list>(<argument><expr><name>targetWidth</name></expr></argument>, <argument><expr><name>targetHeight</name></expr></argument>, <argument><expr><name><name>BufferedImage</name><operator>.</operator><name>TYPE_INT_ARGB</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>img</name><operator>.</operator><name>setRGB</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>targetWidth</name></expr></argument>, <argument><expr><name>targetHeight</name></expr></argument>, <argument><expr><name>newData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>targetWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>img</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>verifyBorderImage</name><parameter_list>(<parameter><decl><type><name>BufferedImage</name></type> <name>border</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>NinePatchException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>rgb</name> <init>= <expr><call><name><name>border</name><operator>.</operator><name>getRGB</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>border</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>border</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>border</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rgb</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0xff000000</literal> <operator>&amp;</operator> <name><name>rgb</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>rgb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0xff000000</literal> <operator>&amp;&amp;</operator> <name><name>rgb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0xffff0000</literal></expr>)</condition> <block>{<block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>NinePatchException</name><argument_list>()</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>
}</block></class>
</unit>
