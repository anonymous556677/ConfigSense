<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/density-converter/src/main/java/at/favre/tools/dconvert/DConvert.java"><comment type="block">/*
 *  Copyright 2016 Patrick Favre-Bulle
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name></name>;</package>

<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>arg</name><operator>.</operator><name>Arguments</name></name>;</import>
<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>arg</name><operator>.</operator><name>EPlatform</name></name>;</import>
<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>converters</name><operator>.</operator><name>IPlatformConverter</name></name>;</import>
<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>converters</name><operator>.</operator><name>postprocessing</name><operator>.</operator><name>IPostProcessor</name></name>;</import>
<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>converters</name><operator>.</operator><name>postprocessing</name><operator>.</operator><name>MozJpegProcessor</name></name>;</import>
<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>converters</name><operator>.</operator><name>postprocessing</name><operator>.</operator><name>PngCrushProcessor</name></name>;</import>
<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>converters</name><operator>.</operator><name>postprocessing</name><operator>.</operator><name>WebpProcessor</name></name>;</import>
<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>converters</name><operator>.</operator><name>scaling</name><operator>.</operator><name>ImageHandler</name></name>;</import>
<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>converters</name><operator>.</operator><name>scaling</name><operator>.</operator><name>ScaleAlgorithm</name></name>;</import>
<import>import <name><name>at</name><operator>.</operator><name>favre</name><operator>.</operator><name>tools</name><operator>.</operator><name>dconvert</name><operator>.</operator><name>util</name><operator>.</operator><name>MiscUtil</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>imageio</name><operator>.</operator><name>ImageIO</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>imageio</name><operator>.</operator><name>ImageReader</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>imageio</name><operator>.</operator><name>ImageWriter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>CountDownLatch</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This is the main class handling all of the converters and post processors.
 * This handles the threading and orchestration of the threads.
 * &lt;p&gt;
 * All user interfaces will call this class to execute.
 */</comment>
<class><specifier>public</specifier> class <name>DConvert</name> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>CountDownLatch</name></type> <name>mainLatch</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>HandlerCallback</name></type> <name>handlerCallback</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>beginMs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>StringBuilder</name></type> <name>logStringBuilder</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Starts the execution of the dconvert
     *
     * @param args                  from user interface
     * @param blockingWaitForFinish if true will block the thread until all threads are finished
     * @param callback              main callback
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>Arguments</name></type> <name>args</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>blockingWaitForFinish</name></decl></parameter>, <parameter><decl><type><name>HandlerCallback</name></type> <name>callback</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>beginMs</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>handlerCallback</name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>logStringBuilder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"registered image readers:\n"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name>getRegisteredImageReadersAndWriters</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logStringBuilder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"begin execution using "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>threadCount</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" theads\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>logStringBuilder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"args: "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>args</name><operator>.</operator><name>filesToProcess</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>IPlatformConverter</name></argument>&gt;</argument_list></name></type> <name>converters</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>IPostProcessor</name></argument>&gt;</argument_list></name></type> <name>postProcessors</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name>EPlatform</name></type> <name>ePlatform</name> <range>: <expr><name><name>args</name><operator>.</operator><name>platform</name></name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>logStringBuilder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"add "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>ePlatform</name><operator>.</operator><name>getConverter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>converters</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>ePlatform</name><operator>.</operator><name>getConverter</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>

            <if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>clearDirBeforeConvert</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>logStringBuilder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"clear out dirs before convert\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>IPlatformConverter</name></type> <name>converter</name> <range>: <expr><name>converters</name></expr></range></decl></init>)</control> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>converter</name><operator>.</operator><name>clean</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>enablePngCrush</name></name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>IPostProcessor</name></type> <name>postProcessor</name> <init>= <expr><operator>new</operator> <call><name>PngCrushProcessor</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>postProcessor</name><operator>.</operator><name>isSupported</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>logStringBuilder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"add pngcrush postprocessor\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>postProcessors</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>postProcessor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name><name>logStringBuilder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"WARNING: Tool 'pngcrush' cannot be accessed. Is it set in PATH?\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>postConvertWebp</name></name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>IPostProcessor</name></type> <name>postProcessor</name> <init>= <expr><operator>new</operator> <call><name>WebpProcessor</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>postProcessor</name><operator>.</operator><name>isSupported</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>logStringBuilder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"add cwebp postprocessor\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>postProcessors</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>postProcessor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name><name>logStringBuilder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"WARNING: Tool 'cwebp' cannot be accessed. Is it set in PATH?\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>args</name><operator>.</operator><name>enableMozJpeg</name></name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>IPostProcessor</name></type> <name>postProcessor</name> <init>= <expr><operator>new</operator> <call><name>MozJpegProcessor</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>postProcessor</name><operator>.</operator><name>isSupported</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>logStringBuilder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"add mozJpeg postprocessor\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>postProcessors</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>postProcessor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name><name>logStringBuilder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"WARNING: Tool 'jpegtran' cannot be accessed. Is it set in PATH?\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>convertJobs</name> <init>= <expr><call><name><name>args</name><operator>.</operator><name>filesToProcess</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>*</operator> <call><name><name>converters</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>postProcessorJobs</name> <init>= <expr><name>convertJobs</name> <operator>*</operator> <call><name><name>postProcessors</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>float</name></type> <name>convertPercentage</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <name>convertJobs</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><name>convertJobs</name> <operator>+</operator> <name>postProcessorJobs</name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>postProcessPercentage</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <name>postProcessorJobs</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><name>convertJobs</name> <operator>+</operator> <name>postProcessorJobs</name><operator>)</operator></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>mainLatch</name> <operator>=</operator> <operator>new</operator> <call><name>CountDownLatch</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for>for <control>(<init><decl><type><name>File</name></type> <name>srcFile</name> <range>: <expr><name><name>args</name><operator>.</operator><name>filesToProcess</name></name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>logStringBuilder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"add "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>srcFile</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" to processing queue\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>srcFile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>srcFile</name><operator>.</operator><name>isFile</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"srcFile "</literal> <operator>+</operator> <name>srcFile</name> <operator>+</operator> <literal type="string">" does not exist"</literal></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>

            <expr_stmt><expr><operator>new</operator> <call><name><name>WorkerHandler</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>converters</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>WorkerHandler</name><operator>.</operator><name>Callback</name></name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <type><specifier>public</specifier> <name>void</name></type> <name>onProgress</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>percent</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>handlerCallback</name><operator>.</operator><name>onProgress</name></name><argument_list>(<argument><expr><name>convertPercentage</name> <operator>*</operator> <name>percent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></function>

                <function><annotation>@<name>Override</name></annotation>
                <type><specifier>public</specifier> <name>void</name></type> <name>onFinished</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>finishedJobsConverters</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>outFiles</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>logConverters</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Exception</name></argument>&gt;</argument_list></name></type> <name>exceptionsConverters</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>haltedDuringProcessConverters</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>logStringBuilder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>logConverters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>haltedDuringProcessConverters</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>informFinished</name><argument_list>(<argument><expr><name>finishedJobsConverters</name></expr></argument>, <argument><expr><name>exceptionsConverters</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><operator>new</operator> <call><name><name>WorkerHandler</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>postProcessors</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>WorkerHandler</name><operator>.</operator><name>Callback</name></name></super><argument_list>()</argument_list> <block>{
                            <function><annotation>@<name>Override</name></annotation>
                            <type><specifier>public</specifier> <name>void</name></type> <name>onProgress</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>percent</name></decl></parameter>)</parameter_list> <block>{<block_content>
                                <expr_stmt><expr><call><name><name>handlerCallback</name><operator>.</operator><name>onProgress</name></name><argument_list>(<argument><expr><name>convertPercentage</name> <operator>+</operator> <operator>(</operator><name>postProcessPercentage</name> <operator>*</operator> <name>percent</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></function>

                            <function><annotation>@<name>Override</name></annotation>
                            <type><specifier>public</specifier> <name>void</name></type> <name>onFinished</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>finishedJobsPostProcessors</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>File</name></argument>&gt;</argument_list></name></type> <name>outFiles</name></decl></parameter>, <parameter><decl><type><name>StringBuilder</name></type> <name>log</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Exception</name></argument>&gt;</argument_list></name></type> <name>exceptions</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>haltedDuringProcess</name></decl></parameter>)</parameter_list> <block>{<block_content>
                                <expr_stmt><expr><call><name><name>exceptionsConverters</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>exceptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name><name>logStringBuilder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name>informFinished</name><argument_list>(<argument><expr><name>finishedJobsPostProcessors</name> <operator>+</operator> <name>finishedJobsConverters</name></expr></argument>, <argument><expr><name>exceptionsConverters</name></expr></argument>, <argument><expr><name>haltedDuringProcess</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></function>
                        }</block></class></expr></argument>)</argument_list></call><operator>.</operator><call><name>start</name><argument_list>(<argument><expr><name>outFiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></function>
            }</block></class></expr></argument>)</argument_list></call><operator>.</operator><call><name>start</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>filesToProcess</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>blockingWaitForFinish</name></expr>)</condition> <block>{<block_content>
                <try>try <block>{<block_content>
                    <expr_stmt><expr><call><name><name>mainLatch</name><operator>.</operator><name>await</name></name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MINUTES</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></catch></try>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>logStringBuilder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"no files to convert\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>informFinished</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>informFinished</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>finishedJobs</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Exception</name></argument>&gt;</argument_list></name></type> <name>exceptions</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>haltedDuringProcess</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>gc</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printTrace</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>handlerCallback</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>mainLatch</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>mainLatch</name><operator>.</operator><name>countDown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <for>for <control>(<init><decl><type><name>Exception</name></type> <name>exception</name> <range>: <expr><name>exceptions</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>logStringBuilder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>MiscUtil</name><operator>.</operator><name>getStackTrace</name></name><argument_list>(<argument><expr><name>exception</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name><name>handlerCallback</name><operator>.</operator><name>onFinished</name></name><argument_list>(<argument><expr><name>finishedJobs</name></expr></argument>, <argument><expr><name>exceptions</name></expr></argument>, <argument><expr><operator>(</operator><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>beginMs</name><operator>)</operator></expr></argument>, <argument><expr><name>haltedDuringProcess</name></expr></argument>, <argument><expr><call><name><name>logStringBuilder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <interface><specifier>public</specifier> interface <name>HandlerCallback</name> <block>{
        <function_decl><type><name>void</name></type> <name>onProgress</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>progress</name></decl></parameter>)</parameter_list>;</function_decl>

        <function_decl><type><name>void</name></type> <name>onFinished</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>finishedJobs</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Exception</name></argument>&gt;</argument_list></name></type> <name>exceptions</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>haltedDuringProcess</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>log</name></decl></parameter>)</parameter_list>;</function_decl>
    }</block></interface>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>getRegisteredImageReadersAndWriters</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>formats</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"JPEG"</literal></expr>, <expr><literal type="string">"PNG"</literal></expr>, <expr><literal type="string">"TIFF"</literal></expr>, <expr><literal type="string">"PSD"</literal></expr>, <expr><literal type="string">"SVG"</literal></expr>, <expr><literal type="string">"BMP"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>format</name> <range>: <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>ImageReader</name></argument>&gt;</argument_list></name></type> <name>reader</name> <init>= <expr><call><name><name>ImageIO</name><operator>.</operator><name>getImageReadersByFormatName</name></name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>reader</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>ImageReader</name></type> <name>next</name> <init>= <expr><call><name><name>reader</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"reader: "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
            <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>ImageWriter</name></argument>&gt;</argument_list></name></type> <name>writer</name> <init>= <expr><call><name><name>ImageIO</name><operator>.</operator><name>getImageWritersByFormatName</name></name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>writer</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>ImageWriter</name></type> <name>next</name> <init>= <expr><call><name><name>writer</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"writer: "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
        </block_content>}</block></for>
        <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>printTrace</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>ImageHandler</name><operator>.</operator><name>TEST_MODE</name></name></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>ScaleAlgorithm</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>ImageHandler</name><operator>.</operator><name>traceMap</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">": "</literal> <operator>+</operator> <call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>US</name></name></expr></argument>, <argument><expr><literal type="string">"%.2f"</literal></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000000.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>
