<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/index/Index.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>index</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>api</name><operator>.</operator><name>ErrorCode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>query</name><operator>.</operator><name>AllColumnsForPlan</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>DbObject</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>SessionLocal</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>DbException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>Trace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>Row</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>RowFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>SearchRow</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>SortOrder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>SchemaObject</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>Column</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>IndexColumn</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>Table</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>TableFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>StringUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>CompareMode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>DataType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueNull</name></name>;</import>

<comment type="block" format="javadoc">/**
 * An index. Indexes are used to speed up searching data.
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>Index</name> <super_list><extends>extends <super><name>SchemaObject</name></super></extends></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * Check that the index columns are not CLOB or BLOB.
     *
     * @param columns the columns
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>static</specifier> <name>void</name></type> <name>checkIndexColumnTypes</name><parameter_list>(<parameter><decl><type><name><name>IndexColumn</name><index>[]</index></name></type> <name>columns</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>IndexColumn</name></type> <name>c</name> <range>: <expr><name>columns</name></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>DataType</name><operator>.</operator><name>isIndexable</name></name><argument_list>(<argument><expr><call><name><name>c</name><operator>.</operator><name>column</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getUnsupportedException</name></name><argument_list>(<argument><expr><literal type="string">"Index on column: "</literal> <operator>+</operator> <call><name><name>c</name><operator>.</operator><name>column</name><operator>.</operator><name>getCreateSQL</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Columns of this index.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>IndexColumn</name><index>[]</index></name></type> <name>indexColumns</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Table columns used in this index.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Column</name><index>[]</index></name></type> <name>columns</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Identities of table columns.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>int</name><index>[]</index></name></type> <name>columnIds</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Count of unique columns. Unique columns, if any, are always first columns
     * in the lists.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>int</name></type> <name>uniqueColumnColumn</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The table.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>Table</name></type> <name>table</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The index type.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>IndexType</name></type> <name>indexType</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>RowFactory</name></type> <name>rowFactory</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>RowFactory</name></type> <name>uniqueRowFactory</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Initialize the index.
     *
     * @param newTable the table
     * @param id the object id
     * @param name the index name
     * @param newIndexColumns the columns that are indexed or null if this is
     *            not yet known
     * @param uniqueColumnCount count of unique columns
     * @param newIndexType the index type
     */</comment>
    <constructor><specifier>protected</specifier> <name>Index</name><parameter_list>(<parameter><decl><type><name>Table</name></type> <name>newTable</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>IndexColumn</name><index>[]</index></name></type> <name>newIndexColumns</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>uniqueColumnCount</name></decl></parameter>,
            <parameter><decl><type><name>IndexType</name></type> <name>newIndexType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><call><name><name>newTable</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>Trace</name><operator>.</operator><name>INDEX</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>uniqueColumnColumn</name></name> <operator>=</operator> <name>uniqueColumnCount</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>indexType</name></name> <operator>=</operator> <name>newIndexType</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>table</name></name> <operator>=</operator> <name>newTable</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>newIndexColumns</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>indexColumns</name></name> <operator>=</operator> <name>newIndexColumns</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>columns</name> <operator>=</operator> <operator>new</operator> <name><name>Column</name><index>[<expr><name><name>newIndexColumns</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>columns</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>columnIds</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><name>len</name></expr>]</index></name></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Column</name></type> <name>col</name> <init>= <expr><name><name>newIndexColumns</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>column</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>columns</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>columnIds</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>col</name><operator>.</operator><name>getColumnId</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>RowFactory</name></type> <name>databaseRowFactory</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getRowFactory</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CompareMode</name></type> <name>compareMode</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getCompareMode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Column</name><index>[]</index></name></type> <name>tableColumns</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getColumns</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>rowFactory</name> <operator>=</operator> <call><name><name>databaseRowFactory</name><operator>.</operator><name>createRowFactory</name></name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><name>compareMode</name></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>tableColumns</name></expr></argument>,
                <argument><expr><ternary><condition><expr><call><name><name>newIndexType</name><operator>.</operator><name>isScan</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><name>newIndexColumns</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>RowFactory</name></type> <name>uniqueRowFactory</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>uniqueColumnCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>newIndexColumns</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>uniqueColumnCount</name> <operator>==</operator> <name><name>newIndexColumns</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>uniqueRowFactory</name> <operator>=</operator> <name>rowFactory</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>uniqueRowFactory</name> <operator>=</operator> <call><name><name>databaseRowFactory</name><operator>.</operator><name>createRowFactory</name></name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><name>compareMode</name></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>tableColumns</name></expr></argument>,
                        <argument><expr><call><name><name>Arrays</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><name>newIndexColumns</name></expr></argument>, <argument><expr><name>uniqueColumnCount</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>uniqueRowFactory</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>uniqueRowFactory</name></name> <operator>=</operator> <name>uniqueRowFactory</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>getType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>DbObject</name><operator>.</operator><name>INDEX</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>removeChildrenAndResources</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>table</name><operator>.</operator><name>removeIndex</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>remove</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>removeMeta</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>isHidden</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>table</name><operator>.</operator><name>isHidden</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getCreateSQLForCopy</name><parameter_list>(<parameter><decl><type><name>Table</name></type> <name>targetTable</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>quotedName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><literal type="string">"CREATE "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>indexType</name><operator>.</operator><name>getSQL</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>table</name><operator>.</operator><name>isHidden</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"IF NOT EXISTS "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>quotedName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" ON "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>targetTable</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>DEFAULT_SQL_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>comment</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" COMMENT "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>StringUtils</name><operator>.</operator><name>quoteStringSQL</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>getColumnListSQL</name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>DEFAULT_SQL_FLAGS</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the list of columns as a string.
     *
     * @param sqlFlags formatting flags
     * @return the list of columns
     */</comment>
    <function><type><specifier>private</specifier> <name>StringBuilder</name></type> <name>getColumnListSQL</name><parameter_list>(<parameter><decl><type><name>StringBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sqlFlags</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><name><name>indexColumns</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>uniqueColumnColumn</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>uniqueColumnColumn</name> <operator>&lt;</operator> <name>length</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>IndexColumn</name><operator>.</operator><name>writeColumns</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>indexColumns</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>uniqueColumnColumn</name></expr></argument>, <argument><expr><name>sqlFlags</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">") INCLUDE("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>IndexColumn</name><operator>.</operator><name>writeColumns</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>indexColumns</name></expr></argument>, <argument><expr><name>uniqueColumnColumn</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>sqlFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>IndexColumn</name><operator>.</operator><name>writeColumns</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>indexColumns</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>sqlFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getCreateSQL</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getCreateSQLForCopy</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><call><name>getSQL</name><argument_list>(<argument><expr><name>DEFAULT_SQL_FLAGS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the message to show in a EXPLAIN statement.
     *
     * @return the plan
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getPlanSQL</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getSQL</name><argument_list>(<argument><expr><name>TRACE_SQL_FLAGS</name> <operator>|</operator> <name>ADD_PLAN_INFORMATION</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Close this index.
     *
     * @param session the session used to write data
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>close</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Add a row to the index.
     *
     * @param session the session to use
     * @param row the row to add
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Row</name></type> <name>row</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Remove a row from the index.
     *
     * @param session the session
     * @param row the row
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>remove</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Row</name></type> <name>row</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Update index after row change.
     *
     * @param session the session
     * @param oldRow row before the update
     * @param newRow row after the update
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Row</name></type> <name>oldRow</name></decl></parameter>, <parameter><decl><type><name>Row</name></type> <name>newRow</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>remove</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>oldRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>newRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns {@code true} if {@code find()} implementation performs scan over all
     * index, {@code false} if {@code find()} performs the fast lookup.
     *
     * @return {@code true} if {@code find()} implementation performs scan over all
     *         index, {@code false} if {@code find()} performs the fast lookup
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isFindUsingFullTableScan</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Find a row or a list of rows and create a cursor to iterate over the
     * result.
     *
     * @param session the session
     * @param first the first row, or null for no limit
     * @param last the last row, or null for no limit
     * @return the cursor to iterate over the results
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>Cursor</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>SearchRow</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>SearchRow</name></type> <name>last</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Estimate the cost to search for rows given the search mask.
     * There is one element per column in the search mask.
     * For possible search masks, see IndexCondition.
     *
     * @param session the session
     * @param masks per-column comparison bit masks, null means 'always false',
     *              see constants in IndexCondition
     * @param filters all joined table filters
     * @param filter the current table filter index
     * @param sortOrder the sort order
     * @param allColumnsSet the set of all columns
     * @return the estimated cost
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>double</name></type> <name>getCost</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>masks</name></decl></parameter>, <parameter><decl><type><name><name>TableFilter</name><index>[]</index></name></type> <name>filters</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filter</name></decl></parameter>,
            <parameter><decl><type><name>SortOrder</name></type> <name>sortOrder</name></decl></parameter>, <parameter><decl><type><name>AllColumnsForPlan</name></type> <name>allColumnsSet</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Remove the index.
     *
     * @param session the session
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>remove</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Remove all rows from the index.
     *
     * @param session the session
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>truncate</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Check if the index can directly look up the lowest or highest value of a
     * column.
     *
     * @return true if it can
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>canGetFirstOrLast</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check if the index can get the next higher value.
     *
     * @return true if it can
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>canFindNext</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Find a row or a list of rows that is larger and create a cursor to
     * iterate over the result.
     *
     * @param session the session
     * @param higherThan the lower limit (excluding)
     * @param last the last row, or null for no limit
     * @return the cursor
     */</comment>
    <function><type><specifier>public</specifier> <name>Cursor</name></type> <name>findNext</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>SearchRow</name></type> <name>higherThan</name></decl></parameter>, <parameter><decl><type><name>SearchRow</name></type> <name>last</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>(<argument><expr><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Find the first (or last) value of this index. The cursor returned is
     * positioned on the correct row, or on null if no row has been found.
     *
     * @param session the session
     * @param first true if the first (lowest for ascending indexes) or last
     *            value should be returned
     * @return a cursor (never null)
     */</comment>
    <function><type><specifier>public</specifier> <name>Cursor</name></type> <name>findFirstOrLast</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>first</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>(<argument><expr><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check if the index needs to be rebuilt.
     * This method is called after opening an index.
     *
     * @return true if a rebuild is required.
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>needRebuild</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Get the row count of this table, for the given session.
     *
     * @param session the session
     * @return the row count
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>long</name></type> <name>getRowCount</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Get the approximated row count for this table.
     *
     * @param session the session
     * @return the approximated row count
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>long</name></type> <name>getRowCountApproximation</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Get the used disk space for this index.
     *
     * @return the estimated number of bytes
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getDiskSpaceUsed</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="number">0L</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Compare two rows.
     *
     * @param rowData the first row
     * @param compare the second row
     * @return 0 if both rows are equal, -1 if the first row is smaller,
     *         otherwise 1
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>compareRows</name><parameter_list>(<parameter><decl><type><name>SearchRow</name></type> <name>rowData</name></decl></parameter>, <parameter><decl><type><name>SearchRow</name></type> <name>compare</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>rowData</name> <operator>==</operator> <name>compare</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><name><name>indexColumns</name><operator>.</operator><name>length</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name><name>columnIds</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Value</name></type> <name>v1</name> <init>= <expr><call><name><name>rowData</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Value</name></type> <name>v2</name> <init>= <expr><call><name><name>compare</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>v1</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>v2</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <comment type="line">// can't compare further</comment>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>compareValues</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>, <argument><expr><name><name>indexColumns</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sortType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>c</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>int</name></type> <name>compareValues</name><parameter_list>(<parameter><decl><type><name>Value</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sortType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>b</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>aNull</name> <init>= <expr><name>a</name> <operator>==</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>aNull</name> <operator>||</operator> <name>b</name> <operator>==</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>table</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDefaultNullOrdering</name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareNull</name><argument_list>(<argument><expr><name>aNull</name></expr></argument>, <argument><expr><name>sortType</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>comp</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>compareValues</name></name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sortType</name> <operator>&amp;</operator> <name><name>SortOrder</name><operator>.</operator><name>DESCENDING</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>comp</name> <operator>=</operator> <operator>-</operator><name>comp</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>comp</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the index of a column in the list of index columns
     *
     * @param col the column
     * @return the index (0 meaning first column)
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getColumnIndex</name><parameter_list>(<parameter><decl><type><name>Column</name></type> <name>col</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><name><name>columns</name><operator>.</operator><name>length</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>columns</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>i</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check if the given column is the first for this index
     *
     * @param column the column
     * @return true if the given columns is the first
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isFirstColumn</name><parameter_list>(<parameter><decl><type><name>Column</name></type> <name>column</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>column</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>columns</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the indexed columns as index columns (with ordering information).
     *
     * @return the index columns
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name><name>IndexColumn</name><index>[]</index></name></type> <name>getIndexColumns</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>indexColumns</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the indexed columns.
     *
     * @return the columns
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name><name>Column</name><index>[]</index></name></type> <name>getColumns</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>columns</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns count of unique columns. Unique columns, if any, are always first
     * columns in the lists. Unique indexes may have additional indexed
     * non-unique columns.
     *
     * @return count of unique columns, or 0 if index isn't unique
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>getUniqueColumnCount</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>uniqueColumnColumn</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the index type.
     *
     * @return the index type
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>IndexType</name></type> <name>getIndexType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>indexType</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the table on which this index is based.
     *
     * @return the table
     */</comment>
    <function><type><specifier>public</specifier> <name>Table</name></type> <name>getTable</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>table</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the row with the given key.
     *
     * @param session the session
     * @param key the unique key
     * @return the row
     */</comment>
    <function><type><specifier>public</specifier> <name>Row</name></type> <name>getRow</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getUnsupportedException</name></name><argument_list>(<argument><expr><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Does this index support lookup by row id?
     *
     * @return true if it does
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isRowIdIndex</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Can this index iterate over all rows?
     *
     * @return true if it can
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>canScan</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create a duplicate key exception with a message that contains the index
     * name.
     *
     * @param key the key values
     * @return the exception
     */</comment>
    <function><type><specifier>public</specifier> <name>DbException</name></type> <name>getDuplicateKeyException</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>getSQL</name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>TRACE_SQL_FLAGS</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" ON "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>table</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>TRACE_SQL_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getColumnListSQL</name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>TRACE_SQL_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>key</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" VALUES "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>DbException</name></type> <name>e</name> <init>= <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>DUPLICATE_KEY_1</name></name></expr></argument>, <argument><expr><call><name><name>builder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>setSource</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>e</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get "PRIMARY KEY ON &amp;lt;table&amp;gt; [(column)]".
     *
     * @param mainIndexColumn the column index
     * @return the message
     */</comment>
    <function><type><specifier>protected</specifier> <name>StringBuilder</name></type> <name>getDuplicatePrimaryKeyMessage</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mainIndexColumn</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><literal type="string">"PRIMARY KEY ON "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>table</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>TRACE_SQL_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>mainIndexColumn</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>mainIndexColumn</name> <operator>&lt;</operator> <name><name>indexColumns</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>indexColumns</name><index>[<expr><name>mainIndexColumn</name></expr>]</index></name><operator>.</operator><call><name>getSQL</name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>TRACE_SQL_FLAGS</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>builder</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Calculate the cost for the given mask as if this index was a typical
     * b-tree range index. This is the estimated cost required to search one
     * row, and then iterate over the given number of rows.
     *
     * @param masks the IndexCondition search masks, one for each column in the
     *            table
     * @param rowCount the number of rows in the index
     * @param filters all joined table filters
     * @param filter the current table filter index
     * @param sortOrder the sort order
     * @param isScanIndex whether this is a "table scan" index
     * @param allColumnsSet the set of all columns
     * @return the estimated cost
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>final</specifier> <name>long</name></type> <name>getCostRangeIndex</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>masks</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>rowCount</name></decl></parameter>, <parameter><decl><type><name><name>TableFilter</name><index>[]</index></name></type> <name>filters</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filter</name></decl></parameter>,
            <parameter><decl><type><name>SortOrder</name></type> <name>sortOrder</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isScanIndex</name></decl></parameter>, <parameter><decl><type><name>AllColumnsForPlan</name></type> <name>allColumnsSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>rowCount</name> <operator>+=</operator> <name><name>Constants</name><operator>.</operator><name>COST_ROW_OFFSET</name></name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>totalSelectivity</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>rowsCost</name> <init>= <expr><name>rowCount</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>masks</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><name><name>columns</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>tryAdditional</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Column</name></type> <name>column</name> <init>= <expr><name><name>columns</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name><name>column</name><operator>.</operator><name>getColumnId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>mask</name> <init>= <expr><name><name>masks</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>mask</name> <operator>&amp;</operator> <name><name>IndexCondition</name><operator>.</operator><name>EQUALITY</name></name><operator>)</operator> <operator>==</operator> <name><name>IndexCondition</name><operator>.</operator><name>EQUALITY</name></name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <name>uniqueColumnColumn</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>rowsCost</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>totalSelectivity</name> <operator>=</operator> <literal type="number">100</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><literal type="number">100</literal> <operator>-</operator> <name>totalSelectivity</name><operator>)</operator> <operator>*</operator>
                            <operator>(</operator><literal type="number">100</literal> <operator>-</operator> <call><name><name>column</name><operator>.</operator><name>getSelectivity</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">100</literal><operator>)</operator></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>long</name></type> <name>distinctRows</name> <init>= <expr><name>rowCount</name> <operator>*</operator> <name>totalSelectivity</name> <operator>/</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>distinctRows</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>distinctRows</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>rowsCost</name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>rowCount</name> <operator>/</operator> <name>distinctRows</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>mask</name> <operator>&amp;</operator> <name><name>IndexCondition</name><operator>.</operator><name>RANGE</name></name><operator>)</operator> <operator>==</operator> <name><name>IndexCondition</name><operator>.</operator><name>RANGE</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>rowsCost</name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <name>rowsCost</name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>tryAdditional</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>mask</name> <operator>&amp;</operator> <name><name>IndexCondition</name><operator>.</operator><name>START</name></name><operator>)</operator> <operator>==</operator> <name><name>IndexCondition</name><operator>.</operator><name>START</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>rowsCost</name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <name>rowsCost</name> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>tryAdditional</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>mask</name> <operator>&amp;</operator> <name><name>IndexCondition</name><operator>.</operator><name>END</name></name><operator>)</operator> <operator>==</operator> <name><name>IndexCondition</name><operator>.</operator><name>END</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>rowsCost</name> <operator>=</operator> <name>rowsCost</name> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>tryAdditional</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>mask</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <comment type="line">// Adjust counter of used columns (i)</comment>
                        <expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <break>break;</break>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></while>
            <comment type="line">// Some additional columns can still be used</comment>
            <if_stmt><if>if <condition>(<expr><name>tryAdditional</name></expr>)</condition> <block>{<block_content>
                <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <name><name>masks</name><index>[<expr><name><name>columns</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getColumnId</name><argument_list>()</argument_list></call></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>rowsCost</name><operator>--</operator></expr>;</expr_stmt>
                </block_content>}</block></while>
            </block_content>}</block></if></if_stmt>
            <comment type="line">// Increase cost of indexes with additional unused columns</comment>
            <expr_stmt><expr><name>rowsCost</name> <operator>+=</operator> <name>len</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// If the ORDER BY clause matches the ordering of this index,</comment>
        <comment type="line">// it will be cheaper than another index, so adjust the cost</comment>
        <comment type="line">// accordingly.</comment>
        <decl_stmt><decl><type><name>long</name></type> <name>sortingCost</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>sortOrder</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>sortingCost</name> <operator>=</operator> <literal type="number">100</literal> <operator>+</operator> <name>rowCount</name> <operator>/</operator> <literal type="number">10</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>sortOrder</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>isScanIndex</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>sortOrderMatches</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>coveringCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>sortTypes</name> <init>= <expr><call><name><name>sortOrder</name><operator>.</operator><name>getSortTypesWithNullOrdering</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>TableFilter</name></type> <name>tableFilter</name> <init>= <expr><ternary><condition><expr><name>filters</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><name><name>filters</name><index>[<expr><name>filter</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><name><name>sortTypes</name><operator>.</operator><name>length</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>indexColumns</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
                    <comment type="line">// We can still use this index if we are sorting by more</comment>
                    <comment type="line">// than it's columns, it's just that the coveringCount</comment>
                    <comment type="line">// is lower than with an index that contains</comment>
                    <comment type="line">// more of the order by columns.</comment>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>Column</name></type> <name>col</name> <init>= <expr><call><name><name>sortOrder</name><operator>.</operator><name>getColumn</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>tableFilter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>col</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>sortOrderMatches</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>IndexColumn</name></type> <name>indexCol</name> <init>= <expr><name><name>indexColumns</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>col</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>indexCol</name><operator>.</operator><name>column</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>sortOrderMatches</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>sortType</name> <init>= <expr><name><name>sortTypes</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>sortType</name> <operator>!=</operator> <name><name>indexCol</name><operator>.</operator><name>sortType</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>sortOrderMatches</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>coveringCount</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></for>
            <if_stmt><if>if <condition>(<expr><name>sortOrderMatches</name></expr>)</condition> <block>{<block_content>
                <comment type="line">// "coveringCount" makes sure that when we have two</comment>
                <comment type="line">// or more covering indexes, we choose the one</comment>
                <comment type="line">// that covers more.</comment>
                <expr_stmt><expr><name>sortingCost</name> <operator>=</operator> <literal type="number">100</literal> <operator>-</operator> <name>coveringCount</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// If we have two indexes with the same cost, and one of the indexes can</comment>
        <comment type="line">// satisfy the query without needing to read from the primary table</comment>
        <comment type="line">// (scan index), make that one slightly lower cost.</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>needsToReadFromScanIndex</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isScanIndex</name> <operator>&amp;&amp;</operator> <name>allColumnsSet</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>needsToReadFromScanIndex</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Column</name></argument>&gt;</argument_list></name></type> <name>foundCols</name> <init>= <expr><call><name><name>allColumnsSet</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name>getTable</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>foundCols</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>main</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getMainIndexColumn</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <label><name>loop</name>:</label> <for>for <control>(<init><decl><type><name>Column</name></type> <name>c</name> <range>: <expr><name>foundCols</name></expr></range></decl></init>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>getColumnId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <name><name>SearchRow</name><operator>.</operator><name>ROWID_INDEX</name></name> <operator>||</operator> <name>id</name> <operator>==</operator> <name>main</name></expr>)</condition> <block>{<block_content>
                        <continue>continue;</continue>
                    </block_content>}</block></if></if_stmt>
                    <for>for <control>(<init><decl><type><name>Column</name></type> <name>c2</name> <range>: <expr><name>columns</name></expr></range></decl></init>)</control> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>c2</name></expr>)</condition> <block>{<block_content>
                            <continue>continue <name>loop</name>;</continue>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                    <expr_stmt><expr><name>needsToReadFromScanIndex</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>needsToReadFromScanIndex</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>rc</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>isScanIndex</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>rowsCost</name> <operator>+</operator> <name>sortingCost</name> <operator>+</operator> <literal type="number">20</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>needsToReadFromScanIndex</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>rowsCost</name> <operator>+</operator> <name>rowsCost</name> <operator>+</operator> <name>sortingCost</name> <operator>+</operator> <literal type="number">20</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="line">// The (20-x) calculation makes sure that when we pick a covering</comment>
            <comment type="line">// index, we pick the covering index that has the smallest number of</comment>
            <comment type="line">// columns (the more columns we have in index - the higher cost).</comment>
            <comment type="line">// This is faster because a smaller index will fit into fewer data</comment>
            <comment type="line">// blocks.</comment>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>rowsCost</name> <operator>+</operator> <name>sortingCost</name> <operator>+</operator> <name><name>columns</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></function>


    <comment type="block" format="javadoc">/**
     * Check if this row may have duplicates with the same indexed values in the
     * current compatibility mode. Duplicates with {@code NULL} values are
     * allowed in some modes.
     *
     * @param searchRow
     *            the row to check
     * @return {@code true} if specified row may have duplicates,
     *         {@code false otherwise}
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>mayHaveNullDuplicates</name><parameter_list>(<parameter><decl><type><name>SearchRow</name></type> <name>searchRow</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><name>uniqueIndexNullsHandling</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>ALLOW_DUPLICATES_WITH_ANY_NULL</name></expr>:</case>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>uniqueColumnColumn</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name><name>columnIds</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>searchRow</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>)</condition> <block>{<block_content>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        <case>case <expr><name>ALLOW_DUPLICATES_WITH_ALL_NULLS</name></expr>:</case>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>uniqueColumnColumn</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name><name>columnIds</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>searchRow</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>)</condition> <block>{<block_content>
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        <default>default:</default>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>RowFactory</name></type> <name>getRowFactory</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>rowFactory</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>RowFactory</name></type> <name>getUniqueRowFactory</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>uniqueRowFactory</name></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>
