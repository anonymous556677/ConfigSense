<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/engine/SessionLocal.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>time</name><operator>.</operator><name>Instant</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>BitSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Random</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>WeakHashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicReference</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>api</name><operator>.</operator><name>ErrorCode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>api</name><operator>.</operator><name>JavaObjectSerializer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>Command</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>CommandInterface</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>Parser</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>Prepared</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>Analyze</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>constraint</name><operator>.</operator><name>Constraint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>index</name><operator>.</operator><name>Index</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>index</name><operator>.</operator><name>ViewIndex</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>jdbc</name><operator>.</operator><name>JdbcConnection</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>jdbc</name><operator>.</operator><name>meta</name><operator>.</operator><name>DatabaseMeta</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>jdbc</name><operator>.</operator><name>meta</name><operator>.</operator><name>DatabaseMetaLocal</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>DbException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>Trace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>TraceSystem</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>MVMap</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>db</name><operator>.</operator><name>MVIndex</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>db</name><operator>.</operator><name>MVTable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>db</name><operator>.</operator><name>Store</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>tx</name><operator>.</operator><name>Transaction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>tx</name><operator>.</operator><name>TransactionStore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>Row</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>Schema</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>Sequence</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>store</name><operator>.</operator><name>DataHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>store</name><operator>.</operator><name>InDoubtTransaction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>store</name><operator>.</operator><name>LobStorageFrontend</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>Table</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>DateTimeUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>HasSQL</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>NetworkConnectionInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>SmallLRUCache</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>TimeZoneProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>Utils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueLob</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueNull</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueTimestampTimeZone</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueVarchar</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>VersionedValue</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>lob</name><operator>.</operator><name>LobData</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>lob</name><operator>.</operator><name>LobDataDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>lob</name><operator>.</operator><name>LobDataInMemory</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A session represents an embedded database connection. When using the server
 * mode, this object resides on the server side and communicates with a
 * SessionRemote object on the client side.
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>SessionLocal</name> <super_list><extends>extends <super><name>Session</name></super></extends> <implements>implements <super><name><name>TransactionStore</name><operator>.</operator><name>RollbackListener</name></name></super></implements></super_list> <block>{

    <enum><specifier>public</specifier> enum <name>State</name> <block>{ <decl><name>INIT</name></decl>, <decl><name>RUNNING</name></decl>, <decl><name>BLOCKED</name></decl>, <decl><name>SLEEP</name></decl>, <decl><name>THROTTLED</name></decl>, <decl><name>SUSPENDED</name></decl>, <decl><name>CLOSED</name></decl> }</block></enum>

    <class><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>SequenceAndPrepared</name> <block>{

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Sequence</name></type> <name>sequence</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Prepared</name></type> <name>prepared</name></decl>;</decl_stmt>

        <constructor><name>SequenceAndPrepared</name><parameter_list>(<parameter><decl><type><name>Sequence</name></type> <name>sequence</name></decl></parameter>, <parameter><decl><type><name>Prepared</name></type> <name>prepared</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sequence</name></name> <operator>=</operator> <name>sequence</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>prepared</name></name> <operator>=</operator> <name>prepared</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="number">31</literal> <operator>*</operator> <operator>(</operator><literal type="number">31</literal> <operator>+</operator> <call><name><name>prepared</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>+</operator> <call><name><name>sequence</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>obj</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>obj</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>SequenceAndPrepared</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>SequenceAndPrepared</name></type> <name>other</name> <init>= <expr><operator>(</operator><name>SequenceAndPrepared</name><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>
            <return>return <expr><name>sequence</name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>sequence</name></name> <operator>&amp;&amp;</operator> <name>prepared</name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>prepared</name></name></expr>;</return>
        </block_content>}</block></function>

    }</block></class>

    <class><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>RowNumberAndValue</name> <block>{

        <decl_stmt><decl><type><name>long</name></type> <name>rowNumber</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Value</name></type> <name>nextValue</name></decl>;</decl_stmt>

        <constructor><name>RowNumberAndValue</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>rowNumber</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>nextValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>rowNumber</name></name> <operator>=</operator> <name>rowNumber</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>nextValue</name></name> <operator>=</operator> <name>nextValue</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

    }</block></class>

    <comment type="block" format="javadoc">/**
     * The prefix of generated identifiers. It may not have letters, because
     * they are case sensitive.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SYSTEM_IDENTIFIER_PREFIX</name> <init>= <expr><literal type="string">"_"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>nextSerialId</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Thread local session for comparison operations between different data types.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>ThreadLocal</name><argument_list type="generic">&lt;<argument><name>Session</name></argument>&gt;</argument_list></name></type> <name>THREAD_LOCAL_SESSION</name> <init>= <expr><operator>new</operator> <call><name><name>ThreadLocal</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><specifier>static</specifier> <name>Session</name></type> <name>getThreadLocalSession</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Session</name></type> <name>session</name> <init>= <expr><call><name><name>THREAD_LOCAL_SESSION</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>session</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>THREAD_LOCAL_SESSION</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>session</name></expr>;</return>
    </block_content>}</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>serialId</name> <init>= <expr><name>nextSerialId</name><operator>++</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Database</name></type> <name>database</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>User</name></type> <name>user</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>id</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>NetworkConnectionInfo</name></type> <name>networkConnectionInfo</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Table</name></argument>&gt;</argument_list></name></type> <name>locks</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>autoCommit</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Random</name></type> <name>random</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>lockTimeout</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>SequenceAndPrepared</name></argument>, <argument><name>RowNumberAndValue</name></argument>&gt;</argument_list></name></type> <name>nextValueFor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>WeakHashMap</name><argument_list type="generic">&lt;<argument><name>Sequence</name></argument>, <argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>currentValueFor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Value</name></type> <name>lastIdentity</name> <init>= <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Savepoint</name></argument>&gt;</argument_list></name></type> <name>savepoints</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Table</name></argument>&gt;</argument_list></name></type> <name>localTempTables</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Index</name></argument>&gt;</argument_list></name></type> <name>localTempTableIndexes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Constraint</name></argument>&gt;</argument_list></name></type> <name>localTempTableConstraints</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>throttleMs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>lastThrottleNs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Command</name></type> <name>currentCommand</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>allowLiterals</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>currentSchemaName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>String</name><index>[]</index></name></type> <name>schemaSearchPath</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Trace</name></type> <name>trace</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ValueLob</name></argument>&gt;</argument_list></name></type> <name>removeLobMap</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>systemIdentifier</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Procedure</name></argument>&gt;</argument_list></name></type> <name>procedures</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>autoCommitAtTransactionEnd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>currentTransactionName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>long</name></type> <name>cancelAtNs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ValueTimestampTimeZone</name></type> <name>sessionStart</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Instant</name></type> <name>commandStartOrEnd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ValueTimestampTimeZone</name></type> <name>currentTimestamp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>variables</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>queryTimeout</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>commitOrRollbackDisabled</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Table</name></type> <name>waitForLock</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Thread</name></type> <name>waitForLockThread</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>modificationId</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>objectId</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>queryCacheSize</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>SmallLRUCache</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Command</name></argument>&gt;</argument_list></name></type> <name>queryCache</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>modificationMetaID</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>createViewLevel</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name><name>SmallLRUCache</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>, <argument><name>ViewIndex</name></argument>&gt;</argument_list></name></type> <name>viewIndexCache</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>, <argument><name>ViewIndex</name></argument>&gt;</argument_list></name></type> <name>subQueryIndexCache</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>lazyQueryExecution</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>BitSet</name></type> <name>nonKeywords</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>TimeZoneProvider</name></type> <name>timeZone</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Tables marked for ANALYZE after the current transaction is committed.
     * Prevents us calling ANALYZE repeatedly in large transactions.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>Table</name></argument>&gt;</argument_list></name></type> <name>tablesToAnalyze</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Temporary LOBs from result sets. Those are kept for some time. The
     * problem is that transactions are committed before the result is returned,
     * and in some cases the next transaction is already started before the
     * result is read (for example when using the server mode, when accessing
     * metadata methods). We can't simply free those values up when starting the
     * next transaction, because they would be removed too early.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>LinkedList</name><argument_list type="generic">&lt;<argument><name>TimeoutValue</name></argument>&gt;</argument_list></name></type> <name>temporaryResultLobs</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The temporary LOBs that need to be removed on commit.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ValueLob</name></argument>&gt;</argument_list></name></type> <name>temporaryLobs</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Transaction</name></type> <name>transaction</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>AtomicReference</name><argument_list type="generic">&lt;<argument><name>State</name></argument>&gt;</argument_list></name></type> <name>state</name> <init>= <expr><operator>new</operator> <call><name><name>AtomicReference</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>State</name><operator>.</operator><name>INIT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>startStatement</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Isolation level.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>IsolationLevel</name></type> <name>isolationLevel</name> <init>= <expr><name><name>IsolationLevel</name><operator>.</operator><name>READ_COMMITTED</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The snapshot data modification id. If isolation level doesn't allow
     * non-repeatable reads the session uses a snapshot versions of data. After
     * commit or rollback these snapshots are discarded and cached results of
     * queries may became invalid. Commit and rollback allocate a new data
     * modification id and store it here to forbid usage of older results.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>snapshotDataModificationId</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Set of database object ids to be released at the end of transaction
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>BitSet</name></type> <name>idsToRelease</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Whether length in definitions of data types is truncated.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>truncateLargeLength</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Whether BINARY is parsed as VARBINARY.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>variableBinary</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Whether INFORMATION_SCHEMA contains old-style tables.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>oldInformationSchema</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Whether commands are executed in quirks mode to support scripts from older versions of H2.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>quirksMode</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>SessionLocal</name><parameter_list>(<parameter><decl><type><name>Database</name></type> <name>database</name></decl></parameter>, <parameter><decl><type><name>User</name></type> <name>user</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>database</name></name> <operator>=</operator> <name>database</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>queryTimeout</name></name> <operator>=</operator> <call><name><name>database</name><operator>.</operator><name>getSettings</name></name><argument_list>()</argument_list></call><operator>.</operator><name>maxQueryTimeout</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>queryCacheSize</name></name> <operator>=</operator> <call><name><name>database</name><operator>.</operator><name>getSettings</name></name><argument_list>()</argument_list></call><operator>.</operator><name>queryCacheSize</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>user</name></name> <operator>=</operator> <name>user</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lockTimeout</name></name> <operator>=</operator> <call><name><name>database</name><operator>.</operator><name>getLockTimeout</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Schema</name></type> <name>mainSchema</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getMainSchema</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>currentSchemaName</name></name> <operator>=</operator> <ternary><condition><expr><name>mainSchema</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>mainSchema</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr>
                </then><else>: <expr><call><name><name>database</name><operator>.</operator><name>sysIdentifier</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>SCHEMA_MAIN</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name>timeZone</name> <operator>=</operator> <call><name><name>DateTimeUtils</name><operator>.</operator><name>getTimeZone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>sessionStart</name> <operator>=</operator> <call><name><name>DateTimeUtils</name><operator>.</operator><name>currentTimestamp</name></name><argument_list>(<argument><expr><name>timeZone</name></expr></argument>, <argument><expr><name>commandStartOrEnd</name> <operator>=</operator> <call><name><name>Instant</name><operator>.</operator><name>now</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLazyQueryExecution</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>lazyQueryExecution</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lazyQueryExecution</name></name> <operator>=</operator> <name>lazyQueryExecution</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isLazyQueryExecution</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>lazyQueryExecution</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * This method is called before and after parsing of view definition and may
     * be called recursively.
     *
     * @param parsingView
     *            {@code true} if this method is called before parsing of view
     *            definition, {@code false} if it is called after it.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setParsingCreateView</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>parsingView</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>createViewLevel</name> <operator>+=</operator> <ternary><condition><expr><name>parsingView</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isParsingCreateView</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>createViewLevel</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getClusterServers</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>setCommitOrRollbackDisabled</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>old</name> <init>= <expr><name>commitOrRollbackDisabled</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>commitOrRollbackDisabled</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
        <return>return <expr><name>old</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>initVariables</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>variables</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>variables</name> <operator>=</operator> <call><name><name>database</name><operator>.</operator><name>newStringMap</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Set the value of the given variable for this session.
     *
     * @param name the name of the variable (may not be null)
     * @param value the new value (may not be null)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setVariable</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>initVariables</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>modificationId</name><operator>++</operator></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Value</name></type> <name>old</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>old</name> <operator>=</operator> <call><name><name>variables</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>value</name> <operator>instanceof</operator> <name>ValueLob</name></expr>)</condition> <block>{<block_content>
                <comment type="line">// link LOB values, to make sure we have our own object</comment>
                <expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ValueLob</name><operator>)</operator> <name>value</name><operator>)</operator><operator>.</operator><call><name>copy</name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><name><name>LobStorageFrontend</name><operator>.</operator><name>TABLE_ID_SESSION_VARIABLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>old</name> <operator>=</operator> <call><name><name>variables</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>old</name> <operator>instanceof</operator> <name>ValueLob</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><operator>(</operator><name>ValueLob</name><operator>)</operator> <name>old</name><operator>)</operator><operator>.</operator><call><name>remove</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the value of the specified user defined variable. This method always
     * returns a value; it returns ValueNull.INSTANCE if the variable doesn't
     * exist.
     *
     * @param name the variable name
     * @return the value, or NULL
     */</comment>
    <function><type><specifier>public</specifier> <name>Value</name></type> <name>getVariable</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>initVariables</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Value</name></type> <name>v</name> <init>= <expr><call><name><name>variables</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name>v</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr> </then><else>: <expr><name>v</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the list of variable names that are set for this session.
     *
     * @return the list of names
     */</comment>
    <function><type><specifier>public</specifier> <name><name>String</name><index>[]</index></name></type> <name>getVariableNames</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>variables</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <name><name>String</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>variables</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toArray</name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the local temporary table if one exists with that name, or null if
     * not.
     *
     * @param name the table name
     * @return the table, or null
     */</comment>
    <function><type><specifier>public</specifier> <name>Table</name></type> <name>findLocalTempTable</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>localTempTables</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>localTempTables</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Table</name></argument>&gt;</argument_list></name></type> <name>getLocalTempTables</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>localTempTables</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>localTempTables</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Add a local temporary table to this session.
     *
     * @param table the table to add
     * @throws DbException if a table with this name already exists
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addLocalTempTable</name><parameter_list>(<parameter><decl><type><name>Table</name></type> <name>table</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>localTempTables</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>localTempTables</name> <operator>=</operator> <call><name><name>database</name><operator>.</operator><name>newStringMap</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>localTempTables</name><operator>.</operator><name>putIfAbsent</name></name><argument_list>(<argument><expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>StringBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>table</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name><name>HasSQL</name><operator>.</operator><name>TRACE_SQL_FLAGS</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" AS "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Parser</name><operator>.</operator><name>quoteIdentifier</name></name><argument_list>(<argument><expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>HasSQL</name><operator>.</operator><name>TRACE_SQL_FLAGS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>TABLE_OR_VIEW_ALREADY_EXISTS_1</name></name></expr></argument>, <argument><expr><call><name><name>builder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>modificationId</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Drop and remove the given local temporary table from this session.
     *
     * @param table the table
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeLocalTempTable</name><parameter_list>(<parameter><decl><type><name>Table</name></type> <name>table</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>modificationId</name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>localTempTables</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>localTempTables</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <synchronized>synchronized <init>(<expr><name>database</name></expr>)</init> <block>{<block_content>
            <expr_stmt><expr><call><name><name>table</name><operator>.</operator><name>removeChildrenAndResources</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></synchronized>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the local temporary index if one exists with that name, or null if
     * not.
     *
     * @param name the table name
     * @return the table, or null
     */</comment>
    <function><type><specifier>public</specifier> <name>Index</name></type> <name>findLocalTempTableIndex</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>localTempTableIndexes</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>localTempTableIndexes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Index</name></argument>&gt;</argument_list></name></type> <name>getLocalTempTableIndexes</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>localTempTableIndexes</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>localTempTableIndexes</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Add a local temporary index to this session.
     *
     * @param index the index to add
     * @throws DbException if a index with this name already exists
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addLocalTempTableIndex</name><parameter_list>(<parameter><decl><type><name>Index</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>localTempTableIndexes</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>localTempTableIndexes</name> <operator>=</operator> <call><name><name>database</name><operator>.</operator><name>newStringMap</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>localTempTableIndexes</name><operator>.</operator><name>putIfAbsent</name></name><argument_list>(<argument><expr><call><name><name>index</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>INDEX_ALREADY_EXISTS_1</name></name></expr></argument>, <argument><expr><call><name><name>index</name><operator>.</operator><name>getTraceSQL</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Drop and remove the given local temporary index from this session.
     *
     * @param index the index
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeLocalTempTableIndex</name><parameter_list>(<parameter><decl><type><name>Index</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>localTempTableIndexes</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>localTempTableIndexes</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>index</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <synchronized>synchronized <init>(<expr><name>database</name></expr>)</init> <block>{<block_content>
                <expr_stmt><expr><call><name><name>index</name><operator>.</operator><name>removeChildrenAndResources</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></synchronized>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the local temporary constraint if one exists with that name, or
     * null if not.
     *
     * @param name the constraint name
     * @return the constraint, or null
     */</comment>
    <function><type><specifier>public</specifier> <name>Constraint</name></type> <name>findLocalTempTableConstraint</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>localTempTableConstraints</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>localTempTableConstraints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the map of constraints for all constraints on local, temporary
     * tables, if any. The map's keys are the constraints' names.
     *
     * @return the map of constraints, or null
     */</comment>
    <function><type><specifier>public</specifier> <name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Constraint</name></argument>&gt;</argument_list></name></type> <name>getLocalTempTableConstraints</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>localTempTableConstraints</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>localTempTableConstraints</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Add a local temporary constraint to this session.
     *
     * @param constraint the constraint to add
     * @throws DbException if a constraint with the same name already exists
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addLocalTempTableConstraint</name><parameter_list>(<parameter><decl><type><name>Constraint</name></type> <name>constraint</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>localTempTableConstraints</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>localTempTableConstraints</name> <operator>=</operator> <call><name><name>database</name><operator>.</operator><name>newStringMap</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>constraint</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>localTempTableConstraints</name><operator>.</operator><name>putIfAbsent</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>constraint</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>CONSTRAINT_ALREADY_EXISTS_1</name></name></expr></argument>, <argument><expr><call><name><name>constraint</name><operator>.</operator><name>getTraceSQL</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Drop and remove the given local temporary constraint from this session.
     *
     * @param constraint the constraint
     */</comment>
    <function><type><name>void</name></type> <name>removeLocalTempTableConstraint</name><parameter_list>(<parameter><decl><type><name>Constraint</name></type> <name>constraint</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>localTempTableConstraints</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>localTempTableConstraints</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>constraint</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <synchronized>synchronized <init>(<expr><name>database</name></expr>)</init> <block>{<block_content>
                <expr_stmt><expr><call><name><name>constraint</name><operator>.</operator><name>removeChildrenAndResources</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></synchronized>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>getAutoCommit</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>autoCommit</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>User</name></type> <name>getUser</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>user</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>setAutoCommit</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>autoCommit</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getLockTimeout</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>lockTimeout</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLockTimeout</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lockTimeout</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lockTimeout</name></name> <operator>=</operator> <name>lockTimeout</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>hasTransaction</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>transaction</name><operator>.</operator><name>setTimeoutMillis</name></name><argument_list>(<argument><expr><name>lockTimeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <specifier>synchronized</specifier> <name>CommandInterface</name></type> <name>prepareCommand</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sql</name></decl></parameter>,
            <parameter><decl><type><name>int</name></type> <name>fetchSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>prepareLocal</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Parse and prepare the given SQL statement. This method also checks the
     * rights.
     *
     * @param sql the SQL statement
     * @return the prepared statement
     */</comment>
    <function><type><specifier>public</specifier> <name>Prepared</name></type> <name>prepare</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sql</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>prepare</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Parse and prepare the given SQL statement.
     *
     * @param sql the SQL statement
     * @param rightsChecked true if the rights have already been checked
     * @param literalsChecked true if the sql string has already been checked
     *            for literals (only used if ALLOW_LITERALS NONE is set).
     * @return the prepared statement
     */</comment>
    <function><type><specifier>public</specifier> <name>Prepared</name></type> <name>prepare</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sql</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>rightsChecked</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>literalsChecked</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Parser</name></type> <name>parser</name> <init>= <expr><operator>new</operator> <call><name>Parser</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>parser</name><operator>.</operator><name>setRightsChecked</name></name><argument_list>(<argument><expr><name>rightsChecked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parser</name><operator>.</operator><name>setLiteralsChecked</name></name><argument_list>(<argument><expr><name>literalsChecked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>parser</name><operator>.</operator><name>prepare</name></name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Parse and prepare the given SQL statement.
     * This method also checks if the connection has been closed.
     *
     * @param sql the SQL statement
     * @return the prepared statement
     */</comment>
    <function><type><specifier>public</specifier> <name>Command</name></type> <name>prepareLocal</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sql</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isClosed</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>CONNECTION_BROKEN_1</name></name></expr></argument>,
                    <argument><expr><literal type="string">"session closed"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Command</name></type> <name>command</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>queryCacheSize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>queryCache</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>queryCache</name> <operator>=</operator> <call><name><name>SmallLRUCache</name><operator>.</operator><name>newInstance</name></name><argument_list>(<argument><expr><name>queryCacheSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>modificationMetaID</name> <operator>=</operator> <call><name><name>database</name><operator>.</operator><name>getModificationMetaId</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name>long</name></type> <name>newModificationMetaID</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getModificationMetaId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>newModificationMetaID</name> <operator>!=</operator> <name>modificationMetaID</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>queryCache</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>modificationMetaID</name> <operator>=</operator> <name>newModificationMetaID</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>command</name> <operator>=</operator> <call><name><name>queryCache</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>command</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>command</name><operator>.</operator><name>canReuse</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>command</name><operator>.</operator><name>reuse</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><name>command</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Parser</name></type> <name>parser</name> <init>= <expr><operator>new</operator> <call><name>Parser</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><name>command</name> <operator>=</operator> <call><name><name>parser</name><operator>.</operator><name>prepareCommand</name></name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <finally>finally <block>{<block_content>
            <comment type="line">// we can't reuse sub-query indexes, so just drop the whole cache</comment>
            <expr_stmt><expr><name>subQueryIndexCache</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
        <if_stmt><if>if <condition>(<expr><name>queryCache</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>command</name><operator>.</operator><name>isCacheable</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>queryCache</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>command</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Arranges for the specified database object id to be released
     * at the end of the current transaction.
     * @param id to be scheduled
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>scheduleDatabaseObjectIdForRelease</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>idsToRelease</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>idsToRelease</name> <operator>=</operator> <operator>new</operator> <call><name>BitSet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>idsToRelease</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Database</name></type> <name>getDatabase</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>database</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Commit the current transaction. If the statement was not a data
     * definition statement, and if there are temporary tables that should be
     * dropped or truncated at commit, this is done as well.
     *
     * @param ddl if the statement was a data definition statement
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>commit</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>ddl</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>beforeCommitOrRollback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>hasTransaction</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name>markUsedTablesAsUpdated</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>transaction</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>removeTemporaryLobs</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>endTransaction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <finally>finally <block>{<block_content>
                <expr_stmt><expr><name>transaction</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            </block_content>}</block></finally></try>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ddl</name></expr>)</condition> <block>{<block_content>
                <comment type="line">// do not clean the temp tables if the last command was a</comment>
                <comment type="line">// create/drop</comment>
                <expr_stmt><expr><call><name>cleanTempTables</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>autoCommitAtTransactionEnd</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>autoCommit</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>autoCommitAtTransactionEnd</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>analyzeTables</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>markUsedTablesAsUpdated</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// TODO should not rely on locking</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>locks</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Table</name></type> <name>t</name> <range>: <expr><name>locks</name></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>t</name> <operator>instanceof</operator> <name>MVTable</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>MVTable</name><operator>)</operator> <name>t</name><operator>)</operator><operator>.</operator><call><name>commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>analyzeTables</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// On rare occasions it can be called concurrently (i.e. from close())</comment>
        <comment type="line">// without proper locking, but instead of oversynchronizing</comment>
        <comment type="line">// we just skip this optional operation in such case</comment>
        <if_stmt><if>if <condition>(<expr><name>tablesToAnalyze</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator>
                <call><name><name>Thread</name><operator>.</operator><name>holdsLock</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// take a local copy and clear because in rare cases we can call</comment>
            <comment type="line">// back into markTableForAnalyze while iterating here</comment>
            <decl_stmt><decl><type><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>Table</name></argument>&gt;</argument_list></name></type> <name>tablesToAnalyzeLocal</name> <init>= <expr><name>tablesToAnalyze</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>tablesToAnalyze</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>rowCount</name> <init>= <expr><call><name>getDatabase</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSettings</name><argument_list>()</argument_list></call><operator>.</operator><name>analyzeSample</name> <operator>/</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>Table</name></type> <name>table</name> <range>: <expr><name>tablesToAnalyzeLocal</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>Analyze</name><operator>.</operator><name>analyzeTable</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>rowCount</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <comment type="line">// analyze can lock the meta</comment>
            <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>unlockMeta</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// table analysis opens a new transaction(s),</comment>
            <comment type="line">// so we need to commit afterwards whatever leftovers might be</comment>
            <expr_stmt><expr><call><name>commit</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>removeTemporaryLobs</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>onTimeout</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>temporaryLobs</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>ValueLob</name></type> <name>v</name> <range>: <expr><name>temporaryLobs</name></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>v</name><operator>.</operator><name>isLinkedToTable</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name><name>temporaryLobs</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>temporaryResultLobs</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>temporaryResultLobs</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>keepYoungerThan</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>database</name><operator>.</operator><name>getSettings</name></name><argument_list>()</argument_list></call><operator>.</operator><name>lobTimeout</name> <operator>*</operator> <literal type="number">1_000_000L</literal></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><operator>!</operator><call><name><name>temporaryResultLobs</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>TimeoutValue</name></type> <name>tv</name> <init>= <expr><call><name><name>temporaryResultLobs</name><operator>.</operator><name>getFirst</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>onTimeout</name> <operator>&amp;&amp;</operator> <name><name>tv</name><operator>.</operator><name>created</name></name> <operator>-</operator> <name>keepYoungerThan</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>ValueLob</name></type> <name>v</name> <init>= <expr><call><name><name>temporaryResultLobs</name><operator>.</operator><name>removeFirst</name></name><argument_list>()</argument_list></call><operator>.</operator><name>value</name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>v</name><operator>.</operator><name>isLinkedToTable</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></while>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>beforeCommitOrRollback</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>commitOrRollbackDisabled</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>locks</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>COMMIT_ROLLBACK_NOT_ALLOWED</name></name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>currentTransactionName</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>currentTimestamp</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>throwLastBackgroundException</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>endTransaction</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>removeLobMap</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>removeLobMap</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>ValueLob</name></type> <name>v</name> <range>: <expr><call><name><name>removeLobMap</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name>removeLobMap</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>unlockAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>idsToRelease</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>releaseDatabaseObjectIds</name></name><argument_list>(<argument><expr><name>idsToRelease</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>idsToRelease</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>hasTransaction</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>transaction</name><operator>.</operator><name>allowNonRepeatableRead</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>snapshotDataModificationId</name> <operator>=</operator> <call><name><name>database</name><operator>.</operator><name>getNextModificationDataId</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the data modification id of transaction's snapshot, or 0 if
     * isolation level doesn't use snapshots.
     *
     * @return the data modification id of transaction's snapshot, or 0
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getSnapshotDataModificationId</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>snapshotDataModificationId</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Fully roll back the current transaction.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>rollback</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>beforeCommitOrRollback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>hasTransaction</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>rollbackTo</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>idsToRelease</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cleanTempTables</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>autoCommitAtTransactionEnd</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>autoCommit</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>autoCommitAtTransactionEnd</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>endTransaction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Partially roll back the current transaction.
     *
     * @param savepoint the savepoint to which should be rolled back
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>rollbackTo</name><parameter_list>(<parameter><decl><type><name>Savepoint</name></type> <name>savepoint</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><ternary><condition><expr><name>savepoint</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>savepoint</name><operator>.</operator><name>logIndex</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>hasTransaction</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>markUsedTablesAsUpdated</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>savepoint</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>transaction</name><operator>.</operator><name>rollback</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>transaction</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>transaction</name><operator>.</operator><name>rollbackToSavepoint</name></name><argument_list>(<argument><expr><name><name>savepoint</name><operator>.</operator><name>transactionSavepoint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>savepoints</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>names</name> <init>= <expr><call><name><name>savepoints</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toArray</name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>name</name> <range>: <expr><name>names</name></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Savepoint</name></type> <name>sp</name> <init>= <expr><call><name><name>savepoints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>savepointIndex</name> <init>= <expr><name><name>sp</name><operator>.</operator><name>logIndex</name></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>savepointIndex</name> <operator>&gt;</operator> <name>index</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>savepoints</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Because cache may have captured query result (in Query.lastResult),</comment>
        <comment type="line">// which is based on data from uncommitted transaction.,</comment>
        <comment type="line">// It is not valid after rollback, therefore cache has to be cleared.</comment>
        <if_stmt><if>if <condition>(<expr><name>queryCache</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>queryCache</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>hasPendingTransaction</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>hasTransaction</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>transaction</name><operator>.</operator><name>hasChanges</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>transaction</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>Transaction</name><operator>.</operator><name>STATUS_PREPARED</name></name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create a savepoint to allow rolling back to this state.
     *
     * @return the savepoint
     */</comment>
    <function><type><specifier>public</specifier> <name>Savepoint</name></type> <name>setSavepoint</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Savepoint</name></type> <name>sp</name> <init>= <expr><operator>new</operator> <call><name>Savepoint</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>sp</name><operator>.</operator><name>transactionSavepoint</name></name> <operator>=</operator> <call><name>getStatementSavepoint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>sp</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getId</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>id</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>cancel</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>cancelAtNs</name> <operator>=</operator> <call><name><name>Utils</name><operator>.</operator><name>currentNanoTime</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Cancel the transaction and close the session if needed.
     */</comment>
    <function><type><name>void</name></type> <name>suspend</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>cancel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>transitionToState</name><argument_list>(<argument><expr><name><name>State</name><operator>.</operator><name>SUSPENDED</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>State</name><operator>.</operator><name>SLEEP</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// this is the only operation that can be invoked concurrently</comment>
        <comment type="line">// so, we should prevent double-closure</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>state</name><operator>.</operator><name>getAndSet</name></name><argument_list>(<argument><expr><name><name>State</name><operator>.</operator><name>CLOSED</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>State</name><operator>.</operator><name>CLOSED</name></name></expr>)</condition> <block>{<block_content>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>throwLastBackgroundException</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>checkPowerOff</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// release any open table locks</comment>
                <if_stmt><if>if <condition>(<expr><call><name>hasPreparedTransaction</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>currentTransactionName</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>removeLobMap</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name>endTransaction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>rollback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>removeTemporaryLobs</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>cleanTempTables</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>commit</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>       <comment type="line">// temp table removal may have opened new transaction</comment>
                </block_content>}</block></else></if_stmt>

                <comment type="line">// Table#removeChildrenAndResources can take the meta lock,</comment>
                <comment type="line">// and we need to unlock before we call removeSession(), which might</comment>
                <comment type="line">// want to take the meta lock using the system session.</comment>
                <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>unlockMeta</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <finally>finally <block>{<block_content>
                <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>removeSession</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></finally></try>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Register table as locked within current transaction.
     * Table is unlocked on commit or rollback.
     * It also assumes that table will be modified by transaction.
     *
     * @param table the table that is locked
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>registerTableAsLocked</name><parameter_list>(<parameter><decl><type><name>Table</name></type> <name>table</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>SysProperties</name><operator>.</operator><name>CHECK</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>locks</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>(<argument><expr><call><name><name>table</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>locks</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Register table as updated within current transaction.
     * This is used instead of table locking when lock mode is LOCK_MODE_OFF.
     *
     * @param table to register
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>registerTableAsUpdated</name><parameter_list>(<parameter><decl><type><name>Table</name></type> <name>table</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>locks</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>locks</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Unlock just this table.
     *
     * @param t the table to unlock
     */</comment>
    <function><type><name>void</name></type> <name>unlock</name><parameter_list>(<parameter><decl><type><name>Table</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>locks</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>


    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>hasTransaction</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>transaction</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>unlockAll</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>locks</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>Table</name><index>[]</index></name></type> <name>array</name> <init>= <expr><call><name><name>locks</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>Table</name></type> <name>t</name> <range>: <expr><name>array</name></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>t</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>unlock</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name><name>locks</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>Database</name><operator>.</operator><name>unlockMetaDebug</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>savepoints</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>sessionStateChanged</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>cleanTempTables</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>closeSession</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>localTempTables</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>localTempTables</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>Table</name></argument>&gt;</argument_list></name></type> <name>it</name> <init>= <expr><call><name><name>localTempTables</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>it</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name><name>it</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>closeSession</name> <operator>||</operator> <call><name><name>table</name><operator>.</operator><name>getOnCommitDrop</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>modificationId</name><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>table</name><operator>.</operator><name>setModified</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>it</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <comment type="line">// Exception thrown in org.h2.engine.Database.removeMeta</comment>
                    <comment type="line">// if line below is missing with TestDeadlock</comment>
                    <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>lockMeta</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>table</name><operator>.</operator><name>removeChildrenAndResources</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>closeSession</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>throwLastBackgroundException</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>table</name><operator>.</operator><name>getOnCommitTruncate</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>table</name><operator>.</operator><name>truncate</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></while>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Random</name></type> <name>getRandom</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>random</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>random</name> <operator>=</operator> <operator>new</operator> <call><name>Random</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>random</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Trace</name></type> <name>getTrace</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>trace</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isClosed</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>trace</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>traceModuleName</name> <init>= <expr><literal type="string">"jdbc["</literal> <operator>+</operator> <name>id</name> <operator>+</operator> <literal type="string">"]"</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isClosed</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>TraceSystem</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTrace</name><argument_list>(<argument><expr><name>traceModuleName</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>trace</name> <operator>=</operator> <call><name><name>database</name><operator>.</operator><name>getTraceSystem</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTrace</name><argument_list>(<argument><expr><name>traceModuleName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>trace</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the next value of the sequence in this session.
     *
     * @param sequence
     *            the sequence
     * @param prepared
     *            current prepared command, select, or {@code null}
     * @return the next value of the sequence in this session
     */</comment>
    <function><type><specifier>public</specifier> <name>Value</name></type> <name>getNextValueFor</name><parameter_list>(<parameter><decl><type><name>Sequence</name></type> <name>sequence</name></decl></parameter>, <parameter><decl><type><name>Prepared</name></type> <name>prepared</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Value</name></type> <name>value</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Mode</name></type> <name>mode</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>mode</name><operator>.</operator><name>nextValueReturnsDifferentValues</name></name> <operator>||</operator> <name>prepared</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name><name>sequence</name><operator>.</operator><name>getNext</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>nextValueFor</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>nextValueFor</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>SequenceAndPrepared</name></type> <name>key</name> <init>= <expr><operator>new</operator> <call><name>SequenceAndPrepared</name><argument_list>(<argument><expr><name>sequence</name></expr></argument>, <argument><expr><name>prepared</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>RowNumberAndValue</name></type> <name>data</name> <init>= <expr><call><name><name>nextValueFor</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>rowNumber</name> <init>= <expr><call><name><name>prepared</name><operator>.</operator><name>getCurrentRowNumber</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>data</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>rowNumber</name></name> <operator>==</operator> <name>rowNumber</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>data</name><operator>.</operator><name>nextValue</name></name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name><name>data</name><operator>.</operator><name>nextValue</name></name> <operator>=</operator> <name>value</name> <operator>=</operator> <call><name><name>sequence</name><operator>.</operator><name>getNext</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>data</name><operator>.</operator><name>rowNumber</name></name> <operator>=</operator> <name>rowNumber</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name><name>sequence</name><operator>.</operator><name>getNext</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>nextValueFor</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>RowNumberAndValue</name><argument_list>(<argument><expr><name>rowNumber</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
        <decl_stmt><decl><type><name><name>WeakHashMap</name><argument_list type="generic">&lt;<argument><name>Sequence</name></argument>, <argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>currentValueFor</name> <init>= <expr><name><name>this</name><operator>.</operator><name>currentValueFor</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>currentValueFor</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>currentValueFor</name></name> <operator>=</operator> <name>currentValueFor</name> <operator>=</operator> <operator>new</operator> <call><name><name>WeakHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>currentValueFor</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>sequence</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>mode</name><operator>.</operator><name>takeGeneratedSequenceValue</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>lastIdentity</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>value</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the current value of the sequence in this session.
     *
     * @param sequence
     *            the sequence
     * @return the current value of the sequence in this session
     * @throws DbException
     *             if current value is not defined
     */</comment>
    <function><type><specifier>public</specifier> <name>Value</name></type> <name>getCurrentValueFor</name><parameter_list>(<parameter><decl><type><name>Sequence</name></type> <name>sequence</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>WeakHashMap</name><argument_list type="generic">&lt;<argument><name>Sequence</name></argument>, <argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>currentValueFor</name> <init>= <expr><name><name>this</name><operator>.</operator><name>currentValueFor</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>currentValueFor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Value</name></type> <name>value</name> <init>= <expr><call><name><name>currentValueFor</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>sequence</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>value</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>value</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>CURRENT_SEQUENCE_VALUE_IS_NOT_DEFINED_IN_SESSION_1</name></name></expr></argument>, <argument><expr><call><name><name>sequence</name><operator>.</operator><name>getTraceSQL</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLastIdentity</name><parameter_list>(<parameter><decl><type><name>Value</name></type> <name>last</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lastIdentity</name></name> <operator>=</operator> <name>last</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Value</name></type> <name>getLastIdentity</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>lastIdentity</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Whether the session contains any uncommitted changes.
     *
     * @return true if yes
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>containsUncommitted</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>transaction</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>transaction</name><operator>.</operator><name>hasChanges</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create a savepoint that is linked to the current log position.
     *
     * @param name the savepoint name
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addSavepoint</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>savepoints</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>savepoints</name> <operator>=</operator> <call><name><name>database</name><operator>.</operator><name>newStringMap</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>savepoints</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>setSavepoint</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Undo all operations back to the log position of the given savepoint.
     *
     * @param name the savepoint name
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>rollbackToSavepoint</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>beforeCommitOrRollback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Savepoint</name></type> <name>savepoint</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>savepoints</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>(</operator><name>savepoint</name> <operator>=</operator> <call><name><name>savepoints</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>SAVEPOINT_IS_INVALID_1</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>rollbackTo</name><argument_list>(<argument><expr><name>savepoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Prepare the given transaction.
     *
     * @param transactionName the name of the transaction
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>prepareCommit</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>transactionName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>hasPendingTransaction</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// need to commit even if rollback is not possible (create/drop</comment>
            <comment type="line">// table and so on)</comment>
            <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>prepareCommit</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>transactionName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>currentTransactionName</name> <operator>=</operator> <name>transactionName</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Checks presence of prepared transaction in this session.
     *
     * @return {@code true} if there is a prepared transaction,
     *         {@code false} otherwise
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasPreparedTransaction</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>currentTransactionName</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Commit or roll back the given transaction.
     *
     * @param transactionName the name of the transaction
     * @param commit true for commit, false for rollback
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPreparedTransaction</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>transactionName</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>commit</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>hasPreparedTransaction</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>currentTransactionName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>transactionName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>commit</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>commit</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>rollback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>InDoubtTransaction</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getInDoubtTransactions</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>state</name> <init>= <expr><ternary><condition><expr><name>commit</name></expr> ?</condition><then> <expr><name><name>InDoubtTransaction</name><operator>.</operator><name>COMMIT</name></name></expr> </then><else>: <expr><name><name>InDoubtTransaction</name><operator>.</operator><name>ROLLBACK</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>found</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>InDoubtTransaction</name></type> <name>p</name><range>: <expr><name>list</name></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>p</name><operator>.</operator><name>getTransactionName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>transactionName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>setState</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>TRANSACTION_NOT_FOUND_1</name></name></expr></argument>,
                        <argument><expr><name>transactionName</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isClosed</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>state</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>State</name><operator>.</operator><name>CLOSED</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isOpen</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>State</name></type> <name>current</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>checkSuspended</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>current</name> <operator>!=</operator> <name><name>State</name><operator>.</operator><name>CLOSED</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setThrottle</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>throttle</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>throttleMs</name></name> <operator>=</operator> <name>throttle</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Wait for some time if this session is throttled (slowed down).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>throttle</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>throttleMs</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>time</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>lastThrottleNs</name> <operator>!=</operator> <literal type="number">0L</literal> <operator>&amp;&amp;</operator> <name>time</name> <operator>-</operator> <name>lastThrottleNs</name> <operator>&lt;</operator> <name><name>Constants</name><operator>.</operator><name>THROTTLE_DELAY</name></name> <operator>*</operator> <literal type="number">1_000_000L</literal></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>lastThrottleNs</name> <operator>=</operator> <call><name><name>Utils</name><operator>.</operator><name>nanoTimePlusMillis</name></name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>throttleMs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>State</name></type> <name>prevState</name> <init>= <expr><call><name>transitionToState</name><argument_list>(<argument><expr><name><name>State</name><operator>.</operator><name>THROTTLED</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><name>throttleMs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>ignore</name></decl></parameter>)</parameter_list> <block>{<block_content>
        </block_content>}</block></catch> <finally>finally <block>{<block_content>
            <expr_stmt><expr><call><name>transitionToState</name><argument_list>(<argument><expr><name>prevState</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></finally></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Set the current command of this session. This is done just before
     * executing the statement.
     *
     * @param command the command
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>setCurrentCommand</name><parameter_list>(<parameter><decl><type><name>Command</name></type> <name>command</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>State</name></type> <name>targetState</name> <init>= <expr><ternary><condition><expr><name>command</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>State</name><operator>.</operator><name>SLEEP</name></name></expr> </then><else>: <expr><name><name>State</name><operator>.</operator><name>RUNNING</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>transitionToState</name><argument_list>(<argument><expr><name>targetState</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isOpen</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>currentCommand</name> <operator>=</operator> <name>command</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>commandStartOrEnd</name> <operator>=</operator> <call><name><name>Instant</name><operator>.</operator><name>now</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>command</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>queryTimeout</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>cancelAtNs</name> <operator>=</operator> <call><name><name>Utils</name><operator>.</operator><name>currentNanoTimePlusMillis</name></name><argument_list>(<argument><expr><name>queryTimeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>currentTimestamp</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><name>dateTimeValueWithinTransaction</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>currentTimestamp</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>nextValueFor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>nextValueFor</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>State</name></type> <name>transitionToState</name><parameter_list>(<parameter><decl><type><name>State</name></type> <name>targetState</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>checkSuspended</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>State</name></type> <name>currentState</name></decl>;</decl_stmt>
        <while>while<condition>(<expr><operator>(</operator><name>currentState</name> <operator>=</operator> <call><name><name>state</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name><name>State</name><operator>.</operator><name>CLOSED</name></name> <operator>&amp;&amp;</operator>
                <operator>(</operator><operator>!</operator><name>checkSuspended</name> <operator>||</operator> <call><name>checkSuspended</name><argument_list>(<argument><expr><name>currentState</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
                <operator>!</operator><call><name><name>state</name><operator>.</operator><name>compareAndSet</name></name><argument_list>(<argument><expr><name>currentState</name></expr></argument>, <argument><expr><name>targetState</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content><comment type="block">/**/</comment></block_content>}</block></while>
        <return>return <expr><name>currentState</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>checkSuspended</name><parameter_list>(<parameter><decl><type><name>State</name></type> <name>currentState</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>currentState</name> <operator>==</operator> <name><name>State</name><operator>.</operator><name>SUSPENDED</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>DATABASE_IS_IN_EXCLUSIVE_MODE</name></name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check if the current transaction is canceled by calling
     * Statement.cancel() or because a session timeout was set and expired.
     *
     * @throws DbException if the transaction is canceled
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>checkCanceled</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>throttle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>cancel</name> <init>= <expr><name>cancelAtNs</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>cancel</name> <operator>==</operator> <literal type="number">0L</literal></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>cancel</name> <operator>&gt;=</operator> <literal type="number">0L</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>cancelAtNs</name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>STATEMENT_WAS_CANCELED</name></name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the cancel time.
     *
     * @return the time or 0 if not set
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getCancel</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>cancelAtNs</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Command</name></type> <name>getCurrentCommand</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>currentCommand</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>ValueTimestampTimeZone</name></type> <name>getCommandStartOrEnd</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>DateTimeUtils</name><operator>.</operator><name>currentTimestamp</name></name><argument_list>(<argument><expr><name>timeZone</name></expr></argument>, <argument><expr><name>commandStartOrEnd</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getAllowLiterals</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>allowLiterals</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAllowLiterals</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>allowLiterals</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCurrentSchema</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>modificationId</name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>queryCache</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>queryCache</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>currentSchemaName</name></name> <operator>=</operator> <call><name><name>schema</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getCurrentSchemaName</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>currentSchemaName</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>setCurrentSchemaName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>schemaName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Schema</name></type> <name>schema</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getSchema</name></name><argument_list>(<argument><expr><name>schemaName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>setCurrentSchema</name><argument_list>(<argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create an internal connection. This connection is used when initializing
     * triggers, and when calling user defined functions.
     *
     * @param columnList if the url should be 'jdbc:columnlist:connection'
     * @return the internal connection
     */</comment>
    <function><type><specifier>public</specifier> <name>JdbcConnection</name></type> <name>createConnection</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>columnList</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>url</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>columnList</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>url</name> <operator>=</operator> <name><name>Constants</name><operator>.</operator><name>CONN_URL_COLUMNLIST</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>url</name> <operator>=</operator> <name><name>Constants</name><operator>.</operator><name>CONN_URL_INTERNAL</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><operator>new</operator> <call><name>JdbcConnection</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>getUser</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>DataHandler</name></type> <name>getDataHandler</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>database</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Remember that the given LOB value must be removed at commit.
     *
     * @param v the value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeAtCommit</name><parameter_list>(<parameter><decl><type><name>ValueLob</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>v</name><operator>.</operator><name>isLinkedToTable</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>removeLobMap</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>removeLobMap</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>removeLobMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Do not remove this LOB value at commit any longer.
     *
     * @param v the value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeAtCommitStop</name><parameter_list>(<parameter><decl><type><name>ValueLob</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>v</name><operator>.</operator><name>isLinkedToTable</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>removeLobMap</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>removeLobMap</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the next system generated identifiers. The identifier returned does
     * not occur within the given SQL statement.
     *
     * @param sql the SQL statement
     * @return the new identifier
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getNextSystemIdentifier</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sql</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>identifier</name></decl>;</decl_stmt>
        <do>do <block>{<block_content>
            <expr_stmt><expr><name>identifier</name> <operator>=</operator> <name>SYSTEM_IDENTIFIER_PREFIX</name> <operator>+</operator> <name>systemIdentifier</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block> while <condition>(<expr><call><name><name>sql</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>identifier</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
        <return>return <expr><name>identifier</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Add a procedure to this session.
     *
     * @param procedure the procedure to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addProcedure</name><parameter_list>(<parameter><decl><type><name>Procedure</name></type> <name>procedure</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>procedures</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>procedures</name> <operator>=</operator> <call><name><name>database</name><operator>.</operator><name>newStringMap</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>procedures</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>procedure</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>procedure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Remove a procedure from this session.
     *
     * @param name the name of the procedure to remove
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeProcedure</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>procedures</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>procedures</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the procedure with the given name, or null
     * if none exists.
     *
     * @param name the procedure name
     * @return the procedure or null
     */</comment>
    <function><type><specifier>public</specifier> <name>Procedure</name></type> <name>getProcedure</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>procedures</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>procedures</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSchemaSearchPath</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>schemas</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>modificationId</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>schemaSearchPath</name></name> <operator>=</operator> <name>schemas</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>String</name><index>[]</index></name></type> <name>getSchemaSearchPath</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>schemaSearchPath</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>serialId</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="string">"#"</literal> <operator>+</operator> <name>serialId</name> <operator>+</operator> <literal type="string">" (user: "</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>user</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">"&lt;null&gt;"</literal></expr> </then><else>: <expr><call><name><name>user</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator> <call><name><name>state</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">")"</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Begin a transaction.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>begin</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>autoCommitAtTransactionEnd</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>autoCommit</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>ValueTimestampTimeZone</name></type> <name>getSessionStart</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>sessionStart</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Table</name></argument>&gt;</argument_list></name></type> <name>getLocks</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="block">/*
         * This implementation needs to be lock-free.
         */</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>getLockMode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Constants</name><operator>.</operator><name>LOCK_MODE_OFF</name></name> <operator>||</operator> <call><name><name>locks</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>emptySet</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/*
         * Do not use ArrayList.toArray(T[]) here, its implementation is not
         * thread-safe.
         */</comment>
        <decl_stmt><decl><type><name><name>Object</name><index>[]</index></name></type> <name>array</name> <init>= <expr><call><name><name>locks</name><operator>.</operator><name>toArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="block">/*
         * The returned array may contain null elements and may contain
         * duplicates due to concurrent remove().
         */</comment>
        <switch>switch <condition>(<expr><name><name>array</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">1</literal></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>Object</name></type> <name>table</name> <init>= <expr><name><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>table</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>singleton</name></name><argument_list>(<argument><expr><operator>(</operator><name>Table</name><operator>)</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>
        <comment type="line">//$FALL-THROUGH$</comment>
        <case>case <expr><literal type="number">0</literal></expr>:</case>
            <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>emptySet</name></name><argument_list>()</argument_list></call></expr>;</return>
        <default>default:</default> <block>{<block_content>
            <decl_stmt><decl><type><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>Table</name></argument>&gt;</argument_list></name></type> <name>set</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>Object</name></type> <name>table</name> <range>: <expr><name>array</name></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>table</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>set</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><name>Table</name><operator>)</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <return>return <expr><name>set</name></expr>;</return>
        </block_content>}</block>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Wait if the exclusive mode has been enabled for another session. This
     * method returns as soon as the exclusive mode has been disabled.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>waitIfExclusiveModeEnabled</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>transitionToState</name><argument_list>(<argument><expr><name><name>State</name><operator>.</operator><name>RUNNING</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Even in exclusive mode, we have to let the LOB session proceed, or we</comment>
        <comment type="line">// will get deadlocks.</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>getLobSession</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>this</name></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <while>while <condition>(<expr><call><name>isOpen</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>SessionLocal</name></type> <name>exclusive</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getExclusiveSession</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>exclusive</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>exclusive</name> <operator>==</operator> <name>this</name></expr>)</condition> <block>{<block_content>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>Thread</name><operator>.</operator><name>holdsLock</name></name><argument_list>(<argument><expr><name>exclusive</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <comment type="line">// if another connection is used within the connection</comment>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <comment type="line">// ignore</comment>
            </block_content>}</block></catch></try>
        </block_content>}</block></while>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the view cache for this session. There are two caches: the subquery
     * cache (which is only use for a single query, has no bounds, and is
     * cleared after use), and the cache for regular views.
     *
     * @param subQuery true to get the subquery cache
     * @return the view cache
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>, <argument><name>ViewIndex</name></argument>&gt;</argument_list></name></type> <name>getViewIndexCache</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>subQuery</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>subQuery</name></expr>)</condition> <block>{<block_content>
            <comment type="line">// for sub-queries we don't need to use LRU because the cache should</comment>
            <comment type="line">// not grow too large for a single query (we drop the whole cache in</comment>
            <comment type="line">// the end of prepareLocal)</comment>
            <if_stmt><if>if <condition>(<expr><name>subQueryIndexCache</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>subQueryIndexCache</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>subQueryIndexCache</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>SmallLRUCache</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>, <argument><name>ViewIndex</name></argument>&gt;</argument_list></name></type> <name>cache</name> <init>= <expr><name>viewIndexCache</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>cache</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>viewIndexCache</name> <operator>=</operator> <name>cache</name> <operator>=</operator> <call><name><name>SmallLRUCache</name><operator>.</operator><name>newInstance</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>VIEW_INDEX_CACHE_SIZE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>cache</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setQueryTimeout</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>queryTimeout</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getSettings</name></name><argument_list>()</argument_list></call><operator>.</operator><name>maxQueryTimeout</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>max</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>max</name> <operator>&lt;</operator> <name>queryTimeout</name> <operator>||</operator> <name>queryTimeout</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
            <comment type="line">// the value must be at most max</comment>
            <expr_stmt><expr><name>queryTimeout</name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>queryTimeout</name></name> <operator>=</operator> <name>queryTimeout</name></expr>;</expr_stmt>
        <comment type="line">// must reset the cancel at here,</comment>
        <comment type="line">// otherwise it is still used</comment>
        <expr_stmt><expr><name>cancelAtNs</name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getQueryTimeout</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>queryTimeout</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Set the table this session is waiting for, and the thread that is
     * waiting.
     *
     * @param waitForLock the table
     * @param waitForLockThread the current thread (the one that is waiting)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setWaitForLock</name><parameter_list>(<parameter><decl><type><name>Table</name></type> <name>waitForLock</name></decl></parameter>, <parameter><decl><type><name>Thread</name></type> <name>waitForLockThread</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>waitForLock</name></name> <operator>=</operator> <name>waitForLock</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>waitForLockThread</name></name> <operator>=</operator> <name>waitForLockThread</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Table</name></type> <name>getWaitForLock</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>waitForLock</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Thread</name></type> <name>getWaitForLockThread</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>waitForLockThread</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getModificationId</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>modificationId</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Value</name></type> <name>getTransactionId</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>transaction</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><call><name><name>transaction</name><operator>.</operator><name>hasChanges</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>ValueVarchar</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>Long</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>transaction</name><operator>.</operator><name>getSequenceNum</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the next object id.
     *
     * @return the next object id
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>nextObjectId</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>objectId</name><operator>++</operator></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the transaction to use for this session.
     *
     * @return the transaction
     */</comment>
    <function><type><specifier>public</specifier> <name>Transaction</name></type> <name>getTransaction</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>transaction</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Store</name></type> <name>store</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getStore</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>store</name><operator>.</operator><name>getMvStore</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isClosed</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Throwable</name></type> <name>backgroundException</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getBackgroundException</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>shutdownImmediately</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>DATABASE_IS_CLOSED</name></name></expr></argument>, <argument><expr><name>backgroundException</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>transaction</name> <operator>=</operator> <call><name><name>store</name><operator>.</operator><name>getTransactionStore</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>begin</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>lockTimeout</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>isolationLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>startStatement</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>transaction</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>long</name></type> <name>getStatementSavepoint</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>startStatement</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>startStatement</name> <operator>=</operator> <call><name>getTransaction</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setSavepoint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>startStatement</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Start a new statement within a transaction.
     * @param command about to be started
     */</comment>
    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"incomplete-switch"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>startStatementWithinTransaction</name><parameter_list>(<parameter><decl><type><name>Command</name></type> <name>command</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Transaction</name></type> <name>transaction</name> <init>= <expr><call><name>getTransaction</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>transaction</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name><name>MVMap</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>,<argument><name><name>VersionedValue</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>maps</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>command</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>DbObject</name></argument>&gt;</argument_list></name></type> <name>dependencies</name> <init>= <expr><call><name><name>command</name><operator>.</operator><name>getDependencies</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <switch>switch <condition>(<expr><call><name><name>transaction</name><operator>.</operator><name>getIsolationLevel</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <case>case <expr><name>SNAPSHOT</name></expr>:</case>
                <case>case <expr><name>SERIALIZABLE</name></expr>:</case>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>transaction</name><operator>.</operator><name>hasStatementDependencies</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                        <for>for <control>(<init><decl><type><name>Schema</name></type> <name>schema</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getAllSchemasNoMeta</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                            <for>for <control>(<init><decl><type><name>Table</name></type> <name>table</name> <range>: <expr><call><name><name>schema</name><operator>.</operator><name>getAllTablesAndViews</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                                <if_stmt><if>if <condition>(<expr><name>table</name> <operator>instanceof</operator> <name>MVTable</name></expr>)</condition> <block>{<block_content>
                                    <expr_stmt><expr><call><name>addTableToDependencies</name><argument_list>(<argument><expr><operator>(</operator><name>MVTable</name><operator>)</operator><name>table</name></expr></argument>, <argument><expr><name>maps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></if></if_stmt>
                            </block_content>}</block></for>
                        </block_content>}</block></for>
                        <break>break;</break>
                    </block_content>}</block></if></if_stmt>
                    <comment type="line">//$FALL-THROUGH$</comment>
                <case>case <expr><name>READ_COMMITTED</name></expr>:</case>
                <case>case <expr><name>READ_UNCOMMITTED</name></expr>:</case>
                    <for>for <control>(<init><decl><type><name>DbObject</name></type> <name>dependency</name> <range>: <expr><name>dependencies</name></expr></range></decl></init>)</control> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name>dependency</name> <operator>instanceof</operator> <name>MVTable</name></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name>addTableToDependencies</name><argument_list>(<argument><expr><operator>(</operator><name>MVTable</name><operator>)</operator><name>dependency</name></expr></argument>, <argument><expr><name>maps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                    <break>break;</break>
                <case>case <expr><name>REPEATABLE_READ</name></expr>:</case>
                    <decl_stmt><decl><type><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>MVTable</name></argument>&gt;</argument_list></name></type> <name>processed</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <for>for <control>(<init><decl><type><name>DbObject</name></type> <name>dependency</name> <range>: <expr><name>dependencies</name></expr></range></decl></init>)</control> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name>dependency</name> <operator>instanceof</operator> <name>MVTable</name></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name>addTableToDependencies</name><argument_list>(<argument><expr><operator>(</operator><name>MVTable</name><operator>)</operator><name>dependency</name></expr></argument>, <argument><expr><name>maps</name></expr></argument>, <argument><expr><name>processed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                    <break>break;</break>
                </block_content>}</block></switch>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>transaction</name><operator>.</operator><name>markStatementStart</name></name><argument_list>(<argument><expr><name>maps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>startStatement</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>command</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>setCurrentCommand</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><block>{<expr><literal type="string">"unchecked"</literal></expr>, <argument><expr><literal type="string">"rawtypes"</literal></expr></argument>}</block></expr></argument>)</argument_list></annotation>
    <type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>addTableToDependencies</name><parameter_list>(<parameter><decl><type><name>MVTable</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name><name>MVMap</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>,<argument><name><name>VersionedValue</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>maps</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>Index</name></type> <name>index</name> <range>: <expr><call><name><name>table</name><operator>.</operator><name>getIndexes</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>index</name> <operator>instanceof</operator> <name>MVIndex</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>maps</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>MVIndex</name><operator>)</operator> <name>index</name><operator>)</operator><operator>.</operator><call><name>getMVMap</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>addTableToDependencies</name><parameter_list>(<parameter><decl><type><name>MVTable</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name><name>MVMap</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>,<argument><name><name>VersionedValue</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>maps</name></decl></parameter>,
            <parameter><decl><type><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>MVTable</name></argument>&gt;</argument_list></name></type> <name>processed</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>processed</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>addTableToDependencies</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>maps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Constraint</name></argument>&gt;</argument_list></name></type> <name>constraints</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getConstraints</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>constraints</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Constraint</name></type> <name>constraint</name> <range>: <expr><name>constraints</name></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Table</name></type> <name>ref</name> <init>= <expr><call><name><name>constraint</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ref</name> <operator>!=</operator> <name>table</name> <operator>&amp;&amp;</operator> <name>ref</name> <operator>instanceof</operator> <name>MVTable</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>addTableToDependencies</name><argument_list>(<argument><expr><operator>(</operator><name>MVTable</name><operator>)</operator> <name>ref</name></expr></argument>, <argument><expr><name>maps</name></expr></argument>, <argument><expr><name>processed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Mark the statement as completed. This also close all temporary result
     * set, and deletes all temporary files held by the result sets.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>endStatement</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>setCurrentCommand</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>hasTransaction</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>transaction</name><operator>.</operator><name>markStatementEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>startStatement</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Clear the view cache for this session.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>clearViewIndexCache</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>viewIndexCache</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>ValueLob</name></type> <name>addTemporaryLob</name><parameter_list>(<parameter><decl><type><name>ValueLob</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>LobData</name></type> <name>lobData</name> <init>= <expr><call><name><name>v</name><operator>.</operator><name>getLobData</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>lobData</name> <operator>instanceof</operator> <name>LobDataInMemory</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>v</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>tableId</name> <init>= <expr><operator>(</operator><operator>(</operator><name>LobDataDatabase</name><operator>)</operator> <name>lobData</name><operator>)</operator><operator>.</operator><call><name>getTableId</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>tableId</name> <operator>==</operator> <name><name>LobStorageFrontend</name><operator>.</operator><name>TABLE_RESULT</name></name> <operator>||</operator> <name>tableId</name> <operator>==</operator> <name><name>LobStorageFrontend</name><operator>.</operator><name>TABLE_TEMP</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>temporaryResultLobs</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>temporaryResultLobs</name> <operator>=</operator> <operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>temporaryResultLobs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TimeoutValue</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>temporaryLobs</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>temporaryLobs</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>temporaryLobs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><name>v</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isRemote</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Mark that the given table needs to be analyzed on commit.
     *
     * @param table the table
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>markTableForAnalyze</name><parameter_list>(<parameter><decl><type><name>Table</name></type> <name>table</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>tablesToAnalyze</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>tablesToAnalyze</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>tablesToAnalyze</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>State</name></type> <name>getState</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><call><name>getBlockingSessionId</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>State</name><operator>.</operator><name>BLOCKED</name></name></expr> </then><else>: <expr><call><name><name>state</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getBlockingSessionId</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>transaction</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>transaction</name><operator>.</operator><name>getBlockerId</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onRollback</name><parameter_list>(<parameter><decl><type><name><name>MVMap</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>, <argument><name><name>VersionedValue</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>map</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>key</name></decl></parameter>,
                            <parameter><decl><type><name><name>VersionedValue</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>existingValue</name></decl></parameter>,
                            <parameter><decl><type><name><name>VersionedValue</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>restoredValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// Here we are relying on the fact that map which backs table's primary index</comment>
        <comment type="line">// has the same name as the table itself</comment>
        <decl_stmt><decl><type><name>Store</name></type> <name>store</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getStore</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>MVTable</name></type> <name>table</name> <init>= <expr><call><name><name>store</name><operator>.</operator><name>getTable</name></name><argument_list>(<argument><expr><call><name><name>map</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>table</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Row</name></type> <name>oldRow</name> <init>= <expr><ternary><condition><expr><name>existingValue</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><operator>(</operator><name>Row</name><operator>)</operator> <call><name><name>existingValue</name><operator>.</operator><name>getCurrentValue</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Row</name></type> <name>newRow</name> <init>= <expr><ternary><condition><expr><name>restoredValue</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><operator>(</operator><name>Row</name><operator>)</operator> <call><name><name>restoredValue</name><operator>.</operator><name>getCurrentValue</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>table</name><operator>.</operator><name>fireAfterRow</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>oldRow</name></expr></argument>, <argument><expr><name>newRow</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>table</name><operator>.</operator><name>getContainsLargeObject</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>oldRow</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name><name>oldRow</name><operator>.</operator><name>getColumnCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                        <decl_stmt><decl><type><name>Value</name></type> <name>v</name> <init>= <expr><call><name><name>oldRow</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>v</name> <operator>instanceof</operator> <name>ValueLob</name></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name>removeAtCommit</name><argument_list>(<argument><expr><operator>(</operator><name>ValueLob</name><operator>)</operator> <name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>newRow</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name><name>newRow</name><operator>.</operator><name>getColumnCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                        <decl_stmt><decl><type><name>Value</name></type> <name>v</name> <init>= <expr><call><name><name>newRow</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>v</name> <operator>instanceof</operator> <name>ValueLob</name></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name>removeAtCommitStop</name><argument_list>(<argument><expr><operator>(</operator><name>ValueLob</name><operator>)</operator> <name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Represents a savepoint (a position in a transaction to where one can roll
     * back to).
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Savepoint</name> <block>{

        <comment type="block" format="javadoc">/**
         * The undo log index.
         */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>logIndex</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * The transaction savepoint id.
         */</comment>
        <decl_stmt><decl><type><name>long</name></type> <name>transactionSavepoint</name></decl>;</decl_stmt>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * An LOB object with a timeout.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>TimeoutValue</name> <block>{

        <comment type="block" format="javadoc">/**
         * The time when this object was created.
         */</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>created</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * The value.
         */</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>ValueLob</name></type> <name>value</name></decl>;</decl_stmt>

        <constructor><name>TimeoutValue</name><parameter_list>(<parameter><decl><type><name>ValueLob</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

    }</block></class>

    <comment type="block" format="javadoc">/**
     * Returns the network connection information, or {@code null}.
     *
     * @return the network connection information, or {@code null}
     */</comment>
    <function><type><specifier>public</specifier> <name>NetworkConnectionInfo</name></type> <name>getNetworkConnectionInfo</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>networkConnectionInfo</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>setNetworkConnectionInfo</name><parameter_list>(<parameter><decl><type><name>NetworkConnectionInfo</name></type> <name>networkConnectionInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>networkConnectionInfo</name></name> <operator>=</operator> <name>networkConnectionInfo</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>ValueTimestampTimeZone</name></type> <name>currentTimestamp</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ValueTimestampTimeZone</name></type> <name>ts</name> <init>= <expr><name>currentTimestamp</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ts</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>currentTimestamp</name> <operator>=</operator> <name>ts</name> <operator>=</operator> <call><name><name>DateTimeUtils</name><operator>.</operator><name>currentTimestamp</name></name><argument_list>(<argument><expr><name>timeZone</name></expr></argument>, <argument><expr><name>commandStartOrEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>ts</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Mode</name></type> <name>getMode</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>JavaObjectSerializer</name></type> <name>getJavaObjectSerializer</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>database</name><operator>.</operator><name>getJavaObjectSerializer</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>IsolationLevel</name></type> <name>getIsolationLevel</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>isolationLevel</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>setIsolationLevel</name><parameter_list>(<parameter><decl><type><name>IsolationLevel</name></type> <name>isolationLevel</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>commit</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isolationLevel</name></name> <operator>=</operator> <name>isolationLevel</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets bit set of non-keywords.
     *
     * @return set of non-keywords, or {@code null}
     */</comment>
    <function><type><specifier>public</specifier> <name>BitSet</name></type> <name>getNonKeywords</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>nonKeywords</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets bit set of non-keywords.
     *
     * @param nonKeywords set of non-keywords, or {@code null}
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNonKeywords</name><parameter_list>(<parameter><decl><type><name>BitSet</name></type> <name>nonKeywords</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>nonKeywords</name></name> <operator>=</operator> <name>nonKeywords</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>StaticSettings</name></type> <name>getStaticSettings</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>StaticSettings</name></type> <name>settings</name> <init>= <expr><name>staticSettings</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>settings</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>DbSettings</name></type> <name>dbSettings</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getSettings</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>staticSettings</name> <operator>=</operator> <name>settings</name> <operator>=</operator> <operator>new</operator> <call><name>StaticSettings</name><argument_list>(<argument><expr><name><name>dbSettings</name><operator>.</operator><name>databaseToUpper</name></name></expr></argument>, <argument><expr><name><name>dbSettings</name><operator>.</operator><name>databaseToLower</name></name></expr></argument>,
                    <argument><expr><name><name>dbSettings</name><operator>.</operator><name>caseInsensitiveIdentifiers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>settings</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>DynamicSettings</name></type> <name>getDynamicSettings</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>DynamicSettings</name><argument_list>(<argument><expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>timeZone</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>TimeZoneProvider</name></type> <name>currentTimeZone</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>timeZone</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets current time zone.
     *
     * @param timeZone time zone
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTimeZone</name><parameter_list>(<parameter><decl><type><name>TimeZoneProvider</name></type> <name>timeZone</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>timeZone</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>timeZone</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>timeZone</name></name> <operator>=</operator> <name>timeZone</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>ValueTimestampTimeZone</name></type> <name>ts</name> <init>= <expr><name>currentTimestamp</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ts</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>long</name></type> <name>dateValue</name> <init>= <expr><call><name><name>ts</name><operator>.</operator><name>getDateValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>long</name></type> <name>timeNanos</name> <init>= <expr><call><name><name>ts</name><operator>.</operator><name>getTimeNanos</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>offsetSeconds</name> <init>= <expr><call><name><name>ts</name><operator>.</operator><name>getTimeZoneOffsetSeconds</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>currentTimestamp</name> <operator>=</operator> <call><name><name>DateTimeUtils</name><operator>.</operator><name>timestampTimeZoneAtOffset</name></name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>, <argument><expr><name>timeNanos</name></expr></argument>, <argument><expr><name>offsetSeconds</name></expr></argument>, <comment type="line">//</comment>
                        <argument><expr><call><name><name>timeZone</name><operator>.</operator><name>getTimeZoneOffsetUTC</name></name><argument_list>(
                                <argument><expr><call><name><name>DateTimeUtils</name><operator>.</operator><name>getEpochSeconds</name></name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>, <argument><expr><name>timeNanos</name></expr></argument>, <argument><expr><name>offsetSeconds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>modificationId</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check if two values are equal with the current comparison mode.
     *
     * @param a the first value
     * @param b the second value
     * @return true if both objects are equal
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>areEqual</name><parameter_list>(<parameter><decl><type><name>Value</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// can not use equals because ValueDecimal 0.0 is not equal to 0.00.</comment>
        <return>return <expr><call><name><name>a</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><call><name><name>database</name><operator>.</operator><name>getCompareMode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Compare two values with the current comparison mode. The values may have
     * different data types including NULL.
     *
     * @param a the first value
     * @param b the second value
     * @return 0 if both values are equal, -1 if the first value is smaller, and
     *         1 otherwise
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>Value</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>a</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><call><name><name>database</name><operator>.</operator><name>getCompareMode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Compare two values with the current comparison mode. The values may have
     * different data types including NULL.
     *
     * @param a the first value
     * @param b the second value
     * @param forEquality perform only check for equality (= or &amp;lt;&amp;gt;)
     * @return 0 if both values are equal, -1 if the first value is smaller, 1
     *         if the second value is larger, {@link Integer#MIN_VALUE} if order
     *         is not defined due to NULL comparison
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>compareWithNull</name><parameter_list>(<parameter><decl><type><name>Value</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>forEquality</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>a</name><operator>.</operator><name>compareWithNull</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>forEquality</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><call><name><name>database</name><operator>.</operator><name>getCompareMode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Compare two values with the current comparison mode. The values must be
     * of the same type.
     *
     * @param a the first value
     * @param b the second value
     * @return 0 if both values are equal, -1 if the first value is smaller, and
     *         1 otherwise
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>compareTypeSafe</name><parameter_list>(<parameter><decl><type><name>Value</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>a</name><operator>.</operator><name>compareTypeSafe</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name><name>database</name><operator>.</operator><name>getCompareMode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Changes parsing mode of data types with too large length.
     *
     * @param truncateLargeLength
     *            {@code true} to truncate to valid bound, {@code false} to
     *            throw an exception
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTruncateLargeLength</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>truncateLargeLength</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>truncateLargeLength</name></name> <operator>=</operator> <name>truncateLargeLength</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns parsing mode of data types with too large length.
     *
     * @return {@code true} if large length is truncated, {@code false} if an
     *         exception is thrown
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isTruncateLargeLength</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>truncateLargeLength</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Changes parsing of a BINARY data type.
     *
     * @param variableBinary
     *            {@code true} to parse BINARY as VARBINARY, {@code false} to
     *            parse it as is
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setVariableBinary</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>variableBinary</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>variableBinary</name></name> <operator>=</operator> <name>variableBinary</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns BINARY data type parsing mode.
     *
     * @return {@code true} if BINARY should be parsed as VARBINARY,
     *         {@code false} if it should be parsed as is
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isVariableBinary</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>variableBinary</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Changes INFORMATION_SCHEMA content.
     *
     * @param oldInformationSchema
     *            {@code true} to have old-style tables in INFORMATION_SCHEMA,
     *            {@code false} to have modern tables
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOldInformationSchema</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>oldInformationSchema</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>oldInformationSchema</name></name> <operator>=</operator> <name>oldInformationSchema</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isOldInformationSchema</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>oldInformationSchema</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>DatabaseMeta</name></type> <name>getDatabaseMeta</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>DatabaseMetaLocal</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>zeroBasedEnums</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>database</name><operator>.</operator><name>zeroBasedEnums</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Enables or disables the quirks mode.
     *
     * @param quirksMode
     *            whether quirks mode should be enabled
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setQuirksMode</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>quirksMode</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>quirksMode</name></name> <operator>=</operator> <name>quirksMode</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns whether quirks mode is enabled explicitly or implicitly.
     *
     * @return {@code true} if database is starting or quirks mode was enabled
     *         explicitly, {@code false} otherwise
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isQuirksMode</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>quirksMode</name> <operator>||</operator> <call><name><name>database</name><operator>.</operator><name>isStarting</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Session</name></type> <name>setThreadLocalSession</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Session</name></type> <name>oldSession</name> <init>= <expr><call><name><name>THREAD_LOCAL_SESSION</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>THREAD_LOCAL_SESSION</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>oldSession</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>resetThreadLocalSession</name><parameter_list>(<parameter><decl><type><name>Session</name></type> <name>oldSession</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>oldSession</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>THREAD_LOCAL_SESSION</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>THREAD_LOCAL_SESSION</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>oldSession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

}</block></class>
</unit>
