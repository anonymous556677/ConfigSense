<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/index/IndexType.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>index</name></name>;</package>

<comment type="block" format="javadoc">/**
 * Represents information about the properties of an index
 */</comment>
<class><specifier>public</specifier> class <name>IndexType</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>primaryKey</name></decl>, <decl><type ref="prev"/><name>persistent</name></decl>, <decl><type ref="prev"/><name>unique</name></decl>, <decl><type ref="prev"/><name>hash</name></decl>, <decl><type ref="prev"/><name>scan</name></decl>, <decl><type ref="prev"/><name>spatial</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>belongsToConstraint</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Create a primary key index.
     *
     * @param persistent if the index is persistent
     * @param hash if a hash index should be used
     * @return the index type
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>IndexType</name></type> <name>createPrimaryKey</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>persistent</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>hash</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>IndexType</name></type> <name>type</name> <init>= <expr><operator>new</operator> <call><name>IndexType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>type</name><operator>.</operator><name>primaryKey</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>type</name><operator>.</operator><name>persistent</name></name> <operator>=</operator> <name>persistent</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>type</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>type</name><operator>.</operator><name>unique</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <return>return <expr><name>type</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create a unique index.
     *
     * @param persistent if the index is persistent
     * @param hash if a hash index should be used
     * @return the index type
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>IndexType</name></type> <name>createUnique</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>persistent</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>hash</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>IndexType</name></type> <name>type</name> <init>= <expr><operator>new</operator> <call><name>IndexType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>type</name><operator>.</operator><name>unique</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>type</name><operator>.</operator><name>persistent</name></name> <operator>=</operator> <name>persistent</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>type</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt>
        <return>return <expr><name>type</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create a non-unique index.
     *
     * @param persistent if the index is persistent
     * @return the index type
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>IndexType</name></type> <name>createNonUnique</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>persistent</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>createNonUnique</name><argument_list>(<argument><expr><name>persistent</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create a non-unique index.
     *
     * @param persistent if the index is persistent
     * @param hash if a hash index should be used
     * @param spatial if a spatial index should be used
     * @return the index type
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>IndexType</name></type> <name>createNonUnique</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>persistent</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>hash</name></decl></parameter>,
            <parameter><decl><type><name>boolean</name></type> <name>spatial</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>IndexType</name></type> <name>type</name> <init>= <expr><operator>new</operator> <call><name>IndexType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>type</name><operator>.</operator><name>persistent</name></name> <operator>=</operator> <name>persistent</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>type</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>type</name><operator>.</operator><name>spatial</name></name> <operator>=</operator> <name>spatial</name></expr>;</expr_stmt>
        <return>return <expr><name>type</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create a scan pseudo-index.
     *
     * @param persistent if the index is persistent
     * @return the index type
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>IndexType</name></type> <name>createScan</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>persistent</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>IndexType</name></type> <name>type</name> <init>= <expr><operator>new</operator> <call><name>IndexType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>type</name><operator>.</operator><name>persistent</name></name> <operator>=</operator> <name>persistent</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>type</name><operator>.</operator><name>scan</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <return>return <expr><name>type</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets if this index belongs to a constraint.
     *
     * @param belongsToConstraint if the index belongs to a constraint
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBelongsToConstraint</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>belongsToConstraint</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>belongsToConstraint</name></name> <operator>=</operator> <name>belongsToConstraint</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * If the index is created because of a constraint. Such indexes are to be
     * dropped once the constraint is dropped.
     *
     * @return if the index belongs to a constraint
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getBelongsToConstraint</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>belongsToConstraint</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Is this a hash index?
     *
     * @return true if it is a hash index
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isHash</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>hash</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Is this a spatial index?
     *
     * @return true if it is a spatial index
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSpatial</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>spatial</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Is this index persistent?
     *
     * @return true if it is persistent
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isPersistent</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>persistent</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Does this index belong to a primary key constraint?
     *
     * @return true if it references a primary key constraint
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isPrimaryKey</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>primaryKey</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Is this a unique index?
     *
     * @return true if it is
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isUnique</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>unique</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the SQL snippet to create such an index.
     *
     * @return the SQL snippet
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getSQL</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>buff</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>primaryKey</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"PRIMARY KEY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>hash</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" HASH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>unique</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"UNIQUE "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>hash</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"HASH "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>spatial</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"SPATIAL "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"INDEX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><call><name><name>buff</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Is this a table scan pseudo-index?
     *
     * @return true if it is
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isScan</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>scan</name></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>
