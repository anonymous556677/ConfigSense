<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/mvstore/db/MVTable.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>db</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayDeque</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ConcurrentHashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicInteger</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicLong</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>api</name><operator>.</operator><name>DatabaseEventListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>api</name><operator>.</operator><name>ErrorCode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>CreateTableData</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>constraint</name><operator>.</operator><name>Constraint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>constraint</name><operator>.</operator><name>ConstraintReferential</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Database</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>SessionLocal</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>SysProperties</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>index</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>index</name><operator>.</operator><name>Index</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>DbException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>Trace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mode</name><operator>.</operator><name>DefaultNullOrdering</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>DataUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>MVStoreException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>tx</name><operator>.</operator><name>Transaction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>tx</name><operator>.</operator><name>TransactionStore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>Row</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>SearchRow</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>SortOrder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>Column</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>IndexColumn</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>Table</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>TableBase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>TableType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>DebuggingThreadLocal</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>Utils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>DataType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>TypeInfo</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A table stored in a MVStore.
 */</comment>
<class><specifier>public</specifier> class <name>MVTable</name> <super_list><extends>extends <super><name>TableBase</name></super></extends></super_list> <block>{
    <comment type="block" format="javadoc">/**
     * The table name this thread is waiting to lock.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>DebuggingThreadLocal</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>WAITING_FOR_LOCK</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The table names this thread has exclusively locked.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>DebuggingThreadLocal</name><argument_list type="generic">&lt;<argument><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>EXCLUSIVE_LOCKS</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The tables names this thread has a shared lock on.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>DebuggingThreadLocal</name><argument_list type="generic">&lt;<argument><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>SHARED_LOCKS</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The type of trace lock events
     */</comment>
    <enum><specifier>private</specifier> enum <name>TraceLockEvent</name><block>{

        <decl><name>TRACE_LOCK_OK</name><argument_list>(<argument><expr><literal type="string">"ok"</literal></expr></argument>)</argument_list></decl>,
        <decl><name>TRACE_LOCK_WAITING_FOR</name><argument_list>(<argument><expr><literal type="string">"waiting for"</literal></expr></argument>)</argument_list></decl>,
        <decl><name>TRACE_LOCK_REQUESTING_FOR</name><argument_list>(<argument><expr><literal type="string">"requesting for"</literal></expr></argument>)</argument_list></decl>,
        <decl><name>TRACE_LOCK_TIMEOUT_AFTER</name><argument_list>(<argument><expr><literal type="string">"timeout after "</literal></expr></argument>)</argument_list></decl>,
        <decl><name>TRACE_LOCK_UNLOCK</name><argument_list>(<argument><expr><literal type="string">"unlock"</literal></expr></argument>)</argument_list></decl>,
        <decl><name>TRACE_LOCK_ADDED_FOR</name><argument_list>(<argument><expr><literal type="string">"added for"</literal></expr></argument>)</argument_list></decl>,
        <decl><name>TRACE_LOCK_ADD_UPGRADED_FOR</name><argument_list>(<argument><expr><literal type="string">"add (upgraded) for "</literal></expr></argument>)</argument_list></decl>;

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>eventText</name></decl>;</decl_stmt>

        <constructor><name>TraceLockEvent</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>eventText</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>eventText</name></name> <operator>=</operator> <name>eventText</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>String</name></type> <name>getEventText</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><name>eventText</name></expr>;</return>
        </block_content>}</block></function>
    }</block></enum>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>NO_EXTRA_INFO</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

    <static>static <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>SysProperties</name><operator>.</operator><name>THREAD_DEADLOCK_DETECTOR</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>WAITING_FOR_LOCK</name> <operator>=</operator> <operator>new</operator> <call><name><name>DebuggingThreadLocal</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>EXCLUSIVE_LOCKS</name> <operator>=</operator> <operator>new</operator> <call><name><name>DebuggingThreadLocal</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>SHARED_LOCKS</name> <operator>=</operator> <operator>new</operator> <call><name><name>DebuggingThreadLocal</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>WAITING_FOR_LOCK</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>EXCLUSIVE_LOCKS</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>SHARED_LOCKS</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></static>

    <comment type="block" format="javadoc">/**
     * Whether the table contains a CLOB or BLOB.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>containsLargeObject</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The session (if any) that has exclusively locked this table.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>SessionLocal</name></type> <name>lockExclusiveSession</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The set of sessions (if any) that have a shared lock on the table. Here
     * we are using using a ConcurrentHashMap as a set, as there is no
     * ConcurrentHashSet.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ConcurrentHashMap</name><argument_list type="generic">&lt;<argument><name>SessionLocal</name></argument>, <argument><name>SessionLocal</name></argument>&gt;</argument_list></name></type> <name>lockSharedSessions</name> <init>= <expr><operator>new</operator> <call><name><name>ConcurrentHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Column</name></type> <name>rowIdColumn</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>MVPrimaryIndex</name></type> <name>primaryIndex</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Index</name></argument>&gt;</argument_list></name></type> <name>indexes</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>AtomicLong</name></type> <name>lastModificationId</name> <init>= <expr><operator>new</operator> <call><name>AtomicLong</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The queue of sessions waiting to lock the table. It is a FIFO queue to
     * prevent starvation, since Java's synchronized locking is biased.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ArrayDeque</name><argument_list type="generic">&lt;<argument><name>SessionLocal</name></argument>&gt;</argument_list></name></type> <name>waitingSessions</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayDeque</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Trace</name></type> <name>traceLock</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>AtomicInteger</name></type> <name>changesUntilAnalyze</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>nextAnalyze</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Store</name></type> <name>store</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>TransactionStore</name></type> <name>transactionStore</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>MVTable</name><parameter_list>(<parameter><decl><type><name>CreateTableData</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>Store</name></type> <name>store</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isHidden</name></name> <operator>=</operator> <name><name>data</name><operator>.</operator><name>isHidden</name></name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>b</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Column</name></type> <name>col</name> <range>: <expr><call><name>getColumns</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>DataType</name><operator>.</operator><name>isLargeObject</name></name><argument_list>(<argument><expr><call><name><name>col</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValueType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>containsLargeObject</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>nextAnalyze</name> <operator>=</operator> <call><name><name>database</name><operator>.</operator><name>getSettings</name></name><argument_list>()</argument_list></call><operator>.</operator><name>analyzeAuto</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>changesUntilAnalyze</name> <operator>=</operator> <ternary><condition><expr><name>nextAnalyze</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><operator>new</operator> <call><name>AtomicInteger</name><argument_list>(<argument><expr><name>nextAnalyze</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>store</name></name> <operator>=</operator> <name>store</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>transactionStore</name></name> <operator>=</operator> <call><name><name>store</name><operator>.</operator><name>getTransactionStore</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>traceLock</name> <operator>=</operator> <call><name><name>database</name><operator>.</operator><name>getTrace</name></name><argument_list>(<argument><expr><name><name>Trace</name><operator>.</operator><name>LOCK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>primaryIndex</name> <operator>=</operator> <operator>new</operator> <call><name>MVPrimaryIndex</name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>IndexColumn</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><call><name>getColumns</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>IndexType</name><operator>.</operator><name>createScan</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>indexes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>primaryIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getMapName</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>primaryIndex</name><operator>.</operator><name>getMapName</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>lock</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lockType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>getLockMode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Constants</name><operator>.</operator><name>LOCK_MODE_OFF</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>registerTableAsUpdated</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>lockType</name> <operator>==</operator> <name><name>Table</name><operator>.</operator><name>READ_LOCK</name></name> <operator>&amp;&amp;</operator> <name>lockExclusiveSession</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>lockExclusiveSession</name> <operator>==</operator> <name>session</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>lockType</name> <operator>!=</operator> <name><name>Table</name><operator>.</operator><name>EXCLUSIVE_LOCK</name></name> <operator>&amp;&amp;</operator> <call><name><name>lockSharedSessions</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <synchronized>synchronized <init>(<expr><name>this</name></expr>)</init> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>lockType</name> <operator>!=</operator> <name><name>Table</name><operator>.</operator><name>EXCLUSIVE_LOCK</name></name> <operator>&amp;&amp;</operator> <call><name><name>lockSharedSessions</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>setWaitForLock</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name><name>Thread</name><operator>.</operator><name>currentThread</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>SysProperties</name><operator>.</operator><name>THREAD_DEADLOCK_DETECTOR</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>WAITING_FOR_LOCK</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>waitingSessions</name><operator>.</operator><name>addLast</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name>doLock1</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>lockType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <finally>finally <block>{<block_content>
                <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>setWaitForLock</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>SysProperties</name><operator>.</operator><name>THREAD_DEADLOCK_DETECTOR</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>WAITING_FOR_LOCK</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>waitingSessions</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></finally></try>
        </block_content>}</block></synchronized>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>doLock1</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lockType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>traceLock</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>lockType</name></expr></argument>, <argument><expr><name><name>TraceLockEvent</name><operator>.</operator><name>TRACE_LOCK_REQUESTING_FOR</name></name></expr></argument>, <argument><expr><name>NO_EXTRA_INFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// don't get the current time unless necessary</comment>
        <decl_stmt><decl><type><name>long</name></type> <name>max</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>checkDeadlock</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// if I'm the next one in the queue</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>waitingSessions</name><operator>.</operator><name>getFirst</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>session</name> <operator>&amp;&amp;</operator> <name>lockExclusiveSession</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>doLock2</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>lockType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>checkDeadlock</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>SessionLocal</name></argument>&gt;</argument_list></name></type> <name>sessions</name> <init>= <expr><call><name>checkDeadlock</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>sessions</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>DEADLOCK_1</name></name></expr></argument>,
                            <argument><expr><call><name>getDeadlockDetails</name><argument_list>(<argument><expr><name>sessions</name></expr></argument>, <argument><expr><name>lockType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <comment type="line">// check for deadlocks from now on</comment>
                <expr_stmt><expr><name>checkDeadlock</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>now</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>max</name> <operator>==</operator> <literal type="number">0L</literal></expr>)</condition> <block>{<block_content>
                <comment type="line">// try at least one more time</comment>
                <expr_stmt><expr><name>max</name> <operator>=</operator> <call><name><name>Utils</name><operator>.</operator><name>nanoTimePlusMillis</name></name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><call><name><name>session</name><operator>.</operator><name>getLockTimeout</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>now</name> <operator>-</operator> <name>max</name> <operator>&gt;=</operator> <literal type="number">0L</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>traceLock</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>lockType</name></expr></argument>,
                        <argument><expr><name><name>TraceLockEvent</name><operator>.</operator><name>TRACE_LOCK_TIMEOUT_AFTER</name></name></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>session</name><operator>.</operator><name>getLockTimeout</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>LOCK_TIMEOUT_1</name></name></expr></argument>, <argument><expr><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name>traceLock</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>lockType</name></expr></argument>, <argument><expr><name><name>TraceLockEvent</name><operator>.</operator><name>TRACE_LOCK_WAITING_FOR</name></name></expr></argument>, <argument><expr><name>NO_EXTRA_INFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// don't wait too long so that deadlocks are detected early</comment>
                <decl_stmt><decl><type><name>long</name></type> <name>sleep</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>DEADLOCK_CHECK</name></name></expr></argument>, <argument><expr><operator>(</operator><name>max</name> <operator>-</operator> <name>now</name><operator>)</operator> <operator>/</operator> <literal type="number">1_000_000L</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>sleep</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>sleep</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>wait</name><argument_list>(<argument><expr><name>sleep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <comment type="line">// ignore</comment>
            </block_content>}</block></catch></try>
        </block_content>}</block></while>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>doLock2</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lockType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>lockType</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name><name>Table</name><operator>.</operator><name>EXCLUSIVE_LOCK</name></name></expr>:</case>
            <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>lockSharedSessions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>traceLock</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>lockType</name></expr></argument>, <argument><expr><name><name>TraceLockEvent</name><operator>.</operator><name>TRACE_LOCK_ADDED_FOR</name></name></expr></argument>, <argument><expr><name>NO_EXTRA_INFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>registerTableAsLocked</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name><name>lockSharedSessions</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>traceLock</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>lockType</name></expr></argument>, <argument><expr><name><name>TraceLockEvent</name><operator>.</operator><name>TRACE_LOCK_ADD_UPGRADED_FOR</name></name></expr></argument>, <argument><expr><name>NO_EXTRA_INFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name>lockExclusiveSession</name> <operator>=</operator> <name>session</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>SysProperties</name><operator>.</operator><name>THREAD_DEADLOCK_DETECTOR</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>addLockToDebugList</name><argument_list>(<argument><expr><name>EXCLUSIVE_LOCKS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name><name>Table</name><operator>.</operator><name>WRITE_LOCK</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name><name>lockSharedSessions</name><operator>.</operator><name>putIfAbsent</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>traceLock</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>lockType</name></expr></argument>, <argument><expr><name><name>TraceLockEvent</name><operator>.</operator><name>TRACE_LOCK_OK</name></name></expr></argument>, <argument><expr><name>NO_EXTRA_INFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>registerTableAsLocked</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>SysProperties</name><operator>.</operator><name>THREAD_DEADLOCK_DETECTOR</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>addLockToDebugList</name><argument_list>(<argument><expr><name>SHARED_LOCKS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></switch>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>addLockToDebugList</name><parameter_list>(<parameter><decl><type><name><name>DebuggingThreadLocal</name><argument_list type="generic">&lt;<argument><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>locks</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><call><name><name>locks</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>list</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>list</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>locks</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>traceLock</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lockType</name></decl></parameter>, <parameter><decl><type><name>TraceLockEvent</name></type> <name>eventEnum</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>extraInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>traceLock</name><operator>.</operator><name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>traceLock</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"{0} {1} {2} {3} {4}"</literal></expr></argument>, <argument><expr><call><name><name>session</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><call><name>lockTypeToString</name><argument_list>(<argument><expr><name>lockType</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>eventEnum</name><operator>.</operator><name>getEventText</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>extraInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>unlock</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>database</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>lockType</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>lockExclusiveSession</name> <operator>==</operator> <name>s</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>lockType</name> <operator>=</operator> <name><name>Table</name><operator>.</operator><name>EXCLUSIVE_LOCK</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>lockSharedSessions</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>lockExclusiveSession</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>SysProperties</name><operator>.</operator><name>THREAD_DEADLOCK_DETECTOR</name></name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>exclusiveLocks</name> <init>= <expr><call><name><name>EXCLUSIVE_LOCKS</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>exclusiveLocks</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>exclusiveLocks</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>lockType</name> <operator>=</operator> <ternary><condition><expr><call><name><name>lockSharedSessions</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>Table</name><operator>.</operator><name>WRITE_LOCK</name></name></expr> </then><else>: <expr><name><name>Table</name><operator>.</operator><name>READ_LOCK</name></name></expr></else></ternary></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>SysProperties</name><operator>.</operator><name>THREAD_DEADLOCK_DETECTOR</name></name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>sharedLocks</name> <init>= <expr><call><name><name>SHARED_LOCKS</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>sharedLocks</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>sharedLocks</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name>traceLock</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>lockType</name></expr></argument>, <argument><expr><name><name>TraceLockEvent</name><operator>.</operator><name>TRACE_LOCK_UNLOCK</name></name></expr></argument>, <argument><expr><name>NO_EXTRA_INFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>lockType</name> <operator>!=</operator> <name><name>Table</name><operator>.</operator><name>READ_LOCK</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>waitingSessions</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <synchronized>synchronized <init>(<expr><name>this</name></expr>)</init> <block>{<block_content>
                    <expr_stmt><expr><call><name>notifyAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></synchronized>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// ignore</comment>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Row</name></type> <name>getRow</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>primaryIndex</name><operator>.</operator><name>getRow</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Index</name></type> <name>addIndex</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>indexName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indexId</name></decl></parameter>, <parameter><decl><type><name><name>IndexColumn</name><index>[]</index></name></type> <name>cols</name></decl></parameter>,
            <parameter><decl><type><name>int</name></type> <name>uniqueColumnCount</name></decl></parameter>, <parameter><decl><type><name>IndexType</name></type> <name>indexType</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>create</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>indexComment</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>cols</name> <operator>=</operator> <call><name>prepareColumns</name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><name>indexType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>isSessionTemporary</name> <init>= <expr><call><name>isTemporary</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isGlobalTemporary</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isSessionTemporary</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>lockMeta</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>MVIndex</name><argument_list type="generic">&lt;<argument><name>?</name></argument>,<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>index</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>mainIndexColumn</name> <init>= <expr><ternary><condition><expr><call><name><name>primaryIndex</name><operator>.</operator><name>getMainIndexColumn</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>SearchRow</name><operator>.</operator><name>ROWID_INDEX</name></name></expr>
                ?</condition><then> <expr><name><name>SearchRow</name><operator>.</operator><name>ROWID_INDEX</name></name></expr> </then><else>: <expr><call><name>getMainIndexColumn</name><argument_list>(<argument><expr><name>indexType</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>isStarting</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// if index does exists as a separate map it can't be a delegate</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>transactionStore</name><operator>.</operator><name>hasMap</name></name><argument_list>(<argument><expr><literal type="string">"index."</literal> <operator>+</operator> <name>indexId</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <comment type="line">// we can not reuse primary index</comment>
                <expr_stmt><expr><name>mainIndexColumn</name> <operator>=</operator> <name><name>SearchRow</name><operator>.</operator><name>ROWID_INDEX</name></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>primaryIndex</name><operator>.</operator><name>getRowCountMax</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>mainIndexColumn</name> <operator>=</operator> <name><name>SearchRow</name><operator>.</operator><name>ROWID_INDEX</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>mainIndexColumn</name> <operator>!=</operator> <name><name>SearchRow</name><operator>.</operator><name>ROWID_INDEX</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>primaryIndex</name><operator>.</operator><name>setMainIndexColumn</name></name><argument_list>(<argument><expr><name>mainIndexColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>index</name> <operator>=</operator> <operator>new</operator> <call><name>MVDelegateIndex</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>indexId</name></expr></argument>, <argument><expr><name>indexName</name></expr></argument>, <argument><expr><name>primaryIndex</name></expr></argument>,
                    <argument><expr><name>indexType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>indexType</name><operator>.</operator><name>isSpatial</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>index</name> <operator>=</operator> <operator>new</operator> <call><name>MVSpatialIndex</name><argument_list>(<argument><expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>indexId</name></expr></argument>,
                    <argument><expr><name>indexName</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><name>uniqueColumnCount</name></expr></argument>, <argument><expr><name>indexType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>index</name> <operator>=</operator> <operator>new</operator> <call><name>MVSecondaryIndex</name><argument_list>(<argument><expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>indexId</name></expr></argument>,
                    <argument><expr><name>indexName</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><name>uniqueColumnCount</name></expr></argument>, <argument><expr><name>indexType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>index</name><operator>.</operator><name>needRebuild</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>rebuildIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>indexName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>index</name><operator>.</operator><name>setTemporary</name></name><argument_list>(<argument><expr><call><name>isTemporary</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>index</name><operator>.</operator><name>getCreateSQL</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>index</name><operator>.</operator><name>setComment</name></name><argument_list>(<argument><expr><name>indexComment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>isSessionTemporary</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>addLocalTempTableIndex</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>addSchemaObject</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>indexes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setModified</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>index</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>rebuildIndex</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>MVIndex</name><argument_list type="generic">&lt;<argument><name>?</name></argument>,<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>indexName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isPersistent</name><argument_list>()</argument_list></call> <operator>||</operator> <name>index</name> <operator>instanceof</operator> <name>MVSpatialIndex</name></expr>)</condition> <block>{<block_content>
                <comment type="line">// in-memory</comment>
                <expr_stmt><expr><call><name>rebuildIndexBuffered</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>rebuildIndexBlockMerge</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>DbException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>getSchema</name><argument_list>()</argument_list></call><operator>.</operator><call><name>freeUniqueName</name><argument_list>(<argument><expr><name>indexName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name><name>index</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>DbException</name></type> <name>e2</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <comment type="line">// this could happen, for example on failure in the storage</comment>
                <comment type="line">// but if that is not the case it means</comment>
                <comment type="line">// there is something wrong with the database</comment>
                <expr_stmt><expr><call><name><name>trace</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><name>e2</name></expr></argument>, <argument><expr><literal type="string">"could not remove index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw>throw <expr><name>e2</name></expr>;</throw>
            </block_content>}</block></catch></try>
            <throw>throw <expr><name>e</name></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>rebuildIndexBlockMerge</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>MVIndex</name><argument_list type="generic">&lt;<argument><name>?</name></argument>,<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// Read entries in memory, sort them, write to a new map (in sorted</comment>
        <comment type="line">// order); repeat (using a new map for every block of 1 MB) until all</comment>
        <comment type="line">// record are read. Merge all maps to the target (using merge sort;</comment>
        <comment type="line">// duplicates are detected in the target). For randomly ordered data,</comment>
        <comment type="line">// this should use relatively few write operations.</comment>
        <comment type="line">// A possible optimization is: change the buffer size from "row count"</comment>
        <comment type="line">// to "amount of memory", and buffer index keys instead of rows.</comment>
        <decl_stmt><decl><type><name>Index</name></type> <name>scan</name> <init>= <expr><call><name>getScanIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>remaining</name> <init>= <expr><call><name><name>scan</name><operator>.</operator><name>getRowCount</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>total</name> <init>= <expr><name>remaining</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>scan</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Store</name></type> <name>store</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getStore</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>bufferSize</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getMaxMemoryRows</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>buffer</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>bufferSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>n</name> <init>= <expr><call><name>getName</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="char">':'</literal> <operator>+</operator> <call><name><name>index</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>bufferNames</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Row</name></type> <name>row</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>buffer</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>setProgress</name></name><argument_list>(<argument><expr><name><name>DatabaseEventListener</name><operator>.</operator><name>STATE_CREATE_INDEX</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>i</name><operator>++</operator></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>buffer</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>bufferSize</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>sortRows</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>mapName</name> <init>= <expr><call><name><name>store</name><operator>.</operator><name>nextTemporaryMapName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>index</name><operator>.</operator><name>addRowsToBuffer</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>mapName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bufferNames</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>mapName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>buffer</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>remaining</name><operator>--</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name>sortRows</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>bufferNames</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>mapName</name> <init>= <expr><call><name><name>store</name><operator>.</operator><name>nextTemporaryMapName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>index</name><operator>.</operator><name>addRowsToBuffer</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>mapName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bufferNames</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>mapName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>buffer</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>index</name><operator>.</operator><name>addBufferedRows</name></name><argument_list>(<argument><expr><name>bufferNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>addRowsToIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>remaining</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>(<argument><expr><literal type="string">"rowcount remaining="</literal> <operator>+</operator> <name>remaining</name> <operator>+</operator> <literal type="char">' '</literal> <operator>+</operator> <call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>rebuildIndexBuffered</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Index</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Index</name></type> <name>scan</name> <init>= <expr><call><name>getScanIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>remaining</name> <init>= <expr><call><name><name>scan</name><operator>.</operator><name>getRowCount</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>total</name> <init>= <expr><name>remaining</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>scan</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>bufferSize</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>total</name></expr></argument>, <argument><expr><call><name><name>database</name><operator>.</operator><name>getMaxMemoryRows</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>buffer</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>bufferSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>n</name> <init>= <expr><call><name>getName</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="char">':'</literal> <operator>+</operator> <call><name><name>index</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Row</name></type> <name>row</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>buffer</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>setProgress</name></name><argument_list>(<argument><expr><name><name>DatabaseEventListener</name><operator>.</operator><name>STATE_CREATE_INDEX</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>i</name><operator>++</operator></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>buffer</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>bufferSize</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>addRowsToIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>remaining</name><operator>--</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name>addRowsToIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>remaining</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>(<argument><expr><literal type="string">"rowcount remaining="</literal> <operator>+</operator> <name>remaining</name> <operator>+</operator> <literal type="char">' '</literal> <operator>+</operator> <call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>removeRow</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Row</name></type> <name>row</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>syncLastModificationIdWithDatabase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Transaction</name></type> <name>t</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getTransaction</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>savepoint</name> <init>= <expr><call><name><name>t</name><operator>.</operator><name>setSavepoint</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name><name>indexes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Index</name></type> <name>index</name> <init>= <expr><call><name><name>indexes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>index</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>rollbackToSavepoint</name></name><argument_list>(<argument><expr><name>savepoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>nested</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>addSuppressed</name></name><argument_list>(<argument><expr><name>nested</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
        <expr_stmt><expr><call><name>analyzeIfRequired</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>truncate</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>syncLastModificationIdWithDatabase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>result</name> <init>= <expr><call><name>getRowCountApproximation</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name><name>indexes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Index</name></type> <name>index</name> <init>= <expr><call><name><name>indexes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>index</name><operator>.</operator><name>truncate</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><name>changesUntilAnalyze</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>changesUntilAnalyze</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>nextAnalyze</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>addRow</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Row</name></type> <name>row</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>syncLastModificationIdWithDatabase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Transaction</name></type> <name>t</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getTransaction</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>savepoint</name> <init>= <expr><call><name><name>t</name><operator>.</operator><name>setSavepoint</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Index</name></type> <name>index</name> <range>: <expr><name>indexes</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>index</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>rollbackToSavepoint</name></name><argument_list>(<argument><expr><name>savepoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>nested</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>addSuppressed</name></name><argument_list>(<argument><expr><name>nested</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
        <expr_stmt><expr><call><name>analyzeIfRequired</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>updateRow</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Row</name></type> <name>oldRow</name></decl></parameter>, <parameter><decl><type><name>Row</name></type> <name>newRow</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>newRow</name><operator>.</operator><name>setKey</name></name><argument_list>(<argument><expr><call><name><name>oldRow</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>syncLastModificationIdWithDatabase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Transaction</name></type> <name>t</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getTransaction</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>savepoint</name> <init>= <expr><call><name><name>t</name><operator>.</operator><name>setSavepoint</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Index</name></type> <name>index</name> <range>: <expr><name>indexes</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>index</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>oldRow</name></expr></argument>, <argument><expr><name>newRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>rollbackToSavepoint</name></name><argument_list>(<argument><expr><name>savepoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>nested</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>addSuppressed</name></name><argument_list>(<argument><expr><name>nested</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
        <expr_stmt><expr><call><name>analyzeIfRequired</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Row</name></type> <name>lockRow</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Row</name></type> <name>row</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Row</name></type> <name>lockedRow</name> <init>= <expr><call><name><name>primaryIndex</name><operator>.</operator><name>lockRow</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>lockedRow</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><call><name><name>row</name><operator>.</operator><name>hasSharedData</name></name><argument_list>(<argument><expr><name>lockedRow</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>syncLastModificationIdWithDatabase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>lockedRow</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>analyzeIfRequired</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>changesUntilAnalyze</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>changesUntilAnalyze</name><operator>.</operator><name>decrementAndGet</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>nextAnalyze</name> <operator>&lt;=</operator> <name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>nextAnalyze</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>changesUntilAnalyze</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>nextAnalyze</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>markTableForAnalyze</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Index</name></type> <name>getScanIndex</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name>primaryIndex</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Index</name></argument>&gt;</argument_list></name></type> <name>getIndexes</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>indexes</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>getMaxDataModificationId</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>lastModificationId</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>removeChildrenAndResources</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>containsLargeObject</name></expr>)</condition> <block>{<block_content>
            <comment type="line">// unfortunately, the data is gone on rollback</comment>
            <expr_stmt><expr><call><name>truncate</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>getLobStorage</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>removeAllForTable</name><argument_list>(<argument><expr><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>lockMeta</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>getStore</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>removeTable</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>removeChildrenAndResources</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// remove scan index (at position 0 on the list) last</comment>
        <while>while <condition>(<expr><call><name><name>indexes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Index</name></type> <name>index</name> <init>= <expr><call><name><name>indexes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>index</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>index</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>removeSchemaObject</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <comment type="line">// needed for session temporary indexes</comment>
            <expr_stmt><expr><call><name><name>indexes</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name><name>primaryIndex</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>indexes</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>getRowCount</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>primaryIndex</name><operator>.</operator><name>getRowCount</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>getRowCountApproximation</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>primaryIndex</name><operator>.</operator><name>getRowCountApproximation</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>getDiskSpaceUsed</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>primaryIndex</name><operator>.</operator><name>getDiskSpaceUsed</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get a new transaction.
     *
     * @return the transaction
     */</comment>
    <function><type><name>Transaction</name></type> <name>getTransactionBegin</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// TODO need to commit/rollback the transaction</comment>
        <return>return <expr><call><name><name>transactionStore</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isRowLockable</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Mark the transaction as committed, so that the modification counter of
     * the database is incremented.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>commit</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>database</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>syncLastModificationIdWithDatabase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="line">// Field lastModificationId can not be just a volatile, because window of opportunity</comment>
    <comment type="line">// between reading database's modification id and storing this value in the field</comment>
    <comment type="line">// could be exploited by another thread.</comment>
    <comment type="line">// Second thread may do the same with possibly bigger (already advanced)</comment>
    <comment type="line">// modification id, and when first thread finally updates the field, it will</comment>
    <comment type="line">// result in lastModificationId jumping back.</comment>
    <comment type="line">// This is, of course, unacceptable.</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>syncLastModificationIdWithDatabase</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>nextModificationDataId</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getNextModificationDataId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>currentId</name></decl>;</decl_stmt>
        <do>do <block>{<block_content>
            <expr_stmt><expr><name>currentId</name> <operator>=</operator> <call><name><name>lastModificationId</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> while <condition>(<expr><name>nextModificationDataId</name> <operator>&gt;</operator> <name>currentId</name> <operator>&amp;&amp;</operator>
                <operator>!</operator><call><name><name>lastModificationId</name><operator>.</operator><name>compareAndSet</name></name><argument_list>(<argument><expr><name>currentId</name></expr></argument>, <argument><expr><name>nextModificationDataId</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Convert the MVStoreException to a database exception.
     *
     * @param e the illegal state exception
     * @return the database exception
     */</comment>
    <function><type><name>DbException</name></type> <name>convertException</name><parameter_list>(<parameter><decl><type><name>MVStoreException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>errorCode</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getErrorCode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>errorCode</name> <operator>==</operator> <name><name>DataUtils</name><operator>.</operator><name>ERROR_TRANSACTION_LOCKED</name></name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>CONCURRENT_UPDATE_1</name></name></expr></argument>,
                    <argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>errorCode</name> <operator>==</operator> <name><name>DataUtils</name><operator>.</operator><name>ERROR_TRANSACTIONS_DEADLOCK</name></name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>DEADLOCK_1</name></name></expr></argument>,
                    <argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>store</name><operator>.</operator><name>convertMVStoreException</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getMainIndexColumn</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>primaryIndex</name><operator>.</operator><name>getMainIndexColumn</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>


    <comment type="block" format="javadoc">/**
     * Appends the specified rows to the specified index.
     *
     * @param session
     *            the session
     * @param list
     *            the rows, list is cleared on completion
     * @param index
     *            the index to append to
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>addRowsToIndex</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>Index</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>sortRows</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>Row</name></type> <name>row</name> <range>: <expr><name>list</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>index</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Formats details of a deadlock.
     *
     * @param sessions
     *            the list of sessions
     * @param lockType
     *            the type of lock
     * @return formatted details of a deadlock
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>getDeadlockDetails</name><parameter_list>(<parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>SessionLocal</name></argument>&gt;</argument_list></name></type> <name>sessions</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lockType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// We add the thread details here to make it easier for customers to</comment>
        <comment type="line">// match up these error messages with their own logs.</comment>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>SessionLocal</name></type> <name>s</name> <range>: <expr><name>sessions</name></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Table</name></type> <name>lock</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>getWaitForLock</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Thread</name></type> <name>thread</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>getWaitForLockThread</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\nSession "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" on thread "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>thread</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" is waiting to lock "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>lock</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" ("</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name>lockTypeToString</name><argument_list>(<argument><expr><name>lockType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">") while locking "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>addComma</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>Table</name></type> <name>t</name> <range>: <expr><call><name><name>s</name><operator>.</operator><name>getLocks</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>addComma</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>addComma</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>t</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>t</name> <operator>instanceof</operator> <name>MVTable</name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>MVTable</name><operator>)</operator> <name>t</name><operator>)</operator><operator>.</operator><name>lockExclusiveSession</name> <operator>==</operator> <name>s</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" (exclusive)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" (shared)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><call><name><name>builder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>lockTypeToString</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lockType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>lockType</name> <operator>==</operator> <name><name>Table</name><operator>.</operator><name>READ_LOCK</name></name></expr> ?</condition><then> <expr><literal type="string">"shared read"</literal></expr>
                </then><else>: <expr><ternary><condition><expr><name>lockType</name> <operator>==</operator> <name><name>Table</name><operator>.</operator><name>WRITE_LOCK</name></name></expr> ?</condition><then> <expr><literal type="string">"shared write"</literal></expr> </then><else>: <expr><literal type="string">"exclusive"</literal></expr></else></ternary></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sorts the specified list of rows for a specified index.
     *
     * @param list
     *            the list of rows
     * @param index
     *            the index to sort for
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>sortRows</name><parameter_list>(<parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>SearchRow</name></extends></argument>&gt;</argument_list></name></type> <name>list</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Index</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>index</name><operator>::</operator><name>compareRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>canDrop</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>canGetRowCount</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>canTruncate</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>getCheckForeignKeyConstraints</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>database</name><operator>.</operator><name>getReferentialIntegrity</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Constraint</name></argument>&gt;</argument_list></name></type> <name>constraints</name> <init>= <expr><call><name>getConstraints</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>constraints</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>Constraint</name></type> <name>c</name> <range>: <expr><name>constraints</name></expr></range></decl></init>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>c</name><operator>.</operator><name>getConstraintType</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>Constraint</name><operator>.</operator><name>Type</name><operator>.</operator><name>REFERENTIAL</name></name></expr>)</condition> <block>{<block_content>
                        <continue>continue;</continue>
                    </block_content>}</block></if></if_stmt>
                    <decl_stmt><decl><type><name>ConstraintReferential</name></type> <name>ref</name> <init>= <expr><operator>(</operator><name>ConstraintReferential</name><operator>)</operator> <name>c</name></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name><name>ref</name><operator>.</operator><name>getRefTable</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>this</name></expr>)</condition> <block>{<block_content>
                        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>SessionLocal</name></argument>&gt;</argument_list></name></type> <name>checkDeadlock</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>SessionLocal</name></type> <name>clash</name></decl></parameter>, <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>SessionLocal</name></argument>&gt;</argument_list></name></type> <name>visited</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// only one deadlock check at any given time</comment>
        <synchronized>synchronized <init>(<expr><call><name>getClass</name><argument_list>()</argument_list></call></expr>)</init> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>clash</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <comment type="line">// verification is started</comment>
                <expr_stmt><expr><name>clash</name> <operator>=</operator> <name>session</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>visited</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clash</name> <operator>==</operator> <name>session</name></expr>)</condition> <block>{<block_content>
                <comment type="line">// we found a cycle where this session is involved</comment>
                <return>return <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>visited</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <comment type="line">// we have already checked this session.</comment>
                <comment type="line">// there is a cycle, but the sessions in the cycle need to</comment>
                <comment type="line">// find it out themselves</comment>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>visited</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>SessionLocal</name></argument>&gt;</argument_list></name></type> <name>error</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>SessionLocal</name></type> <name>s</name> <range>: <expr><call><name><name>lockSharedSessions</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>session</name></expr>)</condition> <block>{<block_content>
                    <comment type="line">// it doesn't matter if we have locked the object already</comment>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>Table</name></type> <name>t</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>getWaitForLock</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>t</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>error</name> <operator>=</operator> <call><name><name>t</name><operator>.</operator><name>checkDeadlock</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>clash</name></expr></argument>, <argument><expr><name>visited</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>error</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>error</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <comment type="line">// take a local copy so we don't see inconsistent data, since we are</comment>
            <comment type="line">// not locked while checking the lockExclusiveSession value</comment>
            <decl_stmt><decl><type><name>SessionLocal</name></type> <name>copyOfLockExclusiveSession</name> <init>= <expr><name>lockExclusiveSession</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>copyOfLockExclusiveSession</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Table</name></type> <name>t</name> <init>= <expr><call><name><name>copyOfLockExclusiveSession</name><operator>.</operator><name>getWaitForLock</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>t</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>error</name> <operator>=</operator> <call><name><name>t</name><operator>.</operator><name>checkDeadlock</name></name><argument_list>(<argument><expr><name>copyOfLockExclusiveSession</name></expr></argument>, <argument><expr><name>clash</name></expr></argument>, <argument><expr><name>visited</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>error</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>error</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>error</name></expr>;</return>
        </block_content>}</block></synchronized>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>checkSupportAlter</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// ok</comment>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getContainsLargeObject</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>containsLargeObject</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Column</name></type> <name>getRowIdColumn</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>rowIdColumn</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>rowIdColumn</name> <operator>=</operator> <operator>new</operator> <call><name>Column</name><argument_list>(<argument><expr><name><name>Column</name><operator>.</operator><name>ROWID</name></name></expr></argument>, <argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>SearchRow</name><operator>.</operator><name>ROWID_INDEX</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>rowIdColumn</name><operator>.</operator><name>setRowId</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>rowIdColumn</name><operator>.</operator><name>setNullable</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>rowIdColumn</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>TableType</name></type> <name>getTableType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>TableType</name><operator>.</operator><name>TABLE</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isDeterministic</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isLockedExclusively</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>lockExclusiveSession</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isLockedExclusivelyBy</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name>lockExclusiveSession</name> <operator>==</operator> <name>session</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>protected</specifier> <name>void</name></type> <name>invalidate</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>invalidate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/*
         * Query cache of a some sleeping session can have references to
         * invalidated tables. When this table was dropped by another session,
         * the field below still points to it and prevents its garbage
         * collection, so this field needs to be cleared to prevent a memory
         * leak.
         */</comment>
        <expr_stmt><expr><name>lockExclusiveSession</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getTraceSQL</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Prepares columns of an index.
     *
     * @param database the database
     * @param cols the index columns
     * @param indexType the type of an index
     * @return the prepared columns with flags set
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>IndexColumn</name><index>[]</index></name></type> <name>prepareColumns</name><parameter_list>(<parameter><decl><type><name>Database</name></type> <name>database</name></decl></parameter>, <parameter><decl><type><name><name>IndexColumn</name><index>[]</index></name></type> <name>cols</name></decl></parameter>, <parameter><decl><type><name>IndexType</name></type> <name>indexType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>indexType</name><operator>.</operator><name>isPrimaryKey</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>IndexColumn</name></type> <name>c</name> <range>: <expr><name>cols</name></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Column</name></type> <name>column</name> <init>= <expr><name><name>c</name><operator>.</operator><name>column</name></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>column</name><operator>.</operator><name>isNullable</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>COLUMN_MUST_NOT_BE_NULLABLE_1</name></name></expr></argument>, <argument><expr><call><name><name>column</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <for>for <control>(<init><decl><type><name>IndexColumn</name></type> <name>c</name> <range>: <expr><name>cols</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>column</name><operator>.</operator><name>setPrimaryKey</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name><name>indexType</name><operator>.</operator><name>isSpatial</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><name><name>cols</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>l</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>cols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sortType</name> <operator>&amp;</operator> <operator>(</operator><name><name>SortOrder</name><operator>.</operator><name>NULLS_FIRST</name></name> <operator>|</operator> <name><name>SortOrder</name><operator>.</operator><name>NULLS_LAST</name></name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></while>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>l</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>cols</name> <operator>=</operator> <call><name><name>cols</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>DefaultNullOrdering</name></type> <name>defaultNullOrdering</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getDefaultNullOrdering</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>IndexColumn</name></type> <name>oldColumn</name> <init>= <expr><name><name>cols</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>sortTypeOld</name> <init>= <expr><name><name>oldColumn</name><operator>.</operator><name>sortType</name></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>sortTypeNew</name> <init>= <expr><call><name><name>defaultNullOrdering</name><operator>.</operator><name>addExplicitNullOrdering</name></name><argument_list>(<argument><expr><name>sortTypeOld</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>sortTypeNew</name> <operator>!=</operator> <name>sortTypeOld</name></expr>)</condition> <block>{<block_content>
                        <decl_stmt><decl><type><name>IndexColumn</name></type> <name>newColumn</name> <init>= <expr><operator>new</operator> <call><name>IndexColumn</name><argument_list>(<argument><expr><name><name>oldColumn</name><operator>.</operator><name>columnName</name></name></expr></argument>, <argument><expr><name>sortTypeNew</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name><name>newColumn</name><operator>.</operator><name>column</name></name> <operator>=</operator> <name><name>oldColumn</name><operator>.</operator><name>column</name></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>cols</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>newColumn</name></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>cols</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
