<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/result/SearchRow.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>CastDataProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>CompareMode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>TypeInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueNull</name></name>;</import>

<comment type="block" format="javadoc">/**
 * The base class for rows stored in a table, and for partial rows stored in the
 * index.
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>SearchRow</name> <super_list><extends>extends <super><name>Value</name></super></extends></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * Index of a virtual "_ROWID_" column within a row or a table
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>ROWID_INDEX</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * If the key is this value, then the key is considered equal to all other
     * keys, when comparing.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>MATCH_ALL_ROW_KEY</name> <init>= <expr><name><name>Long</name><operator>.</operator><name>MIN_VALUE</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The constant that means "memory usage is unknown and needs to be calculated first".
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MEMORY_CALCULATE</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The row key.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>long</name></type> <name>key</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Get the column count.
     *
     * @return the column count
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>int</name></type> <name>getColumnCount</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Determine if specified column contains NULL
     * @param index column index
     * @return true if NULL
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isNull</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getValue</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the value for the column
     *
     * @param index the column number (starting with 0)
     * @return the value
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>Value</name></type> <name>getValue</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Set the value for given column
     *
     * @param index the column number (starting with 0)
     * @param v the new value
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>setValue</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Set the unique key of the row.
     *
     * @param key the key
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setKey</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the unique key of the row.
     *
     * @return the key
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getKey</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>key</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the estimated memory used for this row, in bytes.
     *
     * @return the memory
     */</comment>
    <function_decl><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <specifier>abstract</specifier> <name>int</name></type> <name>getMemory</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Copy all relevant values from the source to this row.
     * @param source source of column values
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>copyFrom</name><parameter_list>(<parameter><decl><type><name>SearchRow</name></type> <name>source</name></decl></parameter>)</parameter_list>;</function_decl>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>TypeInfo</name></type> <name>getType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_ROW_EMPTY</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getValueType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>Value</name><operator>.</operator><name>ROW</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>StringBuilder</name></type> <name>getSQL</name><parameter_list>(<parameter><decl><type><name>StringBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sqlFlags</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"ROW ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><call><name>getColumnCount</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>index</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>getValue</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getSQL</name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>sqlFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getString</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getTraceSQL</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>compareTypeSafe</name><parameter_list>(<parameter><decl><type><name>Value</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>CompareMode</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>CastDataProvider</name></type> <name>provider</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>
}</block></class>
</unit>
