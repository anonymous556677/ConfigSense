<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/util/DateTimeUtils.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0, and the
 * EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 * Iso8601: Initial Developer: Robert Rathsack (firstName dot lastName at gmx
 * dot de)
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>time</name><operator>.</operator><name>Instant</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>api</name><operator>.</operator><name>ErrorCode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>CastDataProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>DbException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>TypeInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueDate</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueTime</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueTimeTimeZone</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueTimestamp</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueTimestampTimeZone</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This utility class contains time conversion functions.
 * &lt;p&gt;
 * Date value: a bit field with bits for the year, month, and day. Absolute day:
 * the day number (0 means 1970-01-01).
 */</comment>
<class><specifier>public</specifier> class <name>DateTimeUtils</name> <block>{

    <comment type="block" format="javadoc">/**
     * The number of milliseconds per day.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>MILLIS_PER_DAY</name> <init>= <expr><literal type="number">24</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">1000L</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The number of seconds per day.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>SECONDS_PER_DAY</name> <init>= <expr><literal type="number">24</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The number of nanoseconds per second.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>NANOS_PER_SECOND</name> <init>= <expr><literal type="number">1_000_000_000</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The number of nanoseconds per minute.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>NANOS_PER_MINUTE</name> <init>= <expr><literal type="number">60</literal> <operator>*</operator> <name>NANOS_PER_SECOND</name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The number of nanoseconds per hour.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>NANOS_PER_HOUR</name> <init>= <expr><literal type="number">60</literal> <operator>*</operator> <name>NANOS_PER_MINUTE</name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The number of nanoseconds per day.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>NANOS_PER_DAY</name> <init>= <expr><name>MILLIS_PER_DAY</name> <operator>*</operator> <literal type="number">1_000_000</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The offset of year bits in date values.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SHIFT_YEAR</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The offset of month bits in date values.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SHIFT_MONTH</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Date value for 1970-01-01.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>EPOCH_DATE_VALUE</name> <init>= <expr><operator>(</operator><literal type="number">1970</literal> <operator>&lt;&lt;</operator> <name>SHIFT_YEAR</name><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>SHIFT_MONTH</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Minimum possible date value.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>MIN_DATE_VALUE</name> <init>= <expr><operator>(</operator><operator>-</operator><literal type="number">1_000_000_000L</literal> <operator>&lt;&lt;</operator> <name>SHIFT_YEAR</name><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>SHIFT_MONTH</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Maximum possible date value.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>MAX_DATE_VALUE</name> <init>= <expr><operator>(</operator><literal type="number">1_000_000_000L</literal> <operator>&lt;&lt;</operator> <name>SHIFT_YEAR</name><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">12</literal> <operator>&lt;&lt;</operator> <name>SHIFT_MONTH</name><operator>)</operator> <operator>+</operator> <literal type="number">31</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>NORMAL_DAYS_PER_MONTH</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Multipliers for {@link #convertScale(long, int, long)} and
     * {@link #appendNanos(StringBuilder, int)}.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>FRACTIONAL_SECONDS_TABLE</name> <init>= <expr><block>{ <expr><literal type="number">1_000_000_000</literal></expr>, <expr><literal type="number">100_000_000</literal></expr>,
            <expr><literal type="number">10_000_000</literal></expr>, <expr><literal type="number">1_000_000</literal></expr>, <expr><literal type="number">100_000</literal></expr>, <expr><literal type="number">10_000</literal></expr>, <expr><literal type="number">1_000</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>volatile</specifier> <name>TimeZoneProvider</name></type> <name>LOCAL</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>DateTimeUtils</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// utility class</comment>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Reset the cached calendar for default timezone, for example after
     * changing the default timezone.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>resetCalendar</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>LOCAL</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the time zone provider for the default time zone.
     *
     * @return the time zone provider for the default time zone
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>TimeZoneProvider</name></type> <name>getTimeZone</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>TimeZoneProvider</name></type> <name>local</name> <init>= <expr><name>LOCAL</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>local</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>LOCAL</name> <operator>=</operator> <name>local</name> <operator>=</operator> <call><name><name>TimeZoneProvider</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>local</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns current timestamp.
     *
     * @param timeZone
     *            the time zone
     * @return current timestamp
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ValueTimestampTimeZone</name></type> <name>currentTimestamp</name><parameter_list>(<parameter><decl><type><name>TimeZoneProvider</name></type> <name>timeZone</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>currentTimestamp</name><argument_list>(<argument><expr><name>timeZone</name></expr></argument>, <argument><expr><call><name><name>Instant</name><operator>.</operator><name>now</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns current timestamp using the specified instant for its value.
     *
     * @param timeZone
     *            the time zone
     * @param now
     *            timestamp source, must be greater than or equal to
     *            1970-01-01T00:00:00Z
     * @return current timestamp
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ValueTimestampTimeZone</name></type> <name>currentTimestamp</name><parameter_list>(<parameter><decl><type><name>TimeZoneProvider</name></type> <name>timeZone</name></decl></parameter>, <parameter><decl><type><name>Instant</name></type> <name>now</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="block">/*
         * This code intentionally does not support properly dates before UNIX
         * epoch because such support is not required for current dates.
         */</comment>
        <decl_stmt><decl><type><name>long</name></type> <name>second</name> <init>= <expr><call><name><name>now</name><operator>.</operator><name>getEpochSecond</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><call><name><name>timeZone</name><operator>.</operator><name>getTimeZoneOffsetUTC</name></name><argument_list>(<argument><expr><name>second</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>second</name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>
        <return>return <expr><call><name><name>ValueTimestampTimeZone</name><operator>.</operator><name>fromDateValueAndNanos</name></name><argument_list>(<argument><expr><call><name>dateValueFromAbsoluteDay</name><argument_list>(<argument><expr><name>second</name> <operator>/</operator> <name>SECONDS_PER_DAY</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><name>second</name> <operator>%</operator> <name>SECONDS_PER_DAY</name> <operator>*</operator> <literal type="number">1_000_000_000</literal> <operator>+</operator> <call><name><name>now</name><operator>.</operator><name>getNano</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Parse a date string. The format is: [+|-]year-month-day
     * or [+|-]yyyyMMdd.
     *
     * @param s the string to parse
     * @param start the parse index start
     * @param end the parse index end
     * @return the date value
     * @throws IllegalArgumentException if there is a problem
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>parseDateValue</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// +year</comment>
            <expr_stmt><expr><name>start</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// start at position 1 to support "-year"</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>yEnd</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>mStart</name></decl>, <decl><type ref="prev"/><name>mEnd</name></decl>, <decl><type ref="prev"/><name>dStart</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>yEnd</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// Standard [+|-]year-month-day format</comment>
            <expr_stmt><expr><name>mStart</name> <operator>=</operator> <name>yEnd</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>mEnd</name> <operator>=</operator> <call><name><name>s</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><name>mStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>mEnd</name> <operator>&lt;=</operator> <name>mStart</name></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>dStart</name> <operator>=</operator> <name>mEnd</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="line">// Additional [+|-]yyyyMMdd format for compatibility</comment>
            <expr_stmt><expr><name>mEnd</name> <operator>=</operator> <name>dStart</name> <operator>=</operator> <name>end</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>yEnd</name> <operator>=</operator> <name>mStart</name> <operator>=</operator> <name>mEnd</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            <comment type="line">// Accept only 3 or more digits in year for now</comment>
            <if_stmt><if>if <condition>(<expr><name>yEnd</name> <operator>&lt;</operator> <name>start</name> <operator>+</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>year</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>yEnd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>month</name> <init>= <expr><call><name><name>StringUtils</name><operator>.</operator><name>parseUInt31</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mStart</name></expr></argument>, <argument><expr><name>mEnd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>day</name> <init>= <expr><call><name><name>StringUtils</name><operator>.</operator><name>parseUInt31</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dStart</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isValidDate</name><argument_list>(<argument><expr><name>year</name></expr></argument>, <argument><expr><name>month</name></expr></argument>, <argument><expr><name>day</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><name>year</name> <operator>+</operator> <literal type="string">"-"</literal> <operator>+</operator> <name>month</name> <operator>+</operator> <literal type="string">"-"</literal> <operator>+</operator> <name>day</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>dateValue</name><argument_list>(<argument><expr><name>year</name></expr></argument>, <argument><expr><name>month</name></expr></argument>, <argument><expr><name>day</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Parse a time string. The format is: hour:minute[:second[.nanos]],
     * hhmm[ss[.nanos]], or hour.minute.second[.nanos].
     *
     * @param s the string to parse
     * @param start the parse index start
     * @param end the parse index end
     * @return the time in nanoseconds
     * @throws IllegalArgumentException if there is a problem
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>parseTimeNanos</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>hour</name></decl>, <decl><type ref="prev"/><name>minute</name></decl>, <decl><type ref="prev"/><name>second</name></decl>, <decl><type ref="prev"/><name>nanos</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>hEnd</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>mStart</name></decl>, <decl><type ref="prev"/><name>mEnd</name></decl>, <decl><type ref="prev"/><name>sStart</name></decl>, <decl><type ref="prev"/><name>sEnd</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>hEnd</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>mStart</name> <operator>=</operator> <name>hEnd</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>mEnd</name> <operator>=</operator> <call><name><name>s</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>, <argument><expr><name>mStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>mEnd</name> <operator>&gt;=</operator> <name>mStart</name></expr>)</condition> <block>{<block_content>
                <comment type="line">// Standard hour:minute:second[.nanos] format</comment>
                <expr_stmt><expr><name>sStart</name> <operator>=</operator> <name>mEnd</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>sEnd</name> <operator>=</operator> <call><name><name>s</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>, <argument><expr><name>sStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <comment type="line">// Additional hour:minute format for compatibility</comment>
                <expr_stmt><expr><name>mEnd</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>sStart</name> <operator>=</operator> <name>sEnd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>t</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <comment type="line">// Additional hhmm[ss] format for compatibility</comment>
                <expr_stmt><expr><name>hEnd</name> <operator>=</operator> <name>mStart</name> <operator>=</operator> <name>start</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>mEnd</name> <operator>=</operator> <name>mStart</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name>end</name> <operator>-</operator> <name>start</name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>sStart</name> <operator>=</operator> <name>mEnd</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>sEnd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>sStart</name> <operator>=</operator> <name>sEnd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>t</name> <operator>&gt;=</operator> <name>start</name> <operator>+</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
                <comment type="line">// Additional hhmmss.nanos format for compatibility</comment>
                <if_stmt><if>if <condition>(<expr><name>t</name> <operator>-</operator> <name>start</name> <operator>!=</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>hEnd</name> <operator>=</operator> <name>mStart</name> <operator>=</operator> <name>start</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>mEnd</name> <operator>=</operator> <name>sStart</name> <operator>=</operator> <name>mStart</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>sEnd</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <comment type="line">// Additional hour.minute.second[.nanos] IBM DB2 time format</comment>
                <expr_stmt><expr><name>hEnd</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>mStart</name> <operator>=</operator> <name>hEnd</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>mEnd</name> <operator>=</operator> <call><name><name>s</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>, <argument><expr><name>mStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>mEnd</name> <operator>&lt;=</operator> <name>mStart</name></expr>)</condition> <block>{<block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>sStart</name> <operator>=</operator> <name>mEnd</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>sEnd</name> <operator>=</operator> <call><name><name>s</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>, <argument><expr><name>sStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name>hour</name> <operator>=</operator> <call><name><name>StringUtils</name><operator>.</operator><name>parseUInt31</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>hEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>hour</name> <operator>&gt;=</operator> <literal type="number">24</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>minute</name> <operator>=</operator> <call><name><name>StringUtils</name><operator>.</operator><name>parseUInt31</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mStart</name></expr></argument>, <argument><expr><name>mEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>sStart</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>sEnd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>second</name> <operator>=</operator> <call><name><name>StringUtils</name><operator>.</operator><name>parseUInt31</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sStart</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>nanos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>second</name> <operator>=</operator> <call><name><name>StringUtils</name><operator>.</operator><name>parseUInt31</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sStart</name></expr></argument>, <argument><expr><name>sEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>nanos</name> <operator>=</operator> <call><name>parseNanos</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sEnd</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>second</name> <operator>=</operator> <name>nanos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>minute</name> <operator>&gt;=</operator> <literal type="number">60</literal> <operator>||</operator> <name>second</name> <operator>&gt;=</operator> <literal type="number">60</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>hour</name> <operator>*</operator> <literal type="number">60L</literal><operator>)</operator> <operator>+</operator> <name>minute</name><operator>)</operator> <operator>*</operator> <literal type="number">60</literal><operator>)</operator> <operator>+</operator> <name>second</name><operator>)</operator> <operator>*</operator> <name>NANOS_PER_SECOND</name> <operator>+</operator> <name>nanos</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Parse nanoseconds.
     *
     * @param s String to parse.
     * @param start Begin position at the string to read.
     * @param end End position at the string to read.
     * @return Parsed nanoseconds.
     */</comment>
    <function><type><specifier>static</specifier> <name>int</name></type> <name>parseNanos</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;=</operator> <name>end</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nanos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>mul</name> <init>= <expr><literal type="number">100_000_000</literal></expr></init></decl>;</decl_stmt>
        <do>do <block>{<block_content>
            <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="char">'0'</literal> <operator>||</operator> <name>c</name> <operator>&gt;</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>nanos</name> <operator>+=</operator> <name>mul</name> <operator>*</operator> <operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
            <comment type="line">// mul can become 0, but continue loop anyway to ensure that all</comment>
            <comment type="line">// remaining digits are valid</comment>
            <expr_stmt><expr><name>mul</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
        </block_content>}</block> while <condition>(<expr><operator>++</operator><name>start</name> <operator>&lt;</operator> <name>end</name></expr>)</condition>;</do>
        <return>return <expr><name>nanos</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Parses timestamp value from the specified string.
     *
     * @param s
     *            string to parse
     * @param provider
     *            the cast information provider, may be {@code null} for
     *            Standard-compliant literals
     * @param withTimeZone
     *            if {@code true} return {@link ValueTimestampTimeZone} instead of
     *            {@link ValueTimestamp}
     * @return parsed timestamp
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Value</name></type> <name>parseTimestamp</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>CastDataProvider</name></type> <name>provider</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>withTimeZone</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>dateEnd</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>dateEnd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// ISO 8601 compatibility</comment>
            <expr_stmt><expr><name>dateEnd</name> <operator>=</operator> <call><name><name>s</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">'T'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>dateEnd</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>provider</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>provider</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><name>allowDB2TimestampFormat</name></expr>)</condition> <block>{<block_content>
                <comment type="line">// DB2 also allows dash between date and time</comment>
                <expr_stmt><expr><name>dateEnd</name> <operator>=</operator> <call><name><name>s</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>timeStart</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>dateEnd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>dateEnd</name> <operator>=</operator> <call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>timeStart</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>timeStart</name> <operator>=</operator> <name>dateEnd</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>dateValue</name> <init>= <expr><call><name>parseDateValue</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dateEnd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>nanos</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TimeZoneProvider</name></type> <name>tz</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>timeStart</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>nanos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>dateEnd</name><operator>++</operator></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>timeEnd</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><literal type="string">"Z"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>tz</name> <operator>=</operator> <name><name>TimeZoneProvider</name><operator>.</operator><name>UTC</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>timeEnd</name> <operator>=</operator> <call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>timeZoneStart</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">'+'</literal></expr></argument>, <argument><expr><name>dateEnd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>timeZoneStart</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>timeZoneStart</name> <operator>=</operator> <call><name><name>s</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><name>dateEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>timeZoneStart</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <comment type="line">// Allow [timeZoneName] part after time zone offset</comment>
                    <decl_stmt><decl><type><name>int</name></type> <name>offsetEnd</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">'['</literal></expr></argument>, <argument><expr><name>timeZoneStart</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>offsetEnd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>offsetEnd</name> <operator>=</operator> <call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>tz</name> <operator>=</operator> <call><name><name>TimeZoneProvider</name><operator>.</operator><name>ofId</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>timeZoneStart</name></expr></argument>, <argument><expr><name>offsetEnd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>timeZoneStart</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>timeZoneStart</name><operator>--</operator></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>timeEnd</name> <operator>=</operator> <name>timeZoneStart</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>timeZoneStart</name> <operator>=</operator> <call><name><name>s</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>dateEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>timeZoneStart</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>tz</name> <operator>=</operator> <call><name><name>TimeZoneProvider</name><operator>.</operator><name>ofId</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>timeZoneStart</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>timeEnd</name> <operator>=</operator> <name>timeZoneStart</name></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><name>timeEnd</name> <operator>=</operator> <call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name>nanos</name> <operator>=</operator> <call><name>parseTimeNanos</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dateEnd</name></expr></argument>, <argument><expr><name>timeEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>withTimeZone</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>tzSeconds</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>tz</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>tz</name> <operator>=</operator> <ternary><condition><expr><name>provider</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>provider</name><operator>.</operator><name>currentTimeZone</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>DateTimeUtils</name><operator>.</operator><name>getTimeZone</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>tz</name> <operator>!=</operator> <name><name>TimeZoneProvider</name><operator>.</operator><name>UTC</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>tzSeconds</name> <operator>=</operator> <call><name><name>tz</name><operator>.</operator><name>getTimeZoneOffsetUTC</name></name><argument_list>(<argument><expr><call><name><name>tz</name><operator>.</operator><name>getEpochSecondsFromLocal</name></name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>, <argument><expr><name>nanos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>tzSeconds</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <return>return <expr><call><name><name>ValueTimestampTimeZone</name><operator>.</operator><name>fromDateValueAndNanos</name></name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>, <argument><expr><name>nanos</name></expr></argument>, <argument><expr><name>tzSeconds</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tz</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>seconds</name> <init>= <expr><call><name><name>tz</name><operator>.</operator><name>getEpochSecondsFromLocal</name></name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>, <argument><expr><name>nanos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>seconds</name> <operator>+=</operator> <operator>(</operator><ternary><condition><expr><name>provider</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>provider</name><operator>.</operator><name>currentTimeZone</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>DateTimeUtils</name><operator>.</operator><name>getTimeZone</name></name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator>
                    <operator>.</operator><call><name>getTimeZoneOffsetUTC</name><argument_list>(<argument><expr><name>seconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>dateValue</name> <operator>=</operator> <call><name>dateValueFromLocalSeconds</name><argument_list>(<argument><expr><name>seconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>nanos</name> <operator>=</operator> <name>nanos</name> <operator>%</operator> <literal type="number">1_000_000_000</literal> <operator>+</operator> <call><name>nanosFromLocalSeconds</name><argument_list>(<argument><expr><name>seconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>ValueTimestamp</name><operator>.</operator><name>fromDateValueAndNanos</name></name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>, <argument><expr><name>nanos</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Parses TIME WITH TIME ZONE value from the specified string.
     *
     * @param s
     *            string to parse
     * @param provider
     *            the cast information provider, or {@code null}
     * @return parsed time with time zone
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ValueTimeTimeZone</name></type> <name>parseTimeWithTimeZone</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>CastDataProvider</name></type> <name>provider</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>timeEnd</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TimeZoneProvider</name></type> <name>tz</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><literal type="string">"Z"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>tz</name> <operator>=</operator> <name><name>TimeZoneProvider</name><operator>.</operator><name>UTC</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>timeEnd</name> <operator>=</operator> <call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>timeZoneStart</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">'+'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>timeZoneStart</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>timeZoneStart</name> <operator>=</operator> <call><name><name>s</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>timeZoneStart</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>tz</name> <operator>=</operator> <call><name><name>TimeZoneProvider</name><operator>.</operator><name>ofId</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>timeZoneStart</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>timeZoneStart</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>timeZoneStart</name><operator>--</operator></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>timeEnd</name> <operator>=</operator> <name>timeZoneStart</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>timeZoneStart</name> <operator>=</operator> <call><name><name>s</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>timeZoneStart</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>tz</name> <operator>=</operator> <call><name><name>TimeZoneProvider</name><operator>.</operator><name>ofId</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>timeZoneStart</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>timeEnd</name> <operator>=</operator> <name>timeZoneStart</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>INVALID_DATETIME_CONSTANT_2</name></name></expr></argument>, <argument><expr><literal type="string">"TIME WITH TIME ZONE"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>tz</name><operator>.</operator><name>hasFixedOffset</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>INVALID_DATETIME_CONSTANT_2</name></name></expr></argument>, <argument><expr><literal type="string">"TIME WITH TIME ZONE"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><call><name><name>ValueTimeTimeZone</name><operator>.</operator><name>fromNanos</name></name><argument_list>(<argument><expr><call><name>parseTimeNanos</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>timeEnd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>tz</name><operator>.</operator><name>getTimeZoneOffsetUTC</name></name><argument_list>(<argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Calculates the seconds since epoch for the specified date value,
     * nanoseconds since midnight, and time zone offset.
     * @param dateValue
     *            date value
     * @param timeNanos
     *            nanoseconds since midnight
     * @param offsetSeconds
     *            time zone offset in seconds
     * @return seconds since epoch in UTC
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getEpochSeconds</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>dateValue</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>timeNanos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offsetSeconds</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>absoluteDayFromDateValue</name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>SECONDS_PER_DAY</name> <operator>+</operator> <name>timeNanos</name> <operator>/</operator> <name>NANOS_PER_SECOND</name> <operator>-</operator> <name>offsetSeconds</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Extracts date value and nanos of day from the specified value.
     *
     * @param value
     *            value to extract fields from
     * @param provider
     *            the cast information provider
     * @return array with date value and nanos of day
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>long</name><index>[]</index></name></type> <name>dateAndTimeFromValue</name><parameter_list>(<parameter><decl><type><name>Value</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>CastDataProvider</name></type> <name>provider</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>dateValue</name> <init>= <expr><name>EPOCH_DATE_VALUE</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>timeNanos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>instanceof</operator> <name>ValueTimestamp</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>ValueTimestamp</name></type> <name>v</name> <init>= <expr><operator>(</operator><name>ValueTimestamp</name><operator>)</operator> <name>value</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>dateValue</name> <operator>=</operator> <call><name><name>v</name><operator>.</operator><name>getDateValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>timeNanos</name> <operator>=</operator> <call><name><name>v</name><operator>.</operator><name>getTimeNanos</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>value</name> <operator>instanceof</operator> <name>ValueDate</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>dateValue</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ValueDate</name><operator>)</operator> <name>value</name><operator>)</operator><operator>.</operator><call><name>getDateValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>value</name> <operator>instanceof</operator> <name>ValueTime</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>timeNanos</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ValueTime</name><operator>)</operator> <name>value</name><operator>)</operator><operator>.</operator><call><name>getNanos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>value</name> <operator>instanceof</operator> <name>ValueTimestampTimeZone</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>ValueTimestampTimeZone</name></type> <name>v</name> <init>= <expr><operator>(</operator><name>ValueTimestampTimeZone</name><operator>)</operator> <name>value</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>dateValue</name> <operator>=</operator> <call><name><name>v</name><operator>.</operator><name>getDateValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>timeNanos</name> <operator>=</operator> <call><name><name>v</name><operator>.</operator><name>getTimeNanos</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>value</name> <operator>instanceof</operator> <name>ValueTimeTimeZone</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>timeNanos</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ValueTimeTimeZone</name><operator>)</operator> <name>value</name><operator>)</operator><operator>.</operator><call><name>getNanos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>ValueTimestamp</name></type> <name>v</name> <init>= <expr><operator>(</operator><name>ValueTimestamp</name><operator>)</operator> <call><name><name>value</name><operator>.</operator><name>convertTo</name></name><argument_list>(<argument><expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_TIMESTAMP</name></name></expr></argument>, <argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>dateValue</name> <operator>=</operator> <call><name><name>v</name><operator>.</operator><name>getDateValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>timeNanos</name> <operator>=</operator> <call><name><name>v</name><operator>.</operator><name>getTimeNanos</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><operator>new</operator> <name><name>long</name><index>[]</index></name> <block>{<expr><name>dateValue</name></expr>, <expr><name>timeNanos</name></expr>}</block></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a new date-time value with the same type as original value. If
     * original value is a ValueTimestampTimeZone or ValueTimeTimeZone, returned
     * value will have the same time zone offset as original value.
     *
     * @param original
     *            original value
     * @param dateValue
     *            date value for the returned value
     * @param timeNanos
     *            nanos of day for the returned value
     * @return new value with specified date value and nanos of day
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Value</name></type> <name>dateTimeToValue</name><parameter_list>(<parameter><decl><type><name>Value</name></type> <name>original</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>dateValue</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>timeNanos</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><call><name><name>original</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>DATE</name></name></expr>:</case>
            <return>return <expr><call><name><name>ValueDate</name><operator>.</operator><name>fromDateValue</name></name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TIME</name></name></expr>:</case>
            <return>return <expr><call><name><name>ValueTime</name><operator>.</operator><name>fromNanos</name></name><argument_list>(<argument><expr><name>timeNanos</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TIME_TZ</name></name></expr>:</case>
            <return>return <expr><call><name><name>ValueTimeTimeZone</name><operator>.</operator><name>fromNanos</name></name><argument_list>(<argument><expr><name>timeNanos</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>ValueTimeTimeZone</name><operator>)</operator> <name>original</name><operator>)</operator><operator>.</operator><call><name>getTimeZoneOffsetSeconds</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TIMESTAMP</name></name></expr>:</case>
        <default>default:</default>
            <return>return <expr><call><name><name>ValueTimestamp</name><operator>.</operator><name>fromDateValueAndNanos</name></name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>, <argument><expr><name>timeNanos</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TIMESTAMP_TZ</name></name></expr>:</case>
            <return>return <expr><call><name><name>ValueTimestampTimeZone</name><operator>.</operator><name>fromDateValueAndNanos</name></name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>, <argument><expr><name>timeNanos</name></expr></argument>,
                    <argument><expr><operator>(</operator><operator>(</operator><name>ValueTimestampTimeZone</name><operator>)</operator> <name>original</name><operator>)</operator><operator>.</operator><call><name>getTimeZoneOffsetSeconds</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns day of week.
     *
     * @param dateValue
     *            the date value
     * @param firstDayOfWeek
     *            first day of week, Monday as 1, Sunday as 7 or 0
     * @return day of week
     * @see #getIsoDayOfWeek(long)
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getDayOfWeek</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>dateValue</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>firstDayOfWeek</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getDayOfWeekFromAbsolute</name><argument_list>(<argument><expr><call><name>absoluteDayFromDateValue</name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>firstDayOfWeek</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the day of the week from the absolute day value.
     *
     * @param absoluteValue the absolute day
     * @param firstDayOfWeek the first day of the week
     * @return the day of week
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getDayOfWeekFromAbsolute</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>absoluteValue</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>firstDayOfWeek</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>absoluteValue</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>absoluteValue</name> <operator>-</operator> <name>firstDayOfWeek</name> <operator>+</operator> <literal type="number">11</literal><operator>)</operator> <operator>%</operator> <literal type="number">7</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>
                </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>absoluteValue</name> <operator>-</operator> <name>firstDayOfWeek</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <literal type="number">7</literal><operator>)</operator> <operator>+</operator> <literal type="number">7</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns number of day in year.
     *
     * @param dateValue
     *            the date value
     * @return number of day in year
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getDayOfYear</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>dateValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><call><name>monthFromDateValue</name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><operator>(</operator><literal type="number">367</literal> <operator>*</operator> <name>m</name> <operator>-</operator> <literal type="number">362</literal><operator>)</operator> <operator>/</operator> <literal type="number">12</literal> <operator>+</operator> <call><name>dayFromDateValue</name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>m</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>y</name> <init>= <expr><call><name>yearFromDateValue</name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>y</name> <operator>%</operator> <literal type="number">100</literal> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>%</operator> <literal type="number">400</literal> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>a</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns ISO day of week.
     *
     * @param dateValue
     *            the date value
     * @return ISO day of week, Monday as 1 to Sunday as 7
     * @see #getSundayDayOfWeek(long)
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getIsoDayOfWeek</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>dateValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getDayOfWeek</name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns ISO number of week in year.
     *
     * @param dateValue
     *            the date value
     * @return number of week in year
     * @see #getIsoWeekYear(long)
     * @see #getWeekOfYear(long, int, int)
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getIsoWeekOfYear</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>dateValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getWeekOfYear</name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns ISO week year.
     *
     * @param dateValue
     *            the date value
     * @return ISO week year
     * @see #getIsoWeekOfYear(long)
     * @see #getWeekYear(long, int, int)
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getIsoWeekYear</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>dateValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getWeekYear</name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns day of week with Sunday as 1.
     *
     * @param dateValue
     *            the date value
     * @return day of week, Sunday as 1 to Monday as 7
     * @see #getIsoDayOfWeek(long)
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getSundayDayOfWeek</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>dateValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getDayOfWeek</name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns number of week in year.
     *
     * @param dateValue
     *            the date value
     * @param firstDayOfWeek
     *            first day of week, Monday as 1, Sunday as 7 or 0
     * @param minimalDaysInFirstWeek
     *            minimal days in first week of year
     * @return number of week in year
     * @see #getIsoWeekOfYear(long)
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getWeekOfYear</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>dateValue</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>firstDayOfWeek</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minimalDaysInFirstWeek</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>abs</name> <init>= <expr><call><name>absoluteDayFromDateValue</name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>year</name> <init>= <expr><call><name>yearFromDateValue</name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>base</name> <init>= <expr><call><name>getWeekYearAbsoluteStart</name><argument_list>(<argument><expr><name>year</name></expr></argument>, <argument><expr><name>firstDayOfWeek</name></expr></argument>, <argument><expr><name>minimalDaysInFirstWeek</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>abs</name> <operator>-</operator> <name>base</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>base</name> <operator>=</operator> <call><name>getWeekYearAbsoluteStart</name><argument_list>(<argument><expr><name>year</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>firstDayOfWeek</name></expr></argument>, <argument><expr><name>minimalDaysInFirstWeek</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>monthFromDateValue</name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">12</literal> <operator>&amp;&amp;</operator> <literal type="number">24</literal> <operator>+</operator> <name>minimalDaysInFirstWeek</name> <operator>&lt;</operator> <call><name>dayFromDateValue</name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>abs</name> <operator>&gt;=</operator> <call><name>getWeekYearAbsoluteStart</name><argument_list>(<argument><expr><name>year</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>firstDayOfWeek</name></expr></argument>, <argument><expr><name>minimalDaysInFirstWeek</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="number">1</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>abs</name> <operator>-</operator> <name>base</name><operator>)</operator> <operator>/</operator> <literal type="number">7</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get absolute day of the first day in the week year.
     *
     * @param weekYear
     *            the week year
     * @param firstDayOfWeek
     *            first day of week, Monday as 1, Sunday as 7 or 0
     * @param minimalDaysInFirstWeek
     *            minimal days in first week of year
     * @return absolute day of the first day in the week year
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getWeekYearAbsoluteStart</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>weekYear</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>firstDayOfWeek</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minimalDaysInFirstWeek</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>first</name> <init>= <expr><call><name>absoluteDayFromYear</name><argument_list>(<argument><expr><name>weekYear</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>daysInFirstWeek</name> <init>= <expr><literal type="number">8</literal> <operator>-</operator> <call><name>getDayOfWeekFromAbsolute</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>firstDayOfWeek</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>base</name> <init>= <expr><name>first</name> <operator>+</operator> <name>daysInFirstWeek</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>daysInFirstWeek</name> <operator>&gt;=</operator> <name>minimalDaysInFirstWeek</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>base</name> <operator>-=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>base</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns week year.
     *
     * @param dateValue
     *            the date value
     * @param firstDayOfWeek
     *            first day of week, Monday as 1, Sunday as 7 or 0
     * @param minimalDaysInFirstWeek
     *            minimal days in first week of year
     * @return week year
     * @see #getIsoWeekYear(long)
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getWeekYear</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>dateValue</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>firstDayOfWeek</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minimalDaysInFirstWeek</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>abs</name> <init>= <expr><call><name>absoluteDayFromDateValue</name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>year</name> <init>= <expr><call><name>yearFromDateValue</name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>base</name> <init>= <expr><call><name>getWeekYearAbsoluteStart</name><argument_list>(<argument><expr><name>year</name></expr></argument>, <argument><expr><name>firstDayOfWeek</name></expr></argument>, <argument><expr><name>minimalDaysInFirstWeek</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>abs</name> <operator>&lt;</operator> <name>base</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>year</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>monthFromDateValue</name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">12</literal> <operator>&amp;&amp;</operator> <literal type="number">24</literal> <operator>+</operator> <name>minimalDaysInFirstWeek</name> <operator>&lt;</operator> <call><name>dayFromDateValue</name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>abs</name> <operator>&gt;=</operator> <call><name>getWeekYearAbsoluteStart</name><argument_list>(<argument><expr><name>year</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>firstDayOfWeek</name></expr></argument>, <argument><expr><name>minimalDaysInFirstWeek</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>year</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>year</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns number of days in month.
     *
     * @param year the year
     * @param month the month
     * @return number of days in the specified month
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getDaysInMonth</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>year</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>month</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>month</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>NORMAL_DAYS_PER_MONTH</name><index>[<expr><name>month</name></expr>]</index></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><ternary><condition><expr><operator>(</operator><name>year</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>year</name> <operator>%</operator> <literal type="number">100</literal> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>year</name> <operator>%</operator> <literal type="number">400</literal> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">29</literal></expr> </then><else>: <expr><literal type="number">28</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Verify if the specified date is valid.
     *
     * @param year the year
     * @param month the month (January is 1)
     * @param day the day (1 is the first of the month)
     * @return true if it is valid
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isValidDate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>year</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>month</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>day</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name>month</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>month</name> <operator>&lt;=</operator> <literal type="number">12</literal> <operator>&amp;&amp;</operator> <name>day</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>day</name> <operator>&lt;=</operator> <call><name>getDaysInMonth</name><argument_list>(<argument><expr><name>year</name></expr></argument>, <argument><expr><name>month</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the year from a date value.
     *
     * @param x the date value
     * @return the year
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>yearFromDateValue</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;&gt;</operator> <name>SHIFT_YEAR</name><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the month from a date value.
     *
     * @param x the date value
     * @return the month (1..12)
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>monthFromDateValue</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;&gt;</operator> <name>SHIFT_MONTH</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">15</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the day of month from a date value.
     *
     * @param x the date value
     * @return the day (1..31)
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>dayFromDateValue</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the date value from a given date.
     *
     * @param year the year
     * @param month the month (1..12)
     * @param day the day (1..31)
     * @return the date value
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>dateValue</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>year</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>month</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>day</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>year</name> <operator>&lt;&lt;</operator> <name>SHIFT_YEAR</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>month</name> <operator>&lt;&lt;</operator> <name>SHIFT_MONTH</name><operator>)</operator> <operator>|</operator> <name>day</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the date value from a given denormalized date with possible out of range
     * values of month and/or day. Used after addition or subtraction month or years
     * to (from) it to get a valid date.
     *
     * @param year
     *            the year
     * @param month
     *            the month, if out of range month and year will be normalized
     * @param day
     *            the day of the month, if out of range it will be saturated
     * @return the date value
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>dateValueFromDenormalizedDate</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>year</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>month</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>day</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>mm1</name> <init>= <expr><name>month</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>yd</name> <init>= <expr><name>mm1</name> <operator>/</operator> <literal type="number">12</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>mm1</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>yd</name> <operator>*</operator> <literal type="number">12</literal> <operator>!=</operator> <name>mm1</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>yd</name><operator>--</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>year</name> <operator>+</operator> <name>yd</name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>month</name> <operator>-</operator> <name>yd</name> <operator>*</operator> <literal type="number">12</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>day</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>day</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>= <expr><call><name>getDaysInMonth</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>day</name> <operator>&gt;</operator> <name>max</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>day</name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><call><name>dateValue</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>day</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Convert a local seconds to an encoded date.
     *
     * @param localSeconds the seconds since 1970-01-01
     * @return the date value
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>dateValueFromLocalSeconds</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>localSeconds</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>absoluteDay</name> <init>= <expr><name>localSeconds</name> <operator>/</operator> <name>SECONDS_PER_DAY</name></expr></init></decl>;</decl_stmt>
        <comment type="line">// Round toward negative infinity</comment>
        <if_stmt><if>if <condition>(<expr><name>localSeconds</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>absoluteDay</name> <operator>*</operator> <name>SECONDS_PER_DAY</name> <operator>!=</operator> <name>localSeconds</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>absoluteDay</name><operator>--</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>dateValueFromAbsoluteDay</name><argument_list>(<argument><expr><name>absoluteDay</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Convert a time in seconds in local time to the nanoseconds since midnight.
     *
     * @param localSeconds the seconds since 1970-01-01
     * @return the nanoseconds
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>nanosFromLocalSeconds</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>localSeconds</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>localSeconds</name> <operator>%=</operator> <name>SECONDS_PER_DAY</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>localSeconds</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>localSeconds</name> <operator>+=</operator> <name>SECONDS_PER_DAY</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>localSeconds</name> <operator>*</operator> <name>NANOS_PER_SECOND</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Calculate the normalized nanos of day.
     *
     * @param nanos the nanoseconds (may be negative or larger than one day)
     * @return the nanos of day within a day
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>normalizeNanosOfDay</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>nanos</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>nanos</name> <operator>%=</operator> <name>NANOS_PER_DAY</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>nanos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>nanos</name> <operator>+=</operator> <name>NANOS_PER_DAY</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>nanos</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Calculate the absolute day for a January, 1 of the specified year.
     *
     * @param year
     *            the year
     * @return the absolute day
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>absoluteDayFromYear</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>year</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>a</name> <init>= <expr><literal type="number">365</literal> <operator>*</operator> <name>year</name> <operator>-</operator> <literal type="number">719_528</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>year</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><name>year</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <operator>(</operator><name>year</name> <operator>+</operator> <literal type="number">99</literal><operator>)</operator> <operator>/</operator> <literal type="number">100</literal> <operator>+</operator> <operator>(</operator><name>year</name> <operator>+</operator> <literal type="number">399</literal><operator>)</operator> <operator>/</operator> <literal type="number">400</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>a</name> <operator>-=</operator> <name>year</name> <operator>/</operator> <operator>-</operator><literal type="number">4</literal> <operator>-</operator> <name>year</name> <operator>/</operator> <operator>-</operator><literal type="number">100</literal> <operator>+</operator> <name>year</name> <operator>/</operator> <operator>-</operator><literal type="number">400</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><name>a</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Calculate the absolute day from an encoded date value.
     *
     * @param dateValue the date value
     * @return the absolute day
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>absoluteDayFromDateValue</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>dateValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>absoluteDay</name><argument_list>(<argument><expr><call><name>yearFromDateValue</name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>monthFromDateValue</name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>dayFromDateValue</name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Calculate the absolute day.
     *
     * @param y year
     * @param m month
     * @param d day
     * @return the absolute day
     */</comment>
    <function><type><specifier>static</specifier> <name>long</name></type> <name>absoluteDay</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>a</name> <init>= <expr><call><name>absoluteDayFromYear</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><literal type="number">367</literal> <operator>*</operator> <name>m</name> <operator>-</operator> <literal type="number">362</literal><operator>)</operator> <operator>/</operator> <literal type="number">12</literal> <operator>+</operator> <name>d</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>m</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>y</name> <operator>%</operator> <literal type="number">100</literal> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>%</operator> <literal type="number">400</literal> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>a</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Calculate the encoded date value from an absolute day.
     *
     * @param absoluteDay the absolute day
     * @return the date value
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>dateValueFromAbsoluteDay</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>absoluteDay</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>d</name> <init>= <expr><name>absoluteDay</name> <operator>+</operator> <literal type="number">719_468</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>d</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">146_097</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>d</name> <operator>-=</operator> <name>a</name> <operator>*</operator> <literal type="number">146_097</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>a</name> <operator>*=</operator> <literal type="number">400</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>y</name> <init>= <expr><operator>(</operator><literal type="number">400</literal> <operator>*</operator> <name>d</name> <operator>+</operator> <literal type="number">591</literal><operator>)</operator> <operator>/</operator> <literal type="number">146_097</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>day</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>d</name> <operator>-</operator> <operator>(</operator><literal type="number">365</literal> <operator>*</operator> <name>y</name> <operator>+</operator> <name>y</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>y</name> <operator>/</operator> <literal type="number">100</literal> <operator>+</operator> <name>y</name> <operator>/</operator> <literal type="number">400</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>day</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>y</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>day</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>d</name> <operator>-</operator> <operator>(</operator><literal type="number">365</literal> <operator>*</operator> <name>y</name> <operator>+</operator> <name>y</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>y</name> <operator>/</operator> <literal type="number">100</literal> <operator>+</operator> <name>y</name> <operator>/</operator> <literal type="number">400</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>y</name> <operator>+=</operator> <name>a</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><operator>(</operator><name>day</name> <operator>*</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">153</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>day</name> <operator>-=</operator> <operator>(</operator><name>m</name> <operator>*</operator> <literal type="number">306</literal> <operator>+</operator> <literal type="number">5</literal><operator>)</operator> <operator>/</operator> <literal type="number">10</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>m</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>y</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>m</name> <operator>-=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>dateValue</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>day</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Return the next date value.
     *
     * @param dateValue
     *            the date value
     * @return the next date value
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>incrementDateValue</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>dateValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>day</name> <init>= <expr><call><name>dayFromDateValue</name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>day</name> <operator>&lt;</operator> <literal type="number">28</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>dateValue</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>year</name> <init>= <expr><call><name>yearFromDateValue</name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>month</name> <init>= <expr><call><name>monthFromDateValue</name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>day</name> <operator>&lt;</operator> <call><name>getDaysInMonth</name><argument_list>(<argument><expr><name>year</name></expr></argument>, <argument><expr><name>month</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>dateValue</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>month</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>month</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>month</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>year</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><call><name>dateValue</name><argument_list>(<argument><expr><name>year</name></expr></argument>, <argument><expr><name>month</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Return the previous date value.
     *
     * @param dateValue
     *            the date value
     * @return the previous date value
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>decrementDateValue</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>dateValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>dayFromDateValue</name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>dateValue</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>year</name> <init>= <expr><call><name>yearFromDateValue</name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>month</name> <init>= <expr><call><name>monthFromDateValue</name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>month</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>month</name><operator>--</operator></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>month</name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>year</name><operator>--</operator></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><call><name>dateValue</name><argument_list>(<argument><expr><name>year</name></expr></argument>, <argument><expr><name>month</name></expr></argument>, <argument><expr><call><name>getDaysInMonth</name><argument_list>(<argument><expr><name>year</name></expr></argument>, <argument><expr><name>month</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Append a date to the string builder.
     *
     * @param builder the target string builder
     * @param dateValue the date value
     * @return the specified string builder
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>StringBuilder</name></type> <name>appendDate</name><parameter_list>(<parameter><decl><type><name>StringBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>dateValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><call><name>yearFromDateValue</name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">1_000</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1_000</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>-</operator><name>y</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>StringUtils</name><operator>.</operator><name>appendZeroPadded</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name><name>StringUtils</name><operator>.</operator><name>appendTwoDigits</name></name><argument_list>(<argument><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>monthFromDateValue</name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>StringUtils</name><operator>.</operator><name>appendTwoDigits</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><call><name>dayFromDateValue</name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Append a time to the string builder.
     *
     * @param builder the target string builder
     * @param nanos the time in nanoseconds
     * @return the specified string builder
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>StringBuilder</name></type> <name>appendTime</name><parameter_list>(<parameter><decl><type><name>StringBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>nanos</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>nanos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>nanos</name> <operator>=</operator> <operator>-</operator><name>nanos</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/*
         * nanos now either in range from 0 to Long.MAX_VALUE or equals to
         * Long.MIN_VALUE. We need to divide nanos by 1,000,000,000 with
         * unsigned division to get correct result. The simplest way to do this
         * with such constraints is to divide -nanos by -1,000,000,000.
         */</comment>
        <decl_stmt><decl><type><name>long</name></type> <name>s</name> <init>= <expr><operator>-</operator><name>nanos</name> <operator>/</operator> <operator>-</operator><literal type="number">1_000_000_000</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>nanos</name> <operator>-=</operator> <name>s</name> <operator>*</operator> <literal type="number">1_000_000_000</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>s</name> <operator>/</operator> <literal type="number">60</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>s</name> <operator>-=</operator> <name>m</name> <operator>*</operator> <literal type="number">60</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><name>m</name> <operator>/</operator> <literal type="number">60</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>m</name> <operator>-=</operator> <name>h</name> <operator>*</operator> <literal type="number">60</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>StringUtils</name><operator>.</operator><name>appendTwoDigits</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>StringUtils</name><operator>.</operator><name>appendTwoDigits</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>StringUtils</name><operator>.</operator><name>appendTwoDigits</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>appendNanos</name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>nanos</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Append nanoseconds of time, if any.
     *
     * @param builder string builder to append to
     * @param nanos nanoseconds of second
     * @return the specified string builder
     */</comment>
    <function><type><specifier>static</specifier> <name>StringBuilder</name></type> <name>appendNanos</name><parameter_list>(<parameter><decl><type><name>StringBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nanos</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>nanos</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>nanos</name> <operator>&lt;</operator> <name><name>FRACTIONAL_SECONDS_TABLE</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <if_stmt><if>if <condition>(<expr><name>nanos</name> <operator>%</operator> <literal type="number">1_000</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>nanos</name> <operator>/=</operator> <literal type="number">1_000</literal></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>nanos</name> <operator>%</operator> <literal type="number">1_000</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>nanos</name> <operator>/=</operator> <literal type="number">1_000</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>nanos</name> <operator>%</operator> <literal type="number">10</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>nanos</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>nanos</name> <operator>%</operator> <literal type="number">10</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>nanos</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>nanos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>builder</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Append a time zone to the string builder.
     *
     * @param builder the target string builder
     * @param tz the time zone offset in seconds
     * @return the specified string builder
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>StringBuilder</name></type> <name>appendTimeZone</name><parameter_list>(<parameter><decl><type><name>StringBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tz</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>tz</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>tz</name> <operator>=</operator> <operator>-</operator><name>tz</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>rem</name> <init>= <expr><name>tz</name> <operator>/</operator> <literal type="number">3_600</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>StringUtils</name><operator>.</operator><name>appendTwoDigits</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>rem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tz</name> <operator>-=</operator> <name>rem</name> <operator>*</operator> <literal type="number">3_600</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>tz</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>rem</name> <operator>=</operator> <name>tz</name> <operator>/</operator> <literal type="number">60</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>StringUtils</name><operator>.</operator><name>appendTwoDigits</name></name><argument_list>(<argument><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>tz</name> <operator>-=</operator> <name>rem</name> <operator>*</operator> <literal type="number">60</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>tz</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>StringUtils</name><operator>.</operator><name>appendTwoDigits</name></name><argument_list>(<argument><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>builder</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Generates time zone name for the specified offset in seconds.
     *
     * @param offsetSeconds
     *            time zone offset in seconds
     * @return time zone name
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>timeZoneNameFromOffsetSeconds</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>offsetSeconds</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>offsetSeconds</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="string">"UTC"</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>b</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"GMT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>offsetSeconds</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>offsetSeconds</name> <operator>=</operator> <operator>-</operator><name>offsetSeconds</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name><name>StringUtils</name><operator>.</operator><name>appendTwoDigits</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>offsetSeconds</name> <operator>/</operator> <literal type="number">3_600</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>offsetSeconds</name> <operator>%=</operator> <literal type="number">3_600</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>StringUtils</name><operator>.</operator><name>appendTwoDigits</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>offsetSeconds</name> <operator>/</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>offsetSeconds</name> <operator>%=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>offsetSeconds</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>StringUtils</name><operator>.</operator><name>appendTwoDigits</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>offsetSeconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>b</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>


    <comment type="block" format="javadoc">/**
     * Converts scale of nanoseconds.
     *
     * @param nanosOfDay nanoseconds of day
     * @param scale fractional seconds precision
     * @param range the allowed range of values (0..range-1)
     * @return scaled value
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>convertScale</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>nanosOfDay</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>range</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>scale</name> <operator>&gt;=</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>nanosOfDay</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><name><name>FRACTIONAL_SECONDS_TABLE</name><index>[<expr><name>scale</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>mod</name> <init>= <expr><name>nanosOfDay</name> <operator>%</operator> <name>m</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>mod</name> <operator>&gt;=</operator> <name>m</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>nanosOfDay</name> <operator>+=</operator> <name>m</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>r</name> <init>= <expr><name>nanosOfDay</name> <operator>-</operator> <name>mod</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;=</operator> <name>range</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <name>range</name> <operator>-</operator> <name>m</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>r</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Moves timestamp with time zone to a new time zone.
     *
     * @param dateValue the date value
     * @param timeNanos the nanoseconds since midnight
     * @param oldOffset old offset
     * @param newOffset new offset
     * @return timestamp with time zone with new offset
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ValueTimestampTimeZone</name></type> <name>timestampTimeZoneAtOffset</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>dateValue</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>timeNanos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oldOffset</name></decl></parameter>,
            <parameter><decl><type><name>int</name></type> <name>newOffset</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>timeNanos</name> <operator>+=</operator> <operator>(</operator><name>newOffset</name> <operator>-</operator> <name>oldOffset</name><operator>)</operator> <operator>*</operator> <name><name>DateTimeUtils</name><operator>.</operator><name>NANOS_PER_SECOND</name></name></expr>;</expr_stmt>
        <comment type="line">// Value can be 18+18 hours before or after the limit</comment>
        <if_stmt><if>if <condition>(<expr><name>timeNanos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>timeNanos</name> <operator>+=</operator> <name><name>DateTimeUtils</name><operator>.</operator><name>NANOS_PER_DAY</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>dateValue</name> <operator>=</operator> <call><name><name>DateTimeUtils</name><operator>.</operator><name>decrementDateValue</name></name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>timeNanos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>timeNanos</name> <operator>+=</operator> <name><name>DateTimeUtils</name><operator>.</operator><name>NANOS_PER_DAY</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>dateValue</name> <operator>=</operator> <call><name><name>DateTimeUtils</name><operator>.</operator><name>decrementDateValue</name></name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>timeNanos</name> <operator>&gt;=</operator> <name><name>DateTimeUtils</name><operator>.</operator><name>NANOS_PER_DAY</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>timeNanos</name> <operator>-=</operator> <name><name>DateTimeUtils</name><operator>.</operator><name>NANOS_PER_DAY</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>dateValue</name> <operator>=</operator> <call><name><name>DateTimeUtils</name><operator>.</operator><name>incrementDateValue</name></name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>timeNanos</name> <operator>&gt;=</operator> <name><name>DateTimeUtils</name><operator>.</operator><name>NANOS_PER_DAY</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>timeNanos</name> <operator>-=</operator> <name><name>DateTimeUtils</name><operator>.</operator><name>NANOS_PER_DAY</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>dateValue</name> <operator>=</operator> <call><name><name>DateTimeUtils</name><operator>.</operator><name>incrementDateValue</name></name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>ValueTimestampTimeZone</name><operator>.</operator><name>fromDateValueAndNanos</name></name><argument_list>(<argument><expr><name>dateValue</name></expr></argument>, <argument><expr><name>timeNanos</name></expr></argument>, <argument><expr><name>newOffset</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>
