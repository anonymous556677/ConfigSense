<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/value/DataType.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>JDBCType</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>ResultSetMetaData</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>SQLException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>SQLType</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Types</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>api</name><operator>.</operator><name>ErrorCode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>api</name><operator>.</operator><name>H2Type</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>api</name><operator>.</operator><name>IntervalQualifier</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Mode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>DbException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>StringUtils</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class contains meta data information about data types,
 * and can convert between Java objects and Values.
 */</comment>
<class><specifier>public</specifier> class <name>DataType</name> <block>{

    <comment type="block" format="javadoc">/**
     * The map of types.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>DataType</name></argument>&gt;</argument_list></name></type> <name>TYPES_BY_NAME</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Mapping from Value type numbers to DataType.
     */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name><name>DataType</name><index>[]</index></name></type> <name>TYPES_BY_VALUE_TYPE</name> <init>= <expr><operator>new</operator> <name><name>DataType</name><index>[<expr><name><name>Value</name><operator>.</operator><name>TYPE_COUNT</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The value type of this data type.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>type</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The SQL type.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>sqlType</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The minimum supported precision.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>long</name></type> <name>minPrecision</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The maximum supported precision.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>long</name></type> <name>maxPrecision</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The lowest possible scale.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>minScale</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The highest possible scale.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>maxScale</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The prefix required for the SQL literal representation.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>prefix</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The suffix required for the SQL literal representation.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>suffix</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The list of parameters used in the column definition.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>params</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * If this data type is case sensitive.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>caseSensitive</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * If the precision parameter is supported.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>supportsPrecision</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * If the scale parameter is supported.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>supportsScale</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The default precision.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>long</name></type> <name>defaultPrecision</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The default scale.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>defaultScale</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * If precision and scale have non-standard default values.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>specialPrecisionScale</name></decl>;</decl_stmt>

    <static>static <block>{<block_content>
        <decl_stmt><decl><type><name>DataType</name></type> <name>dataType</name> <init>= <expr><operator>new</operator> <call><name>DataType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>defaultPrecision</name></name> <operator>=</operator> <name><name>dataType</name><operator>.</operator><name>maxPrecision</name></name> <operator>=</operator> <name><name>dataType</name><operator>.</operator><name>minPrecision</name></name> <operator>=</operator> <name><name>ValueNull</name><operator>.</operator><name>PRECISION</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>NULL</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>NULL</name></name></expr></argument>, <argument><expr><name>dataType</name></expr></argument>, <argument><expr><literal type="string">"NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>CHAR</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>CHAR</name></name></expr></argument>, <argument><expr><call><name>createString</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><literal type="string">"CHARACTER"</literal></expr></argument>, <argument><expr><literal type="string">"CHAR"</literal></expr></argument>, <argument><expr><literal type="string">"NCHAR"</literal></expr></argument>, <argument><expr><literal type="string">"NATIONAL CHARACTER"</literal></expr></argument>, <argument><expr><literal type="string">"NATIONAL CHAR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>VARCHAR</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>VARCHAR</name></name></expr></argument>, <argument><expr><call><name>createString</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><literal type="string">"CHARACTER VARYING"</literal></expr></argument>, <argument><expr><literal type="string">"VARCHAR"</literal></expr></argument>, <argument><expr><literal type="string">"CHAR VARYING"</literal></expr></argument>,
                <argument><expr><literal type="string">"NCHAR VARYING"</literal></expr></argument>, <argument><expr><literal type="string">"NATIONAL CHARACTER VARYING"</literal></expr></argument>, <argument><expr><literal type="string">"NATIONAL CHAR VARYING"</literal></expr></argument>,
                <argument><expr><literal type="string">"VARCHAR2"</literal></expr></argument>, <argument><expr><literal type="string">"NVARCHAR"</literal></expr></argument>, <argument><expr><literal type="string">"NVARCHAR2"</literal></expr></argument>,
                <argument><expr><literal type="string">"VARCHAR_CASESENSITIVE"</literal></expr></argument>, <argument><expr><literal type="string">"TID"</literal></expr></argument>,
                <argument><expr><literal type="string">"LONGVARCHAR"</literal></expr></argument>, <argument><expr><literal type="string">"LONGNVARCHAR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>CLOB</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>CLOB</name></name></expr></argument>, <argument><expr><call><name>createLob</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><literal type="string">"CHARACTER LARGE OBJECT"</literal></expr></argument>, <argument><expr><literal type="string">"CLOB"</literal></expr></argument>, <argument><expr><literal type="string">"CHAR LARGE OBJECT"</literal></expr></argument>, <argument><expr><literal type="string">"TINYTEXT"</literal></expr></argument>, <argument><expr><literal type="string">"TEXT"</literal></expr></argument>, <argument><expr><literal type="string">"MEDIUMTEXT"</literal></expr></argument>,
                <argument><expr><literal type="string">"LONGTEXT"</literal></expr></argument>, <argument><expr><literal type="string">"NTEXT"</literal></expr></argument>, <argument><expr><literal type="string">"NCLOB"</literal></expr></argument>, <argument><expr><literal type="string">"NCHAR LARGE OBJECT"</literal></expr></argument>, <argument><expr><literal type="string">"NATIONAL CHARACTER LARGE OBJECT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>VARCHAR_IGNORECASE</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>VARCHAR</name></name></expr></argument>, <argument><expr><call><name>createString</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"VARCHAR_IGNORECASE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>BINARY</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>BINARY</name></name></expr></argument>, <argument><expr><call><name>createBinary</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"BINARY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>VARBINARY</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>VARBINARY</name></name></expr></argument>, <argument><expr><call><name>createBinary</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><literal type="string">"BINARY VARYING"</literal></expr></argument>, <argument><expr><literal type="string">"VARBINARY"</literal></expr></argument>, <argument><expr><literal type="string">"RAW"</literal></expr></argument>, <argument><expr><literal type="string">"BYTEA"</literal></expr></argument>, <argument><expr><literal type="string">"LONG RAW"</literal></expr></argument>, <argument><expr><literal type="string">"LONGVARBINARY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>BLOB</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>BLOB</name></name></expr></argument>, <argument><expr><call><name>createLob</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><literal type="string">"BINARY LARGE OBJECT"</literal></expr></argument>, <argument><expr><literal type="string">"BLOB"</literal></expr></argument>, <argument><expr><literal type="string">"TINYBLOB"</literal></expr></argument>, <argument><expr><literal type="string">"MEDIUMBLOB"</literal></expr></argument>, <argument><expr><literal type="string">"LONGBLOB"</literal></expr></argument>, <argument><expr><literal type="string">"IMAGE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>BOOLEAN</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>BOOLEAN</name></name></expr></argument>, <argument><expr><call><name>createNumeric</name><argument_list>(<argument><expr><name><name>ValueBoolean</name><operator>.</operator><name>PRECISION</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"BOOLEAN"</literal></expr></argument>, <argument><expr><literal type="string">"BIT"</literal></expr></argument>, <argument><expr><literal type="string">"BOOL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>TINYINT</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>TINYINT</name></name></expr></argument>, <argument><expr><call><name>createNumeric</name><argument_list>(<argument><expr><name><name>ValueTinyint</name><operator>.</operator><name>PRECISION</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"TINYINT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>SMALLINT</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>SMALLINT</name></name></expr></argument>, <argument><expr><call><name>createNumeric</name><argument_list>(<argument><expr><name><name>ValueSmallint</name><operator>.</operator><name>PRECISION</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"SMALLINT"</literal></expr></argument>, <argument><expr><literal type="string">"INT2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>INTEGER</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>INTEGER</name></name></expr></argument>, <argument><expr><call><name>createNumeric</name><argument_list>(<argument><expr><name><name>ValueInteger</name><operator>.</operator><name>PRECISION</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><literal type="string">"INTEGER"</literal></expr></argument>, <argument><expr><literal type="string">"INT"</literal></expr></argument>, <argument><expr><literal type="string">"MEDIUMINT"</literal></expr></argument>, <argument><expr><literal type="string">"INT4"</literal></expr></argument>, <argument><expr><literal type="string">"SIGNED"</literal></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>BIGINT</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>BIGINT</name></name></expr></argument>, <argument><expr><call><name>createNumeric</name><argument_list>(<argument><expr><name><name>ValueBigint</name><operator>.</operator><name>PRECISION</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><literal type="string">"BIGINT"</literal></expr></argument>, <argument><expr><literal type="string">"INT8"</literal></expr></argument>, <argument><expr><literal type="string">"LONG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>dataType</name> <operator>=</operator> <operator>new</operator> <call><name>DataType</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>minPrecision</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>defaultPrecision</name></name> <operator>=</operator> <name><name>dataType</name><operator>.</operator><name>maxPrecision</name></name> <operator>=</operator> <name><name>Constants</name><operator>.</operator><name>MAX_NUMERIC_PRECISION</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>defaultScale</name></name> <operator>=</operator> <name><name>ValueNumeric</name><operator>.</operator><name>DEFAULT_SCALE</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>maxScale</name></name> <operator>=</operator> <name><name>ValueNumeric</name><operator>.</operator><name>MAXIMUM_SCALE</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>minScale</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>params</name></name> <operator>=</operator> <literal type="string">"PRECISION,SCALE"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>supportsPrecision</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>supportsScale</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>NUMERIC</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>NUMERIC</name></name></expr></argument>, <argument><expr><name>dataType</name></expr></argument>, <argument><expr><literal type="string">"NUMERIC"</literal></expr></argument>, <argument><expr><literal type="string">"DECIMAL"</literal></expr></argument>, <argument><expr><literal type="string">"DEC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>REAL</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>REAL</name></name></expr></argument>, <argument><expr><call><name>createNumeric</name><argument_list>(<argument><expr><name><name>ValueReal</name><operator>.</operator><name>PRECISION</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"REAL"</literal></expr></argument>, <argument><expr><literal type="string">"FLOAT4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>DOUBLE</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>DOUBLE</name></name></expr></argument>, <argument><expr><call><name>createNumeric</name><argument_list>(<argument><expr><name><name>ValueDouble</name><operator>.</operator><name>PRECISION</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><literal type="string">"DOUBLE PRECISION"</literal></expr></argument>, <argument><expr><literal type="string">"DOUBLE"</literal></expr></argument>, <argument><expr><literal type="string">"FLOAT8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>DOUBLE</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>FLOAT</name></name></expr></argument>, <argument><expr><call><name>createNumeric</name><argument_list>(<argument><expr><name><name>ValueDouble</name><operator>.</operator><name>PRECISION</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FLOAT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>dataType</name> <operator>=</operator> <operator>new</operator> <call><name>DataType</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>minPrecision</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>defaultPrecision</name></name> <operator>=</operator> <name><name>dataType</name><operator>.</operator><name>maxPrecision</name></name> <operator>=</operator> <name><name>Constants</name><operator>.</operator><name>MAX_NUMERIC_PRECISION</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>params</name></name> <operator>=</operator> <literal type="string">"PRECISION"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>supportsPrecision</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>DECFLOAT</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>NUMERIC</name></name></expr></argument>, <argument><expr><name>dataType</name></expr></argument>, <argument><expr><literal type="string">"DECFLOAT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>DATE</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>DATE</name></name></expr></argument>, <argument><expr><call><name>createDate</name><argument_list>(<argument><expr><name><name>ValueDate</name><operator>.</operator><name>PRECISION</name></name></expr></argument>, <argument><expr><name><name>ValueDate</name><operator>.</operator><name>PRECISION</name></name></expr></argument>, <argument><expr><literal type="string">"DATE"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"DATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>TIME</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>TIME</name></name></expr></argument>,
                <argument><expr><call><name>createDate</name><argument_list>(<argument><expr><name><name>ValueTime</name><operator>.</operator><name>MAXIMUM_PRECISION</name></name></expr></argument>, <argument><expr><name><name>ValueTime</name><operator>.</operator><name>DEFAULT_PRECISION</name></name></expr></argument>,
                        <argument><expr><literal type="string">"TIME"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>ValueTime</name><operator>.</operator><name>DEFAULT_SCALE</name></name></expr></argument>, <argument><expr><name><name>ValueTime</name><operator>.</operator><name>MAXIMUM_SCALE</name></name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><literal type="string">"TIME"</literal></expr></argument>, <argument><expr><literal type="string">"TIME WITHOUT TIME ZONE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>TIME_TZ</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>TIME_WITH_TIMEZONE</name></name></expr></argument>,
                <argument><expr><call><name>createDate</name><argument_list>(<argument><expr><name><name>ValueTimeTimeZone</name><operator>.</operator><name>MAXIMUM_PRECISION</name></name></expr></argument>, <argument><expr><name><name>ValueTimeTimeZone</name><operator>.</operator><name>DEFAULT_PRECISION</name></name></expr></argument>,
                        <argument><expr><literal type="string">"TIME WITH TIME ZONE"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>ValueTime</name><operator>.</operator><name>DEFAULT_SCALE</name></name></expr></argument>, <argument><expr><name><name>ValueTime</name><operator>.</operator><name>MAXIMUM_SCALE</name></name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><literal type="string">"TIME WITH TIME ZONE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>TIMESTAMP</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>TIMESTAMP</name></name></expr></argument>,
                <argument><expr><call><name>createDate</name><argument_list>(<argument><expr><name><name>ValueTimestamp</name><operator>.</operator><name>MAXIMUM_PRECISION</name></name></expr></argument>, <argument><expr><name><name>ValueTimestamp</name><operator>.</operator><name>DEFAULT_PRECISION</name></name></expr></argument>,
                        <argument><expr><literal type="string">"TIMESTAMP"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>ValueTimestamp</name><operator>.</operator><name>DEFAULT_SCALE</name></name></expr></argument>, <argument><expr><name><name>ValueTimestamp</name><operator>.</operator><name>MAXIMUM_SCALE</name></name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><literal type="string">"TIMESTAMP"</literal></expr></argument>, <argument><expr><literal type="string">"TIMESTAMP WITHOUT TIME ZONE"</literal></expr></argument>, <argument><expr><literal type="string">"DATETIME"</literal></expr></argument>, <argument><expr><literal type="string">"DATETIME2"</literal></expr></argument>, <argument><expr><literal type="string">"SMALLDATETIME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>TIMESTAMP_TZ</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>TIMESTAMP_WITH_TIMEZONE</name></name></expr></argument>,
                <argument><expr><call><name>createDate</name><argument_list>(<argument><expr><name><name>ValueTimestampTimeZone</name><operator>.</operator><name>MAXIMUM_PRECISION</name></name></expr></argument>, <argument><expr><name><name>ValueTimestampTimeZone</name><operator>.</operator><name>DEFAULT_PRECISION</name></name></expr></argument>,
                        <argument><expr><literal type="string">"TIMESTAMP WITH TIME ZONE"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>ValueTimestamp</name><operator>.</operator><name>DEFAULT_SCALE</name></name></expr></argument>, <argument><expr><name><name>ValueTimestamp</name><operator>.</operator><name>MAXIMUM_SCALE</name></name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><literal type="string">"TIMESTAMP WITH TIME ZONE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_YEAR</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>Value</name><operator>.</operator><name>INTERVAL_MINUTE_TO_SECOND</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>addInterval</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>JAVA_OBJECT</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>JAVA_OBJECT</name></name></expr></argument>, <argument><expr><call><name>createBinary</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"JAVA_OBJECT"</literal></expr></argument>, <argument><expr><literal type="string">"OBJECT"</literal></expr></argument>, <argument><expr><literal type="string">"OTHER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>dataType</name> <operator>=</operator> <call><name>createString</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>supportsPrecision</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>params</name></name> <operator>=</operator> <literal type="string">"ELEMENT [,...]"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>ENUM</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>OTHER</name></name></expr></argument>, <argument><expr><name>dataType</name></expr></argument>, <argument><expr><literal type="string">"ENUM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>GEOMETRY</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>OTHER</name></name></expr></argument>, <argument><expr><call><name>createGeometry</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"GEOMETRY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>JSON</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>OTHER</name></name></expr></argument>, <argument><expr><call><name>createString</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="string">"JSON '"</literal></expr></argument>, <argument><expr><literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"JSON"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>dataType</name> <operator>=</operator> <operator>new</operator> <call><name>DataType</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>prefix</name></name> <operator>=</operator> <name><name>dataType</name><operator>.</operator><name>suffix</name></name> <operator>=</operator> <literal type="string">"'"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>defaultPrecision</name></name> <operator>=</operator> <name><name>dataType</name><operator>.</operator><name>maxPrecision</name></name> <operator>=</operator> <name><name>dataType</name><operator>.</operator><name>minPrecision</name></name> <operator>=</operator> <name><name>ValueUuid</name><operator>.</operator><name>PRECISION</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>UUID</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>BINARY</name></name></expr></argument>, <argument><expr><name>dataType</name></expr></argument>, <argument><expr><literal type="string">"UUID"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>dataType</name> <operator>=</operator> <operator>new</operator> <call><name>DataType</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>prefix</name></name> <operator>=</operator> <literal type="string">"ARRAY["</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>suffix</name></name> <operator>=</operator> <literal type="string">"]"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>params</name></name> <operator>=</operator> <literal type="string">"CARDINALITY"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>supportsPrecision</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>defaultPrecision</name></name> <operator>=</operator> <name><name>dataType</name><operator>.</operator><name>maxPrecision</name></name> <operator>=</operator> <name><name>Constants</name><operator>.</operator><name>MAX_ARRAY_CARDINALITY</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>ARRAY</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>ARRAY</name></name></expr></argument>, <argument><expr><name>dataType</name></expr></argument>, <argument><expr><literal type="string">"ARRAY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>dataType</name> <operator>=</operator> <operator>new</operator> <call><name>DataType</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>prefix</name></name> <operator>=</operator> <literal type="string">"ROW("</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>suffix</name></name> <operator>=</operator> <literal type="string">")"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>params</name></name> <operator>=</operator> <literal type="string">"NAME DATA_TYPE [,...]"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>ROW</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>OTHER</name></name></expr></argument>, <argument><expr><name>dataType</name></expr></argument>, <argument><expr><literal type="string">"ROW"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></static>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>addInterval</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>IntervalQualifier</name></type> <name>qualifier</name> <init>= <expr><call><name><name>IntervalQualifier</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>type</name> <operator>-</operator> <name><name>Value</name><operator>.</operator><name>INTERVAL_YEAR</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>qualifier</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DataType</name></type> <name>dataType</name> <init>= <expr><operator>new</operator> <call><name>DataType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>prefix</name></name> <operator>=</operator> <literal type="string">"INTERVAL '"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>suffix</name></name> <operator>=</operator> <literal type="string">"' "</literal> <operator>+</operator> <name>name</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>supportsPrecision</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>defaultPrecision</name></name> <operator>=</operator> <name><name>ValueInterval</name><operator>.</operator><name>DEFAULT_PRECISION</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>minPrecision</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>maxPrecision</name></name> <operator>=</operator> <name><name>ValueInterval</name><operator>.</operator><name>MAXIMUM_PRECISION</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>qualifier</name><operator>.</operator><name>hasSeconds</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>supportsScale</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>defaultScale</name></name> <operator>=</operator> <name><name>ValueInterval</name><operator>.</operator><name>DEFAULT_SCALE</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>maxScale</name></name> <operator>=</operator> <name><name>ValueInterval</name><operator>.</operator><name>MAXIMUM_SCALE</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>params</name></name> <operator>=</operator> <literal type="string">"PRECISION,SCALE"</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>params</name></name> <operator>=</operator> <literal type="string">"PRECISION"</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>OTHER</name></name></expr></argument>, <argument><expr><name>dataType</name></expr></argument>, <argument><expr><operator>(</operator><literal type="string">"INTERVAL "</literal> <operator>+</operator> <name>name</name><operator>)</operator><operator>.</operator><call><name>intern</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sqlType</name></decl></parameter>, <parameter><decl><type><name>DataType</name></type> <name>dataType</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>names</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>sqlType</name></name> <operator>=</operator> <name>sqlType</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>TYPES_BY_VALUE_TYPE</name><index>[<expr><name>type</name></expr>]</index></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>TYPES_BY_VALUE_TYPE</name><index>[<expr><name>type</name></expr>]</index></name> <operator>=</operator> <name>dataType</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>name</name> <range>: <expr><name>names</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>TYPES_BY_NAME</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>dataType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create a numeric data type without parameters.
     *
     * @param precision precision
     * @param scale scale
     * @return data type
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>DataType</name></type> <name>createNumeric</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>precision</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>DataType</name></type> <name>dataType</name> <init>= <expr><operator>new</operator> <call><name>DataType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>defaultPrecision</name></name> <operator>=</operator> <name><name>dataType</name><operator>.</operator><name>maxPrecision</name></name> <operator>=</operator> <name><name>dataType</name><operator>.</operator><name>minPrecision</name></name> <operator>=</operator> <name>precision</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>defaultScale</name></name> <operator>=</operator> <name><name>dataType</name><operator>.</operator><name>maxScale</name></name> <operator>=</operator> <name><name>dataType</name><operator>.</operator><name>minScale</name></name> <operator>=</operator> <name>scale</name></expr>;</expr_stmt>
        <return>return <expr><name>dataType</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create a date-time data type.
     *
     * @param maxPrecision maximum supported precision
     * @param precision default precision
     * @param prefix the prefix for SQL literal representation
     * @param supportsScale whether the scale parameter is supported
     * @param scale default scale
     * @param maxScale highest possible scale
     * @return data type
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>DataType</name></type> <name>createDate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>maxPrecision</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>precision</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>prefix</name></decl></parameter>,
            <parameter><decl><type><name>boolean</name></type> <name>supportsScale</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxScale</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>DataType</name></type> <name>dataType</name> <init>= <expr><operator>new</operator> <call><name>DataType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>prefix</name></name> <operator>=</operator> <name>prefix</name> <operator>+</operator> <literal type="string">" '"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>suffix</name></name> <operator>=</operator> <literal type="string">"'"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>maxPrecision</name></name> <operator>=</operator> <name>maxPrecision</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>defaultPrecision</name></name> <operator>=</operator> <name><name>dataType</name><operator>.</operator><name>minPrecision</name></name> <operator>=</operator> <name>precision</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>supportsScale</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>params</name></name> <operator>=</operator> <literal type="string">"SCALE"</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>supportsScale</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>maxScale</name></name> <operator>=</operator> <name>maxScale</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>defaultScale</name></name> <operator>=</operator> <name>scale</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>dataType</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>DataType</name></type> <name>createString</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>caseSensitive</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>fixedLength</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>createString</name><argument_list>(<argument><expr><name>caseSensitive</name></expr></argument>, <argument><expr><name>fixedLength</name></expr></argument>, <argument><expr><literal type="string">"'"</literal></expr></argument>, <argument><expr><literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>DataType</name></type> <name>createBinary</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>fixedLength</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>createString</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>fixedLength</name></expr></argument>, <argument><expr><literal type="string">"X'"</literal></expr></argument>, <argument><expr><literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>DataType</name></type> <name>createString</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>caseSensitive</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>fixedLength</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>prefix</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>suffix</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>DataType</name></type> <name>dataType</name> <init>= <expr><operator>new</operator> <call><name>DataType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>prefix</name></name> <operator>=</operator> <name>prefix</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>suffix</name></name> <operator>=</operator> <name>suffix</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>params</name></name> <operator>=</operator> <literal type="string">"LENGTH"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>caseSensitive</name></name> <operator>=</operator> <name>caseSensitive</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>supportsPrecision</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>minPrecision</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>maxPrecision</name></name> <operator>=</operator> <name><name>Constants</name><operator>.</operator><name>MAX_STRING_LENGTH</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>defaultPrecision</name></name> <operator>=</operator> <ternary><condition><expr><name>fixedLength</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name><name>Constants</name><operator>.</operator><name>MAX_STRING_LENGTH</name></name></expr></else></ternary></expr>;</expr_stmt>
        <return>return <expr><name>dataType</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>DataType</name></type> <name>createLob</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>clob</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>DataType</name></type> <name>t</name> <init>= <expr><ternary><condition><expr><name>clob</name></expr> ?</condition><then> <expr><call><name>createString</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>createBinary</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>t</name><operator>.</operator><name>maxPrecision</name></name> <operator>=</operator> <name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>t</name><operator>.</operator><name>defaultPrecision</name></name> <operator>=</operator> <name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr>;</expr_stmt>
        <return>return <expr><name>t</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>DataType</name></type> <name>createGeometry</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>DataType</name></type> <name>dataType</name> <init>= <expr><operator>new</operator> <call><name>DataType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>prefix</name></name> <operator>=</operator> <literal type="string">"'"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>suffix</name></name> <operator>=</operator> <literal type="string">"'"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>params</name></name> <operator>=</operator> <literal type="string">"TYPE,SRID"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>maxPrecision</name></name> <operator>=</operator> <name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dataType</name><operator>.</operator><name>defaultPrecision</name></name> <operator>=</operator> <name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr>;</expr_stmt>
        <return>return <expr><name>dataType</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the data type object for the given value type.
     *
     * @param type the value type
     * @return the data type object
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>DataType</name></type> <name>getDataType</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>UNKNOWN</name></name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>UNKNOWN_DATA_TYPE_1</name></name></expr></argument>, <argument><expr><literal type="string">"?"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;=</operator> <name><name>Value</name><operator>.</operator><name>NULL</name></name> <operator>&amp;&amp;</operator> <name>type</name> <operator>&lt;</operator> <name><name>Value</name><operator>.</operator><name>TYPE_COUNT</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>TYPES_BY_VALUE_TYPE</name><index>[<expr><name>type</name></expr>]</index></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name><name>TYPES_BY_VALUE_TYPE</name><index>[<expr><name><name>Value</name><operator>.</operator><name>NULL</name></name></expr>]</index></name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Convert a value type to a SQL type.
     *
     * @param type the type
     * @return the SQL type
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>convertTypeToSQLType</name><parameter_list>(<parameter><decl><type><name>TypeInfo</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>valueType</name> <init>= <expr><call><name><name>type</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>valueType</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>NUMERIC</name></name></expr>:</case>
            <return>return <expr><ternary><condition><expr><call><name><name>type</name><operator>.</operator><name>getExtTypeInfo</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>Types</name><operator>.</operator><name>DECIMAL</name></name></expr> </then><else>: <expr><name><name>Types</name><operator>.</operator><name>NUMERIC</name></name></expr></else></ternary></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>REAL</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>DOUBLE</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name><name>type</name><operator>.</operator><name>getDeclaredPrecision</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name><name>Types</name><operator>.</operator><name>FLOAT</name></name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        </block_content>}</block></switch>
        <return>return <expr><call><name>getDataType</name><argument_list>(<argument><expr><name>valueType</name></expr></argument>)</argument_list></call><operator>.</operator><name>sqlType</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Convert a SQL type to a value type using SQL type name, in order to
     * manage SQL type extension mechanism.
     *
     * @param sqlType the SQL type
     * @param sqlTypeName the SQL type name
     * @return the value type
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>convertSQLTypeToValueType</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sqlType</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>sqlTypeName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>sqlType</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name><name>Types</name><operator>.</operator><name>BINARY</name></name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><call><name><name>sqlTypeName</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><literal type="string">"UUID"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name><name>Value</name><operator>.</operator><name>UUID</name></name></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <break>break;</break>
            <case>case <expr><name><name>Types</name><operator>.</operator><name>OTHER</name></name></expr>:</case> <block>{<block_content>
                <decl_stmt><decl><type><name>DataType</name></type> <name>type</name> <init>= <expr><call><name><name>TYPES_BY_NAME</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>toUpperEnglish</name></name><argument_list>(<argument><expr><name>sqlTypeName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name><name>type</name><operator>.</operator><name>type</name></name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block>
        </block_content>}</block></switch>
        <return>return <expr><call><name>convertSQLTypeToValueType</name><argument_list>(<argument><expr><name>sqlType</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the SQL type from the result set meta data for the given column. This
     * method uses the SQL type and type name.
     *
     * @param meta the meta data
     * @param columnIndex the column index (1, 2,...)
     * @return the value type
     * @throws SQLException on failure
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getValueTypeFromResultSet</name><parameter_list>(<parameter><decl><type><name>ResultSetMetaData</name></type> <name>meta</name></decl></parameter>,
            <parameter><decl><type><name>int</name></type> <name>columnIndex</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name>convertSQLTypeToValueType</name><argument_list>(
                <argument><expr><call><name><name>meta</name><operator>.</operator><name>getColumnType</name></name><argument_list>(<argument><expr><name>columnIndex</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>meta</name><operator>.</operator><name>getColumnTypeName</name></name><argument_list>(<argument><expr><name>columnIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check whether the specified column needs the binary representation.
     *
     * @param meta
     *            metadata
     * @param column
     *            column index
     * @return {@code true} if column needs the binary representation,
     *         {@code false} otherwise
     * @throws SQLException
     *             on SQL exception
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isBinaryColumn</name><parameter_list>(<parameter><decl><type><name>ResultSetMetaData</name></type> <name>meta</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>column</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{<block_content>
        <switch>switch <condition>(<expr><call><name><name>meta</name><operator>.</operator><name>getColumnType</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <case>case <expr><name><name>Types</name><operator>.</operator><name>BINARY</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name><name>meta</name><operator>.</operator><name>getColumnTypeName</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"UUID"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <comment type="line">//$FALL-THROUGH$</comment>
        <case>case <expr><name><name>Types</name><operator>.</operator><name>LONGVARBINARY</name></name></expr>:</case>
        <case>case <expr><name><name>Types</name><operator>.</operator><name>VARBINARY</name></name></expr>:</case>
        <case>case <expr><name><name>Types</name><operator>.</operator><name>JAVA_OBJECT</name></name></expr>:</case>
        <case>case <expr><name><name>Types</name><operator>.</operator><name>BLOB</name></name></expr>:</case>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></switch>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Convert a SQL type to a value type.
     *
     * @param sqlType the SQL type
     * @return the value type
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>convertSQLTypeToValueType</name><parameter_list>(<parameter><decl><type><name>SQLType</name></type> <name>sqlType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>sqlType</name> <operator>instanceof</operator> <name>H2Type</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>sqlType</name><operator>.</operator><name>getVendorTypeNumber</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sqlType</name> <operator>instanceof</operator> <name>JDBCType</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>convertSQLTypeToValueType</name><argument_list>(<argument><expr><call><name><name>sqlType</name><operator>.</operator><name>getVendorTypeNumber</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>UNKNOWN_DATA_TYPE_1</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>sqlType</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">"&lt;null&gt;"</literal></expr>
                    </then><else>: <expr><call><name>unknownSqlTypeToString</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>sqlType</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Convert a SQL type to a value type.
     *
     * @param sqlType the SQL type
     * @return the value type
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>convertSQLTypeToValueType</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sqlType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>sqlType</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name><name>Types</name><operator>.</operator><name>CHAR</name></name></expr>:</case>
        <case>case <expr><name><name>Types</name><operator>.</operator><name>NCHAR</name></name></expr>:</case>
            <return>return <expr><name><name>Value</name><operator>.</operator><name>CHAR</name></name></expr>;</return>
        <case>case <expr><name><name>Types</name><operator>.</operator><name>VARCHAR</name></name></expr>:</case>
        <case>case <expr><name><name>Types</name><operator>.</operator><name>LONGVARCHAR</name></name></expr>:</case>
        <case>case <expr><name><name>Types</name><operator>.</operator><name>NVARCHAR</name></name></expr>:</case>
        <case>case <expr><name><name>Types</name><operator>.</operator><name>LONGNVARCHAR</name></name></expr>:</case>
            <return>return <expr><name><name>Value</name><operator>.</operator><name>VARCHAR</name></name></expr>;</return>
        <case>case <expr><name><name>Types</name><operator>.</operator><name>NUMERIC</name></name></expr>:</case>
        <case>case <expr><name><name>Types</name><operator>.</operator><name>DECIMAL</name></name></expr>:</case>
            <return>return <expr><name><name>Value</name><operator>.</operator><name>NUMERIC</name></name></expr>;</return>
        <case>case <expr><name><name>Types</name><operator>.</operator><name>BIT</name></name></expr>:</case>
        <case>case <expr><name><name>Types</name><operator>.</operator><name>BOOLEAN</name></name></expr>:</case>
            <return>return <expr><name><name>Value</name><operator>.</operator><name>BOOLEAN</name></name></expr>;</return>
        <case>case <expr><name><name>Types</name><operator>.</operator><name>INTEGER</name></name></expr>:</case>
            <return>return <expr><name><name>Value</name><operator>.</operator><name>INTEGER</name></name></expr>;</return>
        <case>case <expr><name><name>Types</name><operator>.</operator><name>SMALLINT</name></name></expr>:</case>
            <return>return <expr><name><name>Value</name><operator>.</operator><name>SMALLINT</name></name></expr>;</return>
        <case>case <expr><name><name>Types</name><operator>.</operator><name>TINYINT</name></name></expr>:</case>
            <return>return <expr><name><name>Value</name><operator>.</operator><name>TINYINT</name></name></expr>;</return>
        <case>case <expr><name><name>Types</name><operator>.</operator><name>BIGINT</name></name></expr>:</case>
            <return>return <expr><name><name>Value</name><operator>.</operator><name>BIGINT</name></name></expr>;</return>
        <case>case <expr><name><name>Types</name><operator>.</operator><name>REAL</name></name></expr>:</case>
            <return>return <expr><name><name>Value</name><operator>.</operator><name>REAL</name></name></expr>;</return>
        <case>case <expr><name><name>Types</name><operator>.</operator><name>DOUBLE</name></name></expr>:</case>
        <case>case <expr><name><name>Types</name><operator>.</operator><name>FLOAT</name></name></expr>:</case>
            <return>return <expr><name><name>Value</name><operator>.</operator><name>DOUBLE</name></name></expr>;</return>
        <case>case <expr><name><name>Types</name><operator>.</operator><name>BINARY</name></name></expr>:</case>
            <return>return <expr><name><name>Value</name><operator>.</operator><name>BINARY</name></name></expr>;</return>
        <case>case <expr><name><name>Types</name><operator>.</operator><name>VARBINARY</name></name></expr>:</case>
        <case>case <expr><name><name>Types</name><operator>.</operator><name>LONGVARBINARY</name></name></expr>:</case>
            <return>return <expr><name><name>Value</name><operator>.</operator><name>VARBINARY</name></name></expr>;</return>
        <case>case <expr><name><name>Types</name><operator>.</operator><name>OTHER</name></name></expr>:</case>
            <return>return <expr><name><name>Value</name><operator>.</operator><name>UNKNOWN</name></name></expr>;</return>
        <case>case <expr><name><name>Types</name><operator>.</operator><name>JAVA_OBJECT</name></name></expr>:</case>
            <return>return <expr><name><name>Value</name><operator>.</operator><name>JAVA_OBJECT</name></name></expr>;</return>
        <case>case <expr><name><name>Types</name><operator>.</operator><name>DATE</name></name></expr>:</case>
            <return>return <expr><name><name>Value</name><operator>.</operator><name>DATE</name></name></expr>;</return>
        <case>case <expr><name><name>Types</name><operator>.</operator><name>TIME</name></name></expr>:</case>
            <return>return <expr><name><name>Value</name><operator>.</operator><name>TIME</name></name></expr>;</return>
        <case>case <expr><name><name>Types</name><operator>.</operator><name>TIMESTAMP</name></name></expr>:</case>
            <return>return <expr><name><name>Value</name><operator>.</operator><name>TIMESTAMP</name></name></expr>;</return>
        <case>case <expr><name><name>Types</name><operator>.</operator><name>TIME_WITH_TIMEZONE</name></name></expr>:</case>
            <return>return <expr><name><name>Value</name><operator>.</operator><name>TIME_TZ</name></name></expr>;</return>
        <case>case <expr><name><name>Types</name><operator>.</operator><name>TIMESTAMP_WITH_TIMEZONE</name></name></expr>:</case>
            <return>return <expr><name><name>Value</name><operator>.</operator><name>TIMESTAMP_TZ</name></name></expr>;</return>
        <case>case <expr><name><name>Types</name><operator>.</operator><name>BLOB</name></name></expr>:</case>
            <return>return <expr><name><name>Value</name><operator>.</operator><name>BLOB</name></name></expr>;</return>
        <case>case <expr><name><name>Types</name><operator>.</operator><name>CLOB</name></name></expr>:</case>
        <case>case <expr><name><name>Types</name><operator>.</operator><name>NCLOB</name></name></expr>:</case>
            <return>return <expr><name><name>Value</name><operator>.</operator><name>CLOB</name></name></expr>;</return>
        <case>case <expr><name><name>Types</name><operator>.</operator><name>NULL</name></name></expr>:</case>
            <return>return <expr><name><name>Value</name><operator>.</operator><name>NULL</name></name></expr>;</return>
        <case>case <expr><name><name>Types</name><operator>.</operator><name>ARRAY</name></name></expr>:</case>
            <return>return <expr><name><name>Value</name><operator>.</operator><name>ARRAY</name></name></expr>;</return>
        <default>default:</default>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(
                    <argument><expr><name><name>ErrorCode</name><operator>.</operator><name>UNKNOWN_DATA_TYPE_1</name></name></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>sqlType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Convert a SQL type to a debug string.
     *
     * @param sqlType the SQL type
     * @return the textual representation
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>sqlTypeToString</name><parameter_list>(<parameter><decl><type><name>SQLType</name></type> <name>sqlType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>sqlType</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="string">"null"</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>sqlType</name> <operator>instanceof</operator> <name>JDBCType</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="string">"JDBCType."</literal> <operator>+</operator> <call><name><name>sqlType</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>sqlType</name> <operator>instanceof</operator> <name>H2Type</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>sqlType</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>unknownSqlTypeToString</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><literal type="string">"/* "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sqlType</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" */ null"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>StringBuilder</name></type> <name>unknownSqlTypeToString</name><parameter_list>(<parameter><decl><type><name>StringBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>SQLType</name></type> <name>sqlType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>quoteJavaString</name></name><argument_list>(<argument><expr><call><name><name>sqlType</name><operator>.</operator><name>getVendor</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>quoteJavaString</name></name><argument_list>(<argument><expr><call><name><name>sqlType</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" ["</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>sqlType</name><operator>.</operator><name>getVendorTypeNumber</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get a data type object from a type name.
     *
     * @param s the type name
     * @param mode database mode
     * @return the data type object
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>DataType</name></type> <name>getTypeByName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>Mode</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>DataType</name></type> <name>result</name> <init>= <expr><call><name><name>mode</name><operator>.</operator><name>typeByNameMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>TYPES_BY_NAME</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns whether columns with the specified data type may have an index.
     *
     * @param type the data type
     * @return whether an index is allowed
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isIndexable</name><parameter_list>(<parameter><decl><type><name>TypeInfo</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <switch>switch<condition>(<expr><call><name><name>type</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>UNKNOWN</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>NULL</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BLOB</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>CLOB</name></name></expr>:</case>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>ARRAY</name></name></expr>:</case>
            <return>return <expr><call><name>isIndexable</name><argument_list>(<argument><expr><operator>(</operator><name>TypeInfo</name><operator>)</operator> <call><name><name>type</name><operator>.</operator><name>getExtTypeInfo</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>ROW</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>ExtTypeInfoRow</name></type> <name>ext</name> <init>= <expr><operator>(</operator><name>ExtTypeInfoRow</name><operator>)</operator> <call><name><name>type</name><operator>.</operator><name>getExtTypeInfo</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TypeInfo</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>ext</name><operator>.</operator><name>getFields</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isIndexable</name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block>
        <comment type="line">//$FALL-THROUGH$</comment>
        <default>default:</default>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns whether values of the specified data types have
     * session-independent compare results.
     *
     * @param type1
     *            the first data type
     * @param type2
     *            the second data type
     * @return are values have session-independent compare results
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>areStableComparable</name><parameter_list>(<parameter><decl><type><name>TypeInfo</name></type> <name>type1</name></decl></parameter>, <parameter><decl><type><name>TypeInfo</name></type> <name>type2</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>t1</name> <init>= <expr><call><name><name>type1</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>t2</name> <init>= <expr><call><name><name>type2</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>t1</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>UNKNOWN</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>NULL</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BLOB</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>CLOB</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>ROW</name></name></expr>:</case>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>DATE</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TIMESTAMP</name></name></expr>:</case>
            <comment type="line">// DATE is equal to TIMESTAMP at midnight</comment>
            <return>return <expr><name>t2</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>DATE</name></name> <operator>||</operator> <name>t2</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>TIMESTAMP</name></name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TIME</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TIME_TZ</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TIMESTAMP_TZ</name></name></expr>:</case>
            <comment type="line">// Conversions depend on current timestamp and time zone</comment>
            <return>return <expr><name>t1</name> <operator>==</operator> <name>t2</name></expr>;</return>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>ARRAY</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>t2</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>ARRAY</name></name></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name>areStableComparable</name><argument_list>(<argument><expr><operator>(</operator><name>TypeInfo</name><operator>)</operator> <call><name><name>type1</name><operator>.</operator><name>getExtTypeInfo</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>TypeInfo</name><operator>)</operator> <call><name><name>type2</name><operator>.</operator><name>getExtTypeInfo</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        <default>default:</default>
            <switch>switch <condition>(<expr><name>t2</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>UNKNOWN</name></name></expr>:</case>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>NULL</name></name></expr>:</case>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>BLOB</name></name></expr>:</case>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>CLOB</name></name></expr>:</case>
            <case>case <expr><name><name>Value</name><operator>.</operator><name>ROW</name></name></expr>:</case>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            <default>default:</default>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></switch>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check if the given value type is a date-time type (TIME, DATE, TIMESTAMP,
     * TIMESTAMP_TZ).
     *
     * @param type the value type
     * @return true if the value type is a date-time type
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isDateTimeType</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name>type</name> <operator>&gt;=</operator> <name><name>Value</name><operator>.</operator><name>DATE</name></name> <operator>&amp;&amp;</operator> <name>type</name> <operator>&lt;=</operator> <name><name>Value</name><operator>.</operator><name>TIMESTAMP_TZ</name></name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check if the given value type is an interval type.
     *
     * @param type the value type
     * @return true if the value type is an interval type
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isIntervalType</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name>type</name> <operator>&gt;=</operator> <name><name>Value</name><operator>.</operator><name>INTERVAL_YEAR</name></name> <operator>&amp;&amp;</operator> <name>type</name> <operator>&lt;=</operator> <name><name>Value</name><operator>.</operator><name>INTERVAL_MINUTE_TO_SECOND</name></name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check if the given value type is a year-month interval type.
     *
     * @param type the value type
     * @return true if the value type is a year-month interval type
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isYearMonthIntervalType</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name>type</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>INTERVAL_YEAR</name></name> <operator>||</operator> <name>type</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>INTERVAL_MONTH</name></name> <operator>||</operator> <name>type</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>INTERVAL_YEAR_TO_MONTH</name></name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check if the given value type is a large object (BLOB or CLOB).
     *
     * @param type the value type
     * @return true if the value type is a lob type
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isLargeObject</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name>type</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>BLOB</name></name> <operator>||</operator> <name>type</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>CLOB</name></name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check if the given value type is a numeric type.
     *
     * @param type the value type
     * @return true if the value type is a numeric type
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isNumericType</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name>type</name> <operator>&gt;=</operator> <name><name>Value</name><operator>.</operator><name>TINYINT</name></name> <operator>&amp;&amp;</operator> <name>type</name> <operator>&lt;=</operator> <name><name>Value</name><operator>.</operator><name>DECFLOAT</name></name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check if the given value type is a binary string type.
     *
     * @param type the value type
     * @return true if the value type is a binary string type
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isBinaryStringType</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name>type</name> <operator>&gt;=</operator> <name><name>Value</name><operator>.</operator><name>BINARY</name></name> <operator>&amp;&amp;</operator> <name>type</name> <operator>&lt;=</operator> <name><name>Value</name><operator>.</operator><name>BLOB</name></name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check if the given value type is a character string type.
     *
     * @param type the value type
     * @return true if the value type is a character string type
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isCharacterStringType</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name>type</name> <operator>&gt;=</operator> <name><name>Value</name><operator>.</operator><name>CHAR</name></name> <operator>&amp;&amp;</operator> <name>type</name> <operator>&lt;=</operator> <name><name>Value</name><operator>.</operator><name>VARCHAR_IGNORECASE</name></name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check if the given value type is a String (VARCHAR,...).
     *
     * @param type the value type
     * @return true if the value type is a String type
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isStringType</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name>type</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>VARCHAR</name></name> <operator>||</operator> <name>type</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>CHAR</name></name> <operator>||</operator> <name>type</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>VARCHAR_IGNORECASE</name></name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check if the given value type is a binary string type or a compatible
     * special data type such as Java object, UUID, geometry object, or JSON.
     *
     * @param type
     *            the value type
     * @return true if the value type is a binary string type or a compatible
     *         special data type
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isBinaryStringOrSpecialBinaryType</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>VARBINARY</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BINARY</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BLOB</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>JAVA_OBJECT</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>UUID</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>GEOMETRY</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>JSON</name></name></expr>:</case>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        <default>default:</default>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check if the given type has total ordering.
     *
     * @param type the value type
     * @return true if the value type has total ordering
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>hasTotalOrdering</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BOOLEAN</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TINYINT</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>SMALLINT</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTEGER</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BIGINT</name></name></expr>:</case>
        <comment type="line">// Negative zeroes and NaNs are normalized</comment>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>DOUBLE</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>REAL</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TIME</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>DATE</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TIMESTAMP</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>VARBINARY</name></name></expr>:</case>
        <comment type="line">// Serialized data is compared</comment>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>JAVA_OBJECT</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>UUID</name></name></expr>:</case>
        <comment type="line">// EWKB is used</comment>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>GEOMETRY</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>ENUM</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_YEAR</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_MONTH</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_DAY</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_HOUR</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_MINUTE</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_SECOND</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_YEAR_TO_MONTH</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_DAY_TO_HOUR</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_DAY_TO_MINUTE</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_DAY_TO_SECOND</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_HOUR_TO_MINUTE</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_HOUR_TO_SECOND</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_MINUTE_TO_SECOND</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BINARY</name></name></expr>:</case>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        <default>default:</default>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Performs saturated addition of precision values.
     *
     * @param p1
     *            the first summand
     * @param p2
     *            the second summand
     * @return the sum of summands, or {@link Long#MAX_VALUE} if either argument
     *         is negative or sum is out of range
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>addPrecision</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>p1</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>p2</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>sum</name> <init>= <expr><name>p1</name> <operator>+</operator> <name>p2</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>p1</name> <operator>|</operator> <name>p2</name> <operator>|</operator> <name>sum</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>sum</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the default value in the form of a Java object for the given Java
     * class.
     *
     * @param clazz the Java class
     * @return the default object
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Object</name></type> <name>getDefaultForPrimitiveType</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>clazz</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>Boolean</name><operator>.</operator><name>TYPE</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>Boolean</name><operator>.</operator><name>FALSE</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>Byte</name><operator>.</operator><name>TYPE</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>Character</name><operator>.</operator><name>TYPE</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>char</name><operator>)</operator> <literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>Short</name><operator>.</operator><name>TYPE</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>short</name><operator>)</operator> <literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>Long</name><operator>.</operator><name>TYPE</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0L</literal></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>Float</name><operator>.</operator><name>TYPE</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>Double</name><operator>.</operator><name>TYPE</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>double</name><operator>)</operator> <literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>(<argument><expr><literal type="string">"primitive="</literal> <operator>+</operator> <call><name><name>clazz</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

}</block></class>
</unit>
