<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/result/ResultInterface.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Session</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>TypeInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>Value</name></name>;</import>

<comment type="block" format="javadoc">/**
 * The result interface is used by the LocalResult and ResultRemote class.
 * A result may contain rows, or just an update count.
 */</comment>
<interface><specifier>public</specifier> interface <name>ResultInterface</name> <super_list><extends>extends <super><name>AutoCloseable</name></super></extends></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * Go to the beginning of the result, that means
     * before the first row.
     */</comment>
    <function_decl><type><name>void</name></type> <name>reset</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Get the current row.
     *
     * @return the row
     */</comment>
    <function_decl><type><name><name>Value</name><index>[]</index></name></type> <name>currentRow</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Go to the next row.
     *
     * @return true if a row exists
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>next</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Get the current row id, starting with 0.
     * -1 is returned when next() was not called yet.
     *
     * @return the row id
     */</comment>
    <function_decl><type><name>long</name></type> <name>getRowId</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Check if the current position is after last row.
     *
     * @return true if after last
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>isAfterLast</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Get the number of visible columns.
     * More columns may exist internally for sorting or grouping.
     *
     * @return the number of columns
     */</comment>
    <function_decl><type><name>int</name></type> <name>getVisibleColumnCount</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Get the number of rows in this object.
     *
     * @return the number of rows
     */</comment>
    <function_decl><type><name>long</name></type> <name>getRowCount</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Check if this result has more rows to fetch.
     *
     * @return true if it has
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>hasNext</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Check if this result set should be closed, for example because it is
     * buffered using a temporary file.
     *
     * @return true if close should be called.
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>needToClose</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Close the result and delete any temporary files
     */</comment>
    <function_decl><annotation>@<name>Override</name></annotation>
    <type><name>void</name></type> <name>close</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Get the column alias name for the column.
     *
     * @param i the column number (starting with 0)
     * @return the alias name
     */</comment>
    <function_decl><type><name>String</name></type> <name>getAlias</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Get the schema name for the column, if one exists.
     *
     * @param i the column number (starting with 0)
     * @return the schema name or null
     */</comment>
    <function_decl><type><name>String</name></type> <name>getSchemaName</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Get the table name for the column, if one exists.
     *
     * @param i the column number (starting with 0)
     * @return the table name or null
     */</comment>
    <function_decl><type><name>String</name></type> <name>getTableName</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Get the column name.
     *
     * @param i the column number (starting with 0)
     * @return the column name
     */</comment>
    <function_decl><type><name>String</name></type> <name>getColumnName</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Get the column data type.
     *
     * @param i the column number (starting with 0)
     * @return the column data type
     */</comment>
    <function_decl><type><name>TypeInfo</name></type> <name>getColumnType</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Check if this is an identity column.
     *
     * @param i the column number (starting with 0)
     * @return true for identity columns
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>isIdentity</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Check if this column is nullable.
     *
     * @param i the column number (starting with 0)
     * @return Column.NULLABLE_*
     */</comment>
    <function_decl><type><name>int</name></type> <name>getNullable</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Set the fetch size for this result set.
     *
     * @param fetchSize the new fetch size
     */</comment>
    <function_decl><type><name>void</name></type> <name>setFetchSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fetchSize</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Get the current fetch size for this result set.
     *
     * @return the fetch size
     */</comment>
    <function_decl><type><name>int</name></type> <name>getFetchSize</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Check if this a lazy execution result.
     *
     * @return true if it is a lazy result
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>isLazy</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Check if this result set is closed.
     *
     * @return true if it is
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>isClosed</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Create a shallow copy of the result set. The data and a temporary table
     * (if there is any) is not copied.
     *
     * @param targetSession the session of the copy
     * @return the copy if possible, or null if copying is not possible
     */</comment>
    <function_decl><type><name>ResultInterface</name></type> <name>createShallowCopy</name><parameter_list>(<parameter><decl><type><name>Session</name></type> <name>targetSession</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></interface>
</unit>
