<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/value/ValueToObjectConverter2.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name></name>;</package>

<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueToObjectConverter</name><operator>.</operator><name>GEOMETRY_CLASS</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>math</name><operator>.</operator><name>BigDecimal</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Array</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Blob</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Clob</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>ResultSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>SQLException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Time</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Timestamp</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>time</name><operator>.</operator><name>Duration</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>time</name><operator>.</operator><name>Instant</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>time</name><operator>.</operator><name>LocalDate</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>time</name><operator>.</operator><name>LocalDateTime</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>time</name><operator>.</operator><name>LocalTime</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>time</name><operator>.</operator><name>OffsetDateTime</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>time</name><operator>.</operator><name>OffsetTime</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>time</name><operator>.</operator><name>Period</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>time</name><operator>.</operator><name>ZonedDateTime</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>api</name><operator>.</operator><name>IntervalQualifier</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Session</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>jdbc</name><operator>.</operator><name>JdbcResultSet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>DbException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>TraceObject</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>IntervalUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>JSR310Utils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>JdbcUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>LegacyDateTimeUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>Utils</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Data type conversion methods between values and Java objects to use on the
 * server side on H2 only.
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>ValueToObjectConverter2</name> <super_list><extends>extends <super><name>TraceObject</name></super></extends></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * Get the type information for the given Java class.
     *
     * @param clazz
     *            the Java class
     * @return the value type
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>TypeInfo</name></type> <name>classToType</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>clazz</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>clazz</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_NULL</name></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>clazz</name><operator>.</operator><name>isPrimitive</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>clazz</name> <operator>=</operator> <call><name><name>Utils</name><operator>.</operator><name>getNonPrimitiveClass</name></name><argument_list>(<argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>Void</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_NULL</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>String</name><operator>.</operator><name>class</name></name> <operator>||</operator> <name>clazz</name> <operator>==</operator> <name><name>Character</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARCHAR</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>byte</name><index>[]</index></name><operator>.</operator><name>class</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_VARBINARY</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>Boolean</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BOOLEAN</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>Byte</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_TINYINT</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>Short</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_SMALLINT</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>Integer</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTEGER</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>Long</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>Float</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_REAL</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>Double</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_DOUBLE</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>LocalDate</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_DATE</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>LocalTime</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_TIME</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>OffsetTime</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_TIME_TZ</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>LocalDateTime</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_TIMESTAMP</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>OffsetDateTime</name><operator>.</operator><name>class</name></name> <operator>||</operator> <name>clazz</name> <operator>==</operator> <name><name>ZonedDateTime</name><operator>.</operator><name>class</name></name> <operator>||</operator> <name>clazz</name> <operator>==</operator> <name><name>Instant</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_TIMESTAMP_TZ</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>Period</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTERVAL_YEAR_TO_MONTH</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>Duration</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_INTERVAL_DAY_TO_SECOND</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>UUID</name><operator>.</operator><name>class</name></name> <operator>==</operator> <name>clazz</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_UUID</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>clazz</name><operator>.</operator><name>isArray</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>TypeInfo</name><operator>.</operator><name>getTypeInfo</name></name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>ARRAY</name></name></expr></argument>, <argument><expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>classToType</name><argument_list>(<argument><expr><call><name><name>clazz</name><operator>.</operator><name>getComponentType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>Clob</name><operator>.</operator><name><name>class</name><operator>.</operator><name>isAssignableFrom</name></name></name><argument_list>(<argument><expr><name>clazz</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>Reader</name><operator>.</operator><name><name>class</name><operator>.</operator><name>isAssignableFrom</name></name></name><argument_list>(<argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_CLOB</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>Blob</name><operator>.</operator><name><name>class</name><operator>.</operator><name>isAssignableFrom</name></name></name><argument_list>(<argument><expr><name>clazz</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>InputStream</name><operator>.</operator><name><name>class</name><operator>.</operator><name>isAssignableFrom</name></name></name><argument_list>(<argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BLOB</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>BigDecimal</name><operator>.</operator><name><name>class</name><operator>.</operator><name>isAssignableFrom</name></name></name><argument_list>(<argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_NUMERIC_FLOATING_POINT</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>GEOMETRY_CLASS</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>GEOMETRY_CLASS</name><operator>.</operator><name>isAssignableFrom</name></name><argument_list>(<argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_GEOMETRY</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>Array</name><operator>.</operator><name><name>class</name><operator>.</operator><name>isAssignableFrom</name></name></name><argument_list>(<argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_ARRAY_UNKNOWN</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>ResultSet</name><operator>.</operator><name><name>class</name><operator>.</operator><name>isAssignableFrom</name></name></name><argument_list>(<argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_ROW_EMPTY</name></name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>TypeInfo</name></type> <name>t</name> <init>= <expr><call><name><name>LegacyDateTimeUtils</name><operator>.</operator><name>legacyClassToType</name></name><argument_list>(<argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>t</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>t</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_JAVA_OBJECT</name></name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Read a value from the given result set.
     *
     * @param session
     *            the session
     * @param rs
     *            the result set
     * @param columnIndex
     *            the column index (1-based)
     * @param type
     *            the data type
     * @return the value
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Value</name></type> <name>readValue</name><parameter_list>(<parameter><decl><type><name>Session</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>ResultSet</name></type> <name>rs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>columnIndex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Value</name></type> <name>v</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>rs</name> <operator>instanceof</operator> <name>JdbcResultSet</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name><name>ValueToObjectConverter</name><operator>.</operator><name>readValue</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><operator>(</operator><name>JdbcResultSet</name><operator>)</operator> <name>rs</name></expr></argument>, <argument><expr><name>columnIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <try>try <block>{<block_content>
                <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>readValueOther</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>, <argument><expr><name>columnIndex</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SQLException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><name>v</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Value</name></type> <name>readValueOther</name><parameter_list>(<parameter><decl><type><name>Session</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>ResultSet</name></type> <name>rs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>columnIndex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Value</name></type> <name>v</name></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>NULL</name></name></expr>:</case>
            <expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>CHAR</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>columnIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>v</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>s</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr> </then><else>: <expr><call><name><name>ValueChar</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>VARCHAR</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>columnIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>v</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>s</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr> </then><else>: <expr><call><name><name>ValueVarchar</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>CLOB</name></name></expr>:</case> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>session</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>columnIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>v</name> <operator>=</operator> <ternary><condition><expr><name>s</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr> </then><else>: <expr><call><name><name>ValueClob</name><operator>.</operator><name>createSmall</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name>Reader</name></type> <name>in</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getCharacterStream</name></name><argument_list>(<argument><expr><name>columnIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>v</name> <operator>=</operator> <ternary><condition><expr><name>in</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>
                        </then><else>: <expr><call><name><name>session</name><operator>.</operator><name>addTemporaryLob</name></name><argument_list>(
                                <argument><expr><call><name><name>session</name><operator>.</operator><name>getDataHandler</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLobStorage</name><argument_list>()</argument_list></call><operator>.</operator><call><name>createClob</name><argument_list>(<argument><expr><operator>new</operator> <call><name>BufferedReader</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>VARCHAR_IGNORECASE</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>columnIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>v</name> <operator>=</operator> <ternary><condition><expr><name>s</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr> </then><else>: <expr><call><name><name>ValueVarcharIgnoreCase</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BINARY</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getBytes</name></name><argument_list>(<argument><expr><name>columnIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>v</name> <operator>=</operator> <ternary><condition><expr><name>bytes</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr> </then><else>: <expr><call><name><name>ValueBinary</name><operator>.</operator><name>getNoCopy</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>VARBINARY</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getBytes</name></name><argument_list>(<argument><expr><name>columnIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>v</name> <operator>=</operator> <ternary><condition><expr><name>bytes</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr> </then><else>: <expr><call><name><name>ValueVarbinary</name><operator>.</operator><name>getNoCopy</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BLOB</name></name></expr>:</case> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>session</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buff</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getBytes</name></name><argument_list>(<argument><expr><name>columnIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>v</name> <operator>=</operator> <ternary><condition><expr><name>buff</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr> </then><else>: <expr><call><name><name>ValueBlob</name><operator>.</operator><name>createSmall</name></name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name>InputStream</name></type> <name>in</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getBinaryStream</name></name><argument_list>(<argument><expr><name>columnIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>v</name> <operator>=</operator> <ternary><condition><expr><name>in</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>
                        </then><else>: <expr><call><name><name>session</name><operator>.</operator><name>addTemporaryLob</name></name><argument_list>(<argument><expr><call><name><name>session</name><operator>.</operator><name>getDataHandler</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLobStorage</name><argument_list>()</argument_list></call><operator>.</operator><call><name>createBlob</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BOOLEAN</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>value</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name>columnIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>v</name> <operator>=</operator> <ternary><condition><expr><call><name><name>rs</name><operator>.</operator><name>wasNull</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr> </then><else>: <expr><call><name><name>ValueBoolean</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TINYINT</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>byte</name></type> <name>value</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getByte</name></name><argument_list>(<argument><expr><name>columnIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>v</name> <operator>=</operator> <ternary><condition><expr><call><name><name>rs</name><operator>.</operator><name>wasNull</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr> </then><else>: <expr><call><name><name>ValueTinyint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>SMALLINT</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>short</name></type> <name>value</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getShort</name></name><argument_list>(<argument><expr><name>columnIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>v</name> <operator>=</operator> <ternary><condition><expr><call><name><name>rs</name><operator>.</operator><name>wasNull</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr> </then><else>: <expr><call><name><name>ValueSmallint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTEGER</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>value</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>columnIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>v</name> <operator>=</operator> <ternary><condition><expr><call><name><name>rs</name><operator>.</operator><name>wasNull</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr> </then><else>: <expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BIGINT</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>value</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><name>columnIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>v</name> <operator>=</operator> <ternary><condition><expr><call><name><name>rs</name><operator>.</operator><name>wasNull</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr> </then><else>: <expr><call><name><name>ValueBigint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>NUMERIC</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>BigDecimal</name></type> <name>value</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getBigDecimal</name></name><argument_list>(<argument><expr><name>columnIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>v</name> <operator>=</operator> <ternary><condition><expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr> </then><else>: <expr><call><name><name>ValueNumeric</name><operator>.</operator><name>getAnyScale</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>REAL</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>float</name></type> <name>value</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getFloat</name></name><argument_list>(<argument><expr><name>columnIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>v</name> <operator>=</operator> <ternary><condition><expr><call><name><name>rs</name><operator>.</operator><name>wasNull</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr> </then><else>: <expr><call><name><name>ValueReal</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>DOUBLE</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>double</name></type> <name>value</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getDouble</name></name><argument_list>(<argument><expr><name>columnIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>v</name> <operator>=</operator> <ternary><condition><expr><call><name><name>rs</name><operator>.</operator><name>wasNull</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr> </then><else>: <expr><call><name><name>ValueDouble</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>DECFLOAT</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>BigDecimal</name></type> <name>value</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getBigDecimal</name></name><argument_list>(<argument><expr><name>columnIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>v</name> <operator>=</operator> <ternary><condition><expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr> </then><else>: <expr><call><name><name>ValueDecfloat</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>DATE</name></name></expr>:</case> <block>{<block_content>
            <try>try <block>{<block_content>
                <decl_stmt><decl><type><name>LocalDate</name></type> <name>value</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getObject</name></name><argument_list>(<argument><expr><name>columnIndex</name></expr></argument>, <argument><expr><name><name>LocalDate</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>v</name> <operator>=</operator> <ternary><condition><expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr> </then><else>: <expr><call><name><name>JSR310Utils</name><operator>.</operator><name>localDateToValue</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SQLException</name></type> <name>ignore</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>Date</name></type> <name>value</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getDate</name></name><argument_list>(<argument><expr><name>columnIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>v</name> <operator>=</operator> <ternary><condition><expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr> </then><else>: <expr><call><name><name>LegacyDateTimeUtils</name><operator>.</operator><name>fromDate</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TIME</name></name></expr>:</case> <block>{<block_content>
            <try>try <block>{<block_content>
                <decl_stmt><decl><type><name>LocalTime</name></type> <name>value</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getObject</name></name><argument_list>(<argument><expr><name>columnIndex</name></expr></argument>, <argument><expr><name><name>LocalTime</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>v</name> <operator>=</operator> <ternary><condition><expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr> </then><else>: <expr><call><name><name>JSR310Utils</name><operator>.</operator><name>localTimeToValue</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SQLException</name></type> <name>ignore</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>Time</name></type> <name>value</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getTime</name></name><argument_list>(<argument><expr><name>columnIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>v</name> <operator>=</operator> <ternary><condition><expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr> </then><else>: <expr><call><name><name>LegacyDateTimeUtils</name><operator>.</operator><name>fromTime</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TIME_TZ</name></name></expr>:</case> <block>{<block_content>
            <try>try <block>{<block_content>
                <decl_stmt><decl><type><name>OffsetTime</name></type> <name>value</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getObject</name></name><argument_list>(<argument><expr><name>columnIndex</name></expr></argument>, <argument><expr><name><name>OffsetTime</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>v</name> <operator>=</operator> <ternary><condition><expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr> </then><else>: <expr><call><name><name>JSR310Utils</name><operator>.</operator><name>offsetTimeToValue</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SQLException</name></type> <name>ignore</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>Object</name></type> <name>obj</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getObject</name></name><argument_list>(<argument><expr><name>columnIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name><name>ValueTimeTimeZone</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></catch></try>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TIMESTAMP</name></name></expr>:</case> <block>{<block_content>
            <try>try <block>{<block_content>
                <decl_stmt><decl><type><name>LocalDateTime</name></type> <name>value</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getObject</name></name><argument_list>(<argument><expr><name>columnIndex</name></expr></argument>, <argument><expr><name><name>LocalDateTime</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>v</name> <operator>=</operator> <ternary><condition><expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr> </then><else>: <expr><call><name><name>JSR310Utils</name><operator>.</operator><name>localDateTimeToValue</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SQLException</name></type> <name>ignore</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>Timestamp</name></type> <name>value</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getTimestamp</name></name><argument_list>(<argument><expr><name>columnIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>v</name> <operator>=</operator> <ternary><condition><expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr> </then><else>: <expr><call><name><name>LegacyDateTimeUtils</name><operator>.</operator><name>fromTimestamp</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TIMESTAMP_TZ</name></name></expr>:</case> <block>{<block_content>
            <try>try <block>{<block_content>
                <decl_stmt><decl><type><name>OffsetDateTime</name></type> <name>value</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getObject</name></name><argument_list>(<argument><expr><name>columnIndex</name></expr></argument>, <argument><expr><name><name>OffsetDateTime</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>v</name> <operator>=</operator> <ternary><condition><expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr> </then><else>: <expr><call><name><name>JSR310Utils</name><operator>.</operator><name>offsetDateTimeToValue</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SQLException</name></type> <name>ignore</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>Object</name></type> <name>obj</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getObject</name></name><argument_list>(<argument><expr><name>columnIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>obj</name> <operator>instanceof</operator> <name>ZonedDateTime</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name><name>JSR310Utils</name><operator>.</operator><name>zonedDateTimeToValue</name></name><argument_list>(<argument><expr><operator>(</operator><name>ZonedDateTime</name><operator>)</operator> <name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name><name>ValueTimestampTimeZone</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></catch></try>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_YEAR</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_MONTH</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_DAY</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_HOUR</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_MINUTE</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_SECOND</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_YEAR_TO_MONTH</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_DAY_TO_HOUR</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_DAY_TO_MINUTE</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_DAY_TO_SECOND</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_HOUR_TO_MINUTE</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_HOUR_TO_SECOND</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_MINUTE_TO_SECOND</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>columnIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>v</name> <operator>=</operator> <ternary><condition><expr><name>s</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>
                    </then><else>: <expr><call><name><name>IntervalUtils</name><operator>.</operator><name>parseFormattedInterval</name></name><argument_list>(<argument><expr><call><name><name>IntervalQualifier</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>type</name> <operator>-</operator> <name><name>Value</name><operator>.</operator><name>INTERVAL_YEAR</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>JAVA_OBJECT</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buff</name></decl>;</decl_stmt>
            <try>try <block>{<block_content>
                <expr_stmt><expr><name>buff</name> <operator>=</operator> <call><name><name>rs</name><operator>.</operator><name>getBytes</name></name><argument_list>(<argument><expr><name>columnIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SQLException</name></type> <name>ignore</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <try>try <block>{<block_content>
                    <decl_stmt><decl><type><name>Object</name></type> <name>o</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getObject</name></name><argument_list>(<argument><expr><name>columnIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>buff</name> <operator>=</operator> <ternary><condition><expr><name>o</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>JdbcUtils</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><call><name><name>session</name><operator>.</operator><name>getJavaObjectSerializer</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</expr_stmt>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></catch></try>
            </block_content>}</block></catch></try>
            <expr_stmt><expr><name>v</name> <operator>=</operator> <ternary><condition><expr><name>buff</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr> </then><else>: <expr><call><name><name>ValueJavaObject</name><operator>.</operator><name>getNoCopy</name></name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>ENUM</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>value</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>columnIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>v</name> <operator>=</operator> <ternary><condition><expr><call><name><name>rs</name><operator>.</operator><name>wasNull</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr> </then><else>: <expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>GEOMETRY</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>Object</name></type> <name>x</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getObject</name></name><argument_list>(<argument><expr><name>columnIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>v</name> <operator>=</operator> <ternary><condition><expr><name>x</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr> </then><else>: <expr><call><name><name>ValueGeometry</name><operator>.</operator><name>getFromGeometry</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>JSON</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>Object</name></type> <name>x</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getObject</name></name><argument_list>(<argument><expr><name>columnIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>clazz</name> <init>= <expr><call><name><name>x</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>byte</name><index>[]</index></name><operator>.</operator><name>class</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name><name>ValueJson</name><operator>.</operator><name>fromJson</name></name><argument_list>(<argument><expr><operator>(</operator><name><name>byte</name><index>[]</index></name><operator>)</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>clazz</name> <operator>==</operator> <name><name>String</name><operator>.</operator><name>class</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name><name>ValueJson</name><operator>.</operator><name>fromJson</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name><name>ValueJson</name><operator>.</operator><name>fromJson</name></name><argument_list>(<argument><expr><call><name><name>x</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>UUID</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>Object</name></type> <name>o</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getObject</name></name><argument_list>(<argument><expr><name>columnIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>o</name> <operator>instanceof</operator> <name>UUID</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name><name>ValueUuid</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>UUID</name><operator>)</operator> <name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>o</name> <operator>instanceof</operator> <name><name>byte</name><index>[]</index></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name><name>ValueUuid</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name><name>byte</name><index>[]</index></name><operator>)</operator> <name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name><name>ValueUuid</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>ARRAY</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>Array</name></type> <name>array</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getArray</name></name><argument_list>(<argument><expr><name>columnIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>array</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name><name>Object</name><index>[]</index></name></type> <name>list</name> <init>= <expr><operator>(</operator><name><name>Object</name><index>[]</index></name><operator>)</operator> <call><name><name>array</name><operator>.</operator><name>getArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>list</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>list</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>Value</name><index>[]</index></name></type> <name>values</name> <init>= <expr><operator>new</operator> <name><name>Value</name><index>[<expr><name>len</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                        <expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>ValueToObjectConverter</name><operator>.</operator><name>objectToValue</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>Value</name><operator>.</operator><name>NULL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></for>
                    <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name><name>ValueArray</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>ROW</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>Object</name></type> <name>o</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getObject</name></name><argument_list>(<argument><expr><name>columnIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>o</name> <operator>instanceof</operator> <name>ResultSet</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name><name>ValueToObjectConverter</name><operator>.</operator><name>resultSetToValue</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><operator>(</operator><name>ResultSet</name><operator>)</operator> <name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name><name>Object</name><index>[]</index></name></type> <name>list</name> <init>= <expr><operator>(</operator><name><name>Object</name><index>[]</index></name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>list</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>Value</name><index>[]</index></name></type> <name>values</name> <init>= <expr><operator>new</operator> <name><name>Value</name><index>[<expr><name>len</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>ValueToObjectConverter</name><operator>.</operator><name>objectToValue</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>Value</name><operator>.</operator><name>NULL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name><name>ValueRow</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <default>default:</default>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>(<argument><expr><literal type="string">"data type "</literal> <operator>+</operator> <name>type</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
        <return>return <expr><name>v</name></expr>;</return>
    </block_content>}</block></function>

    <constructor><specifier>private</specifier> <name>ValueToObjectConverter2</name><parameter_list>()</parameter_list> <block>{<block_content>
    </block_content>}</block></constructor>

}</block></class>
</unit>
