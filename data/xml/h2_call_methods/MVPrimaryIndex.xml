<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/mvstore/db/MVPrimaryIndex.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>db</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicLong</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>api</name><operator>.</operator><name>ErrorCode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>query</name><operator>.</operator><name>AllColumnsForPlan</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Database</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>SessionLocal</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>index</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>index</name><operator>.</operator><name>SingleRowCursor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>DbException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>MVMap</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>MVStoreException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>tx</name><operator>.</operator><name>Transaction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>tx</name><operator>.</operator><name>TransactionMap</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>tx</name><operator>.</operator><name>TransactionMap</name><operator>.</operator><name>TMIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>type</name><operator>.</operator><name>LongDataType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>Row</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>SearchRow</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>SortOrder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>Column</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>IndexColumn</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>TableFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueLob</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueNull</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>VersionedValue</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A table stored in a MVStore.
 */</comment>
<class><specifier>public</specifier> class <name>MVPrimaryIndex</name> <super_list><extends>extends <super><name><name>MVIndex</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>SearchRow</name></argument>&gt;</argument_list></name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>MVTable</name></type> <name>mvTable</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>mapName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>TransactionMap</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>SearchRow</name></argument>&gt;</argument_list></name></type> <name>dataMap</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>AtomicLong</name></type> <name>lastKey</name> <init>= <expr><operator>new</operator> <call><name>AtomicLong</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>mainIndexColumn</name> <init>= <expr><name><name>SearchRow</name><operator>.</operator><name>ROWID_INDEX</name></name></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>MVPrimaryIndex</name><parameter_list>(<parameter><decl><type><name>Database</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>MVTable</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name><name>IndexColumn</name><index>[]</index></name></type> <name>columns</name></decl></parameter>, <parameter><decl><type><name>IndexType</name></type> <name>indexType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"_DATA"</literal></expr></argument>, <argument><expr><name>columns</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>indexType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mvTable</name></name> <operator>=</operator> <name>table</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>RowDataType</name></type> <name>valueType</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getRowFactory</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRowDataType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>mapName</name> <operator>=</operator> <literal type="string">"table."</literal> <operator>+</operator> <call><name>getId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Transaction</name></type> <name>t</name> <init>= <expr><call><name><name>mvTable</name><operator>.</operator><name>getTransactionBegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>dataMap</name> <operator>=</operator> <call><name><name>t</name><operator>.</operator><name>openMap</name></name><argument_list>(<argument><expr><name>mapName</name></expr></argument>, <argument><expr><name><name>LongDataType</name><operator>.</operator><name>INSTANCE</name></name></expr></argument>, <argument><expr><name>valueType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dataMap</name><operator>.</operator><name>map</name><operator>.</operator><name>setVolatile</name></name><argument_list>(<argument><expr><operator>!</operator><call><name><name>table</name><operator>.</operator><name>isPersistData</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>indexType</name><operator>.</operator><name>isPersistent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>db</name><operator>.</operator><name>isStarting</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>dataMap</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Long</name></type> <name>k</name> <init>= <expr><call><name><name>dataMap</name><operator>.</operator><name>map</name><operator>.</operator><name>lastKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>    <comment type="line">// include uncommitted keys as well</comment>
        <expr_stmt><expr><call><name><name>lastKey</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>k</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>k</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getCreateSQL</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getPlanSQL</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>table</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>TRACE_SQL_FLAGS</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">".tableScan"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMainIndexColumn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mainIndexColumn</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mainIndexColumn</name></name> <operator>=</operator> <name>mainIndexColumn</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getMainIndexColumn</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>mainIndexColumn</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// ok</comment>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Row</name></type> <name>row</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>mainIndexColumn</name> <operator>==</operator> <name><name>SearchRow</name><operator>.</operator><name>ROWID_INDEX</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>row</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>row</name><operator>.</operator><name>setKey</name></name><argument_list>(<argument><expr><call><name><name>lastKey</name><operator>.</operator><name>incrementAndGet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>c</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>mainIndexColumn</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getLong</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>row</name><operator>.</operator><name>setKey</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>mvTable</name><operator>.</operator><name>getContainsLargeObject</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getColumnCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Value</name></type> <name>v</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>v</name> <operator>instanceof</operator> <name>ValueLob</name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>ValueLob</name></type> <name>lob</name> <init>= <expr><operator>(</operator><operator>(</operator><name>ValueLob</name><operator>)</operator> <name>v</name><operator>)</operator><operator>.</operator><call><name>copy</name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>removeAtCommitStop</name></name><argument_list>(<argument><expr><name>lob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>v</name> <operator>!=</operator> <name>lob</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>row</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>lob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name><name>TransactionMap</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>,<argument><name>SearchRow</name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><call><name>getMap</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>rowKey</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>Row</name></type> <name>old</name> <init>= <expr><operator>(</operator><name>Row</name><operator>)</operator><call><name><name>map</name><operator>.</operator><name>putIfAbsent</name></name><argument_list>(<argument><expr><name>rowKey</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>old</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>errorCode</name> <init>= <expr><name><name>ErrorCode</name><operator>.</operator><name>CONCURRENT_UPDATE_1</name></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>map</name><operator>.</operator><name>getImmediate</name></name><argument_list>(<argument><expr><name>rowKey</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>map</name><operator>.</operator><name>getFromSnapshot</name></name><argument_list>(<argument><expr><name>rowKey</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <comment type="line">// committed</comment>
                    <expr_stmt><expr><name>errorCode</name> <operator>=</operator> <name><name>ErrorCode</name><operator>.</operator><name>DUPLICATE_KEY_1</name></name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>DbException</name></type> <name>e</name> <init>= <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>errorCode</name></expr></argument>,
                        <argument><expr><call><name>getDuplicatePrimaryKeyMessage</name><argument_list>(<argument><expr><name>mainIndexColumn</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>setSource</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw>throw <expr><name>e</name></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>MVStoreException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><call><name><name>mvTable</name><operator>.</operator><name>convertException</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
        <comment type="line">// because it's possible to directly update the key using the _rowid_</comment>
        <comment type="line">// syntax</comment>
        <decl_stmt><decl><type><name>long</name></type> <name>last</name></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>rowKey</name> <operator>&gt;</operator> <operator>(</operator><name>last</name> <operator>=</operator> <call><name><name>lastKey</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><call><name><name>lastKey</name><operator>.</operator><name>compareAndSet</name></name><argument_list>(<argument><expr><name>last</name></expr></argument>, <argument><expr><name>rowKey</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
        </block_content>}</block></while>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>remove</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Row</name></type> <name>row</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>mvTable</name><operator>.</operator><name>getContainsLargeObject</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getColumnCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Value</name></type> <name>v</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>v</name> <operator>instanceof</operator> <name>ValueLob</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>removeAtCommit</name></name><argument_list>(<argument><expr><operator>(</operator><name>ValueLob</name><operator>)</operator> <name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>TransactionMap</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>,<argument><name>SearchRow</name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><call><name>getMap</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>Row</name></type> <name>existing</name> <init>= <expr><operator>(</operator><name>Row</name><operator>)</operator><call><name><name>map</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>existing</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>StringBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>getSQL</name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>TRACE_SQL_FLAGS</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">": "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>ROW_NOT_FOUND_WHEN_DELETING_1</name></name></expr></argument>, <argument><expr><call><name><name>builder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>MVStoreException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><call><name><name>mvTable</name><operator>.</operator><name>convertException</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Row</name></type> <name>oldRow</name></decl></parameter>, <parameter><decl><type><name>Row</name></type> <name>newRow</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>mainIndexColumn</name> <operator>!=</operator> <name><name>SearchRow</name><operator>.</operator><name>ROWID_INDEX</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>c</name> <init>= <expr><call><name><name>newRow</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>mainIndexColumn</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getLong</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>newRow</name><operator>.</operator><name>setKey</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>key</name> <init>= <expr><call><name><name>oldRow</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <assert>assert <expr><name>mainIndexColumn</name> <operator>!=</operator> <name><name>SearchRow</name><operator>.</operator><name>ROWID_INDEX</name></name> <operator>||</operator> <name>key</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</assert>
        <assert>assert <expr><name>key</name> <operator>==</operator> <call><name><name>newRow</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call> <operator>:</operator> <name>key</name> <operator>+</operator> <literal type="string">" != "</literal> <operator>+</operator> <call><name><name>newRow</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr>;</assert>
        <if_stmt><if>if <condition>(<expr><call><name><name>mvTable</name><operator>.</operator><name>getContainsLargeObject</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name><name>oldRow</name><operator>.</operator><name>getColumnCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Value</name></type> <name>oldValue</name> <init>= <expr><call><name><name>oldRow</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Value</name></type> <name>newValue</name> <init>= <expr><call><name><name>newRow</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>oldValue</name> <operator>!=</operator> <name>newValue</name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>oldValue</name> <operator>instanceof</operator> <name>ValueLob</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>removeAtCommit</name></name><argument_list>(<argument><expr><operator>(</operator><name>ValueLob</name><operator>)</operator> <name>oldValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>newValue</name> <operator>instanceof</operator> <name>ValueLob</name></expr>)</condition> <block>{<block_content>
                        <decl_stmt><decl><type><name>ValueLob</name></type> <name>lob</name> <init>= <expr><operator>(</operator><operator>(</operator><name>ValueLob</name><operator>)</operator> <name>newValue</name><operator>)</operator><operator>.</operator><call><name>copy</name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>removeAtCommitStop</name></name><argument_list>(<argument><expr><name>lob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><name>newValue</name> <operator>!=</operator> <name>lob</name></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name><name>newRow</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>lob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name><name>TransactionMap</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>,<argument><name>SearchRow</name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><call><name>getMap</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>Row</name></type> <name>existing</name> <init>= <expr><operator>(</operator><name>Row</name><operator>)</operator><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>newRow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>existing</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>StringBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>getSQL</name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>TRACE_SQL_FLAGS</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">": "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>ROW_NOT_FOUND_WHEN_DELETING_1</name></name></expr></argument>, <argument><expr><call><name><name>builder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>MVStoreException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><call><name><name>mvTable</name><operator>.</operator><name>convertException</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>


        <comment type="line">// because it's possible to directly update the key using the _rowid_</comment>
        <comment type="line">// syntax</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>newRow</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <call><name><name>lastKey</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>lastKey</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><call><name><name>newRow</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Lock a single row.
     *
     * @param session database session
     * @param row to lock
     * @return row object if it exists
     */</comment>
    <function><type><name>Row</name></type> <name>lockRow</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Row</name></type> <name>row</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>TransactionMap</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>,<argument><name>SearchRow</name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><call><name>getMap</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>key</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>lockRow</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Row</name></type> <name>lockRow</name><parameter_list>(<parameter><decl><type><name><name>TransactionMap</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>,<argument><name>SearchRow</name></argument>&gt;</argument_list></name></type> <name>map</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <return>return <expr><call><name>setRowKey</name><argument_list>(<argument><expr><operator>(</operator><name>Row</name><operator>)</operator> <call><name><name>map</name><operator>.</operator><name>lock</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>MVStoreException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><call><name><name>mvTable</name><operator>.</operator><name>convertException</name></name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Cursor</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>SearchRow</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>SearchRow</name></type> <name>last</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>min</name> <init>= <expr><call><name>extractPKFromRow</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name><name>Long</name><operator>.</operator><name>MIN_VALUE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>max</name> <init>= <expr><call><name>extractPKFromRow</name><argument_list>(<argument><expr><name>last</name></expr></argument>, <argument><expr><name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>find</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>long</name></type> <name>extractPKFromRow</name><parameter_list>(<parameter><decl><type><name>SearchRow</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>result</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>row</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <name>defaultValue</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mainIndexColumn</name> <operator>==</operator> <name><name>SearchRow</name><operator>.</operator><name>ROWID_INDEX</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>row</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>Value</name></type> <name>v</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>mainIndexColumn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>row</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>v</name> <operator>==</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>v</name><operator>.</operator><name>getLong</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>MVTable</name></type> <name>getTable</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>mvTable</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Row</name></type> <name>getRow</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>TransactionMap</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>,<argument><name>SearchRow</name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><call><name>getMap</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Row</name></type> <name>row</name> <init>= <expr><operator>(</operator><name>Row</name><operator>)</operator> <call><name><name>map</name><operator>.</operator><name>getFromSnapshot</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>row</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>ROW_NOT_FOUND_IN_PRIMARY_INDEX</name></name></expr></argument>, <argument><expr><call><name>getTraceSQL</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>setRowKey</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>double</name></type> <name>getCost</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>masks</name></decl></parameter>,
            <parameter><decl><type><name><name>TableFilter</name><index>[]</index></name></type> <name>filters</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filter</name></decl></parameter>, <parameter><decl><type><name>SortOrder</name></type> <name>sortOrder</name></decl></parameter>,
            <parameter><decl><type><name>AllColumnsForPlan</name></type> <name>allColumnsSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <return>return <expr><literal type="number">10</literal> <operator>*</operator> <call><name>getCostRangeIndex</name><argument_list>(<argument><expr><name>masks</name></expr></argument>, <argument><expr><call><name><name>dataMap</name><operator>.</operator><name>sizeAsLongMax</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><name>filters</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>sortOrder</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>allColumnsSet</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>MVStoreException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>OBJECT_CLOSED</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getColumnIndex</name><parameter_list>(<parameter><decl><type><name>Column</name></type> <name>col</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// can not use this index - use the delegate index instead</comment>
        <return>return <expr><name><name>SearchRow</name><operator>.</operator><name>ROWID_INDEX</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isFirstColumn</name><parameter_list>(<parameter><decl><type><name>Column</name></type> <name>column</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>remove</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>TransactionMap</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>,<argument><name>SearchRow</name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><call><name>getMap</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>map</name><operator>.</operator><name>isClosed</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Transaction</name></type> <name>t</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getTransaction</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>removeMap</name></name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>truncate</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>mvTable</name><operator>.</operator><name>getContainsLargeObject</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>getLobStorage</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>removeAllForTable</name><argument_list>(<argument><expr><call><name><name>table</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>getMap</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>canGetFirstOrLast</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Cursor</name></type> <name>findFirstOrLast</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>first</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>TransactionMap</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>SearchRow</name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><call><name>getMap</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>SearchRow</name></argument>&gt;</argument_list></name></type> <name>entry</name> <init>= <expr><ternary><condition><expr><name>first</name></expr> ?</condition><then> <expr><call><name><name>map</name><operator>.</operator><name>firstEntry</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>map</name><operator>.</operator><name>lastEntry</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>new</operator> <call><name>SingleRowCursor</name><argument_list>(<argument><expr><ternary><condition><expr><name>entry</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name>setRowKey</name><argument_list>(<argument><expr><operator>(</operator><name>Row</name><operator>)</operator> <call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>needRebuild</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>getRowCount</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getMap</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>sizeAsLong</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * The maximum number of rows, including uncommitted rows of any session.
     *
     * @return the maximum number of rows
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getRowCountMax</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>dataMap</name><operator>.</operator><name>sizeAsLongMax</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>getRowCountApproximation</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getRowCountMax</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>getDiskSpaceUsed</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>dataMap</name><operator>.</operator><name>map</name><operator>.</operator><name>getRootPage</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDiskSpaceUsed</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getMapName</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>mapName</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>addRowsToBuffer</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Row</name></argument>&gt;</argument_list></name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>bufferName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>addBufferedRows</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>bufferNames</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Cursor</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Long</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>Long</name></type> <name>last</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>TransactionMap</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>,<argument><name>SearchRow</name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><call><name>getMap</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>first</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>last</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>first</name><operator>.</operator><name>longValue</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>last</name><operator>.</operator><name>longValue</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>SingleRowCursor</name><argument_list>(<argument><expr><call><name>setRowKey</name><argument_list>(<argument><expr><operator>(</operator><name>Row</name><operator>)</operator> <call><name><name>map</name><operator>.</operator><name>getFromSnapshot</name></name><argument_list>(<argument><expr><name>first</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>new</operator> <call><name>MVStoreCursor</name><argument_list>(<argument><expr><call><name><name>map</name><operator>.</operator><name>entryIterator</name></name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isRowIdIndex</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the map to store the data.
     *
     * @param session the session
     * @return the map
     */</comment>
    <function><type><name><name>TransactionMap</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>,<argument><name>SearchRow</name></argument>&gt;</argument_list></name></type> <name>getMap</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>session</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>dataMap</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Transaction</name></type> <name>t</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getTransaction</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>dataMap</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>MVMap</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name><name>VersionedValue</name><argument_list type="generic">&lt;<argument><name>SearchRow</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getMVMap</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>dataMap</name><operator>.</operator><name>map</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Row</name></type> <name>setRowKey</name><parameter_list>(<parameter><decl><type><name>Row</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>row</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>row</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>row</name><operator>.</operator><name>setKey</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>row</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * A cursor.
     */</comment>
    <class><specifier>static</specifier> <specifier>final</specifier> class <name>MVStoreCursor</name> <super_list><implements>implements <super><name>Cursor</name></super></implements></super_list> <block>{

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>TMIterator</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>SearchRow</name></argument>, <argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>SearchRow</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>it</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>SearchRow</name></argument>&gt;</argument_list></name></type> <name>current</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>Row</name></type> <name>row</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>MVStoreCursor</name><parameter_list>(<parameter><decl><type><name><name>TMIterator</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>SearchRow</name></argument>, <argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>SearchRow</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>it</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>it</name></name> <operator>=</operator> <name>it</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>Row</name></type> <name>get</name><parameter_list>()</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>row</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>current</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>row</name> <operator>=</operator> <operator>(</operator><name>Row</name><operator>)</operator><call><name><name>current</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name><name>row</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>row</name><operator>.</operator><name>setKey</name></name><argument_list>(<argument><expr><call><name><name>current</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>row</name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>SearchRow</name></type> <name>getSearchRow</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><call><name>get</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>boolean</name></type> <name>next</name><parameter_list>()</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>current</name> <operator>=</operator> <call><name><name>it</name><operator>.</operator><name>fetchNext</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>row</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <return>return <expr><name>current</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>boolean</name></type> <name>previous</name><parameter_list>()</parameter_list> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getUnsupportedException</name></name><argument_list>(<argument><expr><literal type="string">"previous"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
