<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/util/NetworkConnectionInfo.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>InetAddress</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>UnknownHostException</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Network connection information.
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>NetworkConnectionInfo</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>server</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>clientAddr</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>clientPort</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>clientInfo</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Creates new instance of network connection information.
     *
     * @param server
     *            the protocol and port of the server
     * @param clientAddr
     *            the client address
     * @param clientPort
     *            the client port
     * @throws UnknownHostException
     *             if clientAddr cannot be resolved
     */</comment>
    <constructor><specifier>public</specifier> <name>NetworkConnectionInfo</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>server</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>clientAddr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>clientPort</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>UnknownHostException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><call><name><name>InetAddress</name><operator>.</operator><name>getByName</name></name><argument_list>(<argument><expr><name>clientAddr</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getAddress</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>clientPort</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Creates new instance of network connection information.
     *
     * @param server
     *            the protocol and port of the server
     * @param clientAddr
     *            the client address
     * @param clientPort
     *            the client port
     * @param clientInfo
     *            additional client information, or {@code null}
     */</comment>
    <constructor><specifier>public</specifier> <name>NetworkConnectionInfo</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>server</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>clientAddr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>clientPort</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>clientInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>server</name></name> <operator>=</operator> <name>server</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>clientAddr</name></name> <operator>=</operator> <name>clientAddr</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>clientPort</name></name> <operator>=</operator> <name>clientPort</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>clientInfo</name></name> <operator>=</operator> <name>clientInfo</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Returns the protocol and port of the server.
     *
     * @return the protocol and port of the server
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getServer</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>server</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the client address.
     *
     * @return the client address
     */</comment>
    <function><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>getClientAddr</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>clientAddr</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the client port.
     *
     * @return the client port
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getClientPort</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>clientPort</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns additional client information, or {@code null}.
     *
     * @return additional client information, or {@code null}
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getClientInfo</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>clientInfo</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the client address and port.
     *
     * @return the client address and port
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getClient</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>NetUtils</name><operator>.</operator><name>ipToShortForm</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>clientAddr</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>clientPort</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>
