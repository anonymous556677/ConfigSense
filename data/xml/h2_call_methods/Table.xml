<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/table/Table.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>CopyOnWriteArrayList</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>api</name><operator>.</operator><name>ErrorCode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>Prepared</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>query</name><operator>.</operator><name>AllColumnsForPlan</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>constraint</name><operator>.</operator><name>Constraint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>constraint</name><operator>.</operator><name>Constraint</name><operator>.</operator><name>Type</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>CastDataProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>DbObject</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Right</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>SessionLocal</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>ExpressionVisitor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>index</name><operator>.</operator><name>Index</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>DbException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>Trace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>DefaultRow</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>LocalResult</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>Row</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>RowFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>SearchRow</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>SimpleRowValue</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>SortOrder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>Schema</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>SchemaObject</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>Sequence</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>TriggerObject</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>Utils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>CompareMode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueNull</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This is the base class for most tables.
 * A table contains a list of columns and a list of rows.
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>Table</name> <super_list><extends>extends <super><name>SchemaObject</name></super></extends></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * The table type that means this table is a regular persistent table.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>TYPE_CACHED</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The table type that means this table is a regular persistent table.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>TYPE_MEMORY</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Read lock.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>READ_LOCK</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Write lock.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>WRITE_LOCK</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Exclusive lock.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>EXCLUSIVE_LOCK</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The columns of this table.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name><name>Column</name><index>[]</index></name></type> <name>columns</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The compare mode used for this table.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>CompareMode</name></type> <name>compareMode</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Protected tables are not listed in the meta data and are excluded when
     * using the SCRIPT command.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>isHidden</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Column</name></argument>&gt;</argument_list></name></type> <name>columnMap</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>persistIndexes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>persistData</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>TriggerObject</name></argument>&gt;</argument_list></name></type> <name>triggers</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Constraint</name></argument>&gt;</argument_list></name></type> <name>constraints</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Sequence</name></argument>&gt;</argument_list></name></type> <name>sequences</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * views that depend on this table
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>CopyOnWriteArrayList</name><argument_list type="generic">&lt;<argument><name>TableView</name></argument>&gt;</argument_list></name></type> <name>dependentViews</name> <init>= <expr><operator>new</operator> <call><name><name>CopyOnWriteArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>TableSynonym</name></argument>&gt;</argument_list></name></type> <name>synonyms</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Is foreign key constraint checking enabled for this table. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>checkForeignKeyConstraints</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>onCommitDrop</name></decl>, <decl><type ref="prev"/><name>onCommitTruncate</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>Row</name></type> <name>nullRow</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>RowFactory</name></type> <name>rowFactory</name> <init>= <expr><call><name><name>RowFactory</name><operator>.</operator><name>getRowFactory</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>tableExpression</name></decl>;</decl_stmt>

    <constructor><specifier>protected</specifier> <name>Table</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>persistIndexes</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>persistData</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>Trace</name><operator>.</operator><name>TABLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>columnMap</name> <operator>=</operator> <call><name><name>schema</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>newStringMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>persistIndexes</name></name> <operator>=</operator> <name>persistIndexes</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>persistData</name></name> <operator>=</operator> <name>persistData</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>compareMode</name> <operator>=</operator> <call><name><name>schema</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCompareMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>rename</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>newName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>rename</name></name><argument_list>(<argument><expr><name>newName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>constraints</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Constraint</name></type> <name>constraint</name> <range>: <expr><name>constraints</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>constraint</name><operator>.</operator><name>rebuild</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isView</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Lock the table for the given session.
     * This method waits until the lock is granted.
     *
     * @param session the session
     * @param lockType the type of lock
     * @return true if the table was already exclusively locked by this session.
     * @throws DbException if a lock timeout occurred
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>lock</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lockType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Close the table object and flush changes.
     *
     * @param session the session
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>close</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Release the lock for this session.
     *
     * @param s the session
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>unlock</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create an index for this table
     *
     * @param session the session
     * @param indexName the name of the index
     * @param indexId the id
     * @param cols the index columns
     * @param uniqueColumnCount the count of unique columns
     * @param indexType the index type
     * @param create whether this is a new index
     * @param indexComment the comment
     * @return the index
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>Index</name></type> <name>addIndex</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>indexName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indexId</name></decl></parameter>, <parameter><decl><type><name><name>IndexColumn</name><index>[]</index></name></type> <name>cols</name></decl></parameter>,
            <parameter><decl><type><name>int</name></type> <name>uniqueColumnCount</name></decl></parameter>, <parameter><decl><type><name>IndexType</name></type> <name>indexType</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>create</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>indexComment</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Get the given row.
     *
     * @param session the session
     * @param key the primary key
     * @return the row
     */</comment>
    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unused"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>public</specifier> <name>Row</name></type> <name>getRow</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns whether this table is insertable.
     *
     * @return whether this table is insertable
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isInsertable</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Remove a row from the table and all indexes.
     *
     * @param session the session
     * @param row the row
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>removeRow</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Row</name></type> <name>row</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Locks row, preventing any updated to it, except from the session specified.
     *
     * @param session the session
     * @param row to lock
     * @return locked row, or null if row does not exist anymore
     */</comment>
    <function><type><specifier>public</specifier> <name>Row</name></type> <name>lockRow</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Row</name></type> <name>row</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getUnsupportedException</name></name><argument_list>(<argument><expr><literal type="string">"lockRow()"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Remove all rows from the table and indexes.
     *
     * @param session the session
     * @return number of removed rows, possibly including uncommitted rows
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>long</name></type> <name>truncate</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Add a row to the table and all indexes.
     *
     * @param session the session
     * @param row the row
     * @throws DbException if a constraint was violated
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>addRow</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Row</name></type> <name>row</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Update a row to the table and all indexes.
     *
     * @param session the session
     * @param oldRow the row to update
     * @param newRow the row with updated values (_rowid_ suppose to be the same)
     * @throws DbException if a constraint was violated
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>updateRow</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Row</name></type> <name>oldRow</name></decl></parameter>, <parameter><decl><type><name>Row</name></type> <name>newRow</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>newRow</name><operator>.</operator><name>setKey</name></name><argument_list>(<argument><expr><call><name><name>oldRow</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>removeRow</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>oldRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addRow</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>newRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check if this table supports ALTER TABLE.
     *
     * @throws DbException if it is not supported
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>checkSupportAlter</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Get the table type name
     *
     * @return the table type name
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>TableType</name></type> <name>getTableType</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Return SQL table type for INFORMATION_SCHEMA.
     *
     * @return SQL table type for INFORMATION_SCHEMA
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getSQLTableType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isView</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="string">"VIEW"</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isTemporary</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><ternary><condition><expr><call><name>isGlobalTemporary</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"GLOBAL TEMPORARY"</literal></expr> </then><else>: <expr><literal type="string">"LOCAL TEMPORARY"</literal></expr></else></ternary></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="string">"BASE TABLE"</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the scan index to iterate through all rows.
     *
     * @param session the session
     * @return the index
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>Index</name></type> <name>getScanIndex</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Get the scan index for this table.
     *
     * @param session the session
     * @param masks the search mask
     * @param filters the table filters
     * @param filter the filter index
     * @param sortOrder the sort order
     * @param allColumnsSet all columns
     * @return the scan index
     */</comment>
    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unused"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>public</specifier> <name>Index</name></type> <name>getScanIndex</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>masks</name></decl></parameter>,
            <parameter><decl><type><name><name>TableFilter</name><index>[]</index></name></type> <name>filters</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filter</name></decl></parameter>, <parameter><decl><type><name>SortOrder</name></type> <name>sortOrder</name></decl></parameter>,
            <parameter><decl><type><name>AllColumnsForPlan</name></type> <name>allColumnsSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getScanIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get all indexes for this table.
     *
     * @return the list of indexes
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Index</name></argument>&gt;</argument_list></name></type> <name>getIndexes</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Get an index by name.
     *
     * @param indexName the index name to search for
     * @return the found index
     */</comment>
    <function><type><specifier>public</specifier> <name>Index</name></type> <name>getIndex</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>indexName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Index</name></argument>&gt;</argument_list></name></type> <name>indexes</name> <init>= <expr><call><name>getIndexes</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>indexes</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Index</name></type> <name>index</name> <range>: <expr><name>indexes</name></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>index</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>indexName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name>index</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>INDEX_NOT_FOUND_1</name></name></expr></argument>, <argument><expr><name>indexName</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check if this table is locked exclusively.
     *
     * @return true if it is.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isLockedExclusively</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the last data modification id.
     *
     * @return the modification id
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>long</name></type> <name>getMaxDataModificationId</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Check if the table is deterministic.
     *
     * @return true if it is
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>isDeterministic</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Check if the row count can be retrieved quickly.
     *
     * @param session the session
     * @return true if it can
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>canGetRowCount</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Check if this table can be referenced.
     *
     * @return true if it can
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>canReference</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check if this table can be dropped.
     *
     * @return true if it can
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>canDrop</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Get the row count for this table.
     *
     * @param session the session
     * @return the row count
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>long</name></type> <name>getRowCount</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Get the approximated row count for this table.
     *
     * @param session the session
     * @return the approximated row count
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>long</name></type> <name>getRowCountApproximation</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list>;</function_decl>

    <function><type><specifier>public</specifier> <name>long</name></type> <name>getDiskSpaceUsed</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="number">0L</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the row id column if this table has one.
     *
     * @return the row id column, or null
     */</comment>
    <function><type><specifier>public</specifier> <name>Column</name></type> <name>getRowIdColumn</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getCreateSQLForCopy</name><parameter_list>(<parameter><decl><type><name>Table</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>quotedName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>(<argument><expr><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check whether the table (or view) contains no columns that prevent index
     * conditions to be used. For example, a view that contains the ROWNUM()
     * pseudo-column prevents this.
     *
     * @return true if the table contains no query-comparable column
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isQueryComparable</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Add all objects that this table depends on to the hash set.
     *
     * @param dependencies the current set of dependencies
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addDependencies</name><parameter_list>(<parameter><decl><type><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>DbObject</name></argument>&gt;</argument_list></name></type> <name>dependencies</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>dependencies</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// avoid endless recursion</comment>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>sequences</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>dependencies</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>sequences</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>ExpressionVisitor</name></type> <name>visitor</name> <init>= <expr><call><name><name>ExpressionVisitor</name><operator>.</operator><name>getDependenciesVisitor</name></name><argument_list>(
                <argument><expr><name>dependencies</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Column</name></type> <name>col</name> <range>: <expr><name>columns</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>col</name><operator>.</operator><name>isEverything</name></name><argument_list>(<argument><expr><name>visitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><name>constraints</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Constraint</name></type> <name>c</name> <range>: <expr><name>constraints</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>isEverything</name></name><argument_list>(<argument><expr><name>visitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>dependencies</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>DbObject</name></argument>&gt;</argument_list></name></type> <name>getChildren</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>DbObject</name></argument>&gt;</argument_list></name></type> <name>children</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Index</name></argument>&gt;</argument_list></name></type> <name>indexes</name> <init>= <expr><call><name>getIndexes</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>indexes</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>children</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>indexes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>constraints</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>children</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>constraints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>triggers</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>children</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>triggers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>sequences</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>children</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>sequences</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>children</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>dependentViews</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>synonyms</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>children</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>synonyms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Right</name></argument>&gt;</argument_list></name></type> <name>rights</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getAllRights</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Right</name></type> <name>right</name> <range>: <expr><name>rights</name></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>right</name><operator>.</operator><name>getGrantedObject</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>this</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>children</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>children</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setColumns</name><parameter_list>(<parameter><decl><type><name><name>Column</name><index>[]</index></name></type> <name>columns</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>columns</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <name><name>Constants</name><operator>.</operator><name>MAX_COLUMNS</name></name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>TOO_MANY_COLUMNS_1</name></name></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name><name>Constants</name><operator>.</operator><name>MAX_COLUMNS</name></name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>columns</name></name> <operator>=</operator> <name>columns</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>columnMap</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>columnMap</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>columns</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Column</name></type> <name>col</name> <init>= <expr><name><name>columns</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>dataType</name> <init>= <expr><call><name><name>col</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValueType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>dataType</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>UNKNOWN</name></name></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>UNKNOWN_DATA_TYPE_1</name></name></expr></argument>, <argument><expr><call><name><name>col</name><operator>.</operator><name>getTraceSQL</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>col</name><operator>.</operator><name>setTable</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>columnName</name> <init>= <expr><call><name><name>col</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>columnMap</name><operator>.</operator><name>putIfAbsent</name></name><argument_list>(<argument><expr><name>columnName</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>DUPLICATE_COLUMN_NAME_1</name></name></expr></argument>, <argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>rowFactory</name> <operator>=</operator> <call><name><name>database</name><operator>.</operator><name>getRowFactory</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>createRowFactory</name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><call><name><name>database</name><operator>.</operator><name>getCompareMode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>columns</name></expr></argument>,
                <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Rename a column of this table.
     *
     * @param column the column to rename
     * @param newName the new column name
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>renameColumn</name><parameter_list>(<parameter><decl><type><name>Column</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>newName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>Column</name></type> <name>c</name> <range>: <expr><name>columns</name></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>column</name></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>c</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>newName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(
                        <argument><expr><name><name>ErrorCode</name><operator>.</operator><name>DUPLICATE_COLUMN_NAME_1</name></name></expr></argument>, <argument><expr><name>newName</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>columnMap</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>column</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>column</name><operator>.</operator><name>rename</name></name><argument_list>(<argument><expr><name>newName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>columnMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>newName</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check if the table is exclusively locked by this session.
     *
     * @param session the session
     * @return true if it is
     */</comment>
    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unused"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isLockedExclusivelyBy</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Update a list of rows in this table.
     *
     * @param prepared the prepared statement
     * @param session the session
     * @param rows a list of row pairs of the form old row, new row, old row,
     *            new row,...
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>updateRows</name><parameter_list>(<parameter><decl><type><name>Prepared</name></type> <name>prepared</name></decl></parameter>, <parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>LocalResult</name></type> <name>rows</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// in case we need to undo the update</comment>
        <decl_stmt><decl><type><name><name>SessionLocal</name><operator>.</operator><name>Savepoint</name></name></type> <name>rollback</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>setSavepoint</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// remove the old rows</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>rowScanCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>rows</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>++</operator><name>rowScanCount</name> <operator>&amp;</operator> <literal type="number">127</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>prepared</name><operator>.</operator><name>checkCanceled</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>Row</name></type> <name>o</name> <init>= <expr><call><name><name>rows</name><operator>.</operator><name>currentRowForTable</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>rows</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name>removeRow</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>DbException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>e</name><operator>.</operator><name>getErrorCode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ErrorCode</name><operator>.</operator><name>CONCURRENT_UPDATE_1</name></name>
                        <operator>||</operator> <call><name><name>e</name><operator>.</operator><name>getErrorCode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ErrorCode</name><operator>.</operator><name>ROW_NOT_FOUND_WHEN_DELETING_1</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>rollbackTo</name></name><argument_list>(<argument><expr><name>rollback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <throw>throw <expr><name>e</name></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></while>
        <comment type="line">// add the new rows</comment>
        <expr_stmt><expr><call><name><name>rows</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><call><name><name>rows</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>++</operator><name>rowScanCount</name> <operator>&amp;</operator> <literal type="number">127</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>prepared</name><operator>.</operator><name>checkCanceled</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>rows</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Row</name></type> <name>n</name> <init>= <expr><call><name><name>rows</name><operator>.</operator><name>currentRowForTable</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name>addRow</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>DbException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>e</name><operator>.</operator><name>getErrorCode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ErrorCode</name><operator>.</operator><name>CONCURRENT_UPDATE_1</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>rollbackTo</name></name><argument_list>(<argument><expr><name>rollback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <throw>throw <expr><name>e</name></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></while>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>CopyOnWriteArrayList</name><argument_list type="generic">&lt;<argument><name>TableView</name></argument>&gt;</argument_list></name></type> <name>getDependentViews</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>dependentViews</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>removeChildrenAndResources</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <while>while <condition>(<expr><operator>!</operator><call><name><name>dependentViews</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>TableView</name></type> <name>view</name> <init>= <expr><call><name><name>dependentViews</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>dependentViews</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>removeSchemaObject</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <while>while <condition>(<expr><name>synonyms</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>synonyms</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>TableSynonym</name></type> <name>synonym</name> <init>= <expr><call><name><name>synonyms</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>removeSchemaObject</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>synonym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <while>while <condition>(<expr><name>triggers</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>triggers</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>TriggerObject</name></type> <name>trigger</name> <init>= <expr><call><name><name>triggers</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>removeSchemaObject</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>trigger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <while>while <condition>(<expr><name>constraints</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>constraints</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Constraint</name></type> <name>constraint</name> <init>= <expr><call><name><name>constraints</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>removeSchemaObject</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>constraint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <for>for <control>(<init><decl><type><name>Right</name></type> <name>right</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getAllRights</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>right</name><operator>.</operator><name>getGrantedObject</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>this</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>removeDatabaseObject</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>removeMeta</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// must delete sequences later (in case there is a power failure</comment>
        <comment type="line">// before removing the table object)</comment>
        <while>while <condition>(<expr><name>sequences</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>sequences</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Sequence</name></type> <name>sequence</name> <init>= <expr><call><name><name>sequences</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// only remove if no other table depends on this sequence</comment>
            <comment type="line">// this is possible when calling ALTER TABLE ALTER COLUMN</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>getDependentTable</name></name><argument_list>(<argument><expr><name>sequence</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>removeSchemaObject</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>sequence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check that these columns are not referenced by a multi-column constraint
     * or multi-column index. If it is, an exception is thrown. Single-column
     * references and indexes are dropped.
     *
     * @param session the session
     * @param columnsToDrop the columns to drop
     * @throws DbException if the column is referenced by multi-column
     *             constraints or indexes
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>dropMultipleColumnsConstraintsAndIndexes</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>,
            <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Column</name></argument>&gt;</argument_list></name></type> <name>columnsToDrop</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>Constraint</name></argument>&gt;</argument_list></name></type> <name>constraintsToDrop</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>constraints</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Column</name></type> <name>col</name> <range>: <expr><name>columnsToDrop</name></expr></range></decl></init>)</control> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>Constraint</name></type> <name>constraint</name> <range>: <expr><name>constraints</name></expr></range></decl></init>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>Column</name></argument>&gt;</argument_list></name></type> <name>columns</name> <init>= <expr><call><name><name>constraint</name><operator>.</operator><name>getReferencedColumns</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>columns</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <continue>continue;</continue>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name><name>columns</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>constraintsToDrop</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>constraint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>COLUMN_IS_REFERENCED_1</name></name></expr></argument>, <argument><expr><call><name><name>constraint</name><operator>.</operator><name>getTraceSQL</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>Index</name></argument>&gt;</argument_list></name></type> <name>indexesToDrop</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Index</name></argument>&gt;</argument_list></name></type> <name>indexes</name> <init>= <expr><call><name>getIndexes</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>indexes</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Column</name></type> <name>col</name> <range>: <expr><name>columnsToDrop</name></expr></range></decl></init>)</control> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>Index</name></type> <name>index</name> <range>: <expr><name>indexes</name></expr></range></decl></init>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>index</name><operator>.</operator><name>getCreateSQL</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <continue>continue;</continue>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name><name>index</name><operator>.</operator><name>getColumnIndex</name></name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <continue>continue;</continue>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name><name>index</name><operator>.</operator><name>getColumns</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>indexesToDrop</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>COLUMN_IS_REFERENCED_1</name></name></expr></argument>, <argument><expr><call><name><name>index</name><operator>.</operator><name>getTraceSQL</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <for>for <control>(<init><decl><type><name>Constraint</name></type> <name>c</name> <range>: <expr><name>constraintsToDrop</name></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>c</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>removeSchemaObject</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <for>for <control>(<init><decl><type><name>Index</name></type> <name>i</name> <range>: <expr><name>indexesToDrop</name></expr></range></decl></init>)</control> <block>{<block_content>
            <comment type="line">// the index may already have been dropped when dropping the</comment>
            <comment type="line">// constraint</comment>
            <if_stmt><if>if <condition>(<expr><call><name>getIndexes</name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>removeSchemaObject</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>RowFactory</name></type> <name>getRowFactory</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>rowFactory</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create a new row for this table.
     *
     * @param data the values
     * @param memory the estimated memory usage in bytes
     * @return the created row
     */</comment>
    <function><type><specifier>public</specifier> <name>Row</name></type> <name>createRow</name><parameter_list>(<parameter><decl><type><name><name>Value</name><index>[]</index></name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>memory</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>rowFactory</name><operator>.</operator><name>createRow</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>memory</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Row</name></type> <name>getTemplateRow</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>createRow</name><argument_list>(<argument><expr><operator>new</operator> <name><name>Value</name><index>[<expr><call><name>getColumns</name><argument_list>()</argument_list></call><operator>.</operator><name>length</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>DefaultRow</name><operator>.</operator><name>MEMORY_CALCULATE</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get a new simple row object.
     *
     * @param singleColumn if only one value need to be stored
     * @return the simple row object
     */</comment>
    <function><type><specifier>public</specifier> <name>SearchRow</name></type> <name>getTemplateSimpleRow</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>singleColumn</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>singleColumn</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>SimpleRowValue</name><argument_list>(<argument><expr><name><name>columns</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>new</operator> <call><name>DefaultRow</name><argument_list>(<argument><expr><operator>new</operator> <name><name>Value</name><index>[<expr><name><name>columns</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Row</name></type> <name>getNullRow</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Row</name></type> <name>row</name> <init>= <expr><name>nullRow</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>row</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// Here can be concurrently produced more than one row, but it must</comment>
            <comment type="line">// be ok.</comment>
            <decl_stmt><decl><type><name><name>Value</name><index>[]</index></name></type> <name>values</name> <init>= <expr><operator>new</operator> <name><name>Value</name><index>[<expr><name><name>columns</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>fill</name></name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>nullRow</name> <operator>=</operator> <name>row</name> <operator>=</operator> <call><name>createRow</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>row</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>Column</name><index>[]</index></name></type> <name>getColumns</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>columns</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>DbObject</name><operator>.</operator><name>TABLE_OR_VIEW</name></name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the column at the given index.
     *
     * @param index the column index (0, 1,...)
     * @return the column
     */</comment>
    <function><type><specifier>public</specifier> <name>Column</name></type> <name>getColumn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>columns</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the column with the given name.
     *
     * @param columnName the column name
     * @return the column
     * @throws DbException if the column was not found
     */</comment>
    <function><type><specifier>public</specifier> <name>Column</name></type> <name>getColumn</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>columnName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Column</name></type> <name>column</name> <init>= <expr><call><name><name>columnMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>column</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>COLUMN_NOT_FOUND_1</name></name></expr></argument>, <argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>column</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the column with the given name.
     *
     * @param columnName the column name
     * @param ifExists if (@code true) return {@code null} if column does not exist
     * @return the column
     * @throws DbException if the column was not found
     */</comment>
    <function><type><specifier>public</specifier> <name>Column</name></type> <name>getColumn</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>columnName</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>ifExists</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Column</name></type> <name>column</name> <init>= <expr><call><name><name>columnMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>column</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>ifExists</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>COLUMN_NOT_FOUND_1</name></name></expr></argument>, <argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>column</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the column with the given name if it exists.
     *
     * @param columnName the column name, or {@code null}
     * @return the column
     */</comment>
    <function><type><specifier>public</specifier> <name>Column</name></type> <name>findColumn</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>columnName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>columnMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Does the column with the given name exist?
     *
     * @param columnName the column name
     * @return true if the column exists
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>doesColumnExist</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>columnName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>columnMap</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns first identity column, or {@code null}.
     *
     * @return first identity column, or {@code null}
     */</comment>
    <function><type><specifier>public</specifier> <name>Column</name></type> <name>getIdentityColumn</name><parameter_list>()</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>Column</name></type> <name>column</name> <range>: <expr><name>columns</name></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>column</name><operator>.</operator><name>isIdentity</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>column</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the best plan for the given search mask.
     *
     * @param session the session
     * @param masks per-column comparison bit masks, null means 'always false',
     *              see constants in IndexCondition
     * @param filters all joined table filters
     * @param filter the current table filter index
     * @param sortOrder the sort order
     * @param allColumnsSet the set of all columns
     * @return the plan item
     */</comment>
    <function><type><specifier>public</specifier> <name>PlanItem</name></type> <name>getBestPlanItem</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>masks</name></decl></parameter>,
            <parameter><decl><type><name><name>TableFilter</name><index>[]</index></name></type> <name>filters</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filter</name></decl></parameter>, <parameter><decl><type><name>SortOrder</name></type> <name>sortOrder</name></decl></parameter>,
            <parameter><decl><type><name>AllColumnsForPlan</name></type> <name>allColumnsSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>PlanItem</name></type> <name>item</name> <init>= <expr><operator>new</operator> <call><name>PlanItem</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>setIndex</name></name><argument_list>(<argument><expr><call><name>getScanIndex</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>item</name><operator>.</operator><name>cost</name></name> <operator>=</operator> <call><name><name>item</name><operator>.</operator><name>getIndex</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCost</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>filters</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>allColumnsSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Trace</name></type> <name>t</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getTrace</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>t</name><operator>.</operator><name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Table      :     potential plan item cost {0} index {1}"</literal></expr></argument>,
                    <argument><expr><name><name>item</name><operator>.</operator><name>cost</name></name></expr></argument>, <argument><expr><call><name><name>item</name><operator>.</operator><name>getIndex</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPlanSQL</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Index</name></argument>&gt;</argument_list></name></type> <name>indexes</name> <init>= <expr><call><name>getIndexes</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>IndexHints</name></type> <name>indexHints</name> <init>= <expr><call><name>getIndexHints</name><argument_list>(<argument><expr><name>filters</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>indexes</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>masks</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>size</name> <init>= <expr><call><name><name>indexes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Index</name></type> <name>index</name> <init>= <expr><call><name><name>indexes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><call><name>isIndexExcludedByHints</name><argument_list>(<argument><expr><name>indexHints</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>

                <decl_stmt><decl><type><name>double</name></type> <name>cost</name> <init>= <expr><call><name><name>index</name><operator>.</operator><name>getCost</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>masks</name></expr></argument>, <argument><expr><name>filters</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>,
                        <argument><expr><name>sortOrder</name></expr></argument>, <argument><expr><name>allColumnsSet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>t</name><operator>.</operator><name>isDebugEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>debug</name></name><argument_list>(<argument><expr><literal type="string">"Table      :     potential plan item cost {0} index {1}"</literal></expr></argument>,
                            <argument><expr><name>cost</name></expr></argument>, <argument><expr><call><name><name>index</name><operator>.</operator><name>getPlanSQL</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>cost</name> <operator>&lt;</operator> <name><name>item</name><operator>.</operator><name>cost</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>item</name><operator>.</operator><name>cost</name></name> <operator>=</operator> <name>cost</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>setIndex</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>item</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isIndexExcludedByHints</name><parameter_list>(<parameter><decl><type><name>IndexHints</name></type> <name>indexHints</name></decl></parameter>, <parameter><decl><type><name>Index</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name>indexHints</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>indexHints</name><operator>.</operator><name>allowIndex</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>IndexHints</name></type> <name>getIndexHints</name><parameter_list>(<parameter><decl><type><name><name>TableFilter</name><index>[]</index></name></type> <name>filters</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filter</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>filters</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><name><name>filters</name><index>[<expr><name>filter</name></expr>]</index></name><operator>.</operator><call><name>getIndexHints</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the primary key index if there is one, or null if there is none.
     *
     * @return the primary key index or null
     */</comment>
    <function><type><specifier>public</specifier> <name>Index</name></type> <name>findPrimaryKey</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Index</name></argument>&gt;</argument_list></name></type> <name>indexes</name> <init>= <expr><call><name>getIndexes</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>indexes</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Index</name></type> <name>idx</name> <range>: <expr><name>indexes</name></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>idx</name><operator>.</operator><name>getIndexType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isPrimaryKey</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name>idx</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Index</name></type> <name>getPrimaryKey</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Index</name></type> <name>index</name> <init>= <expr><call><name>findPrimaryKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>index</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>index</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>INDEX_NOT_FOUND_1</name></name></expr></argument>,
                <argument><expr><name><name>Constants</name><operator>.</operator><name>PREFIX_PRIMARY_KEY</name></name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Prepares the specified row for INSERT operation.
     *
     * Identity, default, and generated values are evaluated, all values are
     * converted to target data types and validated. Base value of identity
     * column is updated when required by compatibility mode.
     *
     * @param session the session
     * @param overridingSystem
     *            {@link Boolean#TRUE} for {@code OVERRIDING SYSTEM VALUES},
     *            {@link Boolean#FALSE} for {@code OVERRIDING USER VALUES},
     *            {@code null} if override clause is not specified
     * @param row the row
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>convertInsertRow</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Row</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>Boolean</name></type> <name>overridingSystem</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><name><name>columns</name><operator>.</operator><name>length</name></name></expr></init></decl>, <decl><type ref="prev"/><name>generated</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Value</name></type> <name>value</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Column</name></type> <name>column</name> <init>= <expr><name><name>columns</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name> <operator>&amp;&amp;</operator> <call><name><name>column</name><operator>.</operator><name>isDefaultOnNull</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>column</name><operator>.</operator><name>isIdentity</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>overridingSystem</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>overridingSystem</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>value</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>column</name><operator>.</operator><name>isGeneratedAlways</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>GENERATED_COLUMN_CANNOT_BE_ASSIGNED_1</name></name></expr></argument>,
                            <argument><expr><call><name><name>column</name><operator>.</operator><name>getSQLWithTable</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>TRACE_SQL_FLAGS</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>column</name><operator>.</operator><name>isGeneratedAlways</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>value</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>GENERATED_COLUMN_CANNOT_BE_ASSIGNED_1</name></name></expr></argument>,
                            <argument><expr><call><name><name>column</name><operator>.</operator><name>getSQLWithTable</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>TRACE_SQL_FLAGS</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>generated</name><operator>++</operator></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>Value</name></type> <name>v2</name> <init>= <expr><call><name><name>column</name><operator>.</operator><name>validateConvertUpdateSequence</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>v2</name> <operator>!=</operator> <name>value</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>row</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><name>generated</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Value</name></type> <name>value</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>row</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>columns</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>validateConvertUpdateSequence</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Prepares the specified row for UPDATE operation.
     *
     * Default and generated values are evaluated, all values are converted to
     * target data types and validated. Base value of identity column is updated
     * when required by compatibility mode.
     *
     * @param session the session
     * @param row the row
     * @param fromTrigger {@code true} if row was modified by INSERT or UPDATE trigger
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>convertUpdateRow</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Row</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>fromTrigger</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><name><name>columns</name><operator>.</operator><name>length</name></name></expr></init></decl>, <decl><type ref="prev"/><name>generated</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Value</name></type> <name>value</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Column</name></type> <name>column</name> <init>= <expr><name><name>columns</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>column</name><operator>.</operator><name>isGenerated</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>value</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fromTrigger</name></expr>)</condition> <block>{<block_content>
                        <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>GENERATED_COLUMN_CANNOT_BE_ASSIGNED_1</name></name></expr></argument>,
                                <argument><expr><call><name><name>column</name><operator>.</operator><name>getSQLWithTable</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>TRACE_SQL_FLAGS</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>row</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>generated</name><operator>++</operator></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>Value</name></type> <name>v2</name> <init>= <expr><call><name><name>column</name><operator>.</operator><name>validateConvertUpdateSequence</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>v2</name> <operator>!=</operator> <name>value</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>row</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><name>generated</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Value</name></type> <name>value</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>row</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>columns</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>validateConvertUpdateSequence</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>remove</name><parameter_list>(<parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>DbObject</name></extends></argument>&gt;</argument_list></name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>DbObject</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>list</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Remove the given index from the list.
     *
     * @param index the index to remove
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeIndex</name><parameter_list>(<parameter><decl><type><name>Index</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Index</name></argument>&gt;</argument_list></name></type> <name>indexes</name> <init>= <expr><call><name>getIndexes</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>indexes</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>remove</name><argument_list>(<argument><expr><name>indexes</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>index</name><operator>.</operator><name>getIndexType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isPrimaryKey</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>Column</name></type> <name>col</name> <range>: <expr><call><name><name>index</name><operator>.</operator><name>getColumns</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>col</name><operator>.</operator><name>setPrimaryKey</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Remove the given view from the dependent views list.
     *
     * @param view the view to remove
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeDependentView</name><parameter_list>(<parameter><decl><type><name>TableView</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>dependentViews</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Remove the given view from the list.
     *
     * @param synonym the synonym to remove
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeSynonym</name><parameter_list>(<parameter><decl><type><name>TableSynonym</name></type> <name>synonym</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>remove</name><argument_list>(<argument><expr><name>synonyms</name></expr></argument>, <argument><expr><name>synonym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Remove the given constraint from the list.
     *
     * @param constraint the constraint to remove
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeConstraint</name><parameter_list>(<parameter><decl><type><name>Constraint</name></type> <name>constraint</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>remove</name><argument_list>(<argument><expr><name>constraints</name></expr></argument>, <argument><expr><name>constraint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Remove a sequence from the table. Sequences are used as identity columns.
     *
     * @param sequence the sequence to remove
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>removeSequence</name><parameter_list>(<parameter><decl><type><name>Sequence</name></type> <name>sequence</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>remove</name><argument_list>(<argument><expr><name>sequences</name></expr></argument>, <argument><expr><name>sequence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Remove the given trigger from the list.
     *
     * @param trigger the trigger to remove
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeTrigger</name><parameter_list>(<parameter><decl><type><name>TriggerObject</name></type> <name>trigger</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>remove</name><argument_list>(<argument><expr><name>triggers</name></expr></argument>, <argument><expr><name>trigger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Add a view to this table.
     *
     * @param view the view to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addDependentView</name><parameter_list>(<parameter><decl><type><name>TableView</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>dependentViews</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Add a synonym to this table.
     *
     * @param synonym the synonym to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addSynonym</name><parameter_list>(<parameter><decl><type><name>TableSynonym</name></type> <name>synonym</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>synonyms</name> <operator>=</operator> <call><name>add</name><argument_list>(<argument><expr><name>synonyms</name></expr></argument>, <argument><expr><name>synonym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Add a constraint to the table.
     *
     * @param constraint the constraint to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addConstraint</name><parameter_list>(<parameter><decl><type><name>Constraint</name></type> <name>constraint</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>constraints</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><call><name><name>constraints</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>constraint</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>constraints</name> <operator>=</operator> <call><name>add</name><argument_list>(<argument><expr><name>constraints</name></expr></argument>, <argument><expr><name>constraint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Constraint</name></argument>&gt;</argument_list></name></type> <name>getConstraints</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>constraints</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Add a sequence to this table.
     *
     * @param sequence the sequence to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addSequence</name><parameter_list>(<parameter><decl><type><name>Sequence</name></type> <name>sequence</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>sequences</name> <operator>=</operator> <call><name>add</name><argument_list>(<argument><expr><name>sequences</name></expr></argument>, <argument><expr><name>sequence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Add a trigger to this table.
     *
     * @param trigger the trigger to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addTrigger</name><parameter_list>(<parameter><decl><type><name>TriggerObject</name></type> <name>trigger</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>triggers</name> <operator>=</operator> <call><name>add</name><argument_list>(<argument><expr><name>triggers</name></expr></argument>, <argument><expr><name>trigger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>add</name><parameter_list>(<parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>list</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>list</name> <operator>=</operator> <call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// self constraints are two entries in the list</comment>
        <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>list</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Fire the triggers for this table.
     *
     * @param session the session
     * @param type the trigger type
     * @param beforeAction whether 'before' triggers should be called
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>fire</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>beforeAction</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>triggers</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>TriggerObject</name></type> <name>trigger</name> <range>: <expr><name>triggers</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>trigger</name><operator>.</operator><name>fire</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>beforeAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check whether this table has a select trigger.
     *
     * @return true if it has
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasSelectTrigger</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>triggers</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>TriggerObject</name></type> <name>trigger</name> <range>: <expr><name>triggers</name></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>trigger</name><operator>.</operator><name>isSelectTrigger</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check if row based triggers or constraints are defined.
     * In this case the fire after and before row methods need to be called.
     *
     *  @return if there are any triggers or rows defined
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>fireRow</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>constraints</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>constraints</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>||</operator>
                <operator>(</operator><name>triggers</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>triggers</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Fire all triggers that need to be called before a row is updated.
     *
     * @param session the session
     * @param oldRow the old data or null for an insert
     * @param newRow the new data or null for a delete
     * @return true if no further action is required (for 'instead of' triggers)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>fireBeforeRow</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Row</name></type> <name>oldRow</name></decl></parameter>, <parameter><decl><type><name>Row</name></type> <name>newRow</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>done</name> <init>= <expr><call><name>fireRow</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>oldRow</name></expr></argument>, <argument><expr><name>newRow</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>fireConstraints</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>oldRow</name></expr></argument>, <argument><expr><name>newRow</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>done</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>fireConstraints</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Row</name></type> <name>oldRow</name></decl></parameter>, <parameter><decl><type><name>Row</name></type> <name>newRow</name></decl></parameter>,
            <parameter><decl><type><name>boolean</name></type> <name>before</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>constraints</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Constraint</name></type> <name>constraint</name> <range>: <expr><name>constraints</name></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>constraint</name><operator>.</operator><name>isBefore</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>before</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>constraint</name><operator>.</operator><name>checkRow</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>oldRow</name></expr></argument>, <argument><expr><name>newRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Fire all triggers that need to be called after a row is updated.
     *
     *  @param session the session
     *  @param oldRow the old data or null for an insert
     *  @param newRow the new data or null for a delete
     *  @param rollback when the operation occurred within a rollback
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>fireAfterRow</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Row</name></type> <name>oldRow</name></decl></parameter>, <parameter><decl><type><name>Row</name></type> <name>newRow</name></decl></parameter>,
            <parameter><decl><type><name>boolean</name></type> <name>rollback</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>fireRow</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>oldRow</name></expr></argument>, <argument><expr><name>newRow</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>rollback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rollback</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>fireConstraints</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>oldRow</name></expr></argument>, <argument><expr><name>newRow</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>fireRow</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Row</name></type> <name>oldRow</name></decl></parameter>, <parameter><decl><type><name>Row</name></type> <name>newRow</name></decl></parameter>,
            <parameter><decl><type><name>boolean</name></type> <name>beforeAction</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>rollback</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>triggers</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>TriggerObject</name></type> <name>trigger</name> <range>: <expr><name>triggers</name></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>boolean</name></type> <name>done</name> <init>= <expr><call><name><name>trigger</name><operator>.</operator><name>fireRow</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>oldRow</name></expr></argument>, <argument><expr><name>newRow</name></expr></argument>, <argument><expr><name>beforeAction</name></expr></argument>, <argument><expr><name>rollback</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>done</name></expr>)</condition> <block>{<block_content>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isGlobalTemporary</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check if this table can be truncated.
     *
     * @return true if it can
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>canTruncate</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Enable or disable foreign key constraint checking for this table.
     *
     * @param session the session
     * @param enabled true if checking should be enabled
     * @param checkExisting true if existing rows must be checked during this
     *            call
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCheckForeignKeyConstraints</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>enabled</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>checkExisting</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>enabled</name> <operator>&amp;&amp;</operator> <name>checkExisting</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>constraints</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>Constraint</name></type> <name>c</name> <range>: <expr><name>constraints</name></expr></range></decl></init>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>c</name><operator>.</operator><name>getConstraintType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Type</name><operator>.</operator><name>REFERENTIAL</name></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>checkExistingData</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>checkForeignKeyConstraints</name> <operator>=</operator> <name>enabled</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return is foreign key constraint checking enabled for this table.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getCheckForeignKeyConstraints</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>checkForeignKeyConstraints</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the index that has the given column as the first element.
     * This method returns null if no matching index is found.
     *
     * @param column the column
     * @param needGetFirstOrLast if the returned index must be able
     *          to do {@link Index#canGetFirstOrLast()}
     * @param needFindNext if the returned index must be able to do
     *          {@link Index#findNext(SessionLocal, SearchRow, SearchRow)}
     * @return the index or null
     */</comment>
    <function><type><specifier>public</specifier> <name>Index</name></type> <name>getIndexForColumn</name><parameter_list>(<parameter><decl><type><name>Column</name></type> <name>column</name></decl></parameter>,
            <parameter><decl><type><name>boolean</name></type> <name>needGetFirstOrLast</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>needFindNext</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Index</name></argument>&gt;</argument_list></name></type> <name>indexes</name> <init>= <expr><call><name>getIndexes</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Index</name></type> <name>result</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>indexes</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>size</name> <init>= <expr><call><name><name>indexes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Index</name></type> <name>index</name> <init>= <expr><call><name><name>indexes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>needGetFirstOrLast</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>index</name><operator>.</operator><name>canGetFirstOrLast</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>needFindNext</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>index</name><operator>.</operator><name>canFindNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <comment type="line">// choose the minimal covering index with the needed first</comment>
                <comment type="line">// column to work consistently with execution plan from</comment>
                <comment type="line">// Optimizer</comment>
                <if_stmt><if>if <condition>(<expr><call><name><name>index</name><operator>.</operator><name>isFirstColumn</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>result</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator>
                        <call><name><name>result</name><operator>.</operator><name>getColumns</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name> <operator>&gt;</operator> <call><name><name>index</name><operator>.</operator><name>getColumns</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>result</name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getOnCommitDrop</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>onCommitDrop</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOnCommitDrop</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>onCommitDrop</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>onCommitDrop</name></name> <operator>=</operator> <name>onCommitDrop</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getOnCommitTruncate</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>onCommitTruncate</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOnCommitTruncate</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>onCommitTruncate</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>onCommitTruncate</name></name> <operator>=</operator> <name>onCommitTruncate</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * If the index is still required by a constraint, transfer the ownership to
     * it. Otherwise, the index is removed.
     *
     * @param session the session
     * @param index the index that is no longer required
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeIndexOrTransferOwnership</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Index</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>stillNeeded</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>constraints</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Constraint</name></type> <name>cons</name> <range>: <expr><name>constraints</name></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>cons</name><operator>.</operator><name>usesIndex</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>cons</name><operator>.</operator><name>setIndexOwner</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>updateMeta</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>cons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>stillNeeded</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>stillNeeded</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>removeSchemaObject</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Removes dependencies of column expressions, used for tables with circular
     * dependencies.
     *
     * @param session the session
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeColumnExpressionsDependencies</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>Column</name></type> <name>column</name> <range>: <expr><name>columns</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>column</name><operator>.</operator><name>setDefaultExpression</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>column</name><operator>.</operator><name>setOnUpdateExpression</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check if a deadlock occurred. This method is called recursively. There is
     * a circle if the session to be tested has already being visited. If this
     * session is part of the circle (if it is the clash session), the method
     * must return an empty object array. Once a deadlock has been detected, the
     * methods must add the session to the list. If this session is not part of
     * the circle, or if no deadlock is detected, this method returns null.
     *
     * @param session the session to be tested for
     * @param clash set with sessions already visited, and null when starting
     *            verification
     * @param visited set with sessions already visited, and null when starting
     *            verification
     * @return an object array with the sessions involved in the deadlock, or
     *         null
     */</comment>
    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unused"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>public</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>SessionLocal</name></argument>&gt;</argument_list></name></type> <name>checkDeadlock</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>SessionLocal</name></type> <name>clash</name></decl></parameter>,
            <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>SessionLocal</name></argument>&gt;</argument_list></name></type> <name>visited</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isPersistIndexes</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>persistIndexes</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isPersistData</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>persistData</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Compare two values with the current comparison mode. The values may be of
     * different type.
     *
     * @param provider the cast information provider
     * @param a the first value
     * @param b the second value
     * @return 0 if both values are equal, -1 if the first value is smaller, and
     *         1 otherwise
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>compareValues</name><parameter_list>(<parameter><decl><type><name>CastDataProvider</name></type> <name>provider</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>a</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>provider</name></expr></argument>, <argument><expr><name>compareMode</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>CompareMode</name></type> <name>getCompareMode</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>compareMode</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Tests if the table can be written. Usually, this depends on the
     * database.checkWritingAllowed method, but some tables (eg. TableLink)
     * overwrite this default behaviour.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>checkWritingAllowed</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>checkWritingAllowed</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isHidden</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>isHidden</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setHidden</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>hidden</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isHidden</name></name> <operator>=</operator> <name>hidden</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Views, function tables, links, etc. do not support locks
     * @return true if table supports row-level locks
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isRowLockable</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTableExpression</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>tableExpression</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tableExpression</name></name> <operator>=</operator> <name>tableExpression</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isTableExpression</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>tableExpression</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Return list of triggers.
     *
     * @return list of triggers
     */</comment>
    <function><type><specifier>public</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>TriggerObject</name></argument>&gt;</argument_list></name></type> <name>getTriggers</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>triggers</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns ID of main index column, or {@link SearchRow#ROWID_INDEX}.
     *
     * @return ID of main index column, or {@link SearchRow#ROWID_INDEX}
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getMainIndexColumn</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>SearchRow</name><operator>.</operator><name>ROWID_INDEX</name></name></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>
