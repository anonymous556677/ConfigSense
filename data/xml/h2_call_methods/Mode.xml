<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/engine/Mode.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Types</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Pattern</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>StringUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>DataType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>Value</name></name>;</import>

<comment type="block" format="javadoc">/**
 * The compatibility modes. There is a fixed set of modes (for example
 * PostgreSQL, MySQL). Each mode has different settings.
 */</comment>
<class><specifier>public</specifier> class <name>Mode</name> <block>{

    <enum><specifier>public</specifier> enum <name>ModeEnum</name> <block>{
        <decl><name>REGULAR</name></decl>, <decl><name>STRICT</name></decl>, <decl><name>LEGACY</name></decl>, <decl><name>DB2</name></decl>, <decl><name>Derby</name></decl>, <decl><name>MariaDB</name></decl>, <decl><name>MSSQLServer</name></decl>, <decl><name>HSQLDB</name></decl>, <decl><name>MySQL</name></decl>, <decl><name>Oracle</name></decl>, <decl><name>PostgreSQL</name></decl>
    }</block></enum>

    <comment type="block" format="javadoc">/**
     * Determines how rows with {@code NULL} values in indexed columns are handled
     * in unique indexes.
     */</comment>
    <enum><specifier>public</specifier> enum <name>UniqueIndexNullsHandling</name> <block>{
        <comment type="block" format="javadoc">/**
         * Multiple rows with identical values in indexed columns with at least one
         * indexed {@code NULL} value are allowed in unique index.
         */</comment>
        <decl><name>ALLOW_DUPLICATES_WITH_ANY_NULL</name></decl>,

        <comment type="block" format="javadoc">/**
         * Multiple rows with identical values in indexed columns with all indexed
         * {@code NULL} values are allowed in unique index.
         */</comment>
        <decl><name>ALLOW_DUPLICATES_WITH_ALL_NULLS</name></decl>,

        <comment type="block" format="javadoc">/**
         * Multiple rows with identical values in indexed columns are not allowed in
         * unique index.
         */</comment>
        <decl><name>FORBID_ANY_DUPLICATES</name></decl>
    }</block></enum>

    <comment type="block" format="javadoc">/**
     * Generation of column names for expressions.
     */</comment>
    <enum><specifier>public</specifier> enum <name>ExpressionNames</name> <block>{
        <comment type="block" format="javadoc">/**
         * Use optimized SQL representation of expression.
         */</comment>
        <decl><name>OPTIMIZED_SQL</name></decl>,

        <comment type="block" format="javadoc">/**
         * Use original SQL representation of expression.
         */</comment>
        <decl><name>ORIGINAL_SQL</name></decl>,

        <comment type="block" format="javadoc">/**
         * Generate empty name.
         */</comment>
        <decl><name>EMPTY</name></decl>,

        <comment type="block" format="javadoc">/**
         * Use ordinal number of a column.
         */</comment>
        <decl><name>NUMBER</name></decl>,

        <comment type="block" format="javadoc">/**
         * Use ordinal number of a column with C prefix.
         */</comment>
        <decl><name>C_NUMBER</name></decl>,

        <comment type="block" format="javadoc">/**
         * Use function name for functions and ?column? for other expressions
         */</comment>
        <decl><name>POSTGRESQL_STYLE</name></decl>,
    }</block></enum>

    <comment type="block" format="javadoc">/**
     * Generation of column names for expressions to be used in a view.
     */</comment>
    <enum><specifier>public</specifier> enum <name>ViewExpressionNames</name> <block>{
        <comment type="block" format="javadoc">/**
         * Use both specified and generated names as is.
         */</comment>
        <decl><name>AS_IS</name></decl>,

        <comment type="block" format="javadoc">/**
         * Throw exception for unspecified names.
         */</comment>
        <decl><name>EXCEPTION</name></decl>,

        <comment type="block" format="javadoc">/**
         * Use both specified and generated names as is, but replace too long
         * generated names with {@code Name_exp_###}.
         */</comment>
        <decl><name>MYSQL_STYLE</name></decl>,
    }</block></enum>

    <comment type="block" format="javadoc">/**
     * When CHAR values are right-padded with spaces.
     */</comment>
    <enum><specifier>public</specifier> enum <name>CharPadding</name> <block>{
        <comment type="block" format="javadoc">/**
         * CHAR values are always right-padded with spaces.
         */</comment>
        <decl><name>ALWAYS</name></decl>,

        <comment type="block" format="javadoc">/**
         * Spaces are trimmed from the right side of CHAR values, but CHAR
         * values in result sets are right-padded with spaces to the declared
         * length
         */</comment>
        <decl><name>IN_RESULT_SETS</name></decl>,

        <comment type="block" format="javadoc">/**
         * Spaces are trimmed from the right side of CHAR values.
         */</comment>
        <decl><name>NEVER</name></decl>
    }</block></enum>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Mode</name></argument>&gt;</argument_list></name></type> <name>MODES</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Modes are also documented in the features section</comment>

    <comment type="block" format="javadoc">/**
     * When enabled, aliased columns (as in SELECT ID AS I FROM TEST) return the
     * alias (I in this case) in ResultSetMetaData.getColumnName() and 'null' in
     * getTableName(). If disabled, the real column name (ID in this case) and
     * table name is returned.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>aliasColumnName</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * When converting the scale of decimal data, the number is only converted
     * if the new scale is smaller than the current scale. Usually, the scale is
     * converted and 0s are added if required.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>convertOnlyToSmallerScale</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Creating indexes in the CREATE TABLE statement is allowed using
     * &lt;code&gt;INDEX(..)&lt;/code&gt; or &lt;code&gt;KEY(..)&lt;/code&gt;.
     * Example: &lt;code&gt;create table test(id int primary key, name varchar(255),
     * key idx_name(name));&lt;/code&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>indexDefinitionInCreateTable</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Identifiers may be quoted using square brackets as in [Test].
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>squareBracketQuotedNames</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The system columns 'ctid' and 'oid' are supported.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>systemColumns</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Determines how rows with {@code NULL} values in indexed columns are handled
     * in unique indexes.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>UniqueIndexNullsHandling</name></type> <name>uniqueIndexNullsHandling</name> <init>= <expr><name><name>UniqueIndexNullsHandling</name><operator>.</operator><name>ALLOW_DUPLICATES_WITH_ANY_NULL</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Empty strings are treated like NULL values. Useful for Oracle emulation.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>treatEmptyStringsAsNull</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Support the pseudo-table SYSIBM.SYSDUMMY1.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>sysDummy1</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Text can be concatenated using '+'.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>allowPlusForStringConcat</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The single-argument function LOG() uses base 10 instead of E.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>logIsLogBase10</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Swap the parameters of LOG() function.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>swapLogFunctionParameters</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The function REGEXP_REPLACE() uses \ for back-references.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>regexpReplaceBackslashReferences</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Swap the parameters of the CONVERT function.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>swapConvertFunctionParameters</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * can set the isolation level using WITH {RR|RS|CS|UR}
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>isolationLevelInSelectOrInsertStatement</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * MySQL style INSERT ... ON DUPLICATE KEY UPDATE ... and INSERT IGNORE.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>onDuplicateKeyUpdate</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * MySQL style REPLACE INTO.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>replaceInto</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * PostgreSQL style INSERT ... ON CONFLICT DO NOTHING.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>insertOnConflict</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Pattern describing the keys the java.sql.Connection.setClientInfo()
     * method accepts.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>Pattern</name></type> <name>supportedClientInfoPropertiesRegEx</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Support the # for column names
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>supportPoundSymbolForColumnNames</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Whether IN predicate may have an empty value list.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>allowEmptyInPredicate</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * How to pad or trim CHAR values.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>CharPadding</name></type> <name>charPadding</name> <init>= <expr><name><name>CharPadding</name><operator>.</operator><name>ALWAYS</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Whether DB2 TIMESTAMP formats are allowed.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>allowDB2TimestampFormat</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Discard SQLServer table hints (e.g. "SELECT * FROM table WITH (NOLOCK)")
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>discardWithTableHints</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * If {@code true}, datetime value function return the same value within a
     * transaction, if {@code false} datetime value functions return the same
     * value within a command.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>dateTimeValueWithinTransaction</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * If {@code true} {@code 0x}-prefixed numbers are parsed as binary string
     * literals, if {@code false} they are parsed as hexadecimal numeric values.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>zeroExLiteralsAreBinaryStrings</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * If {@code true} unrelated ORDER BY expression are allowed in DISTINCT
     * queries, if {@code false} they are disallowed.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>allowUnrelatedOrderByExpressionsInDistinctQueries</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * If {@code true} some additional non-standard ALTER TABLE commands are allowed.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>alterTableExtensionsMySQL</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * If {@code true} non-standard ALTER TABLE MODIFY COLUMN is allowed.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>alterTableModifyColumn</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * If {@code true} TRUNCATE TABLE uses RESTART IDENTITY by default.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>truncateTableRestartIdentity</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * If {@code true} NEXT VALUE FOR SEQUENCE, CURRENT VALUE FOR SEQUENCE,
     * SEQUENCE.NEXTVAL, and SEQUENCE.CURRVAL return values with DECIMAL/NUMERIC
     * data type instead of BIGINT.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>decimalSequences</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * If {@code true} constructs like 'CREATE TABLE CATALOG..TABLE_NAME' are allowed,
     * the default schema is used.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>allowEmptySchemaValuesAsDefaultSchema</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * If {@code true} all numeric data types may have precision and 'UNSIGNED'
     * clause.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>allNumericTypesHavePrecision</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * If {@code true} 'FOR BIT DATA' clauses are allowed for character string
     * data types.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>forBitData</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * If {@code true} 'CHAR' and 'BYTE' length units are allowed.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>charAndByteLengthUnits</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * If {@code true}, sequence.NEXTVAL and sequence.CURRVAL pseudo columns are
     * supported.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>nextvalAndCurrvalPseudoColumns</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * If {@code true}, the next value expression returns different values when
     * invoked multiple times within a row. This setting does not affect
     * NEXTVAL() function.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>nextValueReturnsDifferentValues</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * If {@code true}, sequences of generated by default identity columns are
     * updated when value is provided by user.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>updateSequenceOnManualIdentityInsertion</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * If {@code true}, last identity of the session is updated on insertion of
     * a new value into identity column.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>takeInsertedIdentity</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * If {@code true}, last identity of the session is updated on generation of
     * a new sequence value.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>takeGeneratedSequenceValue</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * If {@code true}, identity columns have DEFAULT ON NULL clause.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>identityColumnsHaveDefaultOnNull</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * If {@code true}, merge when matched clause may have WHERE clause.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>mergeWhere</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * If {@code true}, allow using from clause in update statement.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>allowUsingFromClauseInUpdateStatement</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * If {@code true}, referential constraints will create a unique constraint
     * on referenced columns if it doesn't exist instead of throwing an
     * exception.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>createUniqueConstraintForReferencedColumns</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * How column names are generated for expressions.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>ExpressionNames</name></type> <name>expressionNames</name> <init>= <expr><name><name>ExpressionNames</name><operator>.</operator><name>OPTIMIZED_SQL</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * How column names are generated for views.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>ViewExpressionNames</name></type> <name>viewExpressionNames</name> <init>= <expr><name><name>ViewExpressionNames</name><operator>.</operator><name>AS_IS</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Whether TOP clause in SELECT queries is supported.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>topInSelect</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Whether TOP clause in DML commands is supported.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>topInDML</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Whether LIMIT / OFFSET clauses are supported.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>limit</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Whether MINUS can be used as EXCEPT.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>minusIsExcept</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Whether IDENTITY pseudo data type is supported.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>identityDataType</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Whether SERIAL and BIGSERIAL pseudo data types are supported.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>serialDataTypes</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Whether SQL Server-style IDENTITY clause is supported.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>identityClause</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Whether MySQL-style AUTO_INCREMENT clause is supported.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>autoIncrementClause</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * An optional Set of hidden/disallowed column types.
     * Certain DBMSs don't support all column types provided by H2, such as
     * "NUMBER" when using PostgreSQL mode.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>disallowedTypes</name> <init>= <expr><call><name><name>Collections</name><operator>.</operator><name>emptySet</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Custom mappings from type names to data types.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>DataType</name></argument>&gt;</argument_list></name></type> <name>typeByNameMap</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Allow to use GROUP BY n, where n is column index in the SELECT list, similar to ORDER BY
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>groupByColumnIndex</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Allow to compare numeric with BOOLEAN.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>numericWithBooleanComparison</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>ModeEnum</name></type> <name>modeEnum</name></decl>;</decl_stmt>

    <static>static <block>{<block_content>
        <decl_stmt><decl><type><name>Mode</name></type> <name>mode</name> <init>= <expr><operator>new</operator> <call><name>Mode</name><argument_list>(<argument><expr><name><name>ModeEnum</name><operator>.</operator><name>REGULAR</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>allowEmptyInPredicate</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>dateTimeValueWithinTransaction</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>topInSelect</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>limit</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>minusIsExcept</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>identityDataType</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>serialDataTypes</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>autoIncrementClause</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>mode</name> <operator>=</operator> <operator>new</operator> <call><name>Mode</name><argument_list>(<argument><expr><name><name>ModeEnum</name><operator>.</operator><name>STRICT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>dateTimeValueWithinTransaction</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>mode</name> <operator>=</operator> <operator>new</operator> <call><name>Mode</name><argument_list>(<argument><expr><name><name>ModeEnum</name><operator>.</operator><name>LEGACY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Features of REGULAR mode</comment>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>allowEmptyInPredicate</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>dateTimeValueWithinTransaction</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>topInSelect</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>limit</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>minusIsExcept</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>identityDataType</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>serialDataTypes</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>autoIncrementClause</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <comment type="line">// Legacy identity and sequence features</comment>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>identityClause</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>updateSequenceOnManualIdentityInsertion</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>takeInsertedIdentity</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>identityColumnsHaveDefaultOnNull</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>nextvalAndCurrvalPseudoColumns</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <comment type="line">// Legacy DML features</comment>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>topInDML</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>mergeWhere</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <comment type="line">// Legacy DDL features</comment>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>createUniqueConstraintForReferencedColumns</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <comment type="line">// Legacy numeric with boolean comparison</comment>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>numericWithBooleanComparison</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>mode</name> <operator>=</operator> <operator>new</operator> <call><name>Mode</name><argument_list>(<argument><expr><name><name>ModeEnum</name><operator>.</operator><name>DB2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>aliasColumnName</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>sysDummy1</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>isolationLevelInSelectOrInsertStatement</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <comment type="line">// See</comment>
        <comment type="line">// https://www.ibm.com/support/knowledgecenter/SSEPEK_11.0.0/</comment>
        <comment type="line">//     com.ibm.db2z11.doc.java/src/tpc/imjcc_r0052001.dita</comment>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>supportedClientInfoPropertiesRegEx</name></name> <operator>=</operator>
                <call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><literal type="string">"ApplicationName|ClientAccountingInformation|"</literal> <operator>+</operator>
                        <literal type="string">"ClientUser|ClientCorrelationToken"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>allowDB2TimestampFormat</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>forBitData</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>takeInsertedIdentity</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>expressionNames</name></name> <operator>=</operator> <name><name>ExpressionNames</name><operator>.</operator><name>NUMBER</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>viewExpressionNames</name></name> <operator>=</operator> <name><name>ViewExpressionNames</name><operator>.</operator><name>EXCEPTION</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>limit</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>minusIsExcept</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>numericWithBooleanComparison</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>mode</name> <operator>=</operator> <operator>new</operator> <call><name>Mode</name><argument_list>(<argument><expr><name><name>ModeEnum</name><operator>.</operator><name>Derby</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>aliasColumnName</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>uniqueIndexNullsHandling</name></name> <operator>=</operator> <name><name>UniqueIndexNullsHandling</name><operator>.</operator><name>FORBID_ANY_DUPLICATES</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>sysDummy1</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>isolationLevelInSelectOrInsertStatement</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <comment type="line">// Derby does not support client info properties as of version 10.12.1.1</comment>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>supportedClientInfoPropertiesRegEx</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>forBitData</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>takeInsertedIdentity</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>expressionNames</name></name> <operator>=</operator> <name><name>ExpressionNames</name><operator>.</operator><name>NUMBER</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>viewExpressionNames</name></name> <operator>=</operator> <name><name>ViewExpressionNames</name><operator>.</operator><name>EXCEPTION</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>mode</name> <operator>=</operator> <operator>new</operator> <call><name>Mode</name><argument_list>(<argument><expr><name><name>ModeEnum</name><operator>.</operator><name>HSQLDB</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>allowPlusForStringConcat</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>identityColumnsHaveDefaultOnNull</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <comment type="line">// HSQLDB does not support client info properties. See</comment>
        <comment type="line">// http://hsqldb.org/doc/apidocs/org/hsqldb/jdbc/JDBCConnection.html#setClientInfo-java.lang.String-java.lang.String-</comment>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>supportedClientInfoPropertiesRegEx</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>expressionNames</name></name> <operator>=</operator> <name><name>ExpressionNames</name><operator>.</operator><name>C_NUMBER</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>topInSelect</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>limit</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>minusIsExcept</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>numericWithBooleanComparison</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>mode</name> <operator>=</operator> <operator>new</operator> <call><name>Mode</name><argument_list>(<argument><expr><name><name>ModeEnum</name><operator>.</operator><name>MSSQLServer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>aliasColumnName</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>squareBracketQuotedNames</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>uniqueIndexNullsHandling</name></name> <operator>=</operator> <name><name>UniqueIndexNullsHandling</name><operator>.</operator><name>FORBID_ANY_DUPLICATES</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>allowPlusForStringConcat</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>swapLogFunctionParameters</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>swapConvertFunctionParameters</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>supportPoundSymbolForColumnNames</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>discardWithTableHints</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <comment type="line">// MS SQL Server does not support client info properties. See</comment>
        <comment type="line">// https://msdn.microsoft.com/en-Us/library/dd571296%28v=sql.110%29.aspx</comment>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>supportedClientInfoPropertiesRegEx</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>zeroExLiteralsAreBinaryStrings</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>truncateTableRestartIdentity</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>takeInsertedIdentity</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>DataType</name></type> <name>dt</name> <init>= <expr><call><name><name>DataType</name><operator>.</operator><name>createNumeric</name></name><argument_list>(<argument><expr><literal type="number">19</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>dt</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>Value</name><operator>.</operator><name>NUMERIC</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dt</name><operator>.</operator><name>sqlType</name></name> <operator>=</operator> <name><name>Types</name><operator>.</operator><name>NUMERIC</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dt</name><operator>.</operator><name>specialPrecisionScale</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mode</name><operator>.</operator><name>typeByNameMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"MONEY"</literal></expr></argument>, <argument><expr><name>dt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>dt</name> <operator>=</operator> <call><name><name>DataType</name><operator>.</operator><name>createNumeric</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dt</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>Value</name><operator>.</operator><name>NUMERIC</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dt</name><operator>.</operator><name>sqlType</name></name> <operator>=</operator> <name><name>Types</name><operator>.</operator><name>NUMERIC</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dt</name><operator>.</operator><name>specialPrecisionScale</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mode</name><operator>.</operator><name>typeByNameMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"SMALLMONEY"</literal></expr></argument>, <argument><expr><name>dt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mode</name><operator>.</operator><name>typeByNameMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"UNIQUEIDENTIFIER"</literal></expr></argument>, <argument><expr><call><name><name>DataType</name><operator>.</operator><name>getDataType</name></name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>UUID</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>allowEmptySchemaValuesAsDefaultSchema</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>expressionNames</name></name> <operator>=</operator> <name><name>ExpressionNames</name><operator>.</operator><name>EMPTY</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>viewExpressionNames</name></name> <operator>=</operator> <name><name>ViewExpressionNames</name><operator>.</operator><name>EXCEPTION</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>topInSelect</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>topInDML</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>identityClause</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>numericWithBooleanComparison</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>mode</name> <operator>=</operator> <operator>new</operator> <call><name>Mode</name><argument_list>(<argument><expr><name><name>ModeEnum</name><operator>.</operator><name>MariaDB</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>indexDefinitionInCreateTable</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>regexpReplaceBackslashReferences</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>onDuplicateKeyUpdate</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>replaceInto</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>charPadding</name></name> <operator>=</operator> <name><name>CharPadding</name><operator>.</operator><name>NEVER</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>supportedClientInfoPropertiesRegEx</name></name> <operator>=</operator> <call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><literal type="string">".*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>zeroExLiteralsAreBinaryStrings</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>allowUnrelatedOrderByExpressionsInDistinctQueries</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>alterTableExtensionsMySQL</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>alterTableModifyColumn</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>truncateTableRestartIdentity</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>allNumericTypesHavePrecision</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>nextValueReturnsDifferentValues</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>updateSequenceOnManualIdentityInsertion</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>takeInsertedIdentity</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>identityColumnsHaveDefaultOnNull</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>expressionNames</name></name> <operator>=</operator> <name><name>ExpressionNames</name><operator>.</operator><name>ORIGINAL_SQL</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>viewExpressionNames</name></name> <operator>=</operator> <name><name>ViewExpressionNames</name><operator>.</operator><name>MYSQL_STYLE</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>limit</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>autoIncrementClause</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mode</name><operator>.</operator><name>typeByNameMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"YEAR"</literal></expr></argument>, <argument><expr><call><name><name>DataType</name><operator>.</operator><name>getDataType</name></name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>SMALLINT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>groupByColumnIndex</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>numericWithBooleanComparison</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>mode</name> <operator>=</operator> <operator>new</operator> <call><name>Mode</name><argument_list>(<argument><expr><name><name>ModeEnum</name><operator>.</operator><name>MySQL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>indexDefinitionInCreateTable</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>regexpReplaceBackslashReferences</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>onDuplicateKeyUpdate</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>replaceInto</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>charPadding</name></name> <operator>=</operator> <name><name>CharPadding</name><operator>.</operator><name>NEVER</name></name></expr>;</expr_stmt>
        <comment type="line">// MySQL allows to use any key for client info entries. See</comment>
        <comment type="line">// https://github.com/mysql/mysql-connector-j/blob/5.1.47/src/com/mysql/jdbc/JDBC4CommentClientInfoProvider.java</comment>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>supportedClientInfoPropertiesRegEx</name></name> <operator>=</operator>
                <call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><literal type="string">".*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>zeroExLiteralsAreBinaryStrings</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>allowUnrelatedOrderByExpressionsInDistinctQueries</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>alterTableExtensionsMySQL</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>alterTableModifyColumn</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>truncateTableRestartIdentity</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>allNumericTypesHavePrecision</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>updateSequenceOnManualIdentityInsertion</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>takeInsertedIdentity</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>identityColumnsHaveDefaultOnNull</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>createUniqueConstraintForReferencedColumns</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>expressionNames</name></name> <operator>=</operator> <name><name>ExpressionNames</name><operator>.</operator><name>ORIGINAL_SQL</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>viewExpressionNames</name></name> <operator>=</operator> <name><name>ViewExpressionNames</name><operator>.</operator><name>MYSQL_STYLE</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>limit</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>autoIncrementClause</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mode</name><operator>.</operator><name>typeByNameMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"YEAR"</literal></expr></argument>, <argument><expr><call><name><name>DataType</name><operator>.</operator><name>getDataType</name></name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>SMALLINT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>groupByColumnIndex</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>numericWithBooleanComparison</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>mode</name> <operator>=</operator> <operator>new</operator> <call><name>Mode</name><argument_list>(<argument><expr><name><name>ModeEnum</name><operator>.</operator><name>Oracle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>aliasColumnName</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>convertOnlyToSmallerScale</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>uniqueIndexNullsHandling</name></name> <operator>=</operator> <name><name>UniqueIndexNullsHandling</name><operator>.</operator><name>ALLOW_DUPLICATES_WITH_ALL_NULLS</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>treatEmptyStringsAsNull</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>regexpReplaceBackslashReferences</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>supportPoundSymbolForColumnNames</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <comment type="line">// Oracle accepts keys of the form &lt;namespace&gt;.*. See</comment>
        <comment type="line">// https://docs.oracle.com/database/121/JJDBC/jdbcvers.htm#JJDBC29006</comment>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>supportedClientInfoPropertiesRegEx</name></name> <operator>=</operator>
                <call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><literal type="string">".*\\..*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>alterTableModifyColumn</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>decimalSequences</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>charAndByteLengthUnits</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>nextvalAndCurrvalPseudoColumns</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>mergeWhere</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>minusIsExcept</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>expressionNames</name></name> <operator>=</operator> <name><name>ExpressionNames</name><operator>.</operator><name>ORIGINAL_SQL</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>viewExpressionNames</name></name> <operator>=</operator> <name><name>ViewExpressionNames</name><operator>.</operator><name>EXCEPTION</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mode</name><operator>.</operator><name>typeByNameMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"BINARY_FLOAT"</literal></expr></argument>, <argument><expr><call><name><name>DataType</name><operator>.</operator><name>getDataType</name></name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>REAL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mode</name><operator>.</operator><name>typeByNameMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"BINARY_DOUBLE"</literal></expr></argument>, <argument><expr><call><name><name>DataType</name><operator>.</operator><name>getDataType</name></name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>DOUBLE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>dt</name> <operator>=</operator> <call><name><name>DataType</name><operator>.</operator><name>createDate</name></name><argument_list>(<comment type="block">/* 2001-01-01 23:59:59 */</comment> <argument><expr><literal type="number">19</literal></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>, <argument><expr><literal type="string">"DATE"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dt</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>Value</name><operator>.</operator><name>TIMESTAMP</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dt</name><operator>.</operator><name>sqlType</name></name> <operator>=</operator> <name><name>Types</name><operator>.</operator><name>TIMESTAMP</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dt</name><operator>.</operator><name>specialPrecisionScale</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mode</name><operator>.</operator><name>typeByNameMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"DATE"</literal></expr></argument>, <argument><expr><name>dt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>mode</name> <operator>=</operator> <operator>new</operator> <call><name>Mode</name><argument_list>(<argument><expr><name><name>ModeEnum</name><operator>.</operator><name>PostgreSQL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>aliasColumnName</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>systemColumns</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>logIsLogBase10</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>regexpReplaceBackslashReferences</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>insertOnConflict</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <comment type="line">// PostgreSQL only supports the ApplicationName property. See</comment>
        <comment type="line">// https://github.com/hhru/postgres-jdbc/blob/master/postgresql-jdbc-9.2-1002.src/</comment>
        <comment type="line">//     org/postgresql/jdbc4/AbstractJdbc4Connection.java</comment>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>supportedClientInfoPropertiesRegEx</name></name> <operator>=</operator>
                <call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><literal type="string">"ApplicationName"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>charPadding</name></name> <operator>=</operator> <name><name>CharPadding</name><operator>.</operator><name>IN_RESULT_SETS</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>nextValueReturnsDifferentValues</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>takeGeneratedSequenceValue</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>expressionNames</name></name> <operator>=</operator> <name><name>ExpressionNames</name><operator>.</operator><name>POSTGRESQL_STYLE</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>allowUsingFromClauseInUpdateStatement</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>limit</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>serialDataTypes</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <comment type="line">// Enumerate all H2 types NOT supported by PostgreSQL:</comment>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>disallowedTypes</name> <init>= <expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>disallowedTypes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"NUMBER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>disallowedTypes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"TINYINT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>disallowedTypes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"BLOB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>disallowedTypes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"VARCHAR_IGNORECASE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>disallowedTypes</name></name> <operator>=</operator> <name>disallowedTypes</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>dt</name> <operator>=</operator> <call><name><name>DataType</name><operator>.</operator><name>getDataType</name></name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>JSON</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mode</name><operator>.</operator><name>typeByNameMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"JSONB"</literal></expr></argument>, <argument><expr><name>dt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>dt</name> <operator>=</operator> <call><name><name>DataType</name><operator>.</operator><name>createNumeric</name></name><argument_list>(<argument><expr><literal type="number">19</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dt</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>Value</name><operator>.</operator><name>NUMERIC</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dt</name><operator>.</operator><name>sqlType</name></name> <operator>=</operator> <name><name>Types</name><operator>.</operator><name>NUMERIC</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dt</name><operator>.</operator><name>specialPrecisionScale</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mode</name><operator>.</operator><name>typeByNameMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"MONEY"</literal></expr></argument>, <argument><expr><name>dt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>dt</name> <operator>=</operator> <call><name><name>DataType</name><operator>.</operator><name>getDataType</name></name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>INTEGER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mode</name><operator>.</operator><name>typeByNameMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"OID"</literal></expr></argument>, <argument><expr><name>dt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>dateTimeValueWithinTransaction</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mode</name><operator>.</operator><name>groupByColumnIndex</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></static>

    <constructor><specifier>private</specifier> <name>Mode</name><parameter_list>(<parameter><decl><type><name>ModeEnum</name></type> <name>modeEnum</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name><name>modeEnum</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>modeEnum</name></name> <operator>=</operator> <name>modeEnum</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>Mode</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>MODES</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>toUpperEnglish</name></name><argument_list>(<argument><expr><name><name>mode</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the mode with the given name.
     *
     * @param name the name of the mode
     * @return the mode object
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Mode</name></type> <name>getInstance</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>MODES</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>toUpperEnglish</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Mode</name></type> <name>getRegular</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getInstance</name><argument_list>(<argument><expr><call><name><name>ModeEnum</name><operator>.</operator><name>REGULAR</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>name</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>ModeEnum</name></type> <name>getEnum</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>this</name><operator>.</operator><name>modeEnum</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>name</name></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>
