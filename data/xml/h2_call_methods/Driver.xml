<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/Driver.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Connection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>DriverManager</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>DriverPropertyInfo</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>SQLException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Properties</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>logging</name><operator>.</operator><name>Logger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>api</name><operator>.</operator><name>ErrorCode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>jdbc</name><operator>.</operator><name>JdbcConnection</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>DbException</name></name>;</import>

<comment type="block" format="javadoc">/**
 * The database driver. An application should not use this class directly. The
 * only thing the application needs to do is load the driver. This can be done
 * using Class.forName. To load the driver and open a database connection, use
 * the following code:
 *
 * &lt;pre&gt;
 * Class.forName(&amp;quot;org.h2.Driver&amp;quot;);
 * Connection conn = DriverManager.getConnection(
 *      &amp;quot;jdbc:h2:&amp;tilde;/test&amp;quot;, &amp;quot;sa&amp;quot;, &amp;quot;sa&amp;quot;);
 * &lt;/pre&gt;
 */</comment>
<class><specifier>public</specifier> class <name>Driver</name> <super_list><implements>implements <super><name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Driver</name></name></super>, <super><name>JdbcDriverBackwardsCompat</name></super></implements></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Driver</name></type> <name>INSTANCE</name> <init>= <expr><operator>new</operator> <call><name>Driver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_URL</name> <init>= <expr><literal type="string">"jdbc:default:connection"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>ThreadLocal</name><argument_list type="generic">&lt;<argument><name>Connection</name></argument>&gt;</argument_list></name></type> <name>DEFAULT_CONNECTION</name> <init>=
            <expr><operator>new</operator> <call><name><name>ThreadLocal</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>registered</name></decl>;</decl_stmt>

    <static>static <block>{<block_content>
        <expr_stmt><expr><call><name>load</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></static>

    <comment type="block" format="javadoc">/**
     * Open a database connection.
     * This method should not be called by an application.
     * Instead, the method DriverManager.getConnection should be used.
     *
     * @param url the database URL
     * @param info the connection properties
     * @return the new connection or null if the URL is not supported
     * @throws SQLException on connection exception or if URL is {@code null}
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Connection</name></type> <name>connect</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>url</name></decl></parameter>, <parameter><decl><type><name>Properties</name></type> <name>info</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>url</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getJdbcSQLException</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>URL_FORMAT_ERROR_2</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>URL_FORMAT</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>url</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>START_URL</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>JdbcConnection</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>url</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>DEFAULT_URL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>DEFAULT_CONNECTION</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check if the driver understands this URL.
     * This method should not be called by an application.
     *
     * @param url the database URL
     * @return if the driver understands the URL
     * @throws SQLException if URL is {@code null}
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>acceptsURL</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>url</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>url</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getJdbcSQLException</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>URL_FORMAT_ERROR_2</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>Constants</name><operator>.</operator><name>URL_FORMAT</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>url</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>START_URL</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>url</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>DEFAULT_URL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>DEFAULT_CONNECTION</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the major version number of the driver.
     * This method should not be called by an application.
     *
     * @return the major version number
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getMajorVersion</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>Constants</name><operator>.</operator><name>VERSION_MAJOR</name></name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the minor version number of the driver.
     * This method should not be called by an application.
     *
     * @return the minor version number
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getMinorVersion</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>Constants</name><operator>.</operator><name>VERSION_MINOR</name></name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the list of supported properties.
     * This method should not be called by an application.
     *
     * @param url the database URL
     * @param info the connection properties
     * @return a zero length array
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>DriverPropertyInfo</name><index>[]</index></name></type> <name>getPropertyInfo</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>url</name></decl></parameter>, <parameter><decl><type><name>Properties</name></type> <name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <name><name>DriverPropertyInfo</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check if this driver is compliant to the JDBC specification.
     * This method should not be called by an application.
     *
     * @return true
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>jdbcCompliant</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * [Not supported]
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Logger</name></type> <name>getParentLogger</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * INTERNAL
     * @return instance of the driver registered with the DriverManager
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <name>Driver</name></type> <name>load</name><parameter_list>()</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>registered</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>registered</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>DriverManager</name><operator>.</operator><name>registerDriver</name></name><argument_list>(<argument><expr><name>INSTANCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SQLException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>DbException</name><operator>.</operator><name>traceThrowable</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
        <return>return <expr><name>INSTANCE</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * INTERNAL
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>unload</name><parameter_list>()</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>registered</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>registered</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>DriverManager</name><operator>.</operator><name>deregisterDriver</name></name><argument_list>(<argument><expr><name>INSTANCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SQLException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>DbException</name><operator>.</operator><name>traceThrowable</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * INTERNAL
     * Sets, on a per-thread basis, the default-connection for
     * user-defined functions.
     * @param c to set default to
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setDefaultConnection</name><parameter_list>(<parameter><decl><type><name>Connection</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>DEFAULT_CONNECTION</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>DEFAULT_CONNECTION</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * INTERNAL
     * @param thread to set context class loader for
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setThreadContextClassLoader</name><parameter_list>(<parameter><decl><type><name>Thread</name></type> <name>thread</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// Apache Tomcat: use the classloader of the driver to avoid the</comment>
        <comment type="line">// following log message:</comment>
        <comment type="line">// org.apache.catalina.loader.WebappClassLoader clearReferencesThreads</comment>
        <comment type="line">// SEVERE: The web application appears to have started a thread named</comment>
        <comment type="line">// ... but has failed to stop it.</comment>
        <comment type="line">// This is very likely to create a memory leak.</comment>
        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>thread</name><operator>.</operator><name>setContextClassLoader</name></name><argument_list>(<argument><expr><call><name><name>Driver</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getClassLoader</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">// ignore</comment>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

}</block></class>
</unit>
