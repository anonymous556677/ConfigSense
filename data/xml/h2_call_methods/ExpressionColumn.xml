<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/expression/ExpressionColumn.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>api</name><operator>.</operator><name>ErrorCode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>query</name><operator>.</operator><name>Select</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>query</name><operator>.</operator><name>SelectGroups</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>query</name><operator>.</operator><name>SelectListColumnResolver</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Database</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>SessionLocal</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>analysis</name><operator>.</operator><name>DataAnalysisOperation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>condition</name><operator>.</operator><name>Comparison</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>function</name><operator>.</operator><name>CurrentDateTimeValueFunction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexCondition</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>DbException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>Constant</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>Schema</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>Column</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>ColumnResolver</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>Table</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>TableFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>StringUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>TypeInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueBigint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueBoolean</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueDecfloat</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueDouble</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueInteger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueNumeric</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueReal</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueSmallint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueTinyint</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A column reference expression that represents a column of a table or view.
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>ExpressionColumn</name> <super_list><extends>extends <super><name>Expression</name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Database</name></type> <name>database</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>schemaName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>tableAlias</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>columnName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>rowId</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>quotedName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ColumnResolver</name></type> <name>columnResolver</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>queryLevel</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Column</name></type> <name>column</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Creates a new column reference for metadata of queries; should not be
     * used as normal expression.
     *
     * @param database
     *            the database
     * @param column
     *            the column
     */</comment>
    <constructor><specifier>public</specifier> <name>ExpressionColumn</name><parameter_list>(<parameter><decl><type><name>Database</name></type> <name>database</name></decl></parameter>, <parameter><decl><type><name>Column</name></type> <name>column</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>database</name></name> <operator>=</operator> <name>database</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>column</name></name> <operator>=</operator> <name>column</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>columnName</name> <operator>=</operator> <name>tableAlias</name> <operator>=</operator> <name>schemaName</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>rowId</name> <operator>=</operator> <call><name><name>column</name><operator>.</operator><name>isRowId</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>quotedName</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Creates a new instance of column reference for regular columns as normal
     * expression.
     *
     * @param database
     *            the database
     * @param schemaName
     *            the schema name, or {@code null}
     * @param tableAlias
     *            the table alias name, table name, or {@code null}
     * @param columnName
     *            the column name
     */</comment>
    <constructor><specifier>public</specifier> <name>ExpressionColumn</name><parameter_list>(<parameter><decl><type><name>Database</name></type> <name>database</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>schemaName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableAlias</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>columnName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><name>schemaName</name></expr></argument>, <argument><expr><name>tableAlias</name></expr></argument>, <argument><expr><name>columnName</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Creates a new instance of column reference for regular columns as normal
     * expression.
     *
     * @param database
     *            the database
     * @param schemaName
     *            the schema name, or {@code null}
     * @param tableAlias
     *            the table alias name, table name, or {@code null}
     * @param columnName
     *            the column name
     * @param quotedName
     *            whether name was quoted
     */</comment>
    <constructor><specifier>public</specifier> <name>ExpressionColumn</name><parameter_list>(<parameter><decl><type><name>Database</name></type> <name>database</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>schemaName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableAlias</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>columnName</name></decl></parameter>,
            <parameter><decl><type><name>boolean</name></type> <name>quotedName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>database</name></name> <operator>=</operator> <name>database</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>schemaName</name></name> <operator>=</operator> <name>schemaName</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tableAlias</name></name> <operator>=</operator> <name>tableAlias</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>columnName</name></name> <operator>=</operator> <name>columnName</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>rowId</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>quotedName</name></name> <operator>=</operator> <name>quotedName</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Creates a new instance of column reference for {@code _ROWID_} column as
     * normal expression.
     *
     * @param database
     *            the database
     * @param schemaName
     *            the schema name, or {@code null}
     * @param tableAlias
     *            the table alias name, table name, or {@code null}
     */</comment>
    <constructor><specifier>public</specifier> <name>ExpressionColumn</name><parameter_list>(<parameter><decl><type><name>Database</name></type> <name>database</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>schemaName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tableAlias</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>database</name></name> <operator>=</operator> <name>database</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>schemaName</name></name> <operator>=</operator> <name>schemaName</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tableAlias</name></name> <operator>=</operator> <name>tableAlias</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>columnName</name> <operator>=</operator> <name><name>Column</name><operator>.</operator><name>ROWID</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>quotedName</name> <operator>=</operator> <name>rowId</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>StringBuilder</name></type> <name>getUnenclosedSQL</name><parameter_list>(<parameter><decl><type><name>StringBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sqlFlags</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>schemaName</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>ParserUtil</name><operator>.</operator><name>quoteIdentifier</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>schemaName</name></expr></argument>, <argument><expr><name>sqlFlags</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>tableAlias</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>ParserUtil</name><operator>.</operator><name>quoteIdentifier</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>tableAlias</name></expr></argument>, <argument><expr><name>sqlFlags</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>column</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>columnResolver</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>columnResolver</name><operator>.</operator><name>hasDerivedColumnList</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>ParserUtil</name><operator>.</operator><name>quoteIdentifier</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><call><name><name>columnResolver</name><operator>.</operator><name>getColumnName</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sqlFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>column</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>sqlFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rowId</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>ParserUtil</name><operator>.</operator><name>quoteIdentifier</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>columnName</name></expr></argument>, <argument><expr><name>sqlFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><name>builder</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>TableFilter</name></type> <name>getTableFilter</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>columnResolver</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>columnResolver</name><operator>.</operator><name>getTableFilter</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>mapColumns</name><parameter_list>(<parameter><decl><type><name>ColumnResolver</name></type> <name>resolver</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>tableAlias</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>database</name><operator>.</operator><name>equalsIdentifiers</name></name><argument_list>(<argument><expr><name>tableAlias</name></expr></argument>, <argument><expr><call><name><name>resolver</name><operator>.</operator><name>getTableAlias</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>schemaName</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>database</name><operator>.</operator><name>equalsIdentifiers</name></name><argument_list>(<argument><expr><name>schemaName</name></expr></argument>, <argument><expr><call><name><name>resolver</name><operator>.</operator><name>getSchemaName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>rowId</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Column</name></type> <name>col</name> <init>= <expr><call><name><name>resolver</name><operator>.</operator><name>getRowIdColumn</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>col</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>mapColumn</name><argument_list>(<argument><expr><name>resolver</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Column</name></type> <name>col</name> <init>= <expr><call><name><name>resolver</name><operator>.</operator><name>findColumn</name></name><argument_list>(<argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>col</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>mapColumn</name><argument_list>(<argument><expr><name>resolver</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>Column</name><index>[]</index></name></type> <name>columns</name> <init>= <expr><call><name><name>resolver</name><operator>.</operator><name>getSystemColumns</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>columns</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>columns</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>columns</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>equalsIdentifiers</name></name><argument_list>(<argument><expr><name>columnName</name></expr></argument>, <argument><expr><call><name><name>col</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>mapColumn</name><argument_list>(<argument><expr><name>resolver</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>mapColumn</name><parameter_list>(<parameter><decl><type><name>ColumnResolver</name></type> <name>resolver</name></decl></parameter>, <parameter><decl><type><name>Column</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>columnResolver</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>queryLevel</name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>column</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>columnResolver</name></name> <operator>=</operator> <name>resolver</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>queryLevel</name> <operator>==</operator> <name>level</name> <operator>&amp;&amp;</operator> <name><name>this</name><operator>.</operator><name>columnResolver</name></name> <operator>!=</operator> <name>resolver</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>resolver</name> <operator>instanceof</operator> <name>SelectListColumnResolver</name></expr>)</condition> <block>{<block_content>
                <comment type="line">// ignore - already mapped, that's ok</comment>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>AMBIGUOUS_COLUMN_NAME_1</name></name></expr></argument>, <argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Expression</name></type> <name>optimize</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>columnResolver</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Schema</name></type> <name>schema</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>findSchema</name><argument_list>(
                    <argument><expr><ternary><condition><expr><name>tableAlias</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>session</name><operator>.</operator><name>getCurrentSchemaName</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name>tableAlias</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>schema</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Constant</name></type> <name>constant</name> <init>= <expr><call><name><name>schema</name><operator>.</operator><name>findConstant</name></name><argument_list>(<argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>constant</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <return>return <expr><call><name><name>constant</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name>optimizeOther</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>columnResolver</name><operator>.</operator><name>optimize</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Expression</name></type> <name>optimizeOther</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>tableAlias</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>quotedName</name></expr>)</condition> <block>{<block_content>
            <switch>switch <condition>(<expr><call><name><name>StringUtils</name><operator>.</operator><name>toUpperEnglish</name></name><argument_list>(<argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <case>case <expr><literal type="string">"SYSDATE"</literal></expr>:</case>
            <case>case <expr><literal type="string">"TODAY"</literal></expr>:</case>
                <return>return <expr><operator>new</operator> <call><name>CurrentDateTimeValueFunction</name><argument_list>(<argument><expr><name><name>CurrentDateTimeValueFunction</name><operator>.</operator><name>CURRENT_DATE</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
            <case>case <expr><literal type="string">"SYSTIME"</literal></expr>:</case>
                <return>return <expr><operator>new</operator> <call><name>CurrentDateTimeValueFunction</name><argument_list>(<argument><expr><name><name>CurrentDateTimeValueFunction</name><operator>.</operator><name>LOCALTIME</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
            <case>case <expr><literal type="string">"SYSTIMESTAMP"</literal></expr>:</case>
                <return>return <expr><operator>new</operator> <call><name>CurrentDateTimeValueFunction</name><argument_list>(<argument><expr><name><name>CurrentDateTimeValueFunction</name><operator>.</operator><name>CURRENT_TIMESTAMP</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></switch>
        </block_content>}</block></if></if_stmt>
        <throw>throw <expr><call><name>getColumnException</name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>COLUMN_NOT_FOUND_1</name></name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get exception to throw, with column and table info added
     *
     * @param code SQL error code
     * @return DbException
     */</comment>
    <function><type><specifier>public</specifier> <name>DbException</name></type> <name>getColumnException</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><name>columnName</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>tableAlias</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>schemaName</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>name</name> <operator>=</operator> <name>schemaName</name> <operator>+</operator> <literal type="char">'.'</literal> <operator>+</operator> <name>tableAlias</name> <operator>+</operator> <literal type="char">'.'</literal> <operator>+</operator> <name>name</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>name</name> <operator>=</operator> <name>tableAlias</name> <operator>+</operator> <literal type="char">'.'</literal> <operator>+</operator> <name>name</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>updateAggregate</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stage</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Select</name></type> <name>select</name> <init>= <expr><call><name><name>columnResolver</name><operator>.</operator><name>getSelect</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>select</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>MUST_GROUP_BY_COLUMN_1</name></name></expr></argument>, <argument><expr><call><name>getTraceSQL</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>stage</name> <operator>==</operator> <name><name>DataAnalysisOperation</name><operator>.</operator><name>STAGE_RESET</name></name></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>SelectGroups</name></type> <name>groupData</name> <init>= <expr><call><name><name>select</name><operator>.</operator><name>getGroupDataIfCurrent</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>groupData</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// this is a different level (the enclosing query)</comment>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Value</name></type> <name>v</name> <init>= <expr><operator>(</operator><name>Value</name><operator>)</operator> <call><name><name>groupData</name><operator>.</operator><name>getCurrentGroupExprData</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>groupData</name><operator>.</operator><name>setCurrentGroupExprData</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name><name>columnResolver</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name><name>select</name><operator>.</operator><name>isGroupWindowStage2</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>session</name><operator>.</operator><name>areEqual</name></name><argument_list>(<argument><expr><call><name><name>columnResolver</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>MUST_GROUP_BY_COLUMN_1</name></name></expr></argument>, <argument><expr><call><name>getTraceSQL</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Value</name></type> <name>getValue</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Select</name></type> <name>select</name> <init>= <expr><call><name><name>columnResolver</name><operator>.</operator><name>getSelect</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>select</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>SelectGroups</name></type> <name>groupData</name> <init>= <expr><call><name><name>select</name><operator>.</operator><name>getGroupDataIfCurrent</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>groupData</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Value</name></type> <name>v</name> <init>= <expr><operator>(</operator><name>Value</name><operator>)</operator> <call><name><name>groupData</name><operator>.</operator><name>getCurrentGroupExprData</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>v</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name>v</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>select</name><operator>.</operator><name>isGroupWindowStage2</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>MUST_GROUP_BY_COLUMN_1</name></name></expr></argument>, <argument><expr><call><name>getTraceSQL</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Value</name></type> <name>value</name> <init>= <expr><call><name><name>columnResolver</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>select</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>NULL_NOT_ALLOWED</name></name></expr></argument>, <argument><expr><call><name>getTraceSQL</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>MUST_GROUP_BY_COLUMN_1</name></name></expr></argument>, <argument><expr><call><name>getTraceSQL</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>value</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>TypeInfo</name></type> <name>getType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>column</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>column</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><ternary><condition><expr><name>rowId</name></expr> ?</condition><then> <expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_BIGINT</name></name></expr> </then><else>: <expr><name><name>TypeInfo</name><operator>.</operator><name>TYPE_UNKNOWN</name></name></expr></else></ternary></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>setEvaluatable</name><parameter_list>(<parameter><decl><type><name>TableFilter</name></type> <name>tableFilter</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Column</name></type> <name>getColumn</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>column</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getOriginalColumnName</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>columnName</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getOriginalTableAliasName</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>tableAlias</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getColumnName</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>columnIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>column</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>columnResolver</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>columnResolver</name><operator>.</operator><name>getColumnName</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name><name>column</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>columnName</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getSchemaName</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name><name>column</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name>table</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>table</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getTableName</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Table</name></type> <name>table</name> <init>= <expr><call><name><name>column</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name>table</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getAlias</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>columnIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>column</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>columnResolver</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>columnResolver</name><operator>.</operator><name>getColumnName</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name><name>column</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>tableAlias</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>tableAlias</name> <operator>+</operator> <literal type="char">'.'</literal> <operator>+</operator> <name>columnName</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>columnName</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getColumnNameForView</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>columnIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getAlias</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>columnIndex</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isIdentity</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>column</name><operator>.</operator><name>isIdentity</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getNullable</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><call><name><name>column</name><operator>.</operator><name>isNullable</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>Column</name><operator>.</operator><name>NULLABLE</name></name></expr> </then><else>: <expr><name><name>Column</name><operator>.</operator><name>NOT_NULLABLE</name></name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isEverything</name><parameter_list>(<parameter><decl><type><name>ExpressionVisitor</name></type> <name>visitor</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><call><name><name>visitor</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <case>case <expr><name><name>ExpressionVisitor</name><operator>.</operator><name>OPTIMIZABLE_AGGREGATE</name></name></expr>:</case>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        <case>case <expr><name><name>ExpressionVisitor</name><operator>.</operator><name>INDEPENDENT</name></name></expr>:</case>
            <return>return <expr><name><name>this</name><operator>.</operator><name>queryLevel</name></name> <operator>&lt;</operator> <call><name><name>visitor</name><operator>.</operator><name>getQueryLevel</name></name><argument_list>()</argument_list></call></expr>;</return>
        <case>case <expr><name><name>ExpressionVisitor</name><operator>.</operator><name>EVALUATABLE</name></name></expr>:</case>
            <comment type="line">// if this column belongs to a 'higher level' query and is</comment>
            <comment type="line">// therefore just a parameter</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>visitor</name><operator>.</operator><name>getQueryLevel</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name><name>this</name><operator>.</operator><name>queryLevel</name></name></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>getTableFilter</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name>getTableFilter</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEvaluatable</name><argument_list>()</argument_list></call></expr>;</return>
        <case>case <expr><name><name>ExpressionVisitor</name><operator>.</operator><name>SET_MAX_DATA_MODIFICATION_ID</name></name></expr>:</case>
            <expr_stmt><expr><call><name><name>visitor</name><operator>.</operator><name>addDataModificationId</name></name><argument_list>(<argument><expr><call><name><name>column</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMaxDataModificationId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        <case>case <expr><name><name>ExpressionVisitor</name><operator>.</operator><name>NOT_FROM_RESOLVER</name></name></expr>:</case>
            <return>return <expr><name>columnResolver</name> <operator>!=</operator> <call><name><name>visitor</name><operator>.</operator><name>getResolver</name></name><argument_list>()</argument_list></call></expr>;</return>
        <case>case <expr><name><name>ExpressionVisitor</name><operator>.</operator><name>GET_DEPENDENCIES</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>column</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>visitor</name><operator>.</operator><name>addDependency</name></name><argument_list>(<argument><expr><call><name><name>column</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        <case>case <expr><name><name>ExpressionVisitor</name><operator>.</operator><name>GET_COLUMNS1</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>column</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>COLUMN_NOT_FOUND_1</name></name></expr></argument>, <argument><expr><call><name>getTraceSQL</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>visitor</name><operator>.</operator><name>addColumn1</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        <case>case <expr><name><name>ExpressionVisitor</name><operator>.</operator><name>GET_COLUMNS2</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>column</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>COLUMN_NOT_FOUND_1</name></name></expr></argument>, <argument><expr><call><name>getTraceSQL</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>visitor</name><operator>.</operator><name>addColumn2</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        <case>case <expr><name><name>ExpressionVisitor</name><operator>.</operator><name>DECREMENT_QUERY_LEVEL</name></name></expr>:</case> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>column</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>COLUMN_NOT_FOUND_1</name></name></expr></argument>, <argument><expr><call><name>getTraceSQL</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>visitor</name><operator>.</operator><name>getColumnResolvers</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name>columnResolver</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>decrement</name> <init>= <expr><call><name><name>visitor</name><operator>.</operator><name>getQueryLevel</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>decrement</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>queryLevel</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>queryLevel</name><operator>--</operator></expr>;</expr_stmt>
                        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                    <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>(<argument><expr><literal type="string">"queryLevel=0"</literal></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>
                <return>return <expr><name>queryLevel</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>
        <comment type="line">//$FALL-THROUGH$</comment>
        <default>default:</default>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getCost</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="number">2</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>createIndexConditions</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>TableFilter</name></type> <name>filter</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>TableFilter</name></type> <name>tf</name> <init>= <expr><call><name>getTableFilter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>filter</name> <operator>==</operator> <name>tf</name> <operator>&amp;&amp;</operator> <call><name><name>column</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValueType</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>BOOLEAN</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>addIndexCondition</name></name><argument_list>(<argument><expr><call><name><name>IndexCondition</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Comparison</name><operator>.</operator><name>EQUAL</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>ValueExpression</name><operator>.</operator><name>TRUE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Expression</name></type> <name>getNotIfPossible</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Expression</name></type> <name>o</name> <init>= <expr><call><name>optimize</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>o</name> <operator>!=</operator> <name>this</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>o</name><operator>.</operator><name>getNotIfPossible</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Value</name></type> <name>v</name></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><call><name><name>column</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValueType</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BOOLEAN</name></name></expr>:</case>
            <expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>ValueBoolean</name><operator>.</operator><name>FALSE</name></name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TINYINT</name></name></expr>:</case>
            <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name><name>ValueTinyint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>SMALLINT</name></name></expr>:</case>
            <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name><name>ValueSmallint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTEGER</name></name></expr>:</case>
            <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BIGINT</name></name></expr>:</case>
            <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name><name>ValueBigint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>NUMERIC</name></name></expr>:</case>
            <expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>ValueNumeric</name><operator>.</operator><name>ZERO</name></name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>REAL</name></name></expr>:</case>
            <expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>ValueReal</name><operator>.</operator><name>ZERO</name></name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>DOUBLE</name></name></expr>:</case>
            <expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>ValueDouble</name><operator>.</operator><name>ZERO</name></name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>DECFLOAT</name></name></expr>:</case>
            <expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>ValueDecfloat</name><operator>.</operator><name>ZERO</name></name></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <comment type="block">/*
             * Can be replaced with CAST(column AS BOOLEAN) = FALSE, but this
             * replacement can't be optimized further, so it's better to leave
             * NOT (column) as is.
             */</comment>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></switch>
        <return>return <expr><operator>new</operator> <call><name>Comparison</name><argument_list>(<argument><expr><name><name>Comparison</name><operator>.</operator><name>EQUAL</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><call><name><name>ValueExpression</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>
