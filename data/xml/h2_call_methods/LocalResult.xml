<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/result/LocalResult.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TreeMap</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Database</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Session</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>SessionLocal</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>SysProperties</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>Expression</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>ExpressionColumn</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>DbException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>db</name><operator>.</operator><name>MVTempResult</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>Column</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>Table</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>Utils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>TypeInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueBigint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueLob</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueRow</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A local result set contains all row data of a result set.
 * This is the object generated by engine,
 * and it is also used directly by the ResultSet class in the embedded mode.
 * If the result does not fit in memory, it is written to a temporary file.
 */</comment>
<class><specifier>public</specifier> class <name>LocalResult</name> <super_list><implements>implements <super><name>ResultInterface</name></super>, <super><name>ResultTarget</name></super></implements></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * Constructs a new local result object for the specified table.
     *
     * @param session
     *            the session
     * @param table
     *            the table
     * @return the local result
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>LocalResult</name></type> <name>forTable</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Table</name></type> <name>table</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>Column</name><index>[]</index></name></type> <name>columns</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getColumns</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>degree</name> <init>= <expr><name><name>columns</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Expression</name><index>[]</index></name></type> <name>expressions</name> <init>= <expr><operator>new</operator> <name><name>Expression</name><index>[<expr><name>degree</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Database</name></type> <name>database</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>degree</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>expressions</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>ExpressionColumn</name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><name><name>columns</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <decl_stmt><decl><type><name>Column</name></type> <name>rowIdColumn</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getRowIdColumn</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>expressions</name><index>[<expr><name>degree</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>rowIdColumn</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><operator>new</operator> <call><name>ExpressionColumn</name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><name>rowIdColumn</name></expr></argument>)</argument_list></call></expr>
                </then><else>: <expr><operator>new</operator> <call><name>ExpressionColumn</name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
        <return>return <expr><operator>new</operator> <call><name>LocalResult</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>expressions</name></expr></argument>, <argument><expr><name>degree</name></expr></argument>, <argument><expr><name>degree</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>maxMemoryRows</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>SessionLocal</name></type> <name>session</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>visibleColumnCount</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>resultColumnCount</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Expression</name><index>[]</index></name></type> <name>expressions</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>forDataChangeDeltaTable</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>rowId</name></decl>, <decl><type ref="prev"/><name>rowCount</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>Value</name><index>[]</index></name></argument>&gt;</argument_list></name></type> <name>rows</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>SortOrder</name></type> <name>sort</name></decl>;</decl_stmt>
    <comment type="line">// HashSet cannot be used here, because we need to compare values of</comment>
    <comment type="line">// different type or scale properly.</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>TreeMap</name><argument_list type="generic">&lt;<argument><name>ValueRow</name></argument>, <argument><name><name>Value</name><index>[]</index></name></argument>&gt;</argument_list></name></type> <name>distinctRows</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Value</name><index>[]</index></name></type> <name>currentRow</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>offset</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>limit</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>fetchPercent</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>SortOrder</name></type> <name>withTiesSortOrder</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>limitsWereApplied</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ResultExternal</name></type> <name>external</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>distinct</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>int</name><index>[]</index></name></type> <name>distinctIndexes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>closed</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>containsLobs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Boolean</name></type> <name>containsNull</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Construct a local result object.
     */</comment>
    <constructor><specifier>public</specifier> <name>LocalResult</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>private</specifier> <name>LocalResult</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>session</name></name> <operator>=</operator> <name>session</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Construct a local result object.
     *
     * @param session
     *            the session
     * @param expressions
     *            the expression array
     * @param visibleColumnCount
     *            the number of visible columns
     * @param resultColumnCount
     *            the number of columns including visible columns and additional
     *            virtual columns for ORDER BY and DISTINCT ON clauses
     */</comment>
    <constructor><specifier>public</specifier> <name>LocalResult</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>Expression</name><index>[]</index></name></type> <name>expressions</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>visibleColumnCount</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>resultColumnCount</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>session</name></name> <operator>=</operator> <name>session</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>session</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>maxMemoryRows</name></name> <operator>=</operator> <name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>Database</name></type> <name>db</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>db</name><operator>.</operator><name>isPersistent</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>db</name><operator>.</operator><name>isReadOnly</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>maxMemoryRows</name></name> <operator>=</operator> <call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMaxMemoryRows</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>maxMemoryRows</name></name> <operator>=</operator> <name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name>rows</name> <operator>=</operator> <call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>visibleColumnCount</name></name> <operator>=</operator> <name>visibleColumnCount</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>resultColumnCount</name></name> <operator>=</operator> <name>resultColumnCount</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>rowId</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>expressions</name></name> <operator>=</operator> <name>expressions</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isLazy</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Redefine count of maximum rows holds in memory for the result.
     *
     * @param maxValue Maximum rows count in memory.
     *
     * @see SysProperties#MAX_MEMORY_ROWS
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMaxMemoryRows</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>maxValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>maxMemoryRows</name></name> <operator>=</operator> <name>maxValue</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets value collection mode for data change delta tables.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setForDataChangeDeltaTable</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>forDataChangeDeltaTable</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create a shallow copy of the result set. The data and a temporary table
     * (if there is any) is not copied.
     *
     * @param targetSession the session of the copy
     * @return the copy if possible, or null if copying is not possible
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>LocalResult</name></type> <name>createShallowCopy</name><parameter_list>(<parameter><decl><type><name>Session</name></type> <name>targetSession</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>external</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>rows</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>rows</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>rowCount</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>containsLobs</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>ResultExternal</name></type> <name>e2</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>external</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>e2</name> <operator>=</operator> <call><name><name>external</name><operator>.</operator><name>createShallowCopy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>e2</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>LocalResult</name></type> <name>copy</name> <init>= <expr><operator>new</operator> <call><name>LocalResult</name><argument_list>(<argument><expr><operator>(</operator><name>SessionLocal</name><operator>)</operator> <name>targetSession</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>copy</name><operator>.</operator><name>maxMemoryRows</name></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>maxMemoryRows</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>copy</name><operator>.</operator><name>visibleColumnCount</name></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>visibleColumnCount</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>copy</name><operator>.</operator><name>resultColumnCount</name></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>resultColumnCount</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>copy</name><operator>.</operator><name>expressions</name></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>expressions</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>copy</name><operator>.</operator><name>rowId</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>copy</name><operator>.</operator><name>rowCount</name></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>rowCount</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>copy</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>copy</name><operator>.</operator><name>sort</name></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>sort</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>copy</name><operator>.</operator><name>distinctRows</name></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>distinctRows</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>copy</name><operator>.</operator><name>distinct</name></name> <operator>=</operator> <name>distinct</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>copy</name><operator>.</operator><name>distinctIndexes</name></name> <operator>=</operator> <name>distinctIndexes</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>copy</name><operator>.</operator><name>currentRow</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>copy</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>copy</name><operator>.</operator><name>limit</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>copy</name><operator>.</operator><name>external</name></name> <operator>=</operator> <name>e2</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>copy</name><operator>.</operator><name>containsNull</name></name> <operator>=</operator> <name>containsNull</name></expr>;</expr_stmt>
        <return>return <expr><name>copy</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets sort order to be used by this result. When rows are presorted by the
     * query this method should not be used.
     *
     * @param sort the sort order
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSortOrder</name><parameter_list>(<parameter><decl><type><name>SortOrder</name></type> <name>sort</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sort</name></name> <operator>=</operator> <name>sort</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Remove duplicate rows.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDistinct</name><parameter_list>()</parameter_list> <block>{<block_content>
        <assert>assert <expr><name>distinctIndexes</name> <operator>==</operator> <literal type="null">null</literal></expr>;</assert>
        <expr_stmt><expr><name>distinct</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>distinctRows</name> <operator>=</operator> <operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCompareMode</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Remove rows with duplicates in columns with specified indexes.
     *
     * @param distinctIndexes distinct indexes
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDistinct</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>distinctIndexes</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <assert>assert <expr><operator>!</operator><name>distinct</name></expr>;</assert>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>distinctIndexes</name></name> <operator>=</operator> <name>distinctIndexes</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>distinctRows</name> <operator>=</operator> <operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCompareMode</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return whether this result is a distinct result
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isAnyDistinct</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>distinct</name> <operator>||</operator> <name>distinctIndexes</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check if this result set contains the given row.
     *
     * @param values the row
     * @return true if the row exists
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>containsDistinct</name><parameter_list>(<parameter><decl><type><name><name>Value</name><index>[]</index></name></type> <name>values</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <assert>assert <expr><name><name>values</name><operator>.</operator><name>length</name></name> <operator>==</operator> <name>visibleColumnCount</name></expr>;</assert>
        <if_stmt><if>if <condition>(<expr><name>external</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>external</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>distinctRows</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>distinctRows</name> <operator>=</operator> <operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCompareMode</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name><name>Value</name><index>[]</index></name></type> <name>row</name> <range>: <expr><name>rows</name></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>ValueRow</name></type> <name>array</name> <init>= <expr><call><name>getDistinctRow</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>distinctRows</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><call><name><name>array</name><operator>.</operator><name>getList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>ValueRow</name></type> <name>array</name> <init>= <expr><call><name><name>ValueRow</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>distinctRows</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check if this result set contains a NULL value. This method may reset
     * this result.
     *
     * @return true if there is a NULL value
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>containsNull</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Boolean</name></type> <name>r</name> <init>= <expr><name>containsNull</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <label><name>loop</name>:</label> <while>while <condition>(<expr><call><name>next</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name><name>Value</name><index>[]</index></name></type> <name>row</name> <init>= <expr><name>currentRow</name></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>visibleColumnCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>containsNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                        <break>break <name>loop</name>;</break>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></while>
            <expr_stmt><expr><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>containsNull</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>r</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Remove the row from the result set if it exists.
     *
     * @param values the row
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeDistinct</name><parameter_list>(<parameter><decl><type><name><name>Value</name><index>[]</index></name></type> <name>values</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>distinct</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <assert>assert <expr><name><name>values</name><operator>.</operator><name>length</name></name> <operator>==</operator> <name>visibleColumnCount</name></expr>;</assert>
        <if_stmt><if>if <condition>(<expr><name>distinctRows</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>distinctRows</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>ValueRow</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>rowCount</name> <operator>=</operator> <call><name><name>distinctRows</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>rowCount</name> <operator>=</operator> <call><name><name>external</name><operator>.</operator><name>removeRow</name></name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>reset</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>rowId</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>currentRow</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>external</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>external</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Retrieve the current row
     * @return row
     */</comment>
    <function><type><specifier>public</specifier> <name>Row</name></type> <name>currentRowForTable</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>degree</name> <init>= <expr><name>visibleColumnCount</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Value</name><index>[]</index></name></type> <name>currentRow</name> <init>= <expr><name><name>this</name><operator>.</operator><name>currentRow</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Row</name></type> <name>row</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRowFactory</name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>createRow</name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><name>currentRow</name></expr></argument>, <argument><expr><name>degree</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>SearchRow</name><operator>.</operator><name>MEMORY_CALCULATE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>row</name><operator>.</operator><name>setKey</name></name><argument_list>(<argument><expr><name><name>currentRow</name><index>[<expr><name>degree</name></expr>]</index></name><operator>.</operator><call><name>getLong</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>row</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>Value</name><index>[]</index></name></type> <name>currentRow</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>currentRow</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>next</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>closed</name> <operator>&amp;&amp;</operator> <name>rowId</name> <operator>&lt;</operator> <name>rowCount</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>rowId</name><operator>++</operator></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>rowId</name> <operator>&lt;</operator> <name>rowCount</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>external</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>currentRow</name> <operator>=</operator> <call><name><name>external</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>currentRow</name> <operator>=</operator> <call><name><name>rows</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>rowId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>currentRow</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>getRowId</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>rowId</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isAfterLast</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>rowId</name> <operator>&gt;=</operator> <name>rowCount</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>cloneLobs</name><parameter_list>(<parameter><decl><type><name><name>Value</name><index>[]</index></name></type> <name>values</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>values</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Value</name></type> <name>v</name> <init>= <expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>v</name> <operator>instanceof</operator> <name>ValueLob</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>forDataChangeDeltaTable</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>containsLobs</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <decl_stmt><decl><type><name>ValueLob</name></type> <name>v2</name> <init>= <expr><operator>(</operator><operator>(</operator><name>ValueLob</name><operator>)</operator> <name>v</name><operator>)</operator><operator>.</operator><call><name>copyToResult</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>v2</name> <operator>!=</operator> <name>v</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>containsLobs</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>session</name><operator>.</operator><name>addTemporaryLob</name></name><argument_list>(<argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>ValueRow</name></type> <name>getDistinctRow</name><parameter_list>(<parameter><decl><type><name><name>Value</name><index>[]</index></name></type> <name>values</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>distinctIndexes</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><name><name>distinctIndexes</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Value</name><index>[]</index></name></type> <name>newValues</name> <init>= <expr><operator>new</operator> <name><name>Value</name><index>[<expr><name>cnt</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cnt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name><name>newValues</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>values</name><index>[<expr><name><name>distinctIndexes</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name>values</name> <operator>=</operator> <name>newValues</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>values</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <name>visibleColumnCount</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>values</name> <operator>=</operator> <call><name><name>Arrays</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><name>visibleColumnCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>ValueRow</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>createExternalResult</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>external</name> <operator>=</operator> <call><name><name>MVTempResult</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>expressions</name></expr></argument>, <argument><expr><name>distinct</name></expr></argument>, <argument><expr><name>distinctIndexes</name></expr></argument>, <argument><expr><name>visibleColumnCount</name></expr></argument>,
                <argument><expr><name>resultColumnCount</name></expr></argument>, <argument><expr><name>sort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Add a row for a table.
     *
     * @param row the row to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addRowForTable</name><parameter_list>(<parameter><decl><type><name>Row</name></type> <name>row</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>degree</name> <init>= <expr><name>visibleColumnCount</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Value</name><index>[]</index></name></type> <name>values</name> <init>= <expr><operator>new</operator> <name><name>Value</name><index>[<expr><name>degree</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>degree</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>row</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name><name>values</name><index>[<expr><name>degree</name></expr>]</index></name> <operator>=</operator> <call><name><name>ValueBigint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>row</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addRowInternal</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Add a row to this object.
     *
     * @param values the row to add
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>addRow</name><parameter_list>(<parameter><decl><type><name>Value</name><modifier>...</modifier></type> <name>values</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <assert>assert <expr><name><name>values</name><operator>.</operator><name>length</name></name> <operator>==</operator> <name>resultColumnCount</name></expr>;</assert>
        <expr_stmt><expr><call><name>cloneLobs</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addRowInternal</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>addRowInternal</name><parameter_list>(<parameter><decl><type><name>Value</name><modifier>...</modifier></type> <name>values</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isAnyDistinct</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>distinctRows</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>ValueRow</name></type> <name>distinctRow</name> <init>= <expr><call><name>getDistinctRow</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>Value</name><index>[]</index></name></type> <name>previous</name> <init>= <expr><call><name><name>distinctRows</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>distinctRow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>previous</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>sort</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>sort</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name>previous</name></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>distinctRows</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>distinctRow</name></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>rowCount</name> <operator>=</operator> <call><name><name>distinctRows</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>rowCount</name> <operator>&gt;</operator> <name>maxMemoryRows</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>createExternalResult</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>rowCount</name> <operator>=</operator> <call><name><name>external</name><operator>.</operator><name>addRows</name></name><argument_list>(<argument><expr><call><name><name>distinctRows</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>distinctRows</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>rowCount</name> <operator>=</operator> <call><name><name>external</name><operator>.</operator><name>addRow</name></name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>rows</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>rowCount</name><operator>++</operator></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>rows</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>maxMemoryRows</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>addRowsToDisk</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>addRowsToDisk</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>external</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>createExternalResult</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>rowCount</name> <operator>=</operator> <call><name><name>external</name><operator>.</operator><name>addRows</name></name><argument_list>(<argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rows</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getVisibleColumnCount</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>visibleColumnCount</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * This method is called after all rows have been added.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>done</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>external</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addRowsToDisk</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>isAnyDistinct</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>rows</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>distinctRows</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>sort</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>limit</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>limitsWereApplied</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>boolean</name></type> <name>withLimit</name> <init>= <expr><name>limit</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>withTiesSortOrder</name> <operator>==</operator> <literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>withLimit</name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>endExclusive</name> <init>= <expr><call><name><name>rows</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <name>endExclusive</name></expr>)</condition> <block>{<block_content>
                        <decl_stmt><decl><type><name>int</name></type> <name>fromInclusive</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name>offset</name></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>withLimit</name> <operator>&amp;&amp;</operator> <name>limit</name> <operator>&lt;</operator> <name>endExclusive</name> <operator>-</operator> <name>fromInclusive</name></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name>endExclusive</name> <operator>=</operator> <name>fromInclusive</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>limit</name></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><call><name><name>sort</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>fromInclusive</name></expr></argument>, <argument><expr><name>endExclusive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name><name>sort</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>applyOffsetAndLimit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>applyOffsetAndLimit</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>limitsWereApplied</name></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>offset</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>limit</name> <init>= <expr><name><name>this</name><operator>.</operator><name>limit</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>offset</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>limit</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>fetchPercent</name> <operator>||</operator> <name>rowCount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>fetchPercent</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>limit</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>limit</name> <operator>&gt;</operator> <literal type="number">100</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInvalidValueException</name></name><argument_list>(<argument><expr><literal type="string">"FETCH PERCENT"</literal></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <comment type="line">// Oracle rounds percent up, do the same for now</comment>
            <expr_stmt><expr><name>limit</name> <operator>=</operator> <operator>(</operator><name>limit</name> <operator>*</operator> <name>rowCount</name> <operator>+</operator> <literal type="number">99</literal><operator>)</operator> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>clearAll</name> <init>= <expr><name>offset</name> <operator>&gt;=</operator> <name>rowCount</name> <operator>||</operator> <name>limit</name> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>clearAll</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>remaining</name> <init>= <expr><name>rowCount</name> <operator>-</operator> <name>offset</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>limit</name> <operator>=</operator> <ternary><condition><expr><name>limit</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>remaining</name></expr> </then><else>: <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>remaining</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>offset</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>remaining</name> <operator>&lt;=</operator> <name>limit</name></expr>)</condition> <block>{<block_content>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>limit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name>distinctRows</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>rowCount</name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>external</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>clearAll</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>rows</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>to</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>offset</name> <operator>+</operator> <name>limit</name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>withTiesSortOrder</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name><name>Value</name><index>[]</index></name></type> <name>expected</name> <init>= <expr><call><name><name>rows</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>to</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><name>to</name> <operator>&lt;</operator> <call><name><name>rows</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>withTiesSortOrder</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><call><name><name>rows</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>to</name><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>rowCount</name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></while>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>offset</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>to</name> <operator>!=</operator> <call><name><name>rows</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <comment type="line">// avoid copying the whole array for each row</comment>
                <expr_stmt><expr><name>rows</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>rows</name><operator>.</operator><name>subList</name></name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>offset</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>clearAll</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>external</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>external</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>trimExternal</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>trimExternal</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>limit</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ResultExternal</name></type> <name>temp</name> <init>= <expr><name>external</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>external</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>temp</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><operator>--</operator><name>offset</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>temp</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <decl_stmt><decl><type><name><name>Value</name><index>[]</index></name></type> <name>row</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><operator>--</operator><name>limit</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>row</name> <operator>=</operator> <call><name><name>temp</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>rows</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>rows</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>maxMemoryRows</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>addRowsToDisk</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>
        <if_stmt><if>if <condition>(<expr><name>withTiesSortOrder</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>row</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>Value</name><index>[]</index></name></type> <name>expected</name> <init>= <expr><name>row</name></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><operator>(</operator><name>row</name> <operator>=</operator> <call><name><name>temp</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>withTiesSortOrder</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>rows</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>rowCount</name><operator>++</operator></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>rows</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>maxMemoryRows</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>addRowsToDisk</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></while>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>external</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>addRowsToDisk</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>temp</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>getRowCount</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>rowCount</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>limitsWereApplied</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>limitsWereApplied</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>hasNext</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>!</operator><name>closed</name> <operator>&amp;&amp;</operator> <name>rowId</name> <operator>&lt;</operator> <name>rowCount</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Set the number of rows that this result will return at the maximum.
     *
     * @param limit the limit (-1 means no limit, 0 means no rows)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLimit</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>limit</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>limit</name></name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @param fetchPercent whether limit expression specifies percentage of rows
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFetchPercent</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>fetchPercent</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fetchPercent</name></name> <operator>=</operator> <name>fetchPercent</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Enables inclusion of tied rows to result and sets the sort order for tied
     * rows. The specified sort order must be the same as sort order if sort
     * order was set. Passed value will be used if sort order was not set that
     * is possible when rows are presorted.
     *
     * @param withTiesSortOrder the sort order for tied rows
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setWithTies</name><parameter_list>(<parameter><decl><type><name>SortOrder</name></type> <name>withTiesSortOrder</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <assert>assert <expr><name>sort</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>sort</name> <operator>==</operator> <name>withTiesSortOrder</name></expr>;</assert>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>withTiesSortOrder</name></name> <operator>=</operator> <name>withTiesSortOrder</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>needToClose</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>external</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>external</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>external</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>external</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>closed</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getAlias</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>expressions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getAlias</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getTableName</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>expressions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getTableName</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getSchemaName</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>expressions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getSchemaName</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getColumnName</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>expressions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getColumnName</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>TypeInfo</name></type> <name>getColumnType</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>expressions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getNullable</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>expressions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getNullable</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isIdentity</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>expressions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>isIdentity</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Set the offset of the first row to return.
     *
     * @param offset the offset
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOffset</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>super</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" columns: "</literal> <operator>+</operator> <name>visibleColumnCount</name> <operator>+</operator>
                <literal type="string">" rows: "</literal> <operator>+</operator> <name>rowCount</name> <operator>+</operator> <literal type="string">" pos: "</literal> <operator>+</operator> <name>rowId</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check if this result set is closed.
     *
     * @return true if it is
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isClosed</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>closed</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getFetchSize</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>setFetchSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fetchSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// ignore</comment>
    </block_content>}</block></function>

}</block></class>
</unit>
