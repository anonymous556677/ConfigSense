<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/mvstore/type/MetaType.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>type</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>DataUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>WriteBuffer</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Class DBMetaType is a type for values in the type registry map.
 *
 * @param &lt;D&gt; type of opaque parameter passed as an operational context to Factory.create()
 *
 * @author &lt;a href='mailto:andrei.tokar@gmail.com'&gt;Andrei Tokar&lt;/a&gt;
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name><name>MetaType</name><parameter_list>&lt;<parameter><name>D</name></parameter>&gt;</parameter_list></name> <super_list><extends>extends <super><name><name>BasicDataType</name><argument_list type="generic">&lt;<argument><name><name>DataType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>D</name></type> <name>database</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Thread</name><operator>.</operator><name>UncaughtExceptionHandler</name></name></type> <name>exceptionHandler</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>cache</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>MetaType</name><parameter_list>(<parameter><decl><type><name>D</name></type> <name>database</name></decl></parameter>, <parameter><decl><type><name><name>Thread</name><operator>.</operator><name>UncaughtExceptionHandler</name></name></type> <name>exceptionHandler</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>database</name></name> <operator>=</operator> <name>database</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>exceptionHandler</name></name> <operator>=</operator> <name>exceptionHandler</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name><name>DataType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name><name>DataType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getMemory</name><parameter_list>(<parameter><decl><type><name><name>DataType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>Constants</name><operator>.</operator><name>MEMORY_OBJECT</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
    <annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>WriteBuffer</name></type> <name>buff</name></decl></parameter>, <parameter><decl><type><name><name>DataType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>clazz</name> <init>= <expr><call><name><name>obj</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>StatefulDataType</name><argument_list type="generic">&lt;<argument><name>D</name></argument>&gt;</argument_list></name></type> <name>statefulDataType</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>obj</name> <operator>instanceof</operator> <name>StatefulDataType</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>statefulDataType</name> <operator>=</operator> <operator>(</operator><name><name>StatefulDataType</name><argument_list type="generic">&lt;<argument><name>D</name></argument>&gt;</argument_list></name><operator>)</operator> <name>obj</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>StatefulDataType</name><operator>.</operator><name><name>Factory</name><argument_list type="generic">&lt;<argument><name>D</name></argument>&gt;</argument_list></name></name></type> <name>factory</name> <init>= <expr><call><name><name>statefulDataType</name><operator>.</operator><name>getFactory</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>factory</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>clazz</name> <operator>=</operator> <call><name><name>factory</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>className</name> <init>= <expr><call><name><name>clazz</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name><name>className</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>putVarInt</name></name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call>
            <operator>.</operator><call><name>putStringData</name><argument_list>(<argument><expr><name>className</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>statefulDataType</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>statefulDataType</name><operator>.</operator><name>save</name></name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
    <annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>DataType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>buff</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name><name>DataUtils</name><operator>.</operator><name>readVarInt</name></name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>className</name> <init>= <expr><call><name><name>DataUtils</name><operator>.</operator><name>readString</name></name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>Object</name></type> <name>o</name> <init>= <expr><call><name><name>cache</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>o</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>o</name> <operator>instanceof</operator> <name><name>StatefulDataType</name><operator>.</operator><name>Factory</name></name></expr>)</condition> <block>{<block_content>
                    <return>return <expr><operator>(</operator><operator>(</operator><name><name>StatefulDataType</name><operator>.</operator><name><name>Factory</name><argument_list type="generic">&lt;<argument><name>D</name></argument>&gt;</argument_list></name></name><operator>)</operator> <name>o</name><operator>)</operator><operator>.</operator><call><name>create</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>database</name></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <return>return <expr><operator>(</operator><name><name>DataType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><operator>)</operator> <name>o</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>clazz</name> <init>= <expr><call><name><name>Class</name><operator>.</operator><name>forName</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>singleton</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Object</name></type> <name>obj</name></decl>;</decl_stmt>
            <try>try <block>{<block_content>
                <expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name><name>clazz</name><operator>.</operator><name>getDeclaredField</name></name><argument_list>(<argument><expr><literal type="string">"INSTANCE"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>singleton</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ReflectiveOperationException</name></type> | <type><name>NullPointerException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name><name>clazz</name><operator>.</operator><name>getDeclaredConstructor</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>newInstance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
            <if_stmt><if>if <condition>(<expr><name>obj</name> <operator>instanceof</operator> <name><name>StatefulDataType</name><operator>.</operator><name>Factory</name></name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name><name>StatefulDataType</name><operator>.</operator><name><name>Factory</name><argument_list type="generic">&lt;<argument><name>D</name></argument>&gt;</argument_list></name></name></type> <name>factory</name> <init>= <expr><operator>(</operator><name><name>StatefulDataType</name><operator>.</operator><name><name>Factory</name><argument_list type="generic">&lt;<argument><name>D</name></argument>&gt;</argument_list></name></name><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>cache</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>, <argument><expr><name>factory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><call><name><name>factory</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>database</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>singleton</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>cache</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><operator>(</operator><name><name>DataType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><operator>)</operator> <name>obj</name></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ReflectiveOperationException</name></type> | <type><name>SecurityException</name></type> | <type><name>IllegalArgumentException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>exceptionHandler</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>exceptionHandler</name><operator>.</operator><name>uncaughtException</name></name><argument_list>(<argument><expr><call><name><name>Thread</name><operator>.</operator><name>currentThread</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name><name>DataType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><index>[]</index></name></type> <name>createStorage</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <name><name>DataType</name><index>[<expr><name>size</name></expr>]</index></name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
