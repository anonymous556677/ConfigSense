<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/engine/DbObject.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>Parser</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>DbException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>Trace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>Table</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>HasSQL</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A database object such as a table, an index, or a user.
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>DbObject</name> <super_list><implements>implements <super><name>HasSQL</name></super></implements></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * The object is of the type table or view.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>TABLE_OR_VIEW</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * This object is an index.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>INDEX</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * This object is a user.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>USER</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * This object is a sequence.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SEQUENCE</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * This object is a trigger.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>TRIGGER</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * This object is a constraint (check constraint, unique constraint, or
     * referential constraint).
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CONSTRAINT</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * This object is a setting.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SETTING</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * This object is a role.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>ROLE</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * This object is a right.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>RIGHT</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * This object is an alias for a Java function.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>FUNCTION_ALIAS</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * This object is a schema.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SCHEMA</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * This object is a constant.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CONSTANT</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * This object is a domain.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DOMAIN</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * This object is a comment.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>COMMENT</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * This object is a user-defined aggregate function.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>AGGREGATE</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * This object is a synonym.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SYNONYM</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The database.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Database</name></type> <name>database</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The trace module.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Trace</name></type> <name>trace</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The comment (if set).
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>comment</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>id</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>objectName</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>modificationId</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>temporary</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Initialize some attributes of this object.
     *
     * @param db the database
     * @param objectId the object id
     * @param name the name
     * @param traceModuleId the trace module id
     */</comment>
    <constructor><specifier>protected</specifier> <name>DbObject</name><parameter_list>(<parameter><decl><type><name>Database</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>objectId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>traceModuleId</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>database</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>trace</name></name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>getTrace</name></name><argument_list>(<argument><expr><name>traceModuleId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>objectId</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>objectName</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>modificationId</name></name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>getModificationMetaId</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Tell the object that is was modified.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>setModified</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>modificationId</name></name> <operator>=</operator> <ternary><condition><expr><name>database</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><call><name><name>database</name><operator>.</operator><name>getNextModificationMetaId</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>long</name></type> <name>getModificationId</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>modificationId</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <specifier>final</specifier> <name>void</name></type> <name>setObjectName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>objectName</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getSQL</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sqlFlags</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>Parser</name><operator>.</operator><name>quoteIdentifier</name></name><argument_list>(<argument><expr><name>objectName</name></expr></argument>, <argument><expr><name>sqlFlags</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>StringBuilder</name></type> <name>getSQL</name><parameter_list>(<parameter><decl><type><name>StringBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sqlFlags</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>ParserUtil</name><operator>.</operator><name>quoteIdentifier</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>objectName</name></expr></argument>, <argument><expr><name>sqlFlags</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the list of dependent children (for tables, this includes indexes and
     * so on).
     *
     * @return the list of children, or {@code null}
     */</comment>
    <function><type><specifier>public</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>DbObject</name></argument>&gt;</argument_list></name></type> <name>getChildren</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the database.
     *
     * @return the database
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>Database</name></type> <name>getDatabase</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>database</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the unique object id.
     *
     * @return the object id
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>getId</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>id</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the name.
     *
     * @return the name
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>objectName</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Set the main attributes to null to make sure the object is no longer
     * used.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>invalidate</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>setModified</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>id</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>database</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>trace</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>objectName</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>isValid</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>id</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Build a SQL statement to re-create the object, or to create a copy of the
     * object with a different name or referencing a different table
     *
     * @param table the new table
     * @param quotedName the quoted name
     * @return the SQL statement
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>String</name></type> <name>getCreateSQLForCopy</name><parameter_list>(<parameter><decl><type><name>Table</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>quotedName</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Construct the CREATE ... SQL statement for this object for meta table.
     *
     * @return the SQL statement
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getCreateSQLForMeta</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getCreateSQL</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Construct the CREATE ... SQL statement for this object.
     *
     * @return the SQL statement
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>String</name></type> <name>getCreateSQL</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Construct a DROP ... SQL statement for this object.
     *
     * @return the SQL statement
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getDropSQL</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the object type.
     *
     * @return the object type
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>int</name></type> <name>getType</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Delete all dependent children objects and resources of this object.
     *
     * @param session the session
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>removeChildrenAndResources</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Check if renaming is allowed. Does nothing when allowed.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>checkRename</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// Allowed by default</comment>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Rename the object.
     *
     * @param newName the new name
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>rename</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>newName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>checkRename</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>objectName</name> <operator>=</operator> <name>newName</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setModified</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check if this object is temporary (for example, a temporary table).
     *
     * @return true if is temporary
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isTemporary</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>temporary</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Tell this object that it is temporary or not.
     *
     * @param temporary the new value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTemporary</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>temporary</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>temporary</name></name> <operator>=</operator> <name>temporary</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Change the comment of this object.
     *
     * @param comment the new comment, or null for no comment
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setComment</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>comment</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>comment</name></name> <operator>=</operator> <ternary><condition><expr><name>comment</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>comment</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>comment</name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the current comment of this object.
     *
     * @return the comment, or null if not set
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getComment</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>comment</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>objectName</name> <operator>+</operator> <literal type="string">":"</literal> <operator>+</operator> <name>id</name> <operator>+</operator> <literal type="string">":"</literal> <operator>+</operator> <call><name><name>super</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>
