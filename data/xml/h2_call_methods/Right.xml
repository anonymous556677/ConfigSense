<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/engine/Right.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>DbException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>Trace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>Schema</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>Table</name></name>;</import>

<comment type="block" format="javadoc">/**
 * An access right. Rights are regular database objects, but have generated
 * names.
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>Right</name> <super_list><extends>extends <super><name>DbObject</name></super></extends></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * The right bit mask that means: selecting from a table is allowed.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SELECT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The right bit mask that means: deleting rows from a table is allowed.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DELETE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The right bit mask that means: inserting rows into a table is allowed.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>INSERT</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The right bit mask that means: updating data is allowed.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>UPDATE</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The right bit mask that means: create/alter/drop schema is allowed.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>ALTER_ANY_SCHEMA</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The right bit mask that means: user is a schema owner. This mask isn't
     * used in GRANT / REVOKE statements.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SCHEMA_OWNER</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The right bit mask that means: select, insert, update, delete, and update
     * for this object is allowed.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>ALL</name> <init>= <expr><name>SELECT</name> <operator>|</operator> <name>DELETE</name> <operator>|</operator> <name>INSERT</name> <operator>|</operator> <name>UPDATE</name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * To whom the right is granted.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>RightOwner</name></type> <name>grantee</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The granted role, or null if a right was granted.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Role</name></type> <name>grantedRole</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The granted right.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>grantedRight</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The object. If the right is global, this is null.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>DbObject</name></type> <name>grantedObject</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>Right</name><parameter_list>(<parameter><decl><type><name>Database</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>RightOwner</name></type> <name>grantee</name></decl></parameter>, <parameter><decl><type><name>Role</name></type> <name>grantedRole</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="string">"RIGHT_"</literal> <operator>+</operator> <name>id</name></expr></argument>, <argument><expr><name><name>Trace</name><operator>.</operator><name>USER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>grantee</name></name> <operator>=</operator> <name>grantee</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>grantedRole</name></name> <operator>=</operator> <name>grantedRole</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>Right</name><parameter_list>(<parameter><decl><type><name>Database</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>RightOwner</name></type> <name>grantee</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>grantedRight</name></decl></parameter>, <parameter><decl><type><name>DbObject</name></type> <name>grantedObject</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Trace</name><operator>.</operator><name>USER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>grantee</name></name> <operator>=</operator> <name>grantee</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>grantedRight</name></name> <operator>=</operator> <name>grantedRight</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>grantedObject</name></name> <operator>=</operator> <name>grantedObject</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>appendRight</name><parameter_list>(<parameter><decl><type><name>StringBuilder</name></type> <name>buff</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>comma</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>right</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>comma</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>comma</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getRights</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>buff</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>grantedRight</name> <operator>==</operator> <name>ALL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"ALL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>comma</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>appendRight</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>grantedRight</name></expr></argument>, <argument><expr><name>SELECT</name></expr></argument>, <argument><expr><literal type="string">"SELECT"</literal></expr></argument>, <argument><expr><name>comma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>appendRight</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>grantedRight</name></expr></argument>, <argument><expr><name>DELETE</name></expr></argument>, <argument><expr><literal type="string">"DELETE"</literal></expr></argument>, <argument><expr><name>comma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>appendRight</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>grantedRight</name></expr></argument>, <argument><expr><name>INSERT</name></expr></argument>, <argument><expr><literal type="string">"INSERT"</literal></expr></argument>, <argument><expr><name>comma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>comma</name> <operator>=</operator> <call><name>appendRight</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>grantedRight</name></expr></argument>, <argument><expr><name>UPDATE</name></expr></argument>, <argument><expr><literal type="string">"UPDATE"</literal></expr></argument>, <argument><expr><name>comma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>appendRight</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>grantedRight</name></expr></argument>, <argument><expr><name>ALTER_ANY_SCHEMA</name></expr></argument>, <argument><expr><literal type="string">"ALTER ANY SCHEMA"</literal></expr></argument>, <argument><expr><name>comma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><call><name><name>buff</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Role</name></type> <name>getGrantedRole</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>grantedRole</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>DbObject</name></type> <name>getGrantedObject</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>grantedObject</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>DbObject</name></type> <name>getGrantee</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>grantee</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getCreateSQLForCopy</name><parameter_list>(<parameter><decl><type><name>Table</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>quotedName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getCreateSQLForCopy</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>getCreateSQLForCopy</name><parameter_list>(<parameter><decl><type><name>DbObject</name></type> <name>object</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"GRANT "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>grantedRole</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>grantedRole</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>DEFAULT_SQL_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>getRights</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>object</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>object</name> <operator>instanceof</operator> <name>Schema</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" ON SCHEMA "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>object</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>DEFAULT_SQL_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>object</name> <operator>instanceof</operator> <name>Table</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" ON "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>object</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>DEFAULT_SQL_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" TO "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>grantee</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>DEFAULT_SQL_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>builder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getCreateSQL</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getCreateSQLForCopy</name><argument_list>(<argument><expr><name>grantedObject</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>DbObject</name><operator>.</operator><name>RIGHT</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>removeChildrenAndResources</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>grantedRole</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>grantee</name><operator>.</operator><name>revokeRole</name></name><argument_list>(<argument><expr><name>grantedRole</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>grantee</name><operator>.</operator><name>revokeRight</name></name><argument_list>(<argument><expr><name>grantedObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>removeMeta</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>grantedRole</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>grantedObject</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>grantee</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>checkRename</name><parameter_list>()</parameter_list> <block>{<block_content>
        <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>()</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRightMask</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rightMask</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>grantedRight</name> <operator>=</operator> <name>rightMask</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getRightMask</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>grantedRight</name></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>
