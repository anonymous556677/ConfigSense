<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/mvstore/db/Store.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>db</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>channels</name><operator>.</operator><name>FileChannel</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>BitSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ConcurrentHashMap</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>api</name><operator>.</operator><name>ErrorCode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>CreateTableData</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Database</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>SessionLocal</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>DbException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>DataUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>FileStore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>MVStore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>MVStoreException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>MVStoreTool</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>tx</name><operator>.</operator><name>Transaction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>tx</name><operator>.</operator><name>TransactionStore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>type</name><operator>.</operator><name>MetaType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>store</name><operator>.</operator><name>InDoubtTransaction</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>store</name><operator>.</operator><name>fs</name><operator>.</operator><name>FileChannelInputStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>store</name><operator>.</operator><name>fs</name><operator>.</operator><name>FileUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>StringUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>Utils</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A store with open tables.
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>Store</name> <block>{

    <comment type="block" format="javadoc">/**
     * Convert password from byte[] to char[].
     *
     * @param key password as byte[]
     * @return password as char[].
     */</comment>
    <function><type><specifier>static</specifier> <name><name>char</name><index>[]</index></name></type> <name>decodePassword</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>char</name><index>[]</index></name></type> <name>password</name> <init>= <expr><operator>new</operator> <name><name>char</name><index>[<expr><name><name>key</name><operator>.</operator><name>length</name></name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>password</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>password</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>key</name><index>[<expr><name>i</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">255</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>key</name><index>[<expr><name>i</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>password</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * The map of open tables.
     * Key: the map name, value: the table.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>ConcurrentHashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>MVTable</name></argument>&gt;</argument_list></name></type> <name>tableMap</name> <init>= <expr><operator>new</operator> <call><name><name>ConcurrentHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The store.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>MVStore</name></type> <name>mvStore</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The transaction store.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>TransactionStore</name></type> <name>transactionStore</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>statisticsStart</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>temporaryMapId</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>encrypted</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>fileName</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Creates the store.
     *
     * @param db the database
     */</comment>
    <constructor><specifier>public</specifier> <name>Store</name><parameter_list>(<parameter><decl><type><name>Database</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>key</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>getFileEncryptionKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>dbPath</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>getDatabasePath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>MVStore</name><operator>.</operator><name>Builder</name></name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name><name>MVStore</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>encrypted</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>dbPath</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>fileName</name> <init>= <expr><name>dbPath</name> <operator>+</operator> <name><name>Constants</name><operator>.</operator><name>SUFFIX_MV_FILE</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>MVStoreTool</name><operator>.</operator><name>compactCleanUp</name></name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>fileName</name></name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>pageSplitSize</name></name><argument_list>(<argument><expr><call><name><name>db</name><operator>.</operator><name>getPageSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>db</name><operator>.</operator><name>isReadOnly</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>readOnly</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <comment type="line">// possibly create the directory</comment>
                <decl_stmt><decl><type><name>boolean</name></type> <name>exists</name> <init>= <expr><call><name><name>FileUtils</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>exists</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>FileUtils</name><operator>.</operator><name>canWrite</name></name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <comment type="line">// read only</comment>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>dir</name> <init>= <expr><call><name><name>FileUtils</name><operator>.</operator><name>getParent</name></name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>createDirectories</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>autoCompactFillRate</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>getSettings</name></name><argument_list>()</argument_list></call><operator>.</operator><name>autoCompactFillRate</name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>autoCompactFillRate</name> <operator>&lt;=</operator> <literal type="number">100</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>autoCompactFillRate</name></name><argument_list>(<argument><expr><name>autoCompactFillRate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>key</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>encrypted</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>encryptionKey</name></name><argument_list>(<argument><expr><call><name>decodePassword</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>db</name><operator>.</operator><name>getSettings</name></name><argument_list>()</argument_list></call><operator>.</operator><name>compressData</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>compress</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// use a larger page split size to improve the compression ratio</comment>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>pageSplitSize</name></name><argument_list>(<argument><expr><literal type="number">64</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>backgroundExceptionHandler</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>t</name></decl></parameter>, <parameter><decl><name>e</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>db</name><operator>.</operator><name>setBackgroundException</name></name><argument_list>(<argument><expr><call><name><name>DbException</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// always start without background thread first, and if necessary,</comment>
            <comment type="line">// it will be set up later, after db has been fully started,</comment>
            <comment type="line">// otherwise background thread would compete for store lock</comment>
            <comment type="line">// with maps opening procedure</comment>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>autoCommitDisabled</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>encrypted</name></name> <operator>=</operator> <name>encrypted</name></expr>;</expr_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mvStore</name></name> <operator>=</operator> <call><name><name>builder</name><operator>.</operator><name>open</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>FileStore</name></type> <name>fs</name> <init>= <expr><call><name><name>mvStore</name><operator>.</operator><name>getFileStore</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>fileName</name> <operator>=</operator> <ternary><condition><expr><name>fs</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>fs</name><operator>.</operator><name>getFileName</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>db</name><operator>.</operator><name>getSettings</name></name><argument_list>()</argument_list></call><operator>.</operator><name>reuseSpace</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>mvStore</name><operator>.</operator><name>setReuseSpace</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>mvStore</name><operator>.</operator><name>setVersionsToKeep</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>transactionStore</name></name> <operator>=</operator> <operator>new</operator> <call><name>TransactionStore</name><argument_list>(<argument><expr><name>mvStore</name></expr></argument>,
                    <argument><expr><operator>new</operator> <call><name><name>MetaType</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>mvStore</name><operator>.</operator><name>backgroundExceptionHandler</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>ValueDataType</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name><name>db</name><operator>.</operator><name>getLockTimeout</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>MVStoreException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><call><name>convertMVStoreException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Convert a MVStoreException to the similar exception used
     * for the table/sql layers.
     *
     * @param e the illegal state exception
     * @return the database exception
     */</comment>
    <function><type><name>DbException</name></type> <name>convertMVStoreException</name><parameter_list>(<parameter><decl><type><name>MVStoreException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><call><name><name>e</name><operator>.</operator><name>getErrorCode</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <case>case <expr><name><name>DataUtils</name><operator>.</operator><name>ERROR_CLOSED</name></name></expr>:</case>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>DATABASE_IS_CLOSED</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</throw>
        <case>case <expr><name><name>DataUtils</name><operator>.</operator><name>ERROR_FILE_CORRUPT</name></name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>encrypted</name></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>FILE_ENCRYPTION_ERROR_1</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>FILE_CORRUPTED_1</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</throw>
        <case>case <expr><name><name>DataUtils</name><operator>.</operator><name>ERROR_FILE_LOCKED</name></name></expr>:</case>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>DATABASE_ALREADY_OPEN_1</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</throw>
        <case>case <expr><name><name>DataUtils</name><operator>.</operator><name>ERROR_READING_FAILED</name></name></expr>:</case>
        <case>case <expr><name><name>DataUtils</name><operator>.</operator><name>ERROR_WRITING_FAILED</name></name></expr>:</case>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>IO_EXCEPTION_1</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</throw>
        <default>default:</default>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>GENERAL_ERROR_1</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>MVStore</name></type> <name>getMvStore</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>mvStore</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>TransactionStore</name></type> <name>getTransactionStore</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>transactionStore</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get MVTable by table name.
     *
     * @param tableName table name
     * @return MVTable
     */</comment>
    <function><type><specifier>public</specifier> <name>MVTable</name></type> <name>getTable</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>tableMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create a table.
     *
     * @param data CreateTableData
     * @return table created
     */</comment>
    <function><type><specifier>public</specifier> <name>MVTable</name></type> <name>createTable</name><parameter_list>(<parameter><decl><type><name>CreateTableData</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>MVTable</name></type> <name>table</name> <init>= <expr><operator>new</operator> <call><name>MVTable</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>tableMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>table</name><operator>.</operator><name>getMapName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>table</name></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>MVStoreException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><call><name>convertMVStoreException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Remove a table.
     *
     * @param table the table
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeTable</name><parameter_list>(<parameter><decl><type><name>MVTable</name></type> <name>table</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>tableMap</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>table</name><operator>.</operator><name>getMapName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>MVStoreException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><call><name>convertMVStoreException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Store all pending changes.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>flush</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>FileStore</name></type> <name>s</name> <init>= <expr><call><name><name>mvStore</name><operator>.</operator><name>getFileStore</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>s</name><operator>.</operator><name>isReadOnly</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>mvStore</name><operator>.</operator><name>compact</name></name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>mvStore</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Close the store, without persisting changes.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>closeImmediately</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>mvStore</name><operator>.</operator><name>isClosed</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>mvStore</name><operator>.</operator><name>closeImmediately</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Remove all temporary maps.
     *
     * @param objectIds the ids of the objects to keep
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeTemporaryMaps</name><parameter_list>(<parameter><decl><type><name>BitSet</name></type> <name>objectIds</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>mapName</name> <range>: <expr><call><name><name>mvStore</name><operator>.</operator><name>getMapNames</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>mapName</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"temp."</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>mvStore</name><operator>.</operator><name>removeMap</name></name><argument_list>(<argument><expr><name>mapName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>mapName</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"table."</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>mapName</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"index."</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name><name>StringUtils</name><operator>.</operator><name>parseUInt31</name></name><argument_list>(<argument><expr><name>mapName</name></expr></argument>, <argument><expr><call><name><name>mapName</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>mapName</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>objectIds</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>mvStore</name><operator>.</operator><name>removeMap</name></name><argument_list>(<argument><expr><name>mapName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the name of the next available temporary map.
     *
     * @return the map name
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>String</name></type> <name>nextTemporaryMapName</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="string">"temp."</literal> <operator>+</operator> <name>temporaryMapId</name><operator>++</operator></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Prepare a transaction.
     *
     * @param session the session
     * @param transactionName the transaction name (may be null)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>prepareCommit</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>transactionName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Transaction</name></type> <name>t</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getTransaction</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><name>transactionName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>prepare</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mvStore</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>InDoubtTransaction</name></argument>&gt;</argument_list></name></type> <name>getInDoubtTransactions</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Transaction</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><call><name><name>transactionStore</name><operator>.</operator><name>getOpenTransactions</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>InDoubtTransaction</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newSmallArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Transaction</name></type> <name>t</name> <range>: <expr><name>list</name></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>t</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Transaction</name><operator>.</operator><name>STATUS_PREPARED</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>MVInDoubtTransaction</name><argument_list>(<argument><expr><name>mvStore</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Set the maximum memory to be used by the cache.
     *
     * @param kb the maximum size in KB
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCacheSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>kb</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>mvStore</name><operator>.</operator><name>setCacheSize</name></name><argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>kb</name> <operator>/</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>InputStream</name></type> <name>getInputStream</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>FileChannel</name></type> <name>fc</name> <init>= <expr><call><name><name>mvStore</name><operator>.</operator><name>getFileStore</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getEncryptedFile</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>fc</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>fc</name> <operator>=</operator> <call><name><name>mvStore</name><operator>.</operator><name>getFileStore</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>new</operator> <call><name>FileChannelInputStream</name><argument_list>(<argument><expr><name>fc</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Force the changes to disk.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>sync</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mvStore</name><operator>.</operator><name>sync</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Compact the database file, that is, compact blocks that have a low
     * fill rate, and move chunks next to each other. This will typically
     * shrink the database file. Changes are flushed to the file, and old
     * chunks are overwritten.
     *
     * @param maxCompactTime the maximum time in milliseconds to compact
     */</comment>
    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unused"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>compactFile</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>maxCompactTime</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>mvStore</name><operator>.</operator><name>compactFile</name></name><argument_list>(<argument><expr><name>maxCompactTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Close the store. Pending changes are persisted.
     * If time is allocated for housekeeping, chunks with a low
     * fill rate are compacted, and some chunks are put next to each other.
     * If time is unlimited then full compaction is performed, which uses
     * different algorithm - opens alternative temp store and writes all live
     * data there, then replaces this store with a new one.
     *
     * @param allowedCompactionTime time (in milliseconds) alloted for file
     *                              compaction activity, 0 means no compaction,
     *                              -1 means unlimited time (full compaction)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>allowedCompactionTime</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>FileStore</name></type> <name>fileStore</name> <init>= <expr><call><name><name>mvStore</name><operator>.</operator><name>getFileStore</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>mvStore</name><operator>.</operator><name>isClosed</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>fileStore</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>boolean</name></type> <name>compactFully</name> <init>= <expr><name>allowedCompactionTime</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>fileStore</name><operator>.</operator><name>isReadOnly</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>compactFully</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name><name>transactionStore</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>compactFully</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>allowedCompactionTime</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><call><name><name>mvStore</name><operator>.</operator><name>close</name></name><argument_list>(<argument><expr><name>allowedCompactionTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>String</name></type> <name>fileName</name> <init>= <expr><call><name><name>fileStore</name><operator>.</operator><name>getFileName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>compactFully</name> <operator>&amp;&amp;</operator> <call><name><name>FileUtils</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <comment type="line">// the file could have been deleted concurrently,</comment>
                    <comment type="line">// so only compact if the file still exists</comment>
                    <expr_stmt><expr><call><name><name>MVStoreTool</name><operator>.</operator><name>compact</name></name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>MVStoreException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>errorCode</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getErrorCode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>errorCode</name> <operator>==</operator> <name><name>DataUtils</name><operator>.</operator><name>ERROR_WRITING_FAILED</name></name></expr>)</condition> <block>{<block_content>
                <comment type="line">// disk full - ok</comment>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>errorCode</name> <operator>==</operator> <name><name>DataUtils</name><operator>.</operator><name>ERROR_FILE_CORRUPT</name></name></expr>)</condition> <block>{<block_content>
                <comment type="line">// wrong encryption key - ok</comment>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>mvStore</name><operator>.</operator><name>closeImmediately</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>IO_EXCEPTION_1</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="string">"Closing"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Start collecting statistics.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>statisticsStart</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>FileStore</name></type> <name>fs</name> <init>= <expr><call><name><name>mvStore</name><operator>.</operator><name>getFileStore</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>statisticsStart</name> <operator>=</operator> <ternary><condition><expr><name>fs</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>fs</name><operator>.</operator><name>getReadCount</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Stop collecting statistics.
     *
     * @return the statistics
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>statisticsEnd</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FileStore</name></type> <name>fs</name> <init>= <expr><call><name><name>mvStore</name><operator>.</operator><name>getFileStore</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>reads</name> <init>= <expr><ternary><condition><expr><name>fs</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><call><name><name>fs</name><operator>.</operator><name>getReadCount</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>statisticsStart</name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"reads"</literal></expr></argument>, <argument><expr><name>reads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>map</name></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>
