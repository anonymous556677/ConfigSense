<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/engine/RightOwner.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>api</name><operator>.</operator><name>ErrorCode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>DbException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>Schema</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>Table</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>StringUtils</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A right owner (sometimes called principal).
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>RightOwner</name> <super_list><extends>extends <super><name>DbObject</name></super></extends></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * The map of granted roles.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>Role</name></argument>, <argument><name>Right</name></argument>&gt;</argument_list></name></type> <name>grantedRoles</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The map of granted rights.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>DbObject</name></argument>, <argument><name>Right</name></argument>&gt;</argument_list></name></type> <name>grantedRights</name></decl>;</decl_stmt>

    <constructor><specifier>protected</specifier> <name>RightOwner</name><parameter_list>(<parameter><decl><type><name>Database</name></type> <name>database</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>traceModuleId</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>toUpperEnglish</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>traceModuleId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>rename</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>newName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>rename</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name><operator>.</operator><name>toUpperEnglish</name></name><argument_list>(<argument><expr><name>newName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check if a role has been granted for this right owner.
     *
     * @param grantedRole the role
     * @return true if the role has been granted
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isRoleGranted</name><parameter_list>(<parameter><decl><type><name>Role</name></type> <name>grantedRole</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>grantedRole</name> <operator>==</operator> <name>this</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>grantedRoles</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Role</name></type> <name>role</name> <range>: <expr><call><name><name>grantedRoles</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>role</name> <operator>==</operator> <name>grantedRole</name></expr>)</condition> <block>{<block_content>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>role</name><operator>.</operator><name>isRoleGranted</name></name><argument_list>(<argument><expr><name>grantedRole</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Checks if a right is already granted to this object or to objects that
     * were granted to this object. The rights of schemas will be valid for
     * every each table in the related schema. The ALTER ANY SCHEMA right gives
     * all rights to all tables.
     *
     * @param table
     *            the table to check
     * @param rightMask
     *            the right mask to check
     * @return true if the right was already granted
     */</comment>
    <function><type><specifier>final</specifier> <name>boolean</name></type> <name>isTableRightGrantedRecursive</name><parameter_list>(<parameter><decl><type><name>Table</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rightMask</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Schema</name></type> <name>schema</name> <init>= <expr><call><name><name>table</name><operator>.</operator><name>getSchema</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>schema</name><operator>.</operator><name>getOwner</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>this</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>grantedRights</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Right</name></type> <name>right</name> <init>= <expr><call><name><name>grantedRights</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>right</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>right</name><operator>.</operator><name>getRightMask</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name><name>Right</name><operator>.</operator><name>ALTER_ANY_SCHEMA</name></name><operator>)</operator> <operator>==</operator> <name><name>Right</name><operator>.</operator><name>ALTER_ANY_SCHEMA</name></name></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>right</name> <operator>=</operator> <call><name><name>grantedRights</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>right</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>right</name><operator>.</operator><name>getRightMask</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>rightMask</name><operator>)</operator> <operator>==</operator> <name>rightMask</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>right</name> <operator>=</operator> <call><name><name>grantedRights</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>right</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>right</name><operator>.</operator><name>getRightMask</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>rightMask</name><operator>)</operator> <operator>==</operator> <name>rightMask</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>grantedRoles</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Role</name></type> <name>role</name> <range>: <expr><call><name><name>grantedRoles</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>role</name><operator>.</operator><name>isTableRightGrantedRecursive</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>rightMask</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Checks if a schema owner right is already granted to this object or to
     * objects that were granted to this object. The ALTER ANY SCHEMA right
     * gives rights to all schemas.
     *
     * @param schema
     *            the schema to check, or {@code null} to check for ALTER ANY
     *            SCHEMA right only
     * @return true if the right was already granted
     */</comment>
    <function><type><specifier>final</specifier> <name>boolean</name></type> <name>isSchemaRightGrantedRecursive</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>schema</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>schema</name><operator>.</operator><name>getOwner</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>this</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>grantedRights</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Right</name></type> <name>right</name> <init>= <expr><call><name><name>grantedRights</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>right</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>right</name><operator>.</operator><name>getRightMask</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name><name>Right</name><operator>.</operator><name>ALTER_ANY_SCHEMA</name></name><operator>)</operator> <operator>==</operator> <name><name>Right</name><operator>.</operator><name>ALTER_ANY_SCHEMA</name></name></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>grantedRoles</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Role</name></type> <name>role</name> <range>: <expr><call><name><name>grantedRoles</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>role</name><operator>.</operator><name>isSchemaRightGrantedRecursive</name></name><argument_list>(<argument><expr><name>schema</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Grant a right for the given table. Only one right object per table is
     * supported.
     *
     * @param object the object (table or schema)
     * @param right the right
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>grantRight</name><parameter_list>(<parameter><decl><type><name>DbObject</name></type> <name>object</name></decl></parameter>, <parameter><decl><type><name>Right</name></type> <name>right</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>grantedRights</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>grantedRights</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>grantedRights</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Revoke the right for the given object (table or schema).
     *
     * @param object the object
     */</comment>
    <function><type><name>void</name></type> <name>revokeRight</name><parameter_list>(<parameter><decl><type><name>DbObject</name></type> <name>object</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>grantedRights</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>grantedRights</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>grantedRights</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>grantedRights</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Grant a role to this object.
     *
     * @param role the role
     * @param right the right to grant
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>grantRole</name><parameter_list>(<parameter><decl><type><name>Role</name></type> <name>role</name></decl></parameter>, <parameter><decl><type><name>Right</name></type> <name>right</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>grantedRoles</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>grantedRoles</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>grantedRoles</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>role</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Remove the right for the given role.
     *
     * @param role the role to revoke
     */</comment>
    <function><type><name>void</name></type> <name>revokeRole</name><parameter_list>(<parameter><decl><type><name>Role</name></type> <name>role</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>grantedRoles</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Right</name></type> <name>right</name> <init>= <expr><call><name><name>grantedRoles</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>role</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>right</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>grantedRoles</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>role</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>grantedRoles</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>grantedRoles</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Remove all the temporary rights granted on roles
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>revokeTemporaryRightsOnRoles</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>grantedRoles</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Role</name></argument>&gt;</argument_list></name></type> <name>rolesToRemove</name><init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Role</name></argument>,<argument><name>Right</name></argument>&gt;</argument_list></name></type> <name>currentEntry</name> <range>: <expr><call><name><name>grantedRoles</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>( <expr><call><name><name>currentEntry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isTemporary</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>currentEntry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isValid</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>rolesToRemove</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>currentEntry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <for>for <control>(<init><decl><type><name>Role</name></type> <name>currentRoleToRemove</name> <range>: <expr><name>rolesToRemove</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>revokeRole</name><argument_list>(<argument><expr><name>currentRoleToRemove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>



    <comment type="block" format="javadoc">/**
     * Get the 'grant schema' right of this object.
     *
     * @param object the granted object (table or schema)
     * @return the right or null if the right has not been granted
     */</comment>
    <function><type><specifier>public</specifier> <name>Right</name></type> <name>getRightForObject</name><parameter_list>(<parameter><decl><type><name>DbObject</name></type> <name>object</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>grantedRights</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>grantedRights</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the 'grant role' right of this object.
     *
     * @param role the granted role
     * @return the right or null if the right has not been granted
     */</comment>
    <function><type><specifier>public</specifier> <name>Right</name></type> <name>getRightForRole</name><parameter_list>(<parameter><decl><type><name>Role</name></type> <name>role</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>grantedRoles</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>grantedRoles</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>role</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check that this right owner does not own any schema. An exception is
     * thrown if it owns one or more schemas.
     *
     * @throws DbException
     *             if this right owner owns a schema
     */</comment>
    <function><type><specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>checkOwnsNoSchemas</name><parameter_list>()</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>Schema</name></type> <name>s</name> <range>: <expr><call><name><name>database</name><operator>.</operator><name>getAllSchemas</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <call><name><name>s</name><operator>.</operator><name>getOwner</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>CANNOT_DROP_2</name></name></expr></argument>, <argument><expr><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

}</block></class>
</unit>
