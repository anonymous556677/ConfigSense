<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/expression/condition/Comparison.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>condition</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>SessionLocal</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>Expression</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>ExpressionColumn</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>ExpressionVisitor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>Parameter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>TypedValueExpression</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>ValueExpression</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>aggregate</name><operator>.</operator><name>Aggregate</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>aggregate</name><operator>.</operator><name>AggregateType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>index</name><operator>.</operator><name>IndexCondition</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>DbException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>Column</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>ColumnResolver</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>TableFilter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>DataType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>TypeInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueBoolean</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueNull</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Example comparison expressions are ID=1, NAME=NAME, NAME IS NULL.
 *
 * @author Thomas Mueller
 * @author Noel Grandin
 * @author Nicolas Fortin, Atelier SIG, IRSTV FR CNRS 24888
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>Comparison</name> <super_list><extends>extends <super><name>Condition</name></super></extends></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * The comparison type meaning = as in ID=1.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>EQUAL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The comparison type meaning &amp;lt;&amp;gt; as in ID&amp;lt;&amp;gt;1.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>NOT_EQUAL</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The comparison type meaning &amp;lt; as in ID&amp;lt;1.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SMALLER</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The comparison type meaning &amp;gt; as in ID&amp;gt;1.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BIGGER</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The comparison type meaning &amp;lt;= as in ID&amp;lt;=1.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SMALLER_EQUAL</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The comparison type meaning &amp;gt;= as in ID&amp;gt;=1.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BIGGER_EQUAL</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The comparison type meaning ID IS NOT DISTINCT FROM 1.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>EQUAL_NULL_SAFE</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The comparison type meaning ID IS DISTINCT FROM 1.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>NOT_EQUAL_NULL_SAFE</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * This is a comparison type that is only used for spatial index
     * conditions (operator "&amp;amp;&amp;amp;").
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SPATIAL_INTERSECTS</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>COMPARE_TYPES</name> <init>= <expr><block>{ <expr><literal type="string">"="</literal></expr>, <expr><literal type="string">"&lt;&gt;"</literal></expr>, <expr><literal type="string">"&lt;"</literal></expr>, <expr><literal type="string">"&gt;"</literal></expr>, <expr><literal type="string">"&lt;="</literal></expr>, <expr><literal type="string">"&gt;="</literal></expr>, <comment type="line">//</comment>
            <expr><literal type="string">"IS NOT DISTINCT FROM"</literal></expr>, <expr><literal type="string">"IS DISTINCT FROM"</literal></expr>, <comment type="line">//</comment>
            <expr><literal type="string">"&amp;&amp;"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * This is a pseudo comparison type that is only used for index conditions.
     * It means the comparison will always yield FALSE. Example: 1=0.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>FALSE</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * This is a pseudo comparison type that is only used for index conditions.
     * It means equals any value of a list. Example: IN(1, 2, 3).
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>IN_LIST</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * This is a pseudo comparison type that is only used for index conditions.
     * It means equals any value of a list. Example: IN(SELECT ...).
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>IN_QUERY</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>compareType</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Expression</name></type> <name>left</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Expression</name></type> <name>right</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>whenOperand</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>Comparison</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>compareType</name></decl></parameter>, <parameter><decl><type><name>Expression</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>Expression</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>whenOperand</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name>right</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>compareType</name></name> <operator>=</operator> <name>compareType</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>whenOperand</name></name> <operator>=</operator> <name>whenOperand</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>needParentheses</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>StringBuilder</name></type> <name>getUnenclosedSQL</name><parameter_list>(<parameter><decl><type><name>StringBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sqlFlags</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getWhenSQL</name><argument_list>(<argument><expr><call><name><name>left</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>sqlFlags</name></expr></argument>, <argument><expr><name>AUTO_PARENTHESES</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sqlFlags</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>StringBuilder</name></type> <name>getWhenSQL</name><parameter_list>(<parameter><decl><type><name>StringBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sqlFlags</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name><name>COMPARE_TYPES</name><index>[<expr><name>compareType</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>right</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>sqlFlags</name></expr></argument>,
                <argument><expr><ternary><condition><expr><name>right</name> <operator>instanceof</operator> <name>Aggregate</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>Aggregate</name><operator>)</operator> <name>right</name><operator>)</operator><operator>.</operator><call><name>getAggregateType</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>AggregateType</name><operator>.</operator><name>ANY</name></name></expr>
                        ?</condition><then> <expr><name>WITH_PARENTHESES</name></expr>
                        </then><else>: <expr><name>AUTO_PARENTHESES</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Expression</name></type> <name>optimize</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>left</name> <operator>=</operator> <call><name><name>left</name><operator>.</operator><name>optimize</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>right</name> <operator>=</operator> <call><name><name>right</name><operator>.</operator><name>optimize</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <label><name>check</name>:</label> <block>{<block_content>
            <decl_stmt><decl><type><name>TypeInfo</name></type> <name>leftType</name> <init>= <expr><call><name><name>left</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>rightType</name> <init>= <expr><call><name><name>right</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>session</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><name>numericWithBooleanComparison</name></expr>)</condition> <block>{<block_content>
                <switch>switch <condition>(<expr><name>compareType</name></expr>)</condition> <block>{<block_content>
                <case>case <expr><name>EQUAL</name></expr>:</case>
                <case>case <expr><name>NOT_EQUAL</name></expr>:</case>
                <case>case <expr><name>EQUAL_NULL_SAFE</name></expr>:</case>
                <case>case <expr><name>NOT_EQUAL_NULL_SAFE</name></expr>:</case>
                    <decl_stmt><decl><type><name>int</name></type> <name>lValueType</name> <init>= <expr><call><name><name>leftType</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>lValueType</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>BOOLEAN</name></name></expr>)</condition> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><call><name><name>DataType</name><operator>.</operator><name>isNumericType</name></name><argument_list>(<argument><expr><call><name><name>rightType</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                            <break>break <name>check</name>;</break>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>DataType</name><operator>.</operator><name>isNumericType</name></name><argument_list>(<argument><expr><name>lValueType</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>rightType</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>BOOLEAN</name></name></expr>)</condition> <block>{<block_content>
                        <break>break <name>check</name>;</break>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></switch>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>TypeInfo</name><operator>.</operator><name>checkComparable</name></name><argument_list>(<argument><expr><name>leftType</name></expr></argument>, <argument><expr><name>rightType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <if_stmt><if>if <condition>(<expr><name>whenOperand</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>right</name> <operator>instanceof</operator> <name>ExpressionColumn</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>left</name><operator>.</operator><name>isConstant</name></name><argument_list>()</argument_list></call> <operator>||</operator> <name>left</name> <operator>instanceof</operator> <name>Parameter</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Expression</name></type> <name>temp</name> <init>= <expr><name>left</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>left</name> <operator>=</operator> <name>right</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>right</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>compareType</name> <operator>=</operator> <call><name>getReversedCompareType</name><argument_list>(<argument><expr><name>compareType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>left</name> <operator>instanceof</operator> <name>ExpressionColumn</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>right</name><operator>.</operator><name>isConstant</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Value</name></type> <name>r</name> <init>= <expr><call><name><name>right</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>compareType</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <name>EQUAL_NULL_SAFE</name></expr>)</condition> <block>{<block_content>
                        <return>return <expr><name><name>TypedValueExpression</name><operator>.</operator><name>UNKNOWN</name></name></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>TypeInfo</name></type> <name>colType</name> <init>= <expr><call><name><name>left</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>constType</name> <init>= <expr><call><name><name>r</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>constValueType</name> <init>= <expr><call><name><name>constType</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>constValueType</name> <operator>!=</operator> <call><name><name>colType</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call> <operator>||</operator> <name>constValueType</name> <operator>&gt;=</operator> <name><name>Value</name><operator>.</operator><name>ARRAY</name></name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>TypeInfo</name></type> <name>resType</name> <init>= <expr><call><name><name>TypeInfo</name><operator>.</operator><name>getHigherType</name></name><argument_list>(<argument><expr><name>colType</name></expr></argument>, <argument><expr><name>constType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <comment type="line">// If not, the column values will need to be promoted</comment>
                    <comment type="line">// to constant type, but vise versa, then let's do this here</comment>
                    <comment type="line">// once.</comment>
                    <if_stmt><if>if <condition>(<expr><name>constValueType</name> <operator>!=</operator> <call><name><name>resType</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call> <operator>||</operator> <name>constValueType</name> <operator>&gt;=</operator> <name><name>Value</name><operator>.</operator><name>ARRAY</name></name></expr>)</condition> <block>{<block_content>
                        <decl_stmt><decl><type><name>Column</name></type> <name>column</name> <init>= <expr><operator>(</operator><operator>(</operator><name>ExpressionColumn</name><operator>)</operator> <name>left</name><operator>)</operator><operator>.</operator><call><name>getColumn</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name>right</name> <operator>=</operator> <call><name><name>ValueExpression</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>convertTo</name></name><argument_list>(<argument><expr><name>resType</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>right</name> <operator>instanceof</operator> <name>Parameter</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><operator>(</operator><operator>(</operator><name>Parameter</name><operator>)</operator> <name>right</name><operator>)</operator><operator>.</operator><call><name>setColumn</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>ExpressionColumn</name><operator>)</operator> <name>left</name><operator>)</operator><operator>.</operator><call><name>getColumn</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>left</name><operator>.</operator><name>isConstant</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>right</name><operator>.</operator><name>isConstant</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>ValueExpression</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><call><name>getValue</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>left</name><operator>.</operator><name>isNullConstant</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>right</name><operator>.</operator><name>isNullConstant</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// TODO NULL handling: maybe issue a warning when comparing with</comment>
            <comment type="line">// a NULL constants</comment>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>compareType</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <name>EQUAL_NULL_SAFE</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><name><name>TypedValueExpression</name><operator>.</operator><name>UNKNOWN</name></name></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name>Expression</name></type> <name>e</name> <init>= <expr><ternary><condition><expr><call><name><name>left</name><operator>.</operator><name>isNullConstant</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>right</name></expr> </then><else>: <expr><name>left</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValueType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name><name>Value</name><operator>.</operator><name>UNKNOWN</name></name> <operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <name><name>Value</name><operator>.</operator><name>ROW</name></name></expr>)</condition> <block>{<block_content>
                    <return>return <expr><operator>new</operator> <call><name>NullPredicate</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>compareType</name> <operator>==</operator> <name>NOT_EQUAL_NULL_SAFE</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Value</name></type> <name>getValue</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Value</name></type> <name>l</name> <init>= <expr><call><name><name>left</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// Optimization: do not evaluate right if not necessary</comment>
        <if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>compareType</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <name>EQUAL_NULL_SAFE</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>compare</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><call><name><name>right</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>compareType</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>getWhenValue</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>left</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>whenOperand</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>super</name><operator>.</operator><name>getWhenValue</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// Optimization: do not evaluate right if not necessary</comment>
        <if_stmt><if>if <condition>(<expr><name>left</name> <operator>==</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>compareType</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <name>EQUAL_NULL_SAFE</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>compare</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><call><name><name>right</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>compareType</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isTrue</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Compare two values.
     *
     * @param session the session
     * @param l the first value
     * @param r the second value
     * @param compareType the compare type
     * @return result of comparison, either TRUE, FALSE, or NULL
     */</comment>
    <function><type><specifier>static</specifier> <name>Value</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>compareType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Value</name></type> <name>result</name></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>compareType</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>EQUAL</name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>compareWithNull</name></name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>ValueBoolean</name><operator>.</operator><name>TRUE</name></name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cmp</name> <operator>==</operator> <name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>ValueBoolean</name><operator>.</operator><name>FALSE</name></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>EQUAL_NULL_SAFE</name></expr>:</case>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>ValueBoolean</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>session</name><operator>.</operator><name>areEqual</name></name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>NOT_EQUAL</name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>compareWithNull</name></name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>ValueBoolean</name><operator>.</operator><name>FALSE</name></name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cmp</name> <operator>==</operator> <name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>ValueBoolean</name><operator>.</operator><name>TRUE</name></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>NOT_EQUAL_NULL_SAFE</name></expr>:</case>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>ValueBoolean</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>!</operator><call><name><name>session</name><operator>.</operator><name>areEqual</name></name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>BIGGER_EQUAL</name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>compareWithNull</name></name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>ValueBoolean</name><operator>.</operator><name>TRUE</name></name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cmp</name> <operator>==</operator> <name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>ValueBoolean</name><operator>.</operator><name>FALSE</name></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>BIGGER</name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>compareWithNull</name></name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>ValueBoolean</name><operator>.</operator><name>TRUE</name></name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cmp</name> <operator>==</operator> <name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>ValueBoolean</name><operator>.</operator><name>FALSE</name></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>SMALLER_EQUAL</name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>compareWithNull</name></name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>==</operator> <name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>ValueBoolean</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>cmp</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>SMALLER</name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>compareWithNull</name></name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>==</operator> <name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>ValueBoolean</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>cmp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>SPATIAL_INTERSECTS</name></expr>:</case> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name> <operator>||</operator> <name>r</name> <operator>==</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>ValueBoolean</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>l</name><operator>.</operator><name>convertToGeometry</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>intersectsBoundingBox</name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>convertToGeometry</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <default>default:</default>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>(<argument><expr><literal type="string">"type="</literal> <operator>+</operator> <name>compareType</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isWhenConditionOperand</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>whenOperand</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>getReversedCompareType</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>EQUAL</name></expr>:</case>
        <case>case <expr><name>EQUAL_NULL_SAFE</name></expr>:</case>
        <case>case <expr><name>NOT_EQUAL</name></expr>:</case>
        <case>case <expr><name>NOT_EQUAL_NULL_SAFE</name></expr>:</case>
        <case>case <expr><name>SPATIAL_INTERSECTS</name></expr>:</case>
            <return>return <expr><name>type</name></expr>;</return>
        <case>case <expr><name>BIGGER_EQUAL</name></expr>:</case>
            <return>return <expr><name>SMALLER_EQUAL</name></expr>;</return>
        <case>case <expr><name>BIGGER</name></expr>:</case>
            <return>return <expr><name>SMALLER</name></expr>;</return>
        <case>case <expr><name>SMALLER_EQUAL</name></expr>:</case>
            <return>return <expr><name>BIGGER_EQUAL</name></expr>;</return>
        <case>case <expr><name>SMALLER</name></expr>:</case>
            <return>return <expr><name>BIGGER</name></expr>;</return>
        <default>default:</default>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>(<argument><expr><literal type="string">"type="</literal> <operator>+</operator> <name>type</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Expression</name></type> <name>getNotIfPossible</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>compareType</name> <operator>==</operator> <name>SPATIAL_INTERSECTS</name> <operator>||</operator> <name>whenOperand</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><call><name>getNotCompareType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>new</operator> <call><name>Comparison</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>int</name></type> <name>getNotCompareType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>compareType</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>EQUAL</name></expr>:</case>
            <return>return <expr><name>NOT_EQUAL</name></expr>;</return>
        <case>case <expr><name>EQUAL_NULL_SAFE</name></expr>:</case>
            <return>return <expr><name>NOT_EQUAL_NULL_SAFE</name></expr>;</return>
        <case>case <expr><name>NOT_EQUAL</name></expr>:</case>
            <return>return <expr><name>EQUAL</name></expr>;</return>
        <case>case <expr><name>NOT_EQUAL_NULL_SAFE</name></expr>:</case>
            <return>return <expr><name>EQUAL_NULL_SAFE</name></expr>;</return>
        <case>case <expr><name>BIGGER_EQUAL</name></expr>:</case>
            <return>return <expr><name>SMALLER</name></expr>;</return>
        <case>case <expr><name>BIGGER</name></expr>:</case>
            <return>return <expr><name>SMALLER_EQUAL</name></expr>;</return>
        <case>case <expr><name>SMALLER_EQUAL</name></expr>:</case>
            <return>return <expr><name>BIGGER</name></expr>;</return>
        <case>case <expr><name>SMALLER</name></expr>:</case>
            <return>return <expr><name>BIGGER_EQUAL</name></expr>;</return>
        <default>default:</default>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>(<argument><expr><literal type="string">"type="</literal> <operator>+</operator> <name>compareType</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>createIndexConditions</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>TableFilter</name></type> <name>filter</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>whenOperand</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>createIndexConditions</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>compareType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>static</specifier> <name>void</name></type> <name>createIndexConditions</name><parameter_list>(<parameter><decl><type><name>TableFilter</name></type> <name>filter</name></decl></parameter>, <parameter><decl><type><name>Expression</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>Expression</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>compareType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>filter</name><operator>.</operator><name>getTable</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isQueryComparable</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>ExpressionColumn</name></type> <name>l</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>left</name> <operator>instanceof</operator> <name>ExpressionColumn</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><name>ExpressionColumn</name><operator>)</operator> <name>left</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>filter</name> <operator>!=</operator> <call><name><name>l</name><operator>.</operator><name>getTableFilter</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>ExpressionColumn</name></type> <name>r</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>right</name> <operator>instanceof</operator> <name>ExpressionColumn</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>ExpressionColumn</name><operator>)</operator> <name>right</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>filter</name> <operator>!=</operator> <call><name><name>r</name><operator>.</operator><name>getTableFilter</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// one side must be from the current filter</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>l</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><name>r</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>left</name><operator>.</operator><name>isEverything</name></name><argument_list>(<argument><expr><call><name><name>ExpressionVisitor</name><operator>.</operator><name>getNotFromResolverVisitor</name></name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content> <comment type="line">// r == null</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>right</name><operator>.</operator><name>isEverything</name></name><argument_list>(<argument><expr><call><name><name>ExpressionVisitor</name><operator>.</operator><name>getNotFromResolverVisitor</name></name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <switch>switch <condition>(<expr><name>compareType</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>NOT_EQUAL</name></expr>:</case>
        <case>case <expr><name>NOT_EQUAL_NULL_SAFE</name></expr>:</case>
            <break>break;</break>
        <case>case <expr><name>EQUAL</name></expr>:</case>
        <case>case <expr><name>EQUAL_NULL_SAFE</name></expr>:</case>
        <case>case <expr><name>BIGGER</name></expr>:</case>
        <case>case <expr><name>BIGGER_EQUAL</name></expr>:</case>
        <case>case <expr><name>SMALLER_EQUAL</name></expr>:</case>
        <case>case <expr><name>SMALLER</name></expr>:</case>
        <case>case <expr><name>SPATIAL_INTERSECTS</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name>l</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>TypeInfo</name></type> <name>colType</name> <init>= <expr><call><name><name>l</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>TypeInfo</name><operator>.</operator><name>haveSameOrdering</name></name><argument_list>(<argument><expr><name>colType</name></expr></argument>, <argument><expr><call><name><name>TypeInfo</name><operator>.</operator><name>getHigherType</name></name><argument_list>(<argument><expr><name>colType</name></expr></argument>, <argument><expr><call><name><name>right</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>addIndexCondition</name></name><argument_list>(<argument><expr><call><name><name>IndexCondition</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>compareType</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></annotation>
                <type><name>TypeInfo</name></type> <name>colType</name> <init>= <expr><call><name><name>r</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>TypeInfo</name><operator>.</operator><name>haveSameOrdering</name></name><argument_list>(<argument><expr><name>colType</name></expr></argument>, <argument><expr><call><name><name>TypeInfo</name><operator>.</operator><name>getHigherType</name></name><argument_list>(<argument><expr><name>colType</name></expr></argument>, <argument><expr><call><name><name>left</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>addIndexCondition</name></name><argument_list>(<argument><expr><call><name><name>IndexCondition</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name>getReversedCompareType</name><argument_list>(<argument><expr><name>compareType</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        <default>default:</default>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>(<argument><expr><literal type="string">"type="</literal> <operator>+</operator> <name>compareType</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>setEvaluatable</name><parameter_list>(<parameter><decl><type><name>TableFilter</name></type> <name>tableFilter</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>left</name><operator>.</operator><name>setEvaluatable</name></name><argument_list>(<argument><expr><name>tableFilter</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>right</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>right</name><operator>.</operator><name>setEvaluatable</name></name><argument_list>(<argument><expr><name>tableFilter</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>updateAggregate</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stage</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>left</name><operator>.</operator><name>updateAggregate</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>stage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>right</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>right</name><operator>.</operator><name>updateAggregate</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>stage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>mapColumns</name><parameter_list>(<parameter><decl><type><name>ColumnResolver</name></type> <name>resolver</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>left</name><operator>.</operator><name>mapColumns</name></name><argument_list>(<argument><expr><name>resolver</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>right</name><operator>.</operator><name>mapColumns</name></name><argument_list>(<argument><expr><name>resolver</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isEverything</name><parameter_list>(<parameter><decl><type><name>ExpressionVisitor</name></type> <name>visitor</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>left</name><operator>.</operator><name>isEverything</name></name><argument_list>(<argument><expr><name>visitor</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>right</name><operator>.</operator><name>isEverything</name></name><argument_list>(<argument><expr><name>visitor</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getCost</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>left</name><operator>.</operator><name>getCost</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>right</name><operator>.</operator><name>getCost</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the other expression if this is an equals comparison and the other
     * expression matches.
     *
     * @param match the expression that should match
     * @return null if no match, the other expression if there is a match
     */</comment>
    <function><type><name>Expression</name></type> <name>getIfEquals</name><parameter_list>(<parameter><decl><type><name>Expression</name></type> <name>match</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>compareType</name> <operator>==</operator> <name>EQUAL</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>sql</name> <init>= <expr><call><name><name>match</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>DEFAULT_SQL_FLAGS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>left</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>DEFAULT_SQL_FLAGS</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>right</name></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>right</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>DEFAULT_SQL_FLAGS</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>left</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get an additional condition if possible. Example: given two conditions
     * A=B AND B=C, the new condition A=C is returned.
     *
     * @param session the session
     * @param other the second condition
     * @return null or the third condition for indexes
     */</comment>
    <function><type><name>Expression</name></type> <name>getAdditionalAnd</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Comparison</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>compareType</name> <operator>==</operator> <name>EQUAL</name> <operator>&amp;&amp;</operator> <name><name>other</name><operator>.</operator><name>compareType</name></name> <operator>==</operator> <name>EQUAL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>whenOperand</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>lc</name> <init>= <expr><call><name><name>left</name><operator>.</operator><name>isConstant</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>rc</name> <init>= <expr><call><name><name>right</name><operator>.</operator><name>isConstant</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>l2c</name> <init>= <expr><call><name><name>other</name><operator>.</operator><name>left</name><operator>.</operator><name>isConstant</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>r2c</name> <init>= <expr><call><name><name>other</name><operator>.</operator><name>right</name><operator>.</operator><name>isConstant</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>l</name> <init>= <expr><call><name><name>left</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>DEFAULT_SQL_FLAGS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>l2</name> <init>= <expr><call><name><name>other</name><operator>.</operator><name>left</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>DEFAULT_SQL_FLAGS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>r</name> <init>= <expr><call><name><name>right</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>DEFAULT_SQL_FLAGS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>r2</name> <init>= <expr><call><name><name>other</name><operator>.</operator><name>right</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>DEFAULT_SQL_FLAGS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// a=b AND a=c</comment>
            <comment type="line">// must not compare constants. example: NOT(B=2 AND B=3)</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>rc</name> <operator>&amp;&amp;</operator> <name>r2c</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name><name>l</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>Comparison</name><argument_list>(<argument><expr><name>EQUAL</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>right</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>rc</name> <operator>&amp;&amp;</operator> <name>l2c</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name><name>l</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>Comparison</name><argument_list>(<argument><expr><name>EQUAL</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>lc</name> <operator>&amp;&amp;</operator> <name>r2c</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name><name>r</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>Comparison</name><argument_list>(<argument><expr><name>EQUAL</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>right</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>lc</name> <operator>&amp;&amp;</operator> <name>l2c</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name><name>r</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>Comparison</name><argument_list>(<argument><expr><name>EQUAL</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Replace the OR condition with IN condition if possible. Example: given
     * the two conditions A=1 OR A=2, the new condition A IN(1, 2) is returned.
     *
     * @param session the session
     * @param other the second condition
     * @return null or the joined IN condition
     */</comment>
    <function><type><name>Expression</name></type> <name>optimizeOr</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Comparison</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>compareType</name> <operator>==</operator> <name>EQUAL</name> <operator>&amp;&amp;</operator> <name><name>other</name><operator>.</operator><name>compareType</name></name> <operator>==</operator> <name>EQUAL</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Expression</name></type> <name>left2</name> <init>= <expr><name><name>other</name><operator>.</operator><name>left</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Expression</name></type> <name>right2</name> <init>= <expr><name><name>other</name><operator>.</operator><name>right</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>l2</name> <init>= <expr><call><name><name>left2</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>DEFAULT_SQL_FLAGS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>r2</name> <init>= <expr><call><name><name>right2</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>DEFAULT_SQL_FLAGS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>left</name><operator>.</operator><name>isEverything</name></name><argument_list>(<argument><expr><name><name>ExpressionVisitor</name><operator>.</operator><name>DETERMINISTIC_VISITOR</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>l</name> <init>= <expr><call><name><name>left</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>DEFAULT_SQL_FLAGS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>l</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><call><name>getConditionIn</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>right2</name></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>l</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><call><name>getConditionIn</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>left2</name></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>right</name><operator>.</operator><name>isEverything</name></name><argument_list>(<argument><expr><name><name>ExpressionVisitor</name><operator>.</operator><name>DETERMINISTIC_VISITOR</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>r</name> <init>= <expr><call><name><name>right</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>DEFAULT_SQL_FLAGS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>r</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><call><name>getConditionIn</name><argument_list>(<argument><expr><name>right</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>right2</name></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>r</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><call><name>getConditionIn</name><argument_list>(<argument><expr><name>right</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>left2</name></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>ConditionIn</name></type> <name>getConditionIn</name><parameter_list>(<parameter><decl><type><name>Expression</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>Expression</name></type> <name>value1</name></decl></parameter>,
            <parameter><decl><type><name>Expression</name></type> <name>value2</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Expression</name></argument>&gt;</argument_list></name></type> <name>right</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>right</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>value1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>right</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>value2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>new</operator> <call><name>ConditionIn</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getSubexpressionCount</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="number">2</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Expression</name></type> <name>getSubexpression</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>index</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">0</literal></expr>:</case>
            <return>return <expr><name>left</name></expr>;</return>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
            <return>return <expr><name>right</name></expr>;</return>
        <default>default:</default>
            <throw>throw <expr><operator>new</operator> <call><name>IndexOutOfBoundsException</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
    </block_content>}</block></function>

}</block></class>
</unit>
