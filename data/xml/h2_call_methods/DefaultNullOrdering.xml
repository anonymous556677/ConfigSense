<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/mode/DefaultNullOrdering.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mode</name></name>;</package>

<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>SortOrder</name><operator>.</operator><name>DESCENDING</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>SortOrder</name><operator>.</operator><name>NULLS_FIRST</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>SortOrder</name><operator>.</operator><name>NULLS_LAST</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Default ordering of NULL values.
 */</comment>
<enum><specifier>public</specifier> enum <name>DefaultNullOrdering</name> <block>{

    <comment type="block" format="javadoc">/**
     * NULL values are considered as smaller than other values during sorting.
     */</comment>
    <decl><name>LOW</name><argument_list>(<argument><expr><name>NULLS_FIRST</name></expr></argument>, <argument><expr><name>NULLS_LAST</name></expr></argument>)</argument_list></decl>,

    <comment type="block" format="javadoc">/**
     * NULL values are considered as larger than other values during sorting.
     */</comment>
    <decl><name>HIGH</name><argument_list>(<argument><expr><name>NULLS_LAST</name></expr></argument>, <argument><expr><name>NULLS_FIRST</name></expr></argument>)</argument_list></decl>,

    <comment type="block" format="javadoc">/**
     * NULL values are sorted before other values, no matter if ascending or
     * descending order is used.
     */</comment>
    <decl><name>FIRST</name><argument_list>(<argument><expr><name>NULLS_FIRST</name></expr></argument>, <argument><expr><name>NULLS_FIRST</name></expr></argument>)</argument_list></decl>,

    <comment type="block" format="javadoc">/**
     * NULL values are sorted after other values, no matter if ascending or
     * descending order is used.
     */</comment>
    <decl><name>LAST</name><argument_list>(<argument><expr><name>NULLS_LAST</name></expr></argument>, <argument><expr><name>NULLS_LAST</name></expr></argument>)</argument_list></decl>;

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>DefaultNullOrdering</name><index>[]</index></name></type> <name>VALUES</name> <init>= <expr><call><name>values</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Returns default ordering of NULL values for the specified ordinal number.
     *
     * @param ordinal
     *            ordinal number
     * @return default ordering of NULL values for the specified ordinal number
     * @see #ordinal()
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>DefaultNullOrdering</name></type> <name>valueOf</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ordinal</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>VALUES</name><index>[<expr><name>ordinal</name></expr>]</index></name></expr>;</return>
    </block_content>}</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>defaultAscNulls</name></decl>, <decl><type ref="prev"/><name>defaultDescNulls</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>nullAsc</name></decl>, <decl><type ref="prev"/><name>nullDesc</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>DefaultNullOrdering</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>defaultAscNulls</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defaultDescNulls</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>defaultAscNulls</name></name> <operator>=</operator> <name>defaultAscNulls</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>defaultDescNulls</name></name> <operator>=</operator> <name>defaultDescNulls</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>nullAsc</name> <operator>=</operator> <ternary><condition><expr><name>defaultAscNulls</name> <operator>==</operator> <name>NULLS_FIRST</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name>nullDesc</name> <operator>=</operator> <ternary><condition><expr><name>defaultDescNulls</name> <operator>==</operator> <name>NULLS_FIRST</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Returns a sort type bit mask with {@link org.h2.result.SortOrder#NULLS_FIRST} or
     * {@link org.h2.result.SortOrder#NULLS_LAST} explicitly set
     *
     * @param sortType
     *            sort type bit mask
     * @return bit mask with {@link org.h2.result.SortOrder#NULLS_FIRST} or {@link org.h2.result.SortOrder#NULLS_LAST}
     *         explicitly set
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>addExplicitNullOrdering</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sortType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sortType</name> <operator>&amp;</operator> <operator>(</operator><name>NULLS_FIRST</name> <operator>|</operator> <name>NULLS_LAST</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>sortType</name> <operator>|=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>sortType</name> <operator>&amp;</operator> <name>DESCENDING</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>defaultAscNulls</name></expr> </then><else>: <expr><name>defaultDescNulls</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>sortType</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Compare two expressions where one of them is NULL.
     *
     * @param aNull
     *            whether the first expression is null
     * @param sortType
     *            the sort bit mask to use
     * @return the result of the comparison (-1 meaning the first expression
     *         should appear before the second, 0 if they are equal)
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>compareNull</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>aNull</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sortType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sortType</name> <operator>&amp;</operator> <name>NULLS_FIRST</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><ternary><condition><expr><name>aNull</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>sortType</name> <operator>&amp;</operator> <name>NULLS_LAST</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><ternary><condition><expr><name>aNull</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>sortType</name> <operator>&amp;</operator> <name>DESCENDING</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><ternary><condition><expr><name>aNull</name></expr> ?</condition><then> <expr><name>nullAsc</name></expr> </then><else>: <expr><operator>-</operator><name>nullAsc</name></expr></else></ternary></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><ternary><condition><expr><name>aNull</name></expr> ?</condition><then> <expr><name>nullDesc</name></expr> </then><else>: <expr><operator>-</operator><name>nullDesc</name></expr></else></ternary></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

}</block></enum>
</unit>
