<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/command/Command.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>SQLException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>api</name><operator>.</operator><name>ErrorCode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Database</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>DbObject</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Mode</name><operator>.</operator><name>CharPadding</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Session</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>SessionLocal</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>ParameterInterface</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>DbException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>Trace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>ResultInterface</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>ResultWithGeneratedKeys</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>ResultWithPaddedStrings</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>Utils</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Represents a SQL statement. This object is only used on the server side.
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>Command</name> <super_list><implements>implements <super><name>CommandInterface</name></super></implements></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * The session.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>SessionLocal</name></type> <name>session</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The last start time.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>long</name></type> <name>startTimeNanos</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The trace module.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Trace</name></type> <name>trace</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * If this query was canceled.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>cancel</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>sql</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>canReuse</name></decl>;</decl_stmt>

    <constructor><name>Command</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>sql</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>session</name></name> <operator>=</operator> <name>session</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sql</name></name> <operator>=</operator> <name>sql</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>trace</name> <operator>=</operator> <call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTrace</name><argument_list>(<argument><expr><name><name>Trace</name><operator>.</operator><name>COMMAND</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Check if this command is transactional.
     * If it is not, then it forces the current transaction to commit.
     *
     * @return true if it is
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>isTransactional</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Check if this command is a query.
     *
     * @return true if it is
     */</comment>
    <function_decl><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>isQuery</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Get the list of parameters.
     *
     * @return the list of parameters
     */</comment>
    <function_decl><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>ParameterInterface</name></extends></argument>&gt;</argument_list></name></type> <name>getParameters</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Check if this command is read only.
     *
     * @return true if it is
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>isReadOnly</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Get an empty result set containing the meta data.
     *
     * @return an empty result set
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>ResultInterface</name></type> <name>queryMeta</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Execute an updating statement (for example insert, delete, or update), if
     * this is possible.
     *
     * @param generatedKeysRequest
     *            {@code false} if generated keys are not needed, {@code true} if
     *            generated keys should be configured automatically, {@code int[]}
     *            to specify column indices to return generated keys from, or
     *            {@code String[]} to specify column names to return generated keys
     *            from
     * @return the update count and generated keys, if any
     * @throws DbException if the command is not an updating statement
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>ResultWithGeneratedKeys</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>generatedKeysRequest</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Execute a query statement, if this is possible.
     *
     * @param maxrows the maximum number of rows returned
     * @return the local result set
     * @throws DbException if the command is not a query
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>ResultInterface</name></type> <name>query</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>maxrows</name></decl></parameter>)</parameter_list>;</function_decl>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <specifier>final</specifier> <name>ResultInterface</name></type> <name>getMetaData</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>queryMeta</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Start the stopwatch.
     */</comment>
    <function><type><name>void</name></type> <name>start</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>trace</name><operator>.</operator><name>isInfoEnabled</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getQueryStatistics</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>startTimeNanos</name> <operator>=</operator> <call><name><name>Utils</name><operator>.</operator><name>currentNanoTime</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>setProgress</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setProgress</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check if this command has been canceled, and throw an exception if yes.
     *
     * @throws DbException if the statement has been canceled
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>checkCanceled</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>cancel</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>cancel</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>STATEMENT_WAS_CANCELED</name></name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>stop</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>commitIfNonTransactional</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isTransactional</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>session</name><operator>.</operator><name>getAutoCommit</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>commit</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>trace</name><operator>.</operator><name>isInfoEnabled</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>startTimeNanos</name> <operator>!=</operator> <literal type="number">0L</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>timeMillis</name> <init>= <expr><operator>(</operator><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>startTimeNanos</name><operator>)</operator> <operator>/</operator> <literal type="number">1_000_000L</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>timeMillis</name> <operator>&gt;</operator> <name><name>Constants</name><operator>.</operator><name>SLOW_QUERY_LIMIT_MS</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>trace</name><operator>.</operator><name>info</name></name><argument_list>(<argument><expr><literal type="string">"slow query: {0} ms"</literal></expr></argument>, <argument><expr><name>timeMillis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Execute a query and return the result.
     * This method prepares everything and calls {@link #query(long)} finally.
     *
     * @param maxrows the maximum number of rows to return
     * @param scrollable if the result set must be scrollable (ignored)
     * @return the result set
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>ResultInterface</name></type> <name>executeQuery</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>maxrows</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>scrollable</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>startTimeNanos</name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>start</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Database</name></type> <name>database</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>waitIfExclusiveModeEnabled</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>callStop</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">//noinspection SynchronizationOnLocalVariableOrMethodParameter</comment>
        <synchronized>synchronized <init>(<expr><name>session</name></expr>)</init> <block>{<block_content>
            <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>startStatementWithinTransaction</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Session</name></type> <name>oldSession</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>setThreadLocalSession</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <try>try <block>{<block_content>
                <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>checkPowerOff</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <try>try <block>{<block_content>
                        <decl_stmt><decl><type><name>ResultInterface</name></type> <name>result</name> <init>= <expr><call><name>query</name><argument_list>(<argument><expr><name>maxrows</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name>callStop</name> <operator>=</operator> <operator>!</operator><call><name><name>result</name><operator>.</operator><name>isLazy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><call><name><name>database</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><name>charPadding</name> <operator>==</operator> <name><name>CharPadding</name><operator>.</operator><name>IN_RESULT_SETS</name></name></expr>)</condition> <block>{<block_content>
                            <return>return <expr><call><name><name>ResultWithPaddedStrings</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
                        </block_content>}</block></if></if_stmt>
                        <return>return <expr><name>result</name></expr>;</return>
                    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>DbException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                        <comment type="line">// cannot retry DDL</comment>
                        <if_stmt><if>if <condition>(<expr><call><name>isCurrentCommandADefineCommand</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                            <throw>throw <expr><name>e</name></expr>;</throw>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>filterConcurrentUpdate</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>OutOfMemoryError</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                        <expr_stmt><expr><name>callStop</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                        <comment type="line">// there is a serious problem:</comment>
                        <comment type="line">// the transaction may be applied partially</comment>
                        <comment type="line">// in this case we need to panic:</comment>
                        <comment type="line">// close the database</comment>
                        <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>shutdownImmediately</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                    </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                        <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                    </block_content>}</block></catch></try>
                </block_content>}</block></while>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>DbException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name>e</name> <operator>=</operator> <call><name><name>e</name><operator>.</operator><name>addSQL</name></name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>SQLException</name></type> <name>s</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getSQLException</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>exceptionThrown</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>getErrorCode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ErrorCode</name><operator>.</operator><name>OUT_OF_MEMORY</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>callStop</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>shutdownImmediately</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <throw>throw <expr><name>e</name></expr>;</throw>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>checkPowerOff</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <throw>throw <expr><name>e</name></expr>;</throw>
            </block_content>}</block></catch> <finally>finally <block>{<block_content>
                <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>resetThreadLocalSession</name></name><argument_list>(<argument><expr><name>oldSession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>endStatement</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>callStop</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>stop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></finally></try>
        </block_content>}</block></synchronized>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>ResultWithGeneratedKeys</name></type> <name>executeUpdate</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>generatedKeysRequest</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Database</name></type> <name>database</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>waitIfExclusiveModeEnabled</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>callStop</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">//noinspection SynchronizationOnLocalVariableOrMethodParameter</comment>
        <synchronized>synchronized <init>(<expr><name>session</name></expr>)</init> <block>{<block_content>
            <expr_stmt><expr><call><name>commitIfNonTransactional</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>SessionLocal</name><operator>.</operator><name>Savepoint</name></name></type> <name>rollback</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>setSavepoint</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>startStatementWithinTransaction</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>DbException</name></type> <name>ex</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Session</name></type> <name>oldSession</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>setThreadLocalSession</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <try>try <block>{<block_content>
                <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>checkPowerOff</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <try>try <block>{<block_content>
                        <return>return <expr><call><name>update</name><argument_list>(<argument><expr><name>generatedKeysRequest</name></expr></argument>)</argument_list></call></expr>;</return>
                    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>DbException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                        <comment type="line">// cannot retry DDL</comment>
                        <if_stmt><if>if <condition>(<expr><call><name>isCurrentCommandADefineCommand</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                            <throw>throw <expr><name>e</name></expr>;</throw>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>filterConcurrentUpdate</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>OutOfMemoryError</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                        <expr_stmt><expr><name>callStop</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>shutdownImmediately</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                    </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                        <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                    </block_content>}</block></catch></try>
                </block_content>}</block></while>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>DbException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name>e</name> <operator>=</operator> <call><name><name>e</name><operator>.</operator><name>addSQL</name></name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>SQLException</name></type> <name>s</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getSQLException</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>exceptionThrown</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>getErrorCode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ErrorCode</name><operator>.</operator><name>OUT_OF_MEMORY</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>callStop</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>shutdownImmediately</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <throw>throw <expr><name>e</name></expr>;</throw>
                </block_content>}</block></if></if_stmt>
                <try>try <block>{<block_content>
                    <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>checkPowerOff</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>getErrorCode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ErrorCode</name><operator>.</operator><name>DEADLOCK_1</name></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>rollback</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>rollbackTo</name></name><argument_list>(<argument><expr><name>rollback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>nested</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>addSuppressed</name></name><argument_list>(<argument><expr><name>nested</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></catch></try>
                <expr_stmt><expr><name>ex</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
                <throw>throw <expr><name>e</name></expr>;</throw>
            </block_content>}</block></catch> <finally>finally <block>{<block_content>
                <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>resetThreadLocalSession</name></name><argument_list>(<argument><expr><name>oldSession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <try>try <block>{<block_content>
                    <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>endStatement</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>callStop</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>stop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>nested</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>ex</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <throw>throw <expr><name>nested</name></expr>;</throw>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><call><name><name>ex</name><operator>.</operator><name>addSuppressed</name></name><argument_list>(<argument><expr><name>nested</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></catch></try>
            </block_content>}</block></finally></try>
        </block_content>}</block></synchronized>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>commitIfNonTransactional</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isTransactional</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>autoCommit</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getAutoCommit</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>commit</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>autoCommit</name> <operator>&amp;&amp;</operator> <call><name><name>session</name><operator>.</operator><name>getAutoCommit</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>long</name></type> <name>filterConcurrentUpdate</name><parameter_list>(<parameter><decl><type><name>DbException</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>start</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>errorCode</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getErrorCode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>errorCode</name> <operator>!=</operator> <name><name>ErrorCode</name><operator>.</operator><name>CONCURRENT_UPDATE_1</name></name> <operator>&amp;&amp;</operator> <name>errorCode</name> <operator>!=</operator> <name><name>ErrorCode</name><operator>.</operator><name>ROW_NOT_FOUND_IN_PRIMARY_INDEX</name></name>
                <operator>&amp;&amp;</operator> <name>errorCode</name> <operator>!=</operator> <name><name>ErrorCode</name><operator>.</operator><name>ROW_NOT_FOUND_WHEN_DELETING_1</name></name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><name>e</name></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>now</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>currentNanoTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>start</name> <operator>!=</operator> <literal type="number">0L</literal> <operator>&amp;&amp;</operator> <name>now</name> <operator>-</operator> <name>start</name> <operator>&gt;</operator> <call><name><name>session</name><operator>.</operator><name>getLockTimeout</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">1_000_000L</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>LOCK_TIMEOUT_1</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><ternary><condition><expr><name>start</name> <operator>==</operator> <literal type="number">0L</literal></expr> ?</condition><then> <expr><name>now</name></expr> </then><else>: <expr><name>start</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>canReuse</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>cancel</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>cancel</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>sql</name> <operator>+</operator> <call><name><name>Trace</name><operator>.</operator><name>formatParams</name></name><argument_list>(<argument><expr><call><name>getParameters</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isCacheable</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Whether the command is already closed (in which case it can be re-used).
     *
     * @return true if it can be re-used
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>canReuse</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>canReuse</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * The command is now re-used, therefore reset the canReuse flag, and the
     * parameter values.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>reuse</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>canReuse</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>ParameterInterface</name></extends></argument>&gt;</argument_list></name></type> <name>parameters</name> <init>= <expr><call><name>getParameters</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>ParameterInterface</name></type> <name>param</name> <range>: <expr><name>parameters</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>param</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCanReuse</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>canReuse</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>canReuse</name></name> <operator>=</operator> <name>canReuse</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>DbObject</name></argument>&gt;</argument_list></name></type> <name>getDependencies</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Is the command we just tried to execute a DefineCommand (i.e. DDL).
     *
     * @return true if yes
     */</comment>
    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>isCurrentCommandADefineCommand</name><parameter_list>()</parameter_list>;</function_decl>
}</block></class>
</unit>
