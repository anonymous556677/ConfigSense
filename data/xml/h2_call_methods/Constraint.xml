<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/constraint/Constraint.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>constraint</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>DbObject</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>SessionLocal</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>Expression</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>ExpressionVisitor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>index</name><operator>.</operator><name>Index</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>Trace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>Row</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>Schema</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>SchemaObject</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>Column</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>Table</name></name>;</import>

<comment type="block" format="javadoc">/**
 * The base class for constraint checking.
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>Constraint</name> <super_list><extends>extends <super><name>SchemaObject</name></super></extends> <implements>implements <super><name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>Constraint</name></argument>&gt;</argument_list></name></super></implements></super_list> <block>{

    <enum><specifier>public</specifier> enum <name>Type</name> <block>{
        <comment type="block" format="javadoc">/**
         * The constraint type for check constraints.
         */</comment>
        <decl><name>CHECK</name></decl>,
        <comment type="block" format="javadoc">/**
         * The constraint type for primary key constraints.
         */</comment>
        <decl><name>PRIMARY_KEY</name></decl>,
        <comment type="block" format="javadoc">/**
         * The constraint type for unique constraints.
         */</comment>
        <decl><name>UNIQUE</name></decl>,
        <comment type="block" format="javadoc">/**
         * The constraint type for referential constraints.
         */</comment>
        <decl><name>REFERENTIAL</name></decl>,
        <comment type="block" format="javadoc">/**
         * The constraint type for domain constraints.
         */</comment>
        <decl><name>DOMAIN</name></decl>;

        <comment type="block" format="javadoc">/**
         * Get standard SQL type name.
         *
         * @return standard SQL type name
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>getSqlName</name><parameter_list>()</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name><name>Constraint</name><operator>.</operator><name>Type</name><operator>.</operator><name>PRIMARY_KEY</name></name></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="string">"PRIMARY KEY"</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name><name>Constraint</name><operator>.</operator><name>Type</name><operator>.</operator><name>REFERENTIAL</name></name></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="string">"FOREIGN KEY"</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name>name</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

    }</block></enum>

    <comment type="block" format="javadoc">/**
     * The table for which this constraint is defined.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Table</name></type> <name>table</name></decl>;</decl_stmt>

    <constructor><name>Constraint</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Table</name></type> <name>table</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>Trace</name><operator>.</operator><name>CONSTRAINT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>table</name></name> <operator>=</operator> <name>table</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>table</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>setTemporary</name></name><argument_list>(<argument><expr><call><name><name>table</name><operator>.</operator><name>isTemporary</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * The constraint type name
     *
     * @return the name
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>Type</name></type> <name>getConstraintType</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Check if this row fulfils the constraint.
     * This method throws an exception if not.
     *
     * @param session the session
     * @param t the table
     * @param oldRow the old row
     * @param newRow the new row
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>checkRow</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Table</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>Row</name></type> <name>oldRow</name></decl></parameter>, <parameter><decl><type><name>Row</name></type> <name>newRow</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Check if this constraint needs the specified index.
     *
     * @param index the index
     * @return true if the index is used
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>usesIndex</name><parameter_list>(<parameter><decl><type><name>Index</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * This index is now the owner of the specified index.
     *
     * @param index the index
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>setIndexOwner</name><parameter_list>(<parameter><decl><type><name>Index</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Get all referenced columns.
     *
     * @param table the table
     * @return the set of referenced columns
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>Column</name></argument>&gt;</argument_list></name></type> <name>getReferencedColumns</name><parameter_list>(<parameter><decl><type><name>Table</name></type> <name>table</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Returns the CHECK expression or null.
     *
     * @return the CHECK expression or null.
     */</comment>
    <function><type><specifier>public</specifier> <name>Expression</name></type> <name>getExpression</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the SQL statement to create this constraint.
     *
     * @return the SQL statement
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>String</name></type>  <name>getCreateSQLWithoutIndexes</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Check if this constraint needs to be checked before updating the data.
     *
     * @return true if it must be checked before updating
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>isBefore</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Check the existing data. This method is called if the constraint is added
     * after data has been inserted into the table.
     *
     * @param session the session
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>checkExistingData</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * This method is called after a related table has changed
     * (the table was renamed, or columns have been renamed).
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>rebuild</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Get the index of this constraint in the source table, or null if no index
     * is used.
     *
     * @return the index
     */</comment>
    <function><type><specifier>public</specifier> <name>Index</name></type> <name>getIndex</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the referenced unique constraint, or null.
     *
     * @return the referenced unique constraint, or null
     */</comment>
    <function><type><specifier>public</specifier> <name>ConstraintUnique</name></type> <name>getReferencedConstraint</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>DbObject</name><operator>.</operator><name>CONSTRAINT</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Table</name></type> <name>getTable</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>table</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Table</name></type> <name>getRefTable</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>table</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<parameter><decl><type><name>Constraint</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>other</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><call><name>getConstraintType</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ordinal</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>other</name><operator>.</operator><name>getConstraintType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ordinal</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isHidden</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>table</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>table</name><operator>.</operator><name>isHidden</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Visit all elements in the constraint.
     *
     * @param visitor the visitor
     * @return true if every visited expression returned true, or if there are
     *         no expressions
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isEverything</name><parameter_list>(<parameter><decl><type><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unused"</literal></expr></argument>)</argument_list></annotation> <name>ExpressionVisitor</name></type> <name>visitor</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>
