<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/message/DbException.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name></name>;</package>

<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>api</name><operator>.</operator><name>ErrorCode</name><operator>.</operator><name>*</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>PrintStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>PrintWriter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>InvocationTargetException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>charset</name><operator>.</operator><name>StandardCharsets</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>DriverManager</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>SQLException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>MessageFormat</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Properties</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>jdbc</name><operator>.</operator><name>JdbcException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>jdbc</name><operator>.</operator><name>JdbcSQLDataException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>jdbc</name><operator>.</operator><name>JdbcSQLException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>jdbc</name><operator>.</operator><name>JdbcSQLFeatureNotSupportedException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>jdbc</name><operator>.</operator><name>JdbcSQLIntegrityConstraintViolationException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>jdbc</name><operator>.</operator><name>JdbcSQLInvalidAuthorizationSpecException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>jdbc</name><operator>.</operator><name>JdbcSQLNonTransientConnectionException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>jdbc</name><operator>.</operator><name>JdbcSQLNonTransientException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>jdbc</name><operator>.</operator><name>JdbcSQLSyntaxErrorException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>jdbc</name><operator>.</operator><name>JdbcSQLTimeoutException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>jdbc</name><operator>.</operator><name>JdbcSQLTransactionRollbackException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>jdbc</name><operator>.</operator><name>JdbcSQLTransientException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>HasSQL</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>SortedProperties</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>StringUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>Utils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>TypeInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>Typed</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>Value</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This exception wraps a checked exception.
 * It is used in methods where checked exceptions are not supported,
 * for example in a Comparator.
 */</comment>
<class><specifier>public</specifier> class <name>DbException</name> <super_list><extends>extends <super><name>RuntimeException</name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">1L</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * If the SQL statement contains this text, then it is never added to the
     * SQL exception. Hiding the SQL statement may be important if it contains a
     * passwords, such as a CREATE LINKED TABLE statement.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>HIDE_SQL</name> <init>= <expr><literal type="string">"--hide--"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Properties</name></type> <name>MESSAGES</name> <init>= <expr><operator>new</operator> <call><name>Properties</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Thrown when OOME exception happens on handle error
     * inside {@link #convert(java.lang.Throwable)}.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>SQLException</name></type> <name>SQL_OOME</name> <init>=
            <expr><operator>new</operator> <call><name>SQLException</name><argument_list>(<argument><expr><literal type="string">"OutOfMemoryError"</literal></expr></argument>, <argument><expr><literal type="string">"HY000"</literal></expr></argument>, <argument><expr><name>OUT_OF_MEMORY</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>OutOfMemoryError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>DbException</name></type> <name>OOME</name> <init>= <expr><operator>new</operator> <call><name>DbException</name><argument_list>(<argument><expr><name>SQL_OOME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Object</name></type> <name>source</name></decl>;</decl_stmt>

    <static>static <block>{<block_content>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>messages</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>getResource</name></name><argument_list>(<argument><expr><literal type="string">"/org/h2/res/_messages_en.prop"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>messages</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>MESSAGES</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><name>messages</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>language</name> <init>= <expr><call><name><name>Locale</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLanguage</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><literal type="string">"en"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>language</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>translations</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>getResource</name></name><argument_list>(
                        <argument><expr><literal type="string">"/org/h2/res/_messages_"</literal> <operator>+</operator> <name>language</name> <operator>+</operator> <literal type="string">".prop"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <comment type="line">// message: translated message + english</comment>
                <comment type="line">// (otherwise certain applications don't work)</comment>
                <if_stmt><if>if <condition>(<expr><name>translations</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>Properties</name></type> <name>p</name> <init>= <expr><call><name><name>SortedProperties</name><operator>.</operator><name>fromLines</name></name><argument_list>(
                            <argument><expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><name>translations</name></expr></argument>, <argument><expr><name><name>StandardCharsets</name><operator>.</operator><name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>e</name> <range>: <expr><call><name><name>p</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                        <decl_stmt><decl><type><name>String</name></type> <name>key</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>e</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>String</name></type> <name>translation</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>e</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>translation</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>translation</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"#"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                            <decl_stmt><decl><type><name>String</name></type> <name>original</name> <init>= <expr><call><name><name>MESSAGES</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>String</name></type> <name>message</name> <init>= <expr><name>translation</name> <operator>+</operator> <literal type="string">"\n"</literal> <operator>+</operator> <name>original</name></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><call><name><name>MESSAGES</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>OutOfMemoryError</name></type> | <type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>DbException</name><operator>.</operator><name>traceThrowable</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
    </block_content>}</block></static>

    <constructor><specifier>private</specifier> <name>DbException</name><parameter_list>(<parameter><decl><type><name>SQLException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>translate</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>message</name> <init>= <expr><call><name><name>MESSAGES</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>message</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>message</name> <operator>=</operator> <literal type="string">"(Message "</literal> <operator>+</operator> <name>key</name> <operator>+</operator> <literal type="string">" not found)"</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>params</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>params</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><name><name>params</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>quote</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name>message</name> <operator>=</operator> <call><name><name>MessageFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><operator>(</operator><name><name>Object</name><index>[]</index></name><operator>)</operator> <name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>message</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>quote</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><name>l</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>;</condition><incr/>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>cp</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>codePointAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name><name>Character</name><operator>.</operator><name>charCount</name></name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><call><name><name>Character</name><operator>.</operator><name>getType</name></name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>t</name> <operator>&gt;=</operator> <name><name>Character</name><operator>.</operator><name>SPACE_SEPARATOR</name></name> <operator>&amp;&amp;</operator> <name>t</name> <operator>&lt;=</operator> <name><name>Character</name><operator>.</operator><name>SURROGATE</name></name> <operator>&amp;&amp;</operator> <name>cp</name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>cp</name> <operator>&lt;=</operator> <literal type="number">0xffff</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>StringUtils</name><operator>.</operator><name>appendHex</name></name><argument_list>(<argument><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name><name>StringUtils</name><operator>.</operator><name>appendHex</name></name><argument_list>(<argument><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\\+"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>cp</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>||</operator> <name>cp</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator> <name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>appendCodePoint</name></name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the SQLException object.
     *
     * @return the exception
     */</comment>
    <function><type><specifier>public</specifier> <name>SQLException</name></type> <name>getSQLException</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>SQLException</name><operator>)</operator> <call><name>getCause</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the error code.
     *
     * @return the error code
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getErrorCode</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getSQLException</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getErrorCode</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Set the SQL statement of the given exception.
     * This method may create a new object.
     *
     * @param sql the SQL statement
     * @return the exception
     */</comment>
    <function><type><specifier>public</specifier> <name>DbException</name></type> <name>addSQL</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sql</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>SQLException</name></type> <name>e</name> <init>= <expr><call><name>getSQLException</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>e</name> <operator>instanceof</operator> <name>JdbcException</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>JdbcException</name></type> <name>j</name> <init>= <expr><operator>(</operator><name>JdbcException</name><operator>)</operator> <name>e</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>j</name><operator>.</operator><name>getSQL</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>j</name><operator>.</operator><name>setSQL</name></name><argument_list>(<argument><expr><call><name>filterSQL</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>this</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>getJdbcSQLException</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getSQLState</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getErrorCode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>new</operator> <call><name>DbException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create a database exception for a specific error code.
     *
     * @param errorCode the error code
     * @return the exception
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>DbException</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>errorCode</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>get</name><argument_list>(<argument><expr><name>errorCode</name></expr></argument>, <argument><expr><operator>(</operator><name>String</name><operator>)</operator> <literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create a database exception for a specific error code.
     *
     * @param errorCode the error code
     * @param p1 the first parameter of the message
     * @return the exception
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>DbException</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>errorCode</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>p1</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>get</name><argument_list>(<argument><expr><name>errorCode</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><name>p1</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create a database exception for a specific error code.
     *
     * @param errorCode the error code
     * @param cause the cause of the exception
     * @param params the list of parameters of the message
     * @return the exception
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>DbException</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>errorCode</name></decl></parameter>, <parameter><decl><type><name>Throwable</name></type> <name>cause</name></decl></parameter>,
            <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>DbException</name><argument_list>(<argument><expr><call><name>getJdbcSQLException</name><argument_list>(<argument><expr><name>errorCode</name></expr></argument>, <argument><expr><name>cause</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create a database exception for a specific error code.
     *
     * @param errorCode the error code
     * @param params the list of parameters of the message
     * @return the exception
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>DbException</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>errorCode</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>DbException</name><argument_list>(<argument><expr><call><name>getJdbcSQLException</name><argument_list>(<argument><expr><name>errorCode</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create a database exception for an arbitrary SQLState.
     *
     * @param sqlstate the state to use
     * @param message the message to use
     * @return the exception
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>DbException</name></type> <name>fromUser</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sqlstate</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// do not translate as sqlstate is arbitrary : avoid "message not found"</comment>
        <return>return <expr><operator>new</operator> <call><name>DbException</name><argument_list>(<argument><expr><call><name>getJdbcSQLException</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>sqlstate</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create a syntax error exception.
     *
     * @param sql the SQL statement
     * @param index the position of the error in the SQL statement
     * @return the exception
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>DbException</name></type> <name>getSyntaxError</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sql</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>sql</name> <operator>=</operator> <call><name><name>StringUtils</name><operator>.</operator><name>addAsterisk</name></name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>get</name><argument_list>(<argument><expr><name>SYNTAX_ERROR_1</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create a syntax error exception.
     *
     * @param sql the SQL statement
     * @param index the position of the error in the SQL statement
     * @param message the message
     * @return the exception
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>DbException</name></type> <name>getSyntaxError</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sql</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>sql</name> <operator>=</operator> <call><name><name>StringUtils</name><operator>.</operator><name>addAsterisk</name></name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>new</operator> <call><name>DbException</name><argument_list>(<argument><expr><call><name>getJdbcSQLException</name><argument_list>(<argument><expr><name>SYNTAX_ERROR_2</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create a syntax error exception for a specific error code.
     *
     * @param errorCode the error code
     * @param sql the SQL statement
     * @param index the position of the error in the SQL statement
     * @param params the list of parameters of the message
     * @return the exception
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>DbException</name></type> <name>getSyntaxError</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>errorCode</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>sql</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>sql</name> <operator>=</operator> <call><name><name>StringUtils</name><operator>.</operator><name>addAsterisk</name></name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>sqlstate</name> <init>= <expr><call><name>getState</name><argument_list>(<argument><expr><name>errorCode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>message</name> <init>= <expr><call><name>translate</name><argument_list>(<argument><expr><name>sqlstate</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>new</operator> <call><name>DbException</name><argument_list>(<argument><expr><call><name>getJdbcSQLException</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>sqlstate</name></expr></argument>, <argument><expr><name>errorCode</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets a SQL exception meaning this feature is not supported.
     *
     * @param message what exactly is not supported
     * @return the exception
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>DbException</name></type> <name>getUnsupportedException</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>get</name><argument_list>(<argument><expr><name>FEATURE_NOT_SUPPORTED_1</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets a SQL exception meaning this value is invalid.
     *
     * @param param the name of the parameter
     * @param value the value passed
     * @return the exception
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>DbException</name></type> <name>getInvalidValueException</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>get</name><argument_list>(<argument><expr><name>INVALID_VALUE_2</name></expr></argument>, <argument><expr><ternary><condition><expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">"null"</literal></expr> </then><else>: <expr><call><name><name>value</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets a SQL exception meaning the type of expression is invalid or unknown.
     *
     * @param param the name of the parameter
     * @param e the expression
     * @return the exception
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>DbException</name></type> <name>getInvalidExpressionTypeException</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>Typed</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>TypeInfo</name></type> <name>type</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>type</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>UNKNOWN</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>get</name><argument_list>(<argument><expr><name>UNKNOWN_DATA_TYPE_1</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>e</name> <operator>instanceof</operator> <name>HasSQL</name></expr> ?</condition><then> <expr><operator>(</operator><name>HasSQL</name><operator>)</operator> <name>e</name></expr> </then><else>: <expr><name>type</name></expr></else></ternary><operator>)</operator><operator>.</operator><call><name>getTraceSQL</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>get</name><argument_list>(<argument><expr><name>INVALID_VALUE_2</name></expr></argument>, <argument><expr><call><name><name>type</name><operator>.</operator><name>getTraceSQL</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets a SQL exception meaning this value is too long.
     *
     * @param columnOrType
     *            column with data type or data type name
     * @param value
     *            string representation of value, will be truncated to 80
     *            characters
     * @param valueLength
     *            the actual length of value, {@code -1L} if unknown
     * @return the exception
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>DbException</name></type> <name>getValueTooLongException</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>columnOrType</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>valueLength</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name><name>value</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><ternary><condition><expr><name>valueLength</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">22</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>builder</name> <init>= <expr><ternary><condition><expr><name>length</name> <operator>&gt;</operator> <literal type="number">80</literal></expr> <comment type="line">//</comment>
                ?</condition><then> <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><literal type="number">83</literal> <operator>+</operator> <name>m</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"..."</literal></expr></argument>)</argument_list></call></expr>
                </then><else>: <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><name>length</name> <operator>+</operator> <name>m</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>valueLength</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" ("</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>valueLength</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>get</name><argument_list>(<argument><expr><name>VALUE_TOO_LONG_2</name></expr></argument>, <argument><expr><name>columnOrType</name></expr></argument>, <argument><expr><call><name><name>builder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets a file version exception.
     *
     * @param dataFileName the name of the database
     * @return the exception
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>DbException</name></type> <name>getFileVersionError</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dataFileName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>FILE_VERSION_ERROR_1</name></expr></argument>, <argument><expr><literal type="string">"Old database: "</literal> <operator>+</operator> <name>dataFileName</name>
                <operator>+</operator> <literal type="string">" - please convert the database to a SQL script and re-create it."</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets an internal error.
     *
     * @param s the message
     * @return the RuntimeException object
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>RuntimeException</name></type> <name>getInternalError</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>RuntimeException</name></type> <name>e</name> <init>= <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>DbException</name><operator>.</operator><name>traceThrowable</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>e</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets an internal error.
     *
     * @return the RuntimeException object
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>RuntimeException</name></type> <name>getInternalError</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getInternalError</name><argument_list>(<argument><expr><literal type="string">"Unexpected code path"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Convert an exception to a SQL exception using the default mapping.
     *
     * @param e the root cause
     * @return the SQL exception object
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>SQLException</name></type> <name>toSQLException</name><parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>e</name> <operator>instanceof</operator> <name>SQLException</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>SQLException</name><operator>)</operator> <name>e</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>convert</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getSQLException</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Convert a throwable to an SQL exception using the default mapping. All
     * errors except the following are re-thrown: StackOverflowError,
     * LinkageError.
     *
     * @param e the root cause
     * @return the exception object
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>DbException</name></type> <name>convert</name><parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>e</name> <operator>instanceof</operator> <name>DbException</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>(</operator><name>DbException</name><operator>)</operator> <name>e</name></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>e</name> <operator>instanceof</operator> <name>SQLException</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>DbException</name><argument_list>(<argument><expr><operator>(</operator><name>SQLException</name><operator>)</operator> <name>e</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>e</name> <operator>instanceof</operator> <name>InvocationTargetException</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name>convertInvocation</name><argument_list>(<argument><expr><operator>(</operator><name>InvocationTargetException</name><operator>)</operator> <name>e</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>e</name> <operator>instanceof</operator> <name>IOException</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name>get</name><argument_list>(<argument><expr><name>IO_EXCEPTION_1</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>e</name> <operator>instanceof</operator> <name>OutOfMemoryError</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name>get</name><argument_list>(<argument><expr><name>OUT_OF_MEMORY</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>e</name> <operator>instanceof</operator> <name>StackOverflowError</name> <operator>||</operator> <name>e</name> <operator>instanceof</operator> <name>LinkageError</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name>get</name><argument_list>(<argument><expr><name>GENERAL_ERROR_1</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>e</name> <operator>instanceof</operator> <name>Error</name></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>(</operator><name>Error</name><operator>)</operator> <name>e</name></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name>get</name><argument_list>(<argument><expr><name>GENERAL_ERROR_1</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>OutOfMemoryError</name></type> <name>ignore</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><name>OOME</name></expr>;</return>
        </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <try>try <block>{<block_content>
                <decl_stmt><decl><type><name>DbException</name></type> <name>dbException</name> <init>= <expr><operator>new</operator> <call><name>DbException</name><argument_list>(
                        <argument><expr><operator>new</operator> <call><name>SQLException</name><argument_list>(<argument><expr><literal type="string">"GeneralError"</literal></expr></argument>, <argument><expr><literal type="string">"HY000"</literal></expr></argument>, <argument><expr><name>GENERAL_ERROR_1</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>dbException</name><operator>.</operator><name>addSuppressed</name></name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>dbException</name></expr>;</return>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>OutOfMemoryError</name></type> <name>ignore</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <return>return <expr><name>OOME</name></expr>;</return>
            </block_content>}</block></catch></try>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Convert an InvocationTarget exception to a database exception.
     *
     * @param te the root cause
     * @param message the added message or null
     * @return the database exception object
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>DbException</name></type> <name>convertInvocation</name><parameter_list>(<parameter><decl><type><name>InvocationTargetException</name></type> <name>te</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Throwable</name></type> <name>t</name> <init>= <expr><call><name><name>te</name><operator>.</operator><name>getTargetException</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>t</name> <operator>instanceof</operator> <name>SQLException</name> <operator>||</operator> <name>t</name> <operator>instanceof</operator> <name>DbException</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>convert</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>message</name> <operator>=</operator> <ternary><condition><expr><name>message</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>t</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name>message</name> <operator>+</operator> <literal type="string">": "</literal> <operator>+</operator> <call><name><name>t</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
        <return>return <expr><call><name>get</name><argument_list>(<argument><expr><name>EXCEPTION_IN_FUNCTION_1</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Convert an IO exception to a database exception.
     *
     * @param e the root cause
     * @param message the message or null
     * @return the database exception object
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>DbException</name></type> <name>convertIOException</name><parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>message</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Throwable</name></type> <name>t</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>t</name> <operator>instanceof</operator> <name>DbException</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>(</operator><name>DbException</name><operator>)</operator> <name>t</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name>get</name><argument_list>(<argument><expr><name>IO_EXCEPTION_1</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>get</name><argument_list>(<argument><expr><name>IO_EXCEPTION_2</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets the SQL exception object for a specific error code.
     *
     * @param errorCode the error code
     * @return the SQLException object
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>SQLException</name></type> <name>getJdbcSQLException</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>errorCode</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getJdbcSQLException</name><argument_list>(<argument><expr><name>errorCode</name></expr></argument>, <argument><expr><operator>(</operator><name>Throwable</name><operator>)</operator><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets the SQL exception object for a specific error code.
     *
     * @param errorCode the error code
     * @param p1 the first parameter of the message
     * @return the SQLException object
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>SQLException</name></type> <name>getJdbcSQLException</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>errorCode</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>p1</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getJdbcSQLException</name><argument_list>(<argument><expr><name>errorCode</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets the SQL exception object for a specific error code.
     *
     * @param errorCode the error code
     * @param cause the cause of the exception
     * @param params the list of parameters of the message
     * @return the SQLException object
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>SQLException</name></type> <name>getJdbcSQLException</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>errorCode</name></decl></parameter>, <parameter><decl><type><name>Throwable</name></type> <name>cause</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>sqlstate</name> <init>= <expr><call><name>getState</name><argument_list>(<argument><expr><name>errorCode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>message</name> <init>= <expr><call><name>translate</name><argument_list>(<argument><expr><name>sqlstate</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>getJdbcSQLException</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>sqlstate</name></expr></argument>, <argument><expr><name>errorCode</name></expr></argument>, <argument><expr><name>cause</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a SQLException.
     *
     * @param message the reason
     * @param sql the SQL statement
     * @param state the SQL state
     * @param errorCode the error code
     * @param cause the exception that was the reason for this exception
     * @param stackTrace the stack trace
     * @return the SQLException object
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>SQLException</name></type> <name>getJdbcSQLException</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>sql</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>errorCode</name></decl></parameter>,
            <parameter><decl><type><name>Throwable</name></type> <name>cause</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>stackTrace</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>sql</name> <operator>=</operator> <call><name>filterSQL</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Use SQLState class value to detect type</comment>
        <switch>switch <condition>(<expr><name>errorCode</name> <operator>/</operator> <literal type="number">1_000</literal></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">2</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>JdbcSQLNonTransientException</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>errorCode</name></expr></argument>, <argument><expr><name>cause</name></expr></argument>, <argument><expr><name>stackTrace</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="number">7</literal></expr>:</case>
        <case>case <expr><literal type="number">21</literal></expr>:</case>
        <case>case <expr><literal type="number">42</literal></expr>:</case>
        <case>case <expr><literal type="number">54</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>JdbcSQLSyntaxErrorException</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>errorCode</name></expr></argument>, <argument><expr><name>cause</name></expr></argument>, <argument><expr><name>stackTrace</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="number">8</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>JdbcSQLNonTransientConnectionException</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>errorCode</name></expr></argument>, <argument><expr><name>cause</name></expr></argument>, <argument><expr><name>stackTrace</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="number">22</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>JdbcSQLDataException</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>errorCode</name></expr></argument>, <argument><expr><name>cause</name></expr></argument>, <argument><expr><name>stackTrace</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="number">23</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>JdbcSQLIntegrityConstraintViolationException</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>errorCode</name></expr></argument>, <argument><expr><name>cause</name></expr></argument>, <argument><expr><name>stackTrace</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="number">28</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>JdbcSQLInvalidAuthorizationSpecException</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>errorCode</name></expr></argument>, <argument><expr><name>cause</name></expr></argument>, <argument><expr><name>stackTrace</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="number">40</literal></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>JdbcSQLTransactionRollbackException</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>errorCode</name></expr></argument>, <argument><expr><name>cause</name></expr></argument>, <argument><expr><name>stackTrace</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></switch>
        <comment type="line">// Check error code</comment>
        <switch>switch <condition>(<expr><name>errorCode</name></expr>)</condition><block>{<block_content>
        <case>case <expr><name>GENERAL_ERROR_1</name></expr>:</case>
        <case>case <expr><name>UNKNOWN_DATA_TYPE_1</name></expr>:</case>
        <case>case <expr><name>METHOD_NOT_ALLOWED_FOR_QUERY</name></expr>:</case>
        <case>case <expr><name>METHOD_ONLY_ALLOWED_FOR_QUERY</name></expr>:</case>
        <case>case <expr><name>SEQUENCE_EXHAUSTED</name></expr>:</case>
        <case>case <expr><name>OBJECT_CLOSED</name></expr>:</case>
        <case>case <expr><name>CANNOT_DROP_CURRENT_USER</name></expr>:</case>
        <case>case <expr><name>UNSUPPORTED_SETTING_COMBINATION</name></expr>:</case>
        <case>case <expr><name>FILE_RENAME_FAILED_2</name></expr>:</case>
        <case>case <expr><name>FILE_DELETE_FAILED_1</name></expr>:</case>
        <case>case <expr><name>IO_EXCEPTION_1</name></expr>:</case>
        <case>case <expr><name>NOT_ON_UPDATABLE_ROW</name></expr>:</case>
        <case>case <expr><name>IO_EXCEPTION_2</name></expr>:</case>
        <case>case <expr><name>TRACE_FILE_ERROR_2</name></expr>:</case>
        <case>case <expr><name>ADMIN_RIGHTS_REQUIRED</name></expr>:</case>
        <case>case <expr><name>ERROR_EXECUTING_TRIGGER_3</name></expr>:</case>
        <case>case <expr><name>COMMIT_ROLLBACK_NOT_ALLOWED</name></expr>:</case>
        <case>case <expr><name>FILE_CREATION_FAILED_1</name></expr>:</case>
        <case>case <expr><name>SAVEPOINT_IS_INVALID_1</name></expr>:</case>
        <case>case <expr><name>SAVEPOINT_IS_UNNAMED</name></expr>:</case>
        <case>case <expr><name>SAVEPOINT_IS_NAMED</name></expr>:</case>
        <case>case <expr><name>NOT_ENOUGH_RIGHTS_FOR_1</name></expr>:</case>
        <case>case <expr><name>DATABASE_IS_READ_ONLY</name></expr>:</case>
        <case>case <expr><name>WRONG_XID_FORMAT_1</name></expr>:</case>
        <case>case <expr><name>UNSUPPORTED_COMPRESSION_OPTIONS_1</name></expr>:</case>
        <case>case <expr><name>UNSUPPORTED_COMPRESSION_ALGORITHM_1</name></expr>:</case>
        <case>case <expr><name>COMPRESSION_ERROR</name></expr>:</case>
        <case>case <expr><name>EXCEPTION_IN_FUNCTION_1</name></expr>:</case>
        <case>case <expr><name>ERROR_ACCESSING_LINKED_TABLE_2</name></expr>:</case>
        <case>case <expr><name>FILE_NOT_FOUND_1</name></expr>:</case>
        <case>case <expr><name>INVALID_CLASS_2</name></expr>:</case>
        <case>case <expr><name>DATABASE_IS_NOT_PERSISTENT</name></expr>:</case>
        <case>case <expr><name>RESULT_SET_NOT_UPDATABLE</name></expr>:</case>
        <case>case <expr><name>RESULT_SET_NOT_SCROLLABLE</name></expr>:</case>
        <case>case <expr><name>METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT</name></expr>:</case>
        <case>case <expr><name>ACCESS_DENIED_TO_CLASS_1</name></expr>:</case>
        <case>case <expr><name>RESULT_SET_READONLY</name></expr>:</case>
        <case>case <expr><name>CURRENT_SEQUENCE_VALUE_IS_NOT_DEFINED_IN_SESSION_1</name></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>JdbcSQLNonTransientException</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>errorCode</name></expr></argument>, <argument><expr><name>cause</name></expr></argument>, <argument><expr><name>stackTrace</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>FEATURE_NOT_SUPPORTED_1</name></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>JdbcSQLFeatureNotSupportedException</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>errorCode</name></expr></argument>, <argument><expr><name>cause</name></expr></argument>, <argument><expr><name>stackTrace</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>LOCK_TIMEOUT_1</name></expr>:</case>
        <case>case <expr><name>STATEMENT_WAS_CANCELED</name></expr>:</case>
        <case>case <expr><name>LOB_CLOSED_ON_TIMEOUT_1</name></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>JdbcSQLTimeoutException</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>errorCode</name></expr></argument>, <argument><expr><name>cause</name></expr></argument>, <argument><expr><name>stackTrace</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>FUNCTION_MUST_RETURN_RESULT_SET_1</name></expr>:</case>
        <case>case <expr><name>INVALID_TRIGGER_FLAGS_1</name></expr>:</case>
        <case>case <expr><name>SUM_OR_AVG_ON_WRONG_DATATYPE_1</name></expr>:</case>
        <case>case <expr><name>MUST_GROUP_BY_COLUMN_1</name></expr>:</case>
        <case>case <expr><name>SECOND_PRIMARY_KEY</name></expr>:</case>
        <case>case <expr><name>FUNCTION_NOT_FOUND_1</name></expr>:</case>
        <case>case <expr><name>COLUMN_MUST_NOT_BE_NULLABLE_1</name></expr>:</case>
        <case>case <expr><name>USER_NOT_FOUND_1</name></expr>:</case>
        <case>case <expr><name>USER_ALREADY_EXISTS_1</name></expr>:</case>
        <case>case <expr><name>SEQUENCE_ALREADY_EXISTS_1</name></expr>:</case>
        <case>case <expr><name>SEQUENCE_NOT_FOUND_1</name></expr>:</case>
        <case>case <expr><name>VIEW_NOT_FOUND_1</name></expr>:</case>
        <case>case <expr><name>VIEW_ALREADY_EXISTS_1</name></expr>:</case>
        <case>case <expr><name>TRIGGER_ALREADY_EXISTS_1</name></expr>:</case>
        <case>case <expr><name>TRIGGER_NOT_FOUND_1</name></expr>:</case>
        <case>case <expr><name>ERROR_CREATING_TRIGGER_OBJECT_3</name></expr>:</case>
        <case>case <expr><name>CONSTRAINT_ALREADY_EXISTS_1</name></expr>:</case>
        <case>case <expr><name>SUBQUERY_IS_NOT_SINGLE_COLUMN</name></expr>:</case>
        <case>case <expr><name>INVALID_USE_OF_AGGREGATE_FUNCTION_1</name></expr>:</case>
        <case>case <expr><name>CONSTRAINT_NOT_FOUND_1</name></expr>:</case>
        <case>case <expr><name>AMBIGUOUS_COLUMN_NAME_1</name></expr>:</case>
        <case>case <expr><name>ORDER_BY_NOT_IN_RESULT</name></expr>:</case>
        <case>case <expr><name>ROLE_ALREADY_EXISTS_1</name></expr>:</case>
        <case>case <expr><name>ROLE_NOT_FOUND_1</name></expr>:</case>
        <case>case <expr><name>USER_OR_ROLE_NOT_FOUND_1</name></expr>:</case>
        <case>case <expr><name>ROLES_AND_RIGHT_CANNOT_BE_MIXED</name></expr>:</case>
        <case>case <expr><name>METHODS_MUST_HAVE_DIFFERENT_PARAMETER_COUNTS_2</name></expr>:</case>
        <case>case <expr><name>ROLE_ALREADY_GRANTED_1</name></expr>:</case>
        <case>case <expr><name>COLUMN_IS_PART_OF_INDEX_1</name></expr>:</case>
        <case>case <expr><name>FUNCTION_ALIAS_ALREADY_EXISTS_1</name></expr>:</case>
        <case>case <expr><name>FUNCTION_ALIAS_NOT_FOUND_1</name></expr>:</case>
        <case>case <expr><name>SCHEMA_ALREADY_EXISTS_1</name></expr>:</case>
        <case>case <expr><name>SCHEMA_NOT_FOUND_1</name></expr>:</case>
        <case>case <expr><name>SCHEMA_NAME_MUST_MATCH</name></expr>:</case>
        <case>case <expr><name>COLUMN_CONTAINS_NULL_VALUES_1</name></expr>:</case>
        <case>case <expr><name>SEQUENCE_BELONGS_TO_A_TABLE_1</name></expr>:</case>
        <case>case <expr><name>COLUMN_IS_REFERENCED_1</name></expr>:</case>
        <case>case <expr><name>CANNOT_DROP_LAST_COLUMN</name></expr>:</case>
        <case>case <expr><name>INDEX_BELONGS_TO_CONSTRAINT_2</name></expr>:</case>
        <case>case <expr><name>CLASS_NOT_FOUND_1</name></expr>:</case>
        <case>case <expr><name>METHOD_NOT_FOUND_1</name></expr>:</case>
        <case>case <expr><name>COLLATION_CHANGE_WITH_DATA_TABLE_1</name></expr>:</case>
        <case>case <expr><name>SCHEMA_CAN_NOT_BE_DROPPED_1</name></expr>:</case>
        <case>case <expr><name>ROLE_CAN_NOT_BE_DROPPED_1</name></expr>:</case>
        <case>case <expr><name>CANNOT_TRUNCATE_1</name></expr>:</case>
        <case>case <expr><name>CANNOT_DROP_2</name></expr>:</case>
        <case>case <expr><name>VIEW_IS_INVALID_2</name></expr>:</case>
        <case>case <expr><name>TYPES_ARE_NOT_COMPARABLE_2</name></expr>:</case>
        <case>case <expr><name>CONSTANT_ALREADY_EXISTS_1</name></expr>:</case>
        <case>case <expr><name>CONSTANT_NOT_FOUND_1</name></expr>:</case>
        <case>case <expr><name>LITERALS_ARE_NOT_ALLOWED</name></expr>:</case>
        <case>case <expr><name>CANNOT_DROP_TABLE_1</name></expr>:</case>
        <case>case <expr><name>DOMAIN_ALREADY_EXISTS_1</name></expr>:</case>
        <case>case <expr><name>DOMAIN_NOT_FOUND_1</name></expr>:</case>
        <case>case <expr><name>WITH_TIES_WITHOUT_ORDER_BY</name></expr>:</case>
        <case>case <expr><name>CANNOT_MIX_INDEXED_AND_UNINDEXED_PARAMS</name></expr>:</case>
        <case>case <expr><name>TRANSACTION_NOT_FOUND_1</name></expr>:</case>
        <case>case <expr><name>AGGREGATE_NOT_FOUND_1</name></expr>:</case>
        <case>case <expr><name>WINDOW_NOT_FOUND_1</name></expr>:</case>
        <case>case <expr><name>CAN_ONLY_ASSIGN_TO_VARIABLE_1</name></expr>:</case>
        <case>case <expr><name>PUBLIC_STATIC_JAVA_METHOD_NOT_FOUND_1</name></expr>:</case>
        <case>case <expr><name>JAVA_OBJECT_SERIALIZER_CHANGE_WITH_DATA_TABLE</name></expr>:</case>
        <case>case <expr><name>FOR_UPDATE_IS_NOT_ALLOWED_IN_DISTINCT_OR_GROUPED_SELECT</name></expr>:</case>
        <case>case <expr><name>INVALID_VALUE_PRECISION</name></expr>:</case>
        <case>case <expr><name>INVALID_VALUE_SCALE</name></expr>:</case>
        <case>case <expr><name>CONSTRAINT_IS_USED_BY_CONSTRAINT_2</name></expr>:</case>
        <case>case <expr><name>UNCOMPARABLE_REFERENCED_COLUMN_2</name></expr>:</case>
        <case>case <expr><name>GENERATED_COLUMN_CANNOT_BE_ASSIGNED_1</name></expr>:</case>
        <case>case <expr><name>GENERATED_COLUMN_CANNOT_BE_UPDATABLE_BY_CONSTRAINT_2</name></expr>:</case>
        <case>case <expr><name>COLUMN_ALIAS_IS_NOT_SPECIFIED_1</name></expr>:</case>
        <case>case <expr><name>GROUP_BY_NOT_IN_THE_RESULT</name></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>JdbcSQLSyntaxErrorException</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>errorCode</name></expr></argument>, <argument><expr><name>cause</name></expr></argument>, <argument><expr><name>stackTrace</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>HEX_STRING_ODD_1</name></expr>:</case>
        <case>case <expr><name>HEX_STRING_WRONG_1</name></expr>:</case>
        <case>case <expr><name>INVALID_VALUE_2</name></expr>:</case>
        <case>case <expr><name>SEQUENCE_ATTRIBUTES_INVALID_7</name></expr>:</case>
        <case>case <expr><name>INVALID_TO_CHAR_FORMAT</name></expr>:</case>
        <case>case <expr><name>PARAMETER_NOT_SET_1</name></expr>:</case>
        <case>case <expr><name>PARSE_ERROR_1</name></expr>:</case>
        <case>case <expr><name>INVALID_TO_DATE_FORMAT</name></expr>:</case>
        <case>case <expr><name>STRING_FORMAT_ERROR_1</name></expr>:</case>
        <case>case <expr><name>SERIALIZATION_FAILED_1</name></expr>:</case>
        <case>case <expr><name>DESERIALIZATION_FAILED_1</name></expr>:</case>
        <case>case <expr><name>SCALAR_SUBQUERY_CONTAINS_MORE_THAN_ONE_ROW</name></expr>:</case>
        <case>case <expr><name>STEP_SIZE_MUST_NOT_BE_ZERO</name></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>JdbcSQLDataException</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>errorCode</name></expr></argument>, <argument><expr><name>cause</name></expr></argument>, <argument><expr><name>stackTrace</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>URL_RELATIVE_TO_CWD</name></expr>:</case>
        <case>case <expr><name>DATABASE_NOT_FOUND_1</name></expr>:</case>
        <case>case <expr><name>DATABASE_NOT_FOUND_WITH_IF_EXISTS_1</name></expr>:</case>
        <case>case <expr><name>REMOTE_DATABASE_NOT_FOUND_1</name></expr>:</case>
        <case>case <expr><name>TRACE_CONNECTION_NOT_CLOSED</name></expr>:</case>
        <case>case <expr><name>DATABASE_ALREADY_OPEN_1</name></expr>:</case>
        <case>case <expr><name>FILE_CORRUPTED_1</name></expr>:</case>
        <case>case <expr><name>URL_FORMAT_ERROR_2</name></expr>:</case>
        <case>case <expr><name>DRIVER_VERSION_ERROR_2</name></expr>:</case>
        <case>case <expr><name>FILE_VERSION_ERROR_1</name></expr>:</case>
        <case>case <expr><name>FILE_ENCRYPTION_ERROR_1</name></expr>:</case>
        <case>case <expr><name>WRONG_PASSWORD_FORMAT</name></expr>:</case>
        <case>case <expr><name>UNSUPPORTED_CIPHER</name></expr>:</case>
        <case>case <expr><name>UNSUPPORTED_LOCK_METHOD_1</name></expr>:</case>
        <case>case <expr><name>EXCEPTION_OPENING_PORT_2</name></expr>:</case>
        <case>case <expr><name>DUPLICATE_PROPERTY_1</name></expr>:</case>
        <case>case <expr><name>CONNECTION_BROKEN_1</name></expr>:</case>
        <case>case <expr><name>UNKNOWN_MODE_1</name></expr>:</case>
        <case>case <expr><name>CLUSTER_ERROR_DATABASE_RUNS_ALONE</name></expr>:</case>
        <case>case <expr><name>CLUSTER_ERROR_DATABASE_RUNS_CLUSTERED_1</name></expr>:</case>
        <case>case <expr><name>DATABASE_IS_CLOSED</name></expr>:</case>
        <case>case <expr><name>ERROR_SETTING_DATABASE_EVENT_LISTENER_2</name></expr>:</case>
        <case>case <expr><name>OUT_OF_MEMORY</name></expr>:</case>
        <case>case <expr><name>UNSUPPORTED_SETTING_1</name></expr>:</case>
        <case>case <expr><name>REMOTE_CONNECTION_NOT_ALLOWED</name></expr>:</case>
        <case>case <expr><name>DATABASE_CALLED_AT_SHUTDOWN</name></expr>:</case>
        <case>case <expr><name>CANNOT_CHANGE_SETTING_WHEN_OPEN_1</name></expr>:</case>
        <case>case <expr><name>DATABASE_IS_IN_EXCLUSIVE_MODE</name></expr>:</case>
        <case>case <expr><name>INVALID_DATABASE_NAME_1</name></expr>:</case>
        <case>case <expr><name>AUTHENTICATOR_NOT_AVAILABLE</name></expr>:</case>
        <case>case <expr><name>METHOD_DISABLED_ON_AUTOCOMMIT_TRUE</name></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>JdbcSQLNonTransientConnectionException</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>errorCode</name></expr></argument>, <argument><expr><name>cause</name></expr></argument>, <argument><expr><name>stackTrace</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>ROW_NOT_FOUND_WHEN_DELETING_1</name></expr>:</case>
        <case>case <expr><name>CONCURRENT_UPDATE_1</name></expr>:</case>
        <case>case <expr><name>ROW_NOT_FOUND_IN_PRIMARY_INDEX</name></expr>:</case>
            <return>return <expr><operator>new</operator> <call><name>JdbcSQLTransientException</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>errorCode</name></expr></argument>, <argument><expr><name>cause</name></expr></argument>, <argument><expr><name>stackTrace</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></switch>
        <comment type="line">// Default</comment>
        <return>return <expr><operator>new</operator> <call><name>JdbcSQLException</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>errorCode</name></expr></argument>, <argument><expr><name>cause</name></expr></argument>, <argument><expr><name>stackTrace</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>filterSQL</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sql</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>sql</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><call><name><name>sql</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>HIDE_SQL</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>sql</name></expr> </then><else>: <expr><literal type="string">"-"</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Builds message for an exception.
     *
     * @param e exception
     * @return message
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>buildMessageForException</name><parameter_list>(<parameter><decl><type><name>JdbcException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getOriginalMessage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>buff</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><ternary><condition><expr><name>s</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>s</name></expr> </then><else>: <expr><literal type="string">"- "</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name><name>e</name><operator>.</operator><name>getSQL</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"; SQL statement:\n"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" ["</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getErrorCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>BUILD_ID</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>buff</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Prints up to 100 next exceptions for a specified SQL exception.
     *
     * @param e SQL exception
     * @param s print writer
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>printNextExceptions</name><parameter_list>(<parameter><decl><type><name>SQLException</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>PrintWriter</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// getNextException().printStackTrace(s) would be very slow</comment>
        <comment type="line">// if many exceptions are joined</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><operator>(</operator><name>e</name> <operator>=</operator> <call><name><name>e</name><operator>.</operator><name>getNextException</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>i</name><operator>++</operator> <operator>==</operator> <literal type="number">100</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"(truncated)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Prints up to 100 next exceptions for a specified SQL exception.
     *
     * @param e SQL exception
     * @param s print stream
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>printNextExceptions</name><parameter_list>(<parameter><decl><type><name>SQLException</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>PrintStream</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// getNextException().printStackTrace(s) would be very slow</comment>
        <comment type="line">// if many exceptions are joined</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><operator>(</operator><name>e</name> <operator>=</operator> <call><name><name>e</name><operator>.</operator><name>getNextException</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>i</name><operator>++</operator> <operator>==</operator> <literal type="number">100</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"(truncated)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Object</name></type> <name>getSource</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>source</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSource</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>source</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>source</name></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Write the exception to the driver manager log writer if configured.
     *
     * @param e the exception
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>traceThrowable</name><parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>PrintWriter</name></type> <name>writer</name> <init>= <expr><call><name><name>DriverManager</name><operator>.</operator><name>getLogWriter</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>writer</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>(<argument><expr><name>writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

}</block></class>
</unit>
