<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/mvstore/db/ValueDataType.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>db</name></name>;</package>

<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>DataUtils</name><operator>.</operator><name>readString</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>DataUtils</name><operator>.</operator><name>readVarInt</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>DataUtils</name><operator>.</operator><name>readVarLong</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>math</name><operator>.</operator><name>BigDecimal</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>math</name><operator>.</operator><name>BigInteger</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>api</name><operator>.</operator><name>ErrorCode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>api</name><operator>.</operator><name>IntervalQualifier</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>CastDataProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Database</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>DbException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mode</name><operator>.</operator><name>DefaultNullOrdering</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>DataUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>WriteBuffer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>type</name><operator>.</operator><name>BasicDataType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>type</name><operator>.</operator><name>DataType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>type</name><operator>.</operator><name>MetaType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>mvstore</name><operator>.</operator><name>type</name><operator>.</operator><name>StatefulDataType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>RowFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>SearchRow</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>SortOrder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>store</name><operator>.</operator><name>DataHandler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>DateTimeUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>Utils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>CompareMode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ExtTypeInfoEnum</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ExtTypeInfoRow</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>TypeInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueArray</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueBigint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueBinary</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueBlob</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueBoolean</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueChar</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueClob</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueCollectionBase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueDate</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueDecfloat</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueDouble</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueGeometry</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueInteger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueInterval</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueJavaObject</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueJson</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueNull</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueNumeric</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueReal</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueRow</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueSmallint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueTime</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueTimeTimeZone</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueTimestamp</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueTimestampTimeZone</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueTinyint</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueUuid</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueVarbinary</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueVarchar</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueVarcharIgnoreCase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>lob</name><operator>.</operator><name>LobData</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>lob</name><operator>.</operator><name>LobDataDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>lob</name><operator>.</operator><name>LobDataInMemory</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A row type.
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>ValueDataType</name> <super_list><extends>extends <super><name><name>BasicDataType</name><argument_list type="generic">&lt;<argument><name>Value</name></argument>&gt;</argument_list></name></super></extends> <implements>implements <super><name><name>StatefulDataType</name><argument_list type="generic">&lt;<argument><name>Database</name></argument>&gt;</argument_list></name></super></implements></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>NULL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>TINYINT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>SMALLINT</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>INTEGER</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>BIGINT</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>NUMERIC</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>DOUBLE</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>REAL</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>TIME</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>DATE</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>TIMESTAMP</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>VARBINARY</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>VARCHAR</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>VARCHAR_IGNORECASE</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>BLOB</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>CLOB</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>ARRAY</name> <init>= <expr><literal type="number">17</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>JAVA_OBJECT</name> <init>= <expr><literal type="number">19</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>UUID</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>CHAR</name> <init>= <expr><literal type="number">21</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>GEOMETRY</name> <init>= <expr><literal type="number">22</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>TIMESTAMP_TZ_OLD</name> <init>= <expr><literal type="number">24</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>ENUM</name> <init>= <expr><literal type="number">25</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>INTERVAL</name> <init>= <expr><literal type="number">26</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>ROW</name> <init>= <expr><literal type="number">27</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>INT_0_15</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>BIGINT_0_7</name> <init>= <expr><literal type="number">48</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>NUMERIC_0_1</name> <init>= <expr><literal type="number">56</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>NUMERIC_SMALL_0</name> <init>= <expr><literal type="number">58</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>NUMERIC_SMALL</name> <init>= <expr><literal type="number">59</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>DOUBLE_0_1</name> <init>= <expr><literal type="number">60</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>REAL_0_1</name> <init>= <expr><literal type="number">62</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>BOOLEAN_FALSE</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>BOOLEAN_TRUE</name> <init>= <expr><literal type="number">65</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>INT_NEG</name> <init>= <expr><literal type="number">66</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>BIGINT_NEG</name> <init>= <expr><literal type="number">67</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>VARCHAR_0_31</name> <init>= <expr><literal type="number">68</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>VARBINARY_0_31</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">// 132 was used for SPATIAL_KEY_2D</comment>
    <comment type="line">// 133 was used for CUSTOM_DATA_TYPE</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>JSON</name> <init>= <expr><literal type="number">134</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>TIMESTAMP_TZ</name> <init>= <expr><literal type="number">135</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>TIME_TZ</name> <init>= <expr><literal type="number">136</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BINARY</name> <init>= <expr><literal type="number">137</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DECFLOAT</name> <init>= <expr><literal type="number">138</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>DataHandler</name></type> <name>handler</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>CastDataProvider</name></type> <name>provider</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>CompareMode</name></type> <name>compareMode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>sortTypes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>RowFactory</name></type> <name>rowFactory</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ValueDataType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name><name>CompareMode</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>ValueDataType</name><parameter_list>(<parameter><decl><type><name>Database</name></type> <name>database</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>sortTypes</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><call><name><name>database</name><operator>.</operator><name>getCompareMode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>database</name></expr></argument>, <argument><expr><name>sortTypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>ValueDataType</name><parameter_list>(<parameter><decl><type><name>CastDataProvider</name></type> <name>provider</name></decl></parameter>, <parameter><decl><type><name>CompareMode</name></type> <name>compareMode</name></decl></parameter>, <parameter><decl><type><name>DataHandler</name></type> <name>handler</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>sortTypes</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>provider</name></name> <operator>=</operator> <name>provider</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>compareMode</name></name> <operator>=</operator> <name>compareMode</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>handler</name></name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sortTypes</name></name> <operator>=</operator> <name>sortTypes</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>RowFactory</name></type> <name>getRowFactory</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>rowFactory</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRowFactory</name><parameter_list>(<parameter><decl><type><name>RowFactory</name></type> <name>rowFactory</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>rowFactory</name></name> <operator>=</operator> <name>rowFactory</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>Value</name><index>[]</index></name></type> <name>createStorage</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <name><name>Value</name><index>[<expr><name>size</name></expr>]</index></name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>Value</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>b</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>a</name> <operator>instanceof</operator> <name>SearchRow</name> <operator>&amp;&amp;</operator> <name>b</name> <operator>instanceof</operator> <name>SearchRow</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>compare</name><argument_list>(<argument><expr><operator>(</operator><name>SearchRow</name><operator>)</operator><name>a</name></expr></argument>, <argument><expr><operator>(</operator><name>SearchRow</name><operator>)</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>a</name> <operator>instanceof</operator> <name>ValueCollectionBase</name> <operator>&amp;&amp;</operator> <name>b</name> <operator>instanceof</operator> <name>ValueCollectionBase</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>Value</name><index>[]</index></name></type> <name>ax</name> <init>= <expr><operator>(</operator><operator>(</operator><name>ValueCollectionBase</name><operator>)</operator> <name>a</name><operator>)</operator><operator>.</operator><call><name>getList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Value</name><index>[]</index></name></type> <name>bx</name> <init>= <expr><operator>(</operator><operator>(</operator><name>ValueCollectionBase</name><operator>)</operator> <name>b</name><operator>)</operator><operator>.</operator><call><name>getList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>al</name> <init>= <expr><name><name>ax</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>bl</name> <init>= <expr><name><name>bx</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>al</name></expr></argument>, <argument><expr><name>bl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>sortType</name> <init>= <expr><ternary><condition><expr><name>sortTypes</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>SortOrder</name><operator>.</operator><name>ASCENDING</name></name></expr> </then><else>: <expr><name><name>sortTypes</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Value</name></type> <name>one</name> <init>= <expr><name><name>ax</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Value</name></type> <name>two</name> <init>= <expr><name><name>bx</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>one</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>two</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <return>return <expr><call><name>compareValues</name><argument_list>(<argument><expr><name><name>ax</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bx</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>SortOrder</name><operator>.</operator><name>ASCENDING</name></name></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block></if></if_stmt>

                <decl_stmt><decl><type><name>int</name></type> <name>comp</name> <init>= <expr><call><name>compareValues</name><argument_list>(<argument><expr><name>one</name></expr></argument>, <argument><expr><name>two</name></expr></argument>, <argument><expr><name>sortType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>comp</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name>comp</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>al</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>bl</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="number">1</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>compareValues</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>SortOrder</name><operator>.</operator><name>ASCENDING</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>SearchRow</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>SearchRow</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>b</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>indexes</name> <init>= <expr><call><name><name>rowFactory</name><operator>.</operator><name>getIndexes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>indexes</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name><name>a</name><operator>.</operator><name>getColumnCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <assert>assert <expr><name>len</name> <operator>==</operator> <call><name><name>b</name><operator>.</operator><name>getColumnCount</name></name><argument_list>()</argument_list></call> <operator>:</operator> <name>len</name> <operator>+</operator> <literal type="string">" != "</literal> <operator>+</operator> <call><name><name>b</name><operator>.</operator><name>getColumnCount</name></name><argument_list>()</argument_list></call></expr>;</assert>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>comp</name> <init>= <expr><call><name>compareValues</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>b</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sortTypes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>comp</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name>comp</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <assert>assert <expr><name><name>sortTypes</name><operator>.</operator><name>length</name></name> <operator>==</operator> <name><name>indexes</name><operator>.</operator><name>length</name></name></expr>;</assert>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>indexes</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name><name>indexes</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Value</name></type> <name>v1</name> <init>= <expr><call><name><name>a</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Value</name></type> <name>v2</name> <init>= <expr><call><name><name>b</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>v1</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>v2</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <comment type="line">// can't compare further</comment>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>comp</name> <init>= <expr><call><name>compareValues</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>b</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sortTypes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>comp</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name>comp</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <decl_stmt><decl><type><name>long</name></type> <name>aKey</name> <init>= <expr><call><name><name>a</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>bKey</name> <init>= <expr><call><name><name>b</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><ternary><condition><expr><name>aKey</name> <operator>==</operator> <name><name>SearchRow</name><operator>.</operator><name>MATCH_ALL_ROW_KEY</name></name> <operator>||</operator> <name>bKey</name> <operator>==</operator> <name><name>SearchRow</name><operator>.</operator><name>MATCH_ALL_ROW_KEY</name></name></expr> ?</condition><then>
                    <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>Long</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name>aKey</name></expr></argument>, <argument><expr><name>bKey</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Compares the specified values.
     *
     * @param a the first value
     * @param b the second value
     * @param sortType the sorting type
     * @return 0 if equal, -1 if first value is smaller for ascending or larger
     *         for descending sort type, 1 otherwise
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>compareValues</name><parameter_list>(<parameter><decl><type><name>Value</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sortType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>b</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>aNull</name> <init>= <expr><name>a</name> <operator>==</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>aNull</name> <operator>||</operator> <name>b</name> <operator>==</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>)</condition> <block>{<block_content>
            <comment type="block">/*
             * Indexes with nullable values should have explicit null ordering,
             * so default should not matter.
             */</comment>
            <return>return <expr><call><name><name>DefaultNullOrdering</name><operator>.</operator><name>LOW</name><operator>.</operator><name>compareNull</name></name><argument_list>(<argument><expr><name>aNull</name></expr></argument>, <argument><expr><name>sortType</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>comp</name> <init>= <expr><call><name><name>a</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>provider</name></expr></argument>, <argument><expr><name>compareMode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sortType</name> <operator>&amp;</operator> <name><name>SortOrder</name><operator>.</operator><name>DESCENDING</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>comp</name> <operator>=</operator> <operator>-</operator><name>comp</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>comp</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getMemory</name><parameter_list>(<parameter><decl><type><name>Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>v</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>v</name><operator>.</operator><name>getMemory</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Value</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>buff</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>readValue</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>WriteBuffer</name></type> <name>buff</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><call><name><name>v</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BOOLEAN</name></name></expr>:</case>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>v</name><operator>.</operator><name>getBoolean</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>BOOLEAN_TRUE</name></expr> </then><else>: <expr><name>BOOLEAN_FALSE</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TINYINT</name></name></expr>:</case>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>TINYINT</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>put</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>getByte</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>SMALLINT</name></name></expr>:</case>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>SMALLINT</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>putShort</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>getShort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>ENUM</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTEGER</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name><name>v</name><operator>.</operator><name>getInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>INT_NEG</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>putVarInt</name><argument_list>(<argument><expr><operator>-</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><name>INT_0_15</name> <operator>+</operator> <name>x</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>type</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>INTEGER</name></name></expr> ?</condition><then> <expr><name>INTEGER</name></expr> </then><else>: <expr><name>ENUM</name></expr></else></ternary></expr></argument>)</argument_list></call><operator>.</operator><call><name>putVarInt</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BIGINT</name></name></expr>:</case>
            <expr_stmt><expr><call><name>writeLong</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><call><name><name>v</name><operator>.</operator><name>getLong</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>NUMERIC</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>BigDecimal</name></type> <name>x</name> <init>= <expr><call><name><name>v</name><operator>.</operator><name>getBigDecimal</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>BigDecimal</name><operator>.</operator><name>ZERO</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>NUMERIC_0_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>BigDecimal</name><operator>.</operator><name>ONE</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><name>NUMERIC_0_1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>scale</name> <init>= <expr><call><name><name>x</name><operator>.</operator><name>scale</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>BigInteger</name></type> <name>b</name> <init>= <expr><call><name><name>x</name><operator>.</operator><name>unscaledValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><call><name><name>b</name><operator>.</operator><name>bitLength</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&lt;=</operator> <literal type="number">63</literal></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>scale</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>NUMERIC_SMALL_0</name></expr></argument>)</argument_list></call><operator>.</operator>
                            <call><name>putVarLong</name><argument_list>(<argument><expr><call><name><name>b</name><operator>.</operator><name>longValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>NUMERIC_SMALL</name></expr></argument>)</argument_list></call><operator>.</operator>
                            <call><name>putVarInt</name><argument_list>(<argument><expr><name>scale</name></expr></argument>)</argument_list></call><operator>.</operator>
                            <call><name>putVarLong</name><argument_list>(<argument><expr><call><name><name>b</name><operator>.</operator><name>longValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name> <init>= <expr><call><name><name>b</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>NUMERIC</name></expr></argument>)</argument_list></call><operator>.</operator>
                        <call><name>putVarInt</name><argument_list>(<argument><expr><name>scale</name></expr></argument>)</argument_list></call><operator>.</operator>
                        <call><name>putVarInt</name><argument_list>(<argument><expr><name><name>bytes</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call><operator>.</operator>
                        <call><name>put</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>DECFLOAT</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>ValueDecfloat</name></type> <name>d</name> <init>= <expr><operator>(</operator><name>ValueDecfloat</name><operator>)</operator> <name>v</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <name>DECFLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>d</name><operator>.</operator><name>isFinite</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>BigDecimal</name></type> <name>x</name> <init>= <expr><call><name><name>d</name><operator>.</operator><name>getBigDecimal</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name> <init>= <expr><call><name><name>x</name><operator>.</operator><name>unscaledValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toByteArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>putVarInt</name></name><argument_list>(<argument><expr><call><name><name>x</name><operator>.</operator><name>scale</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator>
                    <call><name>putVarInt</name><argument_list>(<argument><expr><name><name>bytes</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call><operator>.</operator>
                    <call><name>put</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name><name>ValueDecfloat</name><operator>.</operator><name>NEGATIVE_INFINITY</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>-</operator><literal type="number">3</literal></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>d</name> <operator>==</operator> <name><name>ValueDecfloat</name><operator>.</operator><name>POSITIVE_INFINITY</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>putVarInt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>putVarInt</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TIME</name></name></expr>:</case>
            <expr_stmt><expr><call><name>writeTimestampTime</name><argument_list>(<argument><expr><call><name><name>buff</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>TIME</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>ValueTime</name><operator>)</operator> <name>v</name><operator>)</operator><operator>.</operator><call><name>getNanos</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TIME_TZ</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>ValueTimeTimeZone</name></type> <name>t</name> <init>= <expr><operator>(</operator><name>ValueTimeTimeZone</name><operator>)</operator> <name>v</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>nanosOfDay</name> <init>= <expr><call><name><name>t</name><operator>.</operator><name>getNanos</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <name>TIME_TZ</name></expr></argument>)</argument_list></call><operator>.</operator>
                <call><name>putVarInt</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>nanosOfDay</name> <operator>/</operator> <name><name>DateTimeUtils</name><operator>.</operator><name>NANOS_PER_SECOND</name></name><operator>)</operator></expr></argument>)</argument_list></call><operator>.</operator>
                <call><name>putVarInt</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>nanosOfDay</name> <operator>%</operator> <name><name>DateTimeUtils</name><operator>.</operator><name>NANOS_PER_SECOND</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>writeTimeZone</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><call><name><name>t</name><operator>.</operator><name>getTimeZoneOffsetSeconds</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>DATE</name></name></expr>:</case>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>DATE</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>putVarLong</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>ValueDate</name><operator>)</operator> <name>v</name><operator>)</operator><operator>.</operator><call><name>getDateValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TIMESTAMP</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>ValueTimestamp</name></type> <name>ts</name> <init>= <expr><operator>(</operator><name>ValueTimestamp</name><operator>)</operator> <name>v</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>TIMESTAMP</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>putVarLong</name><argument_list>(<argument><expr><call><name><name>ts</name><operator>.</operator><name>getDateValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>writeTimestampTime</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><call><name><name>ts</name><operator>.</operator><name>getTimeNanos</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>TIMESTAMP_TZ</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>ValueTimestampTimeZone</name></type> <name>ts</name> <init>= <expr><operator>(</operator><name>ValueTimestampTimeZone</name><operator>)</operator> <name>v</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <name>TIMESTAMP_TZ</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>putVarLong</name><argument_list>(<argument><expr><call><name><name>ts</name><operator>.</operator><name>getDateValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>writeTimestampTime</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><call><name><name>ts</name><operator>.</operator><name>getTimeNanos</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>writeTimeZone</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><call><name><name>ts</name><operator>.</operator><name>getTimeZoneOffsetSeconds</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>JAVA_OBJECT</name></name></expr>:</case>
            <expr_stmt><expr><call><name>writeBinary</name><argument_list>(<argument><expr><name>JAVA_OBJECT</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>VARBINARY</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>b</name> <init>= <expr><call><name><name>v</name><operator>.</operator><name>getBytesNoCopy</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>b</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><name>VARBINARY_0_31</name> <operator>+</operator> <name>len</name><operator>)</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>put</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>VARBINARY</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>putVarInt</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>put</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BINARY</name></name></expr>:</case>
            <expr_stmt><expr><call><name>writeBinary</name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <name>BINARY</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>UUID</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>ValueUuid</name></type> <name>uuid</name> <init>= <expr><operator>(</operator><name>ValueUuid</name><operator>)</operator> <name>v</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>UUID</name></expr></argument>)</argument_list></call><operator>.</operator>
                <call><name>putLong</name><argument_list>(<argument><expr><call><name><name>uuid</name><operator>.</operator><name>getHigh</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator>
                <call><name>putLong</name><argument_list>(<argument><expr><call><name><name>uuid</name><operator>.</operator><name>getLow</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>VARCHAR</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><call><name><name>v</name><operator>.</operator><name>getString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><name>VARCHAR_0_31</name> <operator>+</operator> <name>len</name><operator>)</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>putStringData</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>writeString</name><argument_list>(<argument><expr><call><name><name>buff</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>VARCHAR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>VARCHAR_IGNORECASE</name></name></expr>:</case>
            <expr_stmt><expr><call><name>writeString</name><argument_list>(<argument><expr><call><name><name>buff</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>VARCHAR_IGNORECASE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>v</name><operator>.</operator><name>getString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>CHAR</name></name></expr>:</case>
            <expr_stmt><expr><call><name>writeString</name><argument_list>(<argument><expr><call><name><name>buff</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>CHAR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>v</name><operator>.</operator><name>getString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>DOUBLE</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>double</name></type> <name>x</name> <init>= <expr><call><name><name>v</name><operator>.</operator><name>getDouble</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">1.0d</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><name>DOUBLE_0_1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name>long</name></type> <name>d</name> <init>= <expr><call><name><name>Double</name><operator>.</operator><name>doubleToLongBits</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name><name>ValueDouble</name><operator>.</operator><name>ZERO_BITS</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>DOUBLE_0_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>DOUBLE</name></expr></argument>)</argument_list></call><operator>.</operator>
                        <call><name>putVarLong</name><argument_list>(<argument><expr><call><name><name>Long</name><operator>.</operator><name>reverse</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>REAL</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><call><name><name>v</name><operator>.</operator><name>getFloat</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">1.0f</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><name>REAL_0_1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>f</name> <init>= <expr><call><name><name>Float</name><operator>.</operator><name>floatToIntBits</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name><name>ValueReal</name><operator>.</operator><name>ZERO_BITS</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>REAL_0_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>REAL</name></expr></argument>)</argument_list></call><operator>.</operator>
                        <call><name>putVarInt</name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>reverse</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>BLOB</name></name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>BLOB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>ValueBlob</name></type> <name>lob</name> <init>= <expr><operator>(</operator><name>ValueBlob</name><operator>)</operator> <name>v</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>LobData</name></type> <name>lobData</name> <init>= <expr><call><name><name>lob</name><operator>.</operator><name>getLobData</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>lobData</name> <operator>instanceof</operator> <name>LobDataDatabase</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>LobDataDatabase</name></type> <name>lobDataDatabase</name> <init>= <expr><operator>(</operator><name>LobDataDatabase</name><operator>)</operator> <name>lobData</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>putVarInt</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>.</operator>
                    <call><name>putVarInt</name><argument_list>(<argument><expr><call><name><name>lobDataDatabase</name><operator>.</operator><name>getTableId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator>
                    <call><name>putVarLong</name><argument_list>(<argument><expr><call><name><name>lobDataDatabase</name><operator>.</operator><name>getLobId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator>
                    <call><name>putVarLong</name><argument_list>(<argument><expr><call><name><name>lob</name><operator>.</operator><name>octetLength</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>small</name> <init>= <expr><operator>(</operator><operator>(</operator><name>LobDataInMemory</name><operator>)</operator> <name>lobData</name><operator>)</operator><operator>.</operator><call><name>getSmall</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>putVarInt</name></name><argument_list>(<argument><expr><name><name>small</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call><operator>.</operator>
                    <call><name>put</name><argument_list>(<argument><expr><name>small</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>CLOB</name></name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>CLOB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>ValueClob</name></type> <name>lob</name> <init>= <expr><operator>(</operator><name>ValueClob</name><operator>)</operator> <name>v</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>LobData</name></type> <name>lobData</name> <init>= <expr><call><name><name>lob</name><operator>.</operator><name>getLobData</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>lobData</name> <operator>instanceof</operator> <name>LobDataDatabase</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>LobDataDatabase</name></type> <name>lobDataDatabase</name> <init>= <expr><operator>(</operator><name>LobDataDatabase</name><operator>)</operator> <name>lobData</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>putVarInt</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>.</operator>
                    <call><name>putVarInt</name><argument_list>(<argument><expr><call><name><name>lobDataDatabase</name><operator>.</operator><name>getTableId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator>
                    <call><name>putVarLong</name><argument_list>(<argument><expr><call><name><name>lobDataDatabase</name><operator>.</operator><name>getLobId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator>
                    <call><name>putVarLong</name><argument_list>(<argument><expr><call><name><name>lob</name><operator>.</operator><name>octetLength</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator>
                    <call><name>putVarLong</name><argument_list>(<argument><expr><call><name><name>lob</name><operator>.</operator><name>charLength</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>small</name> <init>= <expr><operator>(</operator><operator>(</operator><name>LobDataInMemory</name><operator>)</operator> <name>lobData</name><operator>)</operator><operator>.</operator><call><name>getSmall</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>putVarInt</name></name><argument_list>(<argument><expr><name><name>small</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call><operator>.</operator>
                    <call><name>put</name><argument_list>(<argument><expr><name>small</name></expr></argument>)</argument_list></call><operator>.</operator>
                    <call><name>putVarLong</name><argument_list>(<argument><expr><call><name><name>lob</name><operator>.</operator><name>charLength</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>ARRAY</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>ROW</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name><name>Value</name><index>[]</index></name></type> <name>list</name> <init>= <expr><operator>(</operator><operator>(</operator><name>ValueCollectionBase</name><operator>)</operator> <name>v</name><operator>)</operator><operator>.</operator><call><name>getList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>type</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>ARRAY</name></name></expr> ?</condition><then> <expr><name>ARRAY</name></expr> </then><else>: <expr><name>ROW</name></expr></else></ternary></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>putVarInt</name><argument_list>(<argument><expr><name><name>list</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>Value</name></type> <name>x</name> <range>: <expr><name>list</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>GEOMETRY</name></name></expr>:</case>
            <expr_stmt><expr><call><name>writeBinary</name><argument_list>(<argument><expr><name>GEOMETRY</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_YEAR</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_MONTH</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_DAY</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_HOUR</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_MINUTE</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>ValueInterval</name></type> <name>interval</name> <init>= <expr><operator>(</operator><name>ValueInterval</name><operator>)</operator> <name>v</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>ordinal</name> <init>= <expr><name>type</name> <operator>-</operator> <name><name>Value</name><operator>.</operator><name>INTERVAL_YEAR</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>interval</name><operator>.</operator><name>isNegative</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>ordinal</name> <operator>=</operator> <operator>~</operator><name>ordinal</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>INTERVAL</name></expr></argument>)</argument_list></call><operator>.</operator>
                <call><name>put</name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <name>ordinal</name></expr></argument>)</argument_list></call><operator>.</operator>
                <call><name>putVarLong</name><argument_list>(<argument><expr><call><name><name>interval</name><operator>.</operator><name>getLeading</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_SECOND</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_YEAR_TO_MONTH</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_DAY_TO_HOUR</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_DAY_TO_MINUTE</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_DAY_TO_SECOND</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_HOUR_TO_MINUTE</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_HOUR_TO_SECOND</name></name></expr>:</case>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>INTERVAL_MINUTE_TO_SECOND</name></name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>ValueInterval</name></type> <name>interval</name> <init>= <expr><operator>(</operator><name>ValueInterval</name><operator>)</operator> <name>v</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>ordinal</name> <init>= <expr><name>type</name> <operator>-</operator> <name><name>Value</name><operator>.</operator><name>INTERVAL_YEAR</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>interval</name><operator>.</operator><name>isNegative</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>ordinal</name> <operator>=</operator> <operator>~</operator><name>ordinal</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>INTERVAL</name></expr></argument>)</argument_list></call><operator>.</operator>
                <call><name>put</name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><name>ordinal</name><operator>)</operator></expr></argument>)</argument_list></call><operator>.</operator>
                <call><name>putVarLong</name><argument_list>(<argument><expr><call><name><name>interval</name><operator>.</operator><name>getLeading</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator>
                <call><name>putVarLong</name><argument_list>(<argument><expr><call><name><name>interval</name><operator>.</operator><name>getRemaining</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name><name>Value</name><operator>.</operator><name>JSON</name></name></expr>:</case>
            <expr_stmt><expr><call><name>writeBinary</name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <name>JSON</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>(<argument><expr><literal type="string">"type="</literal> <operator>+</operator> <call><name><name>v</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>writeBinary</name><parameter_list>(<parameter><decl><type><name>byte</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>WriteBuffer</name></type> <name>buff</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>b</name> <init>= <expr><call><name><name>v</name><operator>.</operator><name>getBytesNoCopy</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>putVarInt</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>put</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Writes a long.
     *
     * @param buff the target buffer
     * @param x the long value
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>writeLong</name><parameter_list>(<parameter><decl><type><name>WriteBuffer</name></type> <name>buff</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>BIGINT_NEG</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>putVarLong</name><argument_list>(<argument><expr><operator>-</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><name>BIGINT_0_7</name> <operator>+</operator> <name>x</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>BIGINT</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>putVarLong</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>writeString</name><parameter_list>(<parameter><decl><type><name>WriteBuffer</name></type> <name>buff</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>putVarInt</name></name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>putStringData</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>writeTimestampTime</name><parameter_list>(<parameter><decl><type><name>WriteBuffer</name></type> <name>buff</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>nanos</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>millis</name> <init>= <expr><name>nanos</name> <operator>/</operator> <literal type="number">1_000_000L</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>putVarLong</name></name><argument_list>(<argument><expr><name>millis</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>putVarInt</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>nanos</name> <operator>-</operator> <name>millis</name> <operator>*</operator> <literal type="number">1_000_000L</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>writeTimeZone</name><parameter_list>(<parameter><decl><type><name>WriteBuffer</name></type> <name>buff</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeZoneOffset</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// Valid JSR-310 offsets are -64,800..64,800</comment>
        <comment type="line">// Use 1 byte for common time zones (including +8:45 etc.)</comment>
        <if_stmt><if>if <condition>(<expr><name>timeZoneOffset</name> <operator>%</operator> <literal type="number">900</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// -72..72</comment>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><name>timeZoneOffset</name> <operator>/</operator> <literal type="number">900</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>timeZoneOffset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>Byte</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>putVarInt</name><argument_list>(<argument><expr><name>timeZoneOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>Byte</name><operator>.</operator><name>MIN_VALUE</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>putVarInt</name><argument_list>(<argument><expr><operator>-</operator><name>timeZoneOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Read a value.
     *
     * @param buff the source buffer
     * @param columnType the data type of value, or {@code null}
     * @return the value
     */</comment>
    <function><type><name>Value</name></type> <name>readValue</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>buff</name></decl></parameter>, <parameter><decl><type><name>TypeInfo</name></type> <name>columnType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><call><name><name>buff</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">255</literal></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>NULL</name></expr>:</case>
            <return>return <expr><name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>;</return>
        <case>case <expr><name>BOOLEAN_TRUE</name></expr>:</case>
            <return>return <expr><name><name>ValueBoolean</name><operator>.</operator><name>TRUE</name></name></expr>;</return>
        <case>case <expr><name>BOOLEAN_FALSE</name></expr>:</case>
            <return>return <expr><name><name>ValueBoolean</name><operator>.</operator><name>FALSE</name></name></expr>;</return>
        <case>case <expr><name>INT_NEG</name></expr>:</case>
            <return>return <expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>-</operator><call><name>readVarInt</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>INTEGER</name></expr>:</case>
            <return>return <expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name>readVarInt</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>BIGINT_NEG</name></expr>:</case>
            <return>return <expr><call><name><name>ValueBigint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>-</operator><call><name>readVarLong</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>BIGINT</name></expr>:</case>
            <return>return <expr><call><name><name>ValueBigint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name>readVarLong</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>TINYINT</name></expr>:</case>
            <return>return <expr><call><name><name>ValueTinyint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>buff</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>SMALLINT</name></expr>:</case>
            <return>return <expr><call><name><name>ValueSmallint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>buff</name><operator>.</operator><name>getShort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>NUMERIC_0_1</name></expr>:</case>
            <return>return <expr><name><name>ValueNumeric</name><operator>.</operator><name>ZERO</name></name></expr>;</return>
        <case>case <expr><name>NUMERIC_0_1</name> <operator>+</operator> <literal type="number">1</literal></expr>:</case>
            <return>return <expr><name><name>ValueNumeric</name><operator>.</operator><name>ONE</name></name></expr>;</return>
        <case>case <expr><name>NUMERIC_SMALL_0</name></expr>:</case>
            <return>return <expr><call><name><name>ValueNumeric</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>BigDecimal</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>readVarLong</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>NUMERIC_SMALL</name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>scale</name> <init>= <expr><call><name>readVarInt</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>ValueNumeric</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>BigDecimal</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>readVarLong</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <case>case <expr><name>NUMERIC</name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>scale</name> <init>= <expr><call><name>readVarInt</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>ValueNumeric</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>BigDecimal</name><argument_list>(<argument><expr><operator>new</operator> <call><name>BigInteger</name><argument_list>(<argument><expr><call><name>readVarBytes</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <case>case <expr><name>DECFLOAT</name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>scale</name> <init>= <expr><call><name>readVarInt</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name>readVarInt</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <switch>switch <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><operator>-</operator><literal type="number">3</literal></expr>:</case>
                <return>return <expr><name><name>ValueDecfloat</name><operator>.</operator><name>NEGATIVE_INFINITY</name></name></expr>;</return>
            <case>case <expr><operator>-</operator><literal type="number">2</literal></expr>:</case>
                <return>return <expr><name><name>ValueDecfloat</name><operator>.</operator><name>POSITIVE_INFINITY</name></name></expr>;</return>
            <case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
                <return>return <expr><name><name>ValueDecfloat</name><operator>.</operator><name>NAN</name></name></expr>;</return>
            <default>default:</default>
                <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>b</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newBytes</name></name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><call><name><name>ValueDecfloat</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>BigDecimal</name><argument_list>(<argument><expr><operator>new</operator> <call><name>BigInteger</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></switch>
        </block_content>}</block>
        <case>case <expr><name>DATE</name></expr>:</case>
            <return>return <expr><call><name><name>ValueDate</name><operator>.</operator><name>fromDateValue</name></name><argument_list>(<argument><expr><call><name>readVarLong</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>TIME</name></expr>:</case>
            <return>return <expr><call><name><name>ValueTime</name><operator>.</operator><name>fromNanos</name></name><argument_list>(<argument><expr><call><name>readTimestampTime</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>TIME_TZ</name></expr>:</case>
            <return>return <expr><call><name><name>ValueTimeTimeZone</name><operator>.</operator><name>fromNanos</name></name><argument_list>(<argument><expr><call><name>readVarInt</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>DateTimeUtils</name><operator>.</operator><name>NANOS_PER_SECOND</name></name> <operator>+</operator> <call><name>readVarInt</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>readTimeZone</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>TIMESTAMP</name></expr>:</case>
            <return>return <expr><call><name><name>ValueTimestamp</name><operator>.</operator><name>fromDateValueAndNanos</name></name><argument_list>(<argument><expr><call><name>readVarLong</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>readTimestampTime</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>TIMESTAMP_TZ_OLD</name></expr>:</case>
            <return>return <expr><call><name><name>ValueTimestampTimeZone</name><operator>.</operator><name>fromDateValueAndNanos</name></name><argument_list>(<argument><expr><call><name>readVarLong</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>readTimestampTime</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>readVarInt</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>TIMESTAMP_TZ</name></expr>:</case>
            <return>return <expr><call><name><name>ValueTimestampTimeZone</name><operator>.</operator><name>fromDateValueAndNanos</name></name><argument_list>(<argument><expr><call><name>readVarLong</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>readTimestampTime</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>readTimeZone</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>VARBINARY</name></expr>:</case>
            <return>return <expr><call><name><name>ValueVarbinary</name><operator>.</operator><name>getNoCopy</name></name><argument_list>(<argument><expr><call><name>readVarBytes</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>BINARY</name></expr>:</case>
            <return>return <expr><call><name><name>ValueBinary</name><operator>.</operator><name>getNoCopy</name></name><argument_list>(<argument><expr><call><name>readVarBytes</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>JAVA_OBJECT</name></expr>:</case>
            <return>return <expr><call><name><name>ValueJavaObject</name><operator>.</operator><name>getNoCopy</name></name><argument_list>(<argument><expr><call><name>readVarBytes</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>UUID</name></expr>:</case>
            <return>return <expr><call><name><name>ValueUuid</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>buff</name><operator>.</operator><name>getLong</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>buff</name><operator>.</operator><name>getLong</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>VARCHAR</name></expr>:</case>
            <return>return <expr><call><name><name>ValueVarchar</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name>readString</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>VARCHAR_IGNORECASE</name></expr>:</case>
            <return>return <expr><call><name><name>ValueVarcharIgnoreCase</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name>readString</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>CHAR</name></expr>:</case>
            <return>return <expr><call><name><name>ValueChar</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name>readString</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>ENUM</name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>ordinal</name> <init>= <expr><call><name>readVarInt</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>columnType</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>(</operator><operator>(</operator><name>ExtTypeInfoEnum</name><operator>)</operator> <call><name><name>columnType</name><operator>.</operator><name>getExtTypeInfo</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getValue</name><argument_list>(<argument><expr><name>ordinal</name></expr></argument>, <argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>ordinal</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <case>case <expr><name>INTERVAL</name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>ordinal</name> <init>= <expr><call><name><name>buff</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>negative</name> <init>= <expr><name>ordinal</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>negative</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>ordinal</name> <operator>=</operator> <operator>~</operator><name>ordinal</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name><name>ValueInterval</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><call><name><name>IntervalQualifier</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>ordinal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>negative</name></expr></argument>, <argument><expr><call><name>readVarLong</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><ternary><condition><expr><name>ordinal</name> <operator>&lt;</operator> <literal type="number">5</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>readVarLong</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <case>case <expr><name>REAL_0_1</name></expr>:</case>
            <return>return <expr><name><name>ValueReal</name><operator>.</operator><name>ZERO</name></name></expr>;</return>
        <case>case <expr><name>REAL_0_1</name> <operator>+</operator> <literal type="number">1</literal></expr>:</case>
            <return>return <expr><name><name>ValueReal</name><operator>.</operator><name>ONE</name></name></expr>;</return>
        <case>case <expr><name>DOUBLE_0_1</name></expr>:</case>
            <return>return <expr><name><name>ValueDouble</name><operator>.</operator><name>ZERO</name></name></expr>;</return>
        <case>case <expr><name>DOUBLE_0_1</name> <operator>+</operator> <literal type="number">1</literal></expr>:</case>
            <return>return <expr><name><name>ValueDouble</name><operator>.</operator><name>ONE</name></name></expr>;</return>
        <case>case <expr><name>DOUBLE</name></expr>:</case>
            <return>return <expr><call><name><name>ValueDouble</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>Double</name><operator>.</operator><name>longBitsToDouble</name></name><argument_list>(<argument><expr><call><name><name>Long</name><operator>.</operator><name>reverse</name></name><argument_list>(<argument><expr><call><name>readVarLong</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>REAL</name></expr>:</case>
            <return>return <expr><call><name><name>ValueReal</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>Float</name><operator>.</operator><name>intBitsToFloat</name></name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>reverse</name></name><argument_list>(<argument><expr><call><name>readVarInt</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>BLOB</name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>smallLen</name> <init>= <expr><call><name>readVarInt</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>smallLen</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>small</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newBytes</name></name><argument_list>(<argument><expr><name>smallLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>small</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>smallLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><call><name><name>ValueBlob</name><operator>.</operator><name>createSmall</name></name><argument_list>(<argument><expr><name>small</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>smallLen</name> <operator>==</operator> <operator>-</operator><literal type="number">3</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>ValueBlob</name><argument_list>(<argument><expr><call><name>readLobDataDatabase</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>readVarLong</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>FILE_CORRUPTED_1</name></name></expr></argument>, <argument><expr><literal type="string">"lob type: "</literal> <operator>+</operator> <name>smallLen</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block>
        <case>case <expr><name>CLOB</name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>smallLen</name> <init>= <expr><call><name>readVarInt</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>smallLen</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>small</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newBytes</name></name><argument_list>(<argument><expr><name>smallLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>small</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>smallLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><call><name><name>ValueClob</name><operator>.</operator><name>createSmall</name></name><argument_list>(<argument><expr><name>small</name></expr></argument>, <argument><expr><call><name>readVarLong</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>smallLen</name> <operator>==</operator> <operator>-</operator><literal type="number">3</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>ValueClob</name><argument_list>(<argument><expr><call><name>readLobDataDatabase</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>readVarLong</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>readVarLong</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>FILE_CORRUPTED_1</name></name></expr></argument>, <argument><expr><literal type="string">"lob type: "</literal> <operator>+</operator> <name>smallLen</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block>
        <case>case <expr><name>ARRAY</name></expr>:</case> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>columnType</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>TypeInfo</name></type> <name>elementType</name> <init>= <expr><operator>(</operator><name>TypeInfo</name><operator>)</operator> <call><name><name>columnType</name><operator>.</operator><name>getExtTypeInfo</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <return>return <expr><call><name><name>ValueArray</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>elementType</name></expr></argument>, <argument><expr><call><name>readArrayElements</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>elementType</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name><name>ValueArray</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name>readArrayElements</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <case>case <expr><name>ROW</name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>readVarInt</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Value</name><index>[]</index></name></type> <name>list</name> <init>= <expr><operator>new</operator> <name><name>Value</name><index>[<expr><name>len</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>columnType</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>ExtTypeInfoRow</name></type> <name>extTypeInfoRow</name> <init>= <expr><operator>(</operator><name>ExtTypeInfoRow</name><operator>)</operator> <call><name><name>columnType</name><operator>.</operator><name>getExtTypeInfo</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>TypeInfo</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>fields</name> <init>= <expr><call><name><name>extTypeInfoRow</name><operator>.</operator><name>getFields</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <expr_stmt><expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>readValue</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><call><name><name>fields</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
                <return>return <expr><call><name><name>ValueRow</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>columnType</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name><name>TypeInfo</name><index>[]</index></name></type> <name>columnTypes</name> <init>= <expr><call><name><name>rowFactory</name><operator>.</operator><name>getColumnTypes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>readValue</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name><name>columnTypes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <return>return <expr><call><name><name>ValueRow</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block>
        <case>case <expr><name>GEOMETRY</name></expr>:</case>
            <return>return <expr><call><name><name>ValueGeometry</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name>readVarBytes</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>JSON</name></expr>:</case>
            <return>return <expr><call><name><name>ValueJson</name><operator>.</operator><name>getInternal</name></name><argument_list>(<argument><expr><call><name>readVarBytes</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <default>default:</default>
            <if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;=</operator> <name>INT_0_15</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>&lt;</operator> <name>INT_0_15</name> <operator>+</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>type</name> <operator>-</operator> <name>INT_0_15</name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>columnType</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>columnType</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>ENUM</name></name></expr>)</condition> <block>{<block_content>
                    <return>return <expr><operator>(</operator><operator>(</operator><name>ExtTypeInfoEnum</name><operator>)</operator> <call><name><name>columnType</name><operator>.</operator><name>getExtTypeInfo</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getValue</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <return>return <expr><call><name><name>ValueInteger</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>&gt;=</operator> <name>BIGINT_0_7</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>&lt;</operator> <name>BIGINT_0_7</name> <operator>+</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>ValueBigint</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>type</name> <operator>-</operator> <name>BIGINT_0_7</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>&gt;=</operator> <name>VARBINARY_0_31</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>&lt;</operator> <name>VARBINARY_0_31</name> <operator>+</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name>type</name> <operator>-</operator> <name>VARBINARY_0_31</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>b</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newBytes</name></name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><call><name><name>ValueVarbinary</name><operator>.</operator><name>getNoCopy</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>&gt;=</operator> <name>VARCHAR_0_31</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>&lt;</operator> <name>VARCHAR_0_31</name> <operator>+</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>ValueVarchar</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name>readString</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>type</name> <operator>-</operator> <name>VARCHAR_0_31</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>FILE_CORRUPTED_1</name></name></expr></argument>, <argument><expr><literal type="string">"type: "</literal> <operator>+</operator> <name>type</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>LobDataDatabase</name></type> <name>readLobDataDatabase</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>buff</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>tableId</name> <init>= <expr><call><name>readVarInt</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>lobId</name> <init>= <expr><call><name>readVarLong</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LobDataDatabase</name></type> <name>lobData</name> <init>= <expr><operator>new</operator> <call><name>LobDataDatabase</name><argument_list>(<argument><expr><name>handler</name></expr></argument>, <argument><expr><name>tableId</name></expr></argument>, <argument><expr><name>lobId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>lobData</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>Value</name><index>[]</index></name></type> <name>readArrayElements</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>buff</name></decl></parameter>, <parameter><decl><type><name>TypeInfo</name></type> <name>elementType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>readVarInt</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Value</name><index>[]</index></name></type> <name>list</name> <init>= <expr><operator>new</operator> <name><name>Value</name><index>[<expr><name>len</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>readValue</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>elementType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>list</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>readVarBytes</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>buff</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>readVarInt</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>b</name> <init>= <expr><call><name><name>Utils</name><operator>.</operator><name>newBytes</name></name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>b</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>long</name></type> <name>readTimestampTime</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>buff</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>readVarLong</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1_000_000L</literal> <operator>+</operator> <call><name>readVarInt</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>readTimeZone</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>buff</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>byte</name></type> <name>b</name> <init>= <expr><call><name><name>buff</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <name><name>Byte</name><operator>.</operator><name>MAX_VALUE</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>readVarInt</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>b</name> <operator>==</operator> <name><name>Byte</name><operator>.</operator><name>MIN_VALUE</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>-</operator><call><name>readVarInt</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><name>b</name> <operator>*</operator> <literal type="number">900</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>this</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>obj</name> <operator>instanceof</operator> <name>ValueDataType</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>ValueDataType</name></type> <name>v</name> <init>= <expr><operator>(</operator><name>ValueDataType</name><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>compareMode</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>compareMode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>indexes</name> <init>= <expr><ternary><condition><expr><name>rowFactory</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>rowFactory</name><operator>.</operator><name>getIndexes</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>indexes2</name> <init>= <expr><ternary><condition><expr><name><name>v</name><operator>.</operator><name>rowFactory</name></name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>v</name><operator>.</operator><name>rowFactory</name><operator>.</operator><name>getIndexes</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>Arrays</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>sortTypes</name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>sortTypes</name></name></expr></argument>)</argument_list></call>
            <operator>&amp;&amp;</operator> <call><name><name>Arrays</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>indexes</name></expr></argument>, <argument><expr><name>indexes2</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>indexes</name> <init>= <expr><ternary><condition><expr><name>rowFactory</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>rowFactory</name><operator>.</operator><name>getIndexes</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>super</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call> <operator>^</operator> <call><name><name>Arrays</name><operator>.</operator><name>hashCode</name></name><argument_list>(<argument><expr><name>indexes</name></expr></argument>)</argument_list></call>
            <operator>^</operator> <call><name><name>compareMode</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call> <operator>^</operator> <call><name><name>Arrays</name><operator>.</operator><name>hashCode</name></name><argument_list>(<argument><expr><name>sortTypes</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>save</name><parameter_list>(<parameter><decl><type><name>WriteBuffer</name></type> <name>buff</name></decl></parameter>, <parameter><decl><type><name><name>MetaType</name><argument_list type="generic">&lt;<argument><name>Database</name></argument>&gt;</argument_list></name></type> <name>metaType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>writeIntArray</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>sortTypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>columnCount</name> <init>= <expr><ternary><condition><expr><name>rowFactory</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>rowFactory</name><operator>.</operator><name>getColumnCount</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>putVarInt</name></name><argument_list>(<argument><expr><name>columnCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>indexes</name> <init>= <expr><ternary><condition><expr><name>rowFactory</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>rowFactory</name><operator>.</operator><name>getIndexes</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>writeIntArray</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>indexes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>rowFactory</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>rowFactory</name><operator>.</operator><name>getRowDataType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isStoreKeys</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>writeIntArray</name><parameter_list>(<parameter><decl><type><name>WriteBuffer</name></type> <name>buff</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>array</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name>array</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>putVarInt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>putVarInt</name></name><argument_list>(<argument><expr><name><name>array</name><operator>.</operator><name>length</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <range>: <expr><name>array</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>putVarInt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Factory</name></type> <name>getFactory</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>FACTORY</name></expr>;</return>
    </block_content>}</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Factory</name></type> <name>FACTORY</name> <init>= <expr><operator>new</operator> <call><name>Factory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>Factory</name> <super_list><implements>implements <super><name><name>StatefulDataType</name><operator>.</operator><name><name>Factory</name><argument_list type="generic">&lt;<argument><name>Database</name></argument>&gt;</argument_list></name></name></super></implements></super_list> <block>{

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name><name>DataType</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>create</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>buff</name></decl></parameter>, <parameter><decl><type><name><name>MetaType</name><argument_list type="generic">&lt;<argument><name>Database</name></argument>&gt;</argument_list></name></type> <name>metaType</name></decl></parameter>, <parameter><decl><type><name>Database</name></type> <name>database</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>sortTypes</name> <init>= <expr><call><name>readIntArray</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>columnCount</name> <init>= <expr><call><name><name>DataUtils</name><operator>.</operator><name>readVarInt</name></name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>indexes</name> <init>= <expr><call><name>readIntArray</name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>storeKeys</name> <init>= <expr><call><name><name>buff</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>CompareMode</name></type> <name>compareMode</name> <init>= <expr><ternary><condition><expr><name>database</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>CompareMode</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>database</name><operator>.</operator><name>getCompareMode</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>database</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>ValueDataType</name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sortTypes</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>ValueDataType</name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>RowFactory</name></type> <name>rowFactory</name> <init>= <expr><call><name><name>RowFactory</name><operator>.</operator><name>getDefaultRowFactory</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>createRowFactory</name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><name>compareMode</name></expr></argument>, <argument><expr><name>database</name></expr></argument>,
                    <argument><expr><name>sortTypes</name></expr></argument>, <argument><expr><name>indexes</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>columnCount</name></expr></argument>, <argument><expr><name>storeKeys</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>rowFactory</name><operator>.</operator><name>getRowDataType</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>int</name><index>[]</index></name></type> <name>readIntArray</name><parameter_list>(<parameter><decl><type><name>ByteBuffer</name></type> <name>buff</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name><name>DataUtils</name><operator>.</operator><name>readVarInt</name></name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>res</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>len</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>res</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>DataUtils</name><operator>.</operator><name>readVarInt</name></name><argument_list>(<argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <return>return <expr><name>res</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

}</block></class>
</unit>
