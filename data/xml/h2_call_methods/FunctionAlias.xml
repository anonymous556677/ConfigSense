<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/schema/FunctionAlias.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Array</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>InvocationTargetException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Method</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Modifier</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Connection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>ResultSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>ResultSetMetaData</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>SQLException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>Driver</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>api</name><operator>.</operator><name>ErrorCode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>DbObject</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>SessionLocal</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>Alias</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>Expression</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>ExpressionColumn</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>jdbc</name><operator>.</operator><name>JdbcConnection</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>DbException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>Trace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>LocalResult</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>ResultInterface</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name><operator>.</operator><name>Column</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>JdbcUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>SourceCompiler</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>StringUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>Utils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>DataType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>TypeInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueNull</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueToObjectConverter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueToObjectConverter2</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Represents a user-defined function, or alias.
 *
 * @author Thomas Mueller
 * @author Gary Tong
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>FunctionAlias</name> <super_list><extends>extends <super><name>UserDefinedFunction</name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>methodName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>source</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>JavaMethod</name><index>[]</index></name></type> <name>javaMethods</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>deterministic</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>FunctionAlias</name><parameter_list>(<parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>Trace</name><operator>.</operator><name>FUNCTION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Create a new alias based on a method name.
     *
     * @param schema the schema
     * @param id the id
     * @param name the name
     * @param javaClassMethod the class and method name
     * @param force create the object even if the class or method does not exist
     * @return the database object
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>FunctionAlias</name></type> <name>newInstance</name><parameter_list>(
            <parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>javaClassMethod</name></decl></parameter>,
            <parameter><decl><type><name>boolean</name></type> <name>force</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>FunctionAlias</name></type> <name>alias</name> <init>= <expr><operator>new</operator> <call><name>FunctionAlias</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>paren</name> <init>= <expr><call><name><name>javaClassMethod</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>lastDot</name> <init>= <expr><call><name><name>javaClassMethod</name><operator>.</operator><name>lastIndexOf</name></name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>paren</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then>
                <expr><call><name><name>javaClassMethod</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name>paren</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>lastDot</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>SYNTAX_ERROR_1</name></name></expr></argument>, <argument><expr><name>javaClassMethod</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>alias</name><operator>.</operator><name>className</name></name> <operator>=</operator> <call><name><name>javaClassMethod</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>lastDot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>alias</name><operator>.</operator><name>methodName</name></name> <operator>=</operator> <call><name><name>javaClassMethod</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>lastDot</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>alias</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>alias</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Create a new alias based on source code.
     *
     * @param schema the schema
     * @param id the id
     * @param name the name
     * @param source the source code
     * @param force create the object even if the class or method does not exist
     * @return the database object
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>FunctionAlias</name></type> <name>newInstanceFromSource</name><parameter_list>(
            <parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>force</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>FunctionAlias</name></type> <name>alias</name> <init>= <expr><operator>new</operator> <call><name>FunctionAlias</name><argument_list>(<argument><expr><name>schema</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>alias</name><operator>.</operator><name>source</name></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>alias</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>alias</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>force</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <comment type="line">// at least try to compile the class, otherwise the data type is not</comment>
            <comment type="line">// initialized if it could be</comment>
            <expr_stmt><expr><call><name>load</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>DbException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>force</name></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><name>e</name></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>load</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>javaMethods</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>source</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>loadFromSource</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>loadClass</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>loadFromSource</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>SourceCompiler</name></type> <name>compiler</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getCompiler</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <synchronized>synchronized <init>(<expr><name>compiler</name></expr>)</init> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>fullClassName</name> <init>= <expr><name><name>Constants</name><operator>.</operator><name>USER_PACKAGE</name></name> <operator>+</operator> <literal type="string">"."</literal> <operator>+</operator> <call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>compiler</name><operator>.</operator><name>setSource</name></name><argument_list>(<argument><expr><name>fullClassName</name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try>try <block>{<block_content>
                <decl_stmt><decl><type><name>Method</name></type> <name>m</name> <init>= <expr><call><name><name>compiler</name><operator>.</operator><name>getMethod</name></name><argument_list>(<argument><expr><name>fullClassName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>JavaMethod</name></type> <name>method</name> <init>= <expr><operator>new</operator> <call><name>JavaMethod</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>javaMethods</name> <operator>=</operator> <operator>new</operator> <name><name>JavaMethod</name><index>[]</index></name> <block>{
                        <expr><name>method</name></expr>
                }</block></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>DbException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <throw>throw <expr><name>e</name></expr>;</throw>
            </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>SYNTAX_ERROR_1</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></synchronized>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>loadClass</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>javaClass</name> <init>= <expr><call><name><name>JdbcUtils</name><operator>.</operator><name>loadUserClass</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Method</name><index>[]</index></name></type> <name>methods</name> <init>= <expr><call><name><name>javaClass</name><operator>.</operator><name>getMethods</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>JavaMethod</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><name><name>methods</name><operator>.</operator><name>length</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Method</name></type> <name>m</name> <init>= <expr><name><name>methods</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Modifier</name><operator>.</operator><name>isStatic</name></name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>getModifiers</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>m</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>methodName</name></expr></argument>)</argument_list></call> <operator>||</operator>
                    <call><name>getMethodSignature</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>methodName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>JavaMethod</name></type> <name>javaMethod</name> <init>= <expr><operator>new</operator> <call><name>JavaMethod</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>JavaMethod</name></type> <name>old</name> <range>: <expr><name>list</name></expr></range></decl></init>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>old</name><operator>.</operator><name>getParameterCount</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>javaMethod</name><operator>.</operator><name>getParameterCount</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                        <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator>
                                <name>METHODS_MUST_HAVE_DIFFERENT_PARAMETER_COUNTS_2</name></name></expr></argument>,
                                <argument><expr><call><name><name>old</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>javaMethod</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>javaMethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><call><name><name>list</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(
                    <argument><expr><name><name>ErrorCode</name><operator>.</operator><name>PUBLIC_STATIC_JAVA_METHOD_NOT_FOUND_1</name></name></expr></argument>,
                    <argument><expr><name>methodName</name> <operator>+</operator> <literal type="string">" ("</literal> <operator>+</operator> <name>className</name> <operator>+</operator> <literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>javaMethods</name> <operator>=</operator> <call><name><name>list</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>JavaMethod</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Sort elements. Methods with a variable number of arguments must be at</comment>
        <comment type="line">// the end. Reason: there could be one method without parameters and one</comment>
        <comment type="line">// with a variable number. The one without parameters needs to be used</comment>
        <comment type="line">// if no parameters are given.</comment>
        <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>javaMethods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>getMethodSignature</name><parameter_list>(<parameter><decl><type><name>Method</name></type> <name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>buff</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><index>[]</index></name></type> <name>parameterTypes</name> <init>= <expr><call><name><name>m</name><operator>.</operator><name>getParameterTypes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>length</name> <init>= <expr><name><name>parameterTypes</name><operator>.</operator><name>length</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <comment type="line">// do not use a space here, because spaces are removed</comment>
                <comment type="line">// in CreateFunctionAlias.setJavaClassMethod()</comment>
                <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>p</name> <init>= <expr><name><name>parameterTypes</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>p</name><operator>.</operator><name>isArray</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>p</name><operator>.</operator><name>getComponentType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"[]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>p</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><call><name><name>buff</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getDropSQL</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getSQL</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><literal type="string">"DROP ALIAS IF EXISTS "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DEFAULT_SQL_FLAGS</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getCreateSQL</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><literal type="string">"CREATE FORCE ALIAS "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>getSQL</name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>DEFAULT_SQL_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>deterministic</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" DETERMINISTIC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>source</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>StringUtils</name><operator>.</operator><name>quoteStringSQL</name></name><argument_list>(<argument><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" AS "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>StringUtils</name><operator>.</operator><name>quoteStringSQL</name></name><argument_list>(<argument><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" FOR "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>className</name> <operator>+</operator> <literal type="char">'.'</literal> <operator>+</operator> <name>methodName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><call><name><name>builder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>DbObject</name><operator>.</operator><name>FUNCTION_ALIAS</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>removeChildrenAndResources</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>removeMeta</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>className</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>methodName</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>javaMethods</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Find the Java method that matches the arguments.
     *
     * @param args the argument list
     * @return the Java method
     * @throws DbException if no matching method could be found
     */</comment>
    <function><type><specifier>public</specifier> <name>JavaMethod</name></type> <name>findJavaMethod</name><parameter_list>(<parameter><decl><type><name><name>Expression</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>load</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>parameterCount</name> <init>= <expr><name><name>args</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>JavaMethod</name></type> <name>m</name> <range>: <expr><name>javaMethods</name></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name><name>m</name><operator>.</operator><name>getParameterCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <name>parameterCount</name> <operator>||</operator> <operator>(</operator><call><name><name>m</name><operator>.</operator><name>isVarArgs</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
                    <name>count</name> <operator>&lt;=</operator> <name>parameterCount</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>m</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>METHOD_NOT_FOUND_1</name></name></expr></argument>, <argument><expr><call><name>getName</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" ("</literal> <operator>+</operator>
                <name>className</name> <operator>+</operator> <literal type="string">", parameter count: "</literal> <operator>+</operator> <name>parameterCount</name> <operator>+</operator> <literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getJavaMethodName</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>this</name><operator>.</operator><name>methodName</name></name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the Java methods mapped by this function.
     *
     * @return the Java methods.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>JavaMethod</name><index>[]</index></name></type> <name>getJavaMethods</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>load</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>javaMethods</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDeterministic</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>deterministic</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>deterministic</name></name> <operator>=</operator> <name>deterministic</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDeterministic</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>deterministic</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getSource</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>source</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * There may be multiple Java methods that match a function name.
     * Each method must have a different number of parameters however.
     * This helper class represents one such method.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>JavaMethod</name> <super_list><implements>implements <super><name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>JavaMethod</name></argument>&gt;</argument_list></name></super></implements></super_list> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>id</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Method</name></type> <name>method</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>TypeInfo</name></type> <name>dataType</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>hasConnectionParam</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>varArgs</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>varArgClass</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>paramCount</name></decl>;</decl_stmt>

        <constructor><name>JavaMethod</name><parameter_list>(<parameter><decl><type><name>Method</name></type> <name>method</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>method</name></name> <operator>=</operator> <name>method</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><index>[]</index></name></type> <name>paramClasses</name> <init>= <expr><call><name><name>method</name><operator>.</operator><name>getParameterTypes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>paramCount</name> <operator>=</operator> <name><name>paramClasses</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>paramCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>paramClass</name> <init>= <expr><name><name>paramClasses</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>Connection</name><operator>.</operator><name><name>class</name><operator>.</operator><name>isAssignableFrom</name></name></name><argument_list>(<argument><expr><name>paramClass</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>hasConnectionParam</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>paramCount</name><operator>--</operator></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>paramCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>lastArg</name> <init>= <expr><name><name>paramClasses</name><index>[<expr><name><name>paramClasses</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>lastArg</name><operator>.</operator><name>isArray</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>method</name><operator>.</operator><name>isVarArgs</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>varArgs</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>varArgClass</name> <operator>=</operator> <call><name><name>lastArg</name><operator>.</operator><name>getComponentType</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>returnClass</name> <init>= <expr><call><name><name>method</name><operator>.</operator><name>getReturnType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>dataType</name> <operator>=</operator> <ternary><condition><expr><call><name><name>ResultSet</name><operator>.</operator><name><name>class</name><operator>.</operator><name>isAssignableFrom</name></name></name><argument_list>(<argument><expr><name>returnClass</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="null">null</literal></expr>
                    </then><else>: <expr><call><name><name>ValueToObjectConverter2</name><operator>.</operator><name>classToType</name></name><argument_list>(<argument><expr><name>returnClass</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><call><name><name>method</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Check if this function requires a database connection.
         *
         * @return if the function requires a connection
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasConnectionParam</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><name><name>this</name><operator>.</operator><name>hasConnectionParam</name></name></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Call the user-defined function and return the value.
         *
         * @param session the session
         * @param args the argument list
         * @param columnList true if the function should only return the column
         *            list
         * @return the value
         */</comment>
        <function><type><specifier>public</specifier> <name>Value</name></type> <name>getValue</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>Expression</name><index>[]</index></name></type> <name>args</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>columnList</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>Object</name></type> <name>returnValue</name> <init>= <expr><call><name>execute</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>columnList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>Value</name><operator>.</operator><name><name>class</name><operator>.</operator><name>isAssignableFrom</name></name></name><argument_list>(<argument><expr><call><name><name>method</name><operator>.</operator><name>getReturnType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>(</operator><name>Value</name><operator>)</operator> <name>returnValue</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name><name>ValueToObjectConverter</name><operator>.</operator><name>objectToValue</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>returnValue</name></expr></argument>, <argument><expr><call><name><name>dataType</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>convertTo</name><argument_list>(<argument><expr><name>dataType</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Call the table user-defined function and return the value.
         *
         * @param session the session
         * @param args the argument list
         * @param columnList true if the function should only return the column
         *            list
         * @return the value
         */</comment>
        <function><type><specifier>public</specifier> <name>ResultInterface</name></type> <name>getTableValue</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>Expression</name><index>[]</index></name></type> <name>args</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>columnList</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>Object</name></type> <name>o</name> <init>= <expr><call><name>execute</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>columnList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>FUNCTION_MUST_RETURN_RESULT_SET_1</name></name></expr></argument>, <argument><expr><call><name><name>method</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>ResultInterface</name><operator>.</operator><name><name>class</name><operator>.</operator><name>isAssignableFrom</name></name></name><argument_list>(<argument><expr><call><name><name>method</name><operator>.</operator><name>getReturnType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>(</operator><name>ResultInterface</name><operator>)</operator> <name>o</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name>resultSetToResult</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><operator>(</operator><name>ResultSet</name><operator>)</operator> <name>o</name></expr></argument>, <argument><expr><ternary><condition><expr><name>columnList</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Create a result for the given result set.
         *
         * @param session the session
         * @param rs the result set
         * @param maxrows the maximum number of rows to read (0 to just read the
         *            meta data)
         * @return the value
         */</comment>
        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ResultInterface</name></type> <name>resultSetToResult</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>ResultSet</name></type> <name>rs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxrows</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <try>try <block>{<block_content>
                <decl_stmt><decl><type><name>ResultSetMetaData</name></type> <name>meta</name> <init>= <expr><call><name><name>rs</name><operator>.</operator><name>getMetaData</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>columnCount</name> <init>= <expr><call><name><name>meta</name><operator>.</operator><name>getColumnCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>Expression</name><index>[]</index></name></type> <name>columns</name> <init>= <expr><operator>new</operator> <name><name>Expression</name><index>[<expr><name>columnCount</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>columnCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>alias</name> <init>= <expr><call><name><name>meta</name><operator>.</operator><name>getColumnLabel</name></name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>meta</name><operator>.</operator><name>getColumnName</name></name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>columnTypeName</name> <init>= <expr><call><name><name>meta</name><operator>.</operator><name>getColumnTypeName</name></name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>columnType</name> <init>= <expr><call><name><name>DataType</name><operator>.</operator><name>convertSQLTypeToValueType</name></name><argument_list>(<argument><expr><call><name><name>meta</name><operator>.</operator><name>getColumnType</name></name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>columnTypeName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>precision</name> <init>= <expr><call><name><name>meta</name><operator>.</operator><name>getPrecision</name></name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>scale</name> <init>= <expr><call><name><name>meta</name><operator>.</operator><name>getScale</name></name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>TypeInfo</name></type> <name>typeInfo</name></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>columnType</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>ARRAY</name></name> <operator>&amp;&amp;</operator> <call><name><name>columnTypeName</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><literal type="string">" ARRAY"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>typeInfo</name> <operator>=</operator> <call><name><name>TypeInfo</name>
                                <operator>.</operator><name>getTypeInfo</name></name><argument_list>(<argument><expr><name><name>Value</name><operator>.</operator><name>ARRAY</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1L</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                                        <argument><expr><call><name><name>TypeInfo</name><operator>.</operator><name>getTypeInfo</name></name><argument_list>(<argument><expr><call><name><name>DataType</name><operator>.</operator><name>getTypeByName</name></name><argument_list>(
                                                <argument><expr><call><name><name>columnTypeName</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>columnTypeName</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>,
                                                <argument><expr><call><name><name>session</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><name>typeInfo</name> <operator>=</operator> <call><name><name>TypeInfo</name><operator>.</operator><name>getTypeInfo</name></name><argument_list>(<argument><expr><name>columnType</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                    <decl_stmt><decl><type><name>Expression</name></type> <name>e</name> <init>= <expr><operator>new</operator> <call><name>ExpressionColumn</name><argument_list>(<argument><expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Column</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>typeInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>alias</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>e</name> <operator>=</operator> <operator>new</operator> <call><name>Alias</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>alias</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name><name>columns</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
                </block_content>}</block></for>
                <decl_stmt><decl><type><name>LocalResult</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>LocalResult</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>columns</name></expr></argument>, <argument><expr><name>columnCount</name></expr></argument>, <argument><expr><name>columnCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>maxrows</name> <operator>&amp;&amp;</operator> <call><name><name>rs</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name><name>Value</name><index>[]</index></name></type> <name>list</name> <init>= <expr><operator>new</operator> <name><name>Value</name><index>[<expr><name>columnCount</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>columnCount</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                        <expr_stmt><expr><name><name>list</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name><name>ValueToObjectConverter</name><operator>.</operator><name>objectToValue</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name><name>rs</name><operator>.</operator><name>getObject</name></name><argument_list>(<argument><expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><name><name>columns</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValueType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></for>
                    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addRow</name></name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>done</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>result</name></expr>;</return>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SQLException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>Object</name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name><name>Expression</name><index>[]</index></name></type> <name>args</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>columnList</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><index>[]</index></name></type> <name>paramClasses</name> <init>= <expr><call><name><name>method</name><operator>.</operator><name>getParameterTypes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Object</name><index>[]</index></name></type> <name>params</name> <init>= <expr><operator>new</operator> <name><name>Object</name><index>[<expr><name><name>paramClasses</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>JdbcConnection</name></type> <name>conn</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>createConnection</name></name><argument_list>(<argument><expr><name>columnList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>hasConnectionParam</name> <operator>&amp;&amp;</operator> <name><name>params</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>params</name><index>[<expr><name>p</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>conn</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// allocate array for varArgs parameters</comment>
            <decl_stmt><decl><type><name>Object</name></type> <name>varArg</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>varArgs</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>args</name><operator>.</operator><name>length</name></name> <operator>-</operator> <name><name>params</name><operator>.</operator><name>length</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator>
                        <operator>(</operator><ternary><condition><expr><name>hasConnectionParam</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>varArg</name> <operator>=</operator> <call><name><name>Array</name><operator>.</operator><name>newInstance</name></name><argument_list>(<argument><expr><name>varArgClass</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>params</name><index>[<expr><name><name>params</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>varArg</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <for>for <control>(<init><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><name><name>args</name><operator>.</operator><name>length</name></name></expr></init></decl>;</init> <condition><expr><name>a</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>a</name><operator>++</operator></expr><operator>,</operator> <expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>boolean</name></type> <name>currentIsVarArg</name> <init>= <expr><name>varArgs</name> <operator>&amp;&amp;</operator>
                        <name>p</name> <operator>&gt;=</operator> <name><name>paramClasses</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>paramClass</name></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>currentIsVarArg</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>paramClass</name> <operator>=</operator> <name>varArgClass</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>paramClass</name> <operator>=</operator> <name><name>paramClasses</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <decl_stmt><decl><type><name>Value</name></type> <name>v</name> <init>= <expr><name><name>args</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>getValue</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Object</name></type> <name>o</name></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>Value</name><operator>.</operator><name><name>class</name><operator>.</operator><name>isAssignableFrom</name></name></name><argument_list>(<argument><expr><name>paramClass</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>o</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <decl_stmt><decl><type><name>boolean</name></type> <name>primitive</name> <init>= <expr><call><name><name>paramClass</name><operator>.</operator><name>isPrimitive</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>)</condition> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name>primitive</name></expr>)</condition> <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><name>columnList</name></expr>)</condition> <block>{<block_content>
                                <comment type="line">// If the column list is requested, the parameters</comment>
                                <comment type="line">// may be null. Need to set to default value,</comment>
                                <comment type="line">// otherwise the function can't be called at all.</comment>
                                <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name><name>DataType</name><operator>.</operator><name>getDefaultForPrimitiveType</name></name><argument_list>(<argument><expr><name>paramClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if> <else>else <block>{<block_content>
                                <comment type="line">// NULL for a java primitive: return NULL</comment>
                                <return>return <expr><literal type="null">null</literal></expr>;</return>
                            </block_content>}</block></else></if_stmt>
                        </block_content>}</block></if> <else>else <block>{<block_content>
                            <expr_stmt><expr><name>o</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><name>o</name> <operator>=</operator> <call><name><name>ValueToObjectConverter</name><operator>.</operator><name>valueToObject</name></name><argument_list>(
                                <argument><expr><operator>(</operator><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><operator>)</operator> <operator>(</operator><ternary><condition><expr><name>primitive</name></expr> ?</condition><then> <expr><call><name><name>Utils</name><operator>.</operator><name>getNonPrimitiveClass</name></name><argument_list>(<argument><expr><name>paramClass</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>paramClass</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></else></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>currentIsVarArg</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>Array</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>varArg</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name><name>params</name><operator>.</operator><name>length</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name><name>params</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name>o</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>
            <decl_stmt><decl><type><name>boolean</name></type> <name>old</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getAutoCommit</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Value</name></type> <name>identity</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getLastIdentity</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>defaultConnection</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator>
                    <call><name>getSettings</name><argument_list>()</argument_list></call><operator>.</operator><name>defaultConnection</name></expr></init></decl>;</decl_stmt>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>setAutoCommit</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>Object</name></type> <name>returnValue</name></decl>;</decl_stmt>
                <try>try <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>defaultConnection</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>Driver</name><operator>.</operator><name>setDefaultConnection</name></name><argument_list>(<argument><expr><call><name><name>session</name><operator>.</operator><name>createConnection</name></name><argument_list>(<argument><expr><name>columnList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>returnValue</name> <operator>=</operator> <call><name><name>method</name><operator>.</operator><name>invoke</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>returnValue</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <return>return <expr><literal type="null">null</literal></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InvocationTargetException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <decl_stmt><decl><type><name>StringBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><call><name><name>method</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>length</name> <init>= <expr><name><name>params</name><operator>.</operator><name>length</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>params</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></for>
                    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>convertInvocation</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><call><name><name>builder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></catch></try>
                <return>return <expr><name>returnValue</name></expr>;</return>
            </block_content>}</block> <finally>finally <block>{<block_content>
                <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>setLastIdentity</name></name><argument_list>(<argument><expr><name>identity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>setAutoCommit</name></name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>defaultConnection</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>Driver</name><operator>.</operator><name>setDefaultConnection</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></finally></try>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><index>[]</index></name></type> <name>getColumnClasses</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><call><name><name>method</name><operator>.</operator><name>getParameterTypes</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Returns data type information for regular functions or {@code null}
         * for table value functions.
         *
         * @return data type information for regular functions or {@code null}
         *         for table value functions
         */</comment>
        <function><type><specifier>public</specifier> <name>TypeInfo</name></type> <name>getDataType</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><name>dataType</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>getParameterCount</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><name>paramCount</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isVarArgs</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><name>varArgs</name></expr>;</return>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<parameter><decl><type><name>JavaMethod</name></type> <name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>varArgs</name> <operator>!=</operator> <name><name>m</name><operator>.</operator><name>varArgs</name></name></expr>)</condition> <block>{<block_content>
                <return>return <expr><ternary><condition><expr><name>varArgs</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>paramCount</name> <operator>!=</operator> <name><name>m</name><operator>.</operator><name>paramCount</name></name></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>paramCount</name> <operator>-</operator> <name><name>m</name><operator>.</operator><name>paramCount</name></name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>hasConnectionParam</name> <operator>!=</operator> <name><name>m</name><operator>.</operator><name>hasConnectionParam</name></name></expr>)</condition> <block>{<block_content>
                <return>return <expr><ternary><condition><expr><name>hasConnectionParam</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>id</name> <operator>-</operator> <name><name>m</name><operator>.</operator><name>id</name></name></expr>;</return>
        </block_content>}</block></function>

    }</block></class>

}</block></class>
</unit>
