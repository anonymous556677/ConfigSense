<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/Users/wang/Documents/project/configuration_code_understanding/code3/data/system/h2database/h2/src/main/org/h2/table/Column.java"><comment type="block">/*
 * Copyright 2004-2022 H2 Group. Multiple-Licensed under the MPL 2.0,
 * and the EPL 1.0 (https://h2database.com/html/license.html).
 * Initial Developer: H2 Group
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>table</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>ResultSetMetaData</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Objects</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>api</name><operator>.</operator><name>ErrorCode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>Parser</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>command</name><operator>.</operator><name>ddl</name><operator>.</operator><name>SequenceOptions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>CastDataProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>Constants</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>engine</name><operator>.</operator><name>SessionLocal</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>Expression</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>ExpressionVisitor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>expression</name><operator>.</operator><name>ValueExpression</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>message</name><operator>.</operator><name>DbException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>result</name><operator>.</operator><name>Row</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>Domain</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>Schema</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>schema</name><operator>.</operator><name>Sequence</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>HasSQL</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>ParserUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>util</name><operator>.</operator><name>StringUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>TypeInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>Typed</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>Value</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueNull</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>h2</name><operator>.</operator><name>value</name><operator>.</operator><name>ValueUuid</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class represents a column in a table.
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>Column</name> <super_list><implements>implements <super><name>HasSQL</name></super>, <super><name>Typed</name></super>, <super><name>ColumnTemplate</name></super></implements></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * The name of the rowid pseudo column.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ROWID</name> <init>= <expr><literal type="string">"_ROWID_"</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * This column is not nullable.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>NOT_NULLABLE</name> <init>=
            <expr><name><name>ResultSetMetaData</name><operator>.</operator><name>columnNoNulls</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * This column is nullable.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>NULLABLE</name> <init>=
            <expr><name><name>ResultSetMetaData</name><operator>.</operator><name>columnNullable</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * It is not know whether this column is nullable.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>NULLABLE_UNKNOWN</name> <init>=
            <expr><name><name>ResultSetMetaData</name><operator>.</operator><name>columnNullableUnknown</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>TypeInfo</name></type> <name>type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Table</name></type> <name>table</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>columnId</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>nullable</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Expression</name></type> <name>defaultExpression</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Expression</name></type> <name>onUpdateExpression</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>SequenceOptions</name></type> <name>identityOptions</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>defaultOnNull</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Sequence</name></type> <name>sequence</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>isGeneratedAlways</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>GeneratedColumnResolver</name></type> <name>generatedTableFilter</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>selectivity</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>comment</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>primaryKey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>visible</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>rowId</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Domain</name></type> <name>domain</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Appends the specified columns to the specified builder.
     *
     * @param builder
     *            string builder
     * @param columns
     *            columns
     * @param sqlFlags
     *            formatting flags
     * @return the specified string builder
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>StringBuilder</name></type> <name>writeColumns</name><parameter_list>(<parameter><decl><type><name>StringBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name><name>Column</name><index>[]</index></name></type> <name>columns</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sqlFlags</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><name><name>columns</name><operator>.</operator><name>length</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>columns</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getSQL</name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>sqlFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>builder</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Appends the specified columns to the specified builder.
     *
     * @param builder
     *            string builder
     * @param columns
     *            columns
     * @param separator
     *            separator
     * @param suffix
     *            additional SQL to append after each column
     * @param sqlFlags
     *            formatting flags
     * @return the specified string builder
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>StringBuilder</name></type> <name>writeColumns</name><parameter_list>(<parameter><decl><type><name>StringBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name><name>Column</name><index>[]</index></name></type> <name>columns</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>separator</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>suffix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sqlFlags</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><name><name>columns</name><operator>.</operator><name>length</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>separator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>columns</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getSQL</name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>sqlFlags</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>builder</name></expr>;</return>
    </block_content>}</block></function>

    <constructor><specifier>public</specifier> <name>Column</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>TypeInfo</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>Column</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>TypeInfo</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>Table</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>columnId</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>table</name></name> <operator>=</operator> <name>table</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>columnId</name></name> <operator>=</operator> <name>columnId</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <name>this</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>o</name> <operator>instanceof</operator> <name>Column</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Column</name></type> <name>other</name> <init>= <expr><operator>(</operator><name>Column</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>table</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>other</name><operator>.</operator><name>table</name></name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator>
                <name>name</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>other</name><operator>.</operator><name>name</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>table</name> <operator>!=</operator> <name><name>other</name><operator>.</operator><name>table</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>name</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>table</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>name</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>table</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>^</operator> <call><name><name>name</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Column</name></type> <name>getClone</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Column</name></type> <name>newColumn</name> <init>= <expr><operator>new</operator> <call><name>Column</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>newColumn</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>newColumn</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Convert a value to this column's type without precision and scale checks.
     *
     * @param provider the cast information provider
     * @param v the value
     * @return the value
     */</comment>
    <function><type><specifier>public</specifier> <name>Value</name></type> <name>convert</name><parameter_list>(<parameter><decl><type><name>CastDataProvider</name></type> <name>provider</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <return>return <expr><call><name><name>v</name><operator>.</operator><name>convertTo</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>provider</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>DbException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>e</name><operator>.</operator><name>getErrorCode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ErrorCode</name><operator>.</operator><name>DATA_CONVERSION_ERROR_1</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>getDataConversionError</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <throw>throw <expr><name>e</name></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns whether this column is an identity column.
     *
     * @return whether this column is an identity column
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isIdentity</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>sequence</name> <operator>!=</operator> <literal type="null">null</literal> <operator>||</operator> <name>identityOptions</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns whether this column is a generated column.
     *
     * @return whether this column is a generated column
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isGenerated</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>isGeneratedAlways</name> <operator>&amp;&amp;</operator> <name>defaultExpression</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns whether this column is a generated column or always generated
     * identity column.
     *
     * @return whether this column is a generated column or always generated
     *         identity column
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isGeneratedAlways</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>isGeneratedAlways</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Set the default value in the form of a generated expression of other
     * columns.
     *
     * @param expression the computed expression
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setGeneratedExpression</name><parameter_list>(<parameter><decl><type><name>Expression</name></type> <name>expression</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isGeneratedAlways</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>defaultExpression</name></name> <operator>=</operator> <name>expression</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Set the table and column id.
     *
     * @param table the table
     * @param columnId the column index
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTable</name><parameter_list>(<parameter><decl><type><name>Table</name></type> <name>table</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>columnId</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>table</name></name> <operator>=</operator> <name>table</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>columnId</name></name> <operator>=</operator> <name>columnId</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Table</name></type> <name>getTable</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>table</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>setDefaultExpression</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Expression</name></type> <name>defaultExpression</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// also to test that no column names are used</comment>
        <if_stmt><if>if <condition>(<expr><name>defaultExpression</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>defaultExpression</name> <operator>=</operator> <call><name><name>defaultExpression</name><operator>.</operator><name>optimize</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>defaultExpression</name><operator>.</operator><name>isConstant</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>defaultExpression</name> <operator>=</operator> <call><name><name>ValueExpression</name><operator>.</operator><name>get</name></name><argument_list>(
                        <argument><expr><call><name><name>defaultExpression</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>defaultExpression</name></name> <operator>=</operator> <name>defaultExpression</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isGeneratedAlways</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>setOnUpdateExpression</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Expression</name></type> <name>onUpdateExpression</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// also to test that no column names are used</comment>
        <if_stmt><if>if <condition>(<expr><name>onUpdateExpression</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>onUpdateExpression</name> <operator>=</operator> <call><name><name>onUpdateExpression</name><operator>.</operator><name>optimize</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>onUpdateExpression</name><operator>.</operator><name>isConstant</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>onUpdateExpression</name> <operator>=</operator> <call><name><name>ValueExpression</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>onUpdateExpression</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>onUpdateExpression</name></name> <operator>=</operator> <name>onUpdateExpression</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getColumnId</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>columnId</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getSQL</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sqlFlags</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>rowId</name></expr> ?</condition><then> <expr><name>name</name></expr> </then><else>: <expr><call><name><name>Parser</name><operator>.</operator><name>quoteIdentifier</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>sqlFlags</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>StringBuilder</name></type> <name>getSQL</name><parameter_list>(<parameter><decl><type><name>StringBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sqlFlags</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>rowId</name></expr> ?</condition><then> <expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>ParserUtil</name><operator>.</operator><name>quoteIdentifier</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>sqlFlags</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Appends the table name and column name to the specified builder.
     *
     * @param builder the string builder
     * @param sqlFlags formatting flags
     * @return the specified string builder
     */</comment>
    <function><type><specifier>public</specifier> <name>StringBuilder</name></type> <name>getSQLWithTable</name><parameter_list>(<parameter><decl><type><name>StringBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sqlFlags</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getSQL</name><argument_list>(<argument><expr><call><name><name>table</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>sqlFlags</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sqlFlags</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>name</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>TypeInfo</name></type> <name>getType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>type</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNullable</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>nullable</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getVisible</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>visible</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setVisible</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>visible</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Domain</name></type> <name>getDomain</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>domain</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>setDomain</name><parameter_list>(<parameter><decl><type><name>Domain</name></type> <name>domain</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>domain</name></name> <operator>=</operator> <name>domain</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns whether this column is a row identity column.
     *
     * @return true for _ROWID_ column, false otherwise
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isRowId</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>rowId</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Set row identity flag.
     *
     * @param rowId true _ROWID_ column, false otherwise
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRowId</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>rowId</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>rowId</name></name> <operator>=</operator> <name>rowId</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Validate the value, convert it if required, and update the sequence value
     * if required. If the value is null, the default value (NULL if no default
     * is set) is returned. Domain constraints are validated as well.
     *
     * @param session the session
     * @param value the value or null
     * @param row the row
     * @return the new or converted value
     */</comment>
    <function><type><name>Value</name></type> <name>validateConvertUpdateSequence</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Value</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>Row</name></type> <name>row</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <label><name>check</name>:</label> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>sequence</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name><name>session</name><operator>.</operator><name>getNextValueFor</name></name><argument_list>(<argument><expr><name>sequence</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break <name>check</name>;</break>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>getDefaultOrGenerated</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>nullable</name></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>NULL_NOT_ALLOWED</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>
        <try>try <block>{<block_content>
            <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name><name>value</name><operator>.</operator><name>convertForAssignTo</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>DbException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>e</name><operator>.</operator><name>getErrorCode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ErrorCode</name><operator>.</operator><name>DATA_CONVERSION_ERROR_1</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>getDataConversionError</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <throw>throw <expr><name>e</name></expr>;</throw>
        </block_content>}</block></catch></try>
        <if_stmt><if>if <condition>(<expr><name>domain</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>domain</name><operator>.</operator><name>checkConstraints</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>sequence</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>session</name><operator>.</operator><name>getMode</name></name><argument_list>()</argument_list></call><operator>.</operator><name>updateSequenceOnManualIdentityInsertion</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>updateSequenceIfRequired</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name><name>value</name><operator>.</operator><name>getLong</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>value</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Value</name></type> <name>getDefaultOrGenerated</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Row</name></type> <name>row</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Value</name></type> <name>value</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Expression</name></type> <name>localDefaultExpression</name> <init>= <expr><call><name>getEffectiveDefaultExpression</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>localDefaultExpression</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>ValueNull</name><operator>.</operator><name>INSTANCE</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>isGeneratedAlways</name></expr>)</condition> <block>{<block_content>
                <synchronized>synchronized <init>(<expr><name>this</name></expr>)</init> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>generatedTableFilter</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <try>try <block>{<block_content>
                        <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name><name>localDefaultExpression</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block> <finally>finally <block>{<block_content>
                        <expr_stmt><expr><call><name><name>generatedTableFilter</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></finally></try>
                </block_content>}</block></synchronized>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name><name>localDefaultExpression</name><operator>.</operator><name>getValue</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><name>value</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>DbException</name></type> <name>getDataConversionError</name><parameter_list>(<parameter><decl><type><name>Value</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>DbException</name></type> <name>cause</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>value</name><operator>.</operator><name>getTraceSQL</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" ("</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>table</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>table</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">": "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>getCreateSQL</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>DbException</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>ErrorCode</name><operator>.</operator><name>DATA_CONVERSION_ERROR_1</name></name></expr></argument>, <argument><expr><name>cause</name></expr></argument>, <argument><expr><call><name><name>builder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>updateSequenceIfRequired</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>sequence</name><operator>.</operator><name>getCycle</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Sequence</name><operator>.</operator><name>Cycle</name><operator>.</operator><name>EXHAUSTED</name></name></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>current</name> <init>= <expr><call><name><name>sequence</name><operator>.</operator><name>getCurrentValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>inc</name> <init>= <expr><call><name><name>sequence</name><operator>.</operator><name>getIncrement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>inc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <name>current</name></expr>)</condition> <block>{<block_content>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>value</name> <operator>&gt;</operator> <name>current</name></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>sequence</name><operator>.</operator><name>modify</name></name><argument_list>(<argument><expr><name>value</name> <operator>+</operator> <name>inc</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>DbException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>ex</name><operator>.</operator><name>getErrorCode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ErrorCode</name><operator>.</operator><name>SEQUENCE_ATTRIBUTES_INVALID_7</name></name></expr>)</condition> <block>{<block_content>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
            <throw>throw <expr><name>ex</name></expr>;</throw>
        </block_content>}</block></catch></try>
        <expr_stmt><expr><call><name><name>sequence</name><operator>.</operator><name>flush</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Initialize the sequence for this column.
     *
     * @param session the session
     * @param schema the schema where the sequence should be generated
     * @param id the object id
     * @param temporary true if the sequence is temporary and does not need to
     *            be stored
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>initializeSequence</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>Schema</name></type> <name>schema</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>temporary</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>identityOptions</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>DbException</name><operator>.</operator><name>getInternalError</name></name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>sequenceName</name></decl>;</decl_stmt>
        <do>do <block>{<block_content>
            <expr_stmt><expr><name>sequenceName</name> <operator>=</operator> <literal type="string">"SYSTEM_SEQUENCE_"</literal>
                    <operator>+</operator> <call><name><name>StringUtils</name><operator>.</operator><name>toUpperEnglish</name></name><argument_list>(<argument><expr><call><name><name>ValueUuid</name><operator>.</operator><name>getNewRandom</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> while <condition>(<expr><call><name><name>schema</name><operator>.</operator><name>findSequence</name></name><argument_list>(<argument><expr><name>sequenceName</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>;</do>
        <expr_stmt><expr><call><name><name>identityOptions</name><operator>.</operator><name>setDataType</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Sequence</name></type> <name>seq</name> <init>= <expr><operator>new</operator> <call><name>Sequence</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>schema</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>sequenceName</name></expr></argument>, <argument><expr><name>identityOptions</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>seq</name><operator>.</operator><name>setTemporary</name></name><argument_list>(<argument><expr><name>temporary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>session</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addSchemaObject</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// This method also ensures NOT NULL</comment>
        <expr_stmt><expr><call><name>setSequence</name><argument_list>(<argument><expr><name>seq</name></expr></argument>, <argument><expr><name>isGeneratedAlways</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>prepareExpressions</name><parameter_list>(<parameter><decl><type><name>SessionLocal</name></type> <name>session</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>defaultExpression</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>isGeneratedAlways</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>generatedTableFilter</name> <operator>=</operator> <operator>new</operator> <call><name>GeneratedColumnResolver</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>defaultExpression</name><operator>.</operator><name>mapColumns</name></name><argument_list>(<argument><expr><name>generatedTableFilter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>Expression</name><operator>.</operator><name>MAP_INITIAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>defaultExpression</name> <operator>=</operator> <call><name><name>defaultExpression</name><operator>.</operator><name>optimize</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>onUpdateExpression</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>onUpdateExpression</name> <operator>=</operator> <call><name><name>onUpdateExpression</name><operator>.</operator><name>optimize</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>domain</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>domain</name><operator>.</operator><name>prepareExpressions</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getCreateSQLWithoutName</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getCreateSQL</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getCreateSQL</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>getCreateSQL</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get this columns part of CREATE TABLE SQL statement.
     *
     * @param forMeta whether this is for the metadata table
     * @return the SQL statement
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getCreateSQL</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>forMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>ParserUtil</name><operator>.</operator><name>quoteIdentifier</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>DEFAULT_SQL_FLAGS</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>getCreateSQL</name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>forMeta</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>getCreateSQL</name><parameter_list>(<parameter><decl><type><name>StringBuilder</name></type> <name>builder</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>forMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>domain</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>domain</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>DEFAULT_SQL_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>type</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>, <argument><expr><name>DEFAULT_SQL_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>visible</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" INVISIBLE "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>sequence</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" GENERATED "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><ternary><condition><expr><name>isGeneratedAlways</name></expr> ?</condition><then> <expr><literal type="string">"ALWAYS"</literal></expr> </then><else>: <expr><literal type="string">"BY DEFAULT"</literal></expr></else></ternary></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" AS IDENTITY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>forMeta</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>sequence</name><operator>.</operator><name>getSequenceOptionsSQL</name></name><argument_list>(<argument><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>defaultExpression</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>isGeneratedAlways</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>defaultExpression</name><operator>.</operator><name>getEnclosedSQL</name></name><argument_list>(<argument><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" GENERATED ALWAYS AS "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DEFAULT_SQL_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>defaultExpression</name><operator>.</operator><name>getUnenclosedSQL</name></name><argument_list>(<argument><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" DEFAULT "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DEFAULT_SQL_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>onUpdateExpression</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>onUpdateExpression</name><operator>.</operator><name>getUnenclosedSQL</name></name><argument_list>(<argument><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" ON UPDATE "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DEFAULT_SQL_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>defaultOnNull</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" DEFAULT ON NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>forMeta</name> <operator>&amp;&amp;</operator> <name>sequence</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>sequence</name><operator>.</operator><name>getSQL</name></name><argument_list>(<argument><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" SEQUENCE "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DEFAULT_SQL_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>selectivity</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" SELECTIVITY "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>selectivity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>comment</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>StringUtils</name><operator>.</operator><name>quoteStringSQL</name></name><argument_list>(<argument><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" COMMENT "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>nullable</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" NOT NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>builder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isNullable</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>nullable</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Expression</name></type> <name>getDefaultExpression</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>defaultExpression</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Expression</name></type> <name>getEffectiveDefaultExpression</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="block">/*
         * Identity columns may not have a default expression and may not use an
         * expression from domain.
         *
         * Generated columns always have an own expression.
         */</comment>
        <if_stmt><if>if <condition>(<expr><name>sequence</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><ternary><condition><expr><name>defaultExpression</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>defaultExpression</name></expr>
                </then><else>: <expr><ternary><condition><expr><name>domain</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>domain</name><operator>.</operator><name>getEffectiveDefaultExpression</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Expression</name></type> <name>getOnUpdateExpression</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>onUpdateExpression</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Expression</name></type> <name>getEffectiveOnUpdateExpression</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="block">/*
         * Identity and generated columns may not have an on update expression
         * and may not use an expression from domain.
         */</comment>
        <if_stmt><if>if <condition>(<expr><name>sequence</name> <operator>!=</operator> <literal type="null">null</literal> <operator>||</operator> <name>isGeneratedAlways</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><ternary><condition><expr><name>onUpdateExpression</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>onUpdateExpression</name></expr>
                </then><else>: <expr><ternary><condition><expr><name>domain</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>domain</name><operator>.</operator><name>getEffectiveOnUpdateExpression</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Whether the column has any identity options.
     *
     * @return true if yes
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasIdentityOptions</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>identityOptions</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Set the identity options of this column.
     *
     * @param identityOptions
     *            identity column options
     * @param generatedAlways
     *            whether value should be always generated
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIdentityOptions</name><parameter_list>(<parameter><decl><type><name>SequenceOptions</name></type> <name>identityOptions</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>generatedAlways</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>identityOptions</name></name> <operator>=</operator> <name>identityOptions</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isGeneratedAlways</name></name> <operator>=</operator> <name>generatedAlways</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>removeNonIdentityProperties</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>removeNonIdentityProperties</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>nullable</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>onUpdateExpression</name> <operator>=</operator> <name>defaultExpression</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns identity column options, or {@code null} if sequence was already
     * created or this column is not an identity column.
     *
     * @return identity column options, or {@code null}
     */</comment>
    <function><type><specifier>public</specifier> <name>SequenceOptions</name></type> <name>getIdentityOptions</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>identityOptions</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDefaultOnNull</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>defaultOnNull</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>defaultOnNull</name></name> <operator>=</operator> <name>defaultOnNull</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDefaultOnNull</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>defaultOnNull</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Rename the column. This method will only set the column name to the new
     * value.
     *
     * @param newName the new column name
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>rename</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>newName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>newName</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Set the sequence to generate the value.
     *
     * @param sequence the sequence
     * @param generatedAlways whether the value of the sequence is always used
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSequence</name><parameter_list>(<parameter><decl><type><name>Sequence</name></type> <name>sequence</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>generatedAlways</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sequence</name></name> <operator>=</operator> <name>sequence</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isGeneratedAlways</name></name> <operator>=</operator> <name>generatedAlways</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>identityOptions</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>sequence</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>removeNonIdentityProperties</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>sequence</name><operator>.</operator><name>getDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMode</name><argument_list>()</argument_list></call><operator>.</operator><name>identityColumnsHaveDefaultOnNull</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>defaultOnNull</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Sequence</name></type> <name>getSequence</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>sequence</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the selectivity of the column. Selectivity 100 means values are
     * unique, 10 means every distinct value appears 10 times on average.
     *
     * @return the selectivity
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getSelectivity</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>selectivity</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>Constants</name><operator>.</operator><name>SELECTIVITY_DEFAULT</name></name></expr> </then><else>: <expr><name>selectivity</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Set the new selectivity of a column.
     *
     * @param selectivity the new value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSelectivity</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>selectivity</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>selectivity</name> <operator>=</operator> <ternary><condition><expr><name>selectivity</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>selectivity</name> <operator>&gt;</operator> <literal type="number">100</literal></expr> ?</condition><then> <expr><literal type="number">100</literal></expr> </then><else>: <expr><name>selectivity</name></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>selectivity</name></name> <operator>=</operator> <name>selectivity</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getDefaultSQL</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>defaultExpression</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr>
                </then><else>: <expr><call><name><name>defaultExpression</name><operator>.</operator><name>getUnenclosedSQL</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>DEFAULT_SQL_FLAGS</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getOnUpdateSQL</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name>onUpdateExpression</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr>
                </then><else>: <expr><call><name><name>onUpdateExpression</name><operator>.</operator><name>getUnenclosedSQL</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>DEFAULT_SQL_FLAGS</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setComment</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>comment</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>comment</name></name> <operator>=</operator> <ternary><condition><expr><name>comment</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>comment</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>comment</name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getComment</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>comment</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPrimaryKey</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>primaryKey</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>primaryKey</name></name> <operator>=</operator> <name>primaryKey</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Visit the default expression, the check constraint, and the sequence (if
     * any).
     *
     * @param visitor the visitor
     * @return true if every visited expression returned true, or if there are
     *         no expressions
     */</comment>
    <function><type><name>boolean</name></type> <name>isEverything</name><parameter_list>(<parameter><decl><type><name>ExpressionVisitor</name></type> <name>visitor</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>visitor</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ExpressionVisitor</name><operator>.</operator><name>GET_DEPENDENCIES</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>sequence</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>visitor</name><operator>.</operator><name>getDependencies</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>sequence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Expression</name></type> <name>e</name> <init>= <expr><call><name>getEffectiveDefaultExpression</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>e</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>e</name><operator>.</operator><name>isEverything</name></name><argument_list>(<argument><expr><name>visitor</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>getEffectiveOnUpdateExpression</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>e</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>e</name><operator>.</operator><name>isEverything</name></name><argument_list>(<argument><expr><name>visitor</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isPrimaryKey</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>primaryKey</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>name</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Check whether the new column is of the same type and not more restricted
     * than this column.
     *
     * @param newColumn the new (target) column
     * @return true if the new column is compatible
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isWideningConversion</name><parameter_list>(<parameter><decl><type><name>Column</name></type> <name>newColumn</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>TypeInfo</name></type> <name>newType</name> <init>= <expr><name><name>newColumn</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>valueType</name> <init>= <expr><call><name><name>type</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>valueType</name> <operator>!=</operator> <call><name><name>newType</name><operator>.</operator><name>getValueType</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>precision</name> <init>= <expr><call><name><name>type</name><operator>.</operator><name>getPrecision</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>newPrecision</name> <init>= <expr><call><name><name>newType</name><operator>.</operator><name>getPrecision</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>&gt;</operator> <name>newPrecision</name>
                <operator>||</operator> <name>precision</name> <operator>&lt;</operator> <name>newPrecision</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>valueType</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>CHAR</name></name> <operator>||</operator> <name>valueType</name> <operator>==</operator> <name><name>Value</name><operator>.</operator><name>BINARY</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>type</name><operator>.</operator><name>getScale</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>newType</name><operator>.</operator><name>getScale</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Objects</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>type</name><operator>.</operator><name>getExtTypeInfo</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>newType</name><operator>.</operator><name>getExtTypeInfo</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>nullable</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>newColumn</name><operator>.</operator><name>nullable</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>primaryKey</name> <operator>!=</operator> <name><name>newColumn</name><operator>.</operator><name>primaryKey</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>identityOptions</name> <operator>!=</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>newColumn</name><operator>.</operator><name>identityOptions</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>domain</name> <operator>!=</operator> <name><name>newColumn</name><operator>.</operator><name>domain</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>defaultExpression</name> <operator>!=</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>newColumn</name><operator>.</operator><name>defaultExpression</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>isGeneratedAlways</name> <operator>||</operator> <name><name>newColumn</name><operator>.</operator><name>isGeneratedAlways</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>onUpdateExpression</name> <operator>!=</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>newColumn</name><operator>.</operator><name>onUpdateExpression</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Copy the data of the source column into the current column.
     *
     * @param source the source column
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>copy</name><parameter_list>(<parameter><decl><type><name>Column</name></type> <name>source</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>name</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>domain</name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>domain</name></name></expr>;</expr_stmt>
        <comment type="line">// table is not set</comment>
        <comment type="line">// columnId is not set</comment>
        <expr_stmt><expr><name>nullable</name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>nullable</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>defaultExpression</name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>defaultExpression</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>onUpdateExpression</name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>onUpdateExpression</name></name></expr>;</expr_stmt>
        <comment type="line">// identityOptions field is not set</comment>
        <expr_stmt><expr><name>defaultOnNull</name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>defaultOnNull</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>sequence</name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>sequence</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>comment</name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>comment</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>generatedTableFilter</name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>generatedTableFilter</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>isGeneratedAlways</name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>isGeneratedAlways</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>selectivity</name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>selectivity</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>primaryKey</name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>primaryKey</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>visible</name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>visible</name></name></expr>;</expr_stmt>
    </block_content>}</block></function>

}</block></class>
</unit>
